{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\data-grid.component.jsx\";\nimport { faCheck, faCloudDownloadAlt, faCopy, faEye, faFileCsv, faFileExcel, faFileImport, faFilePdf, faLanguage, faPencilAlt, faPlus, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport { Grid, GridColumn, GridColumnMenuFilter, GridNoRecords, GridToolbar } from '@progress/kendo-react-grid';\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\nimport React from 'react';\nimport { Button, Card, Col, FormGroup, FormLabel, Image, Nav, Row } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { AtTableWrap, FontIconWrap, FormControlStatic } from '../data-grid/data-grid.styles';\nimport ColumnMenu from './ColumnMenu';\nimport SimpleGrid from './SimpleGrid'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport { faPaperPlane } from '@fortawesome/free-regular-svg-icons';\nimport { faHandHoldingWater, faInbox } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport parse from 'html-react-parser';\nimport { CSVLink } from \"react-csv\";\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport ReactTooltip from 'react-tooltip';\nimport { dynamicFileDownload } from '../../actions/ServiceAction';\nimport { ReactComponent as MailResend } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Mail Resend.svg\";\nimport { ReactComponent as Generate } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/generate-certificate.svg\";\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\nimport reject from \"../../assets/image/reject.svg\";\nimport { ReactComponent as SyncIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/sync.svg\";\nimport { ttfFont } from '../../assets/styles/ttfFont';\nimport { rearrangeDateFormatDateOnly } from \"../../components/CommonScript\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BarcodeButton from '../../pages/BarcodeTemplate/BarcodeButton';\nimport ExportButton from '../../pages/export&import/ExportButton';\nimport { transactionStatus } from '../Enumeration';\nimport { getActionIcon } from '../HoverIcons';\nimport CustomSwitch from '../custom-switch/custom-switch.component'; // import '../../assets/styles/unicode-font.css';\n\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\nimport { faPaperclip } from '@fortawesome/free-solid-svg-icons';\nimport CustomPopover from '../customPopover';\nimport { faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';\n\nclass DataGrid extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.detailBand = props => {\n      return /*#__PURE__*/React.createElement(Row, {\n        bsPrefix: \"margin_class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }, this.props.hasDynamicColSize ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }\n      }, this.props.detailedFieldList.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOREINFO\",\n        message: \"More Info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 54\n        }\n      })), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"form-static-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          marginLeft: -18\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 45\n        }\n      }, this.props.detailedFieldList.map(item => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: item.columnSize,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: item.idsName,\n          message: item.idsName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 76\n          }\n        })), /*#__PURE__*/React.createElement(FormControlStatic, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 65\n          }\n        }, props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' : item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: props.dataItem[item.dataField],\n          message: props.dataItem[item.dataField],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 95\n          }\n        }) : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField], item.dataType && item.dataType[0] === 'files' ? /*#__PURE__*/React.createElement(FontIconWrap, {\n          icon: faCloudDownloadAlt,\n          className: \"ml-2 className action-icons-wrap\",\n          size: \"lg\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_DOWNLOAD\"\n          }),\n          \"data-place\": \"left\",\n          onClick: () => this.props.dynamicFileDownload({ ...props.dataItem,\n            ...this.props.inputParam,\n            ...item,\n            userInfo: this.props.Login.userInfo,\n            ...this.props.viewFileURL\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faCloudDownloadAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 77\n          }\n        })) : \"\")));\n      })))))) : this.props.hasChild ? /*#__PURE__*/React.createElement(SimpleGrid, {\n        childList: this.props.childList.get(parseInt(props.dataItem[this.props.childMappingField])) || [],\n        extractedColumnList: this.props.childColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 29\n        }\n      }, this.props.detailedFieldList.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"row\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOREINFO\",\n        message: \"More Info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 62\n        }\n      })), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"form-static-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 49\n        }\n      }, this.props.detailedFieldList.map(item => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: item.idsName,\n          message: item.idsName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 84\n          }\n        })), /*#__PURE__*/React.createElement(FormControlStatic, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 73\n          }\n        }, props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' : item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: props.dataItem[item.dataField],\n          message: props.dataItem[item.dataField],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 99\n          }\n        }) : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField], item.dataType && item.dataType[0] === 'files' ? /*#__PURE__*/React.createElement(FontIconWrap, {\n          icon: faCloudDownloadAlt,\n          className: \"ml-2 className action-icons-wrap\",\n          size: \"lg\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_DOWNLOAD\"\n          }),\n          \"data-place\": \"left\",\n          onClick: () => this.props.dynamicFileDownload({ ...props.dataItem,\n            ...this.props.inputParam,\n            ...item,\n            userInfo: this.props.Login.userInfo,\n            ...this.props.viewFileURL\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 81\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faCloudDownloadAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 85\n          }\n        })) : \"\")));\n      }))))))), \" \");\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n\n      if (this.props.hasChild && event.value === true) {\n        event.dataItem.expanded = !isExpanded;\n        this.props.handleExpandChange(event, this.props.dataState);\n      } else {\n        event.dataItem.expanded = !isExpanded;\n        this.setState({\n          isExpanded\n        });\n      }\n    };\n\n    this.exportExcel = () => {\n      if (this.props.dataResult.data.length > 0) {\n        this._excelExport.save();\n      } else toast.info(this.props.intl.formatMessage({\n        id: \"IDS_NODATATOEXPORT\"\n      }));\n    };\n\n    this.exportExcelHeader = () => {\n      //  if (this.props.dataResult.data.length > 0) {\n      this._excelExportHeader.save(); // }\n      // else\n      //     toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\n\n    };\n\n    this.exportPDF = () => {\n      if (this.props.dataResult.data.length > 0) {\n        if (document.body.classList.contains(\"dark\")) {\n          document.body.classList.remove('dark');\n          document.body.classList.add('temp-dark');\n        }\n\n        this._pdfExport.save();\n\n        if (document.body.classList.contains(\"temp-dark\")) {\n          document.body.classList.add('dark');\n          document.body.classList.remove('temp-dark');\n        }\n      } else toast.info(this.props.intl.formatMessage({\n        id: \"IDS_NODATATOEXPORT\"\n      }));\n    };\n\n    this.handleClickDelete = (deleteParam, row) => {\n      //this.props.deleteRecord(deleteParam);\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.props.deleteRecord(deleteParam, row));\n    };\n\n    this.onClickActions = (event, master, action) => {\n      event.stopPropagation();\n      action.onClick({\n        master,\n        userInfo: this.props.userInfo\n      });\n      ReactTooltip.hide();\n    };\n\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  columnProps(field) {\n    if (!this.props.hideColumnFilter) {\n      const returntype = {\n        field: field,\n        columnMenu: ColumnMenu,\n        headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\n      };\n      return returntype;\n    }\n  }\n\n  isColumnActive(field, dataState) {\n    return GridColumnMenuFilter.active(field, dataState.filter);\n  }\n\n  iconGroupView(showIcon, selectedId) {\n    this.setState({\n      activeIconIndex: 0,\n      showIcon: !showIcon,\n      selectedId: selectedId\n    });\n  }\n\n  render() {\n    //const actionCount = this.props.actionIcons && this.props.actionIcons.filter(element => { return element.hidden === false }).length;\n    //console.log(\"controlMap:\", this.props);\n    //  loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\n    let activeIconIndex = null;\n    const methodUrl = this.props.methodUrl ? this.props.methodUrl : this.props.inputParam && this.props.inputParam.methodUrl;\n    const addId = this.props.controlMap && this.props.controlMap.has(\"Add\".concat(methodUrl)) && this.props.controlMap.get(\"Add\".concat(methodUrl)).ncontrolcode;\n    const editId = this.props.controlMap && this.props.controlMap.has(\"Edit\".concat(methodUrl)) && this.props.controlMap.get(\"Edit\".concat(methodUrl)).ncontrolcode;\n    const barcodeId = this.props.controlMap && this.props.controlMap.has(\"Barcode\".concat(methodUrl)) && this.props.controlMap.get(\"Barcode\".concat(methodUrl)).ncontrolcode;\n    const syncId = this.props.controlMap && this.props.controlMap.has(\"ManualSync\".concat(methodUrl)) && this.props.controlMap.get(\"ManualSync\".concat(methodUrl)).ncontrolcode; // {/* janakumar  Added the download button for sample receving */}\n\n    const SampleReceivingReportId = this.props.controlMap && this.props.controlMap.has(\"SampleReceivingReport\") && this.props.controlMap.get(\"SampleReceivingReport\").ncontrolcode;\n    {\n      /* Add by Neeraj kumar for Language screen -RMTP-101*/\n    }\n    const languagesId = this.props.controlMap && this.props.controlMap.has(\"Update\".concat(methodUrl)) && this.props.controlMap.get(\"Update\".concat(methodUrl)).ncontrolcode; //\tALPD-5322\tEnabled view button for Out Of Specification screen by Vishakh\n\n    const viewId = this.props.controlMap && this.props.controlMap.has(\"View\".concat(methodUrl)) && this.props.controlMap.get(\"View\".concat(methodUrl)).ncontrolcode;\n    const deleteId = this.props.controlMap && this.props.controlMap.has(\"Delete\".concat(methodUrl)) && this.props.controlMap.get(\"Delete\".concat(methodUrl)).ncontrolcode; // const defaultId = this.props.controlMap && this.props.controlMap.has(\"Default\".concat(methodUrl))\n    //     && this.props.controlMap.get(\"Default\".concat(methodUrl)).ncontrolcode;\n\n    const approveId = this.props.controlMap && this.props.controlMap.has(\"Approve\".concat(methodUrl)) && this.props.controlMap.get(\"Approve\".concat(methodUrl)).ncontrolcode;\n    const copyId = this.props.controlMap && this.props.inputParam && this.props.controlMap.has(\"Copy\".concat(methodUrl)) && this.props.controlMap.get(\"Copy\".concat(methodUrl)).ncontrolcode;\n    const completeId = this.props.controlMap && this.props.controlMap.has(\"Complete\".concat(methodUrl)) && this.props.controlMap.get(\"Complete\".concat(methodUrl)).ncontrolcode;\n    const switchId = this.props.controlMap && this.props.switchParam && this.props.controlMap.has(this.props.switchParam.operation.concat(methodUrl)) && this.props.controlMap.get(this.props.switchParam.operation.concat(methodUrl)).ncontrolcode;\n    const cancelId = this.props.controlMap && this.props.controlMap.has(\"Cancel\".concat(methodUrl)) && this.props.controlMap.get(\"Cancel\".concat(methodUrl)).ncontrolcode; // const receiveGoodsId = this.props.controlMap.has(\"Receive\".concat(methodUrl))\n    //     && this.props.controlMap.get(\"Receive\".concat(methodUrl)).ncontrolcode;\n\n    const downloadId = this.props.controlMap && this.props.controlMap.has(\"Download\".concat(methodUrl)) && this.props.controlMap.get(\"Download\".concat(methodUrl)).ncontrolcode;\n    const resentId = this.props.controlMap && this.props.controlMap.has(\"Resent\") && this.props.controlMap.get(\"Resent\").ncontrolcode;\n    const SendToSubContractorId = this.props.controlMap && this.props.controlMap.has(\"SendToSubContractor\") && this.props.controlMap.get(\"SendToSubContractor\").ncontrolcode;\n    const ReceivedBySTTId = this.props.controlMap && this.props.controlMap.has(\"ReceivedBySTT\") && this.props.controlMap.get(\"ReceivedBySTT\").ncontrolcode;\n    const ResultReceivedId = this.props.controlMap && this.props.controlMap.has(\"ResultReceived\") && this.props.controlMap.get(\"ResultReceived\").ncontrolcode;\n    const selectedId = this.props.selectedId; // const confirmMessage = new ConfirmMessage();\n    //console.log(\"props:\",this.props);\n\n    const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.Login.userInfo.slanguagetypecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 21\n      }\n    }, this.props.iscsv ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      data: this.props.ELNTest ? this.props.ELNTest : this.props.data,\n      filename: this.props.selectedfilename + \".csv\",\n      headers: this.props.batchCSViewList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 45\n      }\n    }, this.props.ELNTest ? this.props.intl.formatMessage({\n      id: \"IDS_EXPORTTOELN\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_EXPORTCSV\"\n    })))), /*#__PURE__*/React.createElement(\"style\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 33\n      }\n    }, ttfFont)) : \"\", /*#__PURE__*/React.createElement(ExcelExport, {\n      data: process(this.props.data || [], {\n        sort: this.props.dataState.sort,\n        filter: this.props.dataState.filter,\n        group: this.props.dataState.group\n      }).data,\n      filterable: true // fileName={this.props.inputParam && this.props.intl.formatMessage({ id: this.props.inputParam.displayName })}\n      ,\n      group: this.props.dataState.group,\n      ref: exporter => {\n        // console.log(exporter);\n        this._excelExport = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: this.props.dataResult && this.props.dataResult.length > 0 || this.props.extractedColumnList && this.props.extractedColumnList.length > 0 ? \"active-paging\" : \"no-paging\",\n      style: {\n        height: this.props.gridHeight,\n        width: this.props.gridWidth\n      },\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: this.props.scrollable,\n      pageable: this.props.pageable && this.props.data && this.props.data.length > 0 ? {\n        buttonCount: 5,\n        pageSizes: pageSizes,\n        previousNext: false\n      } : false // pageable={this.props.pageable ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : \"\"}\n      ,\n      groupable: this.props.groupfooter ? {\n        enabled: false,\n        footer: \"visible\"\n      } : this.props.groupable ? true : false,\n      detail: this.props.hideDetailBand ? false : this.detailBand,\n      expandField: (this.props.detailedFieldList && this.props.detailedFieldList.length > 0 || this.props.childColumnList && this.props.childColumnList.length > 0) && this.props.expandField ? this.props.expandField : false,\n      onExpandChange: this.expandChange,\n      data: this.props.dataResult,\n      total: this.props.total\n    }, this.props.dataState, {\n      selectedField: \"selected\",\n      onRowClick: this.props.handleRowClick,\n      onDataStateChange: this.props.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(GridNoRecords, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })), this.props.isToolBarRequired ? /*#__PURE__*/React.createElement(GridToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 37\n      }\n    }, this.props.isAddRequired === false ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(addId) === -1,\n      onClick: () => this.props.addRecord(addId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 49\n      }\n    })), this.props.isSyncRequired === false ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey ml-2 nav-link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_SYNC\"\n      }),\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(syncId) === -1,\n      onClick: () => this.props.syncData(syncId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(SyncIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 49\n      }\n    })), this.props.isCustomButton ? this.props.customButtonlist.map(button => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey p-0\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: button.label\n        }) // data-for=\"tooltip-grid-wrap\"\n        ,\n        hidden: button.hidden,\n        onClick: button.onClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 53\n        }\n      }, getActionIcon(button.controlname)));\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null), this.props.isRefreshRequired === false ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey p-0\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: () => this.props.reloadData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      className: \"custom_icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 49\n      }\n    })), this.props.isExportImportRequired === false ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(ExportButton, {\n      userRoleControlRights: this.props.userRoleControlRights //selectedMaster={row[\"dataItem\"]}\n      ,\n      userInfo: this.props.userInfo,\n      controlMap: this.props.controlMap,\n      exportUrl: \"Export\" + methodUrl,\n      importUrl: \"Import\" + methodUrl,\n      screenName: this.props.screenName,\n      isDataGrid: true,\n      detailedFieldList: this.props.detailedFieldList,\n      extractedColumnList: this.props.extractedColumnList,\n      settings: this.props.settings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 43\n      }\n    }), this.props.isImportRequired === true ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EXPORTTEMPLATE\"\n      }) //data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: this.exportExcelHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_IMPORTDATA\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: () => this.props.import(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileImport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 53\n      }\n    }))) : \"\", this.props.isDownloadPDFRequired === false ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADPDF\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: this.exportPDF,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFilePdf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 49\n      }\n    })), this.props.isDownloadExcelRequired === false ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADEXCEL\"\n      }) //data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: this.exportExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 49\n      }\n    })), this.props.isExportExcelRequired === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADCSV\"\n      }) //data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: () => this.props.exportExcelNew(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileCsv,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 49\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null), this.props.isDownloadButtonOn === true ?\n    /*#__PURE__*/\n    //janakumar --> Added the sample reciving screen report button \n    React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey ml-2 nav-link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PENDINGSAMPLETORECEIVEREPORT\"\n      }),\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(SampleReceivingReportId) === -1,\n      onClick: () => this.props.samplereceivingData(SampleReceivingReportId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Generate, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 49\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null), this.props.extractedColumnList.map((item, index) => item.idsName && /*#__PURE__*/React.createElement(GridColumn, Object.assign({\n      key: index // data-tip={this.props.intl.formatMessage({ id: item.idsName })}\n      ,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      })\n    }, this.columnProps(item.dataField), {\n      width: item.width,\n      cell: row => row.rowType === \"groupFooter\" ? item.dataField === this.props.aggregatedColumn ? /*#__PURE__*/React.createElement(\"td\", {\n        \"aria-colindex\": row.columnIndex,\n        role: \"gridcell\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 57\n        }\n      }, this.props.intl.formatMessage({\n        id: this.props.aggregateLabel\n      }), \" :\", row.dataItem.aggregates[this.props.aggregatedColumn].sum) : null : row.rowType === \"groupHeader\" ? null : item.componentName === \"switch\" ? /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        disabled: item.needRights ? this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(this.props.controlMap.has(item.controlName) && this.props.controlMap.get(item.controlName).ncontrolcode) === -1 : false,\n        onChange: event => this.props.onSwitchChange({ ...this.props.switchParam,\n          selectedRecord: row[\"dataItem\"],\n          ncontrolCode: switchId\n        }, event),\n        checked: row[\"dataItem\"][item.switchFieldName] === item.switchStatus ? true : false,\n        name: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 65\n        }\n      })) : //switch without logic\n      item.componentName === \"toggle\" ? /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        disabled: item.needRights ? this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(this.props.controlMap.has(item.controlName) && this.props.controlMap.get(item.controlName).ncontrolcode) === -1 : false,\n        onChange: event => this.props.onToggleChange({ ...this.props.switchParam,\n          selectedRecord: row[\"dataItem\"],\n          ncontrolCode: switchId\n        }, item, event),\n        checked: row[\"dataItem\"][item.switchFieldName] === transactionStatus.YES ? true : false,\n        name: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 69\n        }\n      })) : item.componentName === \"checkbox\" ? /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(FormCheckbox, {\n        name: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        type: \"checkbox\",\n        value: row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false,\n        isMandatory: false,\n        required: false //checked={row[\"dataItem\"][item.checkBoxField] === item.switchStatus ? true : false}\n        ,\n        checked: row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false,\n        onChange: event => this.props.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 73\n        }\n      })) : item.fieldType === \"gradeColumn\" ? row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] // data-for=\"tooltip_grid_wrap\"\n        ,\n        className: `${selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}`,\n        style: {\n          color: [row[\"dataItem\"]['scolorhexcode']]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 77\n        }\n      }, row[\"dataItem\"][item.dataField]) : item.fieldType === \"attachment\" && row[\"dataItem\"][item.dataField] ? /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        className: selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCloudDownloadAlt,\n        className: \"ml-2 className action-icons-wrap\",\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DOWNLOADFILE\"\n        }),\n        onClick: () => this.props.viewFile({ ...this.props.attachmentParam,\n          inputData: {\n            selectedRecord: row[\"dataItem\"],\n            userinfo: this.props.userInfo\n          }\n        }, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 81\n        }\n      }), \" \", row[\"dataItem\"][item.dataField]) : /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] //data-for=\"tooltip-grid-wrap\"\n        ,\n        className: selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 73\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 96\n        }\n      }) : item.fieldType === \"dateOnlyFormat\" ? rearrangeDateFormatDateOnly(this.props.Login.userInfo, row[\"dataItem\"][item.dataField]) : row[\"dataItem\"][item.dataField] // : row[\"dataItem\"][item.dataField] ? row[\"dataItem\"][item.dataField] :\n      //     this.props.jsonField ? row[\"dataItem\"][this.props.jsonField] &&\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField]&&\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField]['label'] ||\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField]\n      , \"       \", item.dataType && item.dataType[0] === 'files' ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        icon: faCloudDownloadAlt,\n        className: \"ml-2 className action-icons-wrap\",\n        size: \"lg\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DOWNLOAD\"\n        }),\n        \"data-place\": \"left\",\n        onClick: () => this.props.dynamicFileDownload({ ...item,\n          ...row.dataItem,\n          userInfo: this.props.Login.userInfo,\n          ...this.props.viewFileURL\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 85\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCloudDownloadAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 89\n        }\n      })) : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 41\n      }\n    }))), this.props.isActionRequired ? /*#__PURE__*/React.createElement(GridColumn, {\n      locked: true,\n      headerClassName: \"text-center\",\n      title: this.props.intl.formatMessage({\n        id: 'IDS_ACTION'\n      }),\n      sort: false,\n      cell: (row, index) => row.rowType === \"groupFooter\" ? null : row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        className: `k-grid-content-sticky k-command-cell pl-0 selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`,\n        style: {\n          left: '0',\n          right: '0',\n          borderRightWidth: '1px',\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, this.props.groupIconAction ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        className: `vertical-dots end-icon ${this.props.listMasterShowIcon === 0 ? \"centericon\" : \"\"}`,\n        onClick: () => this.iconGroupView(this.state != null ? this.state.showIcon : false, row[\"dataItem\"][this.props.primaryKeyField]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 63\n        }\n      })) : '', this.props.groupIconAction && this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map((action, index) => index + 1 <= this.props.listMasterShowIcon ? /*#__PURE__*/React.createElement(\"span\", {\n        className: `${this.state && this.state.showIcon && this.state.selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'disableIcon' : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 652,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": action.title,\n        \"data-place\": action.dataplace && action.dataplace ? action.dataplace : \"\",\n        hidden: action.hidden === undefined ? true : action.hidden,\n        onClick: event => action.onClick(row[\"dataItem\"], this.props.userInfo, this.props.masterdata, action),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 69\n        }\n      }, getActionIcon(action.controlname))) : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: `icon-group-wrap ${this.props.groupIconAction && this.props.actionIcons && this.props.listMasterShowIcon ? \"enable-view\" : \"\"}${\" click-view\"} ${this.state && this.state.showIcon && this.state.selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? \"ss active\" : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 53\n        }\n      }, this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map((action, index) => index + 1 > this.props.listMasterShowIcon ? /*#__PURE__*/React.createElement(\"span\", {\n        className: `${this.state && this.state.showIcon && this.state.selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'disable-view' : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": action.title,\n        \"data-place\": action.dataplace && action.dataplace ? action.dataplace : \"\",\n        hidden: action.hidden === undefined ? true : action.hidden,\n        onClick: event => action.onClick(row[\"dataItem\"], this.props.userInfo, this.props.masterdata, action),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 69\n        }\n      }, getActionIcon(action.controlname))) : \"\")), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }) // data-for=\"tooltip-grid-wrap\"\n        ,\n        \"data-place\": \"left\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1,\n        onClick: () => this.props.fetchRecord({ ...this.props.editParam,\n          primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField],\n          editRow: row[\"dataItem\"],\n          ncontrolCode: editId\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(BarcodeButton, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        selectedMaster: row[\"dataItem\"],\n        userInfo: this.props.userInfo,\n        controlMap: this.props.controlMap,\n        methodUrl: \"Barcode\" + methodUrl,\n        screenName: this.props.screenName,\n        isDataGrid: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 61\n        }\n      }), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSYNONYMN\"\n        }) //  data-for=\"tooltip-grid-wrap\"\n        ,\n        \"data-place\": \"left\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(languagesId) === -1,\n        onClick: () => this.props.languagesRecord({ ...this.props.languagesParam,\n          primaryKeyValue: row[\"dataItem\"][this.props.languagesParam.primaryKeyField],\n          languagesRow: row[\"dataItem\"],\n          ncontrolCode: languagesId\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 789,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faLanguage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 796,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        className: \"d-font-icon action-icons-wrap\",\n        icon: faEye,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewId) === -1,\n        onClick: () => this.props.viewRecord({ ...this.props.viewParam,\n          primaryKeyValue: row[\"dataItem\"][this.props.viewParam.primaryKeyField],\n          viewRow: row[\"dataItem\"],\n          ncontrolCode: viewId,\n          row\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 800,\n          columnNumber: 61\n        }\n      }), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        \"data-place\": \"top\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1,\n        onClick: () => this.handleClickDelete({ ...this.props.deleteParam,\n          selectedRecord: row[\"dataItem\"],\n          ncontrolCode: deleteId\n        }, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(downloadId) === -1,\n        onClick: () => this.props.viewDownloadFile({ ...this.props.masterdata,\n          ...this.props.downloadParam,\n          inputData: { ...row[\"dataItem\"],\n            userinfo: this.props.Login.userInfo\n          },\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: downloadId\n        }, row),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DOWNLOADFILE\"\n        }),\n        \"data-place\": \"left\" //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 826,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCloudDownloadAlt //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 832,\n          columnNumber: 65\n        }\n      })), this.props.isreportview ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\" //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewreport) === -1}\n        ,\n        onClick: () => this.props.viewReportFile({ ...this.props.masterdata,\n          ...this.props.downloadParam,\n          inputData: { ...row[\"dataItem\"],\n            userinfo: this.props.Login.userInfo\n          },\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: downloadId\n        }, row),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_VIEWREPORT\"\n        }),\n        \"data-place\": \"left\" //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faEye //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 843,\n          columnNumber: 69\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_APPROVE\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(approveId) === -1,\n        onClick: () => this.props.approveRecord(row, \"Approve\", approveId),\n        \"data-place\": \"left\" //data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faThumbsUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COPY\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(copyId) === -1,\n        onClick: () => this.props.copyRecord(row, \"Copy\", copyId),\n        \"data-place\": \"left\" // data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCopy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 876,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(completeId) === -1,\n        onClick: () => this.props.completeRecord(row[\"dataItem\"], \"Complete\", completeId),\n        \"data-place\": \"left\" // data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 879,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheck,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 884,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_RESENT\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(resentId) === -1,\n        onClick: () => this.props.reSent(row[\"dataItem\"], \"Resent\", resentId),\n        \"data-place\": \"left\" //data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 887,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(MailResend, {\n        width: \"24px\",\n        className: \"svg-inline--fa\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 892,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        \"data-place\": \"left\" //data-for=\"tooltip-grid-wrap\"\n        ,\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(cancelId) === -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 897,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Image, {\n        src: reject,\n        alt: \"filer-icon action-icons-wrap\",\n        width: \"20\",\n        height: \"20\",\n        className: \"ActionIconColor img-normalize\",\n        onClick: () => this.props.cancelRecord(row[\"dataItem\"], \"Cancel\", cancelId),\n        \"data-place\": \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 899,\n          columnNumber: 65\n        }\n      })), !this.props.groupIconAction && this.props.actionIcons ? this.props.actionIcons.length > 0 ? this.props.actionIcons.map(action => /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": action.title,\n        hidden: action.hidden === undefined ? true : action.hidden,\n        onClick: () => action.onClick(row[\"dataItem\"], action, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 911,\n          columnNumber: 65\n        }\n      }, getActionIcon(action.controlname))) : \"\" : \"\", this.props.hasControlWithOutRights ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.showeditRecordWORights ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }) //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \n        ,\n        \"data-place\": \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 922,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\n        ,\n        name: \"deleteworights\",\n        onClick: () => this.props.editRecordWORights(row[\"dataItem\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 925,\n          columnNumber: 77\n        }\n      })) : \"\", this.props.showeditRecordWORights ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_LANGUAGESCONVERTER\"\n        }) //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \n        ,\n        \"data-place\": \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 934,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faLanguage //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\n        ,\n        name: \"deleteworights\",\n        onClick: () => this.props.editRecordWORights(row[\"dataItem\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 937,\n          columnNumber: 77\n        }\n      })) : \"\", this.props.showdeleteRecordWORights ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }) // data-for=\"tooltip-grid-wrap\"\n        ,\n        onClick: () => this.props.deleteRecordWORights(row[\"dataItem\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 946,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\n        ,\n        name: \"deleteworights\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 949,\n          columnNumber: 81\n        }\n      })) : \"\") : \"\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 37\n      }\n    }) : \"\"), [...this.props.extractedColumnList].map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }) + (item.dateField ? '(dd-mm-yyy)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 33\n      }\n    })), this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }) + (item.dateField ? '(dd-mm-yyy)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 970,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [] //group={group}\n      ,\n      collapsible: true,\n      fileName: this.props.screenName && this.props.screenName,\n      ref: exporter => {\n        // console.log(exporter);\n        this._excelExportHeader = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 25\n      }\n    }, this.props.isImportRequired === true ? this.props.exportFieldList && this.props.exportFieldList.length > 0 ? this.props.exportFieldList.map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.dataField\n      }) + '(' + this.props.intl.formatMessage({\n        id: item.idsName\n      }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 989,\n        columnNumber: 45\n      }\n    })) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.extractedColumnList && this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.dataField\n      }) + '(' + this.props.intl.formatMessage({\n        id: item.idsName\n      }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 49\n      }\n    })), this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.dataField\n      }) + '(' + this.props.intl.formatMessage({\n        id: item.idsName\n      }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997,\n        columnNumber: 49\n      }\n    }))) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.extractedColumnList && this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.dataField\n      }) + '(' + this.props.intl.formatMessage({\n        id: item.idsName\n      }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 45\n      }\n    })), this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.dataField\n      }) + '(' + this.props.intl.formatMessage({\n        id: item.idsName\n      }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 45\n      }\n    }))))), this.props.isToolBarRequired ? /*#__PURE__*/React.createElement(\"ttfStyle\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1028,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(GridPDFExport, {\n      ref: element => {\n        this._pdfExport = element;\n      },\n      margin: \"1cm\" // paperSize= \"A4\"\n      ,\n      scale: 0.75,\n      fileName: \"Export.pdf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1029,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      data: process(this.props.data || [], {\n        sort: this.props.dataState.sort,\n        filter: this.props.dataState.filter,\n        group: this.props.dataState.group\n      }),\n      group: this.props.dataState.group,\n      groupable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1037,\n        columnNumber: 41\n      }\n    }, this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(GridColumn, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      field: item.dataField,\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1044,\n          columnNumber: 57\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 76\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1039,\n        columnNumber: 49\n      }\n    })), this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) => /*#__PURE__*/React.createElement(GridColumn, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      field: item.dataField,\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1058,\n          columnNumber: 61\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1059,\n          columnNumber: 84\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 53\n      }\n    })))), /*#__PURE__*/React.createElement(\"style\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1069,\n        columnNumber: 33\n      }\n    }, ttfFont)) : \"\"));\n  }\n\n  componentDidUpdate() {\n    ReactTooltip.rebuild();\n    if (this.state == null) this.setState({\n      showIcon: false\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  dynamicFileDownload,\n  undefined\n})(injectIntl(DataGrid));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/components/data-grid/data-grid.component.jsx"],"names":["faCheck","faCloudDownloadAlt","faCopy","faEye","faFileCsv","faFileExcel","faFileImport","faFilePdf","faLanguage","faPencilAlt","faPlus","faThumbsUp","faTrashAlt","FontAwesomeIcon","ExcelExport","ExcelExportColumn","Grid","GridColumn","GridColumnMenuFilter","GridNoRecords","GridToolbar","GridPDFExport","React","Button","Card","Col","FormGroup","FormLabel","Image","Nav","Row","FormattedMessage","injectIntl","AtTableWrap","FontIconWrap","FormControlStatic","ColumnMenu","SimpleGrid","faPaperPlane","faHandHoldingWater","faInbox","process","LocalizationProvider","parse","CSVLink","connect","toast","ReactTooltip","dynamicFileDownload","ttfFont","rearrangeDateFormatDateOnly","ConfirmMessage","BarcodeButton","ExportButton","transactionStatus","getActionIcon","CustomSwitch","FormCheckbox","faPaperclip","CustomPopover","faChevronCircleDown","DataGrid","Component","constructor","props","detailBand","hasDynamicColSize","detailedFieldList","length","marginLeft","map","item","columnSize","idsName","dataItem","dataField","undefined","isIdsField","isHTML","dataType","intl","formatMessage","id","inputParam","userInfo","Login","viewFileURL","hasChild","childList","get","parseInt","childMappingField","childColumnList","expandChange","event","isExpanded","expanded","aggregates","value","handleExpandChange","dataState","setState","exportExcel","dataResult","data","_excelExport","save","info","exportExcelHeader","_excelExportHeader","exportPDF","document","body","classList","contains","remove","add","_pdfExport","handleClickDelete","deleteParam","row","confirmMessage","confirm","deleteRecord","onClickActions","master","action","stopPropagation","onClick","hide","columnProps","field","hideColumnFilter","returntype","columnMenu","headerClassName","isColumnActive","active","filter","iconGroupView","showIcon","selectedId","activeIconIndex","render","methodUrl","addId","controlMap","has","concat","ncontrolcode","editId","barcodeId","syncId","SampleReceivingReportId","languagesId","viewId","deleteId","approveId","copyId","completeId","switchId","switchParam","operation","cancelId","downloadId","resentId","SendToSubContractorId","ReceivedBySTTId","ResultReceivedId","pageSizes","settings","split","setting","actionColWidth","slanguagetypecode","iscsv","ELNTest","selectedfilename","batchCSViewList","sort","group","exporter","extractedColumnList","height","gridHeight","width","gridWidth","scrollable","pageable","buttonCount","previousNext","groupfooter","enabled","footer","groupable","hideDetailBand","expandField","total","handleRowClick","dataStateChange","isToolBarRequired","isAddRequired","userRoleControlRights","indexOf","addRecord","isSyncRequired","syncData","isCustomButton","customButtonlist","button","label","hidden","controlname","isRefreshRequired","reloadData","isExportImportRequired","screenName","isImportRequired","import","isDownloadPDFRequired","isDownloadExcelRequired","isExportExcelRequired","exportExcelNew","isDownloadButtonOn","samplereceivingData","index","rowType","aggregatedColumn","columnIndex","aggregateLabel","sum","componentName","textAlign","primaryKeyField","dataIndex","needRights","controlName","onSwitchChange","selectedRecord","ncontrolCode","switchFieldName","switchStatus","onToggleChange","YES","checkBoxField","onInputOnChange","fieldType","color","viewFile","attachmentParam","inputData","userinfo","isActionRequired","left","right","borderRightWidth","groupIconAction","listMasterShowIcon","state","actionIcons","title","dataplace","masterdata","fetchRecord","editParam","primaryKeyValue","editRow","languagesRecord","languagesParam","languagesRow","viewRecord","viewParam","viewRow","viewDownloadFile","downloadParam","isreportview","viewReportFile","approveRecord","copyRecord","completeRecord","reSent","reject","cancelRecord","hasControlWithOutRights","showeditRecordWORights","editRecordWORights","showdeleteRecordWORights","deleteRecordWORights","dateField","exportFieldList","element","componentDidUpdate","rebuild","mapStateToProps"],"mappings":"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","sourcesContent":["import {\r\n    faCheck,\r\n    faCloudDownloadAlt,\r\n    faCopy,\r\n    faEye,\r\n    faFileCsv,\r\n    faFileExcel,\r\n    faFileImport,\r\n    faFilePdf,\r\n    faLanguage,\r\n    faPencilAlt,\r\n    faPlus,\r\n    faThumbsUp,\r\n    faTrashAlt\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport { Grid, GridColumn, GridColumnMenuFilter, GridNoRecords, GridToolbar } from '@progress/kendo-react-grid';\r\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\r\nimport React from 'react';\r\nimport { Button, Card, Col, FormGroup, FormLabel, Image, Nav, Row } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { AtTableWrap, FontIconWrap, FormControlStatic } from '../data-grid/data-grid.styles';\r\nimport ColumnMenu from './ColumnMenu';\r\nimport SimpleGrid from './SimpleGrid';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport { faPaperPlane } from '@fortawesome/free-regular-svg-icons';\r\nimport { faHandHoldingWater, faInbox } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport parse from 'html-react-parser';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { dynamicFileDownload } from '../../actions/ServiceAction';\r\nimport { ReactComponent as MailResend } from '../../assets/image/Mail Resend.svg';\r\nimport { ReactComponent as Generate } from '../../assets/image/generate-certificate.svg';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\nimport reject from '../../assets/image/reject.svg';\r\nimport { ReactComponent as SyncIcon } from '../../assets/image/sync.svg';\r\nimport { ttfFont } from '../../assets/styles/ttfFont';\r\nimport { rearrangeDateFormatDateOnly } from \"../../components/CommonScript\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BarcodeButton from '../../pages/BarcodeTemplate/BarcodeButton';\r\nimport ExportButton from '../../pages/export&import/ExportButton';\r\nimport { transactionStatus } from '../Enumeration';\r\nimport { getActionIcon } from '../HoverIcons';\r\nimport CustomSwitch from '../custom-switch/custom-switch.component'; // import '../../assets/styles/unicode-font.css';\r\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\r\nimport { faPaperclip } from '@fortawesome/free-solid-svg-icons';\r\nimport CustomPopover from '../customPopover';\r\nimport { faChevronCircleDown } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass DataGrid extends React.Component {\r\n\r\n    _pdfExport;\r\n    _excelExport;\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n    }\r\n\r\n\r\n    detailBand = (props) => {\r\n\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                    {this.props.hasDynamicColSize ?\r\n                        <div>\r\n                            {this.props.detailedFieldList.length > 0 &&\r\n                                <div>\r\n                                    <Card>\r\n                                        <Card.Header><FormattedMessage id=\"IDS_MOREINFO\" message=\"More Info\" /></Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row style={{ marginLeft: -18 }}>\r\n                                                {this.props.detailedFieldList.map((item) => {\r\n                                                    return (\r\n\r\n                                                        <Col md={item.columnSize}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id={item.idsName} message={item.idsName} /></FormLabel>\r\n                                                                <FormControlStatic>\r\n                                                                    {\r\n                                                                        props.dataItem[item.dataField] === undefined ||\r\n                                                                            props.dataItem[item.dataField] === null ||\r\n                                                                            props.dataItem[item.dataField].length === 0 ? '-' :\r\n                                                                            item.isIdsField ? <FormattedMessage id={props.dataItem[item.dataField]} message={props.dataItem[item.dataField]} /> :\r\n                                                                                item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField]}\r\n                                                                    {item.dataType && item.dataType[0] === 'files' ?\r\n                                                                        <FontIconWrap icon={faCloudDownloadAlt} className=\"ml-2 className action-icons-wrap\" size=\"lg\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOAD\" })}\r\n                                                                            data-place=\"left\"\r\n                                                                            onClick={() => this.props.dynamicFileDownload({ ...props.dataItem, ...this.props.inputParam, ...item, userInfo: this.props.Login.userInfo, ...this.props.viewFileURL })}>\r\n                                                                            <FontAwesomeIcon icon={faCloudDownloadAlt} />\r\n                                                                        </FontIconWrap> : \"\"\r\n                                                                    }\r\n                                                                </FormControlStatic>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    )\r\n                                                })}\r\n                                            </Row>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n\r\n                        : this.props.hasChild ?\r\n                            <SimpleGrid childList={this.props.childList.get(parseInt(props.dataItem[this.props.childMappingField])) || []}\r\n                                extractedColumnList={this.props.childColumnList} />\r\n                            :\r\n                            <div>\r\n\r\n                                {this.props.detailedFieldList.length > 0 &&\r\n                                    <div>\r\n                                        <row>\r\n                                            <Card>\r\n                                                <Card.Header><FormattedMessage id=\"IDS_MOREINFO\" message=\"More Info\" /></Card.Header>\r\n                                                <Card.Body className=\"form-static-wrap\">\r\n                                                    {\r\n                                                        this.props.detailedFieldList.map((item) => {\r\n                                                            return (\r\n\r\n                                                                <Col md={6}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id={item.idsName} message={item.idsName} /></FormLabel>\r\n                                                                        <FormControlStatic>\r\n                                                                            {props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' :\r\n                                                                                item.isIdsField ? <FormattedMessage id={props.dataItem[item.dataField]} message={props.dataItem[item.dataField]} /> : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField]}\r\n\r\n                                                                            {item.dataType && item.dataType[0] === 'files' ?\r\n                                                                                <FontIconWrap icon={faCloudDownloadAlt} className=\"ml-2 className action-icons-wrap\" size=\"lg\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOAD\" })}\r\n                                                                                    data-place=\"left\"\r\n                                                                                    onClick={() => this.props.dynamicFileDownload({ ...props.dataItem, ...this.props.inputParam, ...item, userInfo: this.props.Login.userInfo, ...this.props.viewFileURL })}>\r\n                                                                                    <FontAwesomeIcon icon={faCloudDownloadAlt} />\r\n                                                                                </FontIconWrap> : \"\"\r\n                                                                            }\r\n                                                                        </FormControlStatic>\r\n                                                                    </FormGroup>\r\n\r\n                                                                </Col>\r\n                                                            )\r\n                                                        })}\r\n\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </row>\r\n                                    </div>\r\n                                }\r\n\r\n                            </div>}\r\n                </Col> </Row>\r\n        )\r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        if (this.props.hasChild && event.value === true) {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.props.handleExpandChange(event, this.props.dataState)\r\n        }\r\n        else {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.setState({ isExpanded });\r\n        }\r\n    }\r\n\r\n\r\n    exportExcel = () => {\r\n        if (this.props.dataResult.data.length > 0) {\r\n            this._excelExport.save();\r\n        }\r\n        else\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    exportExcelHeader = () => {\r\n        //  if (this.props.dataResult.data.length > 0) {\r\n        this._excelExportHeader.save();\r\n        // }\r\n        // else\r\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    exportPDF = () => {\r\n        if (this.props.dataResult.data.length > 0) {\r\n            if (document.body.classList.contains(\"dark\")) {\r\n                document.body.classList.remove('dark');\r\n                document.body.classList.add('temp-dark');\r\n            }\r\n            this._pdfExport.save();\r\n            if (document.body.classList.contains(\"temp-dark\")) {\r\n                document.body.classList.add('dark');\r\n                document.body.classList.remove('temp-dark');\r\n            }\r\n        }\r\n        else\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    columnProps(field) {\r\n        if (!this.props.hideColumnFilter) {\r\n\r\n            const returntype = {\r\n                field: field,\r\n                columnMenu: ColumnMenu,\r\n                headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\r\n            }\r\n            return returntype;\r\n        }\r\n    }\r\n\r\n    isColumnActive(field, dataState) {\r\n        return GridColumnMenuFilter.active(field, dataState.filter)\r\n    }\r\n\r\n    handleClickDelete = (deleteParam, row) => {\r\n        //this.props.deleteRecord(deleteParam);\r\n\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.props.deleteRecord(deleteParam, row));\r\n    }\r\n\r\n    iconGroupView(showIcon,selectedId) {\r\n        this.setState({ activeIconIndex: 0,showIcon:!showIcon,selectedId:selectedId})\r\n    }\r\n\r\n    onClickActions = (event, master, action) => {\r\n\r\n        event.stopPropagation();\r\n        action.onClick({master, userInfo:this.props.userInfo})\r\n        ReactTooltip.hide();\r\n    }\r\n\r\n    render() {\r\n        //const actionCount = this.props.actionIcons && this.props.actionIcons.filter(element => { return element.hidden === false }).length;\r\n        //console.log(\"controlMap:\", this.props);\r\n        //  loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\r\n\r\n        let activeIconIndex = null\r\n        const methodUrl = this.props.methodUrl ? this.props.methodUrl : (this.props.inputParam && this.props.inputParam.methodUrl);\r\n\r\n        const addId = this.props.controlMap && this.props.controlMap.has(\"Add\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Add\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const editId = this.props.controlMap && this.props.controlMap.has(\"Edit\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Edit\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const barcodeId = this.props.controlMap && this.props.controlMap.has(\"Barcode\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Barcode\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const syncId = this.props.controlMap && this.props.controlMap.has(\"ManualSync\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"ManualSync\".concat(methodUrl)).ncontrolcode;\r\n\r\n         // {/* janakumar  Added the download button for sample receving */}\r\n         const SampleReceivingReportId = this.props.controlMap && this.props.controlMap.has(\"SampleReceivingReport\")\r\n         && this.props.controlMap.get(\"SampleReceivingReport\").ncontrolcode;\r\n\r\n\r\n        {/* Add by Neeraj kumar for Language screen -RMTP-101*/ }\r\n        const languagesId = this.props.controlMap && this.props.controlMap.has(\"Update\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Update\".concat(methodUrl)).ncontrolcode;\r\n\r\n//\tALPD-5322\tEnabled view button for Out Of Specification screen by Vishakh\r\n        const viewId = this.props.controlMap && this.props.controlMap.has(\"View\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"View\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const deleteId = this.props.controlMap && this.props.controlMap.has(\"Delete\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Delete\".concat(methodUrl)).ncontrolcode;\r\n\r\n        // const defaultId = this.props.controlMap && this.props.controlMap.has(\"Default\".concat(methodUrl))\r\n        //     && this.props.controlMap.get(\"Default\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const approveId = this.props.controlMap && this.props.controlMap.has(\"Approve\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Approve\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const copyId = this.props.controlMap && this.props.inputParam && this.props.controlMap.has(\"Copy\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Copy\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const completeId = this.props.controlMap && this.props.controlMap.has(\"Complete\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Complete\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const switchId = this.props.controlMap && this.props.switchParam && this.props.controlMap.has(this.props.switchParam.operation.concat(methodUrl))\r\n            && this.props.controlMap.get(this.props.switchParam.operation.concat(methodUrl)).ncontrolcode;\r\n\r\n        const cancelId = this.props.controlMap && this.props.controlMap.has(\"Cancel\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Cancel\".concat(methodUrl)).ncontrolcode;\r\n\r\n        // const receiveGoodsId = this.props.controlMap.has(\"Receive\".concat(methodUrl))\r\n        //     && this.props.controlMap.get(\"Receive\".concat(methodUrl)).ncontrolcode;\r\n        const downloadId = this.props.controlMap && this.props.controlMap.has(\"Download\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Download\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const resentId = this.props.controlMap && this.props.controlMap.has(\"Resent\")\r\n            && this.props.controlMap.get(\"Resent\").ncontrolcode;\r\n\r\n        const SendToSubContractorId = this.props.controlMap && this.props.controlMap.has(\"SendToSubContractor\")\r\n            && this.props.controlMap.get(\"SendToSubContractor\").ncontrolcode;\r\n           \r\n        const ReceivedBySTTId = this.props.controlMap && this.props.controlMap.has(\"ReceivedBySTT\")\r\n            && this.props.controlMap.get(\"ReceivedBySTT\").ncontrolcode;\r\n\r\n        const ResultReceivedId = this.props.controlMap && this.props.controlMap.has(\"ResultReceived\")\r\n            && this.props.controlMap.get(\"ResultReceived\").ncontrolcode;\r\n\r\n        const selectedId = this.props.selectedId;\r\n        // const confirmMessage = new ConfirmMessage();\r\n        //console.log(\"props:\",this.props);\r\n        const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                    {/* <Tooltip openDelay={100} position=\"bottom\" tooltipClassName=\"ad-tooltip\" anchorElement=\"element\" parentTitle={true}> */}\r\n                    <LocalizationProvider language={this.props.Login.userInfo.slanguagetypecode}>\r\n                        {this.props.iscsv ?\r\n                            <>\r\n                                {\r\n                                    <>\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            <CSVLink data={this.props.ELNTest ? this.props.ELNTest : this.props.data} filename={this.props.selectedfilename + \".csv\"}\r\n                                                headers={this.props.batchCSViewList}\r\n                                            >{this.props.ELNTest ? this.props.intl.formatMessage({ id: \"IDS_EXPORTTOELN\" }) : this.props.intl.formatMessage({ id: \"IDS_EXPORTCSV\" })}</CSVLink>\r\n                                        </div>\r\n\r\n                                    </>\r\n                                }\r\n                                <style>{ttfFont}</style>\r\n\r\n                            </> : \"\"}\r\n                        <ExcelExport\r\n                            data={process(this.props.data || [], { sort: this.props.dataState.sort, filter: this.props.dataState.filter, group: this.props.dataState.group }).data}\r\n                            filterable={true}\r\n                            // fileName={this.props.inputParam && this.props.intl.formatMessage({ id: this.props.inputParam.displayName })}\r\n                            group={this.props.dataState.group}\r\n                            ref={(exporter) => {\r\n                                // console.log(exporter);\r\n                                this._excelExport = exporter;\r\n                            }}>\r\n                            <Grid\r\n                                className={((this.props.dataResult && this.props.dataResult.length > 0) || (this.props.extractedColumnList && this.props.extractedColumnList.length > 0)) ? \"active-paging\" : \"no-paging\"}\r\n                                style={{ height: this.props.gridHeight, width: this.props.gridWidth }}\r\n                                sortable\r\n                                resizable\r\n                                reorderable={false}\r\n                                scrollable={this.props.scrollable}\r\n                                pageable={this.props.pageable && this.props.data && this.props.data.length > 0 ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : false}\r\n                                // pageable={this.props.pageable ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : \"\"}\r\n                                groupable={this.props.groupfooter ?\r\n                                    {\r\n                                        enabled: false,\r\n                                        footer: \"visible\",\r\n                                    } :\r\n                                    this.props.groupable ? true : false}\r\n                                detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                                expandField={(this.props.detailedFieldList && this.props.detailedFieldList.length > 0 || this.props.childColumnList && this.props.childColumnList.length > 0) && this.props.expandField ? this.props.expandField : false}\r\n                                onExpandChange={this.expandChange}\r\n                                data={this.props.dataResult}\r\n                                total={this.props.total}\r\n                                {...this.props.dataState}\r\n                                selectedField=\"selected\"\r\n                                onRowClick={this.props.handleRowClick}\r\n                                onDataStateChange={this.props.dataStateChange}>\r\n                                <GridNoRecords>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                                </GridNoRecords>\r\n                                {this.props.isToolBarRequired ?\r\n                                    <GridToolbar>\r\n                                        {this.props.isAddRequired === false ? <></> :\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.props.addRecord(addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        }\r\n\r\n                                        {this.props.isSyncRequired === false ? <></> :\r\n                                            <Nav.Link className=\"btn btn-circle outline-grey ml-2 nav-link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_SYNC\" })}\r\n                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(syncId) === -1}\r\n                                                onClick={() => this.props.syncData(syncId)}>\r\n                                                <SyncIcon />\r\n                                                {/* {getActionIcon(\"sync\")} */}\r\n                                            </Nav.Link>\r\n                                        }\r\n\r\n                                        {this.props.isCustomButton ?\r\n                                            this.props.customButtonlist.map(button => {\r\n                                                return <>\r\n                                                    {/* <Button className=\"btn btn-circle outline-grey\" variant=\"link\" */}\r\n                                                    <Button className=\"btn btn-circle outline-grey p-0\" variant=\"link\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: button.label })}\r\n                                                        // data-for=\"tooltip-grid-wrap\"\r\n                                                        hidden={button.hidden}\r\n                                                        onClick={button.onClick}>\r\n                                                        {getActionIcon(button.controlname)}\r\n                                                    </Button>\r\n                                                </>\r\n                                            }) : <></>\r\n                                        }\r\n                                        {this.props.isRefreshRequired === false ? <></> :\r\n                                            <Button className=\"btn btn-circle outline-grey p-0\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={() => this.props.reloadData()}>\r\n                                                <RefreshIcon className=\"custom_icons\" />\r\n                                                {/* <FontAwesomeIcon icon={faSync} /> */}\r\n                                            </Button>\r\n                                        }\r\n                                        {this.props.isExportImportRequired === false?<></>:\r\n                                          <ExportButton\r\n                                          userRoleControlRights={this.props.userRoleControlRights}\r\n                                          //selectedMaster={row[\"dataItem\"]}\r\n                                          userInfo={this.props.userInfo}\r\n                                          controlMap={this.props.controlMap}\r\n                                          exportUrl={\"Export\" + methodUrl}\r\n                                          importUrl={\"Import\" + methodUrl}\r\n                                          screenName={this.props.screenName}\r\n                                          isDataGrid={true}\r\n                                          detailedFieldList={this.props.detailedFieldList}\r\n                                          extractedColumnList={this.props.extractedColumnList}\r\n                                          settings={this.props.settings}\r\n\r\n                                         ></ExportButton>\r\n                                        }\r\n\r\n                                        {this.props.isImportRequired === true ?\r\n                                            <>\r\n                                                <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EXPORTTEMPLATE\" })}\r\n                                                    //data-for=\"tooltip-grid-wrap\"\r\n                                                    onClick={this.exportExcelHeader}>\r\n                                                    <FontAwesomeIcon icon={faFileExcel} />\r\n                                                </Button>\r\n                                                <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTDATA\" })}\r\n                                                    // data-for=\"tooltip-grid-wrap\"\r\n                                                    onClick={() => this.props.import()}>\r\n                                                    <FontAwesomeIcon icon={faFileImport} />\r\n                                                </Button>\r\n                                            </> : \"\"\r\n                                        }\r\n\r\n                                        {this.props.isDownloadPDFRequired === false ? <></> :\r\n\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADPDF\" })}\r\n                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={this.exportPDF}>\r\n                                                <FontAwesomeIcon icon={faFilePdf} />\r\n                                            </Button>\r\n                                        }\r\n                                        {/* : \"\"\r\n                                        } */}\r\n                                        {this.props.isDownloadExcelRequired === false ? <></> :\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADEXCEL\" })}\r\n                                                //data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={this.exportExcel}>\r\n                                                <FontAwesomeIcon icon={faFileExcel} />\r\n                                            </Button>\r\n                                        }\r\n\r\n\r\n\r\n                                        {this.props.isExportExcelRequired === true ?\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADCSV\" })}\r\n                                                //data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={() => this.props.exportExcelNew()}>\r\n                                                <FontAwesomeIcon icon={faFileCsv} />\r\n                                            </Button>\r\n                                            : <></>\r\n                                        }\r\n\r\n\r\n                                        {this.props.isDownloadButtonOn === true ? //janakumar --> Added the sample reciving screen report button \r\n\r\n                                            <Nav.Link className=\"btn btn-circle outline-grey ml-2 nav-link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_PENDINGSAMPLETORECEIVEREPORT\" })}\r\n                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(SampleReceivingReportId) === -1}\r\n                                                onClick={() => this.props.samplereceivingData(SampleReceivingReportId)}>\r\n                                                <Generate className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                            </Nav.Link>\r\n\r\n                                            : <></>\r\n                                        }\r\n\r\n\r\n                                        {/* <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                            title=\"Download Excel\"\r\n                                            onClick={this.exportExcel}>\r\n                                            <FontAwesomeIcon icon={faFileExcel} />\r\n                                        </Button> */}\r\n\r\n                                    </GridToolbar>\r\n                                    : <></>}\r\n                                {\r\n                                    this.props.extractedColumnList.map((item, index) =>\r\n                                        item.idsName &&\r\n                                        <GridColumn key={index}\r\n                                            // data-tip={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                            title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                            {...this.columnProps(item.dataField)}\r\n                                            width={item.width}\r\n                                            cell={(row) => (\r\n                                                row.rowType === \"groupFooter\" ?\r\n                                                    item.dataField\r\n                                                        === this.props.aggregatedColumn ?\r\n                                                        <td aria-colindex={row.columnIndex} role={\"gridcell\"}>\r\n                                                            {this.props.intl.formatMessage({ id: this.props.aggregateLabel })} :\r\n                                                            {row.dataItem.aggregates[this.props.aggregatedColumn].sum}\r\n                                                        </td> : null :\r\n                                                    row.rowType === \"groupHeader\" ? null :\r\n                                                        item.componentName === \"switch\" ?\r\n                                                            <td style={{ textAlign: \"center\" }}>\r\n                                                                <CustomSwitch type=\"switch\" id={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                    disabled={item.needRights ? this.props.userRoleControlRights\r\n                                                                        && this.props.userRoleControlRights.indexOf(\r\n                                                                            this.props.controlMap.has(item.controlName) && this.props.controlMap.get(item.controlName).ncontrolcode\r\n                                                                        ) === -1 : false}\r\n                                                                    onChange={(event) => this.props.onSwitchChange({ ...this.props.switchParam, selectedRecord: row[\"dataItem\"], ncontrolCode: switchId }, event)}\r\n                                                                    checked={row[\"dataItem\"][item.switchFieldName] === item.switchStatus ? true : false}\r\n                                                                    name={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                            </td> :\r\n                                                            //switch without logic\r\n                                                            item.componentName === \"toggle\" ?\r\n                                                                <td style={{ textAlign: \"center\" }}>\r\n                                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                        disabled={item.needRights ? this.props.userRoleControlRights\r\n                                                                            && this.props.userRoleControlRights.indexOf(\r\n                                                                                this.props.controlMap.has(item.controlName) && this.props.controlMap.get(item.controlName).ncontrolcode\r\n                                                                            ) === -1 : false}\r\n                                                                        onChange={(event) => this.props.onToggleChange({ ...this.props.switchParam, selectedRecord: row[\"dataItem\"], ncontrolCode: switchId }, item, event)}\r\n                                                                        checked={row[\"dataItem\"][item.switchFieldName] === transactionStatus.YES ? true : false}\r\n                                                                        name={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                </td> :\r\n                                                                item.componentName === \"checkbox\" ?\r\n                                                                    <td>\r\n                                                                        <FormCheckbox\r\n                                                                            name={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                            type=\"checkbox\"\r\n                                                                            value={row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false}\r\n                                                                            isMandatory={false}\r\n                                                                            required={false}\r\n                                                                            //checked={row[\"dataItem\"][item.checkBoxField] === item.switchStatus ? true : false}\r\n                                                                            checked={row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false}\r\n                                                                            onChange={(event) => this.props.onInputOnChange(event)}\r\n                                                                        />\r\n                                                                    </td> :\r\n                                                                    item.fieldType === \"gradeColumn\" ?\r\n                                                                        row.rowType === \"groupHeader\" ? null :\r\n                                                                            <td\r\n                                                                                data-tip={row[\"dataItem\"][item.dataField]}\r\n                                                                                // data-for=\"tooltip_grid_wrap\"\r\n                                                                                className={`${selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}`}\r\n                                                                                style={{ color: [row[\"dataItem\"]['scolorhexcode']] }}\r\n                                                                            >\r\n                                                                                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_grid_wrap\" /> */}\r\n                                                                                {row[\"dataItem\"][item.dataField]}\r\n                                                                            </td> :\r\n\r\n\r\n                                                                    item.fieldType === \"attachment\" && row[\"dataItem\"][item.dataField] ? \r\n                                                                            <td data-tip={row[\"dataItem\"][item.dataField]} className={selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}>\r\n                                                                                {/* <ReactTooltip /> */}\r\n                                                                                <FontAwesomeIcon icon={faCloudDownloadAlt} className=\"ml-2 className action-icons-wrap\" \r\n                                                                                 title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\r\n                                                                                    onClick={() => this.props.viewFile({ ...this.props.attachmentParam,inputData: { selectedRecord: row[\"dataItem\"], userinfo: this.props.userInfo } }, row)}\r\n                                                                                />{\" \"}\r\n                                                                                {row[\"dataItem\"][item.dataField]}\r\n                                                                            </td> :\r\n                                                                    \r\n                                                                        <td data-tip={row[\"dataItem\"][item.dataField]}\r\n                                                                            //data-for=\"tooltip-grid-wrap\"\r\n                                                                            className={selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}>\r\n\r\n                                                                            {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]}\r\n                                                                                defaultMessage={row[\"dataItem\"][item.dataField]} /> : item.fieldType === \"dateOnlyFormat\" ? rearrangeDateFormatDateOnly(this.props.Login.userInfo, row[\"dataItem\"][item.dataField])\r\n                                                                                : row[\"dataItem\"][item.dataField]\r\n\r\n                                                                                // : row[\"dataItem\"][item.dataField] ? row[\"dataItem\"][item.dataField] :\r\n                                                                                //     this.props.jsonField ? row[\"dataItem\"][this.props.jsonField] &&\r\n                                                                                //         row[\"dataItem\"][this.props.jsonField][item.dataField]&&\r\n                                                                                //         row[\"dataItem\"][this.props.jsonField][item.dataField]['label'] ||\r\n                                                                                //         row[\"dataItem\"][this.props.jsonField][item.dataField]\r\n\r\n                                                                            }       {\r\n                                                                                item.dataType && item.dataType[0] === 'files' ?\r\n                                                                                    <FontIconWrap icon={faCloudDownloadAlt} className=\"ml-2 className action-icons-wrap\" size=\"lg\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOAD\" })}\r\n                                                                                        data-place=\"left\"\r\n                                                                                        onClick={() => this.props.dynamicFileDownload({ ...item, ...row.dataItem, userInfo: this.props.Login.userInfo, ...this.props.viewFileURL })}>\r\n                                                                                        <FontAwesomeIcon icon={faCloudDownloadAlt} />\r\n                                                                                    </FontIconWrap> : \"\"\r\n                                                                            }\r\n                                                                        </td>\r\n                                            )}\r\n                                        />\r\n                                    )}\r\n\r\n                                {this.props.isActionRequired ?\r\n\r\n                                    <GridColumn\r\n                                        locked\r\n                                        headerClassName=\"text-center\"\r\n                                        title={this.props.intl.formatMessage({ id: 'IDS_ACTION' })}\r\n                                        sort={false}\r\n                                        cell={(row,index) => (\r\n                                            row.rowType === \"groupFooter\" ? null :\r\n                                                row.rowType === \"groupHeader\" ? null :\r\n                                                    <td className={`k-grid-content-sticky k-command-cell pl-0 selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`} style={{ left: '0', right: '0', borderRightWidth: '1px', textAlign: 'center' }}>\r\n                                                        \r\n                                                        {/* Group Icon view Start*/}\r\n                                                        <>\r\n                                                        {this.props.groupIconAction ?\r\n                                                            <><span className={`vertical-dots end-icon ${this.props.listMasterShowIcon === 0 ? \"centericon\" : \"\"}`} onClick={() => this.iconGroupView(this.state != null ? this.state.showIcon : false, row[\"dataItem\"][this.props.primaryKeyField],)}></span></>\r\n                                                        :\r\n                                                        ''\r\n                                                        }\r\n\r\n                                                                {/* {actionList.length > 0 ?\r\n                                                                    <CustomPopover\r\n                                                                        nav={true}\r\n                                                                        data={actionList}\r\n                                                                        Button={false}\r\n                                                                        hideIcon={true}\r\n                                                                        btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                        textKey=\"value\"\r\n                                                                        icon={faChevronCircleDown}\r\n                                                                        // toolTip={this.props.intl.formatMessage({ id: \"IDS_CONFIGURE\" })}\r\n                                                                        dynamicButton={(value) => this.actionMethod(value)}\r\n                                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                    />\r\n                                                                    :\r\n                                                                    \"\"} */}\r\n\r\n                                                        {this.props.groupIconAction && this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map((action,index) =>\r\n                                                            index+1 <= this.props.listMasterShowIcon ?\r\n                                                            \r\n                                                                <span className = {`${this.state &&(this.state.showIcon && this.state.selectedId === row[\"dataItem\"][this.props.primaryKeyField]) ? 'disableIcon' : \"\"}`}> \r\n                                                                    <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                        data-tip={action.title}\r\n                                                                        data-place={action.dataplace && action.dataplace ? action.dataplace : \"\"}\r\n                                                                        hidden={action.hidden === undefined ? true : action.hidden}\r\n                                                                        onClick={(event) => action.onClick(row[\"dataItem\"],this.props.userInfo,this.props.masterdata, action)}>\r\n                                                                        {getActionIcon(action.controlname)}\r\n                                                                    </FontIconWrap>\r\n                                                           </span> :\"\"\r\n                                                           \r\n                                                         \r\n                                                        )}\r\n                                                    <div className={`icon-group-wrap ${this.props.groupIconAction && this.props.actionIcons && this.props.listMasterShowIcon ? \"enable-view\" : \"\"}${\" click-view\"} ${this.state && (this.state.showIcon && this.state.selectedId === row[\"dataItem\"][this.props.primaryKeyField])  ? \"ss active\" : \"\"}`}> \r\n                                                        {this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map((action,index) =>\r\n                                                            index+1 > this.props.listMasterShowIcon ?\r\n\r\n                                                                    <span className={`${this.state &&(this.state.showIcon && this.state.selectedId === row[\"dataItem\"][this.props.primaryKeyField]) ? 'disable-view' : \"\"}`}>\r\n                                                                    <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                        data-tip={action.title}\r\n                                                                        data-place={action.dataplace && action.dataplace ? action.dataplace : \"\"}\r\n                                                                        hidden={action.hidden === undefined ? true : action.hidden}\r\n                                                                        onClick={(event) => action.onClick(row[\"dataItem\"],this.props.userInfo,this.props.masterdata, action)}>\r\n                                                                        {getActionIcon(action.controlname)}\r\n                                                                    </FontIconWrap>\r\n                                                                    </span> :\"\"                                                           \r\n                                                         \r\n                                                        )}                                                        \r\n                                                    </div>\r\n\r\n                                                       {/* Group Icon view End*/}\r\n\r\n                                                         {/* <FontIconWrap className=\"d-font-icon action-icons-wrap\" \r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_SEND\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(SendToSubContractorId) === -1}\r\n                                                                onClick={() => this.props.sendRecord(row[\"dataItem\"], this.props.userInfo,this.props.masterdata, SendToSubContractorId)} \r\n                                                                data-place=\"left\"\r\n                                                            >\r\n                                                               <FontAwesomeIcon icon={faPaperPlane} />\r\n                                                            </FontIconWrap> */}\r\n{/*\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" \r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_RECEIVEBYSTT\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(ReceivedBySTTId) === -1}\r\n                                                                onClick={() => this.props.updateReceiveSTTSubContractTest(row[\"dataItem\"], this.props.userInfo,this.props.masterdata, ReceivedBySTTId)} \r\n                                                                data-place=\"left\"\r\n                                                            >\r\n                                                               <FontAwesomeIcon icon={faHandHoldingWater} />\r\n                                                            </FontIconWrap>\r\n                                                            \r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" \r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_RESULTRECEIVED\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(ResultReceivedId) === -1}\r\n                                                                onClick={() => this.props.updateReceiveResultSubContractTest(row[\"dataItem\"], this.props.userInfo,this.props.masterdata, ResultReceivedId)} \r\n                                                                data-place=\"left\"\r\n                                                            >\r\n                                                               <FontAwesomeIcon icon={faInbox} />\r\n                                                            </FontIconWrap>\r\n                                                            \r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" \r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ATTACHMENT\" })}\r\n                                                               hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(this.props.attahmentID) === -1}\r\n                                                                onClick={() => this.props.addFile(row[\"dataItem\"], this.props.userInfo,this.props.masterdata, this.props.attahmentID)}\r\n                                                                data-place=\"left\"\r\n                                                            >\r\n                                                               <FontAwesomeIcon icon={faPaperclip} />\r\n                                                            </FontIconWrap>\r\n\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWDETAIL\" })}\r\n                                                                //  data-for=\"tooltip-grid-wrap\"\r\n                                                                data-place=\"left\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(this.props.viewDetailID) === -1}\r\n                                                                onClick={() => this.props.viewDetail(row[\"dataItem\"],this.props.userInfo,this.props.masterdata, this.props.viewDetailID )}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faEye} />\r\n                                                            </FontIconWrap> */}\r\n\r\n                                                        {/* {this.props.moreActionRequired ?\r\n                                                            (this.props.listMasterShowIcon && this.props.actionIcons && this.props.actionIcons.length <= this.props.listMasterShowIcon) ? \"\" :\r\n                                                                <>\r\n                                                                    {actionCount > 1 ?\r\n                                                                        <><FontIconWrap className=\"d-font-icon action-icons-wrap vertical-dots end-icon\" onClick={() => this.iconGroupView()}></FontIconWrap></>\r\n                                                                    : ''                                                                   \r\n                                                                    }\r\n                                                                </>\r\n                                                            : \"\"} */}\r\n\r\n\r\n                                                        {/* {this.props.moreActionRequired ?\r\n                                                        <>\r\n                                                        {this.props.actionIcons && \r\n                                                        this.props.actionIcons.map ((action,index)=>\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                // data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={action.title}\r\n                                                                data-place={action.dataplace && action.dataplace ? action.dataplace : \"\"}\r\n                                                                hidden={action.hidden === undefined ? true : action.hidden}\r\n                                                                onClick={(event) => this.onClickActions(event, row[\"dataItem\"], action)}>\r\n                                                                {getActionIcon(action.controlname)}\r\n                                                            </FontIconWrap>\r\n                                                           \r\n                                                        )}\r\n                                                        </>:\"\"} */}\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                                data-place=\"left\"\r\n                                                                hidden={this.props.\r\n                                                                    userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                onClick={() => this.props.fetchRecord({ ...this.props.editParam, primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField], editRow: row[\"dataItem\"], ncontrolCode: editId })}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <BarcodeButton\r\n                                                                userRoleControlRights={this.props.userRoleControlRights}\r\n                                                                selectedMaster={row[\"dataItem\"]}\r\n                                                                userInfo={this.props.userInfo}\r\n                                                                controlMap={this.props.controlMap}\r\n                                                                methodUrl={\"Barcode\" + methodUrl}\r\n                                                                screenName={this.props.screenName}\r\n                                                                isDataGrid={true}\r\n                                                            ></BarcodeButton>\r\n\r\n                                                            {/* <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" })}\r\n                                                                    // data-for=\"tooltip-grid-wrap\"\r\n                                                                    data-place=\"left\"\r\n                                                                    hidden={this.props.\r\n                                                                        userRoleControlRights && this.props.userRoleControlRights.indexOf(barcodeId) === -1}\r\n                                                                    onClick={() => this.props.openBarcodeModal(row[\"dataItem\"], barcodeId, this.props.userInfo, false)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faBarcode} />\r\n                                                                </FontIconWrap> */}\r\n                                                            {/* Add by Neeraj kumar for Language screen -RMTP-101*/}\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSYNONYMN\" })}\r\n                                                                //  data-for=\"tooltip-grid-wrap\"\r\n                                                                data-place=\"left\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(languagesId) === -1}\r\n                                                                onClick={() => this.props.languagesRecord({ ...this.props.languagesParam, primaryKeyValue: row[\"dataItem\"][this.props.languagesParam.primaryKeyField], languagesRow: row[\"dataItem\"], ncontrolCode: languagesId })}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faLanguage} />\r\n                                                            </FontIconWrap>\r\n\r\n{/* ALPD-5322\tEnabled view button for Out Of Specification screen by Vishakh */}\r\n                                                            <FontAwesomeIcon className=\"d-font-icon action-icons-wrap\" icon={faEye}\r\n                                                                title={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewId) === -1}\r\n                                                                onClick={() => this.props.viewRecord({...this.props.viewParam, primaryKeyValue:row[\"dataItem\"][this.props.viewParam.primaryKeyField], viewRow:row[\"dataItem\"], ncontrolCode: viewId, row})}\r\n                                                            />\r\n\r\n                                                         \r\n\r\n                                                            \r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })} data-place=\"top\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    cardTitle={this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" })}\r\n                                                                    title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DELETECONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    handleClickDelete={() => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)}\r\n                                                                /> */}\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(downloadId) === -1}\r\n                                                                onClick={() => this.props.viewDownloadFile({ ...this.props.masterdata, ...this.props.downloadParam, inputData: { ...row[\"dataItem\"], userinfo: this.props.Login.userInfo }, userinfo: this.props.Login.userInfo, ncontrolCode: downloadId }, row)}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} data-place=\"left\"\r\n                                                            //  data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCloudDownloadAlt} //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\r\n                                                                />\r\n                                                            </FontIconWrap>\r\n                                                            {this.props.isreportview ?\r\n                                                                <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                    //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewreport) === -1}\r\n                                                                    onClick={() => this.props.viewReportFile({ ...this.props.masterdata, ...this.props.downloadParam, inputData: { ...row[\"dataItem\"], userinfo: this.props.Login.userInfo }, userinfo: this.props.Login.userInfo, ncontrolCode: downloadId }, row)}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWREPORT\" })} data-place=\"left\"\r\n                                                                //  data-for=\"tooltip-grid-wrap\"\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faEye} //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} \r\n                                                                    />\r\n                                                                </FontIconWrap>\r\n                                                                : \"\"}\r\n                                                            {/* <FontAwesomeIcon icon={faTrashAlt}\r\n                                                    title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                    onClick = {() => confirmMessage.confirm(\r\n                                                        \"deleteMessage\",\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                        () => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)\r\n                                                    )}\r\n                                                /> */}\r\n\r\n                                                            {/* <FontAwesomeIcon icon={faThumbtack}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_SETDEFAULT\" })}\r\n                                                            hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(defaultId) === -1}\r\n                                                            onClick={() => this.props.defaultRecord({ ...this.props.defaultParam, selectedRecord: row[\"dataItem\"], ncontrolCode: defaultId }, row)} /> */}\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                onClick={() => this.props.approveRecord(row, \"Approve\", approveId)} data-place=\"left\"\r\n                                                            //data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                            </FontIconWrap>\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                onClick={() => this.props.copyRecord(row, \"Copy\", copyId)} data-place=\"left\"\r\n                                                            // data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCopy} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                onClick={() => this.props.completeRecord(row[\"dataItem\"], \"Complete\", completeId)} data-place=\"left\"\r\n                                                            // data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCheck} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_RESENT\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(resentId) === -1}\r\n                                                                onClick={() => this.props.reSent(row[\"dataItem\"], \"Resent\", resentId)}\r\n                                                                data-place=\"left\" //data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <MailResend width=\"24px\" className='svg-inline--fa' />\r\n                                                                {/* <FontAwesomeIcon icon={faRedo} /> */}\r\n                                                            </FontIconWrap>\r\n\r\n\r\n                                                            <Nav.Link className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })} data-place=\"left\" //data-for=\"tooltip-grid-wrap\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(cancelId) === -1} >\r\n                                                                <Image src={reject} alt=\"filer-icon action-icons-wrap\" width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                    onClick={() => this.props.cancelRecord(row[\"dataItem\"], \"Cancel\", cancelId)} data-place=\"left\"\r\n                                                                />\r\n                                                            </Nav.Link>\r\n                                                        \r\n                                                            {/* <Button variant=\"link\" title={this.props.intl.formatMessage({ id: \"IDS_RECEIVE\" })}\r\n                                                    className=\"mr-2 action-icons-wrap\"\r\n                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(receiveGoodsId) === -1}\r\n                                                    onClick={() => this.props.receiveRecord({ ...this.props.receiveParam, selectedRecord: row[\"dataItem\"], ncontrolCode: receiveGoodsId })}>\r\n                                                    <Image src={checkedIcon} alt=\"filer-icon\" width=\"20\" height=\"20\" />\r\n                                                </Button> */}\r\n                                                            {!this.props.groupIconAction && this.props.actionIcons ? this.props.actionIcons.length > 0 ? this.props.actionIcons.map(action =>\r\n                                                                <FontIconWrap\r\n                                                                    className=\"d-font-icon action-icons-wrap\"\r\n                                                                    data-tip={action.title}\r\n                                                                    hidden={action.hidden === undefined ? true : action.hidden}\r\n                                                                    onClick={() => action.onClick(row[\"dataItem\"], action, row)}>\r\n                                                                    {getActionIcon(action.controlname)}\r\n                                                                </FontIconWrap>\r\n                                                            ) : \"\" : \"\"}\r\n                                                            {this.props.hasControlWithOutRights ?\r\n                                                                <>\r\n                                                                    {this.props.showeditRecordWORights ?\r\n                                                                        <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                            //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \r\n                                                                            data-place=\"left\">\r\n                                                                            <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                                //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                name={\"deleteworights\"}\r\n                                                                                onClick={() => this.props.editRecordWORights(row[\"dataItem\"])}\r\n                                                                            />\r\n                                                                        </FontIconWrap> : \"\"\r\n                                                                    }\r\n                                                                    {/* Add by Neeraj kumar for Language screen -RMTP-101*/}\r\n                                                                    {this.props.showeditRecordWORights ?\r\n                                                                        <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_LANGUAGESCONVERTER\" })}\r\n                                                                            //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \r\n                                                                            data-place=\"left\">\r\n                                                                            <FontAwesomeIcon icon={faLanguage}\r\n                                                                                //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                name={\"deleteworights\"}\r\n                                                                                onClick={() => this.props.editRecordWORights(row[\"dataItem\"])}\r\n                                                                            />\r\n                                                                        </FontIconWrap> : \"\"\r\n                                                                    }\r\n                                                                    {\r\n                                                                        this.props.showdeleteRecordWORights ?\r\n                                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                                                onClick={() => this.props.deleteRecordWORights(row[\"dataItem\"])}>\r\n                                                                                <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                                    //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                    name={\"deleteworights\"}\r\n\r\n                                                                                />\r\n                                                                            </FontIconWrap> : \"\"\r\n                                                                    }\r\n\r\n                                                                </> : \"\"\r\n                                                            }\r\n                                                        </>\r\n\r\n                                                    </td>\r\n                                        )}\r\n                                    /> : \"\"}\r\n                            </Grid>\r\n                            {[...this.props.extractedColumnList].map((item, index) =>\r\n                                <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.idsName }) + (item.dateField ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                            )}\r\n                            {this.props.detailedFieldList &&\r\n                                this.props.detailedFieldList.map((item, index) =>\r\n                                    <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.idsName }) + (item.dateField ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                                )}\r\n                        </ExcelExport>\r\n                        <ExcelExport\r\n                            data={[]}\r\n                            //group={group}\r\n                            collapsible={true}\r\n                            fileName={this.props.screenName && this.props.screenName}\r\n                            ref={(exporter) => {\r\n                                // console.log(exporter);\r\n                                this._excelExportHeader = exporter;\r\n                            }}>\r\n                            {//console.log(this.props.extractedColumnList)\r\n                            }\r\n\r\n                            {\r\n                                this.props.isImportRequired === true ?\r\n                                this.props.exportFieldList && this.props.exportFieldList.length > 0 ?\r\n                                        this.props.exportFieldList.map((item, index) =>\r\n                                            <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\")} width={200} />\r\n                                        )\r\n                                        :\r\n                                        <>\r\n                                            {this.props.extractedColumnList && this.props.extractedColumnList.map((item, index) =>\r\n                                                <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\")} width={200} />\r\n                                            )}\r\n                                            {this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) =>\r\n                                                <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\")} width={200} />\r\n                                            )}\r\n\r\n                                        </>\r\n\r\n                                    :\r\n                                    <>\r\n                                        {this.props.extractedColumnList && this.props.extractedColumnList.map((item, index) =>\r\n                                            <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\")} width={200} />\r\n                                        )}\r\n\r\n                                        {this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) =>\r\n                                            <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dataType === \"date\" ? '(yyyy-mm-dd)' : \"\")} width={200} />\r\n                                        )}\r\n                                    </>\r\n\r\n                            }\r\n\r\n                            {/* {[...this.props.extractedColumnList].map((item, index) =>\r\n                                <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dateField ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                            )}  \r\n\r\n                            {this.props.detailedFieldList &&\r\n                                this.props.detailedFieldList.map((item, index) =>\r\n                                    <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dateField ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                            )}  */}\r\n                        </ExcelExport>\r\n                    </LocalizationProvider >\r\n                    {/* </Tooltip> */}\r\n                    {\r\n                        this.props.isToolBarRequired ?\r\n                            <ttfStyle>\r\n                                <GridPDFExport\r\n                                    ref={(element) => { this._pdfExport = element; }}\r\n                                    margin=\"1cm\"\r\n                                    // paperSize= \"A4\"\r\n                                    scale={0.75}\r\n                                    fileName=\"Export.pdf\"\r\n                                >\r\n                                    {\r\n                                        <Grid data={process(this.props.data || [], { sort: this.props.dataState.sort, filter: this.props.dataState.filter, group: this.props.dataState.group })} group={this.props.dataState.group} groupable={true}>\r\n                                            {this.props.extractedColumnList.map((item, index) =>\r\n                                                <GridColumn key={index} title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                                    field={item.dataField}\r\n                                                    width={item.width}\r\n\r\n                                                    cell={(row) => (\r\n                                                        <td>\r\n                                                        {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                            : row[\"dataItem\"][item.dataField]}\r\n                                                        </td>\r\n                                                )}\r\n                                                />\r\n                                            )}\r\n                                            {this.props.detailedFieldList &&\r\n                                                this.props.detailedFieldList.map((item, index) =>\r\n                                                    <GridColumn key={index} title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                                        field={item.dataField}\r\n                                                        width={item.width}\r\n\r\n                                                        cell={(row) => (\r\n                                                            <td>\r\n                                                                {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                                    : row[\"dataItem\"][item.dataField]}\r\n                                                            </td>)}\r\n                                                    />\r\n                                                )}\r\n\r\n\r\n                                        </Grid>}\r\n                                </GridPDFExport>\r\n\r\n                                <style>{ttfFont}</style>\r\n                            </ttfStyle>\r\n                            : \"\"\r\n                    }\r\n\r\n\r\n                </AtTableWrap >\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        ReactTooltip.rebuild();\r\n\r\n        if(this.state == null)\r\n        this.setState({ showIcon: false});\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, { dynamicFileDownload, undefined })(injectIntl(DataGrid));"]},"metadata":{},"sourceType":"module"}