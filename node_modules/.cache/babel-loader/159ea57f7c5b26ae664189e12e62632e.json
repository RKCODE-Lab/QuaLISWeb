{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { chartType, designComponents } from '../components/Enumeration';\nexport function fetchRecordDashBoardType(fetchRecordParam) {\n  return function (dispatch) {\n    const chartTypeURL = rsapi.post(\"dashboardtypes/getChartTypes\", {\n      \"userinfo\": fetchRecordParam.userInfo\n    });\n    let selectedRecord = {};\n    let urlArray = [];\n    let selectedId = null;\n\n    if (fetchRecordParam.operation === \"update\") {\n      const dashBoardType = rsapi.post(\"dashboardtypes/getDashBoardTypeByID\", {\n        \"userinfo\": fetchRecordParam.userInfo,\n        \"ndashboardtypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ndashboardtypecode)\n      });\n      const sqlQuery = rsapi.post(\"dashboardtypes/getSqlQueriesByChart\", {\n        \"userinfo\": fetchRecordParam.userInfo,\n        \"ncharttypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ncharttypecode)\n      });\n      const chartProps = rsapi.post(\"dashboardtypes/getChartProperty\", {\n        \"userinfo\": fetchRecordParam.userInfo,\n        \"ncharttypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ncharttypecode)\n      }); // const sqlCols = rsapi.post(\"dashboardtypes/getColumnsBasedOnQuery\", { \"userinfo\": fetchRecordParam.userInfo, \"nsqlquerycode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.nquerycode) });\n\n      const chartPropTransaction = rsapi.post(\"dashboardtypes/getChartPropTransaction\", {\n        \"userinfo\": fetchRecordParam.userInfo,\n        \"ncharttypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ncharttypecode),\n        \"ndashboardtypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ndashboardtypecode),\n        \"nsqlquerycode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.nsqlquerycode)\n      });\n      urlArray = [chartTypeURL, sqlQuery, dashBoardType, chartProps, chartPropTransaction];\n      selectedId = fetchRecordParam.masterData.selectedDashBoardTypes.ndashboardtypecode;\n    } else {\n      urlArray = [chartTypeURL];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      let xValue = [];\n      let yValue = [];\n      let xSeriesColumns = [];\n      let ySeriesColumns = [];\n      let sqlQueryList = [];\n      let xSeriesColumnList = [];\n      let ySeriesColumnList = [];\n      let sizeField = [];\n      let yFieldBubble = [];\n      let categoryField = [];\n      const chartTypeMap = constructOptionList(response[0].data || [], \"ncharttypecode\", \"schartname\", undefined, undefined, true);\n      const chartTypeList = chartTypeMap.get(\"OptionList\");\n\n      if (fetchRecordParam.operation === \"update\") {\n        const sqlQueryMap = constructOptionList(response[1].data || [], \"nsqlquerycode\", \"ssqlqueryname\", undefined, undefined, true);\n        sqlQueryList = sqlQueryMap.get(\"OptionList\");\n        const xSeriesColumnMap = constructOptionList(response[4].data.Columns.xSeriesColumns || [], \"Value\", \"ColumnName\", undefined, undefined, true);\n        xSeriesColumnList = xSeriesColumnMap.get(\"OptionList\");\n        const ySeriesColumnMap = constructOptionList(response[4].data.Columns.ySeriesColumns || [], \"Value\", \"ColumnName\", undefined, undefined, true);\n        ySeriesColumnList = ySeriesColumnMap.get(\"OptionList\");\n        selectedRecord = response[2].data;\n        selectedRecord[\"ncharttypecode\"] = {\n          label: response[2].data[\"schartname\"],\n          value: response[2].data[\"ncharttypecode\"]\n        };\n        selectedRecord[\"nsqlquerycode\"] = {\n          label: response[2].data[\"ssqlqueryname\"],\n          value: response[2].data[\"nsqlquerycode\"]\n        }; // let index = 0;\n\n        if (response[2].data[\"ncharttypecode\"].value === chartType.PIECHART || response[2].data[\"ncharttypecode\"].value === chartType.DONUT) {\n          selectedRecord[\"field\"] = {\n            label: response[4].data.pieCategoryColumn,\n            value: response[4].data.pieCategoryColumnComboVal,\n            item: {\n              Value: response[4].data.pieCategoryColumnComboVal,\n              ColumnName: response[4].data.pieCategoryColumn,\n              Color: \"\"\n            }\n          };\n          selectedRecord[\"nameField\"] = {\n            label: response[4].data.pieValueColumn,\n            value: response[4].data.pieValueColumnComboVal,\n            item: {\n              Value: response[4].data.pieValueColumnComboVal,\n              ColumnName: response[4].data.pieValueColumn,\n              Color: \"\"\n            }\n          };\n        } else {\n          if (response[2].data[\"ncharttypecode\"].value === chartType.BUBBLE) {\n            selectedRecord[\"xFieldBubble\"] = {\n              label: response[4].data.xFieldBubble[0][\"schartpropvalue\"],\n              value: response[4].data.xFieldBubble[0][\"schartpropvalue\"],\n              item: {\n                Value: response[4].data.xFieldBubble[0][\"schartpropvalue\"],\n                ColumnName: response[4].data.xFieldBubble[0][\"schartpropvalue\"],\n                Color: \"\"\n              }\n            };\n            response[4].data.colorField.map(item => sizeField.push({\n              label: item.ColumnName,\n              value: item.ColumnName,\n              item: {\n                Value: item.ColumnName,\n                ColumnName: item.ColumnName,\n                Color: item.Color\n              }\n            }));\n            response[4].data.yFieldBubble.map(item => yFieldBubble.push({\n              label: item.schartpropvalue,\n              value: item.schartpropvalue,\n              item: {\n                Value: item.schartpropvalue,\n                ColumnName: item.schartpropvalue,\n                Color: \"\"\n              }\n            }));\n            response[4].data.categoryField.map(item => categoryField.push({\n              label: item.schartpropvalue,\n              value: item.schartpropvalue,\n              item: {\n                Value: item.schartpropvalue,\n                ColumnName: item.schartpropvalue,\n                Color: \"\"\n              }\n            }));\n            selectedRecord[\"sizeField\"] = sizeField;\n            selectedRecord[\"yFieldBubble\"] = yFieldBubble;\n            selectedRecord[\"categoryField\"] = categoryField;\n          } else {\n            // selectedRecord[\"xColumnName\"] = {\n            //     label: response[4].data.xField[0][\"schartpropvalue\"],\n            //     value: response[4].data.xField[0][\"schartpropvalue\"],\n            //     item: {\n            //         Value: response[4].data.xField[0][\"schartpropvalue\"],\n            //         ColumnName: response[4].data.xField[0][\"schartpropvalue\"],\n            //         Color: \"\"\n            //     }\n            // }\n            response[4].data.Columns.xSeriesColumns && response[4].data.Columns.xSeriesColumns.map(field => {\n              if (field.Value === response[4].data.xField[0][\"schartpropvalue\"]) {\n                selectedRecord[\"xColumnName\"] = {\n                  label: field.ColumnName,\n                  value: response[4].data.xField[0][\"schartpropvalue\"],\n                  item: {\n                    Value: response[4].data.xField[0][\"schartpropvalue\"],\n                    ColumnName: field.ColumnName,\n                    Color: \"\"\n                  }\n                };\n              }\n            });\n            response[4].data.Colors.map(item => yValue.push({\n              label: item.ColumnName,\n              value: item.ColumnName,\n              item: {\n                Value: item.ColumnName,\n                ColumnName: item.ColumnName,\n                Color: item.Color\n              }\n            }));\n            selectedRecord[\"yColumnName\"] = yValue;\n          }\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          chartType: chartTypeList,\n          sqlQuery: fetchRecordParam.operation === \"update\" ? sqlQueryList : [],\n          selectedRecord: selectedRecord,\n          operation: fetchRecordParam.operation,\n          screenName: \"IDS_DASHBOARDTYPES\",\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId,\n          ChartProperty: fetchRecordParam.operation === \"update\" ? response[3].data : [],\n          SqlColumns: fetchRecordParam.operation === \"update\" ? {\n            xSeriesColumns: xSeriesColumnList,\n            ySeriesColumns: ySeriesColumnList\n          } : [],\n          xValue: xValue,\n          yValue: yValue,\n          Colors: fetchRecordParam.operation === \"update\" ? response[4].data.Colors : [],\n          xSeriesColumns,\n          ySeriesColumns,\n          xSeriesColumnList,\n          ySeriesColumnList\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function selectCheckBoxDashBoardTypes(DashBoardTypes, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post( //\"/dashboardtypes/getAllSelectionDashBoardTypes\"\n    \"/dashboardtypes/getDashBoardTypes\", {\n      'userinfo': userInfo,\n      \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          screenName: \"IDS_DESIGNPARAMETERS\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSqlQueryDataService(nchartTypeCode, selectedRecord, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dashboardtypes/getSqlQueriesByChart\", {\n      \"userinfo\": userInfo,\n      \"ncharttypecode\": parseInt(nchartTypeCode)\n    }).then(response => {\n      const sqlQueryMap = constructOptionList(response.data || [], \"nsqlquerycode\", \"ssqlqueryname\", undefined, undefined, true);\n      const sqlQueryList = sqlQueryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sqlQuery: sqlQueryList,\n          ChartProperty: [],\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSqlQueryColumns(nSqlQueryCode, nChartTypeCode, userInfo, selectedRecord) {\n  return function (dispatch) {\n    // let selectedRecord = {};\n    const chartProps = rsapi.post(\"dashboardtypes/getChartProperty\", {\n      \"userinfo\": userInfo,\n      \"ncharttypecode\": parseInt(nChartTypeCode)\n    });\n    const sqlCols = rsapi.post(\"dashboardtypes/getColumnsBasedOnQuery\", {\n      \"userinfo\": userInfo,\n      \"nsqlquerycode\": parseInt(nSqlQueryCode)\n    });\n    let urlArray = [chartProps, sqlCols];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      let Value = [];\n      selectedRecord = { ...selectedRecord\n      };\n\n      if (nChartTypeCode !== chartType.PIECHART) {\n        selectedRecord[\"yColumnName\"] = undefined;\n        selectedRecord[\"xColumnName\"] = undefined;\n      } else {\n        selectedRecord[\"field\"] = undefined;\n        selectedRecord[\"nameField\"] = undefined;\n      }\n\n      const xSeriesColumnMap = constructOptionList(response[1].data.xSeriesColumns || [], \"Value\", \"ColumnName\", undefined, undefined, true);\n      const xSeriesColumnList = xSeriesColumnMap.get(\"OptionList\");\n      const ySeriesColumnMap = constructOptionList(response[1].data.ySeriesColumns || [], \"Value\", \"ColumnName\", undefined, undefined, true);\n      const ySeriesColumnList = ySeriesColumnMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ChartProperty: response[0].data,\n          SqlColumns: {\n            xSeriesColumns: xSeriesColumnList,\n            ySeriesColumns: ySeriesColumnList\n          },\n          Value: Value,\n          loading: false,\n          // operation: \"create\",\n          selectedRecord,\n          xSeriesColumns: [],\n          ySeriesColumns: [],\n          xSeriesColumnList,\n          ySeriesColumnList\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAddDashboardDesign(selectedDashBoardTypes, userInfo) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedId = null;\n    const designDashBoard = rsapi.post(\"dashboardtypes/getDashBoardDesign\", {\n      \"userinfo\": userInfo,\n      \"ndashBoardTypeCode\": parseInt(selectedDashBoardTypes.ndashboardtypecode),\n      \"nSqlQueryCode\": parseInt(selectedDashBoardTypes.nsqlquerycode)\n    });\n    urlArray = [designDashBoard];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      if (response[0].data.sqlQueryForParams.length > 0) {\n        const parameterMap = constructOptionList(response[0].data.sqlQueryForParams || [], \"sqlQueryParams\", \"sqlQueryParams\", undefined, undefined, true);\n        const reportParameterList = parameterMap.get(\"OptionList\");\n        const designComponentMap = constructOptionList(response[0].data.designComponents || [], \"ndesigncomponentcode\", \"sdesigncomponentname\", undefined, undefined, true);\n        const designComponentList = designComponentMap.get(\"OptionList\");\n        const sqlQueryMap = constructOptionList(response[0].data.sqlQueryForExistingLinkTable || [], \"nsqlquerycode\", \"ssqlqueryname\", undefined, undefined, true);\n        const sqlQueryList = sqlQueryMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: \"create\",\n            screenName: \"IDS_DESIGNPARAMETERS\",\n            openChildModal: true,\n            // ncontrolCode: fetchRecordParam.ncontrolCode,\n            loading: false,\n            selectedId,\n            sqlQueryForParams: reportParameterList,\n            sqlQueryForExistingLinkTable: sqlQueryList,\n            designComponents: designComponentList\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NOPARAMETERSTOMAPDASHBOARD\"\n        }));\n      }\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDashboardView(userInfo) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedId = null;\n    const dashBoardView = rsapi.post(\"dashboardtypes/getDashBoardView\", {\n      \"userinfo\": userInfo,\n      \"ndashBoardTypeCode\": 0\n    });\n    urlArray = [dashBoardView];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: \"create\",\n          screenName: \"IDS_DASHBOARDVIEW\",\n          openChildModal: true,\n          // ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false,\n          selectedId,\n          sqlQueryForParams: response[0].data.sqlQueryForParams,\n          sqlQueryForExistingLinkTable: response[0].data.sqlQueryForExistingLinkTable,\n          designComponents: response[0].data.designComponents\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function selectCheckBoxDashBoardView(screenName, selectedRecord, masterData, viewDashBoardParam, dashBoardTemplateNo, templateCode, homeDashBoard, currentPageNo) {\n  return function (dispatch) {\n    let homeDashBoardType = {};\n    dispatch(initRequest(true));\n    rsapi.post(\"/dashboardview/getChartParameters\", { ...viewDashBoardParam\n    }).then(response => {\n      const selectedRecordRealValue = selectedRecord;\n      masterData = { ...masterData,\n        ...response.data\n      };\n      let respObject = {};\n\n      if (screenName === \"HomeDashBoard\") {\n        if (dashBoardTemplateNo === \"dashBoardType1\") {\n          homeDashBoardType = {\n            \"dashBoardType1\": { ...response.data\n            },\n            \"ntemplatecode\": templateCode\n          };\n        } else if (dashBoardTemplateNo === \"dashBoardType2\") {\n          homeDashBoardType = {\n            \"dashBoardType2\": { ...response.data\n            },\n            \"ntemplatecode\": templateCode\n          };\n        } else if (dashBoardTemplateNo === \"dashBoardType3\") {\n          homeDashBoardType = {\n            \"dashBoardType3\": { ...response.data\n            },\n            \"ntemplatecode\": templateCode\n          };\n        } else if (dashBoardTemplateNo === \"dashBoardType4\") {\n          homeDashBoardType = {\n            \"dashBoardType4\": { ...response.data\n            },\n            \"ntemplatecode\": templateCode\n          };\n        }\n\n        if (homeDashBoard && homeDashBoard !== undefined) {\n          homeDashBoard[currentPageNo] = { ...homeDashBoard[currentPageNo],\n            ...homeDashBoardType\n          };\n        }\n\n        respObject = {\n          homeDashBoard\n        };\n      }\n\n      if (response.data.chartData.length === 0) {\n        toast.info(intl.formatMessage({\n          id: \"IDS_NODATAAVAILABLE\"\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecordRealValue,\n          masterData,\n          loading: false,\n          openModal: false,\n          openModalForHomeDashBoard: false,\n          ...respObject\n        }\n      });\n    }).catch(error => {\n      // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false } })\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openNodal: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAllSelectionDashBoardView(dashBoardTypes, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/dashboardview/getAllSelectionDashBoardView\", {\n      'userinfo': userInfo,\n      \"ndashboardtypecode\": dashBoardTypes.ndashboardtypecode\n    }).then(response => {\n      dispatch(selectedDashBoardView(response, masterData, userInfo));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function selectedDashBoardView(response, masterData, userInfo) {\n  return function (dispatch) {\n    let openModalNew = false;\n    let selectedRecord = {};\n    let inputFieldData = {};\n\n    if (response.data.viewDashBoardDesignConfigList !== undefined && response.data.viewDashBoardDesignConfigList.length > 0) {\n      openModalNew = true;\n      response.data.viewDashBoardDesignConfigList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n          selectedRecord[item.sfieldname] = rearrangeDateFormat(userInfo, item.dataList[0]);\n          inputFieldData = { ...inputFieldData,\n            [item.sfieldname]: rearrangeDateFormat(userInfo, item.dataList[0]),\n            [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n            [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n          };\n        } else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          const comboMap = constructOptionList(item.dataList || [], item.svaluemember, item.sdisplaymember, undefined, undefined, true);\n          const comboList = comboMap.get(\"OptionList\");\n          item.dataList = comboList;\n          let getList = comboList.filter(lst => {\n            return lst.value === parseInt(item.sdefaultvalue);\n          });\n\n          if (getList.length > 0) {\n            selectedRecord[item.sfieldname] = {\n              label: getList[0].label,\n              value: getList[0].value\n            };\n            inputFieldData = { ...inputFieldData,\n              [item.sfieldname]: getList[0].value,\n              [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n              [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n            };\n          } else {\n            selectedRecord[item.sfieldname] = undefined;\n          }\n        } else {\n          selectedRecord[item.sfieldname] = item.sdefaultvalue;\n        }\n\n        return null;\n      });\n    }\n\n    masterData = { ...masterData,\n      ...response.data,\n      // comboParamData: response.data.comboParamData,\n      // selectedDashBoardTypes: dashBoardTypes,\n      viewDashBoardDesignConfigList: response.data.viewDashBoardDesignConfigList,\n      xSeries: openModalNew === true ? [] : response.data.xSeries,\n      ySeries: openModalNew === true ? [] : response.data.ySeries,\n      pieChart: openModalNew === true ? [] : response.data.pieChart\n    };\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        masterData,\n        loading: false,\n        openModal: openModalNew,\n        selectedRecord,\n        inputFieldData: inputFieldData\n      }\n    });\n  };\n}\nexport function checkParametersAvailableForHomeDashBoard(DashBoardTypes, userInfo, masterData, dashBoardTemplateNo, templateCode) {\n  return function (dispatch) {\n    let openModalNew = false;\n    let openChildModalNew = false;\n    let selectedRecord = {};\n    let inputFieldData = {};\n    dispatch(initRequest(true)); // console.log(\"checkParametersAvailableForHomeDashBoard action:\", DashBoardTypes, masterData);\n\n    rsapi.post(\"/dashboardview/checkParameteAvailableInDashBoardView\", {\n      'userinfo': userInfo,\n      \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode\n    }).then(response => {\n      //console.log(\"res in checkParametersAvailableForHomeDashBoard:\", response);\n      if (response.data.viewDashBoardDesignConfigList !== undefined && response.data.viewDashBoardDesignConfigList.length > 0) {\n        openChildModalNew = true;\n        response.data.viewDashBoardDesignConfigList.map(item => {\n          if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            selectedRecord[item.sfieldname] = rearrangeDateFormat(userInfo, item.dataList[0]);\n            inputFieldData = { ...inputFieldData,\n              [item.sfieldname]: rearrangeDateFormat(userInfo, item.dataList[0]),\n              [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n              [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n            };\n          } else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n            const comboMap = constructOptionList(item.dataList || [], item.svaluemember, item.sdisplaymember, undefined, undefined, true);\n            const comboList = comboMap.get(\"OptionList\");\n            item.dataList = comboList;\n            let getList = comboList.filter(lst => {\n              return lst.value === parseInt(item.sdefaultvalue);\n            });\n\n            if (getList.length > 0) {\n              selectedRecord[item.sfieldname] = {\n                label: getList[0].label,\n                value: getList[0].value\n              };\n              inputFieldData = { ...inputFieldData,\n                [item.sfieldname]: getList[0].value,\n                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n              };\n            } else {\n              selectedRecord[item.sfieldname] = undefined;\n            }\n          } else {\n            selectedRecord[item.sfieldname] = item.sdefaultvalue;\n            inputFieldData = { ...inputFieldData,\n              [item.sfieldname]: item.sdefaultvalue,\n              [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n              [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n            };\n          }\n\n          return null;\n        });\n      }\n\n      masterData = { ...masterData,\n        ...response.data,\n        comboParamData: response.data.comboParamData,\n        selectedDashBoardTypes: DashBoardTypes,\n        viewDashBoardDesignConfigList: response.data.viewDashBoardDesignConfigList,\n        xSeries: openModalNew === true ? [] : response.data.xSeries,\n        ySeries: openModalNew === true ? [] : response.data.ySeries,\n        pieChart: openModalNew === true ? [] : response.data.pieChart\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedRecord,\n          inputFieldData: inputFieldData,\n          dashBoardTemplateNo,\n          templateCode,\n          openModalForHomeDashBoard: openChildModalNew\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkParametersAvailable(DashBoardTypes, userInfo, masterData, dashBoardTemplateNo, templateCode) {\n  return function (dispatch) {\n    let openModalNew = false;\n    let selectedRecord = {};\n    let inputFieldData = {};\n    dispatch(initRequest(true));\n    rsapi.post(\"/dashboardview/checkParameteAvailableInDashBoardView\", {\n      'userinfo': userInfo,\n      \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode\n    }).then(response => {\n      if (response.data.viewDashBoardDesignConfigList !== undefined && response.data.viewDashBoardDesignConfigList.length > 0) {\n        openModalNew = true;\n        response.data.viewDashBoardDesignConfigList.map(item => {\n          if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            selectedRecord[item.sfieldname] = rearrangeDateFormat(userInfo, item.dataList[0]);\n            inputFieldData = { ...inputFieldData,\n              [item.sfieldname]: rearrangeDateFormat(userInfo, item.dataList[0]),\n              [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n              [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n            };\n          } else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n            const comboMap = constructOptionList(item.dataList || [], item.svaluemember, item.sdisplaymember, undefined, undefined, true);\n            const comboList = comboMap.get(\"OptionList\");\n            item.dataList = comboList;\n            let getList = comboList.filter(lst => {\n              return lst.value === parseInt(item.sdefaultvalue);\n            });\n\n            if (getList.length > 0) {\n              selectedRecord[item.sfieldname] = {\n                label: getList[0].label,\n                value: getList[0].value\n              };\n              inputFieldData = { ...inputFieldData,\n                [item.sfieldname]: getList[0].value,\n                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n              };\n            } else {\n              selectedRecord[item.sfieldname] = undefined;\n            }\n          } else {\n            selectedRecord[item.sfieldname] = item.sdefaultvalue;\n            inputFieldData = { ...inputFieldData,\n              [item.sfieldname]: item.sdefaultvalue,\n              [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n              [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n            };\n          }\n\n          return null;\n        });\n      }\n\n      masterData = { ...masterData,\n        ...response.data,\n        comboParamData: response.data.comboParamData,\n        selectedDashBoardTypes: DashBoardTypes,\n        viewDashBoardDesignConfigList: response.data.viewDashBoardDesignConfigList,\n        xSeries: openModalNew === true ? [] : response.data.xSeries,\n        ySeries: openModalNew === true ? [] : response.data.ySeries,\n        pieChart: openModalNew === true ? [] : response.data.pieChart\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          openModal: openModalNew,\n          selectedRecord,\n          inputFieldData: inputFieldData,\n          dashBoardTemplateNo,\n          templateCode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkParametersAvailableForDefaultValue(DashBoardTypes, userInfo, masterData, operation, screenName) {\n  return function (dispatch) {\n    let openModalNew = false;\n    let openChildModalNew = false;\n    let selectedRecord = {};\n    let inputFieldData = {};\n    dispatch(initRequest(true));\n    rsapi.post(\"/dashboardview/checkParameteAvailableInDashBoardView\", {\n      'userinfo': userInfo,\n      \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode\n    }).then(response => {\n      const viewList = response.data.viewDashBoardDesignConfigList;\n\n      if (viewList !== undefined && viewList.length > 0) {\n        openChildModalNew = true;\n        viewList.map(item => {\n          if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            selectedRecord[item.sfieldname] = rearrangeDateFormat(userInfo, item.dataList[0]);\n            inputFieldData = { ...inputFieldData,\n              [item.sfieldname]: rearrangeDateFormat(userInfo, item.dataList[0]),\n              [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n              [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n            };\n          } else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n            const comboMap = constructOptionList(item.dataList || [], item.svaluemember, item.sdisplaymember, undefined, undefined, true);\n            const comboList = comboMap.get(\"OptionList\");\n            item.dataList = comboList;\n            let getList = comboList.filter(lst => {\n              return lst.value === parseInt(item.sdefaultvalue);\n            });\n\n            if (getList.length > 0) {\n              selectedRecord[item.sfieldname] = {\n                label: getList[0].label,\n                value: getList[0].value\n              };\n              inputFieldData = { ...inputFieldData,\n                [item.sfieldname]: getList[0].value,\n                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n              };\n            } else {\n              selectedRecord[item.sfieldname] = undefined;\n            }\n          } else {\n            selectedRecord[item.sfieldname] = item.sdefaultvalue;\n            inputFieldData = { ...inputFieldData,\n              [item.sfieldname]: item.sdefaultvalue,\n              [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n              [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname\n            };\n          }\n\n          return null;\n        });\n      }\n\n      masterData = { ...masterData,\n        ...response.data,\n        comboParamData: response.data.comboParamData,\n        selectedDashBoardTypes: DashBoardTypes,\n        viewDashBoardDesignConfigList: viewList,\n        xSeries: openModalNew === true ? [] : response.data.xSeries,\n        ySeries: openModalNew === true ? [] : response.data.ySeries,\n        pieChart: openModalNew === true ? [] : response.data.pieChart\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          openChildModal: openChildModalNew,\n          selectedRecord,\n          inputFieldData: inputFieldData,\n          operation,\n          screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function showDefaultValueInDataGrid(DashBoardTypes, userInfo, masterData) {\n//     return function (dispatch) {\n//         let dashBoardDefaultValue = [];\n//         dispatch(initRequest(true));\n//         rsapi.post(\"/dashboardview/checkParameteAvailableInDashBoardView\", { 'userinfo': userInfo, \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode })\n//             .then(response => {\n//                 if (response.data.viewDashBoardDesignConfigList !== undefined && response.data.viewDashBoardDesignConfigList.length > 0) {\n//                     response.data.viewDashBoardDesignConfigList.map(item => {\n//                         if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n//                             // selectedRecord[item.sfieldname] = new Date(item.dataList[0])\n//                         }\n//                         else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n//                             const comboMap = constructOptionList(item.dataList || [], item.svaluemember,\n//                                 item.sdisplaymember, undefined, undefined, true);\n//                             let index = -1;\n//                             const comboList = comboMap.get(\"OptionList\");\n//                             item.dataList = comboList;\n//                             index = comboList.findIndex(lst => (\n//                                 lst.value === item.sdefaultvalue && item.sdefaultvalue === \"\" ? -1 :\n//                                     parseInt(item.sdefaultvalue))\n//                             )\n//                             if (index !== -1) {\n//                                 dashBoardDefaultValue.push({ ndashboarddesigncode: item.ndashboarddesigncode, sdisplayname: item.sdisplayname, sdefaultvalue: comboList[index].label });\n//                             }\n//                         }\n//                         else {\n//                             dashBoardDefaultValue.push({ ndashboarddesigncode: item.ndashboarddesigncode, sdisplayname: item.sdisplayname, sdefaultvalue: item.sdefaultvalue });\n//                         }\n//                         return null;\n//                     })\n//                 }\n//                 masterData = {\n//                     ...masterData,\n//                     dashBoardDefaultValue: dashBoardDefaultValue\n//                 };\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         masterData, loading: false\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//             })\n//     }\n// }\n\nexport function getDashBoardParameterMappingComboService(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"dashboardtypes/getDashBoardParameterMappingComboData\", {\n      ndashboardtypecode: parseInt(inputParam.dashBoardTypes.ndashboardtypecode),\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      if (response.data[\"ChildComponentList\"].length > 0) {\n        const parentComponentMap = constructOptionList(response.data[\"ParentComponenList\"] || [], \"ndashboarddesigncode\", \"sdisplayname\", undefined, undefined, true);\n        const parentComponentList = parentComponentMap.get(\"OptionList\");\n        const childComponentMap = constructOptionList(response.data[\"ChildComponentList\"] || [], \"ndashboarddesigncode\", \"sdisplayname\", undefined, undefined, true);\n        const childComponentList = childComponentMap.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            parentComponentList: parentComponentList,\n            //response.data[\"ParentComponenList\"] || [],\n            childComponentList: childComponentList,\n            //response.data[\"ChildComponentList\"] || [],\n            operation: inputParam.operation,\n            screenName: inputParam.screenName,\n            selectedRecord: {},\n            openChildModal: true,\n            ncontrolCode: inputParam.ncontrolCode,\n            loading: false\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NOPARAMETERSTOMAPDASHBOARD\"\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportViewChildDataListForDashBoard(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"dashboardview/getChildDataList\", { ...inputParam[\"inputData\"]\n    }).then(response => {\n      const controlList = inputParam.viewDashBoardDesignConfigList;\n      const selectedRecord = inputParam.selectedRecord;\n      Object.keys(response.data).map(displayName => {\n        const index = controlList.findIndex(item => displayName === item.sdisplayname);\n        const comboMap = constructOptionList(response.data[displayName] || [], controlList[index].svaluemember, controlList[index].sdisplaymember, undefined, undefined, true);\n        const comboList = comboMap.get(\"OptionList\");\n        selectedRecord[controlList[index].svaluemember] = undefined;\n        return controlList[index][\"dataList\"] = comboList; //response.data[displayName]\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          viewDashBoardDesignConfigList: controlList,\n          loading: false,\n          inputFieldData: inputParam.inputData.inputfielddata,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      // console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDashBoardHomePagesandTemplates(inputParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    let selectedRecord = {};\n    let selectedId = null;\n    const userRole = rsapi.post(\"userrole/getUserRole\", {\n      \"userinfo\": inputParam.userInfo\n    });\n    const homeDashBoard = rsapi.post(\"dashboardhomeconfig/getDashBoardHomePagesandTemplates\", {\n      \"userinfo\": inputParam.userInfo\n    });\n\n    if (inputParam.operation === \"update\") {\n      const homeDashBoardById = rsapi.post(\"dashboardhomeconfig/getDashBoardHomeConfigByID\", {\n        \"userinfo\": inputParam.userInfo,\n        \"ndashboardhomeprioritycode\": inputParam.editRow.ndashboardhomeprioritycode\n      });\n      urlArray = [homeDashBoard, userRole, homeDashBoardById];\n      selectedId = inputParam.primaryKeyValue;\n    } else {\n      urlArray = [homeDashBoard, userRole];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(Axios.spread((...response) => {\n      const userRoleMap = constructOptionList(response[1].data || [], \"nuserrolecode\", \"suserrolename\", undefined, undefined, true);\n      const userRoleList = userRoleMap.get(\"OptionList\");\n      const parameterMap = constructOptionList(response[0].data.dashBoardHomePages || [], \"ndashboardhomepagecode\", \"sdashboardhomepagename\", undefined, undefined, true);\n      const reportParameterList = parameterMap.get(\"OptionList\");\n\n      if (inputParam.operation === \"update\") {\n        selectedRecord = response[2].data.DashBoardHomeConfigByID;\n        selectedRecord[\"nuserrolecode\"] = {\n          label: response[2].data.DashBoardHomeConfigByID[\"suserrolename\"],\n          value: response[2].data.DashBoardHomeConfigByID[\"nuserrolecode\"]\n        };\n        selectedRecord[\"ndashboardhomepagecode\"] = {\n          label: response[2].data.DashBoardHomeConfigByID[\"sdashboardhomepagename\"],\n          value: response[2].data.DashBoardHomeConfigByID[\"ndashboardhomepagecode\"]\n        };\n        response[2].data.DashBoardTypeNames.map(item => selectedRecord[\"dashboardtype\" + item.nsorter] = {\n          sdashboardtypename: item.sdashboardtypename,\n          ndashboardtypecode: item.ndashboardtypecode\n        });\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          operation: inputParam.operation,\n          screenName: \"IDS_DASHBOARDHOMECONFIG\",\n          openModal: true,\n          loading: false,\n          selectedId,\n          dashBoardHomePages: reportParameterList,\n          dashBoardHomeTemplate: response[0].data.dashBoardHomeTemplate,\n          dashBoardType: response[0].data.dashBoardType,\n          userRoleList: userRoleList,\n          selectedRecord: inputParam.operation === \"update\" ? selectedRecord : undefined,\n          ncontrolCode: inputParam.ncontrolCode\n        }\n      });\n    })).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getHomeDashBoard(userInfo, pageCode, pageAction, respObject) {\n  return function (dispatch) {\n    // dispatch(initRequest(true));\n    rsapi.post(\"/dashboardview/getHomeDashBoard\", {\n      'userinfo': userInfo,\n      \"ndashboardhomepageCode\": pageCode,\n      \"pageAction\": pageAction\n    }).then(response => {\n      //console.log(\"home dash:\", response);\n      let currentPageNo = 0;\n\n      if (response.data[\"homeDashBoard\"].length > 0) {\n        currentPageNo = parseInt(Object.keys(response.data[\"homeDashBoard\"])[0]);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...response.data,\n          currentPageNo,\n          ...respObject\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateDashBoarddesignDefaultValue(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/dashboardtypes/updateDashBoardDesignConfig\", { ...inputData\n    } //{ 'userinfo': inputData.userinfo, \"dashboarddesignconfig\": inputData.dashboarddesignconfig }\n    ).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          openChildModal: false,\n          loading: false\n        }\n      }); // dispatch(showDefaultValueInDataGrid(masterData.selectedDashBoardTypes,inputData.userinfo, masterData));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/DashBoardTypeAction.js"],"names":["rsapi","DEFAULT_RETURN","Axios","toast","initRequest","intl","sortData","constructOptionList","rearrangeDateFormat","chartType","designComponents","fetchRecordDashBoardType","fetchRecordParam","dispatch","chartTypeURL","post","userInfo","selectedRecord","urlArray","selectedId","operation","dashBoardType","parseInt","masterData","selectedDashBoardTypes","ndashboardtypecode","sqlQuery","ncharttypecode","chartProps","chartPropTransaction","nsqlquerycode","all","then","spread","response","xValue","yValue","xSeriesColumns","ySeriesColumns","sqlQueryList","xSeriesColumnList","ySeriesColumnList","sizeField","yFieldBubble","categoryField","chartTypeMap","data","undefined","chartTypeList","get","sqlQueryMap","xSeriesColumnMap","Columns","ySeriesColumnMap","label","value","PIECHART","DONUT","pieCategoryColumn","pieCategoryColumnComboVal","item","Value","ColumnName","Color","pieValueColumn","pieValueColumnComboVal","BUBBLE","xFieldBubble","colorField","map","push","schartpropvalue","field","xField","Colors","type","payload","screenName","openModal","ncontrolCode","loading","ChartProperty","SqlColumns","catch","error","status","formatMessage","id","message","warn","selectCheckBoxDashBoardTypes","DashBoardTypes","getSqlQueryDataService","nchartTypeCode","getSqlQueryColumns","nSqlQueryCode","nChartTypeCode","sqlCols","getAddDashboardDesign","designDashBoard","sqlQueryForParams","length","parameterMap","reportParameterList","designComponentMap","designComponentList","sqlQueryForExistingLinkTable","openChildModal","getDashboardView","dashBoardView","selectCheckBoxDashBoardView","viewDashBoardParam","dashBoardTemplateNo","templateCode","homeDashBoard","currentPageNo","homeDashBoardType","selectedRecordRealValue","respObject","chartData","info","openModalForHomeDashBoard","openNodal","getAllSelectionDashBoardView","dashBoardTypes","selectedDashBoardView","openModalNew","inputFieldData","viewDashBoardDesignConfigList","ndesigncomponentcode","DATEPICKER","sfieldname","dataList","concat","sdesigncomponentname","COMBOBOX","comboMap","svaluemember","sdisplaymember","comboList","getList","filter","lst","sdefaultvalue","xSeries","ySeries","pieChart","checkParametersAvailableForHomeDashBoard","openChildModalNew","comboParamData","checkParametersAvailable","checkParametersAvailableForDefaultValue","viewList","getDashBoardParameterMappingComboService","inputParam","userinfo","parentComponentMap","parentComponentList","childComponentMap","childComponentList","getReportViewChildDataListForDashBoard","controlList","Object","keys","displayName","index","findIndex","sdisplayname","inputData","inputfielddata","getDashBoardHomePagesandTemplates","userRole","homeDashBoardById","editRow","ndashboardhomeprioritycode","primaryKeyValue","userRoleMap","userRoleList","dashBoardHomePages","DashBoardHomeConfigByID","DashBoardTypeNames","nsorter","sdashboardtypename","dashBoardHomeTemplate","getHomeDashBoard","pageCode","pageAction","updateDashBoarddesignDefaultValue"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { sortData, constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\r\nimport { chartType, designComponents } from '../components/Enumeration';\r\n\r\n\r\nexport function fetchRecordDashBoardType(fetchRecordParam) {\r\n    return function (dispatch) {\r\n\r\n        const chartTypeURL = rsapi.post(\"dashboardtypes/getChartTypes\", { \"userinfo\": fetchRecordParam.userInfo });\r\n        let selectedRecord = {};\r\n        let urlArray = [];\r\n        let selectedId = null;\r\n        if (fetchRecordParam.operation === \"update\") {\r\n\r\n            const dashBoardType = rsapi.post(\"dashboardtypes/getDashBoardTypeByID\", { \"userinfo\": fetchRecordParam.userInfo, \"ndashboardtypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ndashboardtypecode) });\r\n            const sqlQuery = rsapi.post(\"dashboardtypes/getSqlQueriesByChart\", { \"userinfo\": fetchRecordParam.userInfo, \"ncharttypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ncharttypecode) });\r\n            const chartProps = rsapi.post(\"dashboardtypes/getChartProperty\", { \"userinfo\": fetchRecordParam.userInfo, \"ncharttypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ncharttypecode) });\r\n            // const sqlCols = rsapi.post(\"dashboardtypes/getColumnsBasedOnQuery\", { \"userinfo\": fetchRecordParam.userInfo, \"nsqlquerycode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.nquerycode) });\r\n            const chartPropTransaction = rsapi.post(\"dashboardtypes/getChartPropTransaction\", {\r\n                \"userinfo\": fetchRecordParam.userInfo, \"ncharttypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ncharttypecode),\r\n                \"ndashboardtypecode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.ndashboardtypecode),\r\n                \"nsqlquerycode\": parseInt(fetchRecordParam.masterData.selectedDashBoardTypes.nsqlquerycode)\r\n            });\r\n\r\n            urlArray = [chartTypeURL, sqlQuery, dashBoardType, chartProps, chartPropTransaction];\r\n            selectedId = fetchRecordParam.masterData.selectedDashBoardTypes.ndashboardtypecode;\r\n        }\r\n        else {\r\n\r\n            urlArray = [chartTypeURL];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n\r\n                let xValue = [];\r\n                let yValue = [];\r\n                let xSeriesColumns = [];\r\n                let ySeriesColumns = [];\r\n                let sqlQueryList = [];\r\n                let xSeriesColumnList = [];\r\n                let ySeriesColumnList = [];\r\n                let sizeField = [];\r\n                let yFieldBubble = [];\r\n                let categoryField = [];\r\n\r\n                const chartTypeMap = constructOptionList(response[0].data || [], \"ncharttypecode\",\r\n                    \"schartname\", undefined, undefined, true);\r\n\r\n                const chartTypeList = chartTypeMap.get(\"OptionList\");\r\n\r\n                if (fetchRecordParam.operation === \"update\") {\r\n\r\n                    const sqlQueryMap = constructOptionList(response[1].data || [], \"nsqlquerycode\",\r\n                        \"ssqlqueryname\", undefined, undefined, true);\r\n\r\n                    sqlQueryList = sqlQueryMap.get(\"OptionList\");\r\n\r\n                    const xSeriesColumnMap = constructOptionList(response[4].data.Columns.xSeriesColumns || [], \"Value\",\r\n                        \"ColumnName\", undefined, undefined, true);\r\n                    xSeriesColumnList = xSeriesColumnMap.get(\"OptionList\");\r\n\r\n                    const ySeriesColumnMap = constructOptionList(response[4].data.Columns.ySeriesColumns || [], \"Value\",\r\n                        \"ColumnName\", undefined, undefined, true);\r\n                    ySeriesColumnList = ySeriesColumnMap.get(\"OptionList\");\r\n\r\n                    selectedRecord = response[2].data;\r\n\r\n                    selectedRecord[\"ncharttypecode\"] = {\r\n                        label: response[2].data[\"schartname\"],\r\n                        value: response[2].data[\"ncharttypecode\"]\r\n                    };\r\n                    selectedRecord[\"nsqlquerycode\"] = {\r\n                        label: response[2].data[\"ssqlqueryname\"],\r\n                        value: response[2].data[\"nsqlquerycode\"]\r\n                    };\r\n                    // let index = 0;\r\n                    if (response[2].data[\"ncharttypecode\"].value === chartType.PIECHART ||\r\n                        response[2].data[\"ncharttypecode\"].value === chartType.DONUT) {\r\n\r\n                        selectedRecord[\"field\"] = {\r\n                            label: response[4].data.pieCategoryColumn,\r\n                            value: response[4].data.pieCategoryColumnComboVal,\r\n                            item: {\r\n                                Value: response[4].data.pieCategoryColumnComboVal,\r\n                                ColumnName: response[4].data.pieCategoryColumn,\r\n                                Color: \"\"\r\n                            }\r\n                        }\r\n\r\n                        selectedRecord[\"nameField\"] = {\r\n                            label: response[4].data.pieValueColumn,\r\n                            value: response[4].data.pieValueColumnComboVal,\r\n                            item: {\r\n                                Value: response[4].data.pieValueColumnComboVal,\r\n                                ColumnName: response[4].data.pieValueColumn,\r\n                                Color: \"\"\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        if (response[2].data[\"ncharttypecode\"].value === chartType.BUBBLE) {\r\n                            selectedRecord[\"xFieldBubble\"] = {\r\n                                label: response[4].data.xFieldBubble[0][\"schartpropvalue\"],\r\n                                value: response[4].data.xFieldBubble[0][\"schartpropvalue\"],\r\n                                item: {\r\n                                    Value: response[4].data.xFieldBubble[0][\"schartpropvalue\"],\r\n                                    ColumnName: response[4].data.xFieldBubble[0][\"schartpropvalue\"],\r\n                                    Color: \"\"\r\n                                }\r\n                            }\r\n                            response[4].data.colorField.map((item) =>\r\n                                sizeField.push({\r\n                                    label: item.ColumnName,\r\n                                    value: item.ColumnName,\r\n                                    item: {\r\n                                        Value: item.ColumnName,\r\n                                        ColumnName: item.ColumnName,\r\n                                        Color: item.Color\r\n                                    }\r\n                                })\r\n                            );\r\n                            response[4].data.yFieldBubble.map((item) =>\r\n                                yFieldBubble.push({\r\n                                    label: item.schartpropvalue,\r\n                                    value: item.schartpropvalue,\r\n                                    item: {\r\n                                        Value: item.schartpropvalue,\r\n                                        ColumnName: item.schartpropvalue,\r\n                                        Color: \"\"\r\n                                    }\r\n                                })\r\n                            );\r\n                            response[4].data.categoryField.map((item) =>\r\n                                categoryField.push({\r\n                                    label: item.schartpropvalue,\r\n                                    value: item.schartpropvalue,\r\n                                    item: {\r\n                                        Value: item.schartpropvalue,\r\n                                        ColumnName: item.schartpropvalue,\r\n                                        Color: \"\"\r\n                                    }\r\n                                })\r\n                            );\r\n                            selectedRecord[\"sizeField\"] = sizeField;\r\n                            selectedRecord[\"yFieldBubble\"] = yFieldBubble;\r\n                            selectedRecord[\"categoryField\"] = categoryField;\r\n\r\n                        } else {\r\n                            // selectedRecord[\"xColumnName\"] = {\r\n                            //     label: response[4].data.xField[0][\"schartpropvalue\"],\r\n                            //     value: response[4].data.xField[0][\"schartpropvalue\"],\r\n                            //     item: {\r\n                            //         Value: response[4].data.xField[0][\"schartpropvalue\"],\r\n                            //         ColumnName: response[4].data.xField[0][\"schartpropvalue\"],\r\n                            //         Color: \"\"\r\n                            //     }\r\n\r\n                            // }\r\n                            response[4].data.Columns.xSeriesColumns && response[4].data.Columns.xSeriesColumns.map(field => {\r\n                                if (field.Value === response[4].data.xField[0][\"schartpropvalue\"]) {\r\n                                    selectedRecord[\"xColumnName\"] = {\r\n                                        label: field.ColumnName,\r\n                                        value: response[4].data.xField[0][\"schartpropvalue\"],\r\n                                        item: {\r\n                                            Value: response[4].data.xField[0][\"schartpropvalue\"],\r\n                                            ColumnName: field.ColumnName,\r\n                                            Color: \"\"\r\n                                        }\r\n\r\n                                    }\r\n                                }\r\n                            })\r\n                            response[4].data.Colors.map((item) =>\r\n                                yValue.push({\r\n                                    label: item.ColumnName,\r\n                                    value: item.ColumnName,\r\n                                    item: {\r\n                                        Value: item.ColumnName,\r\n                                        ColumnName: item.ColumnName,\r\n                                        Color: item.Color\r\n                                    }\r\n                                })\r\n                            )\r\n                            selectedRecord[\"yColumnName\"] = yValue;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        chartType: chartTypeList,\r\n                        sqlQuery: fetchRecordParam.operation === \"update\" ? sqlQueryList : [],\r\n                        selectedRecord: selectedRecord,\r\n                        operation: fetchRecordParam.operation,\r\n                        screenName: \"IDS_DASHBOARDTYPES\",\r\n\r\n                        openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                        loading: false, selectedId,\r\n                        ChartProperty: fetchRecordParam.operation === \"update\" ? response[3].data : [],\r\n                        SqlColumns: fetchRecordParam.operation === \"update\" ? { xSeriesColumns: xSeriesColumnList, ySeriesColumns: ySeriesColumnList } : [],\r\n                        xValue: xValue, yValue: yValue,\r\n                        Colors: fetchRecordParam.operation === \"update\" ? response[4].data.Colors : [],\r\n                        xSeriesColumns, ySeriesColumns, xSeriesColumnList, ySeriesColumnList\r\n                    }\r\n                });\r\n            }))\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function selectCheckBoxDashBoardTypes(DashBoardTypes, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(//\"/dashboardtypes/getAllSelectionDashBoardTypes\"\r\n            \"/dashboardtypes/getDashBoardTypes\"\r\n            , { 'userinfo': userInfo, \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode })\r\n\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, screenName: \"IDS_DESIGNPARAMETERS\" } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSqlQueryDataService(nchartTypeCode, selectedRecord, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dashboardtypes/getSqlQueriesByChart\", { \"userinfo\": userInfo, \"ncharttypecode\": parseInt(nchartTypeCode) })\r\n            .then(response => {\r\n\r\n                const sqlQueryMap = constructOptionList(response.data || [], \"nsqlquerycode\",\r\n                    \"ssqlqueryname\", undefined, undefined, true);\r\n\r\n                const sqlQueryList = sqlQueryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        sqlQuery: sqlQueryList, ChartProperty: [], selectedRecord, loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSqlQueryColumns(nSqlQueryCode, nChartTypeCode, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n\r\n        // let selectedRecord = {};\r\n\r\n        const chartProps = rsapi.post(\"dashboardtypes/getChartProperty\", { \"userinfo\": userInfo, \"ncharttypecode\": parseInt(nChartTypeCode) });\r\n        const sqlCols = rsapi.post(\"dashboardtypes/getColumnsBasedOnQuery\", { \"userinfo\": userInfo, \"nsqlquerycode\": parseInt(nSqlQueryCode) });\r\n\r\n        let urlArray = [chartProps, sqlCols];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                let Value = [];\r\n\r\n                selectedRecord = { ...selectedRecord }\r\n                if (nChartTypeCode !== chartType.PIECHART) {\r\n                    selectedRecord[\"yColumnName\"] = undefined;\r\n                    selectedRecord[\"xColumnName\"] = undefined;\r\n                }\r\n                else {\r\n                    selectedRecord[\"field\"] = undefined;\r\n                    selectedRecord[\"nameField\"] = undefined;\r\n                }\r\n\r\n                const xSeriesColumnMap = constructOptionList(response[1].data.xSeriesColumns || [], \"Value\",\r\n                    \"ColumnName\", undefined, undefined, true);\r\n                const xSeriesColumnList = xSeriesColumnMap.get(\"OptionList\");\r\n\r\n                const ySeriesColumnMap = constructOptionList(response[1].data.ySeriesColumns || [], \"Value\",\r\n                    \"ColumnName\", undefined, undefined, true);\r\n                const ySeriesColumnList = ySeriesColumnMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ChartProperty: response[0].data, SqlColumns: { xSeriesColumns: xSeriesColumnList, ySeriesColumns: ySeriesColumnList },\r\n                        Value: Value, loading: false,\r\n                        // operation: \"create\",\r\n                        selectedRecord, xSeriesColumns: [], ySeriesColumns: [], xSeriesColumnList, ySeriesColumnList\r\n                    }\r\n                });\r\n\r\n            })).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAddDashboardDesign(selectedDashBoardTypes, userInfo) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        let selectedId = null;\r\n\r\n        const designDashBoard = rsapi.post(\"dashboardtypes/getDashBoardDesign\",\r\n            {\r\n                \"userinfo\": userInfo,\r\n                \"ndashBoardTypeCode\": parseInt(selectedDashBoardTypes.ndashboardtypecode),\r\n                \"nSqlQueryCode\": parseInt(selectedDashBoardTypes.nsqlquerycode)\r\n            });\r\n\r\n        urlArray = [designDashBoard];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n                if (response[0].data.sqlQueryForParams.length > 0) {\r\n\r\n                    const parameterMap = constructOptionList(response[0].data.sqlQueryForParams || [], \"sqlQueryParams\",\r\n                        \"sqlQueryParams\", undefined, undefined, true);\r\n\r\n                    const reportParameterList = parameterMap.get(\"OptionList\");\r\n\r\n                    const designComponentMap = constructOptionList(response[0].data.designComponents || [], \"ndesigncomponentcode\",\r\n                        \"sdesigncomponentname\", undefined, undefined, true);\r\n\r\n                    const designComponentList = designComponentMap.get(\"OptionList\");\r\n\r\n                    const sqlQueryMap = constructOptionList(response[0].data.sqlQueryForExistingLinkTable || [], \"nsqlquerycode\",\r\n                        \"ssqlqueryname\", undefined, undefined, true);\r\n\r\n                    const sqlQueryList = sqlQueryMap.get(\"OptionList\");\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n\r\n                            operation: \"create\",\r\n                            screenName: \"IDS_DESIGNPARAMETERS\",\r\n                            openChildModal: true,// ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                            loading: false, selectedId,\r\n                            sqlQueryForParams: reportParameterList,\r\n                            sqlQueryForExistingLinkTable: sqlQueryList,\r\n                            designComponents: designComponentList,\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_NOPARAMETERSTOMAPDASHBOARD\" }))\r\n                }\r\n            }))\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDashboardView(userInfo) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        let selectedId = null;\r\n\r\n        const dashBoardView = rsapi.post(\"dashboardtypes/getDashBoardView\", { \"userinfo\": userInfo, \"ndashBoardTypeCode\": 0 });\r\n\r\n        urlArray = [dashBoardView];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        operation: \"create\",\r\n                        screenName: \"IDS_DASHBOARDVIEW\",\r\n                        openChildModal: true,// ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                        loading: false, selectedId,\r\n                        sqlQueryForParams: response[0].data.sqlQueryForParams,\r\n                        sqlQueryForExistingLinkTable: response[0].data.sqlQueryForExistingLinkTable,\r\n                        designComponents: response[0].data.designComponents,\r\n                    }\r\n                });\r\n            }))\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function selectCheckBoxDashBoardView(screenName, selectedRecord, masterData, viewDashBoardParam, dashBoardTemplateNo,\r\n    templateCode, homeDashBoard, currentPageNo) {\r\n    return function (dispatch) {\r\n        let homeDashBoardType = {};\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dashboardview/getChartParameters\", { ...viewDashBoardParam })\r\n\r\n            .then(response => {\r\n\r\n                const selectedRecordRealValue = selectedRecord;\r\n                masterData = { ...masterData, ...response.data };\r\n\r\n                let respObject = {};\r\n                if (screenName === \"HomeDashBoard\") {\r\n                    if (dashBoardTemplateNo === \"dashBoardType1\") {\r\n                        homeDashBoardType = { \"dashBoardType1\": { ...response.data }, \"ntemplatecode\": templateCode };\r\n                    }\r\n                    else if (dashBoardTemplateNo === \"dashBoardType2\") {\r\n                        homeDashBoardType = { \"dashBoardType2\": { ...response.data }, \"ntemplatecode\": templateCode };\r\n                    }\r\n                    else if (dashBoardTemplateNo === \"dashBoardType3\") {\r\n                        homeDashBoardType = { \"dashBoardType3\": { ...response.data }, \"ntemplatecode\": templateCode };\r\n                    }\r\n                    else if (dashBoardTemplateNo === \"dashBoardType4\") {\r\n                        homeDashBoardType = { \"dashBoardType4\": { ...response.data }, \"ntemplatecode\": templateCode };\r\n                    }\r\n                    if (homeDashBoard && homeDashBoard !== undefined) {\r\n                        homeDashBoard[currentPageNo] = { ...homeDashBoard[currentPageNo], ...homeDashBoardType };\r\n\r\n                    }\r\n                    respObject = { homeDashBoard };\r\n                }\r\n\r\n                if (response.data.chartData.length === 0) {\r\n                    toast.info(intl.formatMessage({ id: \"IDS_NODATAAVAILABLE\" }));\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecordRealValue,\r\n                        masterData, loading: false,\r\n                        openModal: false,\r\n                        openModalForHomeDashBoard: false,\r\n                        ...respObject\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openModal: false } })\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, openNodal: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAllSelectionDashBoardView(dashBoardTypes, userInfo, masterData) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dashboardview/getAllSelectionDashBoardView\", { 'userinfo': userInfo, \"ndashboardtypecode\": dashBoardTypes.ndashboardtypecode })\r\n\r\n            .then(response => {\r\n                dispatch(selectedDashBoardView(response, masterData, userInfo));\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function selectedDashBoardView(response, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        let openModalNew = false;\r\n        let selectedRecord = {};\r\n        let inputFieldData = {};\r\n\r\n        if (response.data.viewDashBoardDesignConfigList !== undefined && response.data.viewDashBoardDesignConfigList.length > 0) {\r\n            openModalNew = true;\r\n            response.data.viewDashBoardDesignConfigList.map(item => {\r\n\r\n                if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                    selectedRecord[item.sfieldname] = rearrangeDateFormat(userInfo, item.dataList[0]);\r\n                    inputFieldData = {\r\n                        ...inputFieldData,\r\n                        [item.sfieldname]: rearrangeDateFormat(userInfo, item.dataList[0]),\r\n                        [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                        [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                    };\r\n                }\r\n                else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n\r\n                    const comboMap = constructOptionList(item.dataList || [], item.svaluemember,\r\n                        item.sdisplaymember, undefined, undefined, true);\r\n\r\n                    const comboList = comboMap.get(\"OptionList\");\r\n                    item.dataList = comboList;\r\n\r\n                    let getList = comboList.filter(lst => {\r\n                        return lst.value === parseInt(item.sdefaultvalue);\r\n                    });\r\n\r\n                    if (getList.length > 0) {\r\n                        selectedRecord[item.sfieldname] = { label: getList[0].label, value: getList[0].value };\r\n\r\n                        inputFieldData = {\r\n                            ...inputFieldData,\r\n                            [item.sfieldname]: getList[0].value,\r\n                            [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                            [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                        };\r\n                    } else {\r\n                        selectedRecord[item.sfieldname] = undefined;\r\n                    }\r\n                }\r\n                else {\r\n                    selectedRecord[item.sfieldname] = item.sdefaultvalue;\r\n                }\r\n\r\n                return null;\r\n            })\r\n\r\n        }\r\n\r\n        masterData = {\r\n            ...masterData,\r\n            ...response.data,\r\n            // comboParamData: response.data.comboParamData,\r\n            // selectedDashBoardTypes: dashBoardTypes,\r\n            viewDashBoardDesignConfigList: response.data.viewDashBoardDesignConfigList,\r\n            xSeries: openModalNew === true ? [] : response.data.xSeries,\r\n            ySeries: openModalNew === true ? [] : response.data.ySeries,\r\n            pieChart: openModalNew === true ? [] : response.data.pieChart\r\n\r\n        };\r\n\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n                masterData, loading: false,\r\n                openModal: openModalNew, selectedRecord,\r\n                inputFieldData: inputFieldData\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport function checkParametersAvailableForHomeDashBoard(DashBoardTypes, userInfo, masterData, dashBoardTemplateNo, templateCode) {\r\n    return function (dispatch) {\r\n        let openModalNew = false;\r\n        let openChildModalNew = false;\r\n        let selectedRecord = {};\r\n        let inputFieldData = {};\r\n        dispatch(initRequest(true));\r\n        // console.log(\"checkParametersAvailableForHomeDashBoard action:\", DashBoardTypes, masterData);\r\n        rsapi.post(\"/dashboardview/checkParameteAvailableInDashBoardView\", { 'userinfo': userInfo, \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode })\r\n\r\n            .then(response => {\r\n                //console.log(\"res in checkParametersAvailableForHomeDashBoard:\", response);\r\n                if (response.data.viewDashBoardDesignConfigList !== undefined && response.data.viewDashBoardDesignConfigList.length > 0) {\r\n\r\n                    openChildModalNew = true;\r\n                    response.data.viewDashBoardDesignConfigList.map(item => {\r\n                        if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n\r\n                            selectedRecord[item.sfieldname] = rearrangeDateFormat(userInfo, item.dataList[0])\r\n                            inputFieldData = {\r\n                                ...inputFieldData,\r\n                                [item.sfieldname]: rearrangeDateFormat(userInfo, item.dataList[0]),\r\n                                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                            };\r\n                        }\r\n                        else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                            const comboMap = constructOptionList(item.dataList || [], item.svaluemember,\r\n                                item.sdisplaymember, undefined, undefined, true);\r\n\r\n                            const comboList = comboMap.get(\"OptionList\");\r\n                            item.dataList = comboList;\r\n\r\n                            let getList = comboList.filter(lst => {\r\n                                return lst.value === parseInt(item.sdefaultvalue);\r\n                            });\r\n\r\n                            if (getList.length > 0) {\r\n                                selectedRecord[item.sfieldname] = { label: getList[0].label, value: getList[0].value };\r\n\r\n                                inputFieldData = {\r\n                                    ...inputFieldData,\r\n                                    [item.sfieldname]: getList[0].value,\r\n                                    [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                    [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                                };\r\n                            } else {\r\n                                selectedRecord[item.sfieldname] = undefined;\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            selectedRecord[item.sfieldname] = item.sdefaultvalue;\r\n\r\n                            inputFieldData = {\r\n                                ...inputFieldData,\r\n                                [item.sfieldname]: item.sdefaultvalue,\r\n                                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                            };\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n\r\n                }\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    comboParamData: response.data.comboParamData,\r\n                    selectedDashBoardTypes: DashBoardTypes,\r\n                    viewDashBoardDesignConfigList: response.data.viewDashBoardDesignConfigList,\r\n                    xSeries: openModalNew === true ? [] : response.data.xSeries,\r\n                    ySeries: openModalNew === true ? [] : response.data.ySeries,\r\n                    pieChart: openModalNew === true ? [] : response.data.pieChart\r\n\r\n                };\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false, selectedRecord, inputFieldData: inputFieldData, dashBoardTemplateNo, templateCode, openModalForHomeDashBoard: openChildModalNew } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function checkParametersAvailable(DashBoardTypes, userInfo, masterData, dashBoardTemplateNo, templateCode) {\r\n    return function (dispatch) {\r\n        let openModalNew = false;\r\n        let selectedRecord = {};\r\n        let inputFieldData = {};\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dashboardview/checkParameteAvailableInDashBoardView\", { 'userinfo': userInfo, \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode })\r\n\r\n            .then(response => {\r\n\r\n                if (response.data.viewDashBoardDesignConfigList !== undefined && response.data.viewDashBoardDesignConfigList.length > 0) {\r\n                    openModalNew = true;\r\n\r\n                    response.data.viewDashBoardDesignConfigList.map(item => {\r\n\r\n                        if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                            selectedRecord[item.sfieldname] = rearrangeDateFormat(userInfo, item.dataList[0])\r\n                            inputFieldData = {\r\n                                ...inputFieldData,\r\n                                [item.sfieldname]: rearrangeDateFormat(userInfo, item.dataList[0]),\r\n                                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                            };\r\n                        }\r\n                        else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                            const comboMap = constructOptionList(item.dataList || [], item.svaluemember,\r\n                                item.sdisplaymember, undefined, undefined, true);\r\n\r\n                            const comboList = comboMap.get(\"OptionList\");\r\n                            item.dataList = comboList;\r\n\r\n\r\n                            let getList = comboList.filter(lst => {\r\n                                return lst.value === parseInt(item.sdefaultvalue);\r\n                            });\r\n                            if (getList.length > 0) {\r\n                                selectedRecord[item.sfieldname] = { label: getList[0].label, value: getList[0].value };\r\n\r\n                                inputFieldData = {\r\n                                    ...inputFieldData,\r\n                                    [item.sfieldname]: getList[0].value,\r\n                                    [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                    [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                                };\r\n                            } else {\r\n                                selectedRecord[item.sfieldname] = undefined;\r\n                            }\r\n                        }\r\n                        else {\r\n                            selectedRecord[item.sfieldname] = item.sdefaultvalue;\r\n\r\n                            inputFieldData = {\r\n                                ...inputFieldData,\r\n                                [item.sfieldname]: item.sdefaultvalue,\r\n                                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                            };\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n\r\n                }\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    comboParamData: response.data.comboParamData,\r\n                    selectedDashBoardTypes: DashBoardTypes,\r\n                    viewDashBoardDesignConfigList: response.data.viewDashBoardDesignConfigList,\r\n                    xSeries: openModalNew === true ? [] : response.data.xSeries,\r\n                    ySeries: openModalNew === true ? [] : response.data.ySeries,\r\n                    pieChart: openModalNew === true ? [] : response.data.pieChart\r\n\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false,\r\n                        openModal: openModalNew, selectedRecord, inputFieldData: inputFieldData,\r\n                        dashBoardTemplateNo, templateCode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function checkParametersAvailableForDefaultValue(DashBoardTypes, userInfo, masterData, operation, screenName) {\r\n    return function (dispatch) {\r\n        let openModalNew = false;\r\n        let openChildModalNew = false;\r\n        let selectedRecord = {};\r\n        let inputFieldData = {};\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dashboardview/checkParameteAvailableInDashBoardView\", { 'userinfo': userInfo, \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode })\r\n\r\n            .then(response => {\r\n                const viewList = response.data.viewDashBoardDesignConfigList;\r\n\r\n                if (viewList !== undefined && viewList.length > 0) {\r\n\r\n                    openChildModalNew = true;\r\n                    viewList.map(item => {\r\n\r\n                        if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                            selectedRecord[item.sfieldname] = rearrangeDateFormat(userInfo, item.dataList[0])\r\n                            inputFieldData = {\r\n                                ...inputFieldData,\r\n                                [item.sfieldname]: rearrangeDateFormat(userInfo, item.dataList[0]),\r\n                                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                            };\r\n                        }\r\n                        else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                            const comboMap = constructOptionList(item.dataList || [], item.svaluemember,\r\n                                item.sdisplaymember, undefined, undefined, true);\r\n\r\n                            const comboList = comboMap.get(\"OptionList\");\r\n                            item.dataList = comboList;\r\n\r\n                            let getList = comboList.filter(lst => {\r\n                                return lst.value === parseInt(item.sdefaultvalue);\r\n                            });\r\n                            if (getList.length > 0) {\r\n                                selectedRecord[item.sfieldname] = { label: getList[0].label, value: getList[0].value };\r\n\r\n                                inputFieldData = {\r\n                                    ...inputFieldData,\r\n                                    [item.sfieldname]: getList[0].value,\r\n                                    [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                    [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                                };\r\n                            } else {\r\n                                selectedRecord[item.sfieldname] = undefined;\r\n                            }\r\n                        }\r\n                        else {\r\n                            selectedRecord[item.sfieldname] = item.sdefaultvalue;\r\n\r\n                            inputFieldData = {\r\n                                ...inputFieldData,\r\n                                [item.sfieldname]: item.sdefaultvalue,\r\n                                [item.sfieldname.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                                [item.sfieldname.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n                            };\r\n                        }\r\n\r\n                        return null;\r\n                    })\r\n\r\n                }\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    comboParamData: response.data.comboParamData,\r\n                    selectedDashBoardTypes: DashBoardTypes,\r\n                    viewDashBoardDesignConfigList: viewList,\r\n                    xSeries: openModalNew === true ? [] : response.data.xSeries,\r\n                    ySeries: openModalNew === true ? [] : response.data.ySeries,\r\n                    pieChart: openModalNew === true ? [] : response.data.pieChart\r\n\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData, loading: false,\r\n                        openChildModal: openChildModalNew, selectedRecord,\r\n                        inputFieldData: inputFieldData, operation, screenName\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function showDefaultValueInDataGrid(DashBoardTypes, userInfo, masterData) {\r\n//     return function (dispatch) {\r\n//         let dashBoardDefaultValue = [];\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"/dashboardview/checkParameteAvailableInDashBoardView\", { 'userinfo': userInfo, \"ndashboardtypecode\": DashBoardTypes.ndashboardtypecode })\r\n\r\n//             .then(response => {\r\n\r\n//                 if (response.data.viewDashBoardDesignConfigList !== undefined && response.data.viewDashBoardDesignConfigList.length > 0) {\r\n\r\n//                     response.data.viewDashBoardDesignConfigList.map(item => {\r\n\r\n//                         if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n//                             // selectedRecord[item.sfieldname] = new Date(item.dataList[0])\r\n//                         }\r\n//                         else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n//                             const comboMap = constructOptionList(item.dataList || [], item.svaluemember,\r\n//                                 item.sdisplaymember, undefined, undefined, true);\r\n\r\n//                             let index = -1;\r\n//                             const comboList = comboMap.get(\"OptionList\");\r\n//                             item.dataList = comboList;\r\n//                             index = comboList.findIndex(lst => (\r\n//                                 lst.value === item.sdefaultvalue && item.sdefaultvalue === \"\" ? -1 :\r\n//                                     parseInt(item.sdefaultvalue))\r\n//                             )\r\n//                             if (index !== -1) {\r\n//                                 dashBoardDefaultValue.push({ ndashboarddesigncode: item.ndashboarddesigncode, sdisplayname: item.sdisplayname, sdefaultvalue: comboList[index].label });\r\n//                             }\r\n//                         }\r\n//                         else {\r\n//                             dashBoardDefaultValue.push({ ndashboarddesigncode: item.ndashboarddesigncode, sdisplayname: item.sdisplayname, sdefaultvalue: item.sdefaultvalue });\r\n\r\n//                         }\r\n\r\n//                         return null;\r\n//                     })\r\n\r\n//                 }\r\n\r\n//                 masterData = {\r\n//                     ...masterData,\r\n//                     dashBoardDefaultValue: dashBoardDefaultValue\r\n\r\n//                 };\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         masterData, loading: false\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\nexport function getDashBoardParameterMappingComboService(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"dashboardtypes/getDashBoardParameterMappingComboData\", {\r\n            ndashboardtypecode: parseInt(inputParam.dashBoardTypes.ndashboardtypecode),\r\n            userinfo: inputParam.userInfo\r\n        })\r\n            .then(response => {\r\n                if (response.data[\"ChildComponentList\"].length > 0) {\r\n\r\n                    const parentComponentMap = constructOptionList(response.data[\"ParentComponenList\"] || [], \"ndashboarddesigncode\",\r\n                        \"sdisplayname\", undefined, undefined, true);\r\n                    const parentComponentList = parentComponentMap.get(\"OptionList\");\r\n\r\n                    const childComponentMap = constructOptionList(response.data[\"ChildComponentList\"] || [], \"ndashboarddesigncode\",\r\n                        \"sdisplayname\", undefined, undefined, true);\r\n                    const childComponentList = childComponentMap.get(\"OptionList\");\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            parentComponentList: parentComponentList, //response.data[\"ParentComponenList\"] || [],\r\n                            childComponentList: childComponentList,//response.data[\"ChildComponentList\"] || [],\r\n                            operation: inputParam.operation,\r\n                            screenName: inputParam.screenName,\r\n                            selectedRecord: {},\r\n                            openChildModal: true,\r\n                            ncontrolCode: inputParam.ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_NOPARAMETERSTOMAPDASHBOARD\" }))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n}\r\n\r\nexport function getReportViewChildDataListForDashBoard(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"dashboardview/getChildDataList\", { ...inputParam[\"inputData\"] })\r\n            .then(response => {\r\n\r\n                const controlList = inputParam.viewDashBoardDesignConfigList;\r\n                const selectedRecord = inputParam.selectedRecord;\r\n\r\n                Object.keys(response.data).map(displayName => {\r\n                    const index = controlList.findIndex(item => displayName === item.sdisplayname);\r\n\r\n                    const comboMap = constructOptionList(response.data[displayName] || [], controlList[index].svaluemember,\r\n                        controlList[index].sdisplaymember, undefined, undefined, true);\r\n\r\n                    const comboList = comboMap.get(\"OptionList\");\r\n\r\n                    selectedRecord[controlList[index].svaluemember] = undefined;\r\n\r\n                    return controlList[index][\"dataList\"] = comboList;//response.data[displayName]\r\n                })\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        viewDashBoardDesignConfigList: controlList,\r\n                        loading: false,\r\n                        inputFieldData: inputParam.inputData.inputfielddata,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                // console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDashBoardHomePagesandTemplates(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        let selectedRecord = {};\r\n        let selectedId = null;\r\n\r\n        const userRole = rsapi.post(\"userrole/getUserRole\", { \"userinfo\": inputParam.userInfo });\r\n        const homeDashBoard = rsapi.post(\"dashboardhomeconfig/getDashBoardHomePagesandTemplates\", { \"userinfo\": inputParam.userInfo });\r\n        if (inputParam.operation === \"update\") {\r\n\r\n            const homeDashBoardById = rsapi.post(\"dashboardhomeconfig/getDashBoardHomeConfigByID\", { \"userinfo\": inputParam.userInfo, \"ndashboardhomeprioritycode\": inputParam.editRow.ndashboardhomeprioritycode });\r\n\r\n            urlArray = [homeDashBoard, userRole, homeDashBoardById];\r\n            selectedId = inputParam.primaryKeyValue;\r\n        }\r\n        else {\r\n            urlArray = [homeDashBoard, userRole];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(Axios.spread((...response) => {\r\n\r\n                const userRoleMap = constructOptionList(response[1].data || [], \"nuserrolecode\",\r\n                    \"suserrolename\", undefined, undefined, true);\r\n\r\n                const userRoleList = userRoleMap.get(\"OptionList\");\r\n\r\n                const parameterMap = constructOptionList(response[0].data.dashBoardHomePages || [], \"ndashboardhomepagecode\",\r\n                    \"sdashboardhomepagename\", undefined, undefined, true);\r\n\r\n                const reportParameterList = parameterMap.get(\"OptionList\");\r\n\r\n                if (inputParam.operation === \"update\") {\r\n\r\n                    selectedRecord = response[2].data.DashBoardHomeConfigByID;\r\n\r\n                    selectedRecord[\"nuserrolecode\"] = {\r\n                        label: response[2].data.DashBoardHomeConfigByID[\"suserrolename\"],\r\n                        value: response[2].data.DashBoardHomeConfigByID[\"nuserrolecode\"]\r\n                    };\r\n                    selectedRecord[\"ndashboardhomepagecode\"] = {\r\n                        label: response[2].data.DashBoardHomeConfigByID[\"sdashboardhomepagename\"],\r\n                        value: response[2].data.DashBoardHomeConfigByID[\"ndashboardhomepagecode\"]\r\n                    };\r\n\r\n                    response[2].data.DashBoardTypeNames.map((item) =>\r\n                        selectedRecord[\"dashboardtype\" + item.nsorter] = { sdashboardtypename: item.sdashboardtypename, ndashboardtypecode: item.ndashboardtypecode }\r\n                    )\r\n\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n\r\n                        operation: inputParam.operation,\r\n                        screenName: \"IDS_DASHBOARDHOMECONFIG\",\r\n                        openModal: true,\r\n                        loading: false, selectedId,\r\n                        dashBoardHomePages: reportParameterList,\r\n                        dashBoardHomeTemplate: response[0].data.dashBoardHomeTemplate,\r\n                        dashBoardType: response[0].data.dashBoardType,\r\n                        userRoleList: userRoleList,\r\n                        selectedRecord: inputParam.operation === \"update\" ? selectedRecord : undefined,\r\n                        ncontrolCode: inputParam.ncontrolCode\r\n                    }\r\n                });\r\n            }))\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getHomeDashBoard(userInfo, pageCode, pageAction, respObject) {\r\n    return function (dispatch) {\r\n        // dispatch(initRequest(true));\r\n        rsapi.post(\"/dashboardview/getHomeDashBoard\", { 'userinfo': userInfo, \"ndashboardhomepageCode\": pageCode, \"pageAction\": pageAction })\r\n\r\n            .then(response => {\r\n                //console.log(\"home dash:\", response);\r\n                let currentPageNo = 0;\r\n                if (response.data[\"homeDashBoard\"].length > 0) {\r\n                    currentPageNo = parseInt(Object.keys(response.data[\"homeDashBoard\"])[0]);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { ...response.data, currentPageNo, ...respObject } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateDashBoarddesignDefaultValue(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dashboardtypes/updateDashBoardDesignConfig\", { ...inputData }\r\n            //{ 'userinfo': inputData.userinfo, \"dashboarddesignconfig\": inputData.dashboarddesignconfig }\r\n        )\r\n\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: { ...masterData, ...response.data },\r\n                        openChildModal: false,\r\n                        loading: false\r\n                    }\r\n                });\r\n                // dispatch(showDefaultValueInDataGrid(masterData.selectedDashBoardTypes,inputData.userinfo, masterData));\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}