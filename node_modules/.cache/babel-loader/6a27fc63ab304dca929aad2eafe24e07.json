{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntryPredefinedComments.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport { intl } from '../../components/App';\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\nimport FormMultiSelectComponent from '../../components/form-multi-select/form-multi-select.component';\n\nconst ResultEntryPredefinedComments = props => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, props.showMultiSelectCombo === true ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormMultiSelectComponent, {\n    name: \"ntestgrouptestpredefsubcode\",\n    label: props.salertmessage //props.intl.formatMessage({ id: \"IDS_SUBCODEDRESULT\" })\n    ,\n    options: props.testgrouptestpredefsubresultOptions || [],\n    optionId: \"ntestgrouptestpredefsubcode\",\n    optionValue: \"ssubcodedresult\",\n    value: props.selectedRecord && props.selectedRecord[\"ntestgrouptestpredefsubcode\"] || [],\n    isClearable: true,\n    disableSearch: false,\n    disabled: false,\n    closeMenuOnSelect: false,\n    alphabeticalSort: true,\n    allItemSelectedLabel: props.intl.formatMessage({\n      id: \"IDS_ALLITEMSELECTED\"\n    }),\n    noOptionsLabel: props.intl.formatMessage({\n      id: \"IDS_NOOPTION\"\n    }),\n    searchLabel: props.intl.formatMessage({\n      id: \"IDS_SEARCH\"\n    }),\n    selectAllLabel: props.intl.formatMessage({\n      id: \"IDS_SELECTALL\"\n    }),\n    onChange: event => props.onComboChange(event, \"ntestgrouptestpredefsubcode\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 25\n    }\n  }))) : /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormTextarea, {\n    name: \"spredefinedcomments\",\n    label: intl.formatMessage({\n      id: \"IDS_PREFINEDCOMMENTS\"\n    }),\n    placeholder: intl.formatMessage({\n      id: \"IDS_PREFINEDCOMMENTS\"\n    }),\n    type: \"text\",\n    value: props.selectedRecord !== undefined ? props.selectedRecord.spredefinedcomments : \"\",\n    isMandatory: false,\n    required: true,\n    maxLength: 255,\n    onChange: event => props.onInputChange(event, \"spredefinedcomments\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }))));\n};\n\nexport default injectIntl(ResultEntryPredefinedComments);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryPredefinedComments.jsx"],"names":["React","Row","Col","injectIntl","FormTextarea","intl","MediaHeader","MediaLabel","MediaSubHeader","FormMultiSelectComponent","ResultEntryPredefinedComments","props","showMultiSelectCombo","salertmessage","testgrouptestpredefsubresultOptions","selectedRecord","formatMessage","id","event","onComboChange","undefined","spredefinedcomments","onInputChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport { intl } from '../../components/App';\r\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\r\nimport FormMultiSelectComponent from '../../components/form-multi-select/form-multi-select.component';\r\n\r\nconst ResultEntryPredefinedComments = (props) => {\r\n    return (\r\n        <>\r\n            {props.showMultiSelectCombo === true ?\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <FormMultiSelectComponent\r\n                            name={\"ntestgrouptestpredefsubcode\"}\r\n                            label={props.salertmessage//props.intl.formatMessage({ id: \"IDS_SUBCODEDRESULT\" })\r\n                            }\r\n                            options={props.testgrouptestpredefsubresultOptions || []}\r\n                            optionId=\"ntestgrouptestpredefsubcode\"\r\n                            optionValue=\"ssubcodedresult\"\r\n                            value={props.selectedRecord && props.selectedRecord[\"ntestgrouptestpredefsubcode\"] || []}\r\n                            isClearable={true}\r\n                            disableSearch={false}\r\n                            disabled={false}\r\n                            closeMenuOnSelect={false}\r\n                            alphabeticalSort={true}\r\n                            allItemSelectedLabel={props.intl.formatMessage({ id: \"IDS_ALLITEMSELECTED\" })}\r\n                            noOptionsLabel={props.intl.formatMessage({ id: \"IDS_NOOPTION\" })}\r\n                            searchLabel={props.intl.formatMessage({ id: \"IDS_SEARCH\" })}\r\n                            selectAllLabel={props.intl.formatMessage({ id: \"IDS_SELECTALL\" })}\r\n                            onChange={(event) => props.onComboChange(event, \"ntestgrouptestpredefsubcode\")}\r\n                        />\r\n                    </Col>\r\n\r\n                </Row> : <Row>\r\n                    <Col md={12}>\r\n                        <FormTextarea\r\n                            name={\"spredefinedcomments\"}\r\n                            label={ intl.formatMessage({ id: \"IDS_PREFINEDCOMMENTS\" })\r\n                                    }\r\n                            placeholder={intl.formatMessage({ id: \"IDS_PREFINEDCOMMENTS\" })}\r\n                            type=\"text\"\r\n                            value={props.selectedRecord !== undefined ? props.selectedRecord.spredefinedcomments : \"\"}\r\n                            isMandatory={false}\r\n                            required={true}\r\n                            maxLength={255}\r\n                            onChange={(event) => props.onInputChange(event, \"spredefinedcomments\")}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {/* {props.showMultiSelectCombo === false ? \"\" :} */}\r\n\r\n        </>\r\n    )\r\n}\r\nexport default injectIntl(ResultEntryPredefinedComments);\r\n"]},"metadata":{},"sourceType":"module"}