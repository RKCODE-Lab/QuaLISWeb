{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\AddLanguages.jsx\";\nimport React from 'react';\nimport FormInput from '../components/form-input/form-input.component';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { MediaHeader } from './App.styles';\n\nconst AddLanguageSynonym = props => {\n  let fieldName = props.fieldName || 'displayname';\n  let jsondataKeys = [];\n  jsondataKeys = Object.keys(props.selectedJsondata);\n  const screenName = props.needheader.sneedheader;\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, jsondataKeys.map(item => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, screenName && screenName === \"true\" ? /*#__PURE__*/React.createElement(MediaHeader, {\n      className: \"mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 33\n      }\n    }, props.intl.formatMessage({\n      id: \"IDS_\" + (fieldName = item)\n    })) : \"\", fieldName === item ? props.languages.map(lang => {\n      return /*#__PURE__*/React.createElement(FormInput, {\n        label: lang.label,\n        name: lang.value,\n        type: \"text\",\n        onChange: event => props.onInputOnChange(event, lang.label, item),\n        placeholder: lang.label,\n        value: props.selectedFieldRecord[fieldName] && props.selectedFieldRecord[fieldName][lang.value] ? props.selectedFieldRecord[fieldName][lang.value] : \"\",\n        isMandatory: lang.value == \"en-US\" ? true : false,\n        required: true,\n        readOnly: false,\n        maxLength: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 41\n        }\n      });\n    }) : \"\");\n  })));\n}; //     return (\n//         name2.map(item =>\n//             <>\n//                 {screenName && screenName === \"true\" ? \n//                 <MediaHeader className='mb-3'>\n//                     {fieldName=item}\n//                 </MediaHeader>:\"\"}\n//             </>\n//         )\n//     )\n// }\n\n\nexport default injectIntl(AddLanguageSynonym);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/AddLanguages.jsx"],"names":["React","FormInput","Row","Col","injectIntl","MediaHeader","AddLanguageSynonym","props","fieldName","jsondataKeys","Object","keys","selectedJsondata","screenName","needheader","sneedheader","map","item","intl","formatMessage","id","languages","lang","label","value","event","onInputOnChange","selectedFieldRecord"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,+CAAtB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,WAAT,QAA4B,cAA5B;;AAEA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAClC,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAN,IAAmB,aAAnC;AACA,MAAIC,YAAY,GAAG,EAAnB;AACAA,EAAAA,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACK,gBAAlB,CAAf;AACD,QAAMC,UAAU,GAAGN,KAAK,CAACO,UAAN,CAAiBC,WAApC;AACC,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKN,YAAY,CAACO,GAAb,CAAkBC,IAAD,IAAU;AACxB,wBACI,0CACKJ,UAAU,IAAIA,UAAU,KAAK,MAA7B,gBACG,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEKN,KAAK,CAACW,IAAN,CAAWC,aAAX,CAAyB;AAAEC,MAAAA,EAAE,EAAE,UAAQZ,SAAS,GAACS,IAAlB;AAAN,KAAzB,CAFL,CADH,GAIoB,EALzB,EAMKT,SAAS,KAAKS,IAAd,GACGV,KAAK,CAACc,SAAN,CAAgBL,GAAhB,CAAoBM,IAAI,IAAI;AACxB,0BACI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEA,IAAI,CAACC,KADhB;AAEI,QAAA,IAAI,EAAED,IAAI,CAACE,KAFf;AAGI,QAAA,IAAI,EAAC,MAHT;AAII,QAAA,QAAQ,EAAGC,KAAD,IAAWlB,KAAK,CAACmB,eAAN,CAAsBD,KAAtB,EAA6BH,IAAI,CAACC,KAAlC,EAAyCN,IAAzC,CAJzB;AAKI,QAAA,WAAW,EAAEK,IAAI,CAACC,KALtB;AAMG,QAAA,KAAK,EAAEhB,KAAK,CAACoB,mBAAN,CAA0BnB,SAA1B,KAAwCD,KAAK,CAACoB,mBAAN,CAA0BnB,SAA1B,EAAqCc,IAAI,CAACE,KAA1C,CAAxC,GAA2FjB,KAAK,CAACoB,mBAAN,CAA0BnB,SAA1B,EAAqCc,IAAI,CAACE,KAA1C,CAA3F,GAA8I,EANxJ;AAOI,QAAA,WAAW,EAAEF,IAAI,CAACE,KAAL,IAAc,OAAd,GAAwB,IAAxB,GAA+B,KAPhD;AAQI,QAAA,QAAQ,EAAE,IARd;AASI,QAAA,QAAQ,EAAE,KATd;AAUI,QAAA,SAAS,EAAE,IAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAcH,KAfD,CADH,GAiBO,EAvBZ,CADJ;AA2BH,GA5BA,CADL,CADJ,CADJ;AAqCH,CA1CD,C,CA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAepB,UAAU,CAACE,kBAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport FormInput from '../components/form-input/form-input.component';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { MediaHeader } from './App.styles';\r\n\r\nconst AddLanguageSynonym = (props) => {\r\n    let fieldName = props.fieldName || 'displayname'\r\n    let jsondataKeys = [];\r\n    jsondataKeys = Object.keys(props.selectedJsondata);\r\n   const screenName = props.needheader.sneedheader;\r\n    return (\r\n        <Row>\r\n            <Col>\r\n                {jsondataKeys.map((item) => {\r\n                    return (\r\n                        <>\r\n                            {screenName && screenName === \"true\" ?\r\n                                <MediaHeader className='mb-3'>\r\n                                    {/* {fieldName = item} */}\r\n                                    {props.intl.formatMessage({ id: \"IDS_\"+(fieldName=item) })}\r\n                                </MediaHeader> : \"\"}\r\n                            {fieldName === item ?\r\n                                props.languages.map(lang => {\r\n                                    return (\r\n                                        <FormInput\r\n                                            label={lang.label}\r\n                                            name={lang.value}\r\n                                            type=\"text\"\r\n                                            onChange={(event) => props.onInputOnChange(event, lang.label, item)}\r\n                                            placeholder={lang.label}\r\n                                           value={props.selectedFieldRecord[fieldName] && props.selectedFieldRecord[fieldName][lang.value] ? props.selectedFieldRecord[fieldName][lang.value] : \"\"}\r\n                                            isMandatory={lang.value == \"en-US\" ? true : false}\r\n                                            required={true}\r\n                                            readOnly={false}\r\n                                            maxLength={\"30\"}\r\n                                        />\r\n                                    );\r\n                                }\r\n                                ) : \"\"}\r\n                        </>\r\n                    )\r\n                }\r\n                )\r\n                }\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n//     return (\r\n//         name2.map(item =>\r\n//             <>\r\n//                 {screenName && screenName === \"true\" ? \r\n//                 <MediaHeader className='mb-3'>\r\n//                     {fieldName=item}\r\n//                 </MediaHeader>:\"\"}\r\n//             </>\r\n//         )\r\n//     )\r\n// }\r\nexport default injectIntl(AddLanguageSynonym)"]},"metadata":{},"sourceType":"module"}