{"ast":null,"code":"import Axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { intl } from \"../components/App\";\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\nimport { reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { crudMaster } from \"./ServiceAction\";\nimport { getFieldSpecification as getFieldSpecification3 } from '../components/type3component/Type3FieldSpecificationList';\nimport { filterObjectForReactAwesomeFilter } from \"./RegistrationAction\"; // export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\n\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nconst {\n  checkTree,\n  loadTree\n} = QbUtils; //     return function (dispatch) {\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\n//         dispatch(initRequest(true));\n//         return rsapi.post(\"release/updateRelease\",\n//             inputData\n//         )\n//             .then(response => {\n//                 if (response.data.statusCodeValue !== 200) {\n//                     toast.warn(intl.formatMessage({\n//                         id: response.data.body\n//                     }));\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             loading: false\n//                         }\n//                     });\n//                 }\n//                 else {\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\n//                     }\n//                     let masterData = {\n//                         ...Data1, ...response.data.body,\n//                     };\n//                     console.log(\"ReleasedTest,\", masterData);\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\n//                   //  dispatch(generateReport(inputData,masterData))\n//                     dispatch({\n//                         type: DEFAULT_RETURN, payload: {\n//                             masterData,\n//                             change: inputData.change,\n//                             loading: false,\n//                             openModal:false\n//                         }\n//                     });\n//                 }\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                     console.log(\"ErrorRelease,\", error);\n//                 }\n//                 else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//         }\n//         else {\n//             toast.warn(intl.formatMessage({\n//                 id: \"IDS_SELECTANYONESAMPLE\"\n//             }));\n//         }\n//     }\n// }\n\nexport function getReleasedRegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            SampleTypeValue: inputData.SampleTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedRegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getRegistrationSubType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegTypeValue: inputData.RegTypeValue,\n            realSampleTypeList: inputData.realSampleTypeList || [],\n            realReportTypeList: inputData.realReportTypeList || [],\n            realRegTypeList: inputData.realRegTypeList || [],\n            realRegSubTypeList: inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedFilterBasedTest(inputData) {\n  return function (dispatch) {\n    if (inputData.napprovalversioncode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"release/getFilterBasedTest\", inputData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...responseData,\n              RegSubTypeValue: inputData.RegSubTypeValue,\n              ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n              DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n            },\n            loading: false\n          }\n        });\n\n        if (response.data.rtn) {\n          toast.warn(response.data.rtn);\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PLSSELECTALLVALUESINFILTER\"\n      }));\n    }\n  };\n}\nexport function getReleasedApprovalVersion(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovalVersion\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\n            realReportTypeList: inputParam.inputData.realReportTypeList || [],\n            realRegTypeList: inputParam.inputData.realRegTypeList || [],\n            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\n            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\n            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\n            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || [] // fromDate: inputParam.inputData.dfrom,\n            // toDate: inputParam.inputData.dto,\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = {};\n      let nsectioncode = {}; // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\n      //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\n\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (nsectioncode !== undefined) {\n        nsectioncode = inputParam.inputData.nsectioncode;\n      } // }\n      //     else {\n      //         responseData.ReleaseHistory = []\n      //         responseData.selectedReleaseHistory= []\n      //         masterData = {\n      //             ...inputParam.masterData,\n      //             ...responseData,\n      //         }\n      //     }\n\n\n      sortData(masterData, \"\", \"ncoaparentcode\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          nsectioncode: nsectioncode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedSample(inputParam, ncontrolCode) {\n  if (inputParam.masterData.realReportTypeValue.ncoareporttypecode === reportCOAType.PATIENTWISE) {\n    let fieldList = [];\n    fieldList = getFieldSpecification3().get(\"ExternalOrder\") || [];\n    const languageTypeCode = inputParam.inputData.userinfo.slanguagetypecode;\n    const {\n      fields,\n      gridColumns\n    } = filterObjectForReactAwesomeFilter(fieldList[0].filterfields, languageTypeCode, undefined, undefined);\n    let awesomeTree = fieldList[0].awesomeTree ? checkTree(loadTree(fieldList[0].awesomeTree), fieldList[0].awesomeConfig) : undefined;\n    return function (dispatch) {\n      let urlArray = [];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let ProjectTypeList = [];\n        let sectionList = [];\n        let masterData = {};\n        let openModal = true;\n        masterData = { ...inputParam.masterData\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            fields,\n            gridColumns,\n            awesomeTree,\n            seletedFilterComponent: fieldList[0],\n            // awesomeTree:fieldList[0].awesomeTree,\n            awesomeConfig: undefined,\n            lstPatient: [],\n            kendoSkip: 0,\n            kendoTake: 5,\n            masterData,\n            expandCheck: false,\n            ProjectTypeList,\n            ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: false,\n            isEditPopup: false,\n            screenName: \"IDS_PATIENTSEARCH\",\n            sectionList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: true,\n            operation: \"save\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    return function (dispatch) {\n      const screenName = \"\";\n      let urlArray = [];\n      inputParam.inputData['isAddPopup'] = true;\n      const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n\n      const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n      const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n\n      if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE || inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        urlArray = [projectType];\n      } else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n        urlArray = [sectionType];\n      } else {\n        urlArray = [releaseSample //,reportType\n        ];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n        //     \"scoareporttypename\", undefined, undefined, false);\n        // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n        let ProjectTypeList = [];\n        let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let openModal = true;\n        let selectedRecord = inputParam.inputData.selectedRecord;\n\n        if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE || inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n          const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n          ProjectTypeList = projectTypeMap.get(\"OptionList\");\n          masterData = { ...inputParam.masterData,\n            ReleaseSubSample: [],\n            ReleaseTest: [],\n            ReleaseSample: []\n          };\n\n          if (inputParam.inputData.selectedRecord.nprojecttypecode) {\n            delete inputParam.inputData.selectedRecord.nprojecttypecode;\n          }\n\n          if (inputParam.inputData.selectedRecord.nprojectmastercode) {\n            delete inputParam.inputData.selectedRecord.nprojectmastercode;\n          }\n        } else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\n          const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n          sectionList = sectionTypeMap.get(\"OptionList\");\n          masterData = { ...inputParam.masterData,\n            ReleaseSubSample: [],\n            ReleaseTest: [],\n            ReleaseSample: []\n          };\n\n          if (inputParam.inputData.selectedRecord.nsectioncode) {\n            delete inputParam.inputData.selectedRecord.nsectioncode;\n          }\n        } else {\n          if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n          } else {\n            let responseData = { ...response[0].data\n            };\n            masterData = { ...inputParam.masterData,\n              ...responseData\n            };\n            openModal = false;\n            toast.warn(intl.formatMessage({\n              id: \"IDS_NOSAMPLESAREAVAILABLE\"\n            }));\n          }\n        }\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            expandCheck: false,\n            ProjectTypeList,\n            ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: false,\n            isEditPopup: false,\n            screenName: inputParam.inputData.screenName,\n            sectionList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: true,\n            operation: \"save\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  }\n}\nexport function generateReleasedReport(inputData, Data, preventtb) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = []; //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\n    //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\n\n    inputData['preventTbFlow'] = preventtb === true ? preventtb : false;\n\n    if (inputData.listStatus === transactionStatus.CORRECTION) {\n      const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\n      urlArray = [afterCorrection];\n    } else {\n      const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\n      urlArray = [releaseSample];\n    }\n\n    Axios.all(urlArray).then(response => {\n      if (response[0].data.rtn === \"MappingNeeded\") {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            modalShow: false,\n            // selectedRecord: {}, \n            loadEsign: false //openModal: false,\n            // preventTbCheck:true\n\n          }\n        });\n        inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({\n          id: \"IDS_SUBSAMPLEWASNOTMAPPED\"\n        }), intl.formatMessage({\n          id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\"\n        }), intl.formatMessage({\n          id: \"IDS_OK\"\n        }), intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => dispatch(generateReleasedReport(inputData, Data, true)), false, () => dispatch(cancelPopUp(inputData, Data)));\n      } else {\n        if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\n          dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\n        }\n\n        if (response[0].data[\"PreventTb\"]) {\n          toast.warn(response[0].data[\"PreventTb\"]);\n        }\n\n        let masterData = { ...Data,\n          ...response[0].data\n        };\n\n        if (response[0].data.rtn === \"Success\") {\n          document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\n          document.getElementById(\"download_data\").click();\n        } else {\n          toast.warn(response[0].data.rtn);\n        }\n\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            change: inputData.change,\n            masterData,\n            modalShow: false,\n            selectedRecord: {},\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data['rtn']);\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function cancelPopUp(inputData, Data) {\n  return function (dispatch) {\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        loading: false,\n        modalShow: false,\n        selectedRecord: {},\n        loadEsign: false,\n        openModal: false\n      }\n    });\n  };\n}\nexport function getReleasedFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReleasedDataDetails(inputParam, coahistory) {\n  return function (dispatch) {\n    let inputParamData = {\n      dfrom: inputParam.inputData.dfrom,\n      dto: inputParam.inputData.dto,\n      nsampletypecode: inputParam.inputData.nsampletypecode,\n      nregtypecode: inputParam.inputData.nregtypecode,\n      nregsubtypecode: inputParam.inputData.nregsubtypecode,\n      ntransactionstatus: inputParam.inputData.ntransactionstatus,\n      nsectioncode: inputParam.inputData.nsectioncode,\n      ntestcode: inputParam.inputData.ntestcode,\n      napprovalversioncode: inputParam.inputData.napprovalversioncode,\n      napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\n      userinfo: inputParam.inputData.userinfo,\n      nneedsubsample: inputParam.inputData.nneedsubsample,\n      ncoaparentcode: inputParam.ncoaparentcode,\n      npreregno: inputParam.npreregno,\n      ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\n      ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\n      isAddPopup: false\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseSample\", inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectByProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectByProjectType\", inputData).then(response => {\n      const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      const projectMasterList = projectMasterMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          projectMasterList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getApprovedProjectType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getApprovedProjectType\", inputData).then(response => {\n      const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, false);\n      const ProjectTypeList = projectTypeMap.get(\"OptionList\"); //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\n      //     \"sprojecttypename\", undefined, undefined, false);\n      // const projectMasterList = projectMasterMap.get(\"OptionList\");\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ProjectTypeList,\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            ProjectTypeValue: inputData.ProjectTypeValue\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionForSectionWise(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getSection\", inputData.inputData).then(response => {\n      const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, false);\n      const sectionList = sectionMap.get(\"OptionList\");\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionList,\n          masterData: { ...inputData.masterData,\n            ...responseData\n          },\n          loading: false,\n          expandCheck: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportForPortal(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/SendToPortalReport\", inputData).then(response => {\n      if (response.data[\"rtn\"]) {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(String(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response !== undefined && error.response.status === 500) {\n        toast.error(error.message);\n      } else if (error.response === undefined) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function getApprovedRecordsAsDraft(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/saveRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data,\n            searchedData: undefined\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function previewAndFinalReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // const inputData = {\n    //     npreregno: inputParam.npreregno,\n    //  //   nsectioncode: inputParam.nsectioncode || -1,\n    //     userinfo: inputParam.userinfo,\n    //     nprimarykey: inputParam.npreregno,\n    //     nreporttypecode: REPORTTYPE.COAREPORT,\n    //     sprimarykeyname: \"npreregno\",\n    //     ncontrolcode: inputParam.ncontrolCode,\n    //     nregtypecode: inputParam.nregtypecode,\n    //     nregsubtypecode: inputParam.nregsubtypecode,\n    //     ntransactiontestcode:inputParam.ntransactiontestcode,\n    //     napproveconfversioncode: inputParam.napprovalversioncode,\n    //     ncoaparentcode: inputParam.ncoaparentcode,\n    //     ntransactionstatus:inputParam.ntransactionstatus\n    // }\n\n    rsapi.post(\"release/generateReleasedReport\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n    urlArray = [releaseSample, statusService //,reportType\n    ];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[1].data.Status === \"Success\") {\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n        let responseData = { ...response[0].data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        }; // responseData = sortData(responseData)\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            isDeletePopup: true,\n            isComboCheck: true,\n            isEditPopup: false,\n            ncontrolCode,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isAddPopup: false,\n            operation: \"delete\",\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            expandCheck: false,\n            screenName: inputParam.inputData.screenName\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDeleteApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/deleteRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //    masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData); // const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\n    // if (inputParam.inputData.ncoareporttypecode === 7) {\n    //     urlArray = [ projectType,statusService];\n    // }\n    // else if (inputParam.inputData.ncoareporttypecode === 8) {\n    //     urlArray = [ releaseSample,statusService];\n    // }\n    // else {\n\n    urlArray = [releaseSample, statusService //,reportType\n    ]; // }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\n      //     \"scoareporttypename\", undefined, undefined, false);\n      // const ReportTypeList = reportTypeMap.get(\"OptionList\");\n      if (response[1].data.Status === \"Success\") {\n        let ProjectTypeList = [];\n        let sectionList = []; // let selectedRecord = {\"ncoareporttypecode\": {\n        //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\n        //      \"label\": response[1].data.ReportType[0].scoareporttypename\n        // }\n        // };\n\n        let masterData = {};\n        let openModal = true;\n        let selectedRecord = inputParam.inputData.selectedRecord;\n\n        if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n        } else {\n          let responseData = { ...response[0].data\n          };\n          masterData = { ...inputParam.masterData,\n            ...responseData\n          };\n          openModal = false;\n          toast.warn(intl.formatMessage({\n            id: \"IDS_NOSAMPLESAREAVAILABLE\"\n          }));\n        } // responseData = sortData(responseData)\n\n\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            sectionList,\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            isDeletePopup: false,\n            isComboCheck: true,\n            isEditPopup: true,\n            ProjectTypeList,\n            loading: false,\n            showFilter: false,\n            openModal: openModal,\n            isAddPopup: false,\n            operation: \"append\",\n            expandCheck: false,\n            screenName: inputParam.inputData.screenName\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function UpdateApprovedSample(inputData, Data1) {\n  return function (dispatch) {\n    if (inputData !== undefined && inputData.npreregno !== \"\") {\n      dispatch(initRequest(true));\n      return rsapi.post(\"release/appendRelease\", inputData).then(response => {\n        if (response.data.rtn === \"Success\") {\n          let masterData = { ...Data1,\n            ...response.data\n          };\n          sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        } else {\n          toast.warn(response.data.rtn);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              //  masterData,\n              change: inputData.change,\n              loading: false,\n              loadEsign: false,\n              openModal: false,\n              expandCheck: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTANYONESAMPLE\"\n      }));\n    }\n  };\n}\nexport function getreportcomments(inputData, Data) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getreportcomments\", inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputData.change,\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          openModal: true,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchReportInfoReleaseById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData).then(response => {\n      // const parameterResults = response.data.ReleaseParameter\n      let selectedId = editParam.editRow.nreportinforeleasecode;\n      const selectedComment = { ...response.data\n      };\n      const masterData = { ...editParam.masterData,\n        selectedComment\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"IDS_REPORTINFOCOMMENTS\",\n          selectedId,\n          masterData,\n          //isParameterInitialRender: true,\n          loading: false,\n          openModal: true,\n          // modalShow: true,\n          ReportmodalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_COMMENTS\"\n          })\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function UpdateReportComments(userInfo, Data1, inputData) {\n  let inputParamData = {\n    selectedComment: Data1.selectedComment,\n    userinfo: userInfo\n  };\n  return function (dispatch) {\n    //if (inputData !== undefined &&inputData.npreregno!==\"\") {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateReportComment\", inputParamData).then(response => {\n      let masterData = { ...Data1,\n        ...response.data,\n        selectedComment: {}\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          screenName: \"IDS_REPORTINFOCOMMENT\",\n          loading: false,\n          openModal: true,\n          expandCheck: false,\n          modalShow: false,\n          ReportmodalShow: false,\n          isComboCheck: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); // console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else {\n    //     toast.warn(intl.formatMessage({\n    //         id: \"IDS_SELECTANYONESAMPLE\"\n    //     }));\n    //}\n  };\n}\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\n  return function (dispatch) {\n    let urlArray = [];\n    inputParam.inputData['isPopup'] = true;\n    const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData); //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\n    // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\n\n    const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\n    urlArray = [resultCorrection, statusService //,reportType\n    ];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      if (response[1].data.Status === \"Success\") {\n        let masterData = {};\n        let selectedRecord = inputParam.inputData.selectedRecord;\n        let responseData = { ...response[0].data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            // selectedRecord,\n            isDeletePopup: true,\n            isComboCheck: true,\n            isEditPopup: false,\n            loadEsign: false,\n            ncontrolCode,\n            loading: false,\n            showFilter: false,\n            openModal: true,\n            isCorrectionNeed: true,\n            isAddPopup: false,\n            operation: \"delete\",\n            ncontrolCode: inputParam.inputData.ncontrolCode,\n            expandCheck: false,\n            hideSave: true,\n            screenName: inputParam.inputData.screenName\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: response[1].data.ValidationStatus\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ncontrolCode: ncontrolCode,\n            loading: false,\n            expandCheck: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchParameterById(editParam) {\n  return function (dispatch) {\n    let additionalInfo = [];\n    let inputParamData = {\n      ntransactionresultcode: editParam.primaryKeyValue,\n      userinfo: editParam.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseResults\", inputParamData).then(response => {\n      let selectedResultGrade = [];\n      let paremterResultcode = [];\n      const parameterResults = response.data.ReleaseParameter;\n      let predefDefaultFlag = false;\n      parameterResults.map((param, index) => {\n        selectedResultGrade[index] = {\n          ngradecode: param.ngradecode\n        };\n        paremterResultcode[index] = param.ntransactionresultcode;\n        let jsondata = JSON.parse(param.jsondata['value']);\n\n        if (jsondata.hasOwnProperty('additionalInfo')) {\n          additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo'];\n        }\n\n        predefDefaultFlag = false;\n        response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n          // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n          //     if (!predefDefaultFlag) {\n          //         predefDefaultFlag = true;\n          //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n          //             undefined, undefined).get(\"OptionList\");\n          //     }\n          // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n          //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n          //         undefined, undefined).get(\"OptionList\");\n          //     if (response.data.ResultParameter[index].sresult === null) {\n          //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n          //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\n          //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\n          //         response.data.ResultParameter[index].editable = true;\n          //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n          //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\n          //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\n          //             &&predefinedvalue.spredefinedcomments;\n          //         }\n          //     }\n          // }\n          //  else {\n          if (!predefDefaultFlag) {\n            predefDefaultFlag = true;\n            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n          } //   }\n          //return null;\n\n        });\n        param['editable'] = false; //return null;\n        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n        // undefined, undefined).get(\"OptionList\");\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...editParam.masterData,\n            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\n            ...response.data,\n            paremterResultcode,\n            //,\n            selectedResultGrade\n          },\n          selectedRecord: {\n            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n            selectedResultGrade: selectedResultGrade,\n            ReleaseParameter: response.data.ReleaseParameter\n          },\n          parameterResults: response.data.ReleaseParameter,\n          isParameterInitialRender: true,\n          loading: false,\n          // screenName: \"IDS_RESULTENTRY\",\n          openModal: true,\n          modalShow: true,\n          operation: \"update\",\n          modalTitle: intl.formatMessage({\n            id: \"IDS_CHANGERESULT\"\n          }),\n          selectedId: editParam.primaryKeyValue,\n          //activeTestKey: \"IDS_RESULTS\",\n          ncontrolcode: editParam.editResultId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //}\n  };\n}\nexport function updateCorrectionStatus(inputData, Data, screenname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/updateCorrectionStatus\", inputData).then(response => {\n      if (response.data.rtn === \"Success\") {\n        let masterData = { ...Data,\n          ...response.data\n        };\n        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false,\n            screenName: screenname\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            // masterData,\n            //  change: inputData.change,\n            openModal: false,\n            loading: false,\n            loadEsign: false //  screenName:screenname\n\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: response.data\n        }));\n      } // }\n\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message); //  console.log(\"ErrorRelease,\", error);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignforRelease(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"release\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        } //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\n\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let doAction = screenData.inputParam.inputData.doAction;\n\n    switch (doAction) {\n      case \"appendsample\":\n        dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"removesample\":\n        dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\n        break;\n\n      case \"generate\":\n        dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"download\":\n        dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"correction\":\n        dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\n        break;\n\n      case \"saveasdraft\":\n        dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData));\n        break;\n\n      case \"editresult\":\n        dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function viewReportHistory(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/viewReportHistory\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      let PatientReports = response.data.PatientReports;\n      masterData = { ...masterData,\n        PatientReports\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isPatientReports: true,\n          openModal: true,\n          hideSave: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function viewReleaseTestAttachment(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getReleaseTestAttachment\", inputParam.inputData).then(response => {\n      let masterData = inputParam.masterData;\n      let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\n      const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\n      const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\n      const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\n      const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\n      const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\n      const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\n      masterData = { ...masterData,\n        ReleaseTestAttachmentDetails,\n        RegistrationArno,\n        RegistrationSampleArno,\n        RegistrationTest\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          isReleaseTestAttachment: true,\n          openModal: true,\n          isAddPopup: false,\n          isEditPopup: false,\n          isDeletePopup: false,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n} // export function writeJSONTemplate(inputParam){ \n//     return function (dispatch) {    \n//         return rsapi.post(\"release/writeJSONTemplate\",\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \n//             \"userinfo\": inputParam.userInfo}\n//     )\n//         .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN, payload: {\n//                         loading: false,\n//                         openModal: false,\n//                         expandCheck: false,\n//                     }\n//                 });\n//         })\n//         .catch(error => {\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//             if (error.response.status === 500) {\n//                 toast.error(error.message);\n//             }\n//             else {\n//                 toast.warn(error.response.data);\n//             }\n//         })\n// }\n// }\n\nexport function versionHistory(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"release/getVersionHistory\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          },\n          //hange: inputData.change,\n          openModal: true,\n          loading: false,\n          loadEsign: false,\n          openModalTitle: \"IDS_VERSIONHISTORY\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadVersionReport(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false,\n          openModal: inputParam.inputData.openModal\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function downloadHistory(inputParam, Data, screenName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/downloadHistory\", inputParam.inputData).then(response => {\n      let masterData = { ...Data,\n        ...response.data\n      };\n\n      if (response.data.rtn === \"Success\") {\n        document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\n        document.getElementById(\"download_data\").click();\n      } else {\n        toast.warn(response.data.rtn);\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          change: inputParam.change,\n          masterData,\n          screenName: screenName,\n          modalShow: false,\n          selectedRecord: {},\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data['rtn']);\n      }\n    });\n  };\n}\nexport function getPatientFilterExecuteData(inputParam) {\n  return function (dispatch) {\n    let obj = { ...inputParam.component,\n      filterquery: inputParam.filterquery,\n      userinfo: inputParam.userinfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj).then(response => {\n      const source = inputParam.component.source;\n      const languageTypeCode = inputParam.userinfo.slanguagetypecode;\n      const lstData = response.data[inputParam.component.label];\n      const multilingual = [];\n      inputParam.component.filterfields.map(item => {\n        if (item.ismultilingual) {\n          multilingual.push(item.columnname);\n        }\n      });\n      const optionList = lstData.map(item => {\n        const jsondata = item[source] ? item[source].value ? JSON.parse(item[source].value) : item.jsondata : item.jsondata;\n        multilingual.map(mul => {\n          jsondata[mul] = jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\n        }); // let label = isMultiLingual ?\n        //   jsondata[optionValue]\n        //   [languageTypeCode] || jsondata[optionValue]['en-US']\n        //   : jsondata[optionValue];\n\n        return jsondata;\n      });\n\n      if (inputParam.userinfo.nformcode === 161) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            onExecute: false,\n            loading: false,\n            screenName: \"IDS_PATIENTSEARCH\"\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            lstPatient: optionList,\n            // onExecute: false,\n            loading: false,\n            screenName: \"IDS_PATIENTSEARCH\"\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getPatientWiseSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"release/getPatientWiseSample\", inputParam).then(response => {\n      let openModal = true;\n      let screenName = \"IDS_ADDSAMPLE\";\n      let responseData = { ...response.data\n      };\n      let masterData = {};\n      let lstPatient = [];\n      masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (responseData && responseData.ReleaseSample.length !== 0) {\n        let responseData = { ...response.data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n      } else {\n        let responseData = { ...response.data\n        };\n        masterData = { ...inputParam.masterData,\n          ...responseData\n        };\n        lstPatient = inputParam.Login.lstPatient; //openModal = false;\n\n        screenName = \"IDS_PATIENTSEARCH\";\n        toast.warn(intl.formatMessage({\n          id: \"IDS_NOSAMPLESAREAVAILABLE\"\n        }));\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // awesomeTree:fieldList[0].awesomeTree,\n          awesomeConfig: undefined,\n          lstPatient: lstPatient,\n          //lstPatient:[],\n          kendoSkip: 0,\n          kendoTake: 5,\n          masterData,\n          expandCheck: false,\n          isDeletePopup: false,\n          isComboCheck: false,\n          isEditPopup: false,\n          screenName: screenName,\n          //\"IDS_ADDSAMPLE\",\n          loading: false,\n          showFilter: false,\n          openModal: openModal,\n          isAddPopup: true,\n          operation: \"save\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ReleaseAction.js"],"names":["Axios","toast","intl","constructOptionList","replaceUpdatedObject","sortData","reportCOAType","REPORTTYPE","SampleType","transactionStatus","TrainingUpdateChildTab","rsapi","initRequest","DEFAULT_RETURN","crudMaster","getFieldSpecification","getFieldSpecification3","filterObjectForReactAwesomeFilter","Utils","QbUtils","checkTree","loadTree","getReleasedRegistrationType","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","SampleTypeValue","realSampleTypeList","realReportTypeList","realRegTypeList","realRegSubTypeList","realFilterStatusList","realApprovalVersionList","realDesignTemplateMappingList","loading","catch","error","status","message","warn","getReleasedRegistrationSubType","RegTypeValue","getReleasedFilterBasedTest","napprovalversioncode","RegSubTypeValue","ndesigntemplatemappingcode","DesignTemplateMappingValue","rtn","formatMessage","id","getReleasedApprovalVersion","inputParam","getReleasedSample","nsectioncode","undefined","showFilter","getApprovedSample","ncontrolCode","realReportTypeValue","ncoareporttypecode","PATIENTWISE","fieldList","get","languageTypeCode","userinfo","slanguagetypecode","fields","gridColumns","filterfields","awesomeTree","awesomeConfig","urlArray","all","ProjectTypeList","sectionList","openModal","seletedFilterComponent","lstPatient","kendoSkip","kendoTake","expandCheck","isDeletePopup","isComboCheck","isEditPopup","screenName","isAddPopup","operation","releaseSample","projectType","sectionType","PROJECTWISE","nsampletypecode","PROJECTSAMPLETYPE","SECTIONWISEMULTIPLESAMPLE","SECTIONWISE","selectedRecord","projectTypeMap","ReleaseSubSample","ReleaseTest","ReleaseSample","nprojecttypecode","nprojectmastercode","sectionTypeMap","length","generateReleasedReport","Data","preventtb","listStatus","CORRECTION","afterCorrection","modalShow","loadEsign","confirmMessage","confirm","cancelPopUp","UpdateExternalOrderStatus","document","getElementById","setAttribute","filepath","click","ReleaseHistory","change","getReleasedFilterStatus","getReleasedDataDetails","coahistory","inputParamData","dfrom","dto","nregtypecode","nregsubtypecode","ntransactionstatus","ntestcode","napprovalconfigcode","nneedsubsample","ncoaparentcode","npreregno","getApprovedProjectByProjectType","projectMasterMap","projectMasterList","getApprovedProjectType","ProjectTypeValue","getSectionForSectionWise","sectionMap","getReportForPortal","portallist","String","JSON","stringify","headers","getApprovedRecordsAsDraft","Data1","searchedData","previewAndFinalReport","getRemoveApprovedSample","statusService","Status","ValidationStatus","getDeleteApprovedSample","getEditApprovedSample","UpdateApprovedSample","getreportcomments","fetchReportInfoReleaseById","editParam","additionalInfo","nreportinforeleasecode","editRow","userInfo","selectedId","selectedComment","ReportmodalShow","modalTitle","UpdateReportComments","getResultCorrectionData","resultCorrection","isCorrectionNeed","hideSave","fetchParameterById","ntransactionresultcode","primaryKeyValue","selectedResultGrade","paremterResultcode","parameterResults","ReleaseParameter","predefDefaultFlag","map","param","index","ngradecode","jsondata","parse","hasOwnProperty","PredefinedValues","predefinedvalue","isParameterInitialRender","ncontrolcode","editResultId","updateCorrectionStatus","screenname","validateEsignforRelease","methodUrl","toLowerCase","dispatchMethods","info","screenData","doAction","viewReportHistory","PatientReports","isPatientReports","viewReleaseTestAttachment","ReleaseTestAttachmentDetails","lstRegistrationArno","RegistrationArno","lstRegistrationSampleArno","RegistrationSampleArno","lstRegistrationTest","RegistrationTest","isReleaseTestAttachment","versionHistory","openModalTitle","downloadVersionReport","FilePath","downloadHistory","getPatientFilterExecuteData","obj","component","filterquery","source","lstData","label","multilingual","item","ismultilingual","push","columnname","optionList","value","mul","nformcode","onExecute","getPatientWiseSample","Login"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { intl } from \"../components/App\";\r\nimport { constructOptionList, replaceUpdatedObject, sortData } from \"../components/CommonScript\";\r\nimport { reportCOAType, REPORTTYPE, SampleType, transactionStatus } from \"../components/Enumeration\";\r\nimport TrainingUpdateChildTab from \"../pages/competencemanagement/trainingupdate/TrainingUpdateChildTab\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport { crudMaster } from \"./ServiceAction\";\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../components/type3component/Type3FieldSpecificationList';\r\nimport { filterObjectForReactAwesomeFilter } from \"./RegistrationAction\";\r\n// export function getReleasedSelectedSampleSubSampleTest(userInfo, Data1, inputData) {\r\n    import { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\r\n    const { checkTree, loadTree } = QbUtils;\r\n\r\n//     return function (dispatch) {\r\n//       if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n//         dispatch(initRequest(true));\r\n//         return rsapi.post(\"release/updateRelease\",\r\n\r\n//             inputData\r\n//         )\r\n//             .then(response => {\r\n//                 if (response.data.statusCodeValue !== 200) {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: response.data.body\r\n//                     }));\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             loading: false\r\n//                         }\r\n//                     });\r\n\r\n\r\n//                 }\r\n//                 else {\r\n\r\n//                     if (response.data.body[\"PortalStatus\"] && response.data.body[\"PortalStatus\"].length > 0) {\r\n//                         dispatch(UpdateExternalOrderStatus(response.data.body[\"PortalStatus\"],inputData));\r\n//                     }\r\n//                     let masterData = {\r\n\r\n//                         ...Data1, ...response.data.body,\r\n\r\n\r\n//                     };\r\n\r\n//                     console.log(\"ReleasedTest,\", masterData);\r\n//                      sortData(masterData.ReleaseHistory,\"\",'sreportno');\r\n//                   //  dispatch(generateReport(inputData,masterData))\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN, payload: {\r\n//                             masterData,\r\n//                             change: inputData.change,\r\n//                             loading: false,\r\n//                             openModal:false\r\n//                         }\r\n//                     });\r\n//                 }\r\n//             })\r\n\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                     console.log(\"ErrorRelease,\", error);\r\n\r\n//                 }\r\n//                 else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n\r\n\r\n//         }\r\n//         else {\r\n//             toast.warn(intl.formatMessage({\r\n//                 id: \"IDS_SELECTANYONESAMPLE\"\r\n//             }));\r\n//         }\r\n//     }\r\n// }\r\nexport function getReleasedRegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            SampleTypeValue: inputData.SampleTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedRegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getRegistrationSubType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegTypeValue: inputData.RegTypeValue,\r\n                            realSampleTypeList: inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputData.realDesignTemplateMappingList || []\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterBasedTest(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.napprovalversioncode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"release/getFilterBasedTest\", inputData)\r\n                .then(response => {\r\n\r\n\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...responseData,\r\n                                RegSubTypeValue: inputData.RegSubTypeValue,\r\n                                ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n                                DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\r\n                            },\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (response.data.rtn) {\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PLSSELECTALLVALUESINFILTER\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function getReleasedApprovalVersion(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovalVersion\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            realSampleTypeList: inputParam.inputData.realSampleTypeList || [],\r\n                            realReportTypeList: inputParam.inputData.realReportTypeList || [],\r\n                            realRegTypeList: inputParam.inputData.realRegTypeList || [],\r\n                            realRegSubTypeList: inputParam.inputData.realRegSubTypeList || [],\r\n                            realFilterStatusList: inputParam.inputData.realFilterStatusList || [],\r\n                            realApprovalVersionList: inputParam.inputData.realApprovalVersionList || [],\r\n                            realDesignTemplateMappingList: inputParam.inputData.realDesignTemplateMappingList || []\r\n                            // fromDate: inputParam.inputData.dfrom,\r\n                            // toDate: inputParam.inputData.dto,\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {}\r\n                let nsectioncode = {};\r\n\r\n                // if (response.data.ReleasedSampleDetails && response.data.ReleasedSampleDetails.length !== 0 ||\r\n                //     response.data.ReleaseSample && response.data.ReleaseSample.length === 0) {\r\n                masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (nsectioncode !== undefined) {\r\n                    nsectioncode = inputParam.inputData.nsectioncode;\r\n                }\r\n                // }\r\n                //     else {\r\n                //         responseData.ReleaseHistory = []\r\n                //         responseData.selectedReleaseHistory= []\r\n                //         masterData = {\r\n                //             ...inputParam.masterData,\r\n                //             ...responseData,\r\n                //         }\r\n                //     }\r\n\r\n                sortData(masterData, \"\", \"ncoaparentcode\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        nsectioncode: nsectioncode,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedSample(inputParam, ncontrolCode) {\r\n        if(inputParam.masterData.realReportTypeValue.ncoareporttypecode===reportCOAType.PATIENTWISE)\r\n        {\r\n          \r\n            let fieldList = [];\r\n            fieldList = getFieldSpecification3().get(\"ExternalOrder\") || [];\r\n            \r\n            const languageTypeCode = inputParam.inputData.userinfo.slanguagetypecode;\r\n            const { fields, gridColumns } = filterObjectForReactAwesomeFilter(fieldList[0].filterfields, languageTypeCode, undefined, undefined)\r\n            let awesomeTree = fieldList[0].awesomeTree ? checkTree(loadTree(fieldList[0].awesomeTree), fieldList[0].awesomeConfig) : undefined\r\n           \r\n            return function (dispatch) {\r\n                let urlArray = []; \r\n\r\n              \r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n        \r\n                    .then(response => {\r\n\r\n                        let ProjectTypeList = [];\r\n                        let sectionList = [];\r\n\r\n                        \r\n                        let masterData = {};\r\n                        let openModal = true;\r\n                      \r\n                masterData = {\r\n                    ...inputParam.masterData\r\n                }\r\n\r\n        \r\n                        \r\n                        sortData(masterData);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                fields,\r\n                                gridColumns,\r\n                                awesomeTree,\r\n                                seletedFilterComponent:fieldList[0],\r\n                                // awesomeTree:fieldList[0].awesomeTree,\r\n                                 awesomeConfig:undefined,\r\n                                lstPatient:[],\r\n                                kendoSkip: 0,\r\n                                kendoTake: 5,\r\n                                masterData,\r\n                                expandCheck: false,\r\n                                ProjectTypeList,\r\n                                ncontrolCode,\r\n                                isDeletePopup: false,\r\n                                isComboCheck: false,\r\n                                isEditPopup: false,\r\n                                screenName:\"IDS_PATIENTSEARCH\",\r\n                                sectionList,\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                openModal: openModal,\r\n                                isAddPopup: true,\r\n                                operation:\"save\"\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            }\r\n\r\n}\r\nelse{\r\n    return function (dispatch) {\r\n        \r\n        const screenName=\"\";\r\n        let urlArray = [];\r\n        inputParam.inputData['isAddPopup'] = true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n        if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n            inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n\r\n            urlArray = [projectType];\r\n        }\r\n        else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n            urlArray = [sectionType];\r\n        }\r\n        else {\r\n            urlArray = [releaseSample\r\n                //,reportType\r\n            ];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                let ProjectTypeList = [];\r\n                let sectionList = [];\r\n\r\n                // let selectedRecord = {\"ncoareporttypecode\": {\r\n                //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                // }\r\n                // };\r\n                let masterData = {};\r\n                let openModal = true;\r\n                let selectedRecord = inputParam.inputData.selectedRecord;\r\n                if (inputParam.inputData.ncoareporttypecode === reportCOAType.PROJECTWISE ||\r\n                    inputParam.inputData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                    const projectTypeMap = constructOptionList(response[0].data || [], \"nprojecttypecode\",\r\n                        \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                    ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n                    masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    if (inputParam.inputData.selectedRecord.nprojecttypecode) {\r\n                        delete inputParam.inputData.selectedRecord.nprojecttypecode\r\n                    }\r\n                    if (inputParam.inputData.selectedRecord.nprojectmastercode) {\r\n                        delete inputParam.inputData.selectedRecord.nprojectmastercode\r\n                    }\r\n                }\r\n                else if (inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISE || inputParam.inputData.ncoareporttypecode === reportCOAType.SECTIONWISEMULTIPLESAMPLE) {\r\n                    const sectionTypeMap = constructOptionList(response[0].data.sectionList || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, false);\r\n\r\n                    sectionList = sectionTypeMap.get(\"OptionList\");\r\n                    masterData = { ...inputParam.masterData, ReleaseSubSample: [], ReleaseTest: [], ReleaseSample: [] };\r\n                    if (inputParam.inputData.selectedRecord.nsectioncode) {\r\n                        delete inputParam.inputData.selectedRecord.nsectioncode\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        openModal = false;\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                    }\r\n\r\n                }\r\n\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        expandCheck: false,\r\n                        ProjectTypeList,\r\n                        ncontrolCode,\r\n                        isDeletePopup: false,\r\n                        isComboCheck: false,\r\n                        isEditPopup: false,\r\n                        screenName:inputParam.inputData.screenName,\r\n                        sectionList,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: openModal,\r\n                        isAddPopup: true,\r\n                        operation: \"save\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n}\r\n\r\nexport function generateReleasedReport(inputData, Data,preventtb) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        let urlArray = [];\r\n        //   const releaseSample = rsapi.post(\"release/updateRelease\", inputData)  ;\r\n        //   const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData)  ;\r\n        inputData['preventTbFlow']=preventtb===true?preventtb:false\r\n        if (inputData.listStatus === transactionStatus.CORRECTION) {\r\n\r\n            const afterCorrection = rsapi.post(\"release/updateReleaseAfterCorrection\", inputData);\r\n            urlArray = [afterCorrection];\r\n        }\r\n\r\n        else {\r\n            const releaseSample = rsapi.post(\"release/updateRelease\", inputData);\r\n\r\n            urlArray = [releaseSample];\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (response[0].data.rtn === \"MappingNeeded\") {\r\n                    \r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false,\r\n                            modalShow: false, \r\n                           // selectedRecord: {}, \r\n                            loadEsign: false,\r\n                            //openModal: false,\r\n                           // preventTbCheck:true\r\n                        }\r\n                    })\r\n\r\n                    inputData.confirmMessage.confirm(\"PortalMapping\", intl.formatMessage({ id: \"IDS_SUBSAMPLEWASNOTMAPPED\" }), intl.formatMessage({ id: \"IDS_DOYOUWANTTOCONTINUEWITHOUTSENDRESULTTOPREVENTTB\" }),\r\n                    intl.formatMessage({ id: \"IDS_OK\" }), intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                     () => dispatch(generateReleasedReport(inputData, Data,true))  ,false,()=>dispatch(cancelPopUp(inputData, Data)) )\r\n\r\n                } else {\r\n                    if (response[0].data[\"isPortalData\"] && response[0].data[\"PortalStatus\"] && response[0].data[\"PortalStatus\"].length > 0) {\r\n                        dispatch(UpdateExternalOrderStatus(response[0].data[\"PortalStatus\"], inputData));\r\n                    }\r\n\r\n                    if (response[0].data[\"PreventTb\"]) {\r\n                        toast.warn(response[0].data[\"PreventTb\"])\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...Data,\r\n                        ...response[0].data,\r\n                    }\r\n\r\n                    if (response[0].data.rtn === \"Success\") {\r\n                        document.getElementById(\"download_data\").setAttribute(\"href\", response[0].data.filepath);\r\n                        document.getElementById(\"download_data\").click();\r\n                    }\r\n                    else {\r\n                        toast.warn(response[0].data.rtn);\r\n                    }\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, change: inputData.change, masterData,\r\n                            modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n                        }\r\n                    })\r\n                }\r\n\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    //toast.warn(error.response.data['rtn']);\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function cancelPopUp(inputData,Data) {\r\n    return function (dispatch) {\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload: {\r\n                loading: false,\r\n                modalShow: false, selectedRecord: {}, loadEsign: false, openModal: false\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function getReleasedFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseConfigVersionRegTemplateDesign\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReleasedDataDetails(inputParam, coahistory) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            dfrom: inputParam.inputData.dfrom,\r\n            dto: inputParam.inputData.dto,\r\n\r\n            nsampletypecode: inputParam.inputData.nsampletypecode,\r\n            nregtypecode: inputParam.inputData.nregtypecode,\r\n            nregsubtypecode: inputParam.inputData.nregsubtypecode,\r\n            ntransactionstatus: inputParam.inputData.ntransactionstatus,\r\n            nsectioncode: inputParam.inputData.nsectioncode,\r\n            ntestcode: inputParam.inputData.ntestcode,\r\n            napprovalversioncode: inputParam.inputData.napprovalversioncode,\r\n            napprovalconfigcode: inputParam.inputData.napprovalconfigcode,\r\n            userinfo: inputParam.inputData.userinfo,\r\n            nneedsubsample: inputParam.inputData.nneedsubsample,\r\n            ncoaparentcode: inputParam.ncoaparentcode,\r\n            npreregno: inputParam.npreregno,\r\n            ncoareporttypecode: inputParam.inputData.ncoareporttypecode,\r\n            ndesigntemplatemappingcode: inputParam.masterData.ndesigntemplatemappingcode,\r\n            isAddPopup: false\r\n\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseSample\", inputParamData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectByProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectByProjectType\", inputData)\r\n            .then(response => {\r\n                const projectMasterMap = constructOptionList(response.data.projectMasterList || [], \"nprojectmastercode\",\r\n                    \"sprojectcode\", undefined, undefined, false);\r\n\r\n                const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        projectMasterList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedProjectType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getApprovedProjectType\", inputData)\r\n            .then(response => {\r\n                const projectTypeMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                    \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                const ProjectTypeList = projectTypeMap.get(\"OptionList\");\r\n\r\n                //     const projectMasterMap = constructOptionList(response.data || [], \"nprojecttypecode\",\r\n                //     \"sprojecttypename\", undefined, undefined, false);\r\n\r\n                // const projectMasterList = projectMasterMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        ProjectTypeList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            ProjectTypeValue: inputData.ProjectTypeValue\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getSectionForSectionWise(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getSection\", inputData.inputData)\r\n            .then(response => {\r\n                const sectionMap = constructOptionList(response.data.sectionList || [], \"nsectioncode\",\r\n                    \"ssectionname\", undefined, undefined, false);\r\n\r\n                const sectionList = sectionMap.get(\"OptionList\");\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        sectionList,\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                        },\r\n                        loading: false,\r\n                        expandCheck: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportForPortal(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/SendToPortalReport\", inputData)\r\n            .then(response => {\r\n\r\n                if (response.data[\"rtn\"]) {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nfunction UpdateExternalOrderStatus(portallist, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post((String)(inputParam[\"url\"]) + \"/portal/UpdateMultiSampleStatus\", JSON.stringify(portallist), {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response !== undefined && error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else if (error.response === undefined) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getApprovedRecordsAsDraft(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/saveRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n                        let masterData = {\r\n\r\n                            ...Data1, ...response.data, searchedData: undefined\r\n\r\n\r\n                        };\r\n\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function previewAndFinalReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        // const inputData = {\r\n        //     npreregno: inputParam.npreregno,\r\n        //  //   nsectioncode: inputParam.nsectioncode || -1,\r\n        //     userinfo: inputParam.userinfo,\r\n        //     nprimarykey: inputParam.npreregno,\r\n        //     nreporttypecode: REPORTTYPE.COAREPORT,\r\n        //     sprimarykeyname: \"npreregno\",\r\n        //     ncontrolcode: inputParam.ncontrolCode,\r\n        //     nregtypecode: inputParam.nregtypecode,\r\n        //     nregsubtypecode: inputParam.nregsubtypecode,\r\n        //     ntransactiontestcode:inputParam.ntransactiontestcode,\r\n        //     napproveconfversioncode: inputParam.napprovalversioncode,\r\n        //     ncoaparentcode: inputParam.ncoaparentcode,\r\n        //     ntransactionstatus:inputParam.ntransactionstatus\r\n        // }\r\n        rsapi.post(\"release/generateReleasedReport\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getRemoveApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n        urlArray = [releaseSample, statusService\r\n            //,reportType\r\n        ];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n\r\n\r\n                    // responseData = sortData(responseData)\r\n\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isComboCheck: true,\r\n                            isEditPopup: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isAddPopup: false,\r\n                            operation: \"delete\",\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            expandCheck: false,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getDeleteApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/deleteRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //    masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false,\r\n\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        //  console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\nexport function getEditApprovedSample(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        const releaseSample = rsapi.post(\"release/getReleaseSample\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        //  const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n        // const sectionType = rsapi.post(\"release/getSection\", inputParam.inputData);\r\n\r\n        // if (inputParam.inputData.ncoareporttypecode === 7) {\r\n\r\n        //     urlArray = [ projectType,statusService];\r\n        // }\r\n        // else if (inputParam.inputData.ncoareporttypecode === 8) {\r\n        //     urlArray = [ releaseSample,statusService];\r\n        // }\r\n        // else {\r\n        urlArray = [releaseSample, statusService\r\n            //,reportType\r\n        ];\r\n        // }\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                // const reportTypeMap = constructOptionList(response[1].data.ReportType || [], \"ncoareporttypecode\",\r\n                //     \"scoareporttypename\", undefined, undefined, false);\r\n\r\n                // const ReportTypeList = reportTypeMap.get(\"OptionList\");\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let ProjectTypeList = [];\r\n                    let sectionList = [];\r\n\r\n                    // let selectedRecord = {\"ncoareporttypecode\": {\r\n                    //     \"value\": response[1].data.ReportType[0].ncoareporttypecode,\r\n                    //      \"label\": response[1].data.ReportType[0].scoareporttypename\r\n                    // }\r\n                    // };\r\n                    let masterData = {};\r\n                    let openModal = true;\r\n\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                    if (response[0].data && response[0].data.ReleaseSample.length !== 0) {\r\n\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = { ...response[0].data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        openModal = false;\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                    }\r\n                    // responseData = sortData(responseData)\r\n\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            sectionList,\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            isDeletePopup: false,\r\n                            isComboCheck: true,\r\n                            isEditPopup: true,\r\n                            ProjectTypeList,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: openModal,\r\n                            isAddPopup: false,\r\n                            operation: \"append\",\r\n                            expandCheck: false,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function UpdateApprovedSample(inputData, Data1) {\r\n\r\n\r\n    return function (dispatch) {\r\n        if (inputData !== undefined && inputData.npreregno !== \"\") {\r\n\r\n            dispatch(initRequest(true));\r\n            return rsapi.post(\"release/appendRelease\",\r\n\r\n                inputData\r\n            )\r\n                .then(response => {\r\n                    if (response.data.rtn === \"Success\") {\r\n\r\n                        let masterData = {\r\n                            ...Data1, ...response.data,\r\n                        };\r\n                        sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    else {\r\n                        toast.warn(response.data.rtn);\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                //  masterData,\r\n                                change: inputData.change,\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false,\r\n                                expandCheck: false\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                        // console.log(\"ErrorRelease,\", error);\r\n\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTANYONESAMPLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getreportcomments(inputData, Data) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"release/getreportcomments\", inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, change: inputData.change, masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        openModal: true, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchReportInfoReleaseById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            nreportinforeleasecode: editParam.editRow.nreportinforeleasecode,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getActiveReportInfoReleaseById\", inputParamData)\r\n            .then(response => {\r\n\r\n                // const parameterResults = response.data.ReleaseParameter\r\n                let selectedId = editParam.editRow.nreportinforeleasecode;\r\n                const selectedComment = { ...response.data };\r\n                const masterData = {\r\n                    ...editParam.masterData,\r\n                    selectedComment\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: {\r\n                        screenName: \"IDS_REPORTINFOCOMMENTS\",\r\n                        selectedId,\r\n                        masterData,\r\n                        //isParameterInitialRender: true,\r\n                        loading: false,\r\n                        openModal: true,\r\n                        // modalShow: true,\r\n                        ReportmodalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_COMMENTS\" }),\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function UpdateReportComments(userInfo, Data1, inputData) {\r\n    let inputParamData = {\r\n        selectedComment: Data1.selectedComment,\r\n        userinfo: userInfo\r\n    }\r\n\r\n    return function (dispatch) {\r\n        //if (inputData !== undefined &&inputData.npreregno!==\"\") {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateReportComment\",\r\n\r\n            inputParamData\r\n        )\r\n            .then(response => {\r\n                let masterData = {\r\n\r\n                    ...Data1, ...response.data,\r\n                    selectedComment: {},\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        screenName: \"IDS_REPORTINFOCOMMENT\",\r\n                        loading: false,\r\n                        openModal: true,\r\n                        expandCheck: false,\r\n                        modalShow: false,\r\n                        ReportmodalShow: false,\r\n                        isComboCheck: true,\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    // console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        // }\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({\r\n        //         id: \"IDS_SELECTANYONESAMPLE\"\r\n        //     }));\r\n        //}\r\n    }\r\n}\r\nexport function getResultCorrectionData(inputParam, ncontrolCode) {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        inputParam.inputData['isPopup'] = true\r\n        const resultCorrection = rsapi.post(\"release/getResultCorrection\", inputParam.inputData);\r\n        //  const reportType = rsapi.post(\"release/getCOAReportType\", { userinfo: inputParam.inputData.userinfo });\r\n        // const projectType = rsapi.post(\"release/getApprovedProjectType\", inputParam.inputData);\r\n        const statusService = rsapi.post(\"release/getStatusAlert\", inputParam.inputData);\r\n\r\n        urlArray = [resultCorrection, statusService\r\n            //,reportType\r\n        ];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n\r\n            .then(response => {\r\n                if (response[1].data.Status === \"Success\") {\r\n\r\n                    let masterData = {};\r\n                    let selectedRecord = inputParam.inputData.selectedRecord;\r\n\r\n                    let responseData = { ...response[0].data }\r\n                    masterData = {\r\n                        ...inputParam.masterData, ...responseData\r\n                    }\r\n\r\n                    sortData(masterData);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            // selectedRecord,\r\n                            isDeletePopup: true,\r\n                            isComboCheck: true,\r\n                            isEditPopup: false,\r\n                            loadEsign: false,\r\n                            ncontrolCode,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            openModal: true,\r\n                            isCorrectionNeed: true,\r\n                            isAddPopup: false,\r\n                            operation: \"delete\",\r\n                            ncontrolCode: inputParam.inputData.ncontrolCode,\r\n                            expandCheck: false,\r\n                            hideSave: true,\r\n                            screenName: inputParam.inputData.screenName,\r\n\r\n\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: response[1].data.ValidationStatus\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ncontrolCode: ncontrolCode,\r\n                            loading: false,\r\n                            expandCheck: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function fetchParameterById(editParam) {\r\n    return function (dispatch) {\r\n        let additionalInfo = [];\r\n\r\n        let inputParamData = {\r\n            ntransactionresultcode: editParam.primaryKeyValue,\r\n            userinfo: editParam.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseResults\", inputParamData)\r\n            .then(response => {\r\n                let selectedResultGrade = [];\r\n                let paremterResultcode = [];\r\n                const parameterResults = response.data.ReleaseParameter\r\n                let predefDefaultFlag = false;\r\n                parameterResults.map((param, index) => {\r\n                    selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                    paremterResultcode[index] = param.ntransactionresultcode;\r\n                    let jsondata = JSON.parse(param.jsondata['value'])\r\n                    if (jsondata.hasOwnProperty('additionalInfo')) {\r\n                        additionalInfo[param.ntransactionresultcode] = jsondata['additionalInfo']\r\n                    }\r\n                    predefDefaultFlag = false;\r\n                    (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                            // if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                            //     if (!predefDefaultFlag) {\r\n                            //         predefDefaultFlag = true;\r\n                            //         response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                            //             undefined, undefined).get(\"OptionList\");\r\n                            //     }\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                            //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            //         undefined, undefined).get(\"OptionList\");\r\n                            //     if (response.data.ResultParameter[index].sresult === null) {\r\n                            //         response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                            //         response.data.ResultParameter[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\r\n                            //         response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedsynonym;\r\n                            //         response.data.ResultParameter[index].editable = true;\r\n                            //         response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                            //         if(predefinedvalue.spredefinedcomments&&predefinedvalue.spredefinedcomments!==null){\r\n                            //             response.data.ResultParameter[index].sresultcomment = predefinedvalue.spredefinedcomments\r\n                            //             &&predefinedvalue.spredefinedcomments;\r\n                            //         }\r\n                            //     }\r\n                            // }\r\n                            //  else {\r\n                            if (!predefDefaultFlag) {\r\n                                predefDefaultFlag = true;\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                    undefined, undefined).get(\"OptionList\");\r\n                            }\r\n\r\n                            //   }\r\n                            //return null;\r\n\r\n                        });\r\n                    param['editable'] = false;\r\n                    //return null;\r\n                    // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                    // undefined, undefined).get(\"OptionList\");\r\n                });\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...editParam.masterData,\r\n                            //...sortData(response.data,\"desc\",\"ntransactiontestcode\"),\r\n                            ...response.data,\r\n                            paremterResultcode,//,\r\n                            selectedResultGrade,\r\n\r\n                        },\r\n                        selectedRecord: {\r\n                            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n                            selectedResultGrade: selectedResultGrade,\r\n                            ReleaseParameter: response.data.ReleaseParameter\r\n\r\n                        },\r\n                        parameterResults: response.data.ReleaseParameter,\r\n                        isParameterInitialRender: true,\r\n                        loading: false,\r\n                        // screenName: \"IDS_RESULTENTRY\",\r\n                        openModal: true,\r\n                        modalShow: true,\r\n                        operation: \"update\",\r\n                        modalTitle: intl.formatMessage({ id: \"IDS_CHANGERESULT\" }),\r\n                        selectedId: editParam.primaryKeyValue,\r\n                        //activeTestKey: \"IDS_RESULTS\",\r\n                        ncontrolcode: editParam.editResultId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n        //}\r\n\r\n\r\n    }\r\n\r\n}\r\nexport function updateCorrectionStatus(inputData, Data, screenname) {\r\n\r\n\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/updateCorrectionStatus\",\r\n\r\n            inputData\r\n        )\r\n            .then(response => {\r\n\r\n                if (response.data.rtn === \"Success\") {\r\n                    let masterData = {\r\n\r\n                        ...Data, ...response.data,\r\n                    };\r\n                    sortData(masterData.ReleaseHistory, \"\", 'ncoaparentcode');\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            screenName: screenname\r\n\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            // masterData,\r\n                            //  change: inputData.change,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n\r\n                            //  screenName:screenname\r\n\r\n                        }\r\n                    });\r\n                    toast.warn(intl.formatMessage({ id: response.data }));\r\n\r\n                }\r\n\r\n                // }\r\n            })\r\n\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    //  console.log(\"ErrorRelease,\", error);\r\n\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n\r\n\r\n\r\n    }\r\n}\r\nexport function validateEsignforRelease(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"release\";\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    //dispatch(inputParam[\"screenData\"][\"inputParam\"].performAction(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]))\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let doAction = screenData.inputParam.inputData.doAction\r\n        switch (doAction) {\r\n            case \"appendsample\":\r\n                dispatch(UpdateApprovedSample(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"removesample\":\r\n                dispatch(getDeleteApprovedSample(screenData.inputParam.inputData, screenData.masterData, 'openModal'));\r\n                break;\r\n            case \"generate\":\r\n                dispatch(generateReleasedReport(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"download\":\r\n                dispatch(previewAndFinalReport(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"correction\":\r\n                dispatch(updateCorrectionStatus(screenData.inputParam.inputData, screenData.masterData, screenData.inputParam.inputData.screenName));\r\n                break;\r\n            case \"saveasdraft\":\r\n                dispatch(getApprovedRecordsAsDraft(screenData.inputParam.inputData, screenData.masterData));\r\n                break;\r\n            case \"editresult\":\r\n                dispatch(crudMaster(screenData.inputParam, screenData.masterData, \"modalShow\"))\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport function viewReportHistory(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/viewReportHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                let PatientReports = response.data.PatientReports;\r\n                masterData = { ...masterData, PatientReports };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isPatientReports: true,\r\n                        openModal: true,\r\n                        hideSave: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewReleaseTestAttachment(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getReleaseTestAttachment\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = inputParam.masterData;\r\n                let ReleaseTestAttachmentDetails = response.data.ReleaseTestAttachmentDetails;\r\n\r\n                const lstRegistrationArno = constructOptionList(response.data.RegistrationArno || [], \"npreregno\", \"sarno\", false, false, true);\r\n                const RegistrationArno = lstRegistrationArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationSampleArno = constructOptionList(response.data.RegistrationSampleArno || [], \"ntransactionsamplecode\", \"ssamplearno\", false, false, true);\r\n                const RegistrationSampleArno = lstRegistrationSampleArno.get(\"OptionList\");\r\n\r\n                const lstRegistrationTest = constructOptionList(response.data.RegistrationTest || [], \"ntransactiontestcode\", \"stestsynonym\", false, false, true);\r\n                const RegistrationTest = lstRegistrationTest.get(\"OptionList\");\r\n\r\n                masterData = { ...masterData, ReleaseTestAttachmentDetails, RegistrationArno, RegistrationSampleArno, RegistrationTest };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        isReleaseTestAttachment: true,\r\n                        openModal: true,\r\n                        isAddPopup: false,\r\n                        isEditPopup: false,\r\n                        isDeletePopup: false,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function writeJSONTemplate(inputParam){ \r\n//     return function (dispatch) {    \r\n\r\n//         return rsapi.post(\"release/writeJSONTemplate\",\r\n\r\n//         { [inputParam.primaryKeyName] :inputParam.selectedReleaseHistory.ncoaparentcode , \r\n//             \"userinfo\": inputParam.userInfo}\r\n//     )\r\n//         .then(response => {\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, payload: {\r\n//                         loading: false,\r\n//                         openModal: false,\r\n//                         expandCheck: false,\r\n\r\n\r\n//                     }\r\n//                 });\r\n//         })\r\n//         .catch(error => {\r\n//             dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//             if (error.response.status === 500) {\r\n//                 toast.error(error.message);\r\n\r\n\r\n//             }\r\n//             else {\r\n//                 toast.warn(error.response.data);\r\n//             }\r\n//         })\r\n\r\n// }\r\n// }\r\n\r\n\r\nexport function versionHistory(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"release/getVersionHistory\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        },\r\n                        //hange: inputData.change,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModalTitle: \"IDS_VERSIONHISTORY\"\r\n                    }\r\n                });\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n\r\nexport function downloadVersionReport(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadVersionHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false, openModal: inputParam.inputData.openModal\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function downloadHistory(inputParam, Data, screenName) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/downloadHistory\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...Data,\r\n                    ...response.data,\r\n                }\r\n                if (response.data.rtn === \"Success\") {\r\n                    document.getElementById(\"download_data\").setAttribute(\"href\", response.data.FilePath);\r\n                    document.getElementById(\"download_data\").click();\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                    {\r\n                        loading: false, change: inputParam.change, masterData, screenName: screenName,\r\n                        modalShow: false, selectedRecord: {}, loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data['rtn']);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientFilterExecuteData(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        let obj = { ...inputParam.component, filterquery: inputParam.filterquery, userinfo: inputParam.userinfo }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/dynamicpreregdesign/getdynamicfilterexecutedata\", obj)\r\n            .then(response => {\r\n                const source = inputParam.component.source\r\n                const languageTypeCode = inputParam.userinfo.slanguagetypecode\r\n                const lstData = response.data[inputParam.component.label]\r\n                const multilingual = []\r\n                inputParam.component.filterfields.map(item => {\r\n                    if (item.ismultilingual) {\r\n                        multilingual.push(item.columnname)\r\n                    }\r\n                })\r\n                const optionList = lstData.map(item => {\r\n                    const jsondata = item[source] ? item[source].value ?\r\n                        JSON.parse(item[source].value) : item.jsondata : item.jsondata\r\n\r\n                    multilingual.map(mul => {\r\n                        jsondata[mul] =\r\n                            jsondata[mul][languageTypeCode] || jsondata[mul]['en-US'];\r\n                    })\r\n                    // let label = isMultiLingual ?\r\n                    //   jsondata[optionValue]\r\n                    //   [languageTypeCode] || jsondata[optionValue]['en-US']\r\n                    //   : jsondata[optionValue];\r\n\r\n                    return jsondata\r\n                });\r\n                if (inputParam.userinfo.nformcode === 161) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            onExecute: false,\r\n                            loading: false,\r\n                            screenName:\"IDS_PATIENTSEARCH\"\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            lstPatient: optionList,\r\n                            // onExecute: false,\r\n                            loading: false,\r\n                            screenName:\"IDS_PATIENTSEARCH\"\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPatientWiseSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"release/getPatientWiseSample\", inputParam)\r\n            .then(response => {\r\n                let openModal = true;\r\n                let screenName=\"IDS_ADDSAMPLE\";\r\n                let responseData = { ...response.data }\r\n            \r\n                let masterData = {} \r\n                let lstPatient=[]\r\n   masterData = {\r\n                        ...inputParam.masterData,\r\n                        ...responseData,\r\n                }\r\n               \r\n                    if (responseData && responseData.ReleaseSample.length !== 0) {\r\n                        \r\n                        let responseData = {  ...response.data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                    }\r\n                    else {\r\n                        let responseData = {  ...response.data }\r\n                        masterData = {\r\n                            ...inputParam.masterData, ...responseData\r\n                        }\r\n                        lstPatient=inputParam.Login.lstPatient\r\n                         //openModal = false;\r\n                          screenName=\"IDS_PATIENTSEARCH\";\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_NOSAMPLESAREAVAILABLE\" }));\r\n                        }\r\n\r\n                \r\n\r\n            \r\n            sortData(masterData);\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    \r\n                  \r\n                    // awesomeTree:fieldList[0].awesomeTree,\r\n                     awesomeConfig:undefined,\r\n                     lstPatient:lstPatient,\r\n                    //lstPatient:[],\r\n                    kendoSkip: 0,\r\n                    kendoTake: 5,\r\n                    masterData,\r\n                    expandCheck: false,\r\n                    \r\n                    \r\n                    isDeletePopup: false,\r\n                    isComboCheck: false,\r\n                    isEditPopup: false,\r\n                    screenName:screenName,//\"IDS_ADDSAMPLE\",\r\n                    \r\n                    loading: false,\r\n                    showFilter: false,\r\n                    openModal: openModal,\r\n                    isAddPopup: true,\r\n                    operation:\"save\"\r\n                }\r\n            })\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}