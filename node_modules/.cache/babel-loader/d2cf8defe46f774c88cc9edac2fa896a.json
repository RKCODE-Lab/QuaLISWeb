{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroupResultEntry.jsx\";\nimport React from 'react';\nimport { Row, Col, Nav, Button, Modal, Card } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport '../../components/list-master/list-master.styles';\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\nimport '../ResultEntryBySample/result.css';\nimport '../../assets/styles/tree.css';\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalculator, faEye, faInfo, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport TestPopOver from '../ResultEntryBySample/TestPopOver';\n\nclass TestGroupResultEntry extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderSwitch = (parameter, index, result, screenName) => {\n      const selectedResultGrade = this.props.selectedResultGrade;\n      const gradeValues = this.props.gradeValues;\n      const gradeCode = selectedResultGrade ? selectedResultGrade.length > 0 ? selectedResultGrade[index] ? selectedResultGrade[index]['ngradecode'] : undefined : \"\" : \"\";\n      let isAdditionalInfoRequired = parameter.hasOwnProperty('additionalInfo') && parameter['additionalInfo'] !== \"\" && parameter['additionalInfo'] !== null ? true : false; //  parameter.jsondata['value'] ? JSON.parse(parameter.jsondata['value']).hasOwnProperty('additionalInfo') &&\n      //     JSON.parse(parameter.jsondata['value'])['additionalInfo'] !== \"\" ? true : false :\n      //     parameter.jsondata.hasOwnProperty('additionalInfo') &&\n      //         parameter.jsondata['additionalInfo'] !== \"\" ? true : false\n\n      switch (parameter.nparametertypecode) {\n        case 1:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n              className: \"row w-100\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Col, {\n              md: 6,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(FormInput, {\n              name: parameter.ntestgrouptestparametercode,\n              type: \"text\",\n              required: false,\n              isMandatory: false,\n              value: this.props.parameterResults.length > 0 ? this.props.parameterResults[index] ? this.props.parameterResults[index]['sresult'] !== null ? this.props.parameterResults[index]['sresult'] : \"\" : \"\" : \"\" // placeholder={parameter.sparametersynonym}\n              //label={parameter.sparametersynonym}\n              ,\n              onChange: event => this.props.onResultInputChange(event, index, parameter),\n              onBlur: () => this.props.onGradeEvent(this.props.parameterResults, index, parameter),\n              maxLength: 9,\n              onKeyUp: event => this.props.onKeyPress(event, index, this.props.paremterResultcode),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 33\n              }\n            })), parameter.ntestgrouptestformulacode > 0 ? /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              className: \"d-flex product-category justify-content-end icon-group-wrap\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 33\n              }\n            }, /*#__PURE__*/React.createElement(Nav.Link, {\n              title: \"Calculate Formula\",\n              className: \"btn btn-circle outline-grey ml-2\",\n              role: \"button\",\n              id: screenName + -+index,\n              onClick: event => this.props.getFormula(parameter, this.props.Login.userInfo, this.props.Login.masterData, index, event),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 37\n              }\n            }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n              title: \"Calculate Formula\",\n              icon: faCalculator,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 41\n              }\n            }))) : \"\"));\n          }\n\n        case 2:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n              md: isAdditionalInfoRequired ? 8 : 10,\n              className: \"pl-0\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: parameter.ntestgrouptestparametercode,\n              as: \"select\" //formLabel={parameter.sparametersynonym}\n              ,\n              defaultValue: {\n                \"value\": parameter.sresultpredefinedname,\n                \"label\": parameter.sresultpredefinedname\n              } //  defaultValue={parameter.sresult && (parameter.sresult!=null || parameter.sresult !== \"\") ?  { \"value\": parameter.ngradecode, \"label\": parameter.sresult } :\n              //  this.props.PredefinedValues ? constructOptionList(this.props.PredefinedValues[parameter.ntestgrouptestparametercode]||[],'ngradecode',\n              // 'spredefinedname' , undefined, undefined, undefined).get(\"DefaultValue\"):\"\"}\n              ,\n              options: this.props.PredefinedValues ? this.props.PredefinedValues[parameter.ntestgrouptestparametercode] : \"\",\n              optionId: \"ntestgrouptestpredefcode\",\n              optionValue: \"spredefinedname\",\n              isMulti: false,\n              isDisabled: false,\n              isSearchable: true,\n              isClearable: parameter.nresultmandatory === transactionStatus.YES ? false : true,\n              isMandatory: false,\n              onKeyUp: event => this.props.onKeyPress(event, index, this.props.paremterResultcode),\n              onChange: event => this.props.onResultInputChange(event, index, parameter),\n              onBlur: () => this.props.onGradeEvent(this.props.parameterResults, index, parameter),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 29\n              }\n            })), isAdditionalInfoRequired && /*#__PURE__*/React.createElement(Col, {\n              md: 2,\n              className: \"pt-2\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 29\n              }\n            }, /*#__PURE__*/React.createElement(TestPopOver, {\n              intl: this.props.intl,\n              needIcon: true,\n              needPopoverTitleContent: true,\n              placement: \"left\",\n              stringList: // parameter.jsondata['value'] ?\n              //      [JSON.parse(parameter.jsondata['value'])['additionalInfo']] :\n              //              [parameter.jsondata['additionalInfo']] \n              parameter.hasOwnProperty('additionalInfo') && [parameter['additionalInfo']],\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }\n            })));\n          }\n\n        case 3:\n          {\n            return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n              md: 10,\n              className: \"pl-0\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(FormTextarea, {\n              name: parameter.ntestgrouptestparametercode //label={parameter.sparametersynonym}\n              //placeholder={parameter.sparametersynonym}\n              ,\n              type: \"text\",\n              defaultValue: parameter.sresult,\n              isMandatory: false,\n              required: false,\n              maxLength: 255,\n              onChange: event => this.props.onResultInputChange(event, index, parameter),\n              onBlur: () => this.props.onGradeEvent(this.props.parameterResults, index, parameter),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 29\n              }\n            })));\n          }\n\n        case 4:\n          {\n            return /*#__PURE__*/React.createElement(Col, {\n              md: 12,\n              className: \"pl-0\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(DropZone, {\n              maxFiles: 1,\n              isMandatory: false //label={parameter.sparametersynonym}\n              ,\n              accept: \".pdf\",\n              minSize: 0,\n              maxSize: 20,\n              multiple: false,\n              editFiles: parameter.sfinal != null ? parameter : \"\",\n              attachmentTypeCode: attachmentType.FTP,\n              fileSizeName: \"nfilesize\",\n              fileName: \"sfinal\",\n              index: index,\n              deleteAttachment: this.props.deleteAttachmentParamFile,\n              onDrop: event => this.props.onResultInputChange(event, index, parameter) //disabled={disabled}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 25\n              }\n            }));\n          }\n\n        default:\n          return \"\";\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }\n    }, this.props.parameterResults.map((parameterResult, index) => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        className: \"pl-0 mt-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(MediaHeader, {\n        className: `labelfont`,\n        style: {\n          color: \"#505f79\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 33\n        }\n      }, \" \", parameterResult.sparametersynonym, parameterResult.nresultmandatory === transactionStatus.NO ? \"(optional)\" : \"\")), this.renderSwitch(parameterResult, index, parameterResult.ntestgrouptestparametercode, this.props.screenName));\n    }));\n  }\n\n}\n\nexport default injectIntl(TestGroupResultEntry);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/testgroup/TestGroupResultEntry.jsx"],"names":["React","Row","Col","Nav","Button","Modal","Card","FormattedMessage","injectIntl","ListWrapper","FormSelectSearch","FormTextarea","DropZone","attachmentType","transactionStatus","MediaHeader","MediaLabel","MediaSubHeader","FormInput","FontAwesomeIcon","faCalculator","faEye","faInfo","faInfoCircle","TestPopOver","TestGroupResultEntry","Component","renderSwitch","parameter","index","result","screenName","selectedResultGrade","props","gradeValues","gradeCode","length","undefined","isAdditionalInfoRequired","hasOwnProperty","nparametertypecode","ntestgrouptestparametercode","parameterResults","event","onResultInputChange","onGradeEvent","onKeyPress","paremterResultcode","ntestgrouptestformulacode","getFormula","Login","userInfo","masterData","sresultpredefinedname","PredefinedValues","nresultmandatory","YES","intl","sresult","sfinal","FTP","deleteAttachmentParamFile","render","map","parameterResult","color","sparametersynonym","NO"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,MAAxB,EAAgCC,KAAhC,EAAuCC,IAAvC,QAAmD,iBAAnD;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,QAAP,MAAqB,8CAArB;AACA,OAAO,iDAAP;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,8BAAlD;AACA,OAAO,mCAAP;AACA,OAAO,8BAAP;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,cAAlC,QAAwD,6BAAxD;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,YAAT,EAAuBC,KAAvB,EAA8BC,MAA9B,EAAsCC,YAAtC,QAA0D,mCAA1D;AACA,OAAOC,WAAP,MAAwB,oCAAxB;;AAIA,MAAMC,oBAAN,SAAmCzB,KAAK,CAAC0B,SAAzC,CAAmD;AAAA;AAAA;;AAAA,SAC/CC,YAD+C,GAChC,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,MAAnB,EAA2BC,UAA3B,KAA0C;AACrD,YAAMC,mBAAmB,GAAG,KAAKC,KAAL,CAAWD,mBAAvC;AACA,YAAME,WAAW,GAAG,KAAKD,KAAL,CAAWC,WAA/B;AACA,YAAMC,SAAS,GAAGH,mBAAmB,GAAGA,mBAAmB,CAACI,MAApB,GAA6B,CAA7B,GACpCJ,mBAAmB,CAACH,KAAD,CAAnB,GAA6BG,mBAAmB,CAACH,KAAD,CAAnB,CAA2B,YAA3B,CAA7B,GAAwEQ,SADpC,GACgD,EADnD,GACwD,EAD7F;AAEA,UAAIC,wBAAwB,GAAGV,SAAS,CAACW,cAAV,CAAyB,gBAAzB,KAC3BX,SAAS,CAAC,gBAAD,CAAT,KAAgC,EADL,IACWA,SAAS,CAAC,gBAAD,CAAT,KAAgC,IAD3C,GACkD,IADlD,GACyD,KADxF,CALqD,CAOrD;AACA;AACA;AACA;;AACA,cAAQA,SAAS,CAACY,kBAAlB;AACI,aAAK,CAAL;AAAQ;AACJ,gCACI,uDACI;AAAK,cAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,SAAD;AACI,cAAA,IAAI,EAAEZ,SAAS,CAACa,2BADpB;AAEI,cAAA,IAAI,EAAC,MAFT;AAGI,cAAA,QAAQ,EAAE,KAHd;AAII,cAAA,WAAW,EAAE,KAJjB;AAKI,cAAA,KAAK,EAAE,KAAKR,KAAL,CAAWS,gBAAX,CAA4BN,MAA5B,GAAqC,CAArC,GACH,KAAKH,KAAL,CAAWS,gBAAX,CAA4Bb,KAA5B,IAAsC,KAAKI,KAAL,CAAWS,gBAAX,CAA4Bb,KAA5B,EAAmC,SAAnC,MAAkD,IAAlD,GAAyD,KAAKI,KAAL,CAAWS,gBAAX,CAA4Bb,KAA5B,EAAmC,SAAnC,CAAzD,GAAyG,EAA/I,GAAqJ,EADlJ,GACuJ,EANlK,CAOI;AACA;AARJ;AASI,cAAA,QAAQ,EAAGc,KAAD,IAAW,KAAKV,KAAL,CAAWW,mBAAX,CAA+BD,KAA/B,EAAsCd,KAAtC,EAA6CD,SAA7C,CATzB;AAUI,cAAA,MAAM,EAAE,MAAM,KAAKK,KAAL,CAAWY,YAAX,CAAwB,KAAKZ,KAAL,CAAWS,gBAAnC,EAAqDb,KAArD,EAA4DD,SAA5D,CAVlB;AAWI,cAAA,SAAS,EAAE,CAXf;AAYI,cAAA,OAAO,EAAGe,KAAD,IAAW,KAAKV,KAAL,CAAWa,UAAX,CAAsBH,KAAtB,EAA6Bd,KAA7B,EAAoC,KAAKI,KAAL,CAAWc,kBAA/C,CAZxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,EAiBKnB,SAAS,CAACoB,yBAAV,GAAsC,CAAtC,gBACG,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAY,cAAA,SAAS,EAAC,6DAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,GAAD,CAAK,IAAL;AAAU,cAAA,KAAK,EAAC,mBAAhB;AAAoC,cAAA,SAAS,EAAC,kCAA9C;AAAiF,cAAA,IAAI,EAAC,QAAtF;AAA+F,cAAA,EAAE,EAAEjB,UAAU,GAAG,CAAC,CAACF,KAAlH;AACI,cAAA,OAAO,EAAGc,KAAD,IAAW,KAAKV,KAAL,CAAWgB,UAAX,CAAsBrB,SAAtB,EAAiC,KAAKK,KAAL,CAAWiB,KAAX,CAAiBC,QAAlD,EAA4D,KAAKlB,KAAL,CAAWiB,KAAX,CAAiBE,UAA7E,EAAyFvB,KAAzF,EAAgGc,KAAhG,CADxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAEI,oBAAC,eAAD;AAAiB,cAAA,KAAK,EAAC,mBAAvB;AAA2C,cAAA,IAAI,EAAEvB,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CADJ,CADH,GAOK,EAxBV,CADJ,CADJ;AAqCH;;AACD,aAAK,CAAL;AAAQ;AACJ,gCACI,uDACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAEkB,wBAAwB,GAAG,CAAH,GAAO,EAAxC;AAA4C,cAAA,SAAS,EAAC,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,gBAAD;AACI,cAAA,IAAI,EAAEV,SAAS,CAACa,2BADpB;AAEI,cAAA,EAAE,EAAE,QAFR,CAGI;AAHJ;AAII,cAAA,YAAY,EAAE;AAAE,yBAASb,SAAS,CAACyB,qBAArB;AAA4C,yBAASzB,SAAS,CAACyB;AAA/D,eAJlB,CAKI;AACA;AACA;AAPJ;AASI,cAAA,OAAO,EAAE,KAAKpB,KAAL,CAAWqB,gBAAX,GAA8B,KAAKrB,KAAL,CAAWqB,gBAAX,CAA4B1B,SAAS,CAACa,2BAAtC,CAA9B,GAAmG,EAThH;AAUI,cAAA,QAAQ,EAAE,0BAVd;AAWI,cAAA,WAAW,EAAE,iBAXjB;AAYI,cAAA,OAAO,EAAE,KAZb;AAaI,cAAA,UAAU,EAAE,KAbhB;AAcI,cAAA,YAAY,EAAE,IAdlB;AAeI,cAAA,WAAW,EAAEb,SAAS,CAAC2B,gBAAV,KAA+BzC,iBAAiB,CAAC0C,GAAjD,GAAuD,KAAvD,GAA+D,IAfhF;AAgBI,cAAA,WAAW,EAAE,KAhBjB;AAiBI,cAAA,OAAO,EAAGb,KAAD,IAAW,KAAKV,KAAL,CAAWa,UAAX,CAAsBH,KAAtB,EAA6Bd,KAA7B,EAAoC,KAAKI,KAAL,CAAWc,kBAA/C,CAjBxB;AAkBI,cAAA,QAAQ,EAAGJ,KAAD,IAAW,KAAKV,KAAL,CAAWW,mBAAX,CAA+BD,KAA/B,EAAsCd,KAAtC,EAA6CD,SAA7C,CAlBzB;AAmBI,cAAA,MAAM,EAAE,MAAM,KAAKK,KAAL,CAAWY,YAAX,CAAwB,KAAKZ,KAAL,CAAWS,gBAAnC,EAAqDb,KAArD,EAA4DD,SAA5D,CAnBlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,EA8BKU,wBAAwB,iBAErB,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAY,cAAA,SAAS,EAAC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAgBI,oBAAC,WAAD;AAAa,cAAA,IAAI,EAAE,KAAKL,KAAL,CAAWwB,IAA9B;AAAoC,cAAA,QAAQ,EAAE,IAA9C;AAAoD,cAAA,uBAAuB,EAAE,IAA7E;AAAmF,cAAA,SAAS,EAAC,MAA7F;AAAoG,cAAA,UAAU,EAC1G;AACA;AACA;AACA7B,cAAAA,SAAS,CAACW,cAAV,CAAyB,gBAAzB,KACA,CAACX,SAAS,CAAC,gBAAD,CAAV,CALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhBJ,CAhCR,CADJ;AAyEH;;AACD,aAAK,CAAL;AAAQ;AACJ,gCACI,uDACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,EAAT;AAAa,cAAA,SAAS,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,YAAD;AACI,cAAA,IAAI,EAAEA,SAAS,CAACa,2BADpB,CAEI;AACA;AAHJ;AAII,cAAA,IAAI,EAAC,MAJT;AAKI,cAAA,YAAY,EAAEb,SAAS,CAAC8B,OAL5B;AAMI,cAAA,WAAW,EAAE,KANjB;AAOI,cAAA,QAAQ,EAAE,KAPd;AAQI,cAAA,SAAS,EAAE,GARf;AASI,cAAA,QAAQ,EAAGf,KAAD,IAAW,KAAKV,KAAL,CAAWW,mBAAX,CAA+BD,KAA/B,EAAsCd,KAAtC,EAA6CD,SAA7C,CATzB;AAUE,cAAA,MAAM,EAAE,MAAM,KAAKK,KAAL,CAAWY,YAAX,CAAwB,KAAKZ,KAAL,CAAWS,gBAAnC,EAAqDb,KAArD,EAA4DD,SAA5D,CAVhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ,CADJ;AAwBH;;AACD,aAAK,CAAL;AAAQ;AACJ,gCACI,oBAAC,GAAD;AAAK,cAAA,EAAE,EAAE,EAAT;AAAa,cAAA,SAAS,EAAC,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACI,oBAAC,QAAD;AACI,cAAA,QAAQ,EAAE,CADd;AAEI,cAAA,WAAW,EAAE,KAFjB,CAGI;AAHJ;AAII,cAAA,MAAM,EAAC,MAJX;AAKI,cAAA,OAAO,EAAE,CALb;AAMI,cAAA,OAAO,EAAE,EANb;AAOI,cAAA,QAAQ,EAAE,KAPd;AAQI,cAAA,SAAS,EAAEA,SAAS,CAAC+B,MAAV,IAAoB,IAApB,GAA2B/B,SAA3B,GAAuC,EARtD;AASI,cAAA,kBAAkB,EAAEf,cAAc,CAAC+C,GATvC;AAUI,cAAA,YAAY,EAAC,WAVjB;AAWI,cAAA,QAAQ,EAAC,QAXb;AAYI,cAAA,KAAK,EAAE/B,KAZX;AAaI,cAAA,gBAAgB,EAAE,KAAKI,KAAL,CAAW4B,yBAbjC;AAcI,cAAA,MAAM,EAAGlB,KAAD,IAAW,KAAKV,KAAL,CAAWW,mBAAX,CAA+BD,KAA/B,EAAsCd,KAAtC,EAA6CD,SAA7C,CAdvB,CAeA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADJ;AAqBH;;AACD;AACI,iBAAQ,EAAR;AArKR;AAuKH,KAnL8C;AAAA;;AAqL/CkC,EAAAA,MAAM,GAAG;AACL,wBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK7B,KAAL,CAAWS,gBAAX,CAA4BqB,GAA5B,CAAgC,CAACC,eAAD,EAAkBnC,KAAlB,KAA4B;AACzD,0BACI,uDAwBI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAa,QAAA,SAAS,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAG,WAAzB;AAAqC,QAAA,KAAK,EAAE;AAAEoC,UAAAA,KAAK,EAAE;AAAT,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAEYD,eAAe,CAACE,iBAF5B,EAGKF,eAAe,CAACT,gBAAhB,KAAqCzC,iBAAiB,CAACqD,EAAvD,GAA4D,YAA5D,GAA2E,EAHhF,CADJ,CAxBJ,EA+BK,KAAKxC,YAAL,CAAkBqC,eAAlB,EAAmCnC,KAAnC,EAA0CmC,eAAe,CAACvB,2BAA1D,EACG,KAAKR,KAAL,CAAWF,UADd,CA/BL,CADJ;AAoCH,KArCA,CADL,CADJ;AA2CH;;AAjO8C;;AAoOnD,eAAevB,UAAU,CAACiB,oBAAD,CAAzB","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Nav, Button, Modal, Card } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport '../../components/list-master/list-master.styles';\r\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\r\nimport '../ResultEntryBySample/result.css';\r\nimport '../../assets/styles/tree.css';\r\nimport { MediaHeader, MediaLabel, MediaSubHeader } from '../../components/App.styles';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCalculator, faEye, faInfo, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport TestPopOver from '../ResultEntryBySample/TestPopOver';\r\n\r\n\r\n\r\nclass TestGroupResultEntry extends React.Component {\r\n    renderSwitch = (parameter, index, result, screenName) => {\r\n        const selectedResultGrade = this.props.selectedResultGrade;\r\n        const gradeValues = this.props.gradeValues;\r\n        const gradeCode = selectedResultGrade ? selectedResultGrade.length > 0 ?\r\n            selectedResultGrade[index] ? selectedResultGrade[index]['ngradecode'] : undefined : \"\" : \"\";\r\n        let isAdditionalInfoRequired = parameter.hasOwnProperty('additionalInfo') &&\r\n            parameter['additionalInfo'] !== \"\" && parameter['additionalInfo'] !== null ? true : false\r\n        //  parameter.jsondata['value'] ? JSON.parse(parameter.jsondata['value']).hasOwnProperty('additionalInfo') &&\r\n        //     JSON.parse(parameter.jsondata['value'])['additionalInfo'] !== \"\" ? true : false :\r\n        //     parameter.jsondata.hasOwnProperty('additionalInfo') &&\r\n        //         parameter.jsondata['additionalInfo'] !== \"\" ? true : false\r\n        switch (parameter.nparametertypecode) {\r\n            case 1: {\r\n                return (\r\n                    <>\r\n                        <div className='row w-100'>\r\n                            <Col md={6}>\r\n                                <FormInput\r\n                                    name={parameter.ntestgrouptestparametercode}\r\n                                    type=\"text\"\r\n                                    required={false}\r\n                                    isMandatory={false}\r\n                                    value={this.props.parameterResults.length > 0 ?\r\n                                        this.props.parameterResults[index] ? (this.props.parameterResults[index]['sresult'] !== null ? this.props.parameterResults[index]['sresult'] : \"\") : \"\" : \"\"}\r\n                                    // placeholder={parameter.sparametersynonym}\r\n                                    //label={parameter.sparametersynonym}\r\n                                    onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                    onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                                    maxLength={9}\r\n                                    onKeyUp={(event) => this.props.onKeyPress(event, index, this.props.paremterResultcode)}\r\n                                />\r\n                            </Col>\r\n                            {parameter.ntestgrouptestformulacode > 0 ?\r\n                                <Col md={2} className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                    <Nav.Link title=\"Calculate Formula\" className=\"btn btn-circle outline-grey ml-2\" role=\"button\" id={screenName + -+index}\r\n                                        onClick={(event) => this.props.getFormula(parameter, this.props.Login.userInfo, this.props.Login.masterData, index, event)}>\r\n                                        <FontAwesomeIcon title=\"Calculate Formula\" icon={faCalculator} />\r\n                                    </Nav.Link>\r\n                                </Col>\r\n                                : \"\"}\r\n                            {/* <Col md={4}>\r\n                                {gradeValues[gradeCode]&&\r\n                                 <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                 {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>}\r\n                               \r\n                              \r\n                            </Col>   */}\r\n                        </div>\r\n                    </>\r\n                );\r\n            }\r\n            case 2: {\r\n                return (\r\n                    <>\r\n                        <Col md={isAdditionalInfoRequired ? 8 : 10} className=\"pl-0\" >\r\n                            <FormSelectSearch\r\n                                name={parameter.ntestgrouptestparametercode}\r\n                                as={\"select\"}\r\n                                //formLabel={parameter.sparametersynonym}\r\n                                defaultValue={{ \"value\": parameter.sresultpredefinedname, \"label\": parameter.sresultpredefinedname }}\r\n                                //  defaultValue={parameter.sresult && (parameter.sresult!=null || parameter.sresult !== \"\") ?  { \"value\": parameter.ngradecode, \"label\": parameter.sresult } :\r\n                                //  this.props.PredefinedValues ? constructOptionList(this.props.PredefinedValues[parameter.ntestgrouptestparametercode]||[],'ngradecode',\r\n                                // 'spredefinedname' , undefined, undefined, undefined).get(\"DefaultValue\"):\"\"}\r\n\r\n                                options={this.props.PredefinedValues ? this.props.PredefinedValues[parameter.ntestgrouptestparametercode] : \"\"}\r\n                                optionId={\"ntestgrouptestpredefcode\"}\r\n                                optionValue={\"spredefinedname\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={true}\r\n                                isClearable={parameter.nresultmandatory === transactionStatus.YES ? false : true}\r\n                                isMandatory={false}\r\n                                onKeyUp={(event) => this.props.onKeyPress(event, index, this.props.paremterResultcode)}\r\n                                onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                                onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                            />\r\n                        </Col>\r\n                       {/* <Col md={2} className=\"pt-2\"> \r\n                       {gradeValues[gradeCode]&&\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>}\r\n                         \r\n                        </Col>  */}\r\n                        {isAdditionalInfoRequired &&\r\n\r\n                            <Col md={2} className=\"pt-2\">\r\n                                {/* <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                     //   hidden={this.props.userRoleControlRights.indexOf(this.props.viewId) === -1}\r\n                                        title={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                        data-tip={  parameter.jsondata['value'] ?\r\n                                        JSON.parse(parameter.jsondata['value'])['additionalInfo'] :\r\n                                        parameter.jsondata['additionalInfo']}\r\n                                        data-for=\"tooltip_list_wrap\"\r\n                                         onClick={() => this.props.viewAdditionalInfo(parameter.ntestgrouptestparametercode)}\r\n                                        >\r\n                                        <FontAwesomeIcon icon={faEye}/>\r\n                                     </Button>     */}\r\n                                {/* <Modal.Title id=\"password\" className=\"header-primary flex-grow-1\">\r\n                                      <FormattedMessage id='IDS_ADDITIONALINFOREQURIED' defaultMessage='Cancel' />\r\n                                      </Modal.Title> */}\r\n\r\n                                <TestPopOver intl={this.props.intl} needIcon={true} needPopoverTitleContent={true} placement=\"left\" stringList={\r\n                                    // parameter.jsondata['value'] ?\r\n                                    //      [JSON.parse(parameter.jsondata['value'])['additionalInfo']] :\r\n                                    //              [parameter.jsondata['additionalInfo']] \r\n                                    parameter.hasOwnProperty('additionalInfo') &&\r\n                                    [parameter['additionalInfo']]} ></TestPopOver>\r\n                                {/* <Nav.Link\r\n                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                        // data-for=\"tooltip-common-wrap\"\r\n                                        //  data-place={action.dataplace && action.dataplace ? action.dataplace : \"\"}\r\n                                         data-tip={ parameter.jsondata['value'] ?\r\n                                         JSON.parse(parameter.jsondata['value'])['additionalInfo'] :\r\n                                                 parameter.jsondata['additionalInfo'] }\r\n                                        data-html={true}\r\n                                        //   hidden={this.props.userRoleControlRights.indexOf(this.props.viewId) === -1}\r\n                                        onClick={() => this.props.viewAdditionalInfo(parameter.ntestgrouptestparametercode)}>\r\n                                        <FontAwesomeIcon icon={faInfoCircle} />\r\n                                    </Nav.Link>  */}\r\n\r\n                            </Col>\r\n                        }\r\n\r\n                    </>\r\n                );\r\n            }\r\n            case 3: {\r\n                return (\r\n                    <>\r\n                        <Col md={10} className=\"pl-0\">\r\n                            <FormTextarea\r\n                                name={parameter.ntestgrouptestparametercode}\r\n                                //label={parameter.sparametersynonym}\r\n                                //placeholder={parameter.sparametersynonym}\r\n                                type=\"text\"\r\n                                defaultValue={parameter.sresult}\r\n                                isMandatory={false}\r\n                                required={false}\r\n                                maxLength={255}\r\n                                onChange={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                              onBlur={() => this.props.onGradeEvent(this.props.parameterResults, index, parameter)}\r\n                            />\r\n                        </Col>\r\n                        {/* <Col md={2}> \r\n                        {gradeValues[gradeCode]&&\r\n                            <ListWrapper><MediaLabel className=\"labelfont\" style={{ color: gradeValues[gradeCode][0]['scolorhexcode'] }}>\r\n                                {gradeCode === undefined ? \"\" : gradeValues[gradeCode][0]['sgradename']}</MediaLabel></ListWrapper>}\r\n                          \r\n                        </Col>  */}\r\n                    </>\r\n                );\r\n            }\r\n            case 4: {\r\n                return (\r\n                    <Col md={12} className=\"pl-0\">\r\n                        <DropZone\r\n                            maxFiles={1}\r\n                            isMandatory={false}\r\n                            //label={parameter.sparametersynonym}\r\n                            accept=\".pdf\"\r\n                            minSize={0}\r\n                            maxSize={20}\r\n                            multiple={false}\r\n                            editFiles={parameter.sfinal != null ? parameter : \"\"}\r\n                            attachmentTypeCode={attachmentType.FTP}\r\n                            fileSizeName=\"nfilesize\"\r\n                            fileName=\"sfinal\"\r\n                            index={index}\r\n                            deleteAttachment={this.props.deleteAttachmentParamFile}\r\n                            onDrop={(event) => this.props.onResultInputChange(event, index, parameter)}\r\n                        //disabled={disabled}\r\n                        />\r\n                    </Col>\r\n                )\r\n            }\r\n            default:\r\n                return (\"\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row> \r\n                {this.props.parameterResults.map((parameterResult, index) => {\r\n                    return (\r\n                        <>\r\n                            {/* {this.props.needSubSample && parameterResult.ssamplearno ?\r\n                                <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                                    {parameterResult.ssamplearno}\r\n                                    {parameterResult.stestsynonym ?\r\n                                        <span className={`labelfont`}\r\n                                            style={{ color: \"#97a0af\", paddingLeft: '0.2rem' }}>\r\n                                            { }{ } {parameterResult.stestsynonym}\r\n                                        </span>\r\n                                        : \"\"}\r\n                                </MediaHeader>\r\n                                : parameterResult.sarno ?\r\n                                    <MediaHeader className={`labelfont`} style={{ color: \"#007bff\" }}>\r\n                                        {parameterResult.sarno}\r\n                                        {parameterResult.stestsynonym ?\r\n                                            <span className={`labelfont`}\r\n                                                style={{ color: \"#97a0af\", paddingLeft: '0.2rem' }}>\r\n                                                { }{ } {parameterResult.stestsynonym}\r\n                                            </span>\r\n                                            : \"\"}\r\n                                    </MediaHeader>\r\n                                    : \"\"\r\n                            } */}\r\n\r\n                            <Col md={12} className=\"pl-0 mt-2\">\r\n                                <MediaHeader className={`labelfont`} style={{ color: \"#505f79\" }}\r\n                                >\r\n                                    { }{ } {parameterResult.sparametersynonym}{ }{ }\r\n                                    {parameterResult.nresultmandatory === transactionStatus.NO ? \"(optional)\" : \"\"}\r\n                                </MediaHeader>\r\n                            </Col>\r\n                            {this.renderSwitch(parameterResult, index, parameterResult.ntestgrouptestparametercode,\r\n                                this.props.screenName)}\r\n                        </>\r\n                    )\r\n                })\r\n                }\r\n            </Row >\r\n        )\r\n    }\r\n}\r\n\r\nexport default injectIntl(TestGroupResultEntry);"]},"metadata":{},"sourceType":"module"}