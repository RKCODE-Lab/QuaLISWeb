{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, replaceUpdatedObject, sortData, fillRecordBasedOnCheckBoxSelection, getSameRecordFromTwoArrays, getRecordBasedOnPrimaryKeyName, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, rearrangeDateFormat } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport Axios from 'axios';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getRegTypeJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultSampleTypeValue: inputData.defaultSampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegSubTypeJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultRegTypeValue: inputData.defaultRegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAppConfigVersionJobAllocation(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\n            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusSectionJobAllocation(inputData) {\n  return function (dispatch) {\n    const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData);\n    const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\", inputData);\n    let urlArray = [];\n    urlArray = [testStatusService, sectionService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDesignTemplateJobAllocation(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam).then(response => {\n      if (response.data[\"Success\"]) {\n        toast.warn(response.data.Success);\n      }\n\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\n            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestStatusJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJobAllcationFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showTest: inputParam.inputData.showTest,\n          activeTestTab: inputParam.inputData.activeTestTab,\n          showFilter: false,\n          sampleskip: 0,\n          sampletake: inputParam.sampletake,\n          subsampleskip: 0,\n          subsampletake: inputParam.subsampletake,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ReceiveinLabStatusWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/CreateReceiveinLab\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\n        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_SAMPLE\"];\n        delete response.data[\"JA_SUBSAMPLE\"];\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\n          JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      //toast.error(error.message); \n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAllottedTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getAllotDetails\", inputParam.inputData).then(response => {\n      const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      const Technique = TechniqueMap.get(\"OptionList\");\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\n      const Instrument = InstrumentMap.get(\"OptionList\");\n      const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\n      let selectedRecord = {};\n      selectedRecord[\"scomments\"] = \"\";\n      selectedRecord[\"suserholdduration\"] = \"\";\n      selectedRecord[\"sinstrumentholdduration\"] = \"\";\n      selectedRecord[\"duserblockfromdatetime\"] = new Date(); //selectedRecord [\"dinstblockfromdatetime\"] = new Date();\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          Users,\n          UsersPeriod,\n          InstrumentCategory,\n          Instrument,\n          InstrumentPeriod,\n          currentTime,\n          selectedRecord,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAllotAnotherUserTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getAllotAnotherUserDetails\", inputParam.inputData).then(response => {\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\n      let selectedRecord = {};\n      selectedRecord[\"scomments\"] = \"\";\n      selectedRecord[\"suserholdduration\"] = \"\";\n      selectedRecord[\"sinstrumentholdduration\"] = \"\";\n      selectedRecord[\"duserblockfromdatetime\"] = new Date();\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          Users,\n          UsersPeriod,\n          currentTime,\n          selectedRecord,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRescheduleTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRescheduledDetails\", inputParam.inputData).then(response => {\n      const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      let selectedRecord = {};\n      selectedRecord[\"scomments\"] = \"\";\n      selectedRecord[\"suserholdduration\"] = \"\";\n      selectedRecord[\"sinstrumentholdduration\"] = \"\";\n      selectedRecord[\"duserblockfromdatetime\"] = new Date();\n      const Technique = TechniqueMap.get(\"OptionList\");\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\n      const Instrument = InstrumentMap.get(\"OptionList\");\n      const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          Users,\n          UsersPeriod,\n          InstrumentCategory,\n          Instrument,\n          InstrumentPeriod,\n          currentTime,\n          selectedRecord,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrument(ninstrumentcatcode, ncalibrationreq, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"ncalibrationreq\": ncalibrationreq,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Instrument = [];\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      Instrument = InstrumentMap.get(\"OptionList\");\n\n      if (ninstrumentcatcode !== transactionStatus.NA) {\n        selectedRecord[\"dinstblockfromdatetime\"] = new Date();\n      } else {\n        selectedRecord[\"dinstblockfromdatetime\"] = \"\";\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Instrument,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getUsers(ntechniquecode, JASelectedTest, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\n      \"ntechniquecode\": ntechniquecode,\n      \"ssectioncode\": JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\n      \"nregtypecode\": JASelectedTest.realRegTypeValue.nregtypecode,\n      \"nregsubtypecode\": JASelectedTest.realRegSubTypeValue.nregsubtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Users = [];\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = UsersMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ViewAnalystCalendar(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/viewAnalystCalendar\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.inputData.masterData,\n        ...response.data\n      };\n      let Users = [];\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = UsersMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          screenName: inputParam.inputData.screenName,\n          loading: false,\n          openModal: true,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function CancelTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/cancelTest\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function AllotJobAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/AllotJobCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function AllotAnotherUserAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/AllotAnotherUserCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function RescheduleJobAction(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/RescheduleCreate\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    //console.log(\"response :\");\n    let arr = []; // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n    // (item,index) => \n    // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n    // );\n\n    inputData.JASelectedSample && inputData.JASelectedSample.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\n      nregistrationsectioncode: inputData.nregistrationsectioncode,\n      // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\n      nsectioncode: arr.map(item => item).join(\",\"),\n      ntransactionstatus: String(inputData.ntransactionstatus),\n      ntransactiontestcode: \"0\",\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      activeSubSampleTab: inputData.activeSubSampleTab,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\n      checkBoxOperation: inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData,\n        checkBoxOperation: inputData.checkBoxOperation\n      }).then(response => {\n        sortData(response.data);\n        let oldSelectedTest = inputData.masterData.JASelectedTest;\n        let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray); // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \n        // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\n        // inputData.masterData.JA_TEST = response.data.JA_TEST;  \n        // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\n        // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\n        // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\n        // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\n        // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\n\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.JASelectedSample\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let RegistrationTestAttachment = [];\n        let RegistrationTestComment = [];\n        let TestView = [];\n        let RegistrationComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.forEach((subsample, index) => {\n            if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n          });\n\n          if (oldSelectedSubSample.length > 0) {\n            masterData = { ...masterData,\n              JASelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n          let npreregno;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              JASelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n            npreregno = masterData.JASelectedSample[0].npreregno;\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            default:\n              RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \" testAttachmentDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTVIEW\":\n              dbData = response.data.TestView || [];\n              list = [...inputData.masterData.TestView, ...dbData];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              dbData = response.data.RegistrationComment || [];\n              list = [...inputData.masterData.RegistrationComment, ...dbData];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleCommentsDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        } else {\n          let list = [];\n\n          if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                JASelectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n            }\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\");\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleChangeDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          RegistrationTestAttachment,\n          RegistrationTestComment,\n          TestView,\n          RegistrationComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            secondarySelection: inputData[\"secondarySelection\"],\n            loading: false,\n            sampleskip: undefined,\n            sampletake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.JASelectedTest;\n      let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\n      let {\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let skipInfo = {};\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\n      }\n\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\n        let JASelectedSample = inputData.JASelectedSample;\n        let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\n        let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE;\n\n        if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n          JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\n\n          if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\n        let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\n        let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\n        let masterData = { ...inputData.masterData,\n          JASelectedSample,\n          JASelectedSubSample,\n          JASelectedTest\n        };\n        inputData = { ...inputData,\n          ntransactiontestcode,\n          npreregno,\n          nsectioncode,\n          ntransactionsamplecode,\n          JASelectedSample,\n          JASelectedTest,\n          JASelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestTab: inputData.activeTestTab,\n          masterData\n        };\n\n        if (JASelectedTest.length > 0) {\n          inputData = { ...inputData,\n            childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\", \"TestView\"]\n          };\n          dispatch(getTestChildTabDetailJobAllocation(inputData, true));\n        } else {\n          inputData = { ...inputData,\n            masterData,\n            childTabsKey: [\"JA_TEST\"]\n          };\n          dispatch(getJobAllocationTestDetail(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.JASelectedSample,\n          JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\n        };\n        let subsamplecheck = true;\n\n        if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\n                masterData = { ...masterData,\n                  JASelectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"JA_TEST\"];\n                subsamplecheck = false;\n                dispatch(getJobAllocationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              JASelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            JASelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode;\n        }\n\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              JASelectedSample: inputData.JASelectedSample,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              TestView\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    //console.log(\"response :\");\n    let arr = [];\n    let arr1 = []; // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\n    // (item,index) => \n    // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\n    // );\n    //   const myArray = inputData.nsectioncode.split(\",\");\n    //   myArray.map((item) => {\n    //         if(!arr.includes(item)) {\n    //             arr.push(item)\n    //           }\n    //         }\n    //     )\n\n    let JASelectedSubSample = inputData.JASelectedSubSample;\n    JASelectedSubSample && JASelectedSubSample.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\n      ntransactiontestcode: \"0\",\n      ntransactionstatus: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestTab: inputData.activeTestTab,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample\n    };\n    const subSample = inputData.nneedsubsample;\n\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'ntransactionsamplecode');\n        let oldSelectedTest = inputData.masterData.JASelectedTest;\n        let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray); //inputData.masterData.JA_TEST = response.data.JA_TEST;\n\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.masterData.JASelectedSample,\n          JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample\n        };\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let RegistrationTestAttachment = [];\n        let RegistrationTestComment = [];\n        let TestView = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              JASelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            default:\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTVIEW\":\n              dbData = response.data.TestView || [];\n              list = [...inputData.masterData.TestView, ...dbData];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n          let dbData = [];\n          let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            JASelectedTest: [testList[0]],\n            JA_TEST: testList\n          };\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTVIEW\":\n              dbData = response.data.TestView || [];\n              list = [...inputData.masterData.TestView, ...dbData];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTVIEW\":\n              list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\n              TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestView\";\n              dataStateName = \"testViewDataState\";\n              break;\n\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\n              list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          RegistrationTestAttachment,\n          RegistrationTestComment,\n          TestView,\n          RegistrationSampleComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestTab: inputData.activeTestTab,\n            // activeTestTab: inputData.activeTestTab,\n            screenName: inputData.activeTestTab,\n            subsampleskip: undefined,\n            subsampletake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        //console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.JASelectedTest;\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\n        let JASelectedSubSample = inputData.RESelectedSubSample;\n        let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\n        inputData = { ...inputData,\n          childTabsKey: [\"TestView\", \"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          JASelectedSample: inputData.masterData.JASelectedSample,\n          JASelectedTest,\n          JASelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestTab: inputData.activeTestTab\n        };\n        dispatch(getTestChildTabDetailJobAllocation(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSubSample: inputData.JASelectedSubSample\n        };\n        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            JASelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode;\n        }\n\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              JASelectedSubSample: inputData.JASelectedSubSample,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              TestView\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            // activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let arr = [];\n    inputData.JASelectedTest && inputData.JASelectedTest.map(item => {\n      if (!arr.includes(item.nsectioncode)) {\n        arr.push(item.nsectioncode);\n      }\n    });\n    let inputParamData = {\n      ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      ssectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\n      //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\n      ntransactionsamplecode: inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\n      ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let url = \"\";\n\n    switch (inputData.activeTestTab) {\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        dataStateName = \"testAttachmentDataState\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"RegistrationSampleAttachment\";\n        dataStateName = \"sampleAttachmentDataState\";\n        break;\n\n      case \"IDS_TESTVIEW\":\n        url = \"joballocation/getTestView\";\n        activeName = \"TestView\";\n        dataStateName = \"testViewDataState\";\n        break;\n\n      default:\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        dataStateName = \"testAttachmentDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        let responseData = { ...response.data,\n          JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\n          JASelectedTest: inputData.JASelectedTest,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        };\n        let skipInfo = {};\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          JASelectedTest: inputData.JASelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            activeTabIndex: inputData.activeTabIndex,\n            activeTabId: inputData.activeTabId,\n            activeTestTab: inputData.activeTestTab,\n            loading: false,\n            activeTestTab: inputData.activeTestTab,\n            screenName: inputData.activeTestTab,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        JASelectedTest: inputData.JASelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData.skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestTab: inputData.activeTestTab,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function validateEsignforJobAllocation(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam.screenData.inputParam.methodUrl;\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        dispatch(dispatchMethods(inputParam[\"screenData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.info(error.response.data);\n      }\n    });\n  };\n}\n\nfunction dispatchMethods(screenData) {\n  return dispatch => {\n    let action = screenData.inputParam.action;\n\n    switch (action) {\n      case \"receiveinlab\":\n        dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"allotjob\":\n        dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"allotanotheruser\":\n        dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"reschedule\":\n        dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\n        break;\n\n      case \"canceltest\":\n        dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\n        break;\n\n      default:\n        break;\n    }\n  };\n}\n\nexport function updatedObjectWithNewElement1(oldList, newList) {\n  oldList = [...newList, ...oldList];\n  return oldList;\n}\nexport function getAnalystCalenderBasedOnUser(nusercode, masterData, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\n      \"nusercode\": nusercode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            analystCalenderData: response.data.UserData\n          },\n          loading: false,\n          selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrumentForSchedule(ninstrumentcatcode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Instrument = [];\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      Instrument = InstrumentMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Instrument,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/JobAllocationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","replaceUpdatedObject","sortData","fillRecordBasedOnCheckBoxSelection","getSameRecordFromTwoArrays","getRecordBasedOnPrimaryKeyName","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","rearrangeDateFormat","postCRUDOrganiseTransSearch","Axios","transactionStatus","getRegTypeJobAllocation","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","defaultSampleTypeValue","loading","catch","error","status","message","warn","getRegSubTypeJobAllocation","defaultRegTypeValue","getAppConfigVersionJobAllocation","inputParam","defaultRegSubTypeValue","RegSubTypeValue","realRegSubTypeValue","getSectionJobAllocation","defaultUserSectionValue","getFilterStatusJobAllocation","defaultFilterStatusValue","getFilterStatusSectionJobAllocation","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getDesignTemplateJobAllocation","Success","ApprovalVersionValue","realApprovalVersionValue","getTestStatusJobAllocation","getJobAllcationFilterSubmit","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showTest","activeTestTab","showFilter","sampleskip","sampletake","subsampleskip","subsampletake","testskip","testtake","documentDataState","sort","filter","testCommentDataState","ReceiveinLabStatusWise","rtn","JA_SAMPLE","JA_SUBSAMPLE","JA_TEST","JASelectedSample","JASelectedSubSample","JASelectedTest","respObject","loadEsign","openModal","showSample","postParamList","getAllottedTestWise","TechniqueMap","Technique","UsersMap","Users","UsersPeriodMap","Period","InstrumentCategoryMap","InstrumentCategory","InstrumentMap","Instrument","InstrumentPeriodMap","currentTime","userinfo","CurrentTime","body","get","UsersPeriod","InstrumentPeriod","selectedRecord","Date","isOpen","operation","screenName","ncontrolCode","ncontrolcode","getAllotAnotherUserTestWise","stechniquename","getRescheduleTestWise","getInstrument","ninstrumentcatcode","ncalibrationreq","userInfo","NA","getUsers","ntechniquecode","map","sample","nsectioncode","join","realRegTypeValue","nregtypecode","nregsubtypecode","ViewAnalystCalendar","CancelTestWise","info","AllotJobAction","AllotAnotherUserAction","RescheduleJobAction","getJobAllocationSubSampleDetail","isServiceRequired","arr","item","includes","push","inputParamData","nsampletypecode","npreregno","nregistrationsectioncode","ntransactionstatus","String","ntransactiontestcode","ntestcode","napprovalversioncode","fromdate","todate","activeSampleTab","activeSubSampleTab","nneedsubsample","ndesigntemplatemappingcode","nneedtemplatebasedflow","checkBoxOperation","activeName","dataStateName","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","length","bool","skipInfo","RegistrationTestAttachment","RegistrationTestComment","TestView","RegistrationComment","RegistrationSampleAttachment","wholeSubSampleList","b","ntransactionsamplecode","forEach","subsample","index","splice","wholeTestList","test","keepOld","list","dbData","skip","secondarySelection","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","getTestChildTabDetailJobAllocation","getJobAllocationTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","selectedTest","selectedSubSample1","x","arr1","nflag","ntype","subSample","RegistrationSampleComment","testList","wholeSubsampleList","selectedSubSample","RESelectedSubSample","ssectioncode","realDesignTemplateMappingValue","url","activeTabIndex","activeTabId","validateEsignforJobAllocation","methodUrl","screenData","toLowerCase","dispatchMethods","action","updatedObjectWithNewElement1","oldList","newList","getAnalystCalenderBasedOnUser","nusercode","analystCalenderData","UserData","getInstrumentForSchedule"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, replaceUpdatedObject, sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getRegTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData );\r\n        const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\",  inputData );\r\n        let urlArray = [];\r\n        urlArray = [testStatusService,sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDesignTemplateJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getDesignTemplateByApprovalConfigVersion\", inputParam)\r\n            .then(response => {\r\n\r\n                if(response.data[\"Success\"]){\r\n                    toast.warn(response.data.Success);\r\n                }\r\n\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputParam.masterData.defaultApprovalVersionValue,\r\n                            ApprovalVersionValue: inputParam.masterData.realApprovalVersionValue\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJobAllcationFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                     masterData['searchedTest'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        sampleskip: 0,\r\n                        sampletake: inputParam.sampletake,\r\n                        subsampleskip :0,\r\n                        subsampletake :inputParam.subsampletake,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReceiveinLabStatusWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"nregistrationsectioncode\");\r\n                        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n\r\n                        delete response.data[\"JA_SAMPLE\"];\r\n                        delete response.data[\"JA_SUBSAMPLE\"];\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"nregistrationsectioncode\"),\r\n                            JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        //toast.error(error.message); \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }                  \r\n                })\r\n    }\r\n} \r\n\r\nexport function getAllottedTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n                 \r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n                //selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation:inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getAllotAnotherUserTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData)\r\n                .then(response => {\r\n                \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);  \r\n                                \r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n                const Technique = response.data.Technique && response.data.Technique[0].stechniquename;\r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,                          \r\n                            Users,\r\n                            UsersPeriod, \r\n                            currentTime,  \r\n                            selectedRecord,                         \r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getRescheduleTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);   \r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                let selectedRecord ={};\r\n                selectedRecord[\"scomments\"] =\"\";\r\n                selectedRecord[\"suserholdduration\"] =\"\";\r\n                selectedRecord[\"sinstrumentholdduration\"]=\"\";\r\n                selectedRecord [\"duserblockfromdatetime\"] = new Date();\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            selectedRecord,\r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n\r\n                if(ninstrumentcatcode !== transactionStatus.NA){\r\n                    selectedRecord [\"dinstblockfromdatetime\"] = new Date();\r\n                }else{\r\n                    selectedRecord [\"dinstblockfromdatetime\"] =\"\";\r\n                }\r\n                \r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUsers(ntechniquecode,JASelectedTest, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\"ntechniquecode\": ntechniquecode,\r\n                          \"ssectioncode\":JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample=>sample.nsectioncode).join(\",\"):\"\", \r\n                          \"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\r\n                          \"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function ViewAnalystCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/viewAnalystCalendar\", (inputParam.inputData))\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.inputData.masterData,\r\n                    ...response.data,\r\n                }  \r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {                       \r\n                        Users,                        \r\n                        screenName: inputParam.inputData.screenName,\r\n                        loading: false,\r\n                        openModal:true,\r\n                        masterData,\r\n                        \r\n                        \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function CancelTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/cancelTest\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function AllotJobAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotJobCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function AllotAnotherUserAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/AllotAnotherUserCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function RescheduleJobAction(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/RescheduleCreate\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        \r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data);\r\n                    }                   \r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        //console.log(\"response :\");\r\n        let arr =[];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n\r\n        inputData.JASelectedSample && inputData.JASelectedSample.map((item) => {\r\n            if(!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n              }\r\n            }\r\n        )\r\n\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            nregistrationsectioncode: inputData.nregistrationsectioncode,\r\n           // ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\r\n            nsectioncode : arr.map(item => item).join(\",\"),\r\n            ntransactionstatus: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: \"0\",\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            activeSubSampleTab: inputData.activeSubSampleTab,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest;    \r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\r\n                    \r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\",inputData.removeElementFromArray);\r\n\r\n                    // inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \r\n                    // inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\r\n                    // inputData.masterData.JA_TEST = response.data.JA_TEST;  \r\n                    // inputData.masterData.JASelectedTest=response.data.JASelectedTest;\r\n                    // inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\r\n                    // inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\r\n                    // inputData.masterData.RegistrationComment =response.data.RegistrationComment;\r\n                    // inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.JASelectedSample\r\n                    }\r\n                    \r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n\r\n                        let wholeSubSampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n\r\n\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.JASelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestTab) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                             case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \" testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {                  \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                                \r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestTab) {                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;    \r\n\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            secondarySelection :inputData[\"secondarySelection\"], \r\n                            loading: false,\r\n                            sampleskip: undefined,\r\n                            sampletake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.JASelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].nregistrationsectioncode, \"nregistrationsectioncode\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSample = inputData.JASelectedSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let npreregno = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(',');\r\n                let nsectioncode = inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(',');\r\n                let masterData = { ...inputData.masterData, JASelectedSample, JASelectedSubSample, JASelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    npreregno,\r\n                    nsectioncode,\r\n                    ntransactionsamplecode,\r\n                    JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: inputData.activeTestTab, masterData\r\n                }\r\n\r\n                if (JASelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RegistrationTestAttachment\",\"RegistrationTestComment\",\"TestView\"]\r\n                    }\r\n                    dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"JA_TEST\"]\r\n                    }\r\n                    dispatch(getJobAllocationTestDetail(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSample: inputData.JASelectedSample,\r\n                    JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"JA_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getJobAllocationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode\r\n                }                \r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                        ntransactiontestcode, \"ntransactiontestcode\");    \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSample: inputData.JASelectedSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n\r\n        //console.log(\"response :\");\r\n        let arr =[];\r\n        let arr1=[];\r\n        // const vals= inputData.JASelectedSample && inputData.JASelectedSample.filter(\r\n        // (item,index) => \r\n        // item.nsectioncode!==inputData.JASelectedSample[inputData.JASelectedSample.lastIndexOf(inputData.JASelectedSample[index])].nsectioncode\r\n        // );\r\n    //   const myArray = inputData.nsectioncode.split(\",\");\r\n    //   myArray.map((item) => {\r\n    //         if(!arr.includes(item)) {\r\n    //             arr.push(item)\r\n    //           }\r\n    //         }\r\n    //     )\r\n\r\n    let JASelectedSubSample = inputData.JASelectedSubSample;\r\n    JASelectedSubSample && JASelectedSubSample.map((item) => {\r\n        if (!arr.includes(item.nsectioncode)) {\r\n            arr.push(item.nsectioncode)\r\n        }\r\n    }\r\n    )    \r\n        \r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            nsectioncode: arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            ntransactiontestcode: \"0\",\r\n            ntransactionstatus: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'ntransactionsamplecode')\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n                    //inputData.masterData.JA_TEST = response.data.JA_TEST;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.masterData.JASelectedSample,\r\n                        JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let TestView = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestTab) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;   \r\n                           \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break; \r\n                          \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedTest: [testList[0]],\r\n                            JA_TEST: testList,\r\n                        }\r\n\r\n                        switch (inputData.activeTestTab) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTVIEW\":\r\n                                dbData = response.data.TestView || []\r\n                                list = [...inputData.masterData.TestView, ...dbData];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n\r\n                            case \"IDS_TESTVIEW\":\r\n                                list = response.data.TestView ? sortData(response.data.TestView, 'descending', 'ntransactiontestcode') : [];\r\n                                TestView = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestView\"\r\n                                dataStateName =\"testViewDataState\"\r\n                                break;\r\n                                \r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,                      \r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        TestView,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            // activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            subsampleskip:undefined,\r\n                            subsampletake:undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    //console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSubSample = inputData.RESelectedSubSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestView\",\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\r\n                    ntransactiontestcode,\r\n                    JASelectedSample: inputData.masterData.JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: inputData.activeTestTab\r\n                }\r\n                dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSubSample: inputData.JASelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                 const TestView = keepOld ? inputData.masterData.TestView : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestView || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSubSample: inputData.JASelectedSubSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            TestView,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        // activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let arr = [];\r\n        inputData.JASelectedTest && inputData.JASelectedTest.map((item) => {\r\n            if(!arr.includes(item.nsectioncode)) {\r\n                arr.push(item.nsectioncode)\r\n              }\r\n            }\r\n        )\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            ssectioncode :arr.map(nsectioncode => nsectioncode).join(\",\"),\r\n            //ssectioncode :inputData.JASelectedTest.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntransactionsamplecode :inputData.JASelectedTest.map(test => test.ntransactionsamplecode).join(\",\"),\r\n            ndesigntemplatemappingcode: inputData.masterData.realDesignTemplateMappingValue && inputData.masterData.realDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let url=\"\";\r\n       \r\n        switch (inputData.activeTestTab) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;           \r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"RegistrationSampleAttachment\"\r\n                dataStateName = \"sampleAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTVIEW\":\r\n                url = \"joballocation/getTestView\"\r\n                activeName = \"TestView\"\r\n                dataStateName = \"testViewDataState\"\r\n                break;    \r\n            default:\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\r\n                        JASelectedTest: inputData.JASelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        JASelectedTest: inputData.JASelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            loading: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.activeTestTab,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                JASelectedTest: inputData.JASelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData.skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestTab: inputData.activeTestTab,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function validateEsignforJobAllocation(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = inputParam.screenData.inputParam.methodUrl;\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    dispatch(dispatchMethods(inputParam[\"screenData\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.info(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nfunction dispatchMethods(screenData) {\r\n    return (dispatch) => {\r\n        let action = screenData.inputParam.action\r\n        switch (action) {\r\n            case \"receiveinlab\":\r\n                dispatch(ReceiveinLabStatusWise(screenData.inputParam, screenData.masterData));\r\n                break;\r\n            case \"allotjob\":\r\n                dispatch(AllotJobAction(screenData.inputParam, screenData.masterData));\r\n                break;  \r\n            case \"allotanotheruser\":\r\n                dispatch(AllotAnotherUserAction(screenData.inputParam, screenData.masterData));\r\n                break;    \r\n            case \"reschedule\":\r\n                dispatch(RescheduleJobAction(screenData.inputParam, screenData.masterData));\r\n                break;    \r\n            case \"canceltest\":\r\n                dispatch(CancelTestWise(screenData.inputParam, screenData.masterData));\r\n                break;                      \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function updatedObjectWithNewElement1(oldList, newList) {\r\n    oldList = [...newList, ...oldList];\r\n    return oldList;\r\n  }\r\n\r\n\r\n\r\n  export function getAnalystCalenderBasedOnUser(nusercode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getAnalystCalendarBasedOnUser\", {\"nusercode\": nusercode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {          \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData:{...masterData,analystCalenderData: response.data.UserData},\r\n                        loading:false,\r\n                        selectedRecord\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrumentForSchedule(ninstrumentcatcode,userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategoryForSchedule\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}