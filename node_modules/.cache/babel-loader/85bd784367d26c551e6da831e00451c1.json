{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { getComboLabelValue, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function getModuleSortingComboService(methodParam) {\n  return function (dispatch) {\n    const methodTypeService = rsapi.post(\"modulesorting/getModuleSorting\", {\n      userinfo: methodParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n\n    if (methodParam.operation === \"create\") {\n      urlArray = [methodTypeService];\n    } else {\n      const url = methodParam.inputParam.classUrl + \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\"; //\"method/getActiveMethodById\"      \n\n      const methodById = rsapi.post(url, {\n        [methodParam.primaryKeyField]: methodParam.primaryKeyValue,\n        \"userinfo\": methodParam.userInfo\n      });\n      urlArray = [methodTypeService, methodById];\n      selectedId = methodParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const menuMap = constructOptionList(response[0].data.moduleList || [], \"nmenucode\", \"smenuname\", undefined, undefined, false);\n      const formMap = constructOptionList(response[0].data || [], \"nformcode\", \"sformname\", undefined, undefined, false);\n      const moduleMap = constructOptionList(response[1].data.moduleList || [], \"nmodulecode\", \"smoduledisplayname\", undefined, undefined, false);\n      const menuMapList = menuMap.get(\"OptionList\");\n      const formMapList = formMap.get(\"OptionList\");\n      const moduleMapList = moduleMap.get(\"OptionList\");\n\n      if (methodParam.operation === \"update\") {\n        selectedRecord = response[1].data.selectedForms;\n        selectedRecord[\"nmodulecode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \"nmodulecode\", \"smoduledisplayname\");\n        selectedRecord[\"nformcode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \"nformcode\", \"sformdisplayname\");\n        selectedRecord[\"nmenucode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \"nmenucode\", \"smenuname\");\n      }\n\n      ;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          moduleSortingData: response[0].data || [],\n          formMapList,\n          moduleMapList,\n          menuMapList,\n          operation: methodParam.operation,\n          screenName: methodParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: methodParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/ModuleSortingAction.js"],"names":["rsapi","DEFAULT_RETURN","getComboLabelValue","constructOptionList","toast","Axios","initRequest","intl","getModuleSortingComboService","methodParam","dispatch","methodTypeService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","menuMap","data","moduleList","undefined","formMap","moduleMap","menuMapList","get","formMapList","moduleMapList","selectedForms","type","payload","moduleSortingData","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {getComboLabelValue,constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n    export function getModuleSortingComboService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodTypeService = rsapi.post(\"modulesorting/getModuleSorting\", \r\n                                    {userinfo:methodParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n   \r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodTypeService];\r\n       \r\n    }\r\n    else{           \r\n        const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyField] :methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodTypeService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n           \r\n            let selectedRecord =  {};\r\n            const menuMap = constructOptionList(response[0].data.moduleList || [], \"nmenucode\",\r\n                                  \"smenuname\", undefined, undefined, false);\r\n            const formMap = constructOptionList(response[0].data || [], \"nformcode\",\r\n                                  \"sformname\", undefined, undefined, false);\r\n            const moduleMap = constructOptionList(response[1].data.moduleList|| [], \"nmodulecode\",\r\n                                  \"smoduledisplayname\", undefined, undefined, false);\r\n            const  menuMapList = menuMap.get(\"OptionList\");\r\n            const  formMapList = formMap.get(\"OptionList\");\r\n            const  moduleMapList = moduleMap.get(\"OptionList\");\r\n\r\n\r\n            if (methodParam.operation === \"update\"){\r\n                selectedRecord = response[1].data.selectedForms;\r\n                selectedRecord[\"nmodulecode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \r\n                    \"nmodulecode\", \"smoduledisplayname\"); \r\n                selectedRecord[\"nformcode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \r\n                    \"nformcode\", \"sformdisplayname\");   \r\n                selectedRecord[\"nmenucode\"] = getComboLabelValue(selectedRecord[0], response[0].data, \r\n                    \"nmenucode\", \"smenuname\");    \r\n                              \r\n            };               \r\n            dispatch({type: DEFAULT_RETURN, payload:{moduleSortingData:response[0].data || [],   \r\n                formMapList,   \r\n                moduleMapList,\r\n                menuMapList,                    \r\n                operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                openModal : true,\r\n                ncontrolCode:methodParam.ncontrolCode,\r\n                loading:false,selectedId\r\n            }});\r\n      \r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(intl.formatMessage({id: error.message}));\r\n            } \r\n            else{               \r\n                toast.warn(intl.formatMessage({id: error.response.data}));\r\n            }  \r\n        })        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}