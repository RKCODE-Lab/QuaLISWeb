{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\quotation\\\\Quotation.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrashAlt, faPencilAlt, faThumbsUp, faPlus, faEye } from '@fortawesome/free-solid-svg-icons';\nimport { ReactComponent as Quotationdiscount } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/quotationdiscount.svg\";\nimport { injectIntl, FormattedMessage } from \"react-intl\";\nimport { callService, crudMaster, validateEsignCredential, updateStore, getQuotation, filterColumnData, getProjectTypeComboService, viewAttachment, addQuotation, getreloadQuotation, getQuotationAddTestService, getQuotationPricingEditService, GrossQuotation, getQuotationClientCategoryComboService, getQuotaionClientComboService, getProjectCodeComboService, getQuotaionProductCategoryComboService, getQuotaionClientSiteComboService } from \"../../actions\";\nimport ListMaster from \"../../components/list-master/list-master.component\";\nimport { transactionStatus } from \"../../components/Enumeration\";\nimport AddQuotation from \"../../pages/quotation/AddQuotation\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\nimport Esign from \"../audittrail/Esign\";\nimport { showEsign, getControlMap, formatInputDate } from \"../../components/CommonScript\";\nimport { ReadOnlyText, ContentPanel } from \"../../components/App.styles\";\nimport { process } from \"@progress/kendo-data-query\";\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\"; // import ProjectMasterFilter from './ProjectMasterFilter';\n\nimport { intl } from \"../../components/App\"; // import DataGrid from '../../components/data-grid/data-grid.component';\n\nimport QuotationTab from \"./QuotationTab\";\nimport AddQuotationPreview from \"../../pages/quotation/AddQuotationPreview\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Quotation extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let quotationData = [];\n      let inputParam = {};\n      let slideOutModal;\n      quotationData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = {\n        inputListName: \"Quotation\",\n        selectedObject: \"SelectedQuotation\",\n        primaryKeyField: \"nquotationcode\"\n      };\n\n      if (this.props.Login.operation === \"update\" && this.props.Login.screenName === \"IDS_QUOTATION\") {\n        postParam[\"primaryKeyValue\"] = this.props.Login.masterData.SelectedQuotation.nquotationcode;\n        quotationData[\"quotation\"] = {\n          nquotationcode: this.props.Login.masterData.SelectedQuotation.nquotationcode,\n          nsitecode: this.props.Login.userInfo.nmastersitecode,\n          sprojecttitle: this.state.selectedRecord.sprojecttitle === undefined ? \"\" : this.state.selectedRecord.sprojecttitle,\n          sclientsiteaddress: this.state.selectedRecord.sclientsiteaddress === undefined ? \"\" : this.state.selectedRecord.sclientsiteaddress,\n          sinvoiceaddress: this.state.selectedRecord.sinvoiceaddress === undefined ? \"\" : this.state.selectedRecord.sinvoiceaddress,\n          sdescription: this.state.selectedRecord.sdescription === undefined ? \"\" : this.state.selectedRecord.sdescription,\n          ntransactionstatus: transactionStatus.DRAFT,\n          sdeviationremarks: this.state.selectedRecord.sdeviationremarks === undefined ? \"\" : this.state.selectedRecord.sdeviationremarks // soem: this.state.selectedRecord.soem === undefined ? \"\" : this.state.selectedRecord.soem,\n          // squotationleadtime: this.state.selectedRecord.squotationleadtime === undefined ? \"\" : this.state.selectedRecord.squotationleadtime\n\n        };\n      } else if (this.props.Login.operation === \"create\" && this.props.Login.screenName === \"IDS_QUOTATION\") {\n        quotationData[\"quotation\"] = {\n          nsitecode: this.props.Login.userInfo.nmastersitecode,\n          sprojecttitle: this.state.selectedRecord.sprojecttitle === undefined ? \"\" : this.state.selectedRecord.sprojecttitle,\n          sclientsiteaddress: this.state.selectedRecord.sclientsiteaddress === undefined ? \"\" : this.state.selectedRecord.sclientsiteaddress,\n          sinvoiceaddress: this.state.selectedRecord.sinvoiceaddress === undefined ? \"\" : this.state.selectedRecord.sinvoiceaddress,\n          sdescription: this.state.selectedRecord.sdescription === undefined ? \"\" : this.state.selectedRecord.sdescription,\n          ntransactionstatus: transactionStatus.DRAFT,\n          sdeviationremarks: this.state.selectedRecord.sdeviationremarks === undefined ? \"\" : this.state.selectedRecord.sdeviationremarks // soem: this.state.selectedRecord.soem === undefined ? \"\" : this.state.selectedRecord.soem,\n          // squotationleadtime: this.state.selectedRecord.squotationleadtime === undefined ? \"\" : this.state.selectedRecord.squotationleadtime\n\n        };\n      }\n\n      if ((this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") && this.props.Login.screenName === \"IDS_QUOTATION\") {\n        quotationData[\"quotation\"][\"nclientcatcode\"] = this.state.selectedRecord[\"nclientcatcode\"] ? this.state.selectedRecord[\"nclientcatcode\"].value : transactionStatus.NA;\n        quotationData[\"quotation\"][\"nclientcode\"] = this.state.selectedRecord[\"nclientcode\"] !== \"\" ? this.state.selectedRecord[\"nclientcode\"].value : transactionStatus.NA;\n        quotationData[\"quotation\"][\"nclientsitecode\"] = this.state.selectedRecord[\"nclientsitecode\"] !== \"\" ? this.state.selectedRecord[\"nclientsitecode\"].value : transactionStatus.NA;\n        quotationData[\"quotation\"][\"nclientcontactcode\"] = this.state.selectedRecord[\"nclientcontactcode\"] !== \"\" ? this.state.selectedRecord[\"nclientcontactcode\"].value : transactionStatus.NA;\n        quotationData[\"quotation\"][\"noemcode\"] = this.state.selectedRecord[\"noemcode\"] !== \"\" ? this.state.selectedRecord[\"noemcode\"].value : transactionStatus.NA; // quotationData[\"quotation\"][\"nquotationtypecode\"] = this.state.selectedRecord[\"nquotationtypecode\"]!==\"\" ? this.state.selectedRecord[\"nquotationtypecode\"].value\n        //   : transactionStatus.NA;\n\n        quotationData[\"quotation\"][\"nquotationtypecode\"] = transactionStatus.ACTIVE;\n        quotationData[\"quotation\"][\"nprojecttypecode\"] = this.state.selectedRecord[\"nprojecttypecode\"] ? this.state.selectedRecord[\"nprojecttypecode\"].value : transactionStatus.NA;\n        quotationData[\"quotation\"][\"nprojectmastercode\"] = this.state.selectedRecord[\"nprojectmastercode\"] ? this.state.selectedRecord[\"nprojectmastercode\"].value : transactionStatus.NA;\n        /*     quotationData[\"quotation\"][\"nuserrolecode\"] = this.state.selectedRecord[\"nuserrolecode\"]!==\"\" ? this.state.selectedRecord[\"nuserrolecode\"]\r\n                : transactionStatus.NA; */\n\n        quotationData[\"quotation\"][\"nusercode\"] = this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"] : transactionStatus.NA; // quotationData[\"quotation\"][\"drfwdate\"] = formatInputDate(this.state.selectedRecord[\"srfwdate\"], false);\n\n        quotationData[\"quotation\"][\"dquotationdate\"] = this.QuotationformatInputDate(this.state.selectedRecord[\"dquotationdate\"]); //     quotationData[\"quotation\"][\"dquotationdate\"] = rearrangeDateFormat(quotationData.userinfo,this.state.selectedRecord[\"dquotationdate\"]);\n\n        quotationData[\"quotation\"][\"ntzrfwdate\"] = quotationData.userinfo.ntimezonecode ? quotationData.userinfo.ntimezonecode : \"-1\";\n        quotationData[\"quotation\"][\"ntzquotationdate\"] = quotationData.userinfo.ntimezonecode ? quotationData.userinfo.ntimezonecode : \"-1\";\n        quotationData[\"quotation\"][\"nproductcatcode\"] = this.state.selectedRecord[\"nproductcatcode\"] !== \"\" ? this.state.selectedRecord[\"nproductcatcode\"].value : transactionStatus.NA;\n        quotationData[\"quotation\"][\"nproductcode\"] = this.state.selectedRecord[\"nproductcode\"] !== \"\" ? this.state.selectedRecord[\"nproductcode\"].value : transactionStatus.NA;\n      }\n\n      if (this.props.Login.operation === \"create\" && this.props.Login.screenName === \"IDS_TEST\") {\n        inputParam = this.onSaveQuotationTest(saveType, formRef);\n      }\n\n      if (this.props.Login.operation === \"update\" && (this.props.Login.screenName === \"IDS_PRICE\" || this.props.Login.screenName === \"IDS_CALCULATEPRICING\")) {\n        inputParam = this.onSaveQuotationTestPrice(saveType, formRef);\n      }\n\n      if (this.props.Login.operation === \"create\" && this.props.Login.screenName === \"IDS_CALCULATEPRICING\") {\n        inputParam = this.onSaveGrossQuotation(saveType, formRef);\n      }\n\n      if ((this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") && this.props.Login.screenName === \"IDS_QUOTATION\") {\n        inputParam = {\n          classUrl: \"quotation\",\n          methodUrl: \"Quotation\",\n          inputData: quotationData,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef,\n          isClearSearch: this.props.Login.isClearSearch\n        };\n      }\n\n      slideOutModal = this.props.Login.screenName === \"IDS_TEST\" || this.props.Login.screenName === \"IDS_PRICE\" || this.props.Login.screenName === \"IDS_CALCULATEPRICING\" ? \"openChildModal\" : \"openModal\";\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, slideOutModal);\n      }\n    };\n\n    this.onSaveQuotationTestPrice = (saveType, formRef) => {\n      const quotationtestPriceData = {\n        \"userinfo\": this.props.Login.userInfo,\n        \"QuotationTest\": this.props.Login.masterData.SelectedQuotation,\n        \"nquotationcode\": this.props.Login.masterData.SelectedQuotation.nquotationcode,\n        \"nprojectmastercode\": this.props.Login.masterData.SelectedQuotation.nprojectmastercode,\n        \"nclientcode\": this.props.Login.masterData.SelectedQuotation.nclientcode //    \"ncost\":this.props.Login.selectedRecord[0].ncost\n\n      };\n      let postParam = undefined;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n        postParam = {\n          inputListName: \"Quotation\",\n          selectedObject: \"SelectedQuotation\",\n          primaryKeyField: \"nquotationcode\"\n        }; //  let selectedRecord1=[this.props.Login.selectedRecord];\n\n        let QuotationTestPriceArray = [];\n        this.props.Login.selectedRecord.forEach((item, index) => {\n          if (item.ntotalamount < 0) {\n            QuotationTestPriceArray[index] = { ...this.props.Login.selectedRecord[index],\n              ntotalamount: 0\n            };\n          }\n\n          QuotationTestPriceArray[index] = {\n            namount: this.props.Login.selectedRecord[index].namount,\n            nclientcode: this.props.Login.selectedRecord[index].nclientcode,\n            ncost: this.props.Login.selectedRecord[index].ncost,\n            nnoofsamples: this.props.Login.selectedRecord[index].nnoofsamples,\n            nprojectmastercode: this.props.Login.selectedRecord[index].nprojectmastercode,\n            nquotationcode: this.props.Login.selectedRecord[index].nquotationcode,\n            nquotationtestcode: this.props.Login.selectedRecord[index].nquotationtestcode,\n            ntestcode: this.props.Login.selectedRecord[index].ntestcode,\n            ntotalamount: this.props.Login.selectedRecord[index].ntotalamount,\n            ntotalgrosstamount: this.props.Login.selectedRecord[index].ntotalgrosstamount,\n            //  stestdescription: this.props.Login.selectedRecord[index].stestdescription,\n            stestsynonym: this.props.Login.selectedRecord[index].stestsynonym,\n            ndiscountbandcode: this.props.Login.selectedRecord[index].ndiscountbandcode.value,\n            stestplatform: this.props.Login.selectedRecord[index].stestplatform,\n            snotes: this.props.Login.selectedRecord[index].snotes,\n            nmethodcode: this.props.Login.selectedRecord[index].nmethodcode,\n            squotationleadtime: this.props.Login.selectedRecord[index].squotationleadtime\n          };\n        });\n        quotationtestPriceData[\"QuotationTest\"] = JSON.parse(JSON.stringify(QuotationTestPriceArray));\n      } else {\n        //add               \n        let priceList = [];\n        this.state.selectedRecord[\"ntestcode\"] && this.state.selectedRecord[\"ntestcode\"].map(item => {\n          return priceList.push({\n            ntestcode: item.value\n          });\n        });\n        quotationtestPriceData[\"QuotationTest\"] = priceList;\n      }\n\n      if (quotationtestPriceData[\"QuotationTest\"].hasOwnProperty('esignpassword')) {\n        if (quotationtestPriceData[\"QuotationTest\"]['esignpassword'] === '') {\n          delete quotationtestPriceData[\"QuotationTest\"]['esigncomments'];\n          delete quotationtestPriceData[\"QuotationTest\"]['esignpassword'];\n          delete quotationtestPriceData[\"QuotationTest\"][\"agree\"];\n        }\n      } //console.log(\"update data:\", quotationtestPriceData);\n\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"QuotationTest\",\n        inputData: quotationtestPriceData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isClearSearch: this.props.Login.isClearSearch,\n        selectedId,\n        dataState\n      };\n      return inputParam;\n    };\n\n    this.onNumericInputOnChange = (event, primaryFieldKey) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (primaryFieldKey && event.target.name === \"nnoofsamples\") {\n        const index = selectedRecord.findIndex(item => item.nquotationtestcode === primaryFieldKey);\n\n        if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value)) {\n          selectedRecord[index][\"nnoofsamples\"] = event.target.value;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.DeleteQuotation = (methodUrl, selectedQuotation, operation, ncontrolCode) => {\n      const postParam = {\n        inputListName: \"QuotationList\",\n        selectedObject: \"SelectedQuotation\",\n        primaryKeyField: \"nquotationcode\",\n        primaryKeyValue: selectedQuotation.nquotationcode,\n        fetchUrl: \"quotation/getQuotation\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl,\n        postParam,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          quotation: selectedQuotation\n        },\n        operation,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_QUOTATION\",\n            operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.QuotationPreview = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName: \"IDS_VIEW\",\n          openModal: true,\n          operation: \"create\",\n          modalScreenSize: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo, nquotationtestcode) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"nclientcatcode\") {\n            // const selectedRecord = this.state.selectedRecord || {};\n            if (selectedRecord.nclientcatcode) {\n              if (parseInt(comboData.value) !== parseInt(selectedRecord.nclientcatcode.value)) {\n                // selectedRecord.nusercode={};\n                delete selectedRecord.nclientcode;\n                delete selectedRecord.sclientsiteaddress;\n              }\n            }\n\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sclientcatname\"] = comboData.item[\"sclientcatname\"];\n            this.props.getQuotationClientCategoryComboService({\n              inputData: {\n                userinfo: this.props.Login.userInfo,\n                sdisplayname: selectedRecord.nclientcatcode.label,\n                primarykey: selectedRecord.nclientcatcode.value\n              }\n            }, selectedRecord);\n          }\n\n          if (fieldName === \"nclientcode\") {\n            // const selectedRecord = this.state.selectedRecord || {};\n            if (selectedRecord.nclientcode) {\n              if (parseInt(comboData.value) !== parseInt(selectedRecord.nclientcode.value)) {\n                // selectedRecord.nusercode={};\n                delete selectedRecord.sclientsiteaddress;\n              }\n            }\n\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sclientname\"] = comboData.item[\"sclientname\"];\n            this.props.getQuotaionClientComboService({\n              inputData: {\n                userinfo: this.props.Login.userInfo,\n                sdisplayname: selectedRecord.nclientcode.label,\n                primarykey: selectedRecord.nclientcode.value\n              }\n            }, selectedRecord);\n          }\n\n          if (fieldName === \"nclientsitecode\") {\n            // const selectedRecord = this.state.selectedRecord || {};\n            if (selectedRecord.nclientsitecode) {\n              if (parseInt(comboData.value) !== parseInt(selectedRecord.nclientsitecode.value)) {\n                // selectedRecord.nusercode={};\n                delete selectedRecord.sclientsiteaddress;\n              }\n            }\n\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sclientsitename\"] = comboData.item[\"sclientsitename\"];\n            this.props.getQuotaionClientSiteComboService({\n              inputData: {\n                userinfo: this.props.Login.userInfo,\n                sdisplayname: selectedRecord.nclientsitecode.label,\n                primarykey: selectedRecord.nclientsitecode.value,\n                nclientcode: selectedRecord.nclientcode.value\n              }\n            }, selectedRecord);\n          }\n\n          if (fieldName === \"nproductcatcode\") {\n            //\n            // const selectedRecord = this.state.selectedRecord || {};\n            if (selectedRecord.nproductcatcode) {\n              if (parseInt(comboData.value) !== parseInt(selectedRecord.nproductcatcode.value)) {\n                // selectedRecord.nusercode={};\n                delete selectedRecord.nproductcode;\n              }\n            }\n\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sproductcatname\"] = comboData.item[\"sproductcatname\"];\n            this.props.getQuotaionProductCategoryComboService({\n              inputData: {\n                userinfo: this.props.Login.userInfo,\n                sdisplayname: selectedRecord.nproductcatcode.label,\n                primarykey: selectedRecord.nproductcatcode.value\n              }\n            }, selectedRecord);\n          }\n\n          break;\n\n        case 2:\n          // const selectedRecordfilter = this.state.selectedRecordfilter || {};\n          // selectedRecordfilter[fieldName] = comboData;\n          // this.setState({ selectedRecordfilter });\n          // break;\n          // const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 3:\n          selectedRecord[fieldName] = comboData;\n\n          if (selectedRecord[fieldName] == null) {\n            selectedRecord[fieldName] = [];\n          } else {\n            if (fieldName === \"ndiscountbandcode\") {\n              const VatAmount = this.state.selectedRecord.VatAmount === undefined ? 0.00 : this.state.selectedRecord.VatAmount;\n              selectedRecord[\"DiscountAmount\"] = parseFloat((this.props.Login.QuotationGrossAmount[0].ntotalgrossamount * (selectedRecord.ndiscountbandcode.item.namount / 100)).toFixed(2)); //        selectedRecord[\"TotalNetAmount\"]=this.props.Login.QuotationGrossAmount[0].ntotalgrossamount+(this.state.selectedRecord.DiscountAmount-VatAmount);\n\n              selectedRecord[\"TotalNetAmount\"] = parseFloat((this.props.Login.QuotationGrossAmount[0].ntotalgrossamount + VatAmount - this.state.selectedRecord.DiscountAmount).toFixed(2));\n              selectedRecord[\"ndiscountpercentage\"] = selectedRecord.ndiscountbandcode.item.namount;\n            } else if (fieldName === \"nvatbandcode\") {\n              selectedRecord[\"VatAmount\"] = parseFloat((this.props.Login.QuotationGrossAmount[0].ntotalgrossamount * (selectedRecord.nvatbandcode.item.namount / 100)).toFixed(2)); //        selectedRecord[\"TotalNetAmount\"]=this.props.Login.QuotationGrossAmount[0].ntotalgrossamount+(selectedRecord.DiscountAmount-this.state.selectedRecord.VatAmount);\n\n              selectedRecord[\"TotalNetAmount\"] = parseFloat((this.props.Login.QuotationGrossAmount[0].ntotalgrossamount + this.state.selectedRecord.VatAmount - selectedRecord.DiscountAmount).toFixed(2));\n              selectedRecord[\"nvatpercentage\"] = selectedRecord.nvatbandcode.item.namount;\n            }\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 4:\n          if (fieldName === \"nprojecttypecode\") {\n            if (selectedRecord.nprojecttypecode) {\n              if (parseInt(comboData.value) !== parseInt(selectedRecord.nprojecttypecode.value)) {\n                delete selectedRecord.nprojectmastercode;\n                delete selectedRecord.sprojecttitle;\n                delete selectedRecord.srfwdate;\n                delete selectedRecord.suserrolename;\n                delete selectedRecord.susername;\n              }\n            }\n\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sprojecttypename\"] = comboData.item[\"sprojecttypename\"];\n            this.props.getProjectTypeComboService({\n              inputData: {\n                userinfo: this.props.Login.userInfo,\n                sdisplayname: selectedRecord.nprojecttypecode.label,\n                primarykey: selectedRecord.nprojecttypecode.value\n              }\n            }, selectedRecord);\n          }\n\n          if (fieldName === \"nprojectmastercode\") {\n            if (selectedRecord.nprojectmastercode) {\n              if (parseInt(comboData.value) !== parseInt(selectedRecord.nprojectmastercode.value)) {\n                delete selectedRecord.sprojecttitle;\n                delete selectedRecord.srfwdate;\n                delete selectedRecord.suserrolename;\n                delete selectedRecord.susername;\n              }\n            }\n\n            selectedRecord[fieldName] = comboData;\n            selectedRecord[\"sprojectcode\"] = comboData.item[\"sprojectcode\"];\n            this.props.getProjectCodeComboService({\n              inputData: {\n                userinfo: this.props.Login.userInfo,\n                sdisplayname: selectedRecord.nprojectmastercode.label,\n                primarykey: selectedRecord.nprojectmastercode.value\n              }\n            }, selectedRecord);\n          }\n\n          break;\n\n        case 5:\n          let selectedRecordindex = selectedRecord.findIndex(item => item.nquotationtestcode === nquotationtestcode ? item : \"\");\n          selectedRecord[fieldName] = comboData;\n\n          if (selectedRecord[fieldName] == null) {\n            selectedRecord[selectedRecordindex][fieldName] = [];\n          } else {\n            //  selectedRecord[fieldName] = comboData;\n            //  selectedRecord[\"namount\"]=comboData.item.namount;\n            let str = selectedRecord[selectedRecordindex];\n            let discountamount = parseFloat((str.ncost * str.nnoofsamples * (comboData.item.namount / 100)).toFixed(2));\n            let count = str.ncost * str.nnoofsamples - discountamount;\n            selectedRecord[selectedRecordindex] = { ...str,\n              ntotalamount: parseFloat(count.toFixed(2)),\n              namount: comboData.item.namount,\n              ndiscountbandcode: comboData.item.ndiscountbandcode\n            };\n            selectedRecord[selectedRecordindex][\"ndiscountbandcode\"] = {\n              label: comboData.item.sdiscountbandname,\n              value: comboData.item.ndiscountbandcode\n            }; //    selectedRecord[selectedRecordindex][\"ndiscountbandcode\"]=  {...selectedRecord[selectedRecordindex],\n            //     label :comboData.item.sdiscountbandname,\n            //     value:comboData.item.ndiscountbandcode\n            // }\n          }\n\n          this.setState(selectedRecord);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onNumericInputChange = (value, name, primaryFieldKey) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const index = selectedRecord.findIndex(item => item.nquotationtestcode === primaryFieldKey);\n      selectedRecord[index][name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = (event, primaryFieldKey) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.name === 'snotes' || event.target.name === 'stestplatform' || event.target.name === 'squotationleadtime') {\n        const index = selectedRecord.findIndex(item => item.nquotationtestcode === primaryFieldKey);\n        selectedRecord[index][event.target.name] = event.target.value;\n      } else {\n        if (primaryFieldKey && (event.target.name === \"ncost\" || event.target.name === \"nnoofsamples\" || event.target.name === \"ntotalamount\")) {\n          const index = selectedRecord.findIndex(item => item.nquotationtestcode === primaryFieldKey); // if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value)){\n\n          if (/^-?\\d*?$/.test(event.target.value)) {\n            selectedRecord[index][event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onnetAmountEvent = nquotationtestcode => {\n      let selectedRecord = this.state.selectedRecord;\n      let selectedRecordindex = selectedRecord.findIndex(item => item.nquotationtestcode === nquotationtestcode ? item : \"\");\n      let str = selectedRecord[selectedRecordindex]; //  let count= (str.ncost * str.nnoofsamples)-str.namount; \n\n      let discountamount = parseFloat((str.ncost * str.nnoofsamples * (str.namount / 100)).toFixed(2));\n      let count = str.ncost * str.nnoofsamples - discountamount; // selectedRecord[selectedRecordindex]={...str,ntotalamount:count}\n\n      selectedRecord[selectedRecordindex] = { ...str,\n        ntotalamount: parseFloat(count.toFixed(2))\n      };\n      this.setState(selectedRecord);\n    };\n\n    this.approveQuotation = (methodUrl, selectedQuotation, operation, ncontrolCode) => {\n      if (selectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\n        const postParam = {\n          inputListName: \"Quotation\",\n          selectedObject: \"SelectedQuotation\",\n          primaryKeyField: \"nquotationcode\",\n          primaryKeyValue: selectedQuotation.nquotationcode,\n          fetchUrl: \"quotation/getQuotation\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl,\n          postParam,\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            \"quotation\": selectedQuotation\n          },\n          operation,\n          isClearSearch: this.props.Login.isClearSearch\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_QUOTATION\",\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else if (selectedQuotation.ntransactionstatus === transactionStatus.APPROVED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ALREADYAPPROVED\"\n        }));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.historydataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.historydataState),\n        historydataState: event.historydataState\n      });\n    };\n\n    this.ConfirmDelete = (selectedQuotation, operation, deleteId, screenName) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteQuotation(screenName, selectedQuotation, operation, deleteId));\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\"; //    if (Object.values(this.props.Login.masterData.SelectedQuotation).length && this.props.Login.masterData.SelectedQuotation !== undefined) {\n\n      if (this.props.Login.masterData.SelectedQuotation !== undefined) {\n        let inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          classUrl: \"quotation\",\n          methodUrl: \"Quotation\"\n        };\n        this.props.getreloadQuotation(inputParam);\n      } // else {\n      //   toast.warn(\n      //     this.props.intl.formatMessage({\n      //       id: \"IDS_PROJECTTYPENOTAVAILABLE\",\n      //     })\n      //   );\n      // }\n\n    };\n\n    this.DeleteQuotationTest = deleteParam => {\n      deleteParam.selectedRecord[\"nclientcode\"] = this.props.Login.masterData.SelectedQuotation.nclientcode;\n      deleteParam.selectedRecord[\"nprojectmastercode\"] = this.props.Login.masterData.SelectedQuotation.nprojectmastercode;\n      const postParam = {\n        inputListName: \"QuotationList\",\n        selectedObject: \"SelectedQuotation\",\n        primaryKeyField: \"nquotationcode\",\n        primaryKeyValue: deleteParam.selectedRecord.nquotationtestcode,\n        fetchUrl: \"quotation/getQuotationTest\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        classUrl: \"quotation\",\n        methodUrl: \"QuotationPrice\",\n        postParam,\n        inputData: {\n          \"QuotationTestPrice\": deleteParam.selectedRecord,\n          //.dataItem,\n          //      \"npriceversioncode\":this.props.Login.masterData.SelectedTestPriceVersion.npriceversioncode,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: \"delete\" //  priceDataState:this.state.priceDataState\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: \"IDS_TESTPRICE\"\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.state.selectedRecord; //    let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = '';\n          selectedRecord['esigncomments'] = '';\n          selectedRecord['esignreason'] = '';\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      selectedQuotation: undefined,\n      controlMap: new Map(),\n      Instrument: [],\n      dataState: _dataState,\n      dataResult: [],\n      data: []\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"squotationno\", \"sclientcatname\", \"sclientname\", \"sclientsiteaddress\", \"soemname\", \"sproductcatname\", \"sproductname\", \"squotationdate\", \"sdescription\", \"sdeviationremarks\", \"sversionstatus\"];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  onSaveQuotationTest(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.Login.userInfo; // inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\n    //  inputData[\"Quotation\"] = {};\n\n    let testArray = [];\n    testArray = this.state.selectedRecord.ntestcode.map(item => {\n      let QuotationData = {};\n      QuotationData[\"ntestcode\"] = item.value;\n      QuotationData[\"nquotationcode\"] = this.props.Login.masterData.SelectedQuotation.nquotationcode;\n      QuotationData[\"nclientcode\"] = this.props.Login.masterData.SelectedQuotation.nclientcode;\n      QuotationData[\"nprojectmastercode\"] = this.props.Login.masterData.SelectedQuotation.nprojectmastercode;\n      return QuotationData;\n    });\n    inputData['QuotationTest'] = testArray;\n    const inputParam = {\n      classUrl: \"quotation\",\n      methodUrl: \"QuotationTest\",\n      inputData: inputData,\n      operation: this.props.Login.operation,\n      saveType,\n      formRef,\n      searchRef: this.searchRef,\n      isClearSearch: this.props.Login.isClearSearch,\n      isChild: true\n    };\n    return inputParam;\n  }\n\n  QuotationformatInputDate(date) {\n    let formattedDate = \"\";\n    formattedDate = date.getFullYear() + \"-\" + (\"00\" + (date.getMonth() + 1)).slice(-2) + \"-\" + (\"00\" + date.getDate()).slice(-2) + \"T00:00:00Z\";\n    return formattedDate;\n  }\n\n  onSaveGrossQuotation(saveType, formRef) {\n    let quotationData = {};\n    quotationData[\"userinfo\"] = this.props.Login.userInfo;\n    quotationData[\"GrossQuotation\"] = {\n      nquotationcode: this.props.Login.masterData.SelectedQuotation.nquotationcode,\n      nsitecode: this.props.Login.userInfo.nmastersitecode,\n      ndiscountamount: this.state.selectedRecord.DiscountAmount,\n      nvatamount: this.state.selectedRecord.VatAmount,\n      ntotalnetamount: this.state.selectedRecord.TotalNetAmount,\n      ntotalgrossamount: this.props.Login.QuotationGrossAmount[0].ntotalgrossamount,\n      nclientcode: this.props.Login.masterData.SelectedQuotation.nclientcode,\n      nprojectmastercode: this.props.Login.masterData.SelectedQuotation.nprojectmastercode\n    };\n    quotationData[\"GrossQuotation\"][\"ndiscountbandcode\"] = this.state.selectedRecord[\"ndiscountbandcode\"] ? this.state.selectedRecord[\"ndiscountbandcode\"].value : transactionStatus.NA;\n    quotationData[\"GrossQuotation\"][\"nvatbandcode\"] = this.state.selectedRecord[\"nvatbandcode\"] ? this.state.selectedRecord[\"nvatbandcode\"].value : transactionStatus.NA; // const postParam = {\n    //   inputListName: \"Quotation\",\n    //   selectedObject: \"SelectedQuotation\",\n    //   primaryKeyField: \"nquotationcode\",\n    //   primaryKeyValue: this.props.Login.masterData.SelectedQuotation.nquotationcode,\n    //   fetchUrl: \"quotation/getQuotation\",\n    //   fecthInputObject: { userinfo: this.props.Login.userInfo },\n    // };\n\n    const inputParam = {\n      classUrl: \"quotation\",\n      methodUrl: \"GrossQuotation\",\n      // postParam,\n      inputData: quotationData,\n      searchRef: this.searchRef,\n      operation: this.props.Login.operation,\n      saveType,\n      formRef,\n      isClearSearch: this.props.Login.isClearSearch,\n      isChild: true\n    };\n    return inputParam;\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let versionStatusCSS = \"outline-secondary\";\n    let activeIconCSS = \"fa fa-check\";\n\n    if (this.props.Login.masterData.SelectedQuotation && this.props.Login.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.APPROVED) {\n      versionStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.SelectedQuotation && this.props.Login.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\n      activeIconCSS = \"\";\n    }\n\n    if (this.props.Login.openModal) {\n      this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation);\n    }\n\n    const {\n      userInfo\n    } = this.props.Login;\n    const addId = this.state.controlMap.has(\"AddQuotation\") && this.state.controlMap.get(\"AddQuotation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditQuotation\") && this.state.controlMap.get(\"EditQuotation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteQuotation\") && this.state.controlMap.get(\"DeleteQuotation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveQuotation\") && this.state.controlMap.get(\"ApproveQuotation\").ncontrolcode;\n    const addQuotationTestId = this.state.controlMap.has(\"AddQuotationTest\") && this.state.controlMap.get(\"AddQuotationTest\").ncontrolcode;\n    const updateQuotationTestId = this.state.controlMap.has(\"EditQuotationTest\") && this.state.controlMap.get(\"EditQuotationTest\").ncontrolcode; // const grossQuotationeId = this.state.controlMap.has(\"CalculatePricing\") && this.state.controlMap.get(\"CalculatePricing\").ncontrolcode;\n\n    const viewQuotationId = this.state.controlMap.has(\"ViewQuotation\") && this.state.controlMap.get(\"ViewQuotation\").ncontrolcode;\n    const editTestPriceParam = {\n      screenName: \"IDS_PRICE\",\n      \"operation\": \"update\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: updateQuotationTestId\n    };\n    const selectedQuotation = this.props.Login.masterData.SelectedQuotation;\n    const filterParam = {\n      inputListName: \"Quotation\",\n      selectedObject: \"SelectedQuotation\",\n      primaryKeyField: \"nquotationcode\",\n      fetchUrl: \"quotation/getActiveQuotationById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_QUOTATION\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Quotation,\n      getMasterDetail: quotationData => this.props.getQuotation(quotationData, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: selectedQuotation,\n      primaryKeyField: \"nquotationcode\",\n      mainField: \"squotationno\",\n      firstField: \"sclientname\",\n      secondField: \"sversionstatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData //     openModal={() => this.props.addQuotation(\"create\", selectedQuotation, userInfo, addId, this.state.ProjectMasterList)}\n      ,\n      openModal: () => this.props.addQuotation(\"create\", userInfo, addId, selectedQuotation),\n      isMultiSelecct: false,\n      hidePaging: false,\n      isClearSearch: this.props.Login.isClearSearch,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter // onFilterSubmit={this.onFilterSubmit}    \n      ,\n      showFilterIcon: false,\n      showFilter: this.props.Login.showFilter\n      /*         filterComponent={[\r\n                 {\r\n                   \"IDS_PROJECTMASTERFILTER\":\r\n                     <ProjectMasterFilter\r\n                       filterProjectType={this.state.ProjectMasterList || []}\r\n                       nfilterProjectType={this.props.Login.masterData.SelectedProjectType || {}}\r\n                       onComboChange={this.onComboChange}\r\n                       selectedRecord={this.state.selectedRecordfilter || {}}\r\n                     />\r\n                 }\r\n               ]} */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 13\n      }\n    }, selectedQuotation ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 23\n      }\n    }, selectedQuotation.sclientname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${versionStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 29\n      }\n    }, selectedQuotation.sversionstatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      name: \"edittestname\",\n      hidden: this.state.userRoleControlRights.indexOf(viewQuotationId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEW\"\n      }),\n      onClick: () => this.QuotationPreview(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 31\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      name: \"edittestname\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.props.addQuotation(\"update\", userInfo, editId, selectedQuotation),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 31\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"deletetestname\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) //   data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(selectedQuotation, \"delete\", deleteId, \"Quotation\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 31\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"approveQuotation\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }) //data-for=\"tooltip_list_wrap\"\n      ,\n      onClick: () => this.approveQuotation(\"Quotation\", selectedQuotation, \"approve\", approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 31\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 760,\n        columnNumber: 39\n      }\n    }, /*#__PURE__*/React.createElement(QuotationTab, {\n      primaryKeyField: \"nquotationtestcode\" // data={this.props.Login.masterData.ProjectMember}\n      ,\n      data: this.state.data // dataResult={this.props.Login.masterData.ProjectMember}\n      ,\n      dataResult: this.state.dataResult,\n      masterData: this.props.Login.masterData,\n      screenName: this.props.Login.screenName,\n      operation: this.props.Login.operation,\n      openChildModal: this.props.Login.openChildModal,\n      crudMaster: this.props.crudMaster,\n      errorCode: this.props.Login.errorCode,\n      validateEsignCredential: this.props.validateEsignCredential,\n      loadEsign: this.props.Login.loadEsign,\n      showAccordian: this.state.showAccordian,\n      selectedRecord: this.state.selectedRecord || {} // dataState={{skip: 0, take: 10}}\n      // dataState={this.props.Login.dataState}\n      ,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange // extractedColumnList={fieldsForGrid} --\n      ,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo //    getProjectmasterAddMemberService={(this.props.Login.screenName,this.props.Login.operation,this.props.getProjectmasterAddMemberService,this.props.Login.userInfo,this.props.Login.ncontrolCode)}\n      ,\n      getProjectmasterAddMemberService: this.props.getProjectmasterAddMemberService // --   fetchRecord={this.props.getPricingEditService}\n      //--       editParam={{...editTestPriceParam, \"updateType\":\"Single\", priceDataState:this.state.priceDataState}}\n      //  deleteParam={{operation:\"delete\"}}\n      // reloadData={this.reloadData}\n      // --      addRecord = {() => this.openModal(addId)}\n      ,\n      pageable: true,\n      onTabChange: this.onTabChange,\n      updateStore: this.props.updateStore,\n      scrollable: 'scrollable' // gridHeight = {'600px'}\n      ,\n      isActionRequired: true,\n      isToolBarRequired: false,\n      selectedId: this.props.Login.selectedId,\n      viewAttachment: this.props.viewAttachment,\n      MembersList: this.props.Login.MembersList,\n      onComboChange: this.onComboChange // File\n      ,\n      addProjectMasterFile: this.props.addProjectMasterFile,\n      esignRights: this.props.Login.userRoleControlRights // ntransactionstatus={selectedProjectMaster.ntransactionstatus}  ---\n      //  selectedRecord={this.props.Login.selectedRecord}\n      ,\n      onDropProjectMasterFile: this.onDropProjectMasterFile,\n      onInputOnChange: this.onInputOnChange,\n      screenData: this.props.Login.screenData,\n      deleteAttachment: this.deleteAttachment,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      linkMaster: this.props.Login.linkMaster,\n      addQuotationTestId: this.props.Login.addQuotationTestId,\n      updateQuotationTestId: this.props.Login.updateQuotationTestId,\n      addId: this.props.Login.addId,\n      editParam: { ...editTestPriceParam\n      } // fetchRecord={this.props.getQuotationPricingEditService}\n      ,\n      deleteRecord: this.DeleteQuotationTest,\n      getQuotationAddTestService: this.props.getQuotationAddTestService,\n      getQuotationPricingEditService: this.props.getQuotationPricingEditService,\n      QuotationTestList: this.props.Login.QuotationTestList,\n      onSaveClick: this.onSaveClick,\n      onnetAmountEvent: this.onnetAmountEvent,\n      onNumericInputChange: this.onNumericInputChange,\n      DiscountBand: this.props.Login.DiscountBand,\n      VATBand: this.props.Login.VATBand,\n      modalScreenSize: this.props.Login.modalScreenSize,\n      QuotationGrossAmount: this.props.Login.QuotationGrossAmount,\n      QuotationHistorydata: this.props.Login.masterData.QuotationHistory,\n      QuotationHistorydataResult: this.props.Login.masterData.QuotationHistory,\n      historydataState: this.state.historydataState,\n      historydataStateChange: this.historydataStateChange,\n      selectedQuotation: selectedQuotation,\n      GrossQuotation: this.props.GrossQuotation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 761,\n        columnNumber: 41\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 846,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"horizontal-line\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 29\n      }\n    })))))) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.modalScreenSize === true ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      hideSave: this.props.Login.screenName === \"IDS_VIEW\" ? true : false,\n      operation: this.props.Login.screenName === \"IDS_CALCULATEPRICING\" || this.props.Login.screenName === \"IDS_VIEW\" ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {} //  mandatoryFields={this.props.Login.screenName !==\"IDS_PRICE\" ? this.mandatoryFields : []}\n      ,\n      mandatoryFields: this.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1041,\n          columnNumber: 13\n        }\n      }) : this.props.Login.screenName === \"IDS_QUOTATION\" ? /*#__PURE__*/React.createElement(AddQuotation, {\n        userInfo: this.props.Login.userInfo,\n        genericlabel: this.props.Login.genericLabel,\n        selectedRecord: this.state.selectedRecord || {} // selectedclientcode={this.state.selectedRecord.nclientcode || {}}\n        ,\n        sclientsiteaddress: this.props.Login.sclientsiteaddress,\n        SelectedClient: this.props.Login.SelectedClient,\n        ClientCategory: this.props.Login.ClientCategory,\n        Client: this.props.Login.Client,\n        ClientSite: this.props.Login.ClientSite,\n        ClientContact: this.props.Login.ClientContact,\n        OEM: this.props.Login.OEM,\n        ProjectCode: this.props.Login.ProjectCode,\n        ProjectType: this.props.Login.ProjectType,\n        ProjectMaster: this.props.Login.ProjectMaster,\n        QuotationType: this.props.Login.QuotationType,\n        Product: this.props.Login.Product,\n        ProductCategory: this.props.Login.ProductCategory,\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //     onNumericInputChange={this.onNumericInputChange}\n        ,\n        handleDateChange: this.handleDateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 16\n        }\n      }) : this.props.Login.screenName === \"IDS_VIEW\" ? /*#__PURE__*/React.createElement(AddQuotationPreview, {\n        selectedQuotation: this.props.Login.masterData.SelectedQuotation,\n        userInfo: this.props.Login.userInfo,\n        genericlabel: this.props.Login.genericLabel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1075,\n          columnNumber: 16\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1026,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord, operation) {\n    let mandatoryFields = [];\n\n    if (screenName === \"IDS_QUOTATION\") {\n      mandatoryFields = [{\n        \"idsName\": \"IDS_CLIENTCATEGORY\",\n        \"dataField\": \"nclientcatcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CLIENT\",\n        \"dataField\": \"nclientcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CLIENTSITE\",\n        \"dataField\": \"nclientsitecode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTACTNAME\",\n        \"dataField\": \"nclientcontactcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_OEM\",\n        \"dataField\": \"noemcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, //      { \"idsName\": \"IDS_INVOICEADDRESS\", \"dataField\": \"sinvoiceaddress\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\n      //      { \"idsName\": \"IDS_QUOTATIONTYPE\", \"dataField\": \"nquotationtypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      //      { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      //      { \"idsName\": \"IDS_PROJECTCODE\", \"dataField\": \"nprojectmastercode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      //      { \"idsName\": \"IDS_PROJECTTITLE\", \"dataField\": \"sprojecttitle\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\n      //      { \"idsName\": \"IDS_RFWDATE\", \"dataField\": \"srfwdate\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"textbox\" },\n      //     { \"idsName\": \"IDS_ROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\n      //     { \"idsName\": \"IDS_USER\", \"dataField\": \"susername\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\n      {\n        \"idsName\": this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] || \"\",\n        \"dataField\": \"nproductcatcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] || \"\",\n        \"dataField\": \"nproductcode\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_QUOTATIONDATE\",\n        \"dataField\": \"dquotationdate\",\n        \"width\": \"200px\",\n        \"mandatory\": true,\n        \"mandatoryLabel\": \"IDS_CHOOSE\",\n        \"controlType\": \"selectbox\"\n      }]; // mandatoryFields.forEach(item => item.mandatory === true && mandatoryFields.push(item));\n\n      return mandatoryFields;\n    } else {\n      return [];\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      selectedRecord,\n      userRoleControlRights,\n      controlMap,\n      filterData,\n      dataResult\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      this.setState({\n        selectedRecord\n      });\n    } //   if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n    //     userRoleControlRights = [];\n    //     if (this.props.Login.userRoleControlRights) {\n    //       this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode\n    //       ] &&\n    //         Object.values(\n    //           this.props.Login.userRoleControlRights[\n    //           this.props.Login.userInfo.nformcode\n    //           ]\n    //         ).map((item) => userRoleControlRights.push(item.ncontrolcode));\n    //     }\n    //     controlMap = getControlMap(\n    //       this.props.Login.userRoleControlRights,\n    //       this.props.Login.userInfo.nformcode\n    //     );\n    //     // this.setState({ controlMap, userRoleControlRights });\n    //     this.setState({\n    //       userRoleControlRights, controlMap, data: this.props.Login.masterData.QuotationTest,\n    //       dataResult: process(this.props.Login.masterData.QuotationTest, this.state.dataState)\n    //   });\n    //   }\n    //   else {\n    //     let {dataState}=this.state;\n    //         if(this.state.dataResult !== undefined){ \n    //             if(this.state.dataResult.data){\n    //                 if(this.state.dataResult.data.length ===1){\n    //                     let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\n    //                     this.state.dataState.skip\n    //                     dataState={skip:skipcount,take:this.state.dataState.take}\n    //                 }\n    //               } \n    //               this.setState({\n    //                 dataResult: process( this.props.Login.masterData || [], dataState),\n    //                 dataState\n    //           });\n    //     }\n    // }\n\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode); // this.setState({ controlMap, userRoleControlRights });\n\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData.QuotationTest,\n          dataResult: process(this.props.Login.masterData.QuotationTest || [], this.state.dataState) // QuotationHistorydataResult: process(this.props.Login.masterData.QuotationHistory || [], this.state.historydataState)\n          // QuotationHistorydata: this.props.Login.masterData.QuotationHistory, QuotationHistorydataResult: process(this.props.Login.masterData.QuotationHistory || [], this.state.dataState)\n\n        });\n      } else {\n        let {\n          dataState\n        } = this.state; // let {historydataState}=this.state;\n\n        if (this.state.dataResult !== undefined) {\n          if (this.state.dataResult.data) {\n            if (this.state.dataResult.data.length === 1) {\n              let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n              dataState = {\n                skip: skipcount,\n                take: this.state.dataState.take\n              };\n            }\n          }\n\n          this.setState({\n            data: this.props.Login.masterData.QuotationTest,\n            dataResult: process(this.props.Login.masterData.QuotationTest || [], dataState),\n            dataState // QuotationHistorydata: this.props.Login.masterData.QuotationHistory, QuotationHistorydataResult: process(this.props.Login.masterData.QuotationHistory || [], this.state.dataState)\n\n          });\n        } //       if(this.state.QuotationHistorydataResult !== undefined){ \n        //         if(this.state.QuotationHistorydataResult.data){\n        //             if(this.state.QuotationHistorydataResult.data.length ===1){\n        //                 let skipcount=this.state.historydataState.skip>0?(this.state.historydataState.skip-this.state.historydataState.take):\n        //                 this.state.historydataState.skip\n        //                 historydataState={skip:skipcount,take:this.state.historydataState.take}\n        //             }\n        //           } \n        //           this.setState({\n        //             QuotationHistorydata: this.props.Login.masterData.QuotationHistory,\n        //             QuotationHistorydataResult: process( this.props.Login.masterData.QuotationHistory || [], historydataState),\n        //             historydataState \n        //             // QuotationHistorydata: this.props.Login.masterData.QuotationHistory, QuotationHistorydataResult: process(this.props.Login.masterData.QuotationHistory || [], this.state.dataState)\n        //       });\n        // }\n\n      } // dataResult = this.props.Login.masterData.QuotationTest;\n      // this.setState({\n      //   selectedRecord,dataResult\n      // });\n      // this.setState({ filterData });\n\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  filterColumnData,\n  updateStore,\n  validateEsignCredential,\n  getQuotation,\n  getProjectTypeComboService,\n  viewAttachment,\n  addQuotation,\n  getreloadQuotation,\n  getQuotationAddTestService,\n  getQuotationPricingEditService,\n  GrossQuotation,\n  getQuotationClientCategoryComboService,\n  getQuotaionClientComboService,\n  getProjectCodeComboService,\n  getQuotaionProductCategoryComboService,\n  getQuotaionClientSiteComboService\n})(injectIntl(Quotation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/quotation/Quotation.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","toast","FontAwesomeIcon","faTrashAlt","faPencilAlt","faThumbsUp","faPlus","faEye","injectIntl","FormattedMessage","callService","crudMaster","validateEsignCredential","updateStore","getQuotation","filterColumnData","getProjectTypeComboService","viewAttachment","addQuotation","getreloadQuotation","getQuotationAddTestService","getQuotationPricingEditService","GrossQuotation","getQuotationClientCategoryComboService","getQuotaionClientComboService","getProjectCodeComboService","getQuotaionProductCategoryComboService","getQuotaionClientSiteComboService","ListMaster","transactionStatus","AddQuotation","DEFAULT_RETURN","SlideOutModal","Esign","showEsign","getControlMap","formatInputDate","ReadOnlyText","ContentPanel","process","ConfirmMessage","intl","QuotationTab","AddQuotationPreview","mapStateToProps","state","Login","Quotation","constructor","props","handleDateChange","dateName","dateValue","selectedRecord","setState","onInputOnChange","event","optional","target","type","name","checked","value","onSaveClick","saveType","formRef","quotationData","inputParam","slideOutModal","userInfo","postParam","inputListName","selectedObject","primaryKeyField","operation","screenName","masterData","SelectedQuotation","nquotationcode","nsitecode","nmastersitecode","sprojecttitle","undefined","sclientsiteaddress","sinvoiceaddress","sdescription","ntransactionstatus","DRAFT","sdeviationremarks","NA","ACTIVE","QuotationformatInputDate","userinfo","ntimezonecode","onSaveQuotationTest","onSaveQuotationTestPrice","onSaveGrossQuotation","classUrl","methodUrl","inputData","searchRef","isClearSearch","userRoleControlRights","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","quotationtestPriceData","nprojectmastercode","nclientcode","dataState","selectedId","QuotationTestPriceArray","forEach","item","index","ntotalamount","namount","ncost","nnoofsamples","nquotationtestcode","ntestcode","ntotalgrosstamount","stestsynonym","ndiscountbandcode","stestplatform","snotes","nmethodcode","squotationleadtime","JSON","parse","stringify","priceList","map","push","hasOwnProperty","onNumericInputOnChange","primaryFieldKey","findIndex","test","validateEsign","sreason","password","DeleteQuotation","selectedQuotation","primaryKeyValue","fetchUrl","fecthInputObject","quotation","openModal","QuotationPreview","modalScreenSize","onComboChange","comboData","fieldName","caseNo","nclientcatcode","parseInt","sdisplayname","label","primarykey","nclientsitecode","nproductcatcode","nproductcode","VatAmount","parseFloat","QuotationGrossAmount","ntotalgrossamount","toFixed","DiscountAmount","nvatbandcode","nprojecttypecode","srfwdate","suserrolename","susername","selectedRecordindex","str","discountamount","count","sdiscountbandname","onNumericInputChange","onnetAmountEvent","approveQuotation","APPROVED","warn","formatMessage","id","onTabChange","tabProps","dataStateChange","dataResult","historydataStateChange","historydataState","ConfirmDelete","deleteId","confirmMessage","confirm","reloadData","current","DeleteQuotationTest","deleteParam","closeModal","openFilter","showFilter","closeFilter","skip","take","settings","error","controlMap","Map","Instrument","createRef","searchFieldList","testArray","QuotationData","isChild","date","formattedDate","getFullYear","getMonth","slice","getDate","ndiscountamount","nvatamount","ntotalnetamount","TotalNetAmount","getDerivedStateFromProps","masterStatus","errorCode","render","versionStatusCSS","activeIconCSS","mandatoryFields","findMandatoryFields","addId","has","get","ncontrolcode","editId","approveId","addQuotationTestId","updateQuotationTestId","viewQuotationId","editTestPriceParam","filterParam","searchedData","sclientname","sversionstatus","indexOf","openChildModal","showAccordian","getProjectmasterAddMemberService","MembersList","addProjectMasterFile","onDropProjectMasterFile","deleteAttachment","linkMaster","QuotationTestList","DiscountBand","VATBand","QuotationHistory","genericLabel","SelectedClient","ClientCategory","Client","ClientSite","ClientContact","OEM","ProjectCode","ProjectType","ProjectMaster","QuotationType","Product","ProductCategory","slanguagetypecode","componentDidUpdate","previousProps","filterData","Object","values","QuotationTest","length","skipcount"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrashAlt, faPencilAlt, faThumbsUp,faPlus,faEye } from '@fortawesome/free-solid-svg-icons';\r\nimport { ReactComponent as Quotationdiscount } from '../../assets/image/quotationdiscount.svg';\r\nimport { injectIntl,FormattedMessage } from \"react-intl\";\r\nimport {\r\n  callService, crudMaster, validateEsignCredential, updateStore, getQuotation, filterColumnData,getProjectTypeComboService,\r\n  viewAttachment, addQuotation, getreloadQuotation, getQuotationAddTestService, getQuotationPricingEditService, GrossQuotation,\r\n  getQuotationClientCategoryComboService,getQuotaionClientComboService,getProjectCodeComboService ,getQuotaionProductCategoryComboService,getQuotaionClientSiteComboService \r\n} from \"../../actions\";\r\n\r\nimport ListMaster from \"../../components/list-master/list-master.component\";\r\nimport { transactionStatus } from \"../../components/Enumeration\";\r\nimport AddQuotation from \"../../pages/quotation/AddQuotation\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\r\n\r\nimport Esign from \"../audittrail/Esign\";\r\nimport { showEsign, getControlMap, formatInputDate }\r\n  from \"../../components/CommonScript\";\r\nimport { ReadOnlyText, ContentPanel } from \"../../components/App.styles\";\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\n// import ProjectMasterFilter from './ProjectMasterFilter';\r\nimport { intl } from \"../../components/App\";\r\n// import DataGrid from '../../components/data-grid/data-grid.component';\r\nimport QuotationTab from \"./QuotationTab\";\r\nimport AddQuotationPreview from \"../../pages/quotation/AddQuotationPreview\";\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { Login: state.Login };\r\n};\r\n\r\nclass Quotation extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const dataState = {\r\n      skip: 0,\r\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n  };\r\n\r\n\r\n  \r\n  this.state = {\r\n      selectedRecord: {},\r\n      error: \"\",\r\n      userRoleControlRights: [],\r\n      selectedQuotation: undefined,\r\n      controlMap: new Map(),\r\n      Instrument: [],\r\n      dataState: dataState,\r\n      dataResult: [], data: []\r\n\r\n    };\r\n    this.searchRef = React.createRef();\r\n    this.searchFieldList = [\"squotationno\",\"sclientcatname\", \"sclientname\", \"sclientsiteaddress\", \"soemname\",\"sproductcatname\",\"sproductname\",\"squotationdate\",\"sdescription\",\"sdeviationremarks\",\"sversionstatus\"]\r\n    this.confirmMessage = new ConfirmMessage();\r\n\r\n  }\r\n\r\n  handleDateChange = (dateName, dateValue) => {\r\n    const { selectedRecord } = this.state;\r\n    selectedRecord[dateName] = dateValue;\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n\r\n  onInputOnChange = (event, optional) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    if (event.target.type === \"checkbox\") {\r\n      selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n    } else if (event.target.type === 'radio') {\r\n      selectedRecord[event.target.name] = optional;\r\n    } else {\r\n      selectedRecord[event.target.name] = event.target.value;\r\n    }\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n\r\n  onSaveClick = (saveType, formRef) => {\r\n\r\n    let quotationData = [];\r\n    let inputParam = {};\r\n    let slideOutModal;\r\n    quotationData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n    let postParam = {\r\n      inputListName: \"Quotation\",\r\n      selectedObject: \"SelectedQuotation\",\r\n      primaryKeyField: \"nquotationcode\",\r\n    };\r\n\r\n    if ((this.props.Login.operation === \"update\") && (this.props.Login.screenName === \"IDS_QUOTATION\")) {\r\n\r\n      postParam[\"primaryKeyValue\"] =\r\n        this.props.Login.masterData.SelectedQuotation.nquotationcode;\r\n\r\n      quotationData[\"quotation\"] = {\r\n        nquotationcode: this.props.Login.masterData.SelectedQuotation.nquotationcode,\r\n        nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n        sprojecttitle: this.state.selectedRecord.sprojecttitle === undefined ? \"\" : this.state.selectedRecord.sprojecttitle, \r\n        sclientsiteaddress: this.state.selectedRecord.sclientsiteaddress === undefined ? \"\" : this.state.selectedRecord.sclientsiteaddress, \r\n        sinvoiceaddress: this.state.selectedRecord.sinvoiceaddress === undefined ? \"\" : this.state.selectedRecord.sinvoiceaddress, \r\n        sdescription: this.state.selectedRecord.sdescription === undefined ? \"\" : this.state.selectedRecord.sdescription, \r\n        ntransactionstatus: transactionStatus.DRAFT,\r\n        sdeviationremarks: this.state.selectedRecord.sdeviationremarks === undefined ? \"\" : this.state.selectedRecord.sdeviationremarks,\r\n\r\n        // soem: this.state.selectedRecord.soem === undefined ? \"\" : this.state.selectedRecord.soem,\r\n        // squotationleadtime: this.state.selectedRecord.squotationleadtime === undefined ? \"\" : this.state.selectedRecord.squotationleadtime\r\n\r\n      };\r\n\r\n    } else if ((this.props.Login.operation === \"create\") && (this.props.Login.screenName === \"IDS_QUOTATION\")) {\r\n\r\n      quotationData[\"quotation\"] = {  \r\n\r\n        nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n        sprojecttitle: this.state.selectedRecord.sprojecttitle === undefined ? \"\" : this.state.selectedRecord.sprojecttitle, \r\n        sclientsiteaddress: this.state.selectedRecord.sclientsiteaddress === undefined ? \"\" : this.state.selectedRecord.sclientsiteaddress, \r\n        sinvoiceaddress: this.state.selectedRecord.sinvoiceaddress === undefined ? \"\" : this.state.selectedRecord.sinvoiceaddress, \r\n        sdescription: this.state.selectedRecord.sdescription === undefined ? \"\" : this.state.selectedRecord.sdescription, \r\n        ntransactionstatus: transactionStatus.DRAFT,\r\n        sdeviationremarks: this.state.selectedRecord.sdeviationremarks === undefined ? \"\" : this.state.selectedRecord.sdeviationremarks,\r\n\r\n        // soem: this.state.selectedRecord.soem === undefined ? \"\" : this.state.selectedRecord.soem,\r\n        // squotationleadtime: this.state.selectedRecord.squotationleadtime === undefined ? \"\" : this.state.selectedRecord.squotationleadtime\r\n\r\n      };\r\n\r\n     \r\n    }\r\n\r\n    if (((this.props.Login.operation === \"create\") || (this.props.Login.operation === \"update\")) && (this.props.Login.screenName === \"IDS_QUOTATION\")) {\r\n\r\n      quotationData[\"quotation\"][\"nclientcatcode\"] = this.state.selectedRecord[\"nclientcatcode\"] ? this.state.selectedRecord[\"nclientcatcode\"].value\r\n        : transactionStatus.NA;\r\n\r\n      quotationData[\"quotation\"][\"nclientcode\"] = this.state.selectedRecord[\"nclientcode\"]!==\"\" ? this.state.selectedRecord[\"nclientcode\"].value\r\n        : transactionStatus.NA;\r\n\r\n        quotationData[\"quotation\"][\"nclientsitecode\"] = this.state.selectedRecord[\"nclientsitecode\"]!==\"\" ? this.state.selectedRecord[\"nclientsitecode\"].value\r\n        : transactionStatus.NA;\r\n\r\n        quotationData[\"quotation\"][\"nclientcontactcode\"] = this.state.selectedRecord[\"nclientcontactcode\"]!==\"\" ? this.state.selectedRecord[\"nclientcontactcode\"].value\r\n        : transactionStatus.NA;\r\n\r\n        quotationData[\"quotation\"][\"noemcode\"] = this.state.selectedRecord[\"noemcode\"]!==\"\" ? this.state.selectedRecord[\"noemcode\"].value\r\n        : transactionStatus.NA;\r\n\r\n    // quotationData[\"quotation\"][\"nquotationtypecode\"] = this.state.selectedRecord[\"nquotationtypecode\"]!==\"\" ? this.state.selectedRecord[\"nquotationtypecode\"].value\r\n    //   : transactionStatus.NA;\r\n\r\n      quotationData[\"quotation\"][\"nquotationtypecode\"] = transactionStatus.ACTIVE;\r\n      quotationData[\"quotation\"][\"nprojecttypecode\"] = this.state.selectedRecord[\"nprojecttypecode\"] ? this.state.selectedRecord[\"nprojecttypecode\"].value\r\n        : transactionStatus.NA;\r\n\r\n      quotationData[\"quotation\"][\"nprojectmastercode\"] = this.state.selectedRecord[\"nprojectmastercode\"]  ? this.state.selectedRecord[\"nprojectmastercode\"].value\r\n        : transactionStatus.NA;\r\n\r\n\r\n /*     quotationData[\"quotation\"][\"nuserrolecode\"] = this.state.selectedRecord[\"nuserrolecode\"]!==\"\" ? this.state.selectedRecord[\"nuserrolecode\"]\r\n         : transactionStatus.NA; */\r\n        \r\n      quotationData[\"quotation\"][\"nusercode\"] = this.state.selectedRecord[\"nusercode\"] ? this.state.selectedRecord[\"nusercode\"]\r\n        : transactionStatus.NA;\r\n\r\n\r\n // quotationData[\"quotation\"][\"drfwdate\"] = formatInputDate(this.state.selectedRecord[\"srfwdate\"], false);\r\n      quotationData[\"quotation\"][\"dquotationdate\"] = this.QuotationformatInputDate(this.state.selectedRecord[\"dquotationdate\"]);\r\n //     quotationData[\"quotation\"][\"dquotationdate\"] = rearrangeDateFormat(quotationData.userinfo,this.state.selectedRecord[\"dquotationdate\"]);\r\n      quotationData[\"quotation\"][\"ntzrfwdate\"] =  quotationData.userinfo.ntimezonecode ? quotationData.userinfo.ntimezonecode : \"-1\";\r\n      quotationData[\"quotation\"][\"ntzquotationdate\"] =  quotationData.userinfo.ntimezonecode ? quotationData.userinfo.ntimezonecode : \"-1\";\r\n\r\n      quotationData[\"quotation\"][\"nproductcatcode\"] = this.state.selectedRecord[\"nproductcatcode\"]!==\"\" ? this.state.selectedRecord[\"nproductcatcode\"].value\r\n      : transactionStatus.NA;\r\n\r\n      quotationData[\"quotation\"][\"nproductcode\"] = this.state.selectedRecord[\"nproductcode\"]!==\"\" ? this.state.selectedRecord[\"nproductcode\"].value\r\n      : transactionStatus.NA;\r\n      \r\n    }\r\n\r\nif ((this.props.Login.operation  === \"create\") && (this.props.Login.screenName === \"IDS_TEST\")) {\r\n          \r\n      inputParam = this.onSaveQuotationTest(saveType, formRef);\r\n  }\r\n\r\nif ((this.props.Login.operation  === \"update\") && ((this.props.Login.screenName === \"IDS_PRICE\") || (this.props.Login.screenName === \"IDS_CALCULATEPRICING\")) ) {\r\n      \r\n    inputParam = this.onSaveQuotationTestPrice(saveType, formRef);\r\n}\r\n\r\nif ((this.props.Login.operation  === \"create\") && (this.props.Login.screenName === \"IDS_CALCULATEPRICING\")) {\r\n          \r\n  inputParam = this.onSaveGrossQuotation(saveType, formRef);\r\n}\r\n    \r\n    if (((this.props.Login.operation === \"create\") || (this.props.Login.operation === \"update\")) && (this.props.Login.screenName === \"IDS_QUOTATION\")) {\r\n\r\n      inputParam = {\r\n        classUrl: \"quotation\",\r\n        methodUrl: \"Quotation\",\r\n        inputData: quotationData,\r\n        operation: this.props.Login.operation,\r\n        saveType,\r\n        formRef,\r\n        postParam,\r\n        searchRef: this.searchRef,\r\n        isClearSearch: this.props.Login.isClearSearch,\r\n      };\r\n    } \r\n    \r\n   \r\n\r\n  slideOutModal= ((this.props.Login.screenName === \"IDS_TEST\") || (this.props.Login.screenName === \"IDS_PRICE\") \r\n  || (this.props.Login.screenName === \"IDS_CALCULATEPRICING\")) ? \"openChildModal\" : \"openModal\";\r\n\r\n    const masterData = this.props.Login.masterData;\r\n\r\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          saveType,\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, slideOutModal);\r\n    }\r\n\r\n  };\r\n\r\n  onSaveQuotationTest(saveType, formRef) {\r\n    let inputData = [];\r\n    inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n    // inputData[\"supplier\"] = this.props.masterData.SelectedSupplier;\r\n  //  inputData[\"Quotation\"] = {};\r\n\r\n\r\n    let testArray = []\r\n    testArray = this.state.selectedRecord.ntestcode.map(item => {\r\n        let QuotationData = {}\r\n\r\n        QuotationData[\"ntestcode\"] = item.value\r\n        QuotationData[\"nquotationcode\"] = this.props.Login.masterData.SelectedQuotation.nquotationcode;\r\n        QuotationData[\"nclientcode\"] = this.props.Login.masterData.SelectedQuotation.nclientcode;\r\n        QuotationData[\"nprojectmastercode\"] = this.props.Login.masterData.SelectedQuotation.nprojectmastercode;\r\n\r\n\r\n        return QuotationData;\r\n    });\r\n    inputData['QuotationTest'] = testArray;\r\n\r\n    const inputParam = {\r\n        classUrl: \"quotation\",\r\n        methodUrl: \"QuotationTest\",\r\n        inputData: inputData,\r\n        operation: this.props.Login.operation, saveType, formRef,\r\n        searchRef: this.searchRef,\r\n        isClearSearch: this.props.Login.isClearSearch,\r\n        isChild: true\r\n\r\n\r\n    }\r\n    return inputParam;\r\n}\r\n\r\n\r\nQuotationformatInputDate(date) {\r\n\r\n  let formattedDate = \"\";\r\n\r\n  formattedDate = date.getFullYear() + \"-\" +\r\n      (\"00\" + (date.getMonth() + 1)).slice(-2) + \"-\" +\r\n      (\"00\" + date.getDate()).slice(-2) +\r\n      (\"T00:00:00Z\");\r\n\r\n  return formattedDate;\r\n}\r\n\r\nonSaveQuotationTestPrice = (saveType, formRef) => {\r\n\r\n  const quotationtestPriceData = {\"userinfo\": this.props.Login.userInfo,\r\n                           \"QuotationTest\":this.props.Login.masterData.SelectedQuotation,\r\n                           \"nquotationcode\":this.props.Login.masterData.SelectedQuotation.nquotationcode,\r\n                           \"nprojectmastercode\":this.props.Login.masterData.SelectedQuotation.nprojectmastercode,\r\n                           \"nclientcode\":this.props.Login.masterData.SelectedQuotation.nclientcode,\r\n                       //    \"ncost\":this.props.Login.selectedRecord[0].ncost\r\n                          };\r\n\r\n   let postParam = undefined;\r\n   let dataState = undefined;\r\n   let selectedId = null;\r\n   \r\n   if (this.props.Login.operation === \"update\") {\r\n       // edit\r\n       dataState = this.state.dataState;\r\n       selectedId = this.props.Login.selectedId; \r\n       postParam = { inputListName: \"Quotation\", selectedObject: \"SelectedQuotation\", primaryKeyField: \"nquotationcode\" };\r\n\r\n      //  let selectedRecord1=[this.props.Login.selectedRecord];\r\n        let QuotationTestPriceArray=[];\r\n      \r\n       (this.props.Login.selectedRecord).forEach((item,index) => {\r\n               if(item.ntotalamount<0){\r\n                QuotationTestPriceArray[index]={...this.props.Login.selectedRecord[index],ntotalamount:0}\r\n               } \r\n\r\n               QuotationTestPriceArray[index] = {\r\n                 \r\n                 namount: this.props.Login.selectedRecord[index].namount,\r\n                 nclientcode: this.props.Login.selectedRecord[index].nclientcode,\r\n                 ncost: this.props.Login.selectedRecord[index].ncost,\r\n                 nnoofsamples: this.props.Login.selectedRecord[index].nnoofsamples,\r\n                 nprojectmastercode: this.props.Login.selectedRecord[index].nprojectmastercode,\r\n                 nquotationcode: this.props.Login.selectedRecord[index].nquotationcode,\r\n                 nquotationtestcode: this.props.Login.selectedRecord[index].nquotationtestcode,\r\n                 ntestcode: this.props.Login.selectedRecord[index].ntestcode, \r\n                 ntotalamount: this.props.Login.selectedRecord[index].ntotalamount,\r\n                 ntotalgrosstamount: this.props.Login.selectedRecord[index].ntotalgrosstamount,\r\n                //  stestdescription: this.props.Login.selectedRecord[index].stestdescription,\r\n                 stestsynonym: this.props.Login.selectedRecord[index].stestsynonym,\r\n                 ndiscountbandcode: this.props.Login.selectedRecord[index].ndiscountbandcode.value,\r\n                 stestplatform: this.props.Login.selectedRecord[index].stestplatform, \r\n                 snotes: this.props.Login.selectedRecord[index].snotes ,\r\n                 nmethodcode: this.props.Login.selectedRecord[index].nmethodcode ,\r\n                 squotationleadtime: this.props.Login.selectedRecord[index].squotationleadtime \r\n\r\n                };\r\n         \r\n     });\r\n     \r\n       quotationtestPriceData[\"QuotationTest\"] = JSON.parse(JSON.stringify(QuotationTestPriceArray));           \r\n   }\r\n   else {\r\n       //add               \r\n                                          \r\n       let priceList = [];\r\n       this.state.selectedRecord[\"ntestcode\"] &&\r\n           this.state.selectedRecord[\"ntestcode\"].map(item => {\r\n               return priceList.push({\r\n                  ntestcode: item.value                      \r\n               })\r\n           })\r\n      \r\n       quotationtestPriceData[\"QuotationTest\"] = priceList;                             \r\n\r\n   }\r\n   if (quotationtestPriceData[\"QuotationTest\"].hasOwnProperty('esignpassword')) {\r\n       if (quotationtestPriceData[\"QuotationTest\"]['esignpassword'] === '') {\r\n           delete quotationtestPriceData[\"QuotationTest\"]['esigncomments']\r\n           delete quotationtestPriceData[\"QuotationTest\"]['esignpassword']\r\n           delete quotationtestPriceData[\"QuotationTest\"][\"agree\"]\r\n       }\r\n   }\r\n  //console.log(\"update data:\", quotationtestPriceData);\r\n   const inputParam = {\r\n       classUrl: this.props.Login.inputParam.classUrl,\r\n       methodUrl: \"QuotationTest\",\r\n       inputData: quotationtestPriceData,\r\n       operation: this.props.Login.operation,\r\n       saveType, formRef, postParam, searchRef: this.searchRef,\r\n       isClearSearch: this.props.Login.isClearSearch,\r\n       selectedId, dataState\r\n   }\r\n   \r\n   return inputParam;\r\n}\r\n\r\n\r\nonSaveGrossQuotation(saveType, formRef) {\r\n\r\n  let quotationData = {};\r\n  quotationData[\"userinfo\"] = this.props.Login.userInfo;\r\n \r\n\r\n\r\n  quotationData[\"GrossQuotation\"] = {  \r\n\r\n    nquotationcode: this.props.Login.masterData.SelectedQuotation.nquotationcode,\r\n    nsitecode: this.props.Login.userInfo.nmastersitecode,\r\n    ndiscountamount:this.state.selectedRecord.DiscountAmount,\r\n    nvatamount:this.state.selectedRecord.VatAmount,\r\n    ntotalnetamount:this.state.selectedRecord.TotalNetAmount,\r\n    ntotalgrossamount : this.props.Login.QuotationGrossAmount[0].ntotalgrossamount,\r\n    nclientcode : this.props.Login.masterData.SelectedQuotation.nclientcode,\r\n    nprojectmastercode : this.props.Login.masterData.SelectedQuotation.nprojectmastercode\r\n    \r\n  };\r\n\r\n  quotationData[\"GrossQuotation\"][\"ndiscountbandcode\"] = this.state.selectedRecord[\"ndiscountbandcode\"] ? this.state.selectedRecord[\"ndiscountbandcode\"].value\r\n  : transactionStatus.NA;\r\n\r\n  quotationData[\"GrossQuotation\"][\"nvatbandcode\"] = this.state.selectedRecord[\"nvatbandcode\"] ? this.state.selectedRecord[\"nvatbandcode\"].value\r\n  : transactionStatus.NA;\r\n\r\n  // const postParam = {\r\n  //   inputListName: \"Quotation\",\r\n  //   selectedObject: \"SelectedQuotation\",\r\n  //   primaryKeyField: \"nquotationcode\",\r\n  //   primaryKeyValue: this.props.Login.masterData.SelectedQuotation.nquotationcode,\r\n  //   fetchUrl: \"quotation/getQuotation\",\r\n  //   fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n  // };\r\n\r\n  const inputParam = {\r\n    classUrl: \"quotation\",\r\n    methodUrl: \"GrossQuotation\",// postParam,\r\n    inputData: quotationData,\r\n    searchRef: this.searchRef,\r\n    operation: this.props.Login.operation, saveType, formRef,\r\n    isClearSearch: this.props.Login.isClearSearch,\r\n    isChild: true\r\n  }\r\n \r\n  return inputParam;\r\n}\r\n\r\n \r\n  onNumericInputOnChange = (event, primaryFieldKey) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n     \r\n        if(primaryFieldKey && ( event.target.name === \"nnoofsamples\" )){\r\n            const index = selectedRecord.findIndex(item=>item.nquotationtestcode === primaryFieldKey);\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value)){\r\n                selectedRecord[index][\"nnoofsamples\"] = event.target.value;\r\n            }\r\n        }\r\n        else{      \r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }           \r\n    \r\n    this.setState({ selectedRecord });\r\n}\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.Login.masterStatus !== \"\") {\r\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n        toast.warn(props.Login.masterStatus);\r\n        props.Login.masterStatus = \"\";\r\n      }\r\n    }\r\n    if (props.Login.error !== state.error) {\r\n      toast.error(props.Login.error);\r\n      props.Login.error = \"\";\r\n    }\r\n    if (props.Login.selectedRecord === undefined) {\r\n      return { selectedRecord: {} };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  validateEsign = () => {\r\n    const inputParam = {\r\n      inputData: {\r\n        userinfo: {\r\n          ...this.props.Login.userInfo,\r\n          sreason: this.state.selectedRecord[\"esigncomments\"],\r\n        },\r\n        password: this.state.selectedRecord[\"esignpassword\"],\r\n      },\r\n      screenData: this.props.Login.screenData,\r\n    };\r\n    this.props.validateEsignCredential(inputParam, \"openModal\");\r\n\r\n  };\r\n\r\n\r\n\r\n  DeleteQuotation = (methodUrl, selectedQuotation, operation, ncontrolCode) => {\r\n    const postParam = {\r\n      inputListName: \"QuotationList\",\r\n      selectedObject: \"SelectedQuotation\",\r\n      primaryKeyField: \"nquotationcode\",\r\n      primaryKeyValue: selectedQuotation.nquotationcode,\r\n      fetchUrl: \"quotation/getQuotation\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n    };\r\n\r\n    const inputParam = {\r\n      classUrl: this.props.Login.inputParam.classUrl,\r\n      methodUrl,\r\n      postParam,\r\n      inputData: {\r\n        userinfo: this.props.Login.userInfo,\r\n        quotation: selectedQuotation,\r\n      },\r\n      operation,\r\n      isClearSearch: this.props.Login.isClearSearch,\r\n    };\r\n\r\n    const masterData = this.props.Login.masterData;\r\n\r\n    if (\r\n      showEsign(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode,\r\n        ncontrolCode\r\n      )\r\n    ) {\r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: {\r\n          loadEsign: true,\r\n          screenData: { inputParam, masterData },\r\n          openModal: true,\r\n          screenName: \"IDS_QUOTATION\",\r\n          operation,\r\n        },\r\n      };\r\n      this.props.updateStore(updateInfo);\r\n    } else {\r\n      this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n    }\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n\r\n\r\n    let versionStatusCSS = \"outline-secondary\";\r\n    let activeIconCSS = \"fa fa-check\"\r\n\r\n\r\n    if (this.props.Login.masterData.SelectedQuotation && this.props.Login.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.APPROVED) {\r\n      versionStatusCSS = \"outline-success\";\r\n    }\r\n    else if (this.props.Login.masterData.SelectedQuotation && this.props.Login.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\r\n      activeIconCSS = \"\";\r\n\r\n    }\r\n\r\n    if (this.props.Login.openModal) {\r\n      this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\r\n    }\r\n\r\n\r\n    const { userInfo } = this.props.Login;\r\n    const addId = this.state.controlMap.has(\"AddQuotation\") && this.state.controlMap.get(\"AddQuotation\").ncontrolcode;\r\n    const editId = this.state.controlMap.has(\"EditQuotation\") && this.state.controlMap.get(\"EditQuotation\").ncontrolcode;\r\n    const deleteId = this.state.controlMap.has(\"DeleteQuotation\") && this.state.controlMap.get(\"DeleteQuotation\").ncontrolcode;\r\n    const approveId = this.state.controlMap.has(\"ApproveQuotation\") && this.state.controlMap.get(\"ApproveQuotation\").ncontrolcode;\r\n    \r\n    const addQuotationTestId = this.state.controlMap.has(\"AddQuotationTest\") && this.state.controlMap.get(\"AddQuotationTest\").ncontrolcode;\r\n    const updateQuotationTestId = this.state.controlMap.has(\"EditQuotationTest\") && this.state.controlMap.get(\"EditQuotationTest\").ncontrolcode;\r\n    // const grossQuotationeId = this.state.controlMap.has(\"CalculatePricing\") && this.state.controlMap.get(\"CalculatePricing\").ncontrolcode;\r\n    const viewQuotationId = this.state.controlMap.has(\"ViewQuotation\") && this.state.controlMap.get(\"ViewQuotation\").ncontrolcode;\r\n\r\n    const editTestPriceParam = {screenName:\"IDS_PRICE\", \"operation\":\"update\", \r\n    masterData:this.props.Login.masterData, userInfo: this.props.Login.userInfo, \r\n    ncontrolCode:updateQuotationTestId};\r\n\r\n  const selectedQuotation = this.props.Login.masterData.SelectedQuotation;\r\n\r\n    const filterParam = {\r\n      inputListName: \"Quotation\",\r\n      selectedObject: \"SelectedQuotation\",\r\n      primaryKeyField: \"nquotationcode\",\r\n      fetchUrl: \"quotation/getActiveQuotationById\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n      masterData: this.props.Login.masterData,\r\n      searchFieldList: this.searchFieldList,\r\n    };\r\n    \r\n    return (\r\n      <>\r\n        <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n          \r\n          <Row noGutters={true}>\r\n            <Col md={4}>\r\n              <ListMaster\r\n                screenName={this.props.intl.formatMessage({ id: \"IDS_QUOTATION\" })}\r\n                masterData={this.props.Login.masterData}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.Quotation}\r\n                getMasterDetail={(quotationData) => this.props.getQuotation(quotationData, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                selectedMaster={selectedQuotation}\r\n                primaryKeyField=\"nquotationcode\"\r\n                mainField=\"squotationno\"\r\n                firstField=\"sclientname\"\r\n                secondField=\"sversionstatus\"\r\n                filterColumnData={this.props.filterColumnData}\r\n                filterParam={filterParam}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                addId={addId}\r\n                searchRef={this.searchRef}\r\n                reloadData={this.reloadData}\r\n                //     openModal={() => this.props.addQuotation(\"create\", selectedQuotation, userInfo, addId, this.state.ProjectMasterList)}\r\n                openModal={() => this.props.addQuotation(\"create\", userInfo, addId, selectedQuotation)}\r\n                isMultiSelecct={false}\r\n                hidePaging={false}\r\n                isClearSearch={this.props.Login.isClearSearch}\r\n                openFilter={this.openFilter}\r\n                closeFilter={this.closeFilter}\r\n                // onFilterSubmit={this.onFilterSubmit}    \r\n                showFilterIcon={false}\r\n                showFilter={this.props.Login.showFilter}\r\n       /*         filterComponent={[\r\n                  {\r\n                    \"IDS_PROJECTMASTERFILTER\":\r\n                      <ProjectMasterFilter\r\n                        filterProjectType={this.state.ProjectMasterList || []}\r\n                        nfilterProjectType={this.props.Login.masterData.SelectedProjectType || {}}\r\n                        onComboChange={this.onComboChange}\r\n                        selectedRecord={this.state.selectedRecordfilter || {}}\r\n                      />\r\n                  }\r\n                ]} */\r\n\r\n              />\r\n            </Col>\r\n            <Col md={8}>\r\n              {selectedQuotation ?\r\n                <ContentPanel className=\"panel-main-content\">\r\n                  <Card className=\"border-0\">\r\n                    <Card.Header>\r\n                      {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                      <Card.Title className=\"product-title-main\">\r\n                        {selectedQuotation.sclientname}\r\n                      </Card.Title>\r\n                      <Card.Subtitle>\r\n                        <div className=\"d-flex product-category\">\r\n                          <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                            <span className={`btn btn-outlined ${versionStatusCSS} btn-sm ml-3`}>\r\n                              {/* <i class={activeIconCSS}></i> */}\r\n                              {selectedQuotation.sversionstatus}\r\n\r\n                            </span>\r\n                          </h2>\r\n                          {/* </Col>\r\n                             <Col md=\"4\"> */}\r\n                          {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                          <div className=\"d-inline\">\r\n                            {/* Don't delete these commented lines because additional info feature is needed for Agaram LIMS */}\r\n                            {/* Start Here */}\r\n                            {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\" >  \r\n                                                            <FontAwesomeIcon icon={faEye} className=\"ActionIconColor\" onClick={(e)=>this.viewAdditionalInfo(e)} />\r\n                                                        </Nav.Link> */}\r\n                            {/* End Here */}\r\n\r\n                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"edittestname\"\r\n                              hidden={this.state.userRoleControlRights.indexOf(viewQuotationId) === -1}\r\n                              data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                              \r\n                              onClick={() => this.QuotationPreview()}>\r\n                              <FontAwesomeIcon icon={faEye} />\r\n                            </Nav.Link>\r\n\r\n                            <Nav.Link className=\"btn btn-circle outline-grey mr-2\" name=\"edittestname\"\r\n                              hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                              data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                              //data-for=\"tooltip_list_wrap\"\r\n                              onClick={() => this.props.addQuotation(\"update\",userInfo, editId, selectedQuotation )}>\r\n                              <FontAwesomeIcon icon={faPencilAlt} />\r\n                            </Nav.Link>\r\n                            \r\n                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletetestname\"\r\n                              data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                              //   data-for=\"tooltip_list_wrap\"\r\n                              hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                              onClick={() => this.ConfirmDelete(selectedQuotation, \"delete\", deleteId, \"Quotation\")}\r\n                            >\r\n                              <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                            </Nav.Link>\r\n                           \r\n\r\n                            <Nav.Link name=\"approveQuotation\" className=\"btn btn-circle outline-grey mr-2\"\r\n                              hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                              data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                              //data-for=\"tooltip_list_wrap\"\r\n                              onClick={() => this.approveQuotation(\"Quotation\", selectedQuotation, \"approve\", approveId)}>\r\n                              <FontAwesomeIcon icon={faThumbsUp} />\r\n                            </Nav.Link>\r\n\r\n                          </div>\r\n                          {/* </Tooltip> */}\r\n                        </div>\r\n                        {/* </Col>\r\n                                            </Row> */}\r\n                      </Card.Subtitle>\r\n                    </Card.Header>\r\n                    <Card.Body className=\"form-static-wrap\">\r\n                      \r\n                      {/* <Col md={12}>\r\n                        <div className=\"horizontal-line\"></div>\r\n                      </Col> */}\r\n                     \r\n                         \r\n                      <Card className=\"at-tabs border-0\">\r\n                              {/* <Row noGutters>  --\r\n                                  <Col md={12}>\r\n                                      <div className=\"d-flex justify-content-end\">\r\n                                      <Nav.Link name=\"addPrice\" className=\"add-txt-btn\" \r\n                                              hidden={this.state.userRoleControlRights.indexOf(addQuotationTestId) === -1}\r\n                                              onClick={()=>this.props.getQuotationAddTestService(\"IDS_TEST\", \"create\", this.props.Login.masterData, this.props.Login.userInfo, addQuotationTestId)}\r\n                                              >\r\n                                            <FontAwesomeIcon icon={faPlus} /> { } \r\n                                          <FormattedMessage id='IDS_TEST' defaultMessage='Test' />\r\n                                      </Nav.Link>\r\n                                      <Nav.Link name=\"updatePrice\" className=\"add-txt-btn\" \r\n                                              hidden={this.state.userRoleControlRights.indexOf(updateQuotationTestId) === -1}\r\n                                              onClick={()=>this.props.getQuotationPricingEditService({...editTestPriceParam, \"updateType\":\"All\", dataState:undefined})}\r\n                                              >\r\n                                          <FontAwesomeIcon icon={faPencilAlt} /> { }\r\n                                          <FormattedMessage id='IDS_PRICE' defaultMessage='Price' />\r\n                                      </Nav.Link>\r\n                                      </div>\r\n                                  </Col>\r\n                              </Row> */}\r\n                              {/* <Row noGutters>\r\n                                  <Col md={12}>\r\n                                      <DataGrid\r\n                                          primaryKeyField={\"nquotationtestcode\"}\r\n                                       // data={this.props.Login.masterData.QuotationTest}\r\n                                          data={this.state.data}\r\n                                       // dataResult={this.props.Login.masterData.QuotationTest}\r\n                                      //  dataResult={process(this.props.Login.masterData.QuotationTest || [], this.state.quotationDataState)}\r\n                                          dataResult={this.state.dataResult}\r\n                                     //   dataState={this.state.quotationDataState}\r\n                                          dataState={this.state.dataState}\r\n                                       // dataStateChange={this.dataStateChange}\r\n                                       //   dataStateChange={(event) => this.setState({ quotationDataState: event.dataState })}\r\n                                          dataStateChange={this.dataStateChange}\r\n                                          extractedColumnList={this.extractedColumnList}\r\n                                          expandField=\"expanded\"\r\n                                          controlMap={this.state.controlMap}\r\n                                          userRoleControlRights={this.state.userRoleControlRights}\r\n                                          inputParam={this.props.Login.inputParam}\r\n                                          userInfo={this.props.Login.userInfo}\r\n                                          fetchRecord={this.props.getQuotationPricingEditService}\r\n                                          editParam={{...editTestPriceParam, \"updateType\":\"Single\", dataState:this.state.dataState}}\r\n                                          gridHeight={'335px'}\r\n                                          deleteRecord={this.DeleteQuotationTest}\r\n                                          deleteParam={{operation:\"delete\"}}\r\n                                          methodUrl={\"QuotationTest\"}\r\n                                          addRecord = {() => this.openModal(addId)}\r\n                                          pageable={true}\r\n                                          scrollable={'scrollable'}\r\n                                          isActionRequired={true}\r\n                                          isToolBarRequired={false}\r\n                                          selectedId={this.props.Login.selectedId}\r\n                                      />\r\n                                  </Col>\r\n                              </Row> */}\r\n\r\n                                  <Card className=\"at-tabs border-0\">\r\n                                    <Row noGutters>\r\n                                      <Col md={12}>\r\n                                        <QuotationTab\r\n                                          primaryKeyField={\"nquotationtestcode\"}\r\n                                          // data={this.props.Login.masterData.ProjectMember}\r\n                                          data={this.state.data}\r\n                                          // dataResult={this.props.Login.masterData.ProjectMember}\r\n                                          dataResult={this.state.dataResult}\r\n                                          masterData={this.props.Login.masterData}\r\n                                          screenName={this.props.Login.screenName}\r\n                                          operation={this.props.Login.operation}\r\n                                          openChildModal={this.props.Login.openChildModal}\r\n                                          crudMaster={this.props.crudMaster}\r\n                                          errorCode={this.props.Login.errorCode}\r\n                                          validateEsignCredential={this.props.validateEsignCredential}\r\n                                          loadEsign={this.props.Login.loadEsign}\r\n                                          showAccordian={this.state.showAccordian}\r\n                                          selectedRecord={this.state.selectedRecord || {}}\r\n                                          // dataState={{skip: 0, take: 10}}\r\n                                          // dataState={this.props.Login.dataState}\r\n                                          dataState={this.state.dataState}\r\n                                          dataStateChange={this.dataStateChange}\r\n                                          // extractedColumnList={fieldsForGrid} --\r\n                                          controlMap={this.state.controlMap}\r\n                                          userRoleControlRights={this.state.userRoleControlRights}\r\n                                          inputParam={this.props.Login.inputParam}\r\n                                          userInfo={this.props.Login.userInfo}\r\n                                          //    getProjectmasterAddMemberService={(this.props.Login.screenName,this.props.Login.operation,this.props.getProjectmasterAddMemberService,this.props.Login.userInfo,this.props.Login.ncontrolCode)}\r\n                                          getProjectmasterAddMemberService={this.props.getProjectmasterAddMemberService}\r\n                                          // --   fetchRecord={this.props.getPricingEditService}\r\n                                          //--       editParam={{...editTestPriceParam, \"updateType\":\"Single\", priceDataState:this.state.priceDataState}}\r\n                                          //  deleteParam={{operation:\"delete\"}}\r\n                                       \r\n                                          // reloadData={this.reloadData}\r\n                                          // --      addRecord = {() => this.openModal(addId)}\r\n                                          pageable={true}\r\n                                          onTabChange={this.onTabChange}\r\n                                          updateStore={this.props.updateStore}\r\n                                          scrollable={'scrollable'}\r\n                                          // gridHeight = {'600px'}\r\n                                          isActionRequired={true}\r\n                                          isToolBarRequired={false}\r\n                                          selectedId={this.props.Login.selectedId}\r\n                                          viewAttachment={this.props.viewAttachment}\r\n                                          MembersList={this.props.Login.MembersList}\r\n                                          onComboChange={this.onComboChange}\r\n                                          // File\r\n                                          addProjectMasterFile={this.props.addProjectMasterFile}\r\n                                          esignRights={this.props.Login.userRoleControlRights}\r\n                                          // ntransactionstatus={selectedProjectMaster.ntransactionstatus}  ---\r\n                                          //  selectedRecord={this.props.Login.selectedRecord}\r\n                                          onDropProjectMasterFile={this.onDropProjectMasterFile}\r\n                                          onInputOnChange={this.onInputOnChange}\r\n                                          screenData={this.props.Login.screenData}\r\n                                          deleteAttachment={this.deleteAttachment}\r\n                                          ncontrolCode={this.props.Login.ncontrolCode}\r\n                                          linkMaster= {this.props.Login.linkMaster}\r\n\r\n\r\n                                          addQuotationTestId= {this.props.Login.addQuotationTestId}\r\n                                          updateQuotationTestId= {this.props.Login.updateQuotationTestId}\r\n                                          addId= {this.props.Login.addId}\r\n                                          editParam={{...editTestPriceParam}}\r\n                                          // fetchRecord={this.props.getQuotationPricingEditService}\r\n                                          deleteRecord={this.DeleteQuotationTest}\r\n                                          getQuotationAddTestService={this.props.getQuotationAddTestService}\r\n                                          getQuotationPricingEditService={this.props.getQuotationPricingEditService}\r\n                                          QuotationTestList={this.props.Login.QuotationTestList}\r\n                                          onSaveClick={this.onSaveClick}\r\n                                          onnetAmountEvent={this.onnetAmountEvent}\r\n                                          onNumericInputChange={this.onNumericInputChange}\r\n                                          DiscountBand={this.props.Login.DiscountBand}\r\n                                          VATBand={this.props.Login.VATBand}\r\n                                          modalScreenSize={this.props.Login.modalScreenSize}\r\n                                          QuotationGrossAmount={this.props.Login.QuotationGrossAmount}\r\n\r\n                                          QuotationHistorydata={this.props.Login.masterData.QuotationHistory}\r\n                                          QuotationHistorydataResult={this.props.Login.masterData.QuotationHistory}\r\n                                          historydataState={this.state.historydataState}\r\n                                          historydataStateChange={this.historydataStateChange}\r\n                                          selectedQuotation={selectedQuotation}\r\n                                          GrossQuotation={this.props.GrossQuotation}\r\n                                        />\r\n                                      </Col>\r\n                                    </Row>\r\n                                  </Card>\r\n\r\n                          <Col md={12}>\r\n                            <div className=\"horizontal-line\"></div>\r\n                          </Col>\r\n\r\n                         \r\n                      {/* <Card>\r\n                        <Card.Body>\r\n\r\n                          <Row className='justify-content-end pr-2 m-0'>\r\n\r\n                                <Nav.Link name=\"CalculatePricing\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                    hidden={this.state.userRoleControlRights.indexOf(grossQuotationeId) === -1}\r\n                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_VATCALCULATION\" })}\r\n                                    onClick={() => this.props.GrossQuotation(\"create\", userInfo, grossQuotationeId, selectedQuotation)}>\r\n                                    \r\n                                  <Quotationdiscount className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                </Nav.Link>\r\n\r\n                          </Row>  \r\n\r\n                         <Row className='justify-content-end '>\r\n                            <Col md=\"4\">\r\n                              <FormGroup>\r\n                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TOTALGROSSAMOUNT\" })}</FormLabel>\r\n                                <ReadOnlyText>{parseFloat((selectedQuotation.ntotalgrossamount).toFixed(2))}</ReadOnlyText>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n                          <Col md=\"4\">\r\n                              <FormGroup>\r\n                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_DISCOUNTBAND\" })}</FormLabel>\r\n                                <ReadOnlyText>{selectedQuotation.sdiscountbandname}</ReadOnlyText>\r\n                              </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"4\">\r\n                              <FormGroup>\r\n                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_AMOUNT\" })}</FormLabel>\r\n                                <ReadOnlyText>{selectedQuotation.ndiscountpercentage}</ReadOnlyText>\r\n                              </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"4\">\r\n                              <FormGroup>\r\n                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_DISCOUNTAMOUNT\" })}</FormLabel>\r\n                                <ReadOnlyText>{parseFloat((selectedQuotation.ndiscountamount).toFixed(2))} </ReadOnlyText>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n                          <Col md=\"4\">\r\n                              <FormGroup>\r\n                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_VATBAND\" })}</FormLabel>\r\n                                <ReadOnlyText>{selectedQuotation.svatbandname}</ReadOnlyText>\r\n                              </FormGroup>\r\n                          </Col>\r\n\r\n                           \r\n                            <Col md=\"4\">\r\n                              <FormGroup>\r\n                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_AMOUNT\" })}</FormLabel>\r\n                                <ReadOnlyText>{selectedQuotation.nvatpercentage}</ReadOnlyText>\r\n                              </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col md=\"4\">\r\n                              <FormGroup>\r\n                                <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_VATAMOUNT\" })}</FormLabel>\r\n                                <ReadOnlyText>{parseFloat((selectedQuotation.nvatamount).toFixed(2))} </ReadOnlyText>\r\n                              </FormGroup>\r\n                            </Col>\r\n\r\n                          </Row>\r\n\r\n                          <Row className='justify-content-end'>\r\n                          <Col md=\"4\">\r\n\r\n                            <FormGroup>\r\n                              <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TOTALNETAMOUNT\" })}</FormLabel>\r\n                                <ReadOnlyText>{parseFloat((selectedQuotation.ntotalnetamount).toFixed(2))}</ReadOnlyText>\r\n                            </FormGroup>\r\n\r\n                           </Col>\r\n\r\n\r\n                          </Row>         \r\n                        </Card.Body>\r\n                      </Card> */}\r\n                      </Card>\r\n                      {/* <Card className=\"at-tabs border-0\">\r\n                        <Row noGutters>\r\n                          <Col md={12}>\r\n                            <QuotationTab\r\n                              primaryKeyField={\"nprojectmembercode\"}\r\n                              // data={this.props.Login.masterData.ProjectMember}\r\n                              data={this.state.data}\r\n                              // dataResult={this.props.Login.masterData.ProjectMember}\r\n                              dataResult={this.state.dataResult}\r\n                              masterData={this.props.Login.masterData}\r\n                              screenName={this.props.Login.screenName}\r\n                              operation={this.props.Login.operation}\r\n                              openChildModal={this.props.Login.openChildModal}\r\n                              crudMaster={this.props.crudMaster}\r\n                              errorCode={this.props.Login.errorCode}\r\n                              validateEsignCredential={this.props.validateEsignCredential}\r\n                              loadEsign={this.props.Login.loadEsign}\r\n                              showAccordian={this.state.showAccordian}\r\n                              selectedRecord={this.state.selectedRecord || {}}\r\n                              // dataState={{skip: 0, take: 10}}\r\n                              // dataState={this.props.Login.dataState}\r\n                              dataState={this.state.dataState}\r\n                              dataStateChange={this.dataStateChange}\r\n                              // extractedColumnList={fieldsForGrid} --\r\n                              controlMap={this.state.controlMap}\r\n                              userRoleControlRights={this.state.userRoleControlRights}\r\n                              inputParam={this.props.Login.inputParam}\r\n                              userInfo={this.props.Login.userInfo}\r\n                              //    getProjectmasterAddMemberService={(this.props.Login.screenName,this.props.Login.operation,this.props.getProjectmasterAddMemberService,this.props.Login.userInfo,this.props.Login.ncontrolCode)}\r\n                              getProjectmasterAddMemberService={this.props.getProjectmasterAddMemberService}\r\n                              // --   fetchRecord={this.props.getPricingEditService}\r\n                              //--       editParam={{...editTestPriceParam, \"updateType\":\"Single\", priceDataState:this.state.priceDataState}}\r\n                              //  deleteParam={{operation:\"delete\"}}\r\n                              methodUrl={\"Teammembers\"}\r\n                              // reloadData={this.reloadData}\r\n                              // --      addRecord = {() => this.openModal(addId)}\r\n                              pageable={true}\r\n                              onTabChange={this.onTabChange}\r\n                              updateStore={this.props.updateStore}\r\n                              scrollable={'scrollable'}\r\n                              // gridHeight = {'600px'}\r\n                              isActionRequired={true}\r\n                              isToolBarRequired={false}\r\n                              selectedId={this.props.Login.selectedId}\r\n                              viewAttachment={this.props.viewAttachment}\r\n                              MembersList={this.props.Login.MembersList}\r\n                              onComboChange={this.onComboChange}\r\n                              // File\r\n                              addProjectMasterFile={this.props.addProjectMasterFile}\r\n                              esignRights={this.props.Login.userRoleControlRights}\r\n                              // ntransactionstatus={selectedProjectMaster.ntransactionstatus}  ---\r\n                              //  selectedRecord={this.props.Login.selectedRecord}\r\n                              onDropProjectMasterFile={this.onDropProjectMasterFile}\r\n                              onInputOnChange={this.onInputOnChange}\r\n                              screenData={this.props.Login.screenData}\r\n                              deleteAttachment={this.deleteAttachment}\r\n                              ncontrolCode={this.props.Login.ncontrolCode}\r\n                              linkMaster= {this.props.Login.linkMaster}\r\n\r\n\r\n                              addQuotationTestId= {this.props.Login.addQuotationTestId}\r\n                              updateQuotationTestId= {this.props.Login.updateQuotationTestId}\r\n                              addId= {this.props.Login.addId}\r\n                              editParam={{...editTestPriceParam}}\r\n                              fetchRecord={this.props.getQuotationPricingEditService}\r\n                              deleteRecord={this.DeleteQuotationTest}\r\n                             \r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </Card> */}\r\n\r\n\r\n\r\n                    </Card.Body>\r\n                  </Card>\r\n                </ContentPanel>\r\n                : \"\"\r\n              }\r\n            </Col>\r\n          </Row>\r\n\r\n\r\n        </div>\r\n        {/* End of get display */}\r\n\r\n        {/* Start of Modal Sideout for Test Creation */}\r\n        {this.props.Login.openModal &&\r\n           <SlideOutModal\r\n           show={this.props.Login.openModal}\r\n           size={this.props.Login.modalScreenSize===true ? \"xl\" : \"lg\" }\r\n           closeModal={this.closeModal}\r\n           hideSave={this.props.Login.screenName ===  \"IDS_VIEW\" ? true :  false}\r\n           operation={(this.props.Login.screenName === \"IDS_CALCULATEPRICING\" || this.props.Login.screenName === \"IDS_VIEW\") ? \"\" :  this.props.Login.operation}\r\n           inputParam={this.props.Login.inputParam}\r\n           screenName={this.props.Login.screenName}\r\n           onSaveClick={this.onSaveClick}\r\n           esign={this.props.Login.loadEsign}\r\n           validateEsign={this.validateEsign}\r\n           selectedRecord={this.state.selectedRecord || {}} \r\n          //  mandatoryFields={this.props.Login.screenName !==\"IDS_PRICE\" ? this.mandatoryFields : []}\r\n           mandatoryFields={ this.mandatoryFields} \r\n           addComponent={this.props.Login.loadEsign ?\r\n            <Esign\r\n               operation={this.props.Login.operation}\r\n               onInputOnChange={this.onInputOnChange}\r\n               inputParam={this.props.Login.inputParam}\r\n               selectedRecord={this.state.selectedRecord || {}}\r\n             />\r\n             : (this.props.Login.screenName === \"IDS_QUOTATION\") ?\r\n\r\n               <AddQuotation\r\n\r\n                userInfo={this.props.Login.userInfo}\r\n                genericlabel={this.props.Login.genericLabel}\r\n                selectedRecord={this.state.selectedRecord || {}}\r\n                // selectedclientcode={this.state.selectedRecord.nclientcode || {}}\r\n                sclientsiteaddress={this.props.Login.sclientsiteaddress}\r\n                SelectedClient={this.props.Login.SelectedClient}\r\n                ClientCategory={this.props.Login.ClientCategory}\r\n                Client={this.props.Login.Client}\r\n                ClientSite={this.props.Login.ClientSite}\r\n                ClientContact={this.props.Login.ClientContact}\r\n                OEM={this.props.Login.OEM}\r\n                ProjectCode={this.props.Login.ProjectCode}\r\n                ProjectType={this.props.Login.ProjectType}\r\n                ProjectMaster={this.props.Login.ProjectMaster}\r\n                QuotationType={this.props.Login.QuotationType}\r\n                Product={this.props.Login.Product}\r\n                ProductCategory={this.props.Login.ProductCategory}\r\n                onInputOnChange={this.onInputOnChange}\r\n                onComboChange={this.onComboChange}\r\n         //     onNumericInputChange={this.onNumericInputChange}\r\n                 handleDateChange={this.handleDateChange}\r\n               /> \r\n              : (this.props.Login.screenName === \"IDS_VIEW\") ? \r\n\r\n               <AddQuotationPreview\r\n\r\n                selectedQuotation ={this.props.Login.masterData.SelectedQuotation}\r\n                userInfo={this.props.Login.userInfo}\r\n                genericlabel={this.props.Login.genericLabel}\r\n              ></AddQuotationPreview> : \"\"\r\n           }\r\n         />\r\n        }\r\n        {/* End of Modal Sideout for Test Creation */}\r\n      </>\r\n    );\r\n  }\r\n\r\n  findMandatoryFields(screenName, selectedRecord, operation) {\r\n    let mandatoryFields = [];\r\n    if (screenName === \"IDS_QUOTATION\") {\r\n\r\n      mandatoryFields = [\r\n        { \"idsName\": \"IDS_CLIENTCATEGORY\", \"dataField\": \"nclientcatcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_CLIENT\", \"dataField\": \"nclientcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_CLIENTSITE\", \"dataField\": \"nclientsitecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_CONTACTNAME\", \"dataField\": \"nclientcontactcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_OEM\", \"dataField\": \"noemcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n//      { \"idsName\": \"IDS_INVOICEADDRESS\", \"dataField\": \"sinvoiceaddress\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n//      { \"idsName\": \"IDS_QUOTATIONTYPE\", \"dataField\": \"nquotationtypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n//      { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"nprojecttypecode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n//      { \"idsName\": \"IDS_PROJECTCODE\", \"dataField\": \"nprojectmastercode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n//      { \"idsName\": \"IDS_PROJECTTITLE\", \"dataField\": \"sprojecttitle\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n//      { \"idsName\": \"IDS_RFWDATE\", \"dataField\": \"srfwdate\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"textbox\" },\r\n //     { \"idsName\": \"IDS_ROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n //     { \"idsName\": \"IDS_USER\", \"dataField\": \"susername\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": (this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] || \"\"), \"dataField\": \"nproductcatcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": (this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] || \"\"), \"dataField\": \"nproductcode\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n        { \"idsName\": \"IDS_QUOTATIONDATE\", \"dataField\": \"dquotationdate\", \"width\": \"200px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\" },\r\n        \r\n      ]\r\n\r\n      // mandatoryFields.forEach(item => item.mandatory === true && mandatoryFields.push(item));\r\n      return mandatoryFields;\r\n\r\n    } \r\n    else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  QuotationPreview = () => {\r\n\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: {\r\n        screenName: \"IDS_VIEW\",\r\n        openModal: true,\r\n        operation: \"create\",\r\n        modalScreenSize : false\r\n        \r\n      },\r\n    };\r\n\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n\r\n\r\n  onComboChange = (comboData, fieldName, caseNo, nquotationtestcode) => {\r\n\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    switch (caseNo) {\r\n      case 1:\r\n\r\n      if(fieldName===\"nclientcatcode\"){\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        if (selectedRecord.nclientcatcode) {\r\n          if (parseInt(comboData.value) !== parseInt(selectedRecord.nclientcatcode.value)) {\r\n            // selectedRecord.nusercode={};\r\n            delete (selectedRecord.nclientcode);\r\n            delete (selectedRecord.sclientsiteaddress);\r\n          }\r\n        }\r\n\r\n        selectedRecord[fieldName] = comboData;\r\n        selectedRecord[\"sclientcatname\"] = comboData.item[\"sclientcatname\"];\r\n        this.props.getQuotationClientCategoryComboService({\r\n\r\n          inputData: {\r\n            userinfo: this.props.Login.userInfo,\r\n            sdisplayname: selectedRecord.nclientcatcode.label,\r\n            primarykey: selectedRecord.nclientcatcode.value,\r\n          }\r\n\r\n        }, selectedRecord);\r\n      }\r\n\r\n      if(fieldName===\"nclientcode\"){\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        if (selectedRecord.nclientcode) {\r\n          if (parseInt(comboData.value) !== parseInt(selectedRecord.nclientcode.value)) {\r\n            // selectedRecord.nusercode={};\r\n            delete (selectedRecord.sclientsiteaddress);\r\n            \r\n          }\r\n        }\r\n\r\n        selectedRecord[fieldName] = comboData;\r\n        selectedRecord[\"sclientname\"] = comboData.item[\"sclientname\"];\r\n        this.props.getQuotaionClientComboService({\r\n\r\n          inputData: {\r\n            userinfo: this.props.Login.userInfo,\r\n            sdisplayname: selectedRecord.nclientcode.label,\r\n            primarykey: selectedRecord.nclientcode.value,\r\n          }\r\n\r\n        }, selectedRecord);\r\n      }\r\n\r\n      if(fieldName===\"nclientsitecode\"){\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        if (selectedRecord.nclientsitecode) {\r\n          if (parseInt(comboData.value) !== parseInt(selectedRecord.nclientsitecode.value)) {\r\n            // selectedRecord.nusercode={};\r\n            delete (selectedRecord.sclientsiteaddress);\r\n            \r\n          }\r\n        }\r\n\r\n        selectedRecord[fieldName] = comboData;\r\n        selectedRecord[\"sclientsitename\"] = comboData.item[\"sclientsitename\"];\r\n        this.props.getQuotaionClientSiteComboService({\r\n\r\n          inputData: {\r\n            userinfo: this.props.Login.userInfo,\r\n            sdisplayname: selectedRecord.nclientsitecode.label,\r\n            primarykey: selectedRecord.nclientsitecode.value,\r\n            nclientcode: selectedRecord.nclientcode.value,\r\n          }\r\n\r\n        }, selectedRecord);\r\n      }\r\n\r\n      if(fieldName===\"nproductcatcode\"){ //\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        if (selectedRecord.nproductcatcode) {\r\n          if (parseInt(comboData.value) !== parseInt(selectedRecord.nproductcatcode.value)) {\r\n            // selectedRecord.nusercode={};\r\n            delete (selectedRecord.nproductcode);\r\n            \r\n          }\r\n        }\r\n\r\n        selectedRecord[fieldName] = comboData;\r\n        selectedRecord[\"sproductcatname\"] = comboData.item[\"sproductcatname\"];\r\n        this.props.getQuotaionProductCategoryComboService({\r\n\r\n          inputData: {\r\n            userinfo: this.props.Login.userInfo,\r\n            sdisplayname: selectedRecord.nproductcatcode.label,\r\n            primarykey: selectedRecord.nproductcatcode.value,\r\n          }\r\n\r\n        }, selectedRecord);\r\n      }\r\n\r\n        break;\r\n\r\n      case 2:\r\n\r\n        // const selectedRecordfilter = this.state.selectedRecordfilter || {};\r\n        // selectedRecordfilter[fieldName] = comboData;\r\n        // this.setState({ selectedRecordfilter });\r\n        // break;\r\n\r\n        // const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        break;\r\n        \r\n      case 3:\r\n\r\n        selectedRecord[fieldName] = comboData;\r\n\r\n        if ( selectedRecord[fieldName]==null){\r\n          \r\n          selectedRecord[fieldName]=[];\r\n\r\n        }else{\r\n\r\n          if(fieldName===\"ndiscountbandcode\"){\r\n\r\n            const VatAmount=(this.state.selectedRecord.VatAmount === undefined ? 0.00 : this.state.selectedRecord.VatAmount)\r\n            selectedRecord[\"DiscountAmount\"]=parseFloat((this.props.Login.QuotationGrossAmount[0].ntotalgrossamount * (selectedRecord.ndiscountbandcode.item.namount/100)).toFixed(2));\r\n  //        selectedRecord[\"TotalNetAmount\"]=this.props.Login.QuotationGrossAmount[0].ntotalgrossamount+(this.state.selectedRecord.DiscountAmount-VatAmount);\r\n            selectedRecord[\"TotalNetAmount\"]=parseFloat(((this.props.Login.QuotationGrossAmount[0].ntotalgrossamount+VatAmount)-this.state.selectedRecord.DiscountAmount).toFixed(2));\r\n            selectedRecord[\"ndiscountpercentage\"]= selectedRecord.ndiscountbandcode.item.namount;\r\n  \r\n  \r\n            }else if(fieldName===\"nvatbandcode\"){\r\n  \r\n              selectedRecord[\"VatAmount\"]=parseFloat((this.props.Login.QuotationGrossAmount[0].ntotalgrossamount * (selectedRecord.nvatbandcode.item.namount/100)).toFixed(2));\r\n    //        selectedRecord[\"TotalNetAmount\"]=this.props.Login.QuotationGrossAmount[0].ntotalgrossamount+(selectedRecord.DiscountAmount-this.state.selectedRecord.VatAmount);\r\n              selectedRecord[\"TotalNetAmount\"]=parseFloat(((this.props.Login.QuotationGrossAmount[0].ntotalgrossamount+this.state.selectedRecord.VatAmount)-selectedRecord.DiscountAmount).toFixed(2));\r\n              selectedRecord[\"nvatpercentage\"] = selectedRecord.nvatbandcode.item.namount; \r\n  \r\n            }\r\n        }\r\n       \r\n        this.setState({ selectedRecord });\r\n        break;\r\n\r\n        case 4:\r\n         \r\n          if(fieldName===\"nprojecttypecode\"){\r\n            if (selectedRecord.nprojecttypecode) {\r\n              if (parseInt(comboData.value) !== parseInt(selectedRecord.nprojecttypecode.value)) {\r\n                delete (selectedRecord.nprojectmastercode);\r\n                delete (selectedRecord.sprojecttitle);\r\n                delete (selectedRecord.srfwdate);\r\n                delete (selectedRecord.suserrolename);\r\n                delete (selectedRecord.susername);\r\n              }\r\n            }\r\n    \r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"sprojecttypename\"] = comboData.item[\"sprojecttypename\"];\r\n            this.props.getProjectTypeComboService({\r\n    \r\n              inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                sdisplayname: selectedRecord.nprojecttypecode.label,\r\n                primarykey: selectedRecord.nprojecttypecode.value,\r\n              }\r\n    \r\n            }, selectedRecord);\r\n          }\r\n\r\n          if(fieldName===\"nprojectmastercode\"){\r\n            if (selectedRecord.nprojectmastercode) {\r\n              if (parseInt(comboData.value) !== parseInt(selectedRecord.nprojectmastercode.value)) {\r\n                delete (selectedRecord.sprojecttitle);\r\n                delete (selectedRecord.srfwdate);\r\n                delete (selectedRecord.suserrolename);\r\n                delete (selectedRecord.susername);\r\n              }\r\n            }\r\n    \r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"sprojectcode\"] = comboData.item[\"sprojectcode\"];\r\n            this.props.getProjectCodeComboService({\r\n    \r\n              inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                sdisplayname: selectedRecord.nprojectmastercode.label,\r\n                primarykey: selectedRecord.nprojectmastercode.value,\r\n              }\r\n    \r\n            }, selectedRecord);\r\n          }\r\n\r\n          break;\r\n          case 5:\r\n\r\n            let selectedRecordindex=selectedRecord.findIndex((item) => (item.nquotationtestcode === nquotationtestcode ? item : \"\"));\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n            if (selectedRecord[fieldName]==null){\r\n              \r\n              selectedRecord[selectedRecordindex][fieldName]=[];\r\n    \r\n            }else{\r\n\r\n            //  selectedRecord[fieldName] = comboData;\r\n            //  selectedRecord[\"namount\"]=comboData.item.namount;\r\n            let str=selectedRecord[selectedRecordindex];\r\n            let discountamount = parseFloat(( (str.ncost * str.nnoofsamples) * (comboData.item.namount/100)).toFixed(2));\r\n            let count= ( str.ncost * str.nnoofsamples ) - ( discountamount ); \r\n            selectedRecord[selectedRecordindex]={...str, ntotalamount:parseFloat((count).toFixed(2)), namount:comboData.item.namount , ndiscountbandcode:comboData.item.ndiscountbandcode}\r\n            selectedRecord[selectedRecordindex][\"ndiscountbandcode\"]={label :comboData.item.sdiscountbandname,value:comboData.item.ndiscountbandcode}\r\n\r\n          //    selectedRecord[selectedRecordindex][\"ndiscountbandcode\"]=  {...selectedRecord[selectedRecordindex],\r\n\r\n          //     label :comboData.item.sdiscountbandname,\r\n          //     value:comboData.item.ndiscountbandcode\r\n              \r\n          // }\r\n            }\r\n          \r\n\r\n           this.setState(selectedRecord);\r\n\r\n          break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  // onNumericInputChange = (event, primaryFieldKey) => {\r\n  //   // console.log(\"value:\", value, name);\r\n  //    const selectedRecord = this.state.selectedRecord || {};\r\n  //    if (event.target.name === \"nnoofsamples\") {\r\n  //     const index = selectedRecord.findIndex(item=>item.nquotationtestcode === primaryFieldKey);\r\n  //        if (/^-?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n    \r\n  //         selectedRecord[index][event.target.name] = event.target.value;\r\n  //        }\r\n  //    }\r\n  //    else {\r\n  //     selectedRecord[event.target.name] = event.target.value;\r\n  //    }\r\n  \r\n  //    this.setState({ selectedRecord });\r\n  // }\r\n\r\n  onNumericInputChange = (value, name,primaryFieldKey) => {\r\n\r\n     const selectedRecord = this.state.selectedRecord || {};\r\n     const index = selectedRecord.findIndex(item=>item.nquotationtestcode === primaryFieldKey);\r\n     selectedRecord[index][name] = value;\r\n   \r\n\r\n     this.setState({ selectedRecord });\r\n }\r\n\r\n  onInputOnChange = (event, primaryFieldKey) => {\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n\r\n    if (event.target.name === 'snotes' || event.target.name === 'stestplatform' || event.target.name === 'squotationleadtime') {\r\n\r\n      const index = selectedRecord.findIndex(item=>item.nquotationtestcode === primaryFieldKey);\r\n      selectedRecord[index][event.target.name] = event.target.value;\r\n\r\n    }\r\n    else {   \r\n        if(primaryFieldKey && (event.target.name === \"ncost\" || event.target.name === \"nnoofsamples\" || event.target.name === \"ntotalamount\")){\r\n            const index = selectedRecord.findIndex(item=>item.nquotationtestcode === primaryFieldKey);\r\n            // if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value)){\r\n              if (/^-?\\d*?$/.test(event.target.value)) {\r\n                selectedRecord[index][event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        else{      \r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }           \r\n    }\r\n    this.setState({ selectedRecord });\r\n}\r\n\r\nonnetAmountEvent = (nquotationtestcode) => {\r\n\r\n  let selectedRecord=this.state.selectedRecord;\r\n  let selectedRecordindex=selectedRecord.findIndex((item) => (item.nquotationtestcode === nquotationtestcode ? item : \"\"));\r\n  let str=selectedRecord[selectedRecordindex];\r\n//  let count= (str.ncost * str.nnoofsamples)-str.namount; \r\n  let discountamount = parseFloat(( (str.ncost * str.nnoofsamples) * (str.namount/100)).toFixed(2));\r\n  let count= ( str.ncost * str.nnoofsamples ) - ( discountamount ); \r\n  // selectedRecord[selectedRecordindex]={...str,ntotalamount:count}\r\n  selectedRecord[selectedRecordindex]={...str,ntotalamount: parseFloat((count).toFixed(2))}\r\n\r\n  this.setState(selectedRecord);\r\n\r\n  \r\n} \r\n\r\n\r\n\r\n  approveQuotation = (methodUrl, selectedQuotation, operation, ncontrolCode) => {\r\n    if (selectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\r\n\r\n      const postParam = {\r\n        inputListName: \"Quotation\",\r\n        selectedObject: \"SelectedQuotation\",\r\n        primaryKeyField: \"nquotationcode\",\r\n        primaryKeyValue: selectedQuotation.nquotationcode,\r\n        fetchUrl: \"quotation/getQuotation\",\r\n        fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n      };\r\n\r\n      const inputParam = {\r\n        classUrl: this.props.Login.inputParam.classUrl,\r\n        methodUrl, postParam,\r\n        inputData: {\r\n          \"userinfo\": this.props.Login.userInfo, \r\n          \"quotation\": selectedQuotation\r\n        },\r\n        operation,\r\n        isClearSearch: this.props.Login.isClearSearch\r\n      }\r\n\r\n      const masterData = this.props.Login.masterData;\r\n\r\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: {\r\n            loadEsign: true, screenData: { inputParam, masterData },\r\n            openModal: true, screenName: \"IDS_QUOTATION\", operation\r\n          }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n      }\r\n      else {\r\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n      }\r\n    }else if(selectedQuotation.ntransactionstatus === transactionStatus.APPROVED){\r\n\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYAPPROVED\" }));\r\n\r\n    }else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }));\r\n    }\r\n\r\n  }\r\n\r\n  \r\n  onTabChange = (tabProps) => {\r\n    const screenName = tabProps.screenName;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { screenName },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n\r\n  /*\r\n  dataStateChange = (event) => {\r\n    this.setState({\r\n      dataResult: process(\r\n        this.props.Login.masterData[\"selectedSection\"],\r\n        event.dataState\r\n      ),\r\n      sectionDataState: event.dataState,\r\n    });\r\n  };\r\n*/\r\n  dataStateChange = (event) => {\r\n    this.setState({\r\n      dataResult: process(this.state.data, event.dataState),\r\n      dataState: event.dataState\r\n    });\r\n  }\r\n\r\n  historydataStateChange = (event) => {\r\n    this.setState({\r\n      dataResult: process(this.state.data, event.historydataState),\r\n      historydataState: event.historydataState\r\n    });\r\n  }\r\n\r\n  ConfirmDelete = (selectedQuotation, operation, deleteId, screenName) => {\r\n    this.confirmMessage.confirm(\r\n      \"deleteMessage\",\r\n      this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n      () =>\r\n        this.DeleteQuotation(\r\n          screenName,\r\n          selectedQuotation,\r\n          operation,\r\n          deleteId\r\n\r\n        )\r\n    );\r\n  };\r\n  reloadData = () => {\r\n    this.searchRef.current.value = \"\";\r\n\r\n//    if (Object.values(this.props.Login.masterData.SelectedQuotation).length && this.props.Login.masterData.SelectedQuotation !== undefined) {\r\n      if (this.props.Login.masterData.SelectedQuotation !== undefined) {\r\n      let inputParam = {\r\n        inputData: {\r\n     \r\n          userinfo: this.props.Login.userInfo,\r\n          \r\n        },\r\n        classUrl: \"quotation\",\r\n        methodUrl: \"Quotation\",\r\n      };\r\n\r\n      this.props.getreloadQuotation(inputParam);\r\n\r\n    } \r\n    // else {\r\n    //   toast.warn(\r\n    //     this.props.intl.formatMessage({\r\n    //       id: \"IDS_PROJECTTYPENOTAVAILABLE\",\r\n    //     })\r\n    //   );\r\n    // }\r\n  };\r\n\r\n  DeleteQuotationTest = (deleteParam) =>{\r\n\r\n  \r\n    deleteParam.selectedRecord[\"nclientcode\"]=this.props.Login.masterData.SelectedQuotation.nclientcode;\r\n    deleteParam.selectedRecord[\"nprojectmastercode\"]=this.props.Login.masterData.SelectedQuotation.nprojectmastercode;\r\n\r\n    const postParam = { \r\n      \r\n      inputListName: \"QuotationList\", selectedObject: \"SelectedQuotation\",\r\n      primaryKeyField: \"nquotationcode\", primaryKeyValue: deleteParam.selectedRecord.nquotationtestcode,\r\n      fetchUrl: \"quotation/getQuotationTest\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo }\r\n  };\r\n\r\n    const inputParam = {\r\n        classUrl: \"quotation\",\r\n        methodUrl: \"QuotationPrice\",\r\n        postParam,\r\n\r\n        inputData: {\r\n            \"QuotationTestPrice\": deleteParam.selectedRecord,//.dataItem,\r\n      //      \"npriceversioncode\":this.props.Login.masterData.SelectedTestPriceVersion.npriceversioncode,\r\n            \"userinfo\": this.props.Login.userInfo,\r\n\r\n        },\r\n        operation:\"delete\",\r\n     //  priceDataState:this.state.priceDataState\r\n    }\r\n\r\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                openModal: true, screenName: this.props.intl.formatMessage({ id: \"IDS_TESTPRICE\" }),\r\n                operation:deleteParam.operation\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else {\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    }\r\n}\r\n\r\n\r\n  closeModal = () => {\r\n    let loadEsign = this.props.Login.loadEsign;\r\n\r\n    let openModal = this.props.Login.openModal;\r\n    let selectedRecord = this.state.selectedRecord;\r\n//    let selectedRecord = this.state.selectedRecord;\r\n    if (this.props.Login.loadEsign) {\r\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\") {\r\n            loadEsign = false;\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        else {\r\n            loadEsign = false;\r\n            selectedRecord['esignpassword'] = '';\r\n            selectedRecord['esigncomments'] = '';\r\n            selectedRecord['esignreason'] = '';\r\n        } \r\n    }\r\n    else {\r\n        openModal = false;\r\n        selectedRecord = {};\r\n    }\r\n\r\n    const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { openModal, loadEsign, selectedRecord }\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n\r\n}\r\n\r\n  componentDidUpdate(previousProps) {\r\n    let {\r\n      selectedRecord,\r\n      userRoleControlRights,\r\n      controlMap,\r\n      filterData,dataResult\r\n      \r\n    } = this.state;\r\n\r\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n      selectedRecord = this.props.Login.selectedRecord;\r\n      this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n//   if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n//     userRoleControlRights = [];\r\n//     if (this.props.Login.userRoleControlRights) {\r\n//       this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode\r\n//       ] &&\r\n//         Object.values(\r\n//           this.props.Login.userRoleControlRights[\r\n//           this.props.Login.userInfo.nformcode\r\n//           ]\r\n//         ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n//     }\r\n//     controlMap = getControlMap(\r\n//       this.props.Login.userRoleControlRights,\r\n//       this.props.Login.userInfo.nformcode\r\n//     );\r\n//     // this.setState({ controlMap, userRoleControlRights });\r\n\r\n\r\n//     this.setState({\r\n//       userRoleControlRights, controlMap, data: this.props.Login.masterData.QuotationTest,\r\n//       dataResult: process(this.props.Login.masterData.QuotationTest, this.state.dataState)\r\n//   });\r\n//   }\r\n//   else {\r\n\r\n//     let {dataState}=this.state;\r\n//         if(this.state.dataResult !== undefined){ \r\n//             if(this.state.dataResult.data){\r\n//                 if(this.state.dataResult.data.length ===1){\r\n//                     let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n//                     this.state.dataState.skip\r\n//                     dataState={skip:skipcount,take:this.state.dataState.take}\r\n//                 }\r\n//               } \r\n\r\n//               this.setState({\r\n//                 dataResult: process( this.props.Login.masterData || [], dataState),\r\n//                 dataState\r\n//           });\r\n//     }\r\n    \r\n// }\r\n\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n        userRoleControlRights = [];\r\n        if (this.props.Login.userRoleControlRights) {\r\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode\r\n          ] &&\r\n            Object.values(\r\n              this.props.Login.userRoleControlRights[\r\n              this.props.Login.userInfo.nformcode\r\n              ]\r\n            ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n        }\r\n        controlMap = getControlMap(\r\n          this.props.Login.userRoleControlRights,\r\n          this.props.Login.userInfo.nformcode\r\n        );\r\n        // this.setState({ controlMap, userRoleControlRights });\r\n  \r\n  \r\n        this.setState({\r\n          userRoleControlRights, controlMap, data: this.props.Login.masterData.QuotationTest,\r\n          dataResult: process(this.props.Login.masterData.QuotationTest || [], this.state.dataState),\r\n\r\n          // QuotationHistorydataResult: process(this.props.Login.masterData.QuotationHistory || [], this.state.historydataState)\r\n          // QuotationHistorydata: this.props.Login.masterData.QuotationHistory, QuotationHistorydataResult: process(this.props.Login.masterData.QuotationHistory || [], this.state.dataState)\r\n      });\r\n      \r\n   \r\n      \r\n      }\r\n      else {\r\n  \r\n        let {dataState}=this.state;\r\n        // let {historydataState}=this.state;\r\n            if(this.state.dataResult !== undefined){ \r\n                if(this.state.dataResult.data){\r\n                    if(this.state.dataResult.data.length ===1){\r\n                        let skipcount=this.state.dataState.skip>0?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                  } \r\n  \r\n                  this.setState({\r\n                    data: this.props.Login.masterData.QuotationTest,\r\n                    dataResult: process( this.props.Login.masterData.QuotationTest || [], dataState),\r\n                    dataState \r\n                    // QuotationHistorydata: this.props.Login.masterData.QuotationHistory, QuotationHistorydataResult: process(this.props.Login.masterData.QuotationHistory || [], this.state.dataState)\r\n\r\n              });\r\n        }\r\n\r\n  //       if(this.state.QuotationHistorydataResult !== undefined){ \r\n  //         if(this.state.QuotationHistorydataResult.data){\r\n  //             if(this.state.QuotationHistorydataResult.data.length ===1){\r\n  //                 let skipcount=this.state.historydataState.skip>0?(this.state.historydataState.skip-this.state.historydataState.take):\r\n  //                 this.state.historydataState.skip\r\n  //                 historydataState={skip:skipcount,take:this.state.historydataState.take}\r\n  //             }\r\n  //           } \r\n\r\n  //           this.setState({\r\n  //             QuotationHistorydata: this.props.Login.masterData.QuotationHistory,\r\n  //             QuotationHistorydataResult: process( this.props.Login.masterData.QuotationHistory || [], historydataState),\r\n  //             historydataState \r\n  //             // QuotationHistorydata: this.props.Login.masterData.QuotationHistory, QuotationHistorydataResult: process(this.props.Login.masterData.QuotationHistory || [], this.state.dataState)\r\n\r\n  //       });\r\n  // }\r\n        \r\n    }\r\n      // dataResult = this.props.Login.masterData.QuotationTest;\r\n      // this.setState({\r\n      //   selectedRecord,dataResult\r\n      // });\r\n\r\n      // this.setState({ filterData });\r\n    }\r\n\r\n\r\n  }\r\n  \r\n  openFilter = () => {\r\n    let showFilter = !this.props.Login.showFilter;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  closeFilter = () => {\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter: false },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  \r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  callService,\r\n  crudMaster,\r\n  filterColumnData,\r\n  updateStore,\r\n  validateEsignCredential,\r\n  getQuotation,getProjectTypeComboService,\r\n  viewAttachment, addQuotation, getreloadQuotation, getQuotationAddTestService, getQuotationPricingEditService,\r\n   GrossQuotation,getQuotationClientCategoryComboService,getQuotaionClientComboService,getProjectCodeComboService ,getQuotaionProductCategoryComboService,getQuotaionClientSiteComboService \r\n})(injectIntl(Quotation));\r\n"]},"metadata":{},"sourceType":"module"}