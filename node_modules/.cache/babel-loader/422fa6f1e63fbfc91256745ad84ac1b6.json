{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\batchruncreation\\\\AddBatchCreation.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport MultiColumnComboSearch from '../../components/multi-column-combo-search/multi-column-combo-search';\n\nconst AddBatchCreation = props => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_SECTION\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    name: \"nsectioncode\",\n    optionId: \"nsectioncode\",\n    optionValue: \"ssectionname\" // className='form-control'\n    ,\n    options: props.Section,\n    value: props.selectedSection ? props.selectedSection : \"\",\n    isMandatory: true,\n    isMulti: false,\n    isSearchable: true //isDisabled={true}\n    ,\n    isDisabled: props.operation == \"update\" ? true : false,\n    alphabeticalSort: false,\n    isClearable: false // required={true}\n    ,\n    onChange: event => props.onComboChange(event, \"ssectionname\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 20\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    name: \"ntestcode\",\n    optionId: \"ntestcode\",\n    optionValue: \"stestsynonym\" // className='form-control'\n    ,\n    options: props.Test,\n    value: props.Test ? props.TestValue : \"\",\n    isMandatory: true,\n    isMulti: false,\n    isSearchable: true,\n    isDisabled: props.operation == \"update\" ? true : false,\n    alphabeticalSort: false,\n    isClearable: false,\n    required: true,\n    onChange: event => props.onComboChange(event, \"stestname\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_PRODUCT\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    name: \"nproductcode\",\n    optionId: \"nproductcode\",\n    optionValue: \"sproductname\",\n    className: \"form-control\",\n    options: props.product,\n    value: props.selectedProduct ? props.selectedProduct : \"\",\n    isMandatory: true,\n    isMulti: false,\n    isSearchable: true,\n    isDisabled: false,\n    alphabeticalSort: false,\n    isClearable: false,\n    required: true,\n    onChange: event => props.onComboChange(event, \"sproductname\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_INSTRUMENTCATEGORY\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    name: \"ninstrumentcatcode\",\n    optionId: \"ninstrumentcatcode\",\n    optionValue: \"sinstrumentcatname\",\n    className: \"form-control\",\n    options: props.InstrumentCategory,\n    value: props.InstrumentCategory ? props.selectedInstrumentCategory : \"\",\n    isMandatory: true,\n    isMulti: false,\n    isSearchable: true,\n    required: true,\n    isDisabled: false,\n    alphabeticalSort: false,\n    isClearable: false,\n    onChange: event => props.onComboChange(event, \"sinstrumentcatname\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    name: \"ninstrumentcode\",\n    optionId: \"ninstrumentcode\",\n    optionValue: \"sinstrumentname\",\n    className: \"form-control\",\n    options: props.Instrument,\n    value: props.Instrument ? props.selectedInstrument : \"\",\n    isMandatory: true,\n    isMulti: false,\n    isSearchable: true,\n    isDisabled: false,\n    alphabeticalSort: false,\n    isClearable: false,\n    required: true,\n    onChange: event => props.onComboChange(event, \"sinstrumentname\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }))))));\n};\n\nexport default injectIntl(AddBatchCreation);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/batchruncreation/AddBatchCreation.jsx"],"names":["React","injectIntl","Row","Col","FormInput","FormTextarea","FormSelectSearch","DateTimePicker","FormNumericInput","MultiColumnComboSearch","AddBatchCreation","props","intl","formatMessage","id","Section","selectedSection","operation","event","onComboChange","Test","TestValue","product","selectedProduct","InstrumentCategory","selectedInstrumentCategory","Instrument","selectedInstrument"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport MultiColumnComboSearch from '../../components/multi-column-combo-search/multi-column-combo-search';\r\n\r\nconst AddBatchCreation = (props) =>{    \r\n       return (<>\r\n           <Row>                                \r\n                <Col md={12}>\r\n                   <Row>\r\n                   <Col md={12}>\r\n                        <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_SECTION\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                name=\"nsectioncode\"\r\n                                optionId=\"nsectioncode\"\r\n                                optionValue=\"ssectionname\"\r\n                                // className='form-control'\r\n                                options={props.Section}\r\n                                value={props.selectedSection ? props.selectedSection : \"\"}\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isSearchable={true}\r\n                                //isDisabled={true}\r\n                                isDisabled={props.operation == \"update\" ? true : false}\r\n                                alphabeticalSort={false}\r\n                                isClearable={false}\r\n                                // required={true}\r\n                                onChange={(event) => props.onComboChange(event, \"ssectionname\")}\r\n                            />\r\n                        </Col>\r\n                        \r\n                   <Col md={12}>\r\n                        <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                name=\"ntestcode\"\r\n                                optionId=\"ntestcode\"\r\n                                optionValue=\"stestsynonym\"\r\n                                // className='form-control'\r\n                                options={props.Test}\r\n                                value={props.Test ? props.TestValue : \"\"}\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isSearchable={true}\r\n                                isDisabled={props.operation == \"update\" ? true : false}\r\n                                alphabeticalSort={false}\r\n                                isClearable={false}\r\n                                required={true}\r\n                                onChange={(event) => props.onComboChange(event, \"stestname\")}\r\n                            />\r\n                        </Col>\r\n\r\n                        <Col md={12}>\r\n                        <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_PRODUCT\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                name=\"nproductcode\"\r\n                                optionId=\"nproductcode\"\r\n                                optionValue=\"sproductname\"\r\n                                className='form-control'\r\n                                options={props.product}\r\n                                value={props.selectedProduct ? props.selectedProduct : \"\"}\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isSearchable={true}\r\n                                isDisabled={false}\r\n                                alphabeticalSort={false}\r\n                                isClearable={false}\r\n                                required={true}\r\n                                onChange={(event) => props.onComboChange(event, \"sproductname\")}\r\n                            />\r\n                     </Col>\r\n\r\n                        <Col md={12}>\r\n                        <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORY\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                name=\"ninstrumentcatcode\"\r\n                                optionId=\"ninstrumentcatcode\"\r\n                                optionValue=\"sinstrumentcatname\"\r\n                                className='form-control'\r\n                                options={props.InstrumentCategory}\r\n                                value={props.InstrumentCategory ? props.selectedInstrumentCategory : \"\"}\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isSearchable={true}\r\n                                required={true}\r\n                                isDisabled={false}\r\n                                alphabeticalSort={false}\r\n                                isClearable={false}\r\n                                onChange={(event) => props.onComboChange(event, \"sinstrumentcatname\")}\r\n                            />\r\n                        </Col> \r\n\r\n                        \r\n                        <Col md={12}>\r\n                        <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                name=\"ninstrumentcode\"\r\n                                optionId=\"ninstrumentcode\"\r\n                                optionValue=\"sinstrumentname\"\r\n                                className='form-control'\r\n                                options={props.Instrument}\r\n                                value={props.Instrument ? props.selectedInstrument : \"\"}\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isSearchable={true}\r\n                                isDisabled={false}\r\n                                alphabeticalSort={false}\r\n                                isClearable={false}\r\n                                required={true}\r\n                                onChange={(event) => props.onComboChange(event, \"sinstrumentname\")}\r\n                            />\r\n                        </Col>    \r\n\r\n                        {/* <Col md={12}>\r\n                        <FormSelectSearch\r\n                                formLabel={props.intl.formatMessage({ id: \"IDS_PRODUCT\" })}\r\n                                placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                name=\"nproductcode\"\r\n                                optionId=\"nproductcode\"\r\n                                optionValue=\"sproductname\"\r\n                                className='form-control'\r\n                                options={props.product}\r\n                                value={props.selectedProduct ? props.selectedProduct : \"\"}\r\n                                isMandatory={true}\r\n                                isMulti={false}\r\n                                isSearchable={true}\r\n                                isDisabled={false}\r\n                                alphabeticalSort={false}\r\n                                isClearable={false}\r\n                                required={true}\r\n                                onChange={(event) => props.onComboChange(event, \"sproductname\")}\r\n                            />\r\n                     </Col> */}\r\n                   </Row>\r\n               </Col>      \r\n        </Row>   \r\n       \r\n      </>\r\n       )\r\n   }\r\n   export default injectIntl(AddBatchCreation);\r\n"]},"metadata":{},"sourceType":"module"}