{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\product\\\\Product.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { process } from '@progress/kendo-data-query';\nimport { callService, crudMaster, updateStore, getProductComboService, validateEsignCredential, filterColumnData } from '../../actions';\nimport { Col, Row } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { injectIntl } from 'react-intl';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport AddProduct from './AddProduct';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign } from '../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport Esign from '../audittrail/Esign';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport './product.css';\n\nclass Product extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      ;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit            \n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n      let selectedId = null;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        dataState = this.state.dataState;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n        selectedId = this.props.Login.selectedRecord.nproductcode;\n      } else {\n        //add               \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n      }\n\n      inputData[\"product\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\n      inputData[\"product\"][\"nproductcatcode\"] = this.state.selectedRecord[\"nproductcatcode\"] ? this.state.selectedRecord[\"nproductcatcode\"].value : \"\";\n      inputData[\"product\"][\"sproductname\"] = this.state.selectedRecord[\"sproductname\"] ? this.state.selectedRecord[\"sproductname\"] : \"\";\n      inputData[\"product\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_PRODUCTCATEGORY\",\n      \"dataField\": \"sproductcatname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PRODUCTNAME\",\n      \"dataField\": \"sproductname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYSTATUS\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const addParam = {\n      screenName: \"Product\",\n      primaryeyField: \"nproductcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      operation: \"update\",\n      primaryKeyField: \"nproductcode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nproductcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.getProductComboService,\n      editParam: editParam,\n      deleteRecord: this.deleteRecord,\n      deleteParam: deleteParam,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.getProductComboService(addParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PRODUCTCATEGORY\",\n        \"dataField\": \"nproductcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddProduct, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        productCategoryList: this.props.Login.productCategoryList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  getProductComboService,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData\n})(injectIntl(Product));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/product/Product.jsx"],"names":["React","Component","connect","process","callService","crudMaster","updateStore","getProductComboService","validateEsignCredential","filterColumnData","Col","Row","toast","injectIntl","AddProduct","SlideOutModal","getControlMap","showEsign","DEFAULT_RETURN","Esign","transactionStatus","ListWrapper","DataGrid","Product","constructor","props","dataStateChange","event","setState","dataResult","state","data","dataState","closeModal","loadEsign","Login","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","onInputOnChange","target","type","name","checked","YES","NO","value","onComboChange","comboData","fieldName","deleteRecord","deleteParam","inputParam","classUrl","methodUrl","displayName","inputData","toLowerCase","userInfo","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","undefined","JSON","parse","stringify","nproductcode","nmastersitecode","esignNeeded","validateEsign","sreason","password","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","extractedColumnList","getDerivedStateFromProps","warn","render","addId","has","concat","get","ncontrolcode","editId","addParam","primaryeyField","primaryKeyValue","editParam","primaryKeyField","productCategoryList","componentDidUpdate","previousProps","Object","values","map","item","push","componentWillUnmount","modalName","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport {\r\n    callService, crudMaster, updateStore, getProductComboService, validateEsignCredential, filterColumnData\r\n} from '../../actions'\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl } from 'react-intl';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport AddProduct from './AddProduct';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport Esign from '../audittrail/Esign';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport './product.css';\r\n\r\nclass Product extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"sproductcatname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"sdisplaystatus\", \"width\": \"200px\" }\r\n        ];\r\n\r\n\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: \"Product\", primaryeyField: \"nproductcode\", primaryKeyValue: undefined,\r\n            operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation: \"update\",\r\n            primaryKeyField: \"nproductcode\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { operation: \"delete\" };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nproductcode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.getProductComboService}\r\n                                    editParam={editParam}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={deleteParam}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.getProductComboService(addParam)}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={[\r\n                            { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                            { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddProduct\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                productCategoryList={this.props.Login.productCategoryList || []}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n                            />}\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData, dataState), dataState\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        //add / edit            \r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            dataState = this.state.dataState;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n            selectedId = this.props.Login.selectedRecord.nproductcode;\r\n        } else {\r\n            //add               \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n        }\r\n\r\n        inputData[\"product\"][\"ndefaultstatus\"] = this.state.selectedRecord[\"ndefaultstatus\"] ? this.state.selectedRecord[\"ndefaultstatus\"] : transactionStatus.NO;\r\n        inputData[\"product\"][\"nproductcatcode\"] = this.state.selectedRecord[\"nproductcatcode\"] ? this.state.selectedRecord[\"nproductcatcode\"].value : \"\";\r\n        inputData[\"product\"][\"sproductname\"] = this.state.selectedRecord[\"sproductname\"] ? this.state.selectedRecord[\"sproductname\"] : \"\";\r\n        inputData[\"product\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : \"\";\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, selectedId, dataState,\r\n            operation: this.props.Login.operation, saveType, formRef\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, getProductComboService,\r\n    updateStore, validateEsignCredential, filterColumnData\r\n})(injectIntl(Product));"]},"metadata":{},"sourceType":"module"}