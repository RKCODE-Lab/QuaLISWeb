{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, rearrangeDateFormat, formatInputDate } from '../components/CommonScript';\nimport { transactionStatus } from '../components/Enumeration';\nimport { intl } from \"../components/App\";\nexport const getreloadQuotation = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/quotation/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      const masterData = response.data;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          dataState: undefined,\n          masterData: { ...masterData // quotation: inputParam.inputData.quotation\n\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function getClientCategoryComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/client/getClientByCategory\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nclientcatcode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let Client, sclientsiteaddress;\n      let SelectedClient = [];\n      const usertMap = constructOptionList(response[0].data.Client || [], \"nclientcode\", \"sclientname\", undefined, undefined, false);\n      Client = usertMap.get(\"OptionList\"); // SelectedClient=response[0].data.selectedClient;\n      //  sclientsiteaddress= response[0].data.selectedClientSite.saddress1;\n      // selectedRecord={...selectedRecord,...response[0].data.selectedClient}\n      // selectedRecord={...selectedRecord,...response[0].data.selectedClientSite.saddress1} \n\n      selectedRecord[\"nclientcode\"] = {\n        label: response[0].data.selectedClient.sclientname,\n        value: response[0].data.selectedClient.nclientcode,\n        item: response[0].data.selectedClient\n      }; // selectedRecord[\"nclientcode\"]=response[0].data.selectedClient.nclientcode;\n      // selectedRecord[\"sclientname\"]=response[0].data.selectedClient.sclientname;\n\n      selectedRecord[\"sclientsiteaddress\"] = response[0].data.selectedClientSite.saddress1; // selectedRecord={response[0].data.selectedClientSite.saddress1}\n\n      selectedRecord = { ...selectedRecord\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Client,\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          sclientsiteaddress,\n          SelectedClient\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getQuotaionClientComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/client/getSelectedClientDetail\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nclientcode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let sclientsiteaddress;\n      let SelectedClient = []; // SelectedClient=response[0].data.selectedClient;\n      // sclientsiteaddress= response[0].data.selectedClientSite.saddress1;\n\n      selectedRecord[\"sclientname\"] = response[0].data.selectedClient.sclientname;\n      selectedRecord[\"sclientsiteaddress\"] = response[0].data.selectedClientSite.saddress1;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          sclientsiteaddress,\n          SelectedClient\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getProjectTypeComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/projectmaster/getApprovedProjectMasterByProjectType\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nprojecttypecode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let ProjectCode,\n          ProjectMaster = [];\n      let srfwdate;\n      const usertMap = constructOptionList(response[0].data.ProjectCode || [], \"nprojectmastercode\", \"sprojectcode\", undefined, undefined, false);\n      ProjectCode = usertMap.get(\"OptionList\");\n\n      if (ProjectCode.length > 0) {\n        selectedRecord[\"nprojectmastercode\"] = {\n          label: response[0].data.SelectedProjectCode.sprojectcode,\n          value: response[0].data.SelectedProjectCode.nprojectmastercode,\n          item: response[0].data.SelectedProjectCode\n        };\n        srfwdate = rearrangeDateFormat(methodParam.inputData.userinfo, response[0].data.Projectmaster[0].srfwdate); //  srfwdate=response[0].data.Projectmaster[0].srfwdate;\n\n        selectedRecord[\"sprojecttitle\"] = response[0].data.Projectmaster[0].sprojecttitle;\n        selectedRecord[\"srfwdate\"] = srfwdate;\n        selectedRecord[\"suserrolename\"] = response[0].data.Projectmaster[0].suserrolename;\n        selectedRecord[\"susername\"] = response[0].data.Projectmaster[0].susername; // selectedRecord[\"nuserrolecode\"]=response[0].data.Projectmaster[0].nuserrolecode;\n\n        selectedRecord[\"nusercode\"] = response[0].data.Projectmaster[0].nusercode; // ProjectMaster={...response[0].data.Projectmaster[0],srfwdate:srfwdate};\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined,\n          ProjectCode,\n          ProjectMaster\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getProjectCodeComboService(methodParam, selectedRecord) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/projectmaster/getActiveProjectMasterById\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nprojectmastercode\": methodParam.inputData.primarykey\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      // let ProjectMaster=[];  \n      let srfwdate; // srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.Projectmaster[0].srfwdate);\n      // ProjectMaster=response[0].data.SelectedProjectMaster;\n\n      selectedRecord[\"nprojectmastercode\"] = {\n        label: response[0].data.SelectedProjectMaster.sprojectcode,\n        value: response[0].data.SelectedProjectMaster.nprojectmastercode,\n        item: response[0].data.SelectedProjectMaster\n      }; // srfwdate=response[0].data.SelectedProjectMaster.srfwdate;\n      // ProjectMaster={...response[0].data.SelectedProjectMaster,srfwdate:srfwdate};\n\n      srfwdate = rearrangeDateFormat(methodParam.inputData.userinfo, response[0].data.SelectedProjectMaster.srfwdate);\n      selectedRecord[\"sprojecttitle\"] = response[0].data.SelectedProjectMaster.sprojecttitle;\n      selectedRecord[\"srfwdate\"] = srfwdate;\n      selectedRecord[\"suserrolename\"] = response[0].data.SelectedProjectMaster.suserrolename;\n      selectedRecord[\"susername\"] = response[0].data.SelectedProjectMaster.susername; // selectedRecord[\"nuserrolecode\"]=response[0].data.SelectedProjectMaster.nuserrolecode;\n\n      selectedRecord[\"nusercode\"] = response[0].data.SelectedProjectMaster.nusercode;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //Add Quotation\n\nexport const addQuotation = (operation, userInfo, ncontrolCode, selectedQuotation) => {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\" && selectedQuotation.ntransactionstatus !== transactionStatus.APPROVED) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      let selectedRecord = {};\n\n      if (operation === \"create\" || operation === \"update\") {\n        urlArray.push(rsapi.post(\"clientcategory/getClientCategory\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"client/getClientByCategory\", {\n          \"nclientcatcode\": 1,\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"projecttype/getProjectType\", {\n          \"userinfo\": userInfo\n        }));\n        urlArray.push(rsapi.post(\"quotation/getQuotationType\", {\n          \"userinfo\": userInfo\n        }));\n      }\n\n      if (operation === \"update\") {\n        urlArray.push(rsapi.post(\"quotation/getActiveQuotationById\", {\n          \"userinfo\": userInfo,\n          \"nquotationcode\": selectedQuotation.nquotationcode\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let testData = {};\n        let {\n          ClientCategory,\n          Client,\n          ProjectType,\n          ProjectMaster,\n          sclientsiteaddress,\n          QuotationType\n        } = [];\n\n        if (operation === \"create\") {\n          ClientCategory = constructOptionList(response[0].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\"); //       Client = constructOptionList(response[1].data || [], \"nclientcode\", \"sclientname\", false, false, true).get(\"OptionList\");\n\n          ProjectType = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\n          QuotationType = constructOptionList(response[3].data || [], \"nquotationtypecode\", \"squotationname\", false, false, true).get(\"OptionList\");\n          selectedRecord[\"dquotationdate\"] = new Date(); // selectedRecord[\"dquotationdate\"] = formatInputDate(new Date(), true);\n        } else if (operation === \"update\") {\n          const editData = response[4].data.SelectedQuotation;\n          ProjectMaster = response[4].data.SelectedQuotation; // sclientsiteaddress = editData.sclientsiteaddress;\n\n          selectedRecord[\"sclientsiteaddress\"] = editData.sclientsiteaddress;\n          selectedRecord[\"sinvoiceaddress\"] = editData.sinvoiceaddress;\n          selectedRecord[\"sprojecttitle\"] = editData.sprojecttitle;\n          selectedRecord[\"sdescription\"] = editData.sdescription;\n          selectedRecord[\"sdeviationremarks\"] = editData.sdeviationremarks;\n          selectedRecord[\"suserrolename\"] = editData.suserrolename;\n          selectedRecord[\"susername\"] = editData.susername; // selectedRecord[\"nuserrolecode\"] = editData.nuserrolecode;\n\n          selectedRecord[\"nusercode\"] = editData.nusercode;\n          selectedRecord = { ...selectedRecord\n          };\n          ClientCategory = constructOptionList(response[0].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\");\n          Client = constructOptionList(response[1].data.Client || [], \"nclientcode\", \"sclientname\", false, false, true).get(\"OptionList\");\n          ProjectType = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\n          QuotationType = constructOptionList(response[3].data || [], \"nquotationtypecode\", \"squotationname\", false, false, true).get(\"OptionList\");\n          selectedRecord[\"nprojecttypecode\"] = {\n            \"value\": editData[\"nprojecttypecode\"],\n            \"label\": editData[\"sprojecttypename\"]\n          };\n          selectedRecord[\"nclientcatcode\"] = {\n            \"value\": editData[\"nclientcatcode\"],\n            \"label\": editData[\"sclientcatname\"]\n          };\n          selectedRecord[\"nclientcode\"] = {\n            \"value\": editData[\"nclientcode\"],\n            \"label\": editData[\"sclientname\"]\n          };\n          selectedRecord[\"nquotationtypecode\"] = {\n            \"value\": editData[\"nquotationtypecode\"],\n            \"label\": editData[\"squotationname\"]\n          };\n          selectedRecord[\"nprojectmastercode\"] = {\n            \"value\": editData[\"nprojectmastercode\"],\n            \"label\": editData[\"sprojectcode\"]\n          };\n          selectedRecord[\"srfwdate\"] = rearrangeDateFormat(userInfo, editData.srfwdate);\n          selectedRecord[\"dquotationdate\"] = rearrangeDateFormat(userInfo, editData.squotationdate);\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            ProjectType,\n            operation: operation,\n            ClientCategory,\n            Client,\n            ProjectMaster,\n            sclientsiteaddress,\n            QuotationType,\n            screenName: \"IDS_QUOTATION\",\n            modalScreenSize: false,\n            selectedRecord,\n            ncontrolCode,\n            testData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTVERSION\"\n      }));\n    }\n  };\n};\nexport const GrossQuotation = (operation, userInfo, ncontrolCode, selectedQuotation) => {\n  return function (dispatch) {\n    //  if (operation === \"create\" || (operation === \"update\" && selectedQuotation.ntransactionstatus !== transactionStatus.RETIRED)) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    let selectedRecord = {};\n    urlArray.push(rsapi.post(\"discountband/getDiscountBand\", {\n      \"userinfo\": userInfo\n    }));\n    urlArray.push(rsapi.post(\"vatband/getVATBand\", {\n      \"userinfo\": userInfo\n    }));\n    urlArray.push(rsapi.post(\"quotation/getQuotationGrossAmount\", {\n      \"nquotationcode\": selectedQuotation.nquotationcode,\n      \"userinfo\": userInfo\n    }));\n    Axios.all(urlArray).then(response => {\n      let {\n        DiscountBand,\n        VATBand\n      } = [];\n      DiscountBand = constructOptionList(response[0].data || [], \"ndiscountbandcode\", \"sdiscountbandname\", false, false, true).get(\"OptionList\");\n      VATBand = constructOptionList(response[1].data || [], \"nvatbandcode\", \"svatbandname\", false, false, true).get(\"OptionList\");\n      const QuotationGrossAmount = response[2].data;\n\n      if (QuotationGrossAmount[0].ndiscountpercentage > 0 && QuotationGrossAmount[0].nvatpercentage > 0) {\n        selectedRecord[\"ndiscountpercentage\"] = QuotationGrossAmount[0].ndiscountpercentage;\n        selectedRecord[\"nvatpercentage\"] = QuotationGrossAmount[0].nvatpercentage;\n        selectedRecord[\"ndiscountamount\"] = QuotationGrossAmount[0].ndiscountamount;\n        selectedRecord[\"nvatamount\"] = QuotationGrossAmount[0].nvatamount;\n        selectedRecord[\"TotalNetAmount\"] = QuotationGrossAmount[0].ntotalgrossamount + selectedRecord[\"nvatamount\"] - selectedRecord[\"ndiscountamount\"];\n        selectedRecord[\"nvatbandcode\"] = {\n          \"value\": QuotationGrossAmount[0][\"nvatbandcode\"],\n          \"label\": QuotationGrossAmount[0][\"svatbandname\"]\n        };\n        selectedRecord[\"ndiscountbandcode\"] = {\n          \"value\": QuotationGrossAmount[0][\"ndiscountbandcode\"],\n          \"label\": QuotationGrossAmount[0][\"sdiscountbandname\"]\n        };\n      } else {\n        /*                 selectedRecord[\"ndiscountpercentage\"]= DiscountBand[0].item.namount;\r\n                         selectedRecord[\"nvatpercentage\"] = VATBand[0].item.namount;\r\n                           selectedRecord[\"nvatbandcode\"] = {\r\n                             \"value\": VATBand[0][\"value\"],\r\n                             \"label\": VATBand[0][\"label\"]\r\n                         };\r\n                           selectedRecord[\"ndiscountbandcode\"] = {\r\n                             \"value\": DiscountBand[0][\"value\"],\r\n                             \"label\": DiscountBand[0][\"label\"]\r\n                         }; \r\n                           selectedRecord[\"DiscountAmount\"]=QuotationGrossAmount[0].ntotalgrossamount * (DiscountBand[0].item.namount/100);\r\n                         selectedRecord[\"VatAmount\"]=QuotationGrossAmount[0].ntotalgrossamount * (VATBand[0].item.namount/100);\r\n          //             selectedRecord[\"TotalNetAmount\"]=QuotationGrossAmount[0].ntotalgrossamount+(selectedRecord[\"DiscountAmount\"]-selectedRecord[\"VatAmount\"]);\r\n                         selectedRecord[\"TotalNetAmount\"]=(QuotationGrossAmount[0].ntotalgrossamount+selectedRecord[\"VatAmount\"])-selectedRecord[\"DiscountAmount\"];\r\n        */\n        selectedRecord[\"ndiscountpercentage\"] = 0;\n        selectedRecord[\"nvatpercentage\"] = 0;\n        selectedRecord[\"nvatbandcode\"] = {\n          \"value\": -1,\n          \"label\": 'NA'\n        };\n        selectedRecord[\"ndiscountbandcode\"] = {\n          \"value\": -1,\n          \"label\": 'NA'\n        };\n        selectedRecord[\"DiscountAmount\"] = 0;\n        selectedRecord[\"VatAmount\"] = 0;\n        selectedRecord[\"TotalNetAmount\"] = QuotationGrossAmount[0].ntotalgrossamount;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          DiscountBand,\n          modalScreenSize: false,\n          operation: operation,\n          VATBand,\n          QuotationGrossAmount,\n          screenName: \"IDS_CALCULATEPRICING\",\n          selectedRecord,\n          ncontrolCode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); //  } else {\n    //         toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\n    //  }\n  };\n}; //Quotation Record Click \n\nexport const getQuotation = (quotationItem, userInfo, masterData) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/quotation/getActiveQuotationById\", {\n      nquotationcode: quotationItem.nquotationcode,\n      userinfo: userInfo\n    }).then(response => {\n      let masterData1 = { ...masterData,\n        ...response.data\n      }; // ...masterData,\n      // ...response.data\n\n      masterData = masterData1;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // masterData,\n          loading: false,\n          dataState: undefined,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport function getQuotationAddTestService(screenName, operation, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\n      dispatch(initRequest(true));\n      rsapi.post(\"quotation/getQuotationUnmappedTest\", {\n        \"nquotationcode\": masterData.SelectedQuotation[\"nquotationcode\"],\n        userinfo: userInfo\n      }).then(response => {\n        let masterData1 = { ...masterData,\n          ...response.data\n        };\n        masterData = masterData1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            QuotationTestList: response.data,\n            masterData,\n            modalScreenSize: false,\n            openModal: true,\n            operation,\n            screenName,\n            ncontrolCode,\n            //selectedRecord, \n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTVERSION\"\n      }));\n    }\n  };\n}\nexport function getQuotationPricingEditService(editParam) {\n  return function (dispatch) {\n    // screenName, operation, masterData, userInfo, ncontrolCode\n    //console.log(\"editParam:\", editParam);\n    if (editParam.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT) {\n      dispatch(initRequest(true));\n      rsapi.post(\"quotation/getQuotationPrice\", {\n        \"nquotationcode\": editParam.masterData.SelectedQuotation[\"nquotationcode\"],\n        \"nquotationtestcode\": editParam.editRow ? editParam.editRow.nquotationtestcode : null,\n        userinfo: editParam.userInfo\n      }).then(response => {\n        let selectedRecord = [];\n\n        if (editParam.editRow) {\n          selectedRecord.push(response.data[\"SelectedQuotationPrice\"]);\n        } else {\n          selectedRecord = sortData(response.data[\"QuotationPrice\"]);\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            //pricingTestList:testList, \n            //testPriceList:response.data[\"TestPrice\"],\n            openModal: true,\n            modalScreenSize: false,\n            operation: editParam.operation,\n            screenName: editParam.screenName,\n            ncontrolCode: editParam.ncontrolCode,\n            selectedRecord,\n            selectedId: editParam.editRow ? editParam.editRow.nquotationtestcode : null,\n            loading: false,\n            quotationDataState: editParam.quotationDataState\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTVERSION\"\n      }));\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/QuotationAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","sortData","constructOptionList","rearrangeDateFormat","formatInputDate","transactionStatus","intl","getreloadQuotation","inputParam","dispatch","post","methodUrl","inputData","then","response","masterData","data","type","payload","loading","dataState","undefined","catch","error","message","getClientCategoryComboService","methodParam","selectedRecord","URL","userinfo","primarykey","all","Client","sclientsiteaddress","SelectedClient","usertMap","get","label","selectedClient","sclientname","value","nclientcode","item","selectedClientSite","saddress1","status","warn","getQuotaionClientComboService","getProjectTypeComboService","ProjectCode","ProjectMaster","srfwdate","length","SelectedProjectCode","sprojectcode","nprojectmastercode","Projectmaster","sprojecttitle","suserrolename","susername","nusercode","getProjectCodeComboService","SelectedProjectMaster","addQuotation","operation","userInfo","ncontrolCode","selectedQuotation","ntransactionstatus","APPROVED","urlArray","push","nquotationcode","testData","ClientCategory","ProjectType","QuotationType","Date","editData","SelectedQuotation","sinvoiceaddress","sdescription","sdeviationremarks","squotationdate","openModal","screenName","modalScreenSize","formatMessage","id","GrossQuotation","DiscountBand","VATBand","QuotationGrossAmount","ndiscountpercentage","nvatpercentage","ndiscountamount","nvatamount","ntotalgrossamount","getQuotation","quotationItem","masterData1","getQuotationAddTestService","DRAFT","QuotationTestList","getQuotationPricingEditService","editParam","editRow","nquotationtestcode","selectedId","quotationDataState"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {toast} from 'react-toastify';\r\nimport { DEFAULT_RETURN} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData ,constructOptionList,rearrangeDateFormat,formatInputDate } from '../components/CommonScript';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { intl } from \"../components/App\"; \r\n\r\nexport const getreloadQuotation = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/quotation/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                    \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            // quotation: inputParam.inputData.quotation\r\n                            \r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getClientCategoryComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/client/getClientByCategory\", { \"userinfo\": methodParam.inputData.userinfo, \"nclientcatcode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let Client,sclientsiteaddress;\r\n                let SelectedClient=[];\r\n             \r\n\r\n                const usertMap = constructOptionList(response[0].data.Client || [], \"nclientcode\",\"sclientname\", undefined, undefined, false);              \r\n\r\n                Client = usertMap.get(\"OptionList\");\r\n\r\n                // SelectedClient=response[0].data.selectedClient;\r\n               //  sclientsiteaddress= response[0].data.selectedClientSite.saddress1;\r\n                // selectedRecord={...selectedRecord,...response[0].data.selectedClient}\r\n                // selectedRecord={...selectedRecord,...response[0].data.selectedClientSite.saddress1} \r\n                selectedRecord[\"nclientcode\"]=  {\r\n                                                label: response[0].data.selectedClient.sclientname,\r\n                                                value: response[0].data.selectedClient.nclientcode,\r\n                                                item: response[0].data.selectedClient}\r\n                // selectedRecord[\"nclientcode\"]=response[0].data.selectedClient.nclientcode;\r\n                // selectedRecord[\"sclientname\"]=response[0].data.selectedClient.sclientname;\r\n                selectedRecord[\"sclientsiteaddress\"]=response[0].data.selectedClientSite.saddress1;\r\n             // selectedRecord={response[0].data.selectedClientSite.saddress1}\r\n               selectedRecord = {...selectedRecord}\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { Client,selectedRecord, loading: false, data: undefined, dataState: undefined,sclientsiteaddress,SelectedClient } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getQuotaionClientComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/client/getSelectedClientDetail\", { \"userinfo\": methodParam.inputData.userinfo, \"nclientcode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let sclientsiteaddress;\r\n                let SelectedClient=[];\r\n\r\n                // SelectedClient=response[0].data.selectedClient;\r\n                // sclientsiteaddress= response[0].data.selectedClientSite.saddress1;\r\n                selectedRecord[\"sclientname\"]=response[0].data.selectedClient.sclientname;\r\n                selectedRecord[\"sclientsiteaddress\"]=response[0].data.selectedClientSite.saddress1;\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { selectedRecord, loading: false, data: undefined, dataState: undefined,sclientsiteaddress,SelectedClient } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getProjectTypeComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/projectmaster/getApprovedProjectMasterByProjectType\", { \"userinfo\": methodParam.inputData.userinfo, \"nprojecttypecode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                let ProjectCode,ProjectMaster=[];    \r\n                let srfwdate;\r\n\r\n                const usertMap = constructOptionList(response[0].data.ProjectCode || [], \"nprojectmastercode\",\"sprojectcode\", undefined, undefined, false);              \r\n\r\n                ProjectCode = usertMap.get(\"OptionList\");\r\n    \r\n                if(ProjectCode.length>0){\r\n\r\n                    selectedRecord[\"nprojectmastercode\"]=  {\r\n                                label: response[0].data.SelectedProjectCode.sprojectcode,\r\n                                value: response[0].data.SelectedProjectCode.nprojectmastercode,\r\n                                item: response[0].data.SelectedProjectCode}\r\n\r\n                    srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.Projectmaster[0].srfwdate);\r\n                //  srfwdate=response[0].data.Projectmaster[0].srfwdate;\r\n                    selectedRecord[\"sprojecttitle\"]=response[0].data.Projectmaster[0].sprojecttitle;\r\n                    selectedRecord[\"srfwdate\"]=srfwdate;\r\n                    selectedRecord[\"suserrolename\"]=response[0].data.Projectmaster[0].suserrolename;\r\n                    selectedRecord[\"susername\"]=response[0].data.Projectmaster[0].susername;\r\n                    // selectedRecord[\"nuserrolecode\"]=response[0].data.Projectmaster[0].nuserrolecode;\r\n                    selectedRecord[\"nusercode\"]=response[0].data.Projectmaster[0].nusercode;\r\n                    // ProjectMaster={...response[0].data.Projectmaster[0],srfwdate:srfwdate};\r\n                }\r\n               \r\n\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { selectedRecord, loading: false, data: undefined, dataState: undefined,ProjectCode,ProjectMaster } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function getProjectCodeComboService(methodParam,selectedRecord) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let URL = [];\r\n\r\n            URL=rsapi.post(\"/projectmaster/getActiveProjectMasterById\", { \"userinfo\": methodParam.inputData.userinfo, \"nprojectmastercode\":  methodParam.inputData.primarykey  })\r\n\r\n         dispatch(initRequest(true));\r\n\r\n        Axios.all([URL])\r\n\r\n            .then(response => {\r\n\r\n                // let ProjectMaster=[];  \r\n                let srfwdate;  \r\n               \r\n                // srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.Projectmaster[0].srfwdate);\r\n                \r\n                // ProjectMaster=response[0].data.SelectedProjectMaster;\r\n\r\n                selectedRecord[\"nprojectmastercode\"]=  {\r\n                    label: response[0].data.SelectedProjectMaster.sprojectcode,\r\n                    value: response[0].data.SelectedProjectMaster.nprojectmastercode,\r\n                    item: response[0].data.SelectedProjectMaster}\r\n\r\n                // srfwdate=response[0].data.SelectedProjectMaster.srfwdate;\r\n                // ProjectMaster={...response[0].data.SelectedProjectMaster,srfwdate:srfwdate};\r\n\r\n                srfwdate= rearrangeDateFormat( methodParam.inputData.userinfo, response[0].data.SelectedProjectMaster.srfwdate);\r\n                selectedRecord[\"sprojecttitle\"]=response[0].data.SelectedProjectMaster.sprojecttitle;\r\n                selectedRecord[\"srfwdate\"]=srfwdate;\r\n                selectedRecord[\"suserrolename\"]=response[0].data.SelectedProjectMaster.suserrolename;\r\n                selectedRecord[\"susername\"]=response[0].data.SelectedProjectMaster.susername;\r\n                // selectedRecord[\"nuserrolecode\"]=response[0].data.SelectedProjectMaster.nuserrolecode;\r\n                selectedRecord[\"nusercode\"]=response[0].data.SelectedProjectMaster.nusercode;\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload:\r\n\r\n                     { selectedRecord, loading: false, data: undefined, dataState: undefined } })\r\n\r\n            })\r\n\r\n            .catch(error => {\r\n\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n                if (error.response.status === 500) {\r\n\r\n                    toast.error(error.message);\r\n\r\n                }\r\n\r\n                else {\r\n\r\n                    toast.warn(error.response.data);\r\n\r\n                }\r\n\r\n            })\r\n\r\n    }\r\n\r\n}\r\n\r\n//Add Quotation\r\nexport const addQuotation = (operation, userInfo, ncontrolCode,selectedQuotation ) => {\r\n    return function (dispatch) {\r\n     if (operation === \"create\" || (operation === \"update\" && selectedQuotation.ntransactionstatus !== transactionStatus.APPROVED)) {\r\n                dispatch(initRequest(true));\r\n            const urlArray = [\r\n            ];\r\n            let selectedRecord = {};\r\n\r\n             if (operation === \"create\" || operation === \"update\") {\r\n\r\n                urlArray.push(rsapi.post(\"clientcategory/getClientCategory\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n\r\n                urlArray.push(rsapi.post(\"client/getClientByCategory\", {\r\n                    \"nclientcatcode\": 1,\r\n                    \"userinfo\": userInfo\r\n                })); \r\n\r\n\r\n                urlArray.push(rsapi.post(\"projecttype/getProjectType\", {\r\n                    \"userinfo\": userInfo \r\n                    \r\n                })); \r\n         \r\n                urlArray.push(rsapi.post(\"quotation/getQuotationType\", {\r\n                    \"userinfo\": userInfo \r\n                    \r\n                })); \r\n            } \r\n             if (operation === \"update\"){\r\n\r\n                urlArray.push(rsapi.post(\"quotation/getActiveQuotationById\", {\r\n                    \"userinfo\": userInfo,\r\n                    \"nquotationcode\": selectedQuotation.nquotationcode\r\n                }));\r\n\r\n            }\r\n\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n               \r\n                let testData = {};\r\n\r\n                let {ClientCategory,Client,ProjectType,ProjectMaster,sclientsiteaddress,QuotationType}=[]\r\n                \r\n\r\n              if (operation === \"create\") {\r\n                   \r\n                   \r\n                     ClientCategory = constructOptionList(response[0].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\");\r\n                   \r\n              //       Client = constructOptionList(response[1].data || [], \"nclientcode\", \"sclientname\", false, false, true).get(\"OptionList\");\r\n\r\n                     ProjectType = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\r\n                     QuotationType = constructOptionList(response[3].data || [], \"nquotationtypecode\", \"squotationname\", false, false, true).get(\"OptionList\");\r\n\r\n                    selectedRecord[\"dquotationdate\"] = new Date();\r\n                    // selectedRecord[\"dquotationdate\"] = formatInputDate(new Date(), true);\r\n                     \r\n\r\n                }else if (operation === \"update\") {\r\n                    \r\n                    const editData = response[4].data.SelectedQuotation;\r\n                    ProjectMaster=response[4].data.SelectedQuotation;\r\n\r\n                    // sclientsiteaddress = editData.sclientsiteaddress;\r\n                    selectedRecord[\"sclientsiteaddress\"]=editData.sclientsiteaddress;\r\n                    selectedRecord[\"sinvoiceaddress\"] = editData.sinvoiceaddress;\r\n                    selectedRecord[\"sprojecttitle\"] = editData.sprojecttitle;\r\n                    selectedRecord[\"sdescription\"] = editData.sdescription;\r\n                    selectedRecord[\"sdeviationremarks\"] = editData.sdeviationremarks;\r\n                    selectedRecord[\"suserrolename\"] = editData.suserrolename;\r\n                    selectedRecord[\"susername\"] = editData.susername;\r\n                    // selectedRecord[\"nuserrolecode\"] = editData.nuserrolecode;\r\n                    selectedRecord[\"nusercode\"] = editData.nusercode;\r\n                   \r\n                \r\n                    selectedRecord = {...selectedRecord}\r\n\r\n                   \r\n                ClientCategory = constructOptionList(response[0].data || [], \"nclientcatcode\", \"sclientcatname\", false, false, true).get(\"OptionList\");\r\n                Client = constructOptionList(response[1].data.Client || [], \"nclientcode\", \"sclientname\", false, false, true).get(\"OptionList\");\r\n                ProjectType = constructOptionList(response[2].data || [], \"nprojecttypecode\", \"sprojecttypename\", false, false, true).get(\"OptionList\");\r\n                QuotationType = constructOptionList(response[3].data || [], \"nquotationtypecode\", \"squotationname\", false, false, true).get(\"OptionList\");\r\n\r\n                          \r\n\r\n                    selectedRecord[\"nprojecttypecode\"] = {\r\n                        \"value\": editData[\"nprojecttypecode\"],\r\n                        \"label\":  editData[\"sprojecttypename\"]\r\n                    };\r\n\r\n                    selectedRecord[\"nclientcatcode\"] = {\r\n                        \"value\": editData[\"nclientcatcode\"],\r\n                        \"label\": editData[\"sclientcatname\"]\r\n                    };\r\n\r\n                    selectedRecord[\"nclientcode\"] = {\r\n                        \"value\": editData[\"nclientcode\"],\r\n                        \"label\": editData[\"sclientname\"]\r\n                    };\r\n                    \r\n                    selectedRecord[\"nquotationtypecode\"] = {\r\n                        \"value\": editData[\"nquotationtypecode\"],\r\n                        \"label\": editData[\"squotationname\"]\r\n                    };\r\n\r\n                    selectedRecord[\"nprojectmastercode\"] = {\r\n                        \"value\": editData[\"nprojectmastercode\"],\r\n                        \"label\": editData[\"sprojectcode\"]\r\n                    };\r\n                  \r\n                selectedRecord[\"srfwdate\"] = rearrangeDateFormat(userInfo,editData.srfwdate);\r\n                selectedRecord[\"dquotationdate\"] = rearrangeDateFormat(userInfo,editData.squotationdate);\r\n               \r\n                }\r\n                   \r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n  \r\n                            openModal: true,\r\n                            ProjectType,\r\n                            operation: operation,ClientCategory,Client,ProjectMaster,sclientsiteaddress,QuotationType,\r\n                            screenName: \"IDS_QUOTATION\",modalScreenSize:false,\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            testData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n         } else {\r\n                          \r\n                toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\r\n\r\n         }\r\n    }\r\n}\r\n\r\nexport const GrossQuotation = (operation, userInfo, ncontrolCode,selectedQuotation ) => {\r\n    return function (dispatch) {\r\n    //  if (operation === \"create\" || (operation === \"update\" && selectedQuotation.ntransactionstatus !== transactionStatus.RETIRED)) {\r\n                dispatch(initRequest(true));\r\n            const urlArray = [\r\n            ];\r\n            let selectedRecord = {};\r\n\r\n                urlArray.push(rsapi.post(\"discountband/getDiscountBand\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n\r\n                urlArray.push(rsapi.post(\"vatband/getVATBand\", {\r\n                    \"userinfo\": userInfo\r\n                })); \r\n\r\n                urlArray.push(rsapi.post(\"quotation/getQuotationGrossAmount\", {\r\n                    \"nquotationcode\": selectedQuotation.nquotationcode,\r\n                    \"userinfo\": userInfo\r\n                })); \r\n\r\n            \r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n\r\n                let {DiscountBand,VATBand}=[]\r\n                \r\n                DiscountBand = constructOptionList(response[0].data || [], \"ndiscountbandcode\", \"sdiscountbandname\", false, false, true).get(\"OptionList\");\r\n                VATBand = constructOptionList(response[1].data || [], \"nvatbandcode\", \"svatbandname\", false, false, true).get(\"OptionList\");\r\n                const QuotationGrossAmount= response[2].data;\r\n\r\n                if(QuotationGrossAmount[0].ndiscountpercentage >0 && QuotationGrossAmount[0].nvatpercentage >0){\r\n\r\n                    selectedRecord[\"ndiscountpercentage\"]= QuotationGrossAmount[0].ndiscountpercentage;\r\n                    selectedRecord[\"nvatpercentage\"] = QuotationGrossAmount[0].nvatpercentage;  \r\n                    selectedRecord[\"ndiscountamount\"] = QuotationGrossAmount[0].ndiscountamount; \r\n                    selectedRecord[\"nvatamount\"] = QuotationGrossAmount[0].nvatamount; \r\n                    selectedRecord[\"TotalNetAmount\"]=(QuotationGrossAmount[0].ntotalgrossamount+selectedRecord[\"nvatamount\"])-selectedRecord[\"ndiscountamount\"];\r\n\r\n                    selectedRecord[\"nvatbandcode\"] = {\r\n                        \"value\": QuotationGrossAmount[0][\"nvatbandcode\"],\r\n                        \"label\":  QuotationGrossAmount[0][\"svatbandname\"]\r\n                    };\r\n\r\n                    selectedRecord[\"ndiscountbandcode\"] = {\r\n                        \"value\": QuotationGrossAmount[0][\"ndiscountbandcode\"],\r\n                        \"label\": QuotationGrossAmount[0][\"sdiscountbandname\"]\r\n                    }; \r\n\r\n\r\n                }else {\r\n\r\n   /*                 selectedRecord[\"ndiscountpercentage\"]= DiscountBand[0].item.namount;\r\n                    selectedRecord[\"nvatpercentage\"] = VATBand[0].item.namount;\r\n\r\n                    selectedRecord[\"nvatbandcode\"] = {\r\n                        \"value\": VATBand[0][\"value\"],\r\n                        \"label\": VATBand[0][\"label\"]\r\n                    };\r\n\r\n                    selectedRecord[\"ndiscountbandcode\"] = {\r\n                        \"value\": DiscountBand[0][\"value\"],\r\n                        \"label\": DiscountBand[0][\"label\"]\r\n                    }; \r\n\r\n                    selectedRecord[\"DiscountAmount\"]=QuotationGrossAmount[0].ntotalgrossamount * (DiscountBand[0].item.namount/100);\r\n                    selectedRecord[\"VatAmount\"]=QuotationGrossAmount[0].ntotalgrossamount * (VATBand[0].item.namount/100);\r\n     //             selectedRecord[\"TotalNetAmount\"]=QuotationGrossAmount[0].ntotalgrossamount+(selectedRecord[\"DiscountAmount\"]-selectedRecord[\"VatAmount\"]);\r\n                    selectedRecord[\"TotalNetAmount\"]=(QuotationGrossAmount[0].ntotalgrossamount+selectedRecord[\"VatAmount\"])-selectedRecord[\"DiscountAmount\"];\r\n\r\n*/\r\n\r\n                    selectedRecord[\"ndiscountpercentage\"]= 0;\r\n                    selectedRecord[\"nvatpercentage\"] = 0;\r\n\r\n                    selectedRecord[\"nvatbandcode\"] = {\r\n                        \"value\": -1,\r\n                        \"label\": 'NA'\r\n                    };\r\n\r\n                    selectedRecord[\"ndiscountbandcode\"] = {\r\n                        \"value\": -1,\r\n                        \"label\": 'NA'\r\n                    }; \r\n\r\n                    selectedRecord[\"DiscountAmount\"]=0;\r\n                    selectedRecord[\"VatAmount\"]=0;\r\n                    selectedRecord[\"TotalNetAmount\"]=QuotationGrossAmount[0].ntotalgrossamount;\r\n\r\n\r\n\r\n                }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n  \r\n                            openModal: true,\r\n                            DiscountBand,modalScreenSize:false,\r\n                            operation: operation,VATBand,QuotationGrossAmount,\r\n                            screenName: \"IDS_CALCULATEPRICING\",\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        //  } else {\r\n                          \r\n        //         toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\r\n\r\n        //  }\r\n    }\r\n}\r\n\r\n//Quotation Record Click \r\nexport const getQuotation = (quotationItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/quotation/getActiveQuotationById\", {\r\n            nquotationcode: quotationItem.nquotationcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                \r\n\r\n                    let masterData1  = {...masterData,\r\n\r\n                        ...response.data }\r\n\r\n                    // ...masterData,\r\n                    // ...response.data\r\n                    masterData=masterData1\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                       // masterData,\r\n                        loading: false,\r\n                        dataState: undefined,\r\n                        masterData\r\n                        \r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport function getQuotationAddTestService(screenName, operation, masterData, userInfo, ncontrolCode){\r\n    return function (dispatch) {    \r\n        if (masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT){     \r\n        \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"quotation/getQuotationUnmappedTest\",{\r\n            \"nquotationcode\":masterData.SelectedQuotation[\"nquotationcode\"], \r\n            userinfo:userInfo})\r\n\r\n        .then(response=>{\r\n\r\n            let masterData1  = {...masterData,\r\n\r\n                ...response.data }\r\n                masterData=masterData1                       \r\n                dispatch({type: DEFAULT_RETURN, payload:{ \r\n                                                        QuotationTestList:response.data,\r\n                                                        masterData,modalScreenSize:false,\r\n                                                        openModal:true,\r\n                                                        operation, screenName, ncontrolCode,\r\n                                                        //selectedRecord, \r\n                                                        loading:false}});\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }      \r\n            }) \r\n    }\r\n    else{\r\n        toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\r\n    }\r\n}}\r\n\r\n\r\nexport function getQuotationPricingEditService(editParam){\r\n    return function (dispatch) {    \r\n       // screenName, operation, masterData, userInfo, ncontrolCode\r\n       //console.log(\"editParam:\", editParam);\r\n        if (editParam.masterData.SelectedQuotation.ntransactionstatus === transactionStatus.DRAFT){     \r\n        \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"quotation/getQuotationPrice\",{\"nquotationcode\":editParam.masterData.SelectedQuotation[\"nquotationcode\"], \r\n                                                \"nquotationtestcode\":editParam.editRow ? editParam.editRow.nquotationtestcode :null,\r\n                                                userinfo:editParam.userInfo})\r\n\r\n        .then(response=>{\r\n                   \r\n                let selectedRecord =[];\r\n                if (editParam.editRow){\r\n                    selectedRecord.push(response.data[\"SelectedQuotationPrice\"]);\r\n                }\r\n                else{\r\n                    selectedRecord = sortData(response.data[\"QuotationPrice\"])\r\n                }\r\n                dispatch({type: DEFAULT_RETURN, payload:{//pricingTestList:testList, \r\n                                                        //testPriceList:response.data[\"TestPrice\"],\r\n                                                        openModal:true,modalScreenSize:false,\r\n                                                        operation:editParam.operation,\r\n                                                        screenName:editParam.screenName, \r\n                                                        ncontrolCode:editParam.ncontrolCode,\r\n                                                        selectedRecord, \r\n                                                        selectedId:editParam.editRow ? editParam.editRow.nquotationtestcode :null,\r\n                                                        loading:false,\r\n                                                        quotationDataState:editParam.quotationDataState}});\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data); \r\n                }      \r\n            }) \r\n    }\r\n    else{\r\n        toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTVERSION\"}));\r\n    }\r\n}}\r\n\r\n"]},"metadata":{},"sourceType":"module"}