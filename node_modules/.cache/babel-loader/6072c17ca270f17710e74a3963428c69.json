{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\PreRegisterSlideOutModal.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ModalInner } from '../../components/App.styles';\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { ageCalculate, ageCalculateOnlyForYear, childComboClear, comboChild, convertDateTimetoString, extractFieldHeader, filterRecordBasedOnTwoArrays, formatDate, formatInputDate, formatInputDateWithoutT, getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, removeIndex, removeSpaceFromFirst, showEsign, sortByField, validateEmail, validatePhoneNumber } from '../../components/CommonScript';\nimport RegisterSlideOut from './RegisterSlideOut';\nimport AddSpecification from './AddSpecification';\nimport AddTest from './AddTest';\nimport { connect } from 'react-redux';\nimport { getPreviewTemplate, getChildValues, callService, getNewRegSpecification, AddComponents, updateStore, EditComponent, getTest, addsubSample, editSubSample, insertRegistration, updateRegistration, addSubSampleSaveContinue, componentTest, getDynamicFilter, getDynamicFilterExecuteData, insertRegistrationScheduler, testPackageTest, rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte, getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail, getEditMaster } from '../../actions';\nimport AddComponentPopUp from './AddComponentPopUp';\nimport AddSubSample from './AddSubSample';\nimport { getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation } from './RegistrationValidation';\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport Esign from '../audittrail/Esign';\nimport { ThemeConsumer } from 'styled-components';\nimport PatientMaster from '../contactmaster/PatientMaster';\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList'; //import SplitterLayout from 'react-splitter-layout';\n\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords';\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegisterSlideOutModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.formRef = React.createRef();\n    this.state = {\n      failedControls: [],\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      subSampleDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      selectedRecord: {},\n      selectedSpec: {},\n      selectComponent: {},\n      selectedTest: {},\n      selectedTestData: {},\n      selectedTestPackageData: {},\n      selectPackage: {},\n      SubSamplecomboComponents: [],\n      SubSamplewithoutCombocomponent: [],\n      // selectedTestData: [],\n      parentSubSampleColumnList: [],\n      specBasedComponent: false,\n      specBasedTestPackage: false,\n      selectedMaster: []\n    };\n\n    this.custombuttonclick = (event, component) => {\n      event.preventDefault();\n      event.stopPropagation();\n      const inputparam = {\n        component,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.getDynamicFilter(inputparam);\n    };\n\n    this.onChangeAwesomeQueryBuilder = (immutableTree, config) => {\n      //let selectedRecord = this.state.selectedRecord || {};\n      const filterquery = QbUtils.sqlFormat(immutableTree, config);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          awesomeTree: immutableTree,\n          awesomeConfig: config,\n          filterquery\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\n    };\n\n    this.handlePageChange = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoSkip: event.skip,\n          kendoTake: event.take\n        }\n      };\n      this.props.updateStore(updateInfo); //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\n    };\n\n    this.handleFilterChange = event => {\n      // event.preventDefault();\n      //event.stopPropagation();\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          kendoFilter: event.filter // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: event.filter });\n    };\n\n    this.handleExecuteClick = event => {\n      const filterquery = this.props.Login.filterquery;\n\n      if (filterquery !== \"\" && filterquery !== undefined && !filterquery.includes('Invalid date')) {\n        const val = removeSpaceFromFirst(filterquery, '');\n        const inputparam = {\n          component: this.props.Login.seletedFilterComponent,\n          userinfo: this.props.Login.userInfo,\n          filterquery: val\n        };\n        this.props.getDynamicFilterExecuteData(inputparam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLINFILTER\"\n        }));\n      }\n    };\n\n    this.handleKendoRowClick = event => {\n      let item1 = event.dataItem;\n      const component = this.props.Login.seletedFilterComponent;\n\n      if (component[\"childFields\"]) {\n        const index = this.props.Login.masterIndex;\n        let selectedRecord = this.state.selectedMaster || {};\n        component[\"childFields\"].map(item => {\n          let data = item1[item.columnname];\n\n          if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n            //combocontrol\n            data = {\n              label: item1[item.sdisplaymember],\n              value: item1[item.svaluemember]\n            };\n          } else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n            //Date picker control\n            data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\n          }\n\n          selectedRecord[index][item.columnname] = data;\n        });\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: selectedRecord,\n            loadCustomSearchFilter: false,\n            screenName: this.props.Login.addMaster === true ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        const newdata = {\n          label: item1[component['displaymember']],\n          value: item1[component['valuemember']],\n          item: {\n            jsondata: { ...item1,\n              jsondata: { ...item1\n              }\n            }\n          }\n        };\n        this.onComboChange(newdata, component, component['label']);\n      }\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord; // console.log(\"handle save:\", selectedRecord);\n\n      if (this.props.Login.addMaster) {\n        const masterIndex = this.props.Login.masterIndex;\n        mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true);\n        selectedRecord = this.state.selectedMaster[masterIndex];\n      } else if (this.props.Login.loadComponent) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_RECEIVEDDATE\",\n          \"dataField\": \"dreceiveddate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_TIMEZONE\",\n          \"dataField\": \"ntzdreceivedate\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadSubSample) {\n        if (this.state.specBasedComponent) mandatoryFields = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"ncomponentcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              // console.log(\"component1:\", component);\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                //  console.log(\"componentrow:\", componentrow);\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectComponent[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          //componentrow.label,\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        //componentrow.label,\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    this.state.selectComponent[componentrow.label] && this.state.selectComponent[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      //componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectComponent[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : this.state.selectComponent[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                //component.label, \n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n        selectedRecord = this.state.selectComponent;\n      } else if (this.props.Login.loadTest) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_TEST\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n        selectedRecord = this.props.Login.selectedTestData;\n      } else if (this.props.Login.loadSpec) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_SPECIFICATION\",\n          \"dataField\": \"nallottedspeccode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }];\n      } else {\n        this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  if (componentrow.recordbasedshowhide) {\n                    if (this.state.selectedRecord[componentrow.parentLabel] === componentrow.recordbasedhide) {\n                      if (componentrow.inputtype === \"email\") {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          //\"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"alertPreFix\": this.props.intl.formatMessage({\n                            id: \"IDS_VALID\"\n                          }),\n                          \"validateFunction\": validateEmail,\n                          \"mandatoryLabel\": \"IDS_ENTER\",\n                          \"controlType\": \"textbox\"\n                        });\n                      } else {\n                        mandatoryFields.push({\n                          \"mandatory\": true,\n                          // \"idsName\": componentrow.label,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                          \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                        });\n                      }\n                    }\n                  } else {\n                    if (componentrow.inputtype === \"email\") {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        //\"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"alertPreFix\": this.props.intl.formatMessage({\n                          id: \"IDS_VALID\"\n                        }),\n                        \"validateFunction\": validateEmail,\n                        \"mandatoryLabel\": \"IDS_ENTER\",\n                        \"controlType\": \"textbox\"\n                      });\n                    } else {\n                      mandatoryFields.push({\n                        \"mandatory\": true,\n                        // \"idsName\": componentrow.label,\n                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                        \"dataField\": componentrow.label,\n                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                        \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                      });\n                    }\n                  }\n                } else {\n                  if (componentrow.inputtype === \"email\") {\n                    selectedRecord[componentrow.label] && selectedRecord[componentrow.label] !== \"\" && mandatoryFields.push({\n                      \"mandatory\": true,\n                      //\"idsName\": componentrow.label,\n                      \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  }\n                }\n\n                return null;\n              }) : component.mandatory === true ? component.recordbasedshowhide ? this.state.selectedRecord[component.parentLabel] === component.recordbasedhide ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\" : component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : selectedRecord[component.label] ? component.inputtype === \"email\" ? mandatoryFields.push({\n                \"mandatory\": true,\n                //\"idsName\": component.label, \n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                \"alertPreFix\": this.props.intl.formatMessage({\n                  id: \"IDS_VALID\"\n                }),\n                \"validateFunction\": validateEmail,\n                \"mandatoryLabel\": \"IDS_ENTER\",\n                \"controlType\": \"textbox\"\n              }) : \"\" : \"\";\n            });\n          });\n        });\n      }\n\n      if (this.props.esign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n\n      if (this.props.Login.loadEsign) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_PASSWORD\",\n          \"dataField\": \"esignpassword\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"esigncomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } //  console.log(\"mandate fields:\", mandatoryFields);\n\n\n      mandatoryFields.forEach(item => {\n        if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\n          const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n            id: item.idsName\n          }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n          failedControls.push(alertMessage);\n          startLabel.push(item.mandatoryLabel); //\"IDS_PROVIDE\";\n        } else {\n          if (item.validateFunction) {\n            const validateData = item.validateFunction;\n\n            if (validateData(selectedRecord[item.dataField]) === false) {\n              const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                id: item.idsName\n              }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n              failedControls.push(alertMessage);\n              startLabel.push(item.mandatoryLabel);\n            }\n          } else {\n            if (typeof selectedRecord[item.dataField] === \"object\") {\n              //to validate FormSelectSearch component\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel); //\"IDS_SELECT\";\n              }\n            } else if (typeof selectedRecord[item.dataField] === \"string\") {\n              //to handle string field -- added trim function\n              if (selectedRecord[item.dataField].trim().length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            } else {\n              //number field\n              if (selectedRecord[item.dataField].length === 0) {\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({\n                  id: item.idsName\n                }) + (item.alertSuffix ? \" \" + item.alertSuffix : '');\n                failedControls.push(alertMessage);\n                startLabel.push(item.mandatoryLabel);\n              }\n            }\n          }\n        } // else{\n        //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\n        //     failedControls.push(alertMessage);\n        // }\n\n      }); // console.log(\"validationPassed:\", failedControls);\n\n      if (failedControls.length === 0) {\n        if (saveType === 4) {\n          this.props.onExecuteClick(this.formRef);\n        } else if (saveType === 3) {\n          if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_CHECKAGREE\"\n            }));\n          } else {\n            this.props.validateEsign();\n          }\n        } else {\n          if (this.props.Login.addMaster) {\n            this.onSaveMasterRecord(saveType, this.formRef);\n          } else if (this.props.Login.loadSpec) {\n            let selectedSpec = this.state.selectedSpec;\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n            const specBasedComponent = selectedSpec[\"nallottedspeccode\"] && selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false;\n            this.subSampleDataGridList = [];\n\n            if (specBasedComponent) {\n              this.subSampleDataGridList = [{\n                \"idsName\": \"IDS_COMPONENT\",\n                \"dataField\": \"scomponentname\",\n                width: \"200px\"\n              }];\n            }\n\n            this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  // let label = ''\n                  if (component.hasOwnProperty(\"children\")) {\n                    component.children.map(componentrow => {\n                      if (componentrow.mandatory === true) {\n                        // label = label + '&' + componentrow.label\n                        this.subSampleDataGridList.push({\n                          \"mandatory\": true,\n                          \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                          \"dataField\": componentrow.label,\n                          width: \"150px\"\n                        });\n                      }\n\n                      return this.subSampleDataGridList;\n                    });\n                  } else {\n                    if (component.mandatory) this.subSampleDataGridList.push({\n                      \"mandatory\": true,\n                      \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                      \"dataField\": component.label,\n                      width: \"150px\"\n                    });\n                    return this.subSampleDataGridList;\n                  }\n                });\n              });\n            }); //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\n            //      specBasedComponent });\n            // this.setState({\n            //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\n            // })\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedTestData: [],\n                selectComponent: [],\n                selectedComponent: {},\n                loadSpec: false,\n                SelectedTest: [],\n                Test: [],\n                Component: [],\n                subSampleDataGridList: [],\n                selectedSpec,\n                screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\n                specBasedComponent\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else if (this.props.Login.loadComponent) {\n            this.onSaveComponentClick(saveType, this.formRef);\n          } else if (this.props.Login.loadTest) {\n            this.onSaveTestClick(saveType, this.formRef);\n          } else if (this.props.Login.loadSubSample) {\n            this.onSaveSubSampleClick(saveType, this.formRef);\n          } else {\n            this.onSaveClick(saveType, this.formRef);\n          }\n        }\n      } else {\n        label = startLabel[0] === undefined ? label : startLabel[0];\n        toast.info(`${this.props.intl.formatMessage({\n          id: label\n        })} ${failedControls[0]}`);\n      }\n    };\n\n    this.TestChange = (comboData, fieldName) => {\n      const selectedTestData = this.state.selectedTestData || {};\n      selectedTestData[fieldName] = comboData; //  this.setState({ selectedTestData });\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedTestData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {}; //console.log(\"Control:\", control);\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        let product = false;\n        let productCategory = false;\n        let nproductcatcode = -1;\n        let nproductcode = -1;\n        let materialType = false;\n        let instrument = false;\n        let instrumentCategory = false;\n        let material = false;\n        let materialCategory = false;\n        let project = false;\n        let nprojectmastercode = -1;\n        let childSpec = false;\n        const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode) : 1;\n\n        if (nsampletypecode === SampleType.CLINICALTYPE) {\n          if (control.table.item.nquerybuildertablecode === 228 && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\n            selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid'];\n          }\n        }\n\n        if (control.name === \"manualorderid\") {\n          selectedRecord['spatientid'] = comboData.item && comboData.item['jsondata']['spatientid'];\n        }\n\n        const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired) : transactionStatus.NO;\n        const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ? parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired) : transactionStatus.NO;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\n        };\n\n        if (comboData) {\n          comboData[\"item\"] = { ...comboData[\"item\"],\n            \"pkey\": control.valuemember,\n            \"nquerybuildertablecode\": control.nquerybuildertablecode,\n            source: control.source\n          };\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.name === 'Product') {\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {} else {\n            if (ncategorybasedflow !== transactionStatus.YES) {\n              product = true;\n              nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n            }\n          }\n        } else if (control.name === 'Instrument') {\n          const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\n          let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[InstrumentCategory[0].label] && selectedRecord[InstrumentCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            instrument = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Material') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\n          let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n          nproductcatcode = selectedRecord[MaterialCategory[0].label] && selectedRecord[MaterialCategory[0].label].value; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            material = true;\n            nproductcode = selectedRecord[comboName] && selectedRecord[comboName].value;\n          }\n        } else if (control.name === 'Product Category') {\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === 3) {} else {\n            if (ncategorybasedflow === transactionStatus.YES) {\n              productCategory = true;\n            } else {\n              inputParem[\"ProductName\"] = Product[0].label;\n              product = true;\n            }\n          }\n        } else if (control.name === 'Instrument Category') {\n          const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            instrumentCategory = true;\n          } else {\n            inputParem[\"InstrumentName\"] = Instrument[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            instrument = true;\n          }\n        } else if (control.name === 'Material Category') {\n          const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\n          nproductcatcode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n          let ncategorybasedflow = selectedRecord[control.label] && selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow === transactionStatus.YES) {\n            materialCategory = true;\n          } else {\n            inputParem[\"MaterialName\"] = Material[0].label; // nproductcode = selectedRecord[comboName] &&\n            // selectedRecord[comboName].value;\n\n            material = true;\n          }\n        } else if (control.name === 'Material Type') {\n          const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\"); //nproductcatcode = -1;\n          // const ncategorybasedflow = comboData &&\n          //     comboData['item']['jsondata']['ncategorybasedflow'];\n          // if (ncategorybasedflow === 3) {\n          //     productCategory = true\n          // } else {\n\n          inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label; // nproductcode = selectedRecord[comboName] &&\n          // selectedRecord[comboName].value;\n\n          materialType = true; //  }\n        } else if (control.name === 'Project Code') {\n          //project = true;\n          const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\n          const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\n          nproductcatcode = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label].value;\n          let ncategorybasedflow = selectedRecord[ProductCategory[0].label] && selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow']; //If SampleType table's categorybasedflow = 3 then we should not consider\n          //product category's categorybasedflow\n\n          if (sampleTypeCatBasedFlow === transactionStatus.YES) {\n            ncategorybasedflow = transactionStatus.YES;\n          }\n\n          if (ncategorybasedflow !== transactionStatus.YES) {\n            nproductcode = selectedRecord[Product[0].label] && selectedRecord[Product[0].label].value;\n          }\n\n          nprojectmastercode = selectedRecord[control.label] && selectedRecord[control.label]['value'];\n\n          if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n            project = true;\n          } // else{\n          //     if (ncategorybasedflow === 3) {\n          //         productCategory = true;\n          //     }\n          //     else{\n          //         product =true;\n          //     }\n          // }\n\n        }\n\n        if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\n          product = false;\n          productCategory = false;\n          materialType = false;\n          instrument = false;\n          instrumentCategory = false;\n          material = false;\n          materialCategory = false;\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\");\n          childColumnList = {};\n          childComboList.map(columnList => {\n            const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\"); // let childTemplateMandatory = {}\n          // if (!(product ||\n          //     productCategory ||\n          //     materialType ||\n          //     instrument ||\n          //     instrumentCategory ||\n          //     material ||\n          //     materialCategory ||\n          //     project)) {\n          //     const TemplateMandatory = childComboList && childComboList.filter(x => x.templatemandatory)\n          //     if (TemplateMandatory && TemplateMandatory.length > 0) {\n          //         const ProductCategory = childComboList.filter(x => x.name === \"Product Category\");\n          //         const Product = childComboList.filter(x => x.name === \"Product\");\n          //         const InstrumentCategory = childComboList.filter(x => x.name === \"Instrument Category\");\n          //         const MaterialCategory = childComboList.filter(x => x.name === \"Material Category\");\n          //         const Material = childComboList.filter(x => x.name === \"Material\");\n          //         const MaterialType = childComboList.filter(x => x.name === \"Material Type\");\n          //         const ProjectCode = childComboList.filter(x => x.name === \"Project Code\");\n          //         const Instrument = childComboList.filter(x => x.name === \"Instrument\");\n          //         childTemplateMandatory = {\n          //             ProductCategory, Product\n          //             , InstrumentCategory\n          //             , MaterialCategory, Material\n          //             , MaterialType, MaterialType\n          //             , ProjectCode, Instrument\n          //         }\n          //         if (ProductCategory || Product\n          //             || InstrumentCategory\n          //             || MaterialCategory || Material\n          //             || MaterialType || MaterialType\n          //             || ProjectCode || Instrument) {\n          //             childSpec = true;\n          //         }\n          //     }\n          //     else {\n          //         const TemplateChild = childComboList && childComboList.filter(x => x.child && x.child.length > 0)\n          //         if (TemplateChild&& TemplateChild.length> 0) {\n          //             TemplateChild.map(x=>{\n          //                 x.child&&x.child.map(y=>{\n          //                 const data=this.props.comboComponents(x=>x.label===y.label)  \n          //                 if(data&&data[0].templatemandatory){\n          //                     const name=data[0].name\n          //                     if(name===\"Product Category\"||name===\"Instrument Category\"\n          //                     ||name===\"Product\"||name===\"Material Category\"\n          //                     ||name===\"Material\"||name===\"Project Code\"||name===\"Instrument\"){\n          //                         childSpec = true;\n          //                         childTemplateMandatory={childSpec:true}\n          //                     }\n          //                 }\n          //                 })\n          //             })\n          //         }\n          //     }\n          // }\n\n          const mapOfFilter = {\n            nproductcode,\n            nproductcatcode,\n            nsampletypecode: nsampletypecode,\n            nprojectmastercode,\n            nprojectSpecReqd,\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n            nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired // ...childTemplateMandatory\n\n          };\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, materialType, undefined, project, this.props.comboComponents);\n        } else {\n          if (product || productCategory || instrument || material || materialCategory || instrumentCategory || materialType || project) {\n            const mapOfFilter = {\n              nproductcode,\n              nproductcatcode,\n              nsampletypecode: nsampletypecode,\n              nprojectmastercode,\n              nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\n            };\n            this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData, childComboList, childColumnList, this.props.withoutCombocomponent, [...childComboList, ...parentList], productCategory, product, mapOfFilter, instrumentCategory, instrument, materialCategory, material, undefined, undefined, project);\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                selectedRecord,\n                loadCustomSearchFilter: false\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        const comboData = this.props.Login.comboData;\n        selectedRecord[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectedRecord[temp.label] = \"\";\n            delete comboData[temp.label];\n            const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectedRecord[temp1.label] = \"\";\n                    delete comboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            comboData,\n            loadCustomSearchFilter: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = (event, radiotext) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        const value = selectedRecord[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedRecord[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedRecord[event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedRecord[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedRecord[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedRecord[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedRecord[event.target.name] = radiotext;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnSubSampleChange = (event, radiotext) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectComponent['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectComponent['timeonly'] = false;\n        }\n\n        const value = selectComponent[event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectComponent[event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectComponent[event.target.name] = \"\";\n                }\n              } else {\n                //  const  indexcomma= value.indexOf(\",\")\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectComponent[event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectComponent[event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectComponent[event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectComponent[event.target.name] = radiotext;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? { ...comboData.item,\n            pkey: control.valuemember,\n            nquerybuildertablecode: control.nquerybuildertablecode,\n            source: control.source\n          } : \"\",\n          label: comboData ? comboName : \"\",\n          nameofdefaultcomp: control.name,\n          screenName: \"IDS_SUBSAMPLE\"\n        };\n        comboData[\"item\"] = { ...comboData[\"item\"],\n          pkey: control.valuemember,\n          nquerybuildertablecode: control.nquerybuildertablecode,\n          source: control.source\n        };\n\n        if (comboData) {\n          selectComponent[comboName] = comboData;\n        } else {\n          selectComponent[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childColumnList = childComboList.map(columnList => {\n            const val = comboChild(this.state.SubSamplecomboComponents, columnList, childColumnList, false);\n            return val.childColumnList;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData, childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectComponent\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const SubSamplecomboData = this.props.Login.SubSamplecomboData;\n        selectComponent[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectComponent[temp.label] = \"\";\n            delete SubSamplecomboData[temp.label];\n            const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectComponent[temp1.label] = \"\";\n                    delete SubSamplecomboData[temp1.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent,\n            SubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlurSubSample = (value, control) => {\n      let selectComponent = this.state.selectComponent;\n\n      if (selectComponent[control.label]) {\n        if (control.max) {\n          if (!(selectComponent[control.label] < parseFloat(control.max))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectComponent[control.label] > parseFloat(control.min))) {\n            selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectComponent = this.state.selectComponent;\n      selectComponent[name] = value;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.handleDateChangeComp = (dateValue, dateName, screenName) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (screenName === 'component') {\n        const selectComponent = this.state.selectComponent;\n        selectComponent[dateName] = dateValue;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectComponent\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        selectedRecord[dateName] = dateValue;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n\n      if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n        const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n        const age = ageCalculate(dateValue);\n        selectedRecord[ageComp[0].label] = age;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectComponent\n      } = this.state;\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectComponent\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.state.showFilter;\n      this.setState({\n        showFilter\n      });\n    };\n\n    this.closeFilter = () => {\n      this.setState({\n        showFilter: false\n      });\n    };\n\n    this.AddSpec = e => {\n      // this.setState({\n      //     loadSpec: true\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: true,\n          screenName: this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATION\"\n          })\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        let isValid = true;\n        const selectedSpecification = {\n          nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n          slno: 1\n        };\n        let selectedRecord = selectedComponent; //  if(componentBasedSpec){\n\n        if (nneedsubsample) {\n          if (selectedComponent && Object.keys(selectedComponent).length > 0) {\n            delete selectedComponent[\"selected\"];\n          } else {\n            isValid = false;\n          }\n        } else {\n          selectedRecord = selectedSpecification;\n        } // }\n        // else{\n        //     selectedRecord = selectedSpecification;          \n        // }\n\n\n        if (isValid) {\n          this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\"\n          }));\n        } // } \n        // else {\n        //     const selectedComponent1 = {\n        //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\n        //         slno: 1\n        //     }\n        //     this.props.getTest(selectedComponent1,\n        //         this.props.Login,\n        //         nneedsubsample, specBasedComponent);\n        // }\n\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.closeSpec = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSpec: false,\n          selectedRecord: { ...this.state.selectedRecord,\n            ...this.state.selectedSpec\n          },\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeKendoFilter = e => {\n      // this.setState({\n      //     loadSpec: false,\n      //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\n      //      screenName:\"Specification\"\n      // })\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadCustomSearchFilter: false,\n          screenName: this.props.Login.addMaster === true ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          kendoFilter: {\n            logic: \"and\",\n            filters: []\n          },\n          kendoSkip: 0,\n          kendoTake: 5,\n          awesomeConfig: undefined,\n          awesomeTree: undefined\n        }\n      };\n      this.props.updateStore(updateInfo); // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\n    };\n\n    this.closeAddMaster = e => {\n      let masterIndex = this.props.Login.masterIndex;\n      let updateInfo = {};\n\n      if (masterIndex !== 0) {\n        const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode];\n        const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex);\n        const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex);\n        const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex);\n        const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex);\n        const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex);\n        const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex);\n        const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex);\n        const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex);\n        const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex);\n        const masterOperation = this.props.Login.masterOperation && removeIndex(this.props.Login.masterOperation, masterIndex);\n        const masterEditObject = this.props.Login.masterEditObject && removeIndex(this.props.Login.masterEditObject, masterIndex);\n        masterIndex = masterIndex - 1;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster,\n            selectedControl,\n            masterextractedColumnList,\n            masterfieldList,\n            masterdataList,\n            mastercomboComponents,\n            masterwithoutCombocomponent,\n            masterComboColumnFiled,\n            masterDesign,\n            masterIndex,\n            screenName,\n            masterOperation,\n            masterEditObject\n          }\n        };\n      } else {\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster: [],\n            selectedControl: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            addMaster: false,\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterEditObject: [],\n            masterOperation: [],\n            masterIndex: undefined,\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeDynamicView = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          isDynamicViewSlideOut: false,\n          selectedDynamicViewControl: undefined\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeComponent = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadComponent: false,\n          selectComponent: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeTest = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadTest: false,\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeSubSample = e => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadSubSample: false,\n          selectedSubSample: {},\n          showSaveContinue: false,\n          selectComponent: {},\n          selectedTestData: {},\n          selectPackage: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          masterStatus: \"\",\n          TestPackage: [],\n          //Test:[]\n          TestCombined: []\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onspecChange = (event, fieldName) => {\n      if (event !== null) {\n        const selectedRecord = this.state.selectedRecord; // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\n        //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\n\n        selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\n        selectedRecord[\"nallottedspeccode\"] = event; //  if(this.props.Login.Component.length=== 0 ){\n\n        this.setState({\n          selectedRecord\n        }); // }else{\n        //     if(event.value!== oldpromarycode ){\n        //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n        //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\n        //     }\n        // }\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      } // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\n      //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\n      // } else {\n      //     // if(event.key!== this.props.Login.ActiveKey ){\n      //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\n      //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\n      //     // }\n      // }\n\n    };\n\n    this.handleComponentRowClick = event => {\n      let selectedComponent = event.dataItem;\n      let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          SelectedTest,\n          selectedComponent,\n          testDataState: {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddComponent = () => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        this.props.AddComponents(Map);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectComponent = this.state.selectComponent || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectComponent[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectComponent\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectComponent[fieldName] = comboData;\n          selectComponent[\"Sample Name\"] = comboData.label;\n          selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode; // selectComponent[\"nneedsubsample\"] = nneedsubsample;\n\n          selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n          this.props.componentTest(selectComponent, false, this.state.specBasedComponent, this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputComponentOnChange = event => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (event.target.type === 'checkbox') {\n        selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectComponent[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectComponent\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectComponent\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveComponentClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.ComponentObjectAfterSave();\n        } else if (saveType === 2) {\n          this.ComponentObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        const dreceiveddate = selectedComponent[\"dreceiveddate\"];\n        objcomponent[\"dreceiveddate\"] = dreceiveddate;\n        objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n        objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\n        objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\n        objcomponent[\"jsondata\"] = \"\";\n        selectedComponent = { ...selectedComponent,\n          ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadComponent: false,\n              openChildModal: false,\n              selectComponent: undefined,\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno]\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.onTestPackageChange = (comboData, fieldName, nneedsubsample) => {\n      const selectPackage = this.state.selectPackage || {};\n      const selectedTestData = this.state.selectedTestData || {};\n\n      if (comboData !== null) {\n        selectPackage[fieldName] = comboData;\n        selectPackage[\"stestpackagename\"] = comboData.label; //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\n        // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\n        //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\n        //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\n        //     );\n\n        const selectedComponentData = this.props.Login.selectedComponent ? Object.keys(this.props.Login.selectedComponent).length !== 0 ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item : this.state.selectedSpec.nallottedspeccode.item;\n        this.props.testPackageTest(selectedComponentData, false, this.state.specBasedComponent, this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent, this.props.Login, selectPackage, false, this.state.selectedSpec.nallottedspeccode, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample);\n      } else {\n        let availableTest = [];\n\n        if (selectPackage[\"ntestpackagecode\"]) {\n          delete selectPackage[\"ntestpackagecode\"];\n          delete selectedTestData[\"ntestgrouptestcode\"];\n          let Test = this.props.Login.Test || [];\n          let testData = this.props.Login.AllTest || [];\n          let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\n          availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\n        } else {\n          availableTest = this.props.Login.TestCombined || [];\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedTestData: {},\n            selectPackage,\n            TestCombined: availableTest\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const childoperation = this.props.Login.childoperation;\n\n      if (childoperation === \"create\") {\n        if (saveType === 1) {\n          this.SubSampleObjectAfterSave();\n        } else if (saveType === 2) {\n          this.SubSampleObject();\n        }\n      } else {\n        const Component = this.props.Login.Component;\n        const Test = this.props.Login.Test;\n        const testrequired = this.state.selectedRecord.ntransactionstatus; // const defaulttimezone = this.props.Login.defaulttimezone;\n        // const userInfo = this.props.Login.userInfo;\n\n        let selectedComponent = { ...this.state.selectComponent\n        };\n        let objcomponent = {};\n        objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"; // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n        // if(this.props.specBasedComponent){\n        //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\n        //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\n        //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\n        // }else{\n        //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n        // }\n\n        const subSampleDetail = getRegistrationSubSample(selectedComponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n        objcomponent = { ...objcomponent,\n          ...subSampleDetail.sampleRegistration\n        };\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n        const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno);\n        if (index1 !== -1) subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'],\n          ...objcomponent\n        }; // objcomponent[\"jsondata\"] = {}\n        // objcomponent[\"jsonuidata\"] = {}\n        // this.props.Login.masterData.SubSampleTemplate &&\n        //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        //         row.children.map(column => {\n        //             column.children.map(component => {\n        //                 if (component.hasOwnProperty(\"children\")) {\n        //                    // let componentrowlabel = ''\n        //                  //   let componentrowvalue = ''\n        //                     component.children.map(componentrow => {\n        //                         if (componentrow.inputtype === \"combo\") {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\n        //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\n        //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\n        //                           //  }\n        //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\n        //                         }\n        //                         else if (componentrow.inputtype === \"date\") {\n        //                             if (componentrow.mandatory) {\n        //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\n        //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             } else {\n        //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n        //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\n        //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\n        //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\n        //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\n        //                             }\n        //                             if (componentrow.timezone) {\n        //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\n        //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\n        //                                     defaulttimezone ? defaulttimezone : -1\n        //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\n        //                             }\n        //                             // dateList.push(componentrow.label)\n        //                         }\n        //                         else {\n        //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\n        //                                 selectedComponent[componentrow.label] : \"\"\n        //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\n        //                             // if (selectedComponent[componentrow.label]) {\n        //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n        //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\n        //                             // }\n        //                         }\n        //                     })\n        //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n        //                 }\n        //                 else {\n        //                     if (component.inputtype === \"combo\") {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\n        //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\n        //                     }\n        //                     else if (component.inputtype === \"date\") {\n        //                         if (component.mandatory) {\n        //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\n        //                                 selectedComponent[component.label] : new Date(), userInfo);\n        //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         } else {\n        //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n        //                                 convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) :\n        //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\n        //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\n        //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                         }\n        //                         if (component.timezone) {\n        //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\n        //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\n        //                                 defaulttimezone ? defaulttimezone : -1\n        //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \n        //                         }\n        //                         //dateList.push(component.label)\n        //                     }\n        //                     else {\n        //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\n        //                             selectedComponent[component.label] : \"\"\n        //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\n        //                     }\n        //                 }\n        //             }\n        //             )\n        //         })\n        //     })\n\n        selectedComponent = { ...objcomponent\n        };\n        const index = Component.findIndex(x => x.slno === selectedComponent.slno);\n\n        if (index > -1) {\n          Component.splice(index, 1, selectedComponent);\n        }\n\n        if (testrequired === 3) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\n        } else if (selectedComponent[\"nneedservice\"] === true) {\n          this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\n        } else {\n          delete selectedComponent.nneedservice;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              Component,\n              selectedComponent: selectedComponent,\n              loadSubSample: false,\n              openChildModal: false,\n              selectComponent: {},\n              parentPopUpSize: \"xl\",\n              Test,\n              SelectedTest: Test[selectedComponent.slno],\n              screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n              subSampleDataGridList\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\n      const Map = {};\n      Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      Map[\"testrequired\"] = false;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n      Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ? updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1;\n      this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent, this.props.Login.Components, selectedTestData, this.props.Login.lstComponent);\n    };\n\n    this.editComponent = editselectedcomponent => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\n    };\n\n    this.editSubSample = (editselectedcomponent, specBasedComponent) => {\n      let inputData = {};\n      let objComponent = { ...editselectedcomponent\n      };\n      const defaulttimezone = this.props.Login.defaulttimezone;\n      const userInfo = this.props.Login.userInfo;\n      inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n      inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n      inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode; // inputData[\"masterData\"]=this.props.Login.masterData;\n\n      let selectComponent = this.state.selectComponent;\n      selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ? objComponent['nspecsampletypecode'] : -1;\n\n      if (specBasedComponent) {\n        selectComponent['ncomponentcode'] = {\n          value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1,\n          label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\"\n        };\n      }\n\n      selectComponent['slno'] = objComponent['slno'];\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              return component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                } else if (componentrow.inputtype === \"date\") {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\n\n                  if (componentrow.timezone) {\n                    selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ? objComponent[\"jsondata\"][`tz${componentrow.label}`] : defaulttimezone ? defaulttimezone : -1;\n                  }\n                } else {\n                  selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ? objComponent[\"jsondata\"][componentrow.label] : \"\";\n                }\n\n                return null;\n              });\n            } else {\n              if (component.inputtype === \"combo\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : -1;\n              } else if (component.inputtype === \"date\") {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\n\n                if (component.timezone) {\n                  selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ? objComponent[\"jsondata\"][`tz${component.label}`] : defaulttimezone ? defaulttimezone : -1;\n                }\n              } else {\n                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ? objComponent[\"jsondata\"][component.label] : \"\";\n              }\n\n              return selectComponent;\n            }\n          });\n        });\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         loadSubSample: true, childoperation: \"update\",\n      //         ChildscreenName: \"SubSample\",\n      //         screenName: \"SubSample\",\n      //         openChildModal: false, selectComponent,\n      //         parentPopUpSize: \"lg\", loading: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo)\n\n      this.props.editSubSample(inputData, selectComponent, this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData, this.state.selectedRecord);\n    };\n\n    this.deleteComponent = event => {\n      const dataItem = event;\n      const comp1 = this.props.Login.Component;\n      const Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n      const Test = this.props.Login.Test;\n      let SelectedTest = this.props.Login.SelectedTest;\n      const index = comp1.findIndex(x => x.slno === dataItem.slno);\n      const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\n      let updateInfo = {};\n      let incslno = comp1.length - 1;\n\n      if (comp1.length !== dataItem.slno) {\n        subSampleDataGridList = []; //  let slno = Component[index].slno\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        const preList = comp1.splice(0, index);\n        const afterList = comp1.splice(index, comp1.length);\n        preList.map(x => {\n          Test[incslno] = Test && Test[x.slno];\n          x.slno = incslno;\n          incslno = incslno - 1;\n          return null;\n        });\n        const Component1 = [...preList, ...afterList];\n        Component1.map(x => {\n          subSampleDataGridList.push({ ...x.jsonuidata,\n            ...x\n          });\n        });\n        sortByField(subSampleDataGridList, 'desc', 'slno');\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component1[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component1,\n            selectedComponent: Component1[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      } else {\n        if (index > -1) {\n          Component.splice(index, 1);\n        }\n\n        if (subSampleIndex > -1) {\n          subSampleDataGridList.splice(subSampleIndex, 1);\n        }\n\n        Test && Test[dataItem.slno] && delete Test[dataItem.slno];\n        SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            Component,\n            selectedComponent: Component[0],\n            Test,\n            SelectedTest,\n            subSampleDataGridList\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteTest = event => {\n      const dataItem = event;\n      let SelectedTest = this.props.Login.SelectedTest;\n      let selectedComponent = this.props.Login.selectedComponent;\n      const Test = this.props.Login.Test;\n      const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\n\n      if (index > -1) {\n        SelectedTest.splice(index, 1);\n      }\n\n      Test[selectedComponent.slno] = SelectedTest;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Test,\n          SelectedTest\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSaveTestClick = (saveType, formRef) => {\n      let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      let updateInfo = {};\n      let selectedComponent = this.props.Login.selectedComponent;\n      let Test = this.props.Login.Test || [];\n\n      if (this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\"\n          }\n        };\n      } else {\n        selectedComponent = {\n          jsondata: {\n            samplename: \"NA\"\n          },\n          slno: 1\n        };\n        selectedTestData.map(item => {\n          item.item['slno'] = selectedComponent.slno;\n          return selectedTestArray.push(item.item);\n        });\n        const Component = [selectedComponent];\n        const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n        Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedComponent,\n            Component,\n            SelectedTest: Test[selectedComponent.slno],\n            Test: Test,\n            selectedTestData: {},\n            loadTest: false,\n            parentPopUpSize: \"xl\",\n            screenName: this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentDataStateChange = event => {\n      this.setState({\n        componentDataState: event.dataState\n      });\n    };\n\n    this.testDataStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.subSampleDataStateChange = event => {\n      this.setState({\n        subSampleDataState: event.dataState\n      });\n    };\n\n    this.addsubSample = (specBasedComponent, specBasedTestPackage) => {\n      let Map = {};\n\n      if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"testrequired\"] = false;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        let data = this.state.SubSamplecomboComponents || [];\n        const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || [];\n        const component = [...data, ...SubSamplewithoutCombocomponent];\n        const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n        if (component.length === 0) {\n          if (Layout !== undefined) {\n            Layout.map(row => {\n              return row.children.map(column => {\n                return column.children.map(component => {\n                  return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                    if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\" || componentrow.inputtype === \"frontendsearchfilter\") {\n                      data.push(componentrow);\n                    } else {\n                      SubSamplewithoutCombocomponent.push(componentrow);\n                    }\n\n                    return null;\n                  }) : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\" || component.inputtype === \"frontendsearchfilter\" ? data.push(component) : SubSamplewithoutCombocomponent.push(component);\n                });\n              });\n            });\n            const SubSamplecomboComponents = data;\n            let childColumnList = {};\n            data.map(columnList => {\n              const val = comboChild(data, columnList, childColumnList, true);\n              data = val.data;\n              childColumnList = val.childColumnList;\n              return null;\n            });\n            this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login); //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\n          }\n        } else {\n          this.props.addsubSample(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectComponent, this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents, this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map, this.props.Login.Component, false, this.props.Login.SubSamplecomboData, this.state.selectedRecord, true, specBasedTestPackage, this.props.Login);\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.screenName !== 'scheduler') {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistration(true);\n          }\n        }\n      } else {\n        if (operation === \"update\") {\n          this.onUpdateRegistration(saveType, formRef, operation);\n        } else {\n          if (operation === \"create\") {\n            this.insertRegistrationScheduler(true);\n          }\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericBlur = (value, control) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[control.label]) {\n        if (control.max) {\n          if (!(selectedRecord[control.label] < parseFloat(control.max))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedRecord[control.label] > parseFloat(control.min))) {\n            selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangeMaster = (comboData, fieldName, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (comboData !== null) {\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          selectedMaster[masterIndex][item.tableDataField] = comboData.value;\n        } else if (item.foreignDataField) {\n          selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\n        }\n      }\n\n      selectedMaster[masterIndex][fieldName] = comboData;\n\n      if (item.childIndex !== undefined) {\n        this.props.getChildComboMaster(selectedMaster, fieldName, item, this.props.Login.selectedControl, this.props.Login.masterfieldList, this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex);\n      } else {\n        this.setState({\n          selectedMaster\n        });\n      }\n    };\n\n    this.handleDateChangeMaster = (dateName, dateValue, item) => {\n      //   const { selectedMaster } = this.state;\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      const age = ageCalculate(dateValue);\n      selectedMaster[masterIndex][\"sage\"] = age;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputOnChangeMaster = (value, name, item) => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onInputOnChangeMaster = event => {\n      const selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\n\n        if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\n            selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\n            selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\n            selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\n            selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\n            selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\n            selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\n            selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\n          } else {\n            selectedMaster[masterIndex].sflatnotemp = \"\";\n            selectedMaster[masterIndex].shousenotemp = \"\";\n            selectedMaster[masterIndex].spostalcodetemp = \"\";\n            selectedMaster[masterIndex].sstreettemp = \"\";\n            selectedMaster[masterIndex].scitynametemp = \"\";\n            selectedMaster[masterIndex].sdistrictnametemp = \"\";\n            selectedMaster[masterIndex].sregionnametemp = \"\";\n          }\n        }\n      } else {\n        // selectedMaster[masterIndex][event.target.name] = event.target.value;\n        if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ? event.target.value : selectedMaster[masterIndex][event.target.name];\n          } else {\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onSaveMasterRecord = (saveType, formRef) => {\n      //add / edit            \n      const masterIndex = this.props.Login.masterIndex;\n      let inputData = [];\n      const selectedControl = this.props.Login.selectedControl;\n      const masterDesign = this.props.Login.masterDesign;\n      inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n        nformcode: selectedControl[masterIndex].table.item.nformcode\n      };\n      inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      let isEmailCheck = true;\n      const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase();\n\n      if (this.props.Login.masterOperation[masterIndex] === 'update') {\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item ? this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : this.props.Login.masterEditObject[masterIndex].ndynamicmastercode;\n        } else {\n          inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value;\n        }\n      }\n\n      if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\n        const selectedMaster = this.state.selectedMaster;\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo,\n          nformcode: selectedControl[masterIndex].table.item.nformcode\n        };\n        inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\n        inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\n        inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique; //add                          \n\n        inputData[\"dynamicmaster\"] = { ...inputData[methodUrl],\n          nformcode: selectedControl[masterIndex].table.item.nformcode,\n          ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\n          jsondata: {},\n          jsonuidata: {}\n        };\n        const dateList = [];\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        masterDesign[masterIndex] && masterDesign[masterIndex].slideoutdesign.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ? {\n                      value: selectedMaster[masterIndex][componentrow.label].value,\n                      label: selectedMaster[masterIndex][componentrow.label].label,\n                      pkey: componentrow.valuemember,\n                      nquerybuildertablecode: componentrow.nquerybuildertablecode,\n                      source: componentrow.source,\n                      [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][componentrow.label].item ? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] : selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\n                    } : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\";\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false);\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    } else {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) : selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false) : \"\";\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\n                    }\n\n                    if (componentrow.timezone) {\n                      inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ? {\n                        value: selectedMaster[masterIndex][`tz${componentrow.label}`].value,\n                        label: selectedMaster[masterIndex][`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label] : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]; // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\n                  }\n\n                  return inputData[\"dynamicmaster\"];\n                });\n              } else {\n                if (component.inputtype === \"combo\") {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? {\n                    value: selectedMaster[masterIndex][component.label].value,\n                    label: selectedMaster[masterIndex][component.label].label,\n                    pkey: component.valuemember,\n                    nquerybuildertablecode: component.nquerybuildertablecode,\n                    source: component.source,\n                    [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ? selectedMaster[masterIndex][component.label].item ? selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember] : selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\n                  } : -1;\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label; //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false); // convertDateTimetoString(selectedRecord[component.label] ?\n                    // selectedRecord[component.label] : new Date(), userInfo);\n\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo);\n                  } else {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ? //convertDateTimetoString(selectedRecord[component.label] ?                                      \n                    //    selectedRecord[component.label] : new Date(), userInfo) :\n                    formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) : selectedMaster[masterIndex][component.label] ? // convertDateTimetoString(selectedRecord[component.label] ?\n                    //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\n                    formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]; //convertDateTimetoString(selectedRecord[component.label], userInfo)\n                  }\n\n                  if (component.timezone) {\n                    inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ? {\n                      value: selectedMaster[masterIndex][`tz${component.label}`].value,\n                      label: selectedMaster[masterIndex][`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ? selectedMaster[masterIndex][component.label] : \"\";\n                  inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label];\n                }\n              }\n\n              return inputData[\"dynamicmaster\"];\n            });\n            return inputData[\"dynamicmaster\"];\n          });\n          return inputData[\"dynamicmaster\"];\n        });\n        inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\n        inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\n        inputData[\"masterdatelist\"] = dateList;\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\n        inputData[\"noneedfilter\"] = 1;\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2;\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } else if (selectedControl[masterIndex].table.item.component === 'Type3Component' && selectedControl[masterIndex].table.item.nformcode === 43) {\n        inputData[\"noneedfilter\"] = 2; //will disl=play all db records\n\n        if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n          inputData[\"noneedfilter\"] = 2; //will display will added record\n        }\n\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (fieldName === \"semail\") {\n            isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\n          }\n\n          if (item.isJsonField === true) {\n            let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n\n            if (item.controlType === \"datepicker\") {\n              fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"selectbox\") {\n              fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              fieldName = item.tableDataField;\n            }\n\n            inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: fieldData\n            };\n            return inputData[methodUrl];\n          } else {\n            if (item.controlType === \"selectbox\") {\n              // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n        inputData[methodUrl][\"nproductcode\"] = -1; //inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\n        //inputData[methodUrl][\"sexternalorderid\"] = 1;\n\n        inputData[methodUrl][\"nordertypecode\"] = 1;\n      } else {\n        this.props.Login.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n\n          if (item.isJsonField === true) {\n            return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName],\n              [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\"\n            };\n          } else {\n            if (item.controlType === \"selectbox\") {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\n              inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\n              return inputData;\n            } else if (item.controlType === \"datepicker\") {\n              inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\n            } else if (item.controlType === \"checkbox\") {\n              inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\n            } else {\n              inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\n            } // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\n\n\n            return inputData;\n          }\n        });\n      } // }\n\n\n      const inputParam = {\n        withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent : this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents : this.props.Login.comboComponents,\n        selectedRecord: this.props.Login.loadSubSample ? this.state.selectComponent : this.state.selectedRecord,\n        selectedRecordName: this.props.Login.loadSubSample ? 'selectComponent' : 'selectedRecord',\n        loadSubSample: this.props.Login.loadSubSample,\n        selectedControl: this.props.Login.selectedControl,\n        comboData: this.props.Login.loadSubSample ? this.props.Login.SubSamplecomboData : this.props.Login.comboData,\n        comboName: this.props.Login.loadSubSample ? 'SubSamplecomboData' : 'comboData',\n        classUrl: selectedControl[masterIndex].table.item.classUrl,\n        methodUrl: selectedControl[masterIndex].table.item.methodUrl,\n        // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\n        inputData: inputData,\n        operation: this.props.Login.masterOperation[masterIndex],\n        saveType,\n        formRef,\n        screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n        masterIndex,\n        selectedMaster: this.state.selectedMaster,\n        mastercomboComponents: this.props.Login.mastercomboComponents,\n        masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\n        masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\n        masterextractedColumnList: this.props.Login.masterextractedColumnList,\n        masterdataList: this.props.Login.masterdataList,\n        masterDesign: this.props.Login.masterDesign,\n        masterfieldList: this.props.Login.masterfieldList,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\n        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\n        masterEditObject: this.props.Login.masterEditObject,\n        masterOperation: this.props.Login.masterOperation\n      };\n\n      if (isEmailCheck) {\n        this.props.addMasterRecord(inputParam, this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.onClickView = selectedControl => {\n      const selectedRecord = this.state.selectedRecord;\n\n      if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\n        this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECT\"\n        }) + \" \" + selectedControl.label);\n      }\n    };\n\n    this.addMasterRecord = control => {\n      let masterIndex = this.props.Login.masterIndex;\n\n      if (masterIndex !== undefined) {\n        masterIndex = masterIndex + 1;\n      } else {\n        masterIndex = 0;\n      }\n\n      let selectedControl = this.props.Login.selectedControl || [];\n      let selectedMaster = this.state.selectedMaster || [];\n      selectedMaster[masterIndex] = {};\n      selectedControl[masterIndex] = control;\n      let fieldList = this.props.Login.masterfieldList || [];\n      fieldList[masterIndex] = [];\n      let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n      masterComboColumnFiled[masterIndex] = [];\n      let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n      extractedColumnList[masterIndex] = [];\n      let masterdataList = this.props.Login.masterdataList || [];\n      let masterDesign = this.props.Login.masterDesign || [];\n      let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n      let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n      let masterOperation = this.props.Login.masterOperation || [];\n      masterdataList[masterIndex] = [];\n      masterDesign[masterIndex] = [];\n      masterwithoutCombocomponent[masterIndex] = [];\n      mastercomboComponents[masterIndex] = [];\n      masterOperation[masterIndex] = 'create';\n\n      if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n        if (control.table.item.component === 'Type2Component') {\n          fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n        } else {\n          fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n        }\n\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (control.table.item.component === 'Type3Component') {\n        fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n        extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n        masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n        const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterprimaryKeyField: primaryKeyField,\n          masterComboColumnFiled: masterComboColumnFiled,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterOperation,\n          selectedMaster,\n          screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n        };\n        this.props.getAddMasterCombo(inputParam);\n      } else if (control.table.item.component === 'Dynamic') {\n        const inputParam = {\n          userinfo: this.props.Login.userInfo,\n          selectedControl,\n          masterIndex,\n          masterdataList,\n          masterDesign,\n          masterComboColumnFiled,\n          masterwithoutCombocomponent,\n          mastercomboComponents,\n          masterfieldList: fieldList,\n          masterextractedColumnList: extractedColumnList,\n          masterComboColumnFiled,\n          masterOperation,\n          selectedMaster\n        };\n        this.props.getDynamicMasterTempalte(inputParam);\n      } // this.props.getMasterRecord(control);\n\n    };\n\n    this.editMasterRecord = (control, editObject) => {\n      if (editObject) {\n        let masterIndex = this.props.Login.masterIndex;\n\n        if (masterIndex !== undefined) {\n          masterIndex = masterIndex + 1;\n        } else {\n          masterIndex = 0;\n        }\n\n        let selectedControl = this.props.Login.selectedControl || [];\n        let selectedMaster = this.state.selectedMaster || [];\n        selectedMaster[masterIndex] = {};\n        selectedControl[masterIndex] = control;\n        let fieldList = this.props.Login.masterfieldList || [];\n        fieldList[masterIndex] = [];\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || [];\n        masterComboColumnFiled[masterIndex] = [];\n        let extractedColumnList = this.props.Login.masterextractedColumnList || [];\n        extractedColumnList[masterIndex] = [];\n        let masterdataList = this.props.Login.masterdataList || [];\n        let masterDesign = this.props.Login.masterDesign || [];\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n        let mastercomboComponents = this.props.Login.mastercomboComponents || [];\n        let masterOperation = this.props.Login.masterOperation || [];\n        let masterEditObject = this.props.Login.masterEditObject || [];\n        masterdataList[masterIndex] = [];\n        masterDesign[masterIndex] = [];\n        masterwithoutCombocomponent[masterIndex] = [];\n        mastercomboComponents[masterIndex] = [];\n        masterOperation[masterIndex] = 'update';\n        masterEditObject[masterIndex] = editObject;\n\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\n          if (control.table.item.component === 'Type2Component') {\n            fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\n          } else {\n            fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\n          }\n\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const updateInfo = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            addMaster: true,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            selectedMaster,\n            masterEditObject,\n            masterOperation // editObject\n            //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\n\n          };\n          this.props.getEditMaster(updateInfo);\n        } else if (control.table.item.component === 'Type3Component') {\n          fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\n          extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\n          masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item => item.ndesigncomponentcode === designComponents.COMBOBOX);\n          const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterprimaryKeyField: primaryKeyField,\n            masterComboColumnFiled: masterComboColumnFiled,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterEditObject,\n            masterOperation,\n            selectedMaster,\n            screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode] // editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        } else if (control.table.item.component === 'Dynamic') {\n          const inputParam = {\n            userinfo: this.props.Login.userInfo,\n            selectedControl,\n            masterIndex,\n            masterdataList,\n            masterDesign,\n            masterComboColumnFiled,\n            masterwithoutCombocomponent,\n            mastercomboComponents,\n            masterfieldList: fieldList,\n            masterextractedColumnList: extractedColumnList,\n            masterComboColumnFiled,\n            masterEditObject,\n            masterOperation,\n            selectedMaster //  editObject\n\n          };\n          this.props.getEditMaster(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTHERECORD\"\n        }));\n      }\n    };\n\n    this.onComboChangeMasterDyanmic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {}; //if (comboData) {\n\n      comboData[\"item\"] = { ...comboData[\"item\"],\n        \"pkey\": control.valuemember,\n        \"nquerybuildertablecode\": control.nquerybuildertablecode,\n        \"source\": control.source\n      };\n      selectedMaster[masterIndex][comboName] = comboData; // console.log(\"selected:\", selectedMaster, comboData, control, customName);\n\n      if (control.child && control.child.length > 0) {\n        const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\");\n        let childColumnList = {};\n        childComboList.map(columnList => {\n          const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\n          childColumnList = val.childColumnList;\n        });\n        const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\");\n\n        if (comboData) {\n          const inputParem = {\n            child: control.child,\n            source: control.source,\n            primarykeyField: control.valuemember,\n            value: comboData.value,\n            item: comboData.item\n          };\n          this.props.getChildValuesForAddMaster(inputParem, this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList, childComboList, childColumnList, this.props.Login.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex);\n        } else {\n          let comboData = this.props.Login.masterdataList;\n          const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || [];\n          const inputParam = {\n            control,\n            comboComponents: this.props.Login.mastercomboComponents[masterIndex],\n            withoutCombocomponent: withoutCombocomponent[masterIndex],\n            selectedMaster: selectedMaster[masterIndex],\n            comboData: comboData[masterIndex]\n          };\n          const childParam = childComboClear(inputParam);\n          selectedMaster[masterIndex] = childParam.selectedRecord;\n          comboData[masterIndex] = childParam.comboData;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedMaster,\n              mastedataList: comboData\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedMaster\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChangeMasterDynamic = (event, radiotext) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (event.target.type === 'toggle') {\n        selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === 'numeric') {\n        if (/\\D/.test(event.target.value)) selectedMaster[masterIndex][event.target.name] = event.target.value;\n      } else if (event.target.type === 'checkbox') {\n        const value = selectedMaster[masterIndex][event.target.name];\n\n        if (value !== '' && value !== undefined) {\n          if (value.includes(radiotext)) {\n            const index = value.indexOf(radiotext);\n\n            if (index !== -1) {\n              if (index === 0) {\n                const indexcomma = value.indexOf(\",\");\n\n                if (indexcomma !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = \"\";\n                }\n              } else {\n                if (value.slice(index).indexOf(\",\") !== -1) {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1);\n                } else {\n                  selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1);\n                }\n              }\n            }\n          } else {\n            selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\n          }\n        } else {\n          selectedMaster[masterIndex][event.target.name] = radiotext;\n        }\n      } else if (event.target.type === 'radio') {\n        selectedMaster[masterIndex][event.target.name] = radiotext;\n      } else {\n        selectedMaster[masterIndex][event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.handleDateChangeMasterDynamic = (dateValue, dateName) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][dateName] = dateValue;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericInputChangeMasterDynamic = (value, name) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      selectedMaster[masterIndex][name] = value;\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.onNumericBlurMasterDynamic = (value, control) => {\n      let selectedMaster = this.state.selectedMaster || [];\n      const masterIndex = this.props.Login.masterIndex;\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n\n      if (selectedMaster[masterIndex][control.label]) {\n        if (control.max) {\n          if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max);\n          }\n        }\n\n        if (control.min) {\n          if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\n            selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min);\n          }\n        }\n      }\n\n      this.setState({\n        selectedMaster\n      });\n    };\n\n    this.myRef = React.createRef();\n    this.PrevoiusLoginData = this.props.PrevoiusLoginData;\n    this.subSampleDataGridList = [];\n    this.componentColumnList = [{\n      \"idsName\": \"IDS_COMPONENT\",\n      \"dataField\": \"scomponentname\",\n      width: \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATERECEIVED\",\n      \"dataField\": \"sreceiveddate\",\n      width: \"250px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      width: \"200px\"\n    }];\n    this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.info(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let masterStatus = this.props.masterStatus; // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\n\n    let check = false;\n\n    if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\n      this.setState({\n        selectedMaster: this.props.Login.selectedMaster\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\n      const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] && this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false; // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\n      //     this.props.Login.userRoleControlRights !== undefined ? true : false\n\n      const specBasedTestPackage = this.props.Login.userRoleControlRights && this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false;\n      this.subSampleDataGridList = [];\n\n      if (specBasedComponent) {\n        this.subSampleDataGridList = [{\n          \"idsName\": \"IDS_COMPONENT\",\n          \"dataField\": \"scomponentname\",\n          width: \"200px\"\n        }];\n      }\n\n      this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n        return row.children.map(column => {\n          return column.children.map(component => {\n            // let label = ''\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  // label = label + '&' + componentrow.label\n                  this.subSampleDataGridList.push({\n                    \"mandatory\": true,\n                    //\"idsName\": componentrow.label, \n                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\n                    \"dataField\": componentrow.label,\n                    width: \"150px\"\n                  });\n                }\n\n                return this.subSampleDataGridList;\n              });\n            } else {\n              if (component.mandatory) this.subSampleDataGridList.push({\n                \"mandatory\": true,\n                // \"idsName\": component.label,\n                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\n                \"dataField\": component.label,\n                width: \"150px\"\n              });\n              return this.subSampleDataGridList;\n            } // if (label !== '') {\n            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\n            // }\n\n          });\n        });\n      });\n      this.setState({\n        selectedSpec: this.props.Login.selectedSpec,\n        specBasedComponent,\n        specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\n      this.setState({\n        selectedTestData: this.props.Login.selectedTestData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\n      this.setState({\n        selectedTestPackageData: this.props.Login.selectedTestPackageData\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\n      this.setState({\n        selectComponent: this.props.Login.selectComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\n      this.setState({\n        selectPackage: this.props.Login.selectPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\n      this.setState({\n        specBasedComponent: this.props.Login.specBasedComponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\n      this.setState({\n        specBasedTestPackage: this.props.Login.specBasedTestPackage\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\n      this.setState({\n        SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent\n      });\n      check = true;\n    }\n\n    if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\n      this.setState({\n        SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents\n      });\n      check = true;\n    }\n\n    if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\n      this.setState({\n        parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList\n      });\n      check = true;\n    }\n\n    if (check) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (masterStatus !== \"\" && masterStatus !== undefined) {\n      toast.info(masterStatus);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n      masterStatus = \"\";\n    }\n\n    if (this.props.innerPopup !== this.state.innerTop) {\n      setTimeout(() => {\n        let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\n\n        if (this.myRef && this.myRef.current) {\n          this.myRef.current.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n\n        if (scrollDoc) {\n          scrollDoc.scrollIntoView({\n            behavior: 'smooth'\n          });\n        }\n      }, 100);\n      this.setState({\n        innerTop: this.props.innerPopup\n      });\n    }\n  }\n\n  ComponentObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: {},\n          showSaveContinue: false,\n          loadComponent: false,\n          parentPopUpSize: \"xl\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  ComponentObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    };\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = { ...objcomponent\n      };\n      saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      const dreceiveddate = objcomponent[\"dreceiveddate\"];\n      saveComponent[\"dreceiveddate\"] = dreceiveddate;\n      saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\n      saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\n      saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\n      saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\n      saveComponent[\"jsondata\"] = \"\";\n      Component.unshift(saveComponent);\n      objcomponent1[\"scomments\"] = \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          selectedComponent: saveComponent,\n          SelectedTest: [],\n          selectComponent: objcomponent1\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObjectAfterSave() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 2);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      }); // saveComponent[\"jsondata\"] = {}\n      // saveComponent[\"jsonuidata\"] = {}\n      // this.props.Login.masterData.SubSampleTemplate &&\n      //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n      //         row.children.map(column => {\n      //             column.children.map(component => {\n      //                 if (component.hasOwnProperty(\"children\")) {\n      //                    // let componentrowlabel = ''\n      //                    // let componentrowvalue = ''\n      //                     component.children.map(componentrow => {\n      //                         if (componentrow.inputtype === \"combo\") {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\n      //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\n      //                             // }\n      //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\n      //                         }\n      //                         else if (componentrow.inputtype === \"date\") {\n      //                             if (componentrow.mandatory) {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                     objcomponent[componentrow.label] : new Date(), userInfo);\n      //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             } else {\n      //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\n      //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\n      //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\n      //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\n      //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             }\n      //                             if (componentrow.timezone) {\n      //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\n      //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\n      //                                     defaulttimezone ? defaulttimezone : -1\n      //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\n      //                             }\n      //                             // dateList.push(componentrow.label)\n      //                         }\n      //                         else {\n      //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\n      //                                 objcomponent[componentrow.label] : \"\"\n      //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\n      //                             // if (objcomponent[componentrow.label]) {\n      //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n      //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\n      //                             // }\n      //                         }\n      //                     })\n      //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n      //                 }\n      //                 else {\n      //                     if (component.inputtype === \"combo\") {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\n      //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\n      //                         }\n      //                     else if (component.inputtype === \"date\") {\n      //                         if (component.mandatory) {\n      //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\n      //                                 objcomponent[component.label] : new Date(), userInfo);\n      //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                         } else {\n      //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\n      //                                 convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) :\n      //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\n      //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\n      //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                                 }\n      //                         if (component.timezone) {\n      //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\n      //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\n      //                                 defaulttimezone ? defaulttimezone : -1\n      //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\n      //                         }\n      //                         //dateList.push(component.label)\n      //                     }\n      //                     else {\n      //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\n      //                             objcomponent[component.label] : \"\"\n      //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\n      //                     }\n      //                 }\n      //             }\n      //             )\n      //         })\n      //     })\n      //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\n\n      Component.unshift(saveComponent);\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      const selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //    selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n      // let selectedComponent = this.props.Login.selectedComponent;\n\n      const Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : []; //  ArrayTest.push(selectedTestArray);\n\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          Component,\n          openChildModal: false,\n          selectedComponent: saveComponent,\n          loadSubSample: false,\n          selectComponent: {},\n          showSaveContinue: false,\n          parentPopUpSize: \"xl\",\n          SelectedTest: Test[saveComponent.slno],\n          Test: Test,\n          selectedTestData: {},\n          screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\n          subSampleDataGridList,\n          masterStatus: \"\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    }\n  }\n\n  SubSampleObject() {\n    const testrequired = this.state.selectedRecord.ntransactionstatus;\n    let objcomponent = this.state.selectComponent;\n    delete objcomponent.nneedservice;\n    let objcomponent1 = { ...this.state.selectComponent\n    }; // const defaulttimezone = this.props.Login.defaulttimezone;\n    // const userInfo = this.props.Login.userInfo;\n\n    if (testrequired === 3) {\n      this.props.getTestfromDB(objcomponent, this.props.Login, 1);\n    } else {\n      const Component = this.props.Login.Component || [];\n      let saveComponent = {}; // if(this.props.specBasedComponent){\n      //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\n      //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\n      //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\n      // }else{\n      //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\n      // }\n\n      saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\n      const subSampleDetail = getRegistrationSubSample(objcomponent, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec);\n      saveComponent = { ...saveComponent,\n        ...subSampleDetail.sampleRegistration\n      };\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList || [];\n      subSampleDataGridList.push({ ...saveComponent['jsonuidata'],\n        ...saveComponent\n      });\n      Component.unshift(saveComponent); // objcomponent1[\"scomments\"] = \"\";\n      //objcomponent1[\"ssubsamplename\"] = \"\";\n\n      let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\n      let selectedTestArray = [];\n      selectedTestData && selectedTestData.map(item => {\n        item.item['slno'] = saveComponent.slno;\n        return selectedTestArray.push(item.item);\n      }); // selectedTestArray.map((item,i)=>{\n      //     selectedTestArray[i]['slno']=saveComponent.slno;\n      // })\n\n      let Test = this.props.Login.Test || [];\n      const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n      Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray];\n      const updateInfo = {\n        Component,\n        selectedComponent: saveComponent,\n        selectComponent: objcomponent1,\n        //selectComponent:this.props.Login.saveContinueData,\n        SelectedTest: Test[saveComponent.slno],\n        Test: Test,\n        subSampleDataGridList,\n        //selectedTestData: {}\n        saveContinueData: this.props.Login.saveContinueData\n      };\n      this.addSubSampleSaveContinue(updateInfo, selectedTestData); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         Component, selectedComponent: saveComponent,\n      //         selectComponent: objcomponent1,\n      //         SelectedTest: Test[saveComponent.slno],\n      //         Test: Test, selectedTestData: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    }\n  }\n\n  onUpdateRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 2,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow : false,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      checkBoxOperation: 3,\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone, operation, this.props.comboComponents); //console.log(\"edit reg:\", param);\n\n    inputData[\"registration\"] = param.sampleRegistration;\n    inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno);\n    inputData[\"DateList\"] = param.dateList;\n    inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n    inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n    inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample; // Object.keys(this.state.selectedRecord).map(key => {\n    //     if (typeof this.state.selectedRecord[key] === \"object\") {\n    //         if (this.state.selectedRecord[key] === null) {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //         }\n    //         else if (this.state.selectedRecord[key] instanceof Date) {\n    //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\n    //         }\n    //         else {\n    //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\n    //         }\n    //     }\n    //     else {\n    //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\n    //     }\n    // }\n    //  )\n    // console.log(\"edit:\", inputData);\n    // if (inputData[\"registration\"] ) {\n    //     delete inputData[\"registration\"][\"esignpassword\"]\n    //     delete inputData[\"registration\"][\"esigncomments\"]\n    //     delete inputData[\"registration\"][\"agree\"]\n    // }\n\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"Registration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      selectedRecord: { ...this.state.selectedRecord,\n        sloginid: this.props.Login.userInfo.sloginid\n      },\n      action: 'editSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          // screenName:\"Esignature\",\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\",\n          //openModal:true, openPortal:false\n          openModal: false,\n          openPortal: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n  findSubsampleDateList(subsampletemplate) {\n    const dateList = [];\n    subsampletemplate && subsampletemplate.map(row => {\n      return row.children.map(column => {\n        return column.children.map(component => {\n          if (component.hasOwnProperty(\"children\")) {\n            return component.children.map(componentrow => {\n              if (componentrow.inputtype === \"date\") {\n                dateList.push(componentrow.label);\n              }\n            });\n          } else {\n            if (component.inputtype === \"date\") {\n              dateList.push(component.label);\n            }\n\n            return dateList;\n          }\n        });\n      });\n    });\n    return dateList;\n  }\n\n  insertRegistrationScheduler() {\n    let Components = this.props.Login.Component;\n\n    if (Components && Components.length > 0) {\n      let Test = this.props.Login.Test;\n      let Map = {};\n      Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n      Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false, this.state.selectedSpec);\n      Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ? this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\n      Map[\"nregtypecode\"] = 1;\n      Map[\"nregsubtypecode\"] = 1;\n      Map[\"nsampletypecode\"] = 1; // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n\n      Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n      Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n      Map[\"nneedtemplatebasedflow\"] = false;\n      Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false; // Map[\"checkBoxOperation\"] = 3;\n\n      const param = getRegistrationScheduler(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.schedulerTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents);\n      Map[\"Registration\"] = param.sampleRegistration;\n      Map[\"DateList\"] = param.dateList;\n      Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n      Map[\"userinfo\"] = this.props.Login.userInfo;\n      Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\n      Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false); //Map[\"nflag\"] = 2;\n      // Map[\"ntype\"] = 2;\n      //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n\n      const inputParam = {\n        inputData: Map,\n        postParamList: this.props.postParamList,\n        action: \"preregister\"\n      };\n      this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData);\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n      }));\n    }\n  }\n\n  insertRegistration() {\n    let Components = this.props.Login.Component;\n    let nneedsubsample = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n\n    if (this.state.selectedSpec.nallottedspeccode !== undefined && this.state.selectedSpec.nallottedspeccode !== \"\") {\n      if (nneedsubsample ? Components && Components.length > 0 : true) {\n        let Test = this.props.Login.Test;\n        let Map = {};\n        Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\n\n        if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\n          Map[\"RegistrationSample\"] = [{\n            \"jsondata\": {\n              \"ssamplename\": \"NA\"\n            },\n            \"slno\": 1,\n            \"ncomponentcode\": -1,\n            \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\n          }];\n        } else {\n          Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [], this.state.specBasedComponent, this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\n        }\n\n        Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata); //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\n        // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\n\n        Map[\"FromDate\"] = \"\";\n        Map[\"ToDate\"] = \"\";\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n        Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\n        Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\n        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\n        Map[\"checkBoxOperation\"] = 3;\n        const param = getRegistration(this.props.Login.masterData, this.state.selectedRecord, this.state.selectedSpec, this.props.Login.masterData.registrationTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create', this.props.comboComponents); //console.log(\"param:\", param);\n\n        Map[\"Registration\"] = param.sampleRegistration;\n        Map[\"DateList\"] = param.dateList;\n        Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\n        Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\n        Map[\"nflag\"] = 2;\n        Map[\"url\"] = this.props.Login.settings[24]; // Map[\"ntype\"] = 2;\n\n        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\n        Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']; //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\n\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\n          const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n          const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\n\n          if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\n            Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\n          }\n\n          if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\n            Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\n          }\n\n          Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = {\n            'nage': Map[\"AgeData\"],\n            'ngendercode': Map[\"ngendercode\"]\n          };\n          let orderType = {\n            \"Order Type\": {\n              \"pkey\": \"nordertypecode\",\n              \"label\": \"NA\",\n              \"value\": -1,\n              \"source\": \"ordertype\",\n              \"nordertypecode\": -1,\n              \"nquerybuildertablecode\": 246\n            }\n          };\n\n          if (this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9) {\n            orderType = {\n              \"Order Type\": {\n                \"pkey\": \"nordertypecode\",\n                \"label\": \"External\",\n                \"value\": 2,\n                \"source\": \"ordertype\",\n                \"nordertypecode\": 2,\n                \"nquerybuildertablecode\": 246\n              }\n            };\n          }\n\n          Map[\"Registration\"]['jsondata'] = { ...Map[\"Registration\"]['jsondata'],\n            ...orderType\n          };\n        }\n\n        Map[\"skipmethodvalidity\"] = false;\n        const inputParam = {\n          inputData: Map,\n          postParamList: this.props.postParamList,\n          action: \"preregister\"\n        }; //console.log(\"insert reg:\", inputParam);\n\n        this.props.insertRegistration(inputParam, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ADDSUBSAMPLETOPREREGISTER\"\n        }));\n      }\n    } else {\n      toast.info(this.props.intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  }\n\n  // addPatient =() => {\n  //     // const addParam = {\n  //     //     screenName: \"IDS_PATIENTMASTER\",\n  //     //     operation: \"create\",\n  //     //     primaryKeyName: \"npatientcode\",\n  //     //     masterData: this.props.Login.masterData,\n  //     //     userInfo: this.props.Login.userInfo,\n  //     //     ncontrolcode: addId,\n  //     //   };\n  //     // this.props.getPatientComboService(addParam);\n  //         const currentUserInfo = JSON.parse(JSON.stringify(this.props.Login.userInfo));\n  //         const userInfo = {\n  //             ...this.props.Login.userInfo, \n  //             \"nformcode\": 137,\n  //             \"nmodulecode\": 15, \"sformname\" : 'Patient Master', \n  //             \"smodulename\" : 'Contacts'\n  //         }\n  //         const inputParam = {\n  //             currentUserInfo,\n  //             inputData: { \"userinfo\": userInfo, currentdate: formatInputDate(new Date(), true) },\n  //             classUrl:'patient', methodUrl:'Patient', displayName:'IDS_PATIENT'\n  //         };\n  //         this.props.callService(inputParam);\n  // }\n  render() {\n    let saveType = 1;\n\n    if (this.props.ignoreFormValidation) {\n      saveType = 5;\n    }\n\n    let buttonLabel = \"Save\";\n    let idsLabel = \"IDS_SAVE\";\n\n    if (this.props.buttonLabel) {\n      buttonLabel = this.props.buttonLabel;\n      idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\n    } // const testColumnList = [\n    //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\n    //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\n    //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\n\n\n    return /*#__PURE__*/React.createElement(Modal, {\n      size: this.props.Login.loadComponent ? 'lg' : this.props.Login.loadSpec ? 'lg' : this.props.Login.loadTest ? 'lg' : this.props.Login.loadSubSample ? 'lg' : this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl' // size={this.props.templateData[0] ?\n      //     this.props.templateData[0].children ?\n      //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\n      ,\n      backdrop: \"static\" //className={this.props.className || \"registrationModel\"}\n      ,\n      className: this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      enforceFocus: false,\n      dialogClassName: \"modal-dialog-slideout freakerstop\",\n      \"aria-labelledby\": \"add-user\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3336,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3354,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add-user\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3355,\n        columnNumber: 21\n      }\n    }, this.props.graphView === true ? \"\" : this.props.Login.inputParam ? this.props.Login.esign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3358,\n        columnNumber: 33\n      }\n    }) : this.props.Login.loadEsign === true ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ESIGN\",\n      defaultMessage: \"Esign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3360,\n        columnNumber: 37\n      }\n    }) : this.props.loginoperation ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3362,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.operation ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.operation && \"IDS_\".concat(this.props.Login.addMaster ? this.props.Login.masterOperation[this.props.Login.masterIndex].toUpperCase() : this.props.Login.operation.toUpperCase()),\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3366,\n        columnNumber: 53\n      }\n    }), \" \", this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3371,\n        columnNumber: 61\n      }\n    }) : \"\") : this.props.Login.screenName ? /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.screenName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3377,\n        columnNumber: 53\n      }\n    }) : \"\") : \"\"), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView : this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter : this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadSpec ? this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ? this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample : this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3382,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3388,\n        columnNumber: 25\n      }\n    })), this.props.esign === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3391,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3392,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SUBMIT\",\n      defaultMessage: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3393,\n        columnNumber: 29\n      }\n    })) : (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3397,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3398,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VALIDATE\",\n      defaultMessage: \"Validate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3399,\n        columnNumber: 33\n      }\n    })) : this.props.showCalculate ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3402,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3403,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CALCULATE\",\n      defaultMessage: \"Calculate\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3404,\n        columnNumber: 37\n      }\n    })) : this.props.showParam === true && this.props.showExecute ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(4),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3407,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCalculator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3408,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EXECUTE\",\n      defaultMessage: \"Execute\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3409,\n        columnNumber: 41\n      }\n    })) : this.props.noSave || this.props.graphView ? this.props.operation === \"view\" ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-user btn-primary-blue\",\n      role: \"button\",\n      onClick: this.props.resetView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3413,\n        columnNumber: 47\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RESET\",\n      defaultMessage: \"Reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3416,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ? /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(3),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3419,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3420,\n        columnNumber: 49\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3421,\n        columnNumber: 49\n      }\n    })) : this.props.Login.loadCustomSearchFilter ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(saveType),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3424,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3425,\n        columnNumber: 53\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: idsLabel,\n      defaultMessage: buttonLabel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3426,\n        columnNumber: 53\n      }\n    })), this.props.Login.operation === \"create\" && this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false) ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3430,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3431,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVECONTINUE\",\n      defaultMessage: \"Save & Continue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3432,\n        columnNumber: 29\n      }\n    })) : \"\", (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-primary-blue\",\n      onClick: () => this.handleSaveClick(1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3438,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3439,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3440,\n        columnNumber: 29\n      }\n    })) : \"\"), /*#__PURE__*/React.createElement(Modal.Body, {\n      className: \"popup-fixed-center-headed-full-width\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3444,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalInner, {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3445,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3446,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3456,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      ref: this.formRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3457,\n        columnNumber: 33\n      }\n    }, this.props.Login.patientRegistration ? /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3460,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3461,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(PatientMaster, {\n      Login: this.props.Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3462,\n        columnNumber: 49\n      }\n    }))) : this.props.Login.isDynamicViewSlideOut ? /*#__PURE__*/React.createElement(ExternalOrderSlideout, {\n      dynamicExternalSample: this.props.Login.dynamicExternalSample,\n      dynamicExternalTestChild: this.props.Login.dynamicExternalTestChild,\n      dynamicGridSelectedId: this.props.Login.dynamicGridSelectedId || null,\n      selectedRecord: this.state.selectedRecord,\n      selectedDynamicViewControl: this.props.Login.selectedDynamicViewControl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3465,\n        columnNumber: 45\n      }\n    }) : this.props.Login.loadCustomSearchFilter ? this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ? /*#__PURE__*/React.createElement(KendoDatatoolFilter, {\n      filter: this.props.Login.kendoFilter,\n      handleFilterChange: this.handleFilterChange,\n      filterData: this.props.Login.lstPatient || [],\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      fields: this.props.Login.fields || [],\n      gridColumns: this.props.Login.gridColumns || [],\n      onRowClick: this.handleKendoRowClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3475,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n      fields: this.props.Login.fields || {},\n      onChange: this.onChangeAwesomeQueryBuilder,\n      tree: this.props.Login.awesomeTree,\n      config: this.props.Login.awesomeConfig,\n      skip: this.props.Login.kendoSkip,\n      take: this.props.Login.kendoTake,\n      handlePageChange: this.handlePageChange,\n      gridColumns: this.props.Login.gridColumns || [],\n      filterData: this.props.Login.lstPatient,\n      onRowClick: this.handleKendoRowClick,\n      handleExecuteClick: this.handleExecuteClick,\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3487,\n        columnNumber: 58\n      }\n    }) : this.props.Login.loadSpec ? /*#__PURE__*/React.createElement(AddSpecification, {\n      AgaramTree: this.props.Login.AgaramTree,\n      openNodes: this.props.Login.OpenNodes,\n      handleTreeClick: this.onTreeClick,\n      focusKey: this.props.Login.FocusKey,\n      activeKey: this.props.Login.ActiveKey,\n      Specification: this.props.Login.Specification,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      onSpecChange: this.onspecChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3502,\n        columnNumber: 53\n      }\n    }) : this.props.Login.loadTest ? /*#__PURE__*/React.createElement(AddTest, {\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.props.Login.selectedTestData,\n      TestPackage: this.props.Login.TestPackage || [],\n      selectPackage: this.state.selectPackage,\n      onTestPackageChange: this.onTestPackageChange,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3514,\n        columnNumber: 57\n      }\n    }) : this.props.Login.loadComponent ? /*#__PURE__*/React.createElement(AddComponentPopUp, {\n      ref: this.myScrollRef,\n      selectComponent: this.state.selectComponent || {},\n      RealSampleTypeValue: this.props.Login.masterData.RealSampleTypeValue || {},\n      RealRegTypeValue: this.props.Login.masterData.RealRegTypeValue || {},\n      RealRegSubTypeValue: this.props.Login.masterData.RealRegSubTypeValue || {},\n      RealFilterStatusValue: this.props.Login.masterData.RealFilterStatusValue || {},\n      formatMessage: this.props.intl.formatMessage,\n      handleDateChange: this.handleDateChangeComp,\n      Component: this.props.Login.lstComponent || [],\n      onInputComponentOnChange: this.onInputComponentOnChange // onComboChange={this.onComponentComboChange}\n      ,\n      timeZoneList: this.props.Login.timeZoneList,\n      onComponentChange: this.onComponentChange,\n      userInfo: this.props.Login.userInfo,\n      sreceiveddate: this.props.Login.sreceiveddate || [],\n      CurrentTime: this.props.Login.CurrentTime,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3524,\n        columnNumber: 61\n      }\n    }) : this.props.Login.addMaster ? /*#__PURE__*/React.createElement(AddMasterRecords, {\n      selectedControl: this.props.Login.selectedControl[this.props.Login.masterIndex],\n      fieldList: this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex],\n      extractedColumnList: this.props.Login.masterextractedColumnList[this.props.Login.masterIndex] // primaryKeyField={this.props.Login.masterprimaryKeyField}\n      ,\n      selectedRecord: this.state.selectedMaster[this.props.Login.masterIndex] || {},\n      onInputOnChange: this.onInputOnChangeMaster,\n      onComboChange: this.onComboChangeMaster,\n      handleDateChange: this.handleDateChangeMaster,\n      dataList: this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex],\n      onNumericInputOnChange: this.onNumericInputOnChangeMaster,\n      masterDesign: this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex],\n      mastertimeZoneList: this.props.Login.mastertimeZoneList,\n      masterdefaultTimeZone: this.props.Login.masterdefaultTimeZone,\n      onComboChangeMasterDyanmic: this.onComboChangeMasterDyanmic,\n      handleDateChangeMasterDynamic: this.handleDateChangeMasterDynamic,\n      onInputOnChangeMasterDynamic: this.onInputOnChangeMasterDynamic,\n      onNumericInputChangeMasterDynamic: this.onNumericInputChangeMasterDynamic,\n      onNumericBlurMasterDynamic: this.onNumericBlurMasterDynamic,\n      userInfo: this.props.Login.userInfo,\n      Login: this.props.Login,\n      addMasterRecord: this.addMasterRecord,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      masterIndex: this.props.Login.masterIndex,\n      custombuttonclick: this.custombuttonclick,\n      editMasterRecord: this.editMasterRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3542,\n        columnNumber: 65\n      }\n    }) : this.props.Login.loadSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n      Component: this.props.Login.lstComponent || [],\n      selectComponent: this.state.selectComponent,\n      selectedRecord: this.state.selectedRecord,\n      onComponentChange: this.onComponentChange,\n      onInputComponentOnChange: this.onInputComponentOnChange,\n      templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      handleDateChange: this.handleDateSubSampleChange,\n      onInputOnChange: this.onInputOnSubSampleChange,\n      onNumericInputChange: this.onNumericInputSubSampleChange,\n      onNumericBlur: this.onNumericBlurSubSample,\n      comboData: this.props.Login.SubSamplecomboData,\n      onComboChange: this.onComboSubSampleChange,\n      TestCombined: this.props.Login.TestCombined || [],\n      TestChange: this.TestChange,\n      selectedTestData: this.state.selectedTestData,\n      selectPackage: this.state.selectPackage,\n      selectedTestPackageData: this.state.selectedTestPackageData,\n      TestPackage: this.props.Login.TestPackage || [],\n      childoperation: this.props.Login.childoperation,\n      specBasedComponent: this.state.specBasedComponent,\n      onTestPackageChange: this.onTestPackageChange,\n      userRoleControlRights: this.props.Login.userRoleControlRights,\n      hideQualisForms: this.props.Login.hideQualisForms,\n      addMasterRecord: this.addMasterRecord,\n      editMasterRecord: this.editMasterRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3570,\n        columnNumber: 69\n      }\n    }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n      operation: this.props.Login.operation,\n      onInputOnChange: this.onInputOnChange,\n      inputParam: this.props.Login.inputParam,\n      selectedRecord: this.props.Login.selectedRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3604,\n        columnNumber: 73\n      }\n    }) : /*#__PURE__*/React.createElement(RegisterSlideOut //addPatient={this.addPatient}\n    , {\n      editfield: this.sampleeditable && this.sampleeditable['sampleeditable'],\n      ntransactionstatus: this.props.Login.masterData && this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 && this.props.Login.masterData.selectedSample[0].ntransactionstatus,\n      loadPreregister: this.props.Login.loadPreregister,\n      selectedSpec: this.state.selectedSpec,\n      selectedRecord: this.state.selectedRecord,\n      selectedComponent: this.props.Login.selectedComponent,\n      subSampleDataGridList: this.props.Login.subSampleDataGridList || [],\n      SelectedTest: this.props.Login.SelectedTest,\n      selectedTestData: this.state.selectedTestData,\n      userRoleControlRights: this.props.userRoleControlRights,\n      userRoleControlRights1: this.props.Login.userRoleControlRights,\n      templateData: this.props.Login.masterData.registrationTemplate ? this.props.Login.masterData.registrationTemplate.jsondata : this.props.Login.masterData.schedulerTemplate ? this.props.Login.masterData.schedulerTemplate.jsondata : {},\n      handleChange: this.props.handleChange,\n      handleDateChange: this.handleDateChange,\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onNumericBlur: this.onNumericBlur,\n      comboData: this.props.Login.comboData,\n      onComboChange: this.onComboChange,\n      userInfo: this.props.Login.userInfo,\n      timeZoneList: this.props.Login.timeZoneList,\n      defaultTimeZone: this.props.Login.defaultTimeZone,\n      AddSpec: this.AddSpec,\n      addTest: this.addTestslide,\n      handleComponentRowClick: this.handleComponentRowClick,\n      nneedsubsample: this.props.Login.masterData && this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\n      specBasedComponent: this.state.specBasedComponent,\n      AddComponent: this.AddComponent,\n      deleteComponent: this.deleteComponent,\n      deleteTest: this.deleteTest,\n      editComponent: this.editComponent,\n      componentColumnList: this.componentColumnList,\n      Component: this.props.Login.Component,\n      TestChange: this.TestChange,\n      testDataState: this.state.testDataState,\n      subSampleDataState: this.state.subSampleDataState,\n      testDataStateChange: this.testDataStateChange,\n      subSampleDataStateChange: this.subSampleDataStateChange,\n      addsubSample: this.addsubSample,\n      editSubSample: this.editSubSample,\n      subSampleDataGridFields: this.subSampleDataGridList,\n      selectedSample: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {},\n      operation: this.props.Login.operation,\n      specBasedTestPackage: this.state.specBasedTestPackage,\n      custombuttonclick: this.custombuttonclick,\n      addMasterRecord: this.addMasterRecord,\n      editMasterRecord: this.editMasterRecord,\n      onClickView: this.onClickView,\n      comboComponents: this.props.Login.comboComponents,\n      sampleType: {\n        \"label\": this.props.Login.masterData.RealSampleTypeValue.ssampletypename,\n        \"value\": this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        \"item\": this.props.Login.masterData.RealSampleTypeValue\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3610,\n        columnNumber: 75\n      }\n    })))))));\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getChildValues,\n  getPreviewTemplate,\n  getNewRegSpecification,\n  AddComponents,\n  updateStore,\n  EditComponent,\n  getTest,\n  addsubSample,\n  editSubSample,\n  insertRegistration,\n  updateRegistration,\n  addSubSampleSaveContinue,\n  callService,\n  componentTest,\n  getDynamicFilter,\n  getDynamicFilterExecuteData,\n  insertRegistrationScheduler,\n  testPackageTest,\n  addMasterRecord,\n  getAddMasterCombo,\n  getDynamicMasterTempalte,\n  getChildComboMaster,\n  getChildValuesForAddMaster,\n  viewExternalportalDetail,\n  getEditMaster\n})(injectIntl(PreRegisterSlideOutModal));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/PreRegisterSlideOutModal.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Card","Form","Modal","Row","Col","FontAwesomeIcon","faSave","toast","DEFAULT_RETURN","ModalInner","SampleType","transactionStatus","formCode","designComponents","faCalculator","ageCalculate","ageCalculateOnlyForYear","childComboClear","comboChild","convertDateTimetoString","extractFieldHeader","filterRecordBasedOnTwoArrays","formatDate","formatInputDate","formatInputDateWithoutT","getSameRecordFromTwoArrays","rearrangeDateFormat","rearrangeDateFormatforUI","removeIndex","removeSpaceFromFirst","showEsign","sortByField","validateEmail","validatePhoneNumber","RegisterSlideOut","AddSpecification","AddTest","connect","getPreviewTemplate","getChildValues","callService","getNewRegSpecification","AddComponents","updateStore","EditComponent","getTest","addsubSample","editSubSample","insertRegistration","updateRegistration","addSubSampleSaveContinue","componentTest","getDynamicFilter","getDynamicFilterExecuteData","insertRegistrationScheduler","testPackageTest","rearrangeDateFormatforKendoDataTool","addMasterRecord","getAddMasterCombo","getDynamicMasterTempalte","getChildComboMaster","getChildValuesForAddMaster","viewExternalportalDetail","getEditMaster","AddComponentPopUp","AddSubSample","getRegistration","getRegistrationScheduler","getRegistrationSubSample","SubSample","TestListManipulation","KendoDatatoolFilter","FilterQueryBuilder","Utils","QbUtils","Esign","ThemeConsumer","PatientMaster","getFieldSpecification","getFieldSpecification1","getFieldSpecification3","AddMasterRecords","ExternalOrderSlideout","mapStateToProps","state","Login","PreRegisterSlideOutModal","Component","constructor","props","formRef","createRef","failedControls","testDataState","skip","take","settings","parseInt","subSampleDataState","selectedRecord","selectedSpec","selectComponent","selectedTest","selectedTestData","selectedTestPackageData","selectPackage","SubSamplecomboComponents","SubSamplewithoutCombocomponent","parentSubSampleColumnList","specBasedComponent","specBasedTestPackage","selectedMaster","custombuttonclick","event","component","preventDefault","stopPropagation","inputparam","userinfo","userInfo","onChangeAwesomeQueryBuilder","immutableTree","config","filterquery","sqlFormat","updateInfo","typeName","data","awesomeTree","awesomeConfig","handlePageChange","kendoSkip","kendoTake","handleFilterChange","kendoFilter","filter","handleExecuteClick","undefined","includes","val","seletedFilterComponent","info","intl","formatMessage","id","handleKendoRowClick","item1","dataItem","index","masterIndex","map","item","columnname","ndesigncomponentcode","COMBOBOX","label","sdisplaymember","value","svaluemember","DATEPICKER","loadCustomSearchFilter","screenName","addMaster","selectedControl","displayname","slanguagetypecode","masterData","RealRegSubTypeValue","sregsubtypename","newdata","jsondata","onComboChange","handleSaveClick","saveType","startLabel","mandatoryFields","masterextractedColumnList","x","mandatory","loadComponent","loadSubSample","SubSampleTemplate","row","children","column","hasOwnProperty","componentrow","recordbasedshowhide","parentLabel","recordbasedhide","inputtype","push","loadTest","loadSpec","registrationTemplate","esign","loadEsign","forEach","dataField","alertMessage","alertPreFix","idsName","alertSuffix","mandatoryLabel","validateFunction","validateData","length","trim","onExecuteClick","agree","NO","validateEsign","onSaveMasterRecord","ncomponentrequired","YES","subSampleDataGridList","width","selectedComponent","SelectedTest","Test","onSaveComponentClick","onSaveTestClick","onSaveSubSampleClick","onSaveClick","TestChange","comboData","fieldName","control","customName","parentList","childComboList","childColumnList","comboName","product","productCategory","nproductcatcode","nproductcode","materialType","instrument","instrumentCategory","material","materialCategory","project","nprojectmastercode","childSpec","nsampletypecode","RealSampleTypeValue","CLINICALTYPE","table","nquerybuildertablecode","name","sampleTypeCatBasedFlow","ncategorybasedflowrequired","nprojectSpecReqd","nprojectspecrequired","inputParem","child","source","primarykeyField","valuemember","nameofdefaultcomp","ProductCategory","comboComponents","ncategorybasedflow","PROJECTSAMPLETYPE","InstrumentCategory","MaterialCategory","Product","Instrument","Material","columnList","withoutCombocomponent","mapOfFilter","nneedsubsample","nportalrequired","temp","components","temp1","onInputOnChange","radiotext","target","type","indexOf","indexcomma","slice","setState","onInputOnSubSampleChange","onComboSubSampleChange","pkey","SubSamplecomboData","onNumericInputChange","onNumericBlurSubSample","max","parseFloat","precision","min","onNumericInputSubSampleChange","handleDateChangeComp","dateValue","dateName","handleDateChange","SampleTypeValue","ageComp","age","handleDateSubSampleChange","openFilter","showFilter","closeFilter","AddSpec","e","addTestslide","componentBasedSpec","nallottedspeccode","isValid","selectedSpecification","slno","Object","keys","closeSpec","closeKendoFilter","logic","filters","closeAddMaster","masterfieldList","masterdataList","mastercomboComponents","masterComboColumnFiled","masterwithoutCombocomponent","masterDesign","masterOperation","masterEditObject","closeDynamicView","isDynamicViewSlideOut","selectedDynamicViewControl","closeComponent","closeTest","TestCombined","closeSubSample","selectedSubSample","showSaveContinue","masterStatus","TestPackage","onspecChange","sversion","onTreeClick","inputParam","methodUrl","operation","activeKey","key","focusKey","keyName","selectedNode","primaryKey","handleComponentRowClick","AddComponent","Map","ntemplatemanipulationcode","RealRegTypeValue","nregtypecode","onComponentChange","nspecsampletypecode","onInputComponentOnChange","checked","childoperation","ComponentObjectAfterSave","ComponentObject","testrequired","ntransactionstatus","objcomponent","dreceiveddate","findIndex","splice","getTestByComponentChange","nneedservice","openChildModal","parentPopUpSize","onTestPackageChange","selectedComponentData","availableTest","testData","AllTest","SubSampleObjectAfterSave","SubSampleObject","subSampleDetail","defaulttimezone","sampleRegistration","index1","Components","lstComponent","editComponent","editselectedcomponent","inputData","objComponent","nregsubtypecode","timezone","deleteComponent","comp1","subSampleIndex","incslno","preList","afterList","Component1","jsonuidata","deleteTest","ntestgrouptestcode","selectedTestArray","ArrayTest","samplename","componentDataStateChange","componentDataState","dataState","testDataStateChange","subSampleDataStateChange","Layout","onUpdateRegistration","onNumericBlur","onComboChangeMaster","nformcode","tableDataField","foreignDataField","childIndex","handleDateChangeMaster","onNumericInputOnChangeMaster","onInputOnChangeMaster","nneedcurrentaddress","sflatnotemp","sflatno","shousenotemp","shouseno","spostalcodetemp","spostalcode","sstreettemp","sstreet","scitynametemp","scityname","sdistrictnametemp","sdistrictname","sregionnametemp","sregionname","toLowerCase","nmastersitecode","isEmailCheck","ndynamicmastercode","screendesign","masterdateconstraints","masterdatefields","mastercombinationunique","ndesigntemplatemappingcode","dateList","slideoutdesign","loadcurrentdate","Date","JSON","stringify","PATIENTMASTER","isJsonField","jsonObjectName","controlType","dateField","controlName","fieldData","selectedRecordName","classUrl","warn","onClickView","fieldList","extractedColumnList","get","values","primaryKeyField","masterprimaryKeyField","editMasterRecord","editObject","onComboChangeMasterDyanmic","childParam","mastedataList","onInputOnChangeMasterDynamic","test","handleDateChangeMasterDynamic","onNumericInputChangeMasterDynamic","onNumericBlurMasterDynamic","myRef","PrevoiusLoginData","componentColumnList","sampleeditable","parse","DynamicDesign","getDerivedStateFromProps","componentDidUpdate","previousProps","check","userRoleControlRights","TESTPACKAGE","innerPopup","innerTop","setTimeout","scrollDoc","modalEvent","document","getElementById","current","scrollIntoView","behavior","getTestfromDB","saveComponent","unshift","objcomponent1","saveContinueData","flag","initialParam","nfilterstatus","FilterStatusValue","fromdate","todate","nflag","ntype","npreregno","String","RealDesignTemplateMappingValue","napproveconfversioncode","RealApprovalConfigVersionValue","nneedtemplatebasedflow","RegSubTypeValue","checkBoxOperation","activeSampleTab","activeTestTab","activeSubSampleTab","param","sampledateconstraints","samplecombinationunique","subsamplecombinationunique","selectedSample","displayName","sloginid","action","showConfirmAlert","resultDataState","testCommentDataState","ncontrolCode","screenData","openModal","openPortal","findSubsampleDateList","subsampletemplate","schedulerSubSampleTemplate","schedulerTemplate","defaultTimeZone","SelectedScheduler","postParamList","PREREGISTER","dateComp","genderComp","orderType","ndefaulttemplatecode","render","ignoreFormValidation","buttonLabel","idsLabel","concat","toUpperCase","className","closeModal","graphView","loginoperation","showValidate","showCalculate","showParam","showExecute","noSave","resetView","showSave","patientRegistration","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","lstPatient","fields","gridColumns","AgaramTree","OpenNodes","FocusKey","ActiveKey","Specification","hideQualisForms","myScrollRef","RealFilterStatusValue","timeZoneList","sreceiveddate","CurrentTime","mastertimeZoneList","masterdefaultTimeZone","loadPreregister","handleChange","ssampletypename"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Card, Form, Modal, Row, Col } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-regular-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ModalInner } from '../../components/App.styles';\r\nimport { SampleType, transactionStatus, formCode, designComponents } from '../../components/Enumeration';\r\nimport { faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport {\r\n    ageCalculate,\r\n    ageCalculateOnlyForYear,\r\n    childComboClear,\r\n    comboChild, convertDateTimetoString,\r\n    extractFieldHeader,\r\n    filterRecordBasedOnTwoArrays,\r\n    formatDate,\r\n    formatInputDate,\r\n    formatInputDateWithoutT,\r\n    getSameRecordFromTwoArrays, rearrangeDateFormat, rearrangeDateFormatforUI, removeIndex, removeSpaceFromFirst, showEsign, sortByField, validateEmail, validatePhoneNumber\r\n} from '../../components/CommonScript';\r\nimport RegisterSlideOut from './RegisterSlideOut';\r\nimport AddSpecification from './AddSpecification';\r\nimport AddTest from './AddTest';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    getPreviewTemplate, getChildValues, callService,\r\n    getNewRegSpecification, AddComponents, updateStore,\r\n    EditComponent, getTest, addsubSample, editSubSample,\r\n    insertRegistration, updateRegistration, addSubSampleSaveContinue,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest,\r\n    rearrangeDateFormatforKendoDataTool, addMasterRecord, getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail,getEditMaster\r\n} from '../../actions'\r\nimport AddComponentPopUp from './AddComponentPopUp';\r\nimport AddSubSample from './AddSubSample';\r\nimport {\r\n    getRegistration, getRegistrationScheduler, getRegistrationSubSample, SubSample, TestListManipulation\r\n} from './RegistrationValidation';\r\nimport KendoDatatoolFilter from '../contactmaster/KendoDatatoolFilter.jsx'\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport {\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\nimport Esign from '../audittrail/Esign';\r\nimport { ThemeConsumer } from 'styled-components';\r\nimport PatientMaster from '../contactmaster/PatientMaster';\r\nimport { getFieldSpecification } from '../../components/type2component/Type2FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification1 } from '../../components/type1component/Type1FieldSpecificationList';\r\nimport { getFieldSpecification as getFieldSpecification3 } from '../../components/type3component/Type3FieldSpecificationList';\r\n//import SplitterLayout from 'react-splitter-layout';\r\nimport AddMasterRecords from '../dynamicpreregdesign/AddMasterRecords'\r\nimport ExternalOrderSlideout from '../dynamicpreregdesign/ExternalOrderSlideout';\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nclass PreRegisterSlideOutModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.myRef = React.createRef()\r\n        this.PrevoiusLoginData = this.props.PrevoiusLoginData;\r\n        this.subSampleDataGridList = [];\r\n        this.componentColumnList = [\r\n            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" },\r\n            { \"idsName\": \"IDS_DATERECEIVED\", \"dataField\": \"sreceiveddate\", width: \"250px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", width: \"200px\" },\r\n        ];\r\n        this.sampleeditable = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n\r\n    }\r\n    formRef = React.createRef();\r\n    state = {\r\n        failedControls: [],\r\n        testDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        subSampleDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n        selectedRecord: {},\r\n        selectedSpec: {},\r\n        selectComponent: {},\r\n        selectedTest: {},\r\n        selectedTestData: {},\r\n        selectedTestPackageData: {},\r\n        selectPackage: {},\r\n        SubSamplecomboComponents: [],\r\n        SubSamplewithoutCombocomponent: [],\r\n        // selectedTestData: [],\r\n        parentSubSampleColumnList: [],\r\n        specBasedComponent: false,\r\n        specBasedTestPackage: false,\r\n        selectedMaster: []\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.info(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    custombuttonclick = (event, component) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        const inputparam = {\r\n            component, userinfo: this.props.Login.userInfo,\r\n        }\r\n        this.props.getDynamicFilter(inputparam)\r\n    }\r\n\r\n    onChangeAwesomeQueryBuilder = (immutableTree, config) => {\r\n        //let selectedRecord = this.state.selectedRecord || {};\r\n        const filterquery = QbUtils.sqlFormat(immutableTree, config);\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                awesomeTree: immutableTree, awesomeConfig: config, filterquery\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n\r\n        // this.setState({ awesomeTree: immutableTree, awesomeConfig: config, selectedRecord: selectedRecord });\r\n\r\n    };\r\n\r\n    handlePageChange = (event) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoSkip: event.skip, kendoTake: event.take\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        //this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    handleFilterChange = (event) => {\r\n        // event.preventDefault();\r\n        //event.stopPropagation();\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                kendoFilter: event.filter\r\n                // screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo)\r\n        // this.setState({ kendoFilter: event.filter });\r\n    };\r\n\r\n    handleExecuteClick = (event) => {\r\n        const filterquery = this.props.Login.filterquery\r\n        if (filterquery !== \"\" && filterquery !== undefined\r\n            && !filterquery.includes('Invalid date')) {\r\n                const val=removeSpaceFromFirst(filterquery,'')\r\n            const inputparam = {\r\n                component: this.props.Login.seletedFilterComponent,\r\n                userinfo: this.props.Login.userInfo,\r\n                filterquery: val\r\n\r\n            }\r\n            this.props.getDynamicFilterExecuteData(inputparam)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTALLINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    handleKendoRowClick = (event) => {\r\n        let item1 = event.dataItem;\r\n        const component = this.props.Login.seletedFilterComponent\r\n\r\n        if (component[\"childFields\"]) {\r\n            const index = this.props.Login.masterIndex;\r\n            let selectedRecord = this.state.selectedMaster || {};\r\n\r\n            component[\"childFields\"].map(item => {\r\n                let data = item1[item.columnname];\r\n                if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                    //combocontrol\r\n                    data = { label: item1[item.sdisplaymember], value: item1[item.svaluemember] };\r\n                }\r\n                else if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                    //Date picker control\r\n                    data = rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, data);\r\n                }\r\n                selectedRecord[index][item.columnname] = data;\r\n            })\r\n\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: selectedRecord, loadCustomSearchFilter: false,\r\n                    screenName: this.props.Login.addMaster === true\r\n                        ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                        : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            const newdata = {\r\n                label: item1[component['displaymember']],\r\n                value: item1[component['valuemember']], item: { jsondata: { ...item1, jsondata: { ...item1 } } }\r\n            }\r\n\r\n\r\n            this.onComboChange(newdata, component, component['label'])\r\n        }\r\n    };\r\n\r\n    // handleKendoRowClick = (event) => {\r\n    //     let selecteddata = event.dataItem;\r\n    //     const component = this.props.Login.seletedFilterComponent\r\n    //     if (component.hasOwnProperty(\"child\")) {\r\n    //         if (this.props.Login.loadSubSample) {\r\n    //             const selectComponent = this.state.selectComponent;\r\n    //             component.child.map(y => {\r\n    //                 const withoutCombocomponent = this.state.SubSamplewithoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 // if (readonlyfields !== -1) {\r\n\r\n    //                 //     if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                 //             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : \"\"\r\n    //                 //     } else {\r\n    //                 //         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                 //     }\r\n    //                 // }\r\n\r\n    //                 if (readonlyfields !== -1) {\r\n\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectComponent[y.label + 'value'] = selectComponent[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectComponent[y.label]);\r\n\r\n    //                                     selectComponent[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     } else {\r\n    //                         if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                     selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         } else {\r\n    //                             selectComponent[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                         }\r\n    //                     }\r\n\r\n\r\n    //                 } else {\r\n    //                     const comboComponents = this.state.SubSamplecomboComponents;\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n\r\n    //                             const val = this.props.Login.SubSamplecomboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectComponent[y.label] = val[0]\r\n\r\n    //                             //selectComponent[y.label] = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectComponent,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: \"SubSample\",\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         } else {\r\n    //             const selectedRecord = this.state.selectedRecord;\r\n    //             component.child.map(y => {\r\n    //                 // component.filterfields.filter(x=>x.)\r\n    //                 const withoutCombocomponent = this.props.withoutCombocomponent;\r\n    //                 const readonlyfields = withoutCombocomponent.findIndex(k => k.label === y.label);\r\n    //                 if (readonlyfields !== -1) {\r\n    //                     if (withoutCombocomponent[readonlyfields]['inputtype'] === \"date\") {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             rearrangeDateFormatforKendoDataTool(this.props.Login.userInfo, selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]]) : \"\"\r\n    //                         selectedRecord[y.label + 'value'] = selectedRecord[y.label]\r\n\r\n    //                         if (withoutCombocomponent[readonlyfields].child) {\r\n    //                             const Age = withoutCombocomponent.filter(x => x.name === 'Age');\r\n    //                             withoutCombocomponent[readonlyfields].child.map(k => {\r\n    //                                 if (k.label === Age[0].label) {\r\n    //                                     const age = ageCalculate(selectedRecord[y.label]);\r\n\r\n    //                                     selectedRecord[Age[0].label] = age\r\n    //                                 }\r\n    //                             })\r\n\r\n\r\n    //                         }\r\n\r\n    //                     }\r\n    //                     else if (withoutCombocomponent[readonlyfields][\"isMultiLingual\"]) {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ?\r\n    //                             selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] ?\r\n    //                                 selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]][this.props.Login.userInfo.languagetypeCode] : selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     } else {\r\n    //                         selectedRecord[y.label] = selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] ? selecteddata[withoutCombocomponent[readonlyfields][\"displaymember\"]] : \"\"\r\n    //                     }\r\n    //                 } else {\r\n    //                     const comboComponents = this.props.comboComponents || [];\r\n    //                     const readonlyfields = comboComponents.findIndex(k => k.label === y.label);\r\n    //                     if (readonlyfields !== -1) {\r\n    //                         if (this.props.Login.comboData[y.label]) {\r\n    //                             const val = this.props.Login.comboData[y.label].filter(item => item.value === selecteddata[y.foriegntablePK])\r\n    //                             if (val.length > 0)\r\n    //                                 selectedRecord[y.label] = val[0]\r\n    //                         }\r\n\r\n    //                     }\r\n\r\n    //                 }\r\n\r\n    //             })\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     selectedRecord,\r\n    //                     loadCustomSearchFilter: false,\r\n    //                     screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo)\r\n    //         }\r\n    //     }\r\n    // };\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        // console.log(\"handle save:\", selectedRecord);\r\n\r\n        if (this.props.Login.addMaster) {\r\n            const masterIndex = this.props.Login.masterIndex\r\n            mandatoryFields = this.props.Login.masterextractedColumnList[masterIndex].filter(x => x.mandatory === true)\r\n            selectedRecord = this.state.selectedMaster[masterIndex]\r\n        }\r\n        else if (this.props.Login.loadComponent) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_RECEIVEDDATE\", \"dataField\": \"dreceiveddate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzdreceivedate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadSubSample) {\r\n\r\n            if (this.state.specBasedComponent)\r\n                mandatoryFields = [{ \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"ncomponentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" }]\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // console.log(\"component1:\", component);\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    //  console.log(\"componentrow:\", componentrow);\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectComponent[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            this.state.selectComponent[componentrow.label] &&\r\n                                                this.state.selectComponent[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],//componentrow.label,\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectComponent[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label,\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : this.state.selectComponent[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],//component.label, \r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n\r\n            selectedRecord = this.state.selectComponent\r\n        }\r\n        else if (this.props.Login.loadTest) {\r\n            mandatoryFields = [{ \"idsName\": \"IDS_TEST\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },]\r\n            selectedRecord = this.props.Login.selectedTestData\r\n        }\r\n        else if (this.props.Login.loadSpec) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n            ]\r\n        } else {\r\n            this.props.Login.masterData.registrationTemplate &&\r\n                this.props.Login.masterData.registrationTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.recordbasedshowhide) {\r\n                                            if (this.state.selectedRecord[componentrow.parentLabel]\r\n                                                === componentrow.recordbasedhide) {\r\n                                                if (componentrow.inputtype === \"email\") {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        //\"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                        \"validateFunction\": validateEmail,\r\n                                                        \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                        \"controlType\": \"textbox\"\r\n                                                    })\r\n                                                } else {\r\n                                                    mandatoryFields.push({\r\n                                                        \"mandatory\": true,\r\n                                                        // \"idsName\": componentrow.label,\r\n                                                        \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                        \"dataField\": componentrow.label,\r\n                                                        \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                        \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                            \"selectbox\" : \"textbox\"\r\n                                                    })\r\n                                                }\r\n                                            }\r\n\r\n                                        } else {\r\n                                            if (componentrow.inputtype === \"email\") {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                            } else {\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    // \"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                        \"selectbox\" : \"textbox\"\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n\r\n                                            selectedRecord[componentrow.label] &&\r\n                                                selectedRecord[componentrow.label] !== \"\" &&\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true, //\"idsName\": componentrow.label,\r\n                                                    \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": componentrow.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    component.recordbasedshowhide ?\r\n                                        this.state.selectedRecord[component.parentLabel]\r\n                                            === component.recordbasedhide ?\r\n                                            component.inputtype === \"email\" ?\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                    \"validateFunction\": validateEmail,\r\n                                                    \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                    \"controlType\": \"textbox\"\r\n                                                })\r\n                                                :\r\n                                                mandatoryFields.push({\r\n                                                    \"mandatory\": true,\r\n                                                    //\"idsName\": component.label, \r\n                                                    \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                    \"dataField\": component.label,\r\n                                                    \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                        \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                                }) : \"\" :\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                            :\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                    : selectedRecord[component.label] ?\r\n                                        component.inputtype === \"email\" ?\r\n                                            mandatoryFields.push({\r\n                                                \"mandatory\": true,\r\n                                                //\"idsName\": component.label, \r\n                                                \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                                \"dataField\": component.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            }) : \"\" : \"\"\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n        if (this.props.esign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_PASSWORD\", \"dataField\": \"esignpassword\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"esigncomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ]\r\n        }\r\n        //  console.log(\"mandate fields:\", mandatoryFields);\r\n        mandatoryFields.forEach(item => {\r\n            if (selectedRecord[item.dataField] === undefined || selectedRecord[item.dataField] === null) {\r\n                const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                failedControls.push(alertMessage);\r\n                startLabel.push(item.mandatoryLabel)//\"IDS_PROVIDE\";\r\n            }\r\n            else {\r\n                if (item.validateFunction) {\r\n                    const validateData = item.validateFunction;\r\n                    if (validateData(selectedRecord[item.dataField]) === false) {\r\n                        const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                        failedControls.push(alertMessage);\r\n                        startLabel.push(item.mandatoryLabel)\r\n                    }\r\n                }\r\n                else {\r\n                    if (typeof selectedRecord[item.dataField] === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)//\"IDS_SELECT\";\r\n                        }\r\n                    }\r\n                    else if (typeof selectedRecord[item.dataField] === \"string\") {\r\n                        //to handle string field -- added trim function\r\n                        if (selectedRecord[item.dataField].trim().length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                    else {\r\n                        //number field\r\n                        if (selectedRecord[item.dataField].length === 0) {\r\n                            const alertMessage = (item.alertPreFix ? item.alertPreFix + \" \" : '') + this.props.intl.formatMessage({ id: item.idsName }) + (item.alertSuffix ? \" \" + item.alertSuffix : '')\r\n                            failedControls.push(alertMessage);\r\n                            startLabel.push(item.mandatoryLabel)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else{\r\n            //     const alertMessage=(item.alertPreFix?item.alertPreFix:'')+this.props.intl.formatMessage({id:item.idsName})+(item.alertSuffix?item.alertSuffix:'')\r\n            //     failedControls.push(alertMessage);\r\n            // }\r\n        });\r\n        // console.log(\"validationPassed:\", failedControls);\r\n\r\n        if (failedControls.length === 0) {\r\n            if (saveType === 4) {\r\n                this.props.onExecuteClick(this.formRef);\r\n            }\r\n            else if (saveType === 3) {\r\n                if (selectedRecord.agree && selectedRecord.agree === transactionStatus.NO) {\r\n\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_CHECKAGREE\" }));\r\n\r\n                } else {\r\n\r\n                    this.props.validateEsign();\r\n                }\r\n            }\r\n            else {\r\n                if (this.props.Login.addMaster) {\r\n                    this.onSaveMasterRecord(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSpec) {\r\n                    let selectedSpec = this.state.selectedSpec\r\n                    selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"]\r\n                    selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"]\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"]\r\n\r\n                    const specBasedComponent = selectedSpec[\"nallottedspeccode\"] &&\r\n                        selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n                    this.subSampleDataGridList = []\r\n                    if (specBasedComponent) {\r\n                        this.subSampleDataGridList = [\r\n                            { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                        ]\r\n                    }\r\n\r\n                    this.props.Login.masterData.SubSampleTemplate &&\r\n                        this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                            return row.children.map(column => {\r\n                                return column.children.map(component => {\r\n                                    // let label = ''\r\n                                    if (component.hasOwnProperty(\"children\")) {\r\n                                        component.children.map(componentrow => {\r\n                                            if (componentrow.mandatory === true) {\r\n                                                // label = label + '&' + componentrow.label\r\n                                                this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": componentrow.label, width: \"150px\" })\r\n                                            }\r\n                                            return this.subSampleDataGridList;\r\n                                        })\r\n                                    } else {\r\n                                        if (component.mandatory)\r\n                                            this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode], \"dataField\": component.label, width: \"150px\" });\r\n\r\n                                        return this.subSampleDataGridList\r\n                                    }\r\n\r\n                                })\r\n\r\n                            })\r\n                        })\r\n\r\n                    //  this.setState({ selectedSpec: this.props.Login.selectedSpec,\r\n                    //      specBasedComponent });\r\n\r\n                    // this.setState({\r\n                    //     selectedTestData: [], loadSpec: false, SelectedTest: [], Test: [], Component: [], selectedSpec\r\n                    // })\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            selectedTestData: [],\r\n                            selectComponent: [],\r\n                            selectedComponent: {},\r\n                            loadSpec: false,\r\n                            SelectedTest: [],\r\n                            Test: [],\r\n                            Component: [],\r\n                            subSampleDataGridList: [],\r\n                            selectedSpec,\r\n                            screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\",\r\n                            specBasedComponent\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n\r\n                }\r\n                else if (this.props.Login.loadComponent) {\r\n                    this.onSaveComponentClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadTest) {\r\n                    this.onSaveTestClick(saveType, this.formRef)\r\n                }\r\n                else if (this.props.Login.loadSubSample) {\r\n                    this.onSaveSubSampleClick(saveType, this.formRef)\r\n                }\r\n                else {\r\n                    this.onSaveClick(saveType, this.formRef);\r\n                }\r\n\r\n            }\r\n        }\r\n        else {\r\n            label = startLabel[0] === undefined ? label : startLabel[0];\r\n            toast.info(`${this.props.intl.formatMessage({ id: label })} ${failedControls[0]}`);\r\n        }\r\n\r\n    }\r\n\r\n    TestChange = (comboData, fieldName) => {\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n        selectedTestData[fieldName] = comboData;\r\n        //  this.setState({ selectedTestData });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedTestData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onComboChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        //console.log(\"Control:\", control);\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n            let comboName = customName || control.label;\r\n            let product = false;\r\n            let productCategory = false;\r\n            let nproductcatcode = -1\r\n            let nproductcode = -1\r\n            let materialType = false;\r\n            let instrument = false;\r\n            let instrumentCategory = false;\r\n            let material = false;\r\n            let materialCategory = false;\r\n            let project = false;\r\n            let nprojectmastercode = -1;\r\n            let childSpec = false;\r\n            const nsampletypecode = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n                : 1\r\n\r\n            if (nsampletypecode === SampleType.CLINICALTYPE) {\r\n                if (control.table.item.nquerybuildertablecode === 228\r\n                    && (control.inputtype === 'backendsearchfilter' || control.inputtype === 'frontendsearchfilter')) {\r\n                    selectedRecord['spatientid'] = comboData.item['jsondata']['spatientid']\r\n                }\r\n            }\r\n\r\n            if(control.name===\"manualorderid\"){\r\n                selectedRecord['spatientid'] = comboData.item&&comboData.item['jsondata']['spatientid']\r\n            }\r\n\r\n            const sampleTypeCatBasedFlow = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.ncategorybasedflowrequired)\r\n                : transactionStatus.NO\r\n\r\n            const nprojectSpecReqd = this.props.Login.masterData.RealSampleTypeValue ?\r\n                parseInt(this.props.Login.masterData.RealSampleTypeValue.nprojectspecrequired)\r\n                : transactionStatus.NO;\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue &&\r\n                    this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename || \"Scheduler\"\r\n            }\r\n            if (comboData) {\r\n                comboData[\"item\"] = {\r\n                    ...comboData[\"item\"], \"pkey\": control.valuemember,\r\n                    \"nquerybuildertablecode\": control.nquerybuildertablecode, source: control.source\r\n                };\r\n\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.name === 'Product') {\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) { }\r\n                else {\r\n                    if (ncategorybasedflow !== transactionStatus.YES) {\r\n                        product = true;\r\n                        nproductcode = selectedRecord[comboName] &&\r\n                            selectedRecord[comboName].value;\r\n                    }\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Instrument') {\r\n                const InstrumentCategory = this.props.comboComponents.filter(x => x.name === \"Instrument Category\");\r\n                let ncategorybasedflow = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[InstrumentCategory[0].label] &&\r\n                    selectedRecord[InstrumentCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    instrument = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Material') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                let ncategorybasedflow = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                nproductcatcode = selectedRecord[MaterialCategory[0].label] &&\r\n                    selectedRecord[MaterialCategory[0].label].value;\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    material = true\r\n                    nproductcode = selectedRecord[comboName] &&\r\n                        selectedRecord[comboName].value;\r\n                }\r\n\r\n            }\r\n            else if (control.name === 'Product Category') {\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE\r\n                    && nprojectSpecReqd === 3) { }\r\n                else {\r\n                    if (ncategorybasedflow === transactionStatus.YES) {\r\n                        productCategory = true;\r\n                    }\r\n                    else {\r\n                        inputParem[\"ProductName\"] = Product[0].label;\r\n                        product = true\r\n                    }\r\n\r\n                }\r\n            }\r\n            else if (control.name === 'Instrument Category') {\r\n                const Instrument = this.props.comboComponents.filter(x => x.name === \"Instrument\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    instrumentCategory = true\r\n                } else {\r\n                    inputParem[\"InstrumentName\"] = Instrument[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    instrument = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Category') {\r\n                const Material = this.props.comboComponents.filter(x => x.name === \"Material\");\r\n                nproductcatcode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n                let ncategorybasedflow = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n                if (ncategorybasedflow === transactionStatus.YES) {\r\n                    materialCategory = true\r\n                } else {\r\n                    inputParem[\"MaterialName\"] = Material[0].label\r\n                    // nproductcode = selectedRecord[comboName] &&\r\n                    // selectedRecord[comboName].value;\r\n                    material = true\r\n                }\r\n            }\r\n            else if (control.name === 'Material Type') {\r\n                const MaterialCategory = this.props.comboComponents.filter(x => x.name === \"Material Category\");\r\n                //nproductcatcode = -1;\r\n                // const ncategorybasedflow = comboData &&\r\n                //     comboData['item']['jsondata']['ncategorybasedflow'];\r\n                // if (ncategorybasedflow === 3) {\r\n                //     productCategory = true\r\n                // } else {\r\n                inputParem[\"MaterialCategoryName\"] = MaterialCategory[0].label\r\n                // nproductcode = selectedRecord[comboName] &&\r\n                // selectedRecord[comboName].value;\r\n                materialType = true\r\n                //  }\r\n            }\r\n            else if (control.name === 'Project Code') {\r\n                //project = true;\r\n                const ProductCategory = this.props.comboComponents.filter(x => x.name === \"Product Category\");\r\n                const Product = this.props.comboComponents.filter(x => x.name === \"Product\");\r\n                nproductcatcode = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label].value;\r\n\r\n                let ncategorybasedflow = selectedRecord[ProductCategory[0].label] &&\r\n                    selectedRecord[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //If SampleType table's categorybasedflow = 3 then we should not consider\r\n                //product category's categorybasedflow\r\n                if (sampleTypeCatBasedFlow === transactionStatus.YES) {\r\n                    ncategorybasedflow = transactionStatus.YES;\r\n                }\r\n\r\n                if (ncategorybasedflow !== transactionStatus.YES) {\r\n                    nproductcode = selectedRecord[Product[0].label] &&\r\n                        selectedRecord[Product[0].label].value;\r\n                }\r\n                nprojectmastercode = selectedRecord[control.label] &&\r\n                    selectedRecord[control.label]['value'];\r\n\r\n                if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                    project = true;\r\n                }\r\n                // else{\r\n                //     if (ncategorybasedflow === 3) {\r\n                //         productCategory = true;\r\n                //     }\r\n                //     else{\r\n                //         product =true;\r\n                //     }\r\n                // }\r\n\r\n            }\r\n\r\n            if (nsampletypecode === SampleType.PROJECTSAMPLETYPE && nprojectSpecReqd === transactionStatus.YES) {\r\n                product = false;\r\n                productCategory = false;\r\n                materialType = false;\r\n                instrument = false;\r\n                instrumentCategory = false;\r\n                material = false;\r\n                materialCategory = false;\r\n            }\r\n\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.props.comboComponents, control.child, \"label\")\r\n                childColumnList = {};\r\n                childComboList.map(columnList => {\r\n                    const val = comboChild(this.props.comboComponents, columnList, childColumnList, false);\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.props.withoutCombocomponent, control.child, \"label\")\r\n                // let childTemplateMandatory = {}\r\n                // if (!(product ||\r\n                //     productCategory ||\r\n                //     materialType ||\r\n                //     instrument ||\r\n                //     instrumentCategory ||\r\n                //     material ||\r\n                //     materialCategory ||\r\n                //     project)) {\r\n                //     const TemplateMandatory = childComboList && childComboList.filter(x => x.templatemandatory)\r\n                //     if (TemplateMandatory && TemplateMandatory.length > 0) {\r\n                //         const ProductCategory = childComboList.filter(x => x.name === \"Product Category\");\r\n                //         const Product = childComboList.filter(x => x.name === \"Product\");\r\n                //         const InstrumentCategory = childComboList.filter(x => x.name === \"Instrument Category\");\r\n                //         const MaterialCategory = childComboList.filter(x => x.name === \"Material Category\");\r\n                //         const Material = childComboList.filter(x => x.name === \"Material\");\r\n                //         const MaterialType = childComboList.filter(x => x.name === \"Material Type\");\r\n                //         const ProjectCode = childComboList.filter(x => x.name === \"Project Code\");\r\n                //         const Instrument = childComboList.filter(x => x.name === \"Instrument\");\r\n\r\n                //         childTemplateMandatory = {\r\n                //             ProductCategory, Product\r\n                //             , InstrumentCategory\r\n                //             , MaterialCategory, Material\r\n                //             , MaterialType, MaterialType\r\n                //             , ProjectCode, Instrument\r\n                //         }\r\n                //         if (ProductCategory || Product\r\n                //             || InstrumentCategory\r\n                //             || MaterialCategory || Material\r\n                //             || MaterialType || MaterialType\r\n                //             || ProjectCode || Instrument) {\r\n                //             childSpec = true;\r\n                //         }\r\n                //     }\r\n                //     else {\r\n                //         const TemplateChild = childComboList && childComboList.filter(x => x.child && x.child.length > 0)\r\n                //         if (TemplateChild&& TemplateChild.length> 0) {\r\n\r\n                //             TemplateChild.map(x=>{\r\n                //                 x.child&&x.child.map(y=>{\r\n                //                 const data=this.props.comboComponents(x=>x.label===y.label)  \r\n                //                 if(data&&data[0].templatemandatory){\r\n                //                     const name=data[0].name\r\n                //                     if(name===\"Product Category\"||name===\"Instrument Category\"\r\n                //                     ||name===\"Product\"||name===\"Material Category\"\r\n                //                     ||name===\"Material\"||name===\"Project Code\"||name===\"Instrument\"){\r\n                //                         childSpec = true;\r\n                //                         childTemplateMandatory={childSpec:true}\r\n                //                     }\r\n                //                 }\r\n                //                 })\r\n                //             })\r\n                //         }\r\n\r\n                //     }\r\n                // }\r\n                const mapOfFilter = {\r\n                    nproductcode, nproductcatcode,\r\n                    nsampletypecode: nsampletypecode,\r\n                    nprojectmastercode, nprojectSpecReqd,\r\n                    nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n                    nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired\r\n                    // ...childTemplateMandatory\r\n                }\r\n                this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                    childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                    [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                    instrumentCategory, instrument, materialCategory, material, materialType,\r\n                    undefined, project, this.props.comboComponents)\r\n            } else {\r\n                if (product || productCategory || instrument ||\r\n                    material || materialCategory || instrumentCategory || materialType\r\n                    || project) {\r\n                    const mapOfFilter = {\r\n                        nproductcode, nproductcatcode,\r\n                        nsampletypecode: nsampletypecode,\r\n                        nprojectmastercode,\r\n                        nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO\r\n                    }\r\n\r\n                    this.props.getChildValues(inputParem,\r\n                        this.props.Login.userInfo, selectedRecord, this.props.Login.comboData,\r\n                        childComboList, childColumnList, this.props.withoutCombocomponent,\r\n                        [...childComboList, ...parentList], productCategory, product, mapOfFilter,\r\n                        instrumentCategory, instrument, materialCategory, material,\r\n                        undefined, undefined, project)\r\n                } else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord, loadCustomSearchFilter: false, }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n\r\n\r\n            }\r\n        } else {\r\n            const comboData = this.props.Login.comboData\r\n            selectedRecord[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectedRecord[temp.label] = \"\"\r\n                    delete comboData[temp.label]\r\n                    const components = [...this.props.comboComponents, ...this.props.withoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectedRecord[temp1.label] = \"\"\r\n                                    delete comboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, comboData, loadCustomSearchFilter: false, }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event, radiotext) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            const value = selectedRecord[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectedRecord[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedRecord[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedRecord[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedRecord[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedRecord[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectedRecord[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnSubSampleChange = (event, radiotext) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectComponent['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectComponent['timeonly'] = false;\r\n            }\r\n            const value = selectComponent[event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(indexcomma + 1)\r\n\r\n                            } else {\r\n                                selectComponent[event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            //  const  indexcomma= value.indexOf(\",\")\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectComponent[event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectComponent[event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectComponent[event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectComponent[event.target.name] = radiotext;\r\n            }\r\n        }\r\n        else if (event.target.type === 'radio') {\r\n            selectComponent[event.target.name] = radiotext;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? { ...comboData.item, pkey: control.valuemember, nquerybuildertablecode: control.nquerybuildertablecode, source: control.source } : \"\",\r\n                label: comboData ? comboName : \"\",\r\n                nameofdefaultcomp: control.name,\r\n                screenName: \"IDS_SUBSAMPLE\"\r\n            }\r\n            comboData[\"item\"] = {\r\n                ...comboData[\"item\"], pkey: control.valuemember,\r\n                nquerybuildertablecode: control.nquerybuildertablecode,\r\n                source: control.source\r\n            };\r\n\r\n            if (comboData) {\r\n                selectComponent[comboName] = comboData;\r\n            } else {\r\n                selectComponent[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.SubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childColumnList = childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.SubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    return val.childColumnList\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.SubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectComponent, this.props.Login.SubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.SubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectComponent }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const SubSamplecomboData = this.props.Login.SubSamplecomboData\r\n            selectComponent[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectComponent[temp.label] = \"\"\r\n                    delete SubSamplecomboData[temp.label]\r\n                    const components = [...this.props.SubSamplecomboComponents, ...this.props.SubSamplewithoutCombocomponent]\r\n\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectComponent[temp1.label] = \"\"\r\n                                    delete SubSamplecomboData[temp1.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectComponent, SubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlurSubSample = (value, control) => {\r\n        let selectComponent = this.state.selectComponent\r\n        if (selectComponent[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectComponent[control.label] < parseFloat(control.max))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectComponent[control.label] > parseFloat(control.min))) {\r\n                    selectComponent[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectComponent = this.state.selectComponent\r\n        selectComponent[name] = value;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    handleDateChangeComp = (dateValue, dateName, screenName) => {\r\n        const { selectedRecord } = this.state;\r\n        if (screenName === 'component') {\r\n            const selectComponent = this.state.selectComponent;\r\n            selectComponent[dateName] = dateValue;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectComponent\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            selectedRecord[dateName] = dateValue;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n            const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n            const age = ageCalculate(dateValue);\r\n            selectedRecord[ageComp[0].label] = age;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectComponent } = this.state;\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectComponent });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let masterStatus = this.props.masterStatus;\r\n        // const {selectedRecord,selectedSpec,selectedTestData,selectComponent} =this.state\r\n        let check = false;\r\n\r\n        if (this.props.Login.selectedMaster !== this.PrevoiusLoginData.Login.selectedMaster) {\r\n            this.setState({ selectedMaster: this.props.Login.selectedMaster });\r\n            check = true;\r\n\r\n        }\r\n        if (this.props.Login.selectedRecord !== this.PrevoiusLoginData.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedSpec !== this.PrevoiusLoginData.Login.selectedSpec) {\r\n\r\n            const specBasedComponent = this.props.Login.selectedSpec[\"nallottedspeccode\"] &&\r\n                this.props.Login.selectedSpec[\"nallottedspeccode\"].item.ncomponentrequired === transactionStatus.YES ? true : false\r\n            // const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n            //     this.props.Login.userRoleControlRights !== undefined ? true : false\r\n            const specBasedTestPackage = this.props.Login.userRoleControlRights &&\r\n                this.props.Login.userRoleControlRights[formCode.TESTPACKAGE] !== undefined ? true : false\r\n\r\n            this.subSampleDataGridList = []\r\n            if (specBasedComponent) {\r\n                this.subSampleDataGridList = [\r\n                    { \"idsName\": \"IDS_COMPONENT\", \"dataField\": \"scomponentname\", width: \"200px\" }\r\n                ]\r\n            }\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            // let label = ''\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        // label = label + '&' + componentrow.label\r\n                                        this.subSampleDataGridList.push({\r\n                                            \"mandatory\": true,\r\n                                            //\"idsName\": componentrow.label, \r\n                                            \"idsName\": componentrow.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                            \"dataField\": componentrow.label, width: \"150px\"\r\n                                        })\r\n                                    }\r\n                                    return this.subSampleDataGridList;\r\n                                })\r\n                            } else {\r\n                                if (component.mandatory)\r\n                                    this.subSampleDataGridList.push({\r\n                                        \"mandatory\": true,// \"idsName\": component.label,\r\n                                        \"idsName\": component.displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                                        \"dataField\": component.label, width: \"150px\"\r\n                                    });\r\n\r\n                                return this.subSampleDataGridList\r\n                            }\r\n                            // if (label !== '') {\r\n                            //     this.subSampleDataGridList.push({ \"mandatory\": true, \"idsName\": label.substring(1), \"dataField\": label.substring(1),width: \"150px\" })\r\n                            // }\r\n                        })\r\n\r\n                    })\r\n                })\r\n\r\n            this.setState({\r\n                selectedSpec: this.props.Login.selectedSpec,\r\n                specBasedComponent, specBasedTestPackage\r\n            });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestData !== this.PrevoiusLoginData.Login.selectedTestData) {\r\n            this.setState({ selectedTestData: this.props.Login.selectedTestData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectedTestPackageData !== this.PrevoiusLoginData.Login.selectedTestPackageData) {\r\n            this.setState({ selectedTestPackageData: this.props.Login.selectedTestPackageData });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectComponent !== this.PrevoiusLoginData.Login.selectComponent) {\r\n            this.setState({ selectComponent: this.props.Login.selectComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.selectPackage !== this.PrevoiusLoginData.Login.selectPackage) {\r\n            this.setState({ selectPackage: this.props.Login.selectPackage });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedComponent !== this.PrevoiusLoginData.Login.specBasedComponent) {\r\n            this.setState({ specBasedComponent: this.props.Login.specBasedComponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.specBasedTestPackage !== this.PrevoiusLoginData.Login.specBasedTestPackage) {\r\n            this.setState({ specBasedTestPackage: this.props.Login.specBasedTestPackage });\r\n            check = true\r\n        }\r\n\r\n        if (this.props.Login.SubSamplewithoutCombocomponent !== this.PrevoiusLoginData.Login.SubSamplewithoutCombocomponent) {\r\n            this.setState({ SubSamplewithoutCombocomponent: this.props.Login.SubSamplewithoutCombocomponent });\r\n            check = true\r\n        }\r\n        if (this.props.Login.SubSamplecomboComponents !== this.PrevoiusLoginData.Login.SubSamplecomboComponents) {\r\n            this.setState({ SubSamplecomboComponents: this.props.Login.SubSamplecomboComponents });\r\n            check = true\r\n        }\r\n        if (this.props.Login.parentSubSampleColumnList !== this.PrevoiusLoginData.Login.parentSubSampleColumnList) {\r\n            this.setState({ parentSubSampleColumnList: this.props.Login.parentSubSampleColumnList });\r\n            check = true\r\n        }\r\n\r\n\r\n\r\n        if (check) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (masterStatus !== \"\" && masterStatus !== undefined) {\r\n            toast.info(masterStatus);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterStatus: \"\" }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n            masterStatus = \"\";\r\n        }\r\n        if (this.props.innerPopup !== this.state.innerTop) {\r\n            setTimeout(() => {\r\n                let scrollDoc = this.props.modalEvent && this.props.modalEvent.id ? document.getElementById(this.props.modalEvent.id) : null;\r\n                if (this.myRef && this.myRef.current) {\r\n                    this.myRef.current.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n                if (scrollDoc) {\r\n                    scrollDoc.scrollIntoView({ behavior: 'smooth' })\r\n                }\r\n            }, 100)\r\n            this.setState({\r\n                innerTop: this.props.innerPopup\r\n            })\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.state.showFilter\r\n        this.setState({\r\n            showFilter\r\n        })\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        this.setState({\r\n            showFilter: false\r\n        })\r\n    }\r\n\r\n    AddSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: true\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: true,\r\n                screenName: this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\"})\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    // addTestslide = (e) => {\r\n    //     this.setState({\r\n    //         loadTest: true\r\n    //     })\r\n    // }\r\n\r\n    addTestslide = (selectedComponent, nneedsubsample, componentBasedSpec) => {\r\n\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            let isValid = true;\r\n            const selectedSpecification = {\r\n                nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n                slno: 1\r\n            };\r\n            let selectedRecord = selectedComponent;\r\n            //  if(componentBasedSpec){\r\n            if (nneedsubsample) {\r\n                if (selectedComponent && Object.keys(selectedComponent).length > 0) {\r\n                    delete selectedComponent[\"selected\"];\r\n                }\r\n                else {\r\n                    isValid = false;\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord = selectedSpecification;\r\n            }\r\n            // }\r\n            // else{\r\n            //     selectedRecord = selectedSpecification;          \r\n            // }\r\n\r\n            if (isValid) {\r\n                this.props.getTest(selectedRecord, this.props.Login, nneedsubsample, componentBasedSpec);\r\n            }\r\n            else {\r\n                toast.info(this.props.intl.formatMessage({ id: nneedsubsample ? \"IDS_SELECTSUBSAMPLETOADDTEST\" : \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n            }\r\n            // } \r\n            // else {\r\n            //     const selectedComponent1 = {\r\n            //         nallottedspeccode: this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1,\r\n            //         slno: 1\r\n            //     }\r\n            //     this.props.getTest(selectedComponent1,\r\n            //         this.props.Login,\r\n            //         nneedsubsample, specBasedComponent);\r\n            // }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    closeSpec = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSpec: false,\r\n                selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n            }         \r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeKendoFilter = (e) => {\r\n        // this.setState({\r\n        //     loadSpec: false,\r\n        //      selectedRecord: { ...this.state.selectedRecord, ...this.state.selectedSpec },\r\n        //      screenName:\"Specification\"\r\n        // })\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadCustomSearchFilter: false,\r\n                screenName: this.props.Login.addMaster === true\r\n                    ? this.props.Login.selectedControl[this.props.Login.masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                    : this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                kendoFilter: { logic: \"and\", filters: [] },\r\n                kendoSkip: 0,\r\n                kendoTake: 5,\r\n                awesomeConfig: undefined,\r\n                awesomeTree: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        // this.setState({ kendoFilter: { logic: \"and\", filters: [], kendoSkip: 0, kendoTake: 5 } })\r\n    }\r\n\r\n\r\n\r\n\r\n    closeAddMaster = (e) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        let updateInfo = {}\r\n        if (masterIndex !== 0) {\r\n\r\n            const screenName = this.props.Login.selectedControl[masterIndex - 1].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            const selectedMaster = removeIndex(this.props.Login.selectedMaster, masterIndex)\r\n            const selectedControl = removeIndex(this.props.Login.selectedControl, masterIndex)\r\n            const masterextractedColumnList = this.props.Login.masterextractedColumnList && removeIndex(this.props.Login.masterextractedColumnList, masterIndex)\r\n            const masterfieldList = this.props.Login.masterfieldList && removeIndex(this.props.Login.masterfieldList, masterIndex)\r\n            const masterdataList = this.props.Login.masterdataList && removeIndex(this.props.Login.masterdataList, masterIndex)\r\n            const mastercomboComponents = this.props.Login.mastercomboComponents && removeIndex(this.props.Login.mastercomboComponents, masterIndex)\r\n            const masterComboColumnFiled = this.props.Login.masterComboColumnFiled && removeIndex(this.props.Login.masterComboColumnFiled, masterIndex)\r\n            const masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent && removeIndex(this.props.Login.masterwithoutCombocomponent, masterIndex)\r\n            const masterDesign = this.props.Login.masterDesign && removeIndex(this.props.Login.masterDesign, masterIndex)\r\n            const masterOperation = this.props.Login.masterOperation && removeIndex(this.props.Login.masterOperation, masterIndex)\r\n            const masterEditObject = this.props.Login.masterEditObject && removeIndex(this.props.Login.masterEditObject, masterIndex)\r\n            masterIndex = masterIndex - 1;\r\n\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster,\r\n                    selectedControl,\r\n                    masterextractedColumnList,\r\n                    masterfieldList,\r\n                    masterdataList,\r\n                    mastercomboComponents,\r\n                    masterwithoutCombocomponent,\r\n                    masterComboColumnFiled,\r\n                    masterDesign,\r\n                    masterIndex,\r\n                    screenName,\r\n                    masterOperation,\r\n                    masterEditObject\r\n                }\r\n\r\n            }\r\n\r\n        } else {\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedMaster: [],\r\n                    selectedControl: [],\r\n                    masterextractedColumnList: [],\r\n                    masterfieldList: [],\r\n                    addMaster: false,\r\n                    masterdataList: [],\r\n                    mastercomboComponents: [],\r\n                    masterwithoutCombocomponent: [],\r\n                    masterComboColumnFiled: [],\r\n                    masterDesign: [],\r\n                    masterEditObject:[],\r\n                    masterOperation:[],\r\n                    masterIndex: undefined,\r\n                    screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n\r\n                }\r\n            }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeDynamicView = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                isDynamicViewSlideOut: false,\r\n                selectedDynamicViewControl: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeComponent = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadComponent: false,\r\n                selectComponent: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeTest = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadTest: false,\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                TestCombined: []\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeSubSample = (e) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadSubSample: false,\r\n                selectedSubSample: {},\r\n                showSaveContinue: false,\r\n                selectComponent: {},\r\n                selectedTestData: {},\r\n                selectPackage: {},\r\n                screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                masterStatus: \"\",\r\n                TestPackage: [],\r\n                //Test:[]\r\n                TestCombined: []\r\n\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onspecChange = (event, fieldName) => {\r\n        if (event !== null) {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            // const oldpromarycode = this.state.selectedRecord[\"nallottedspeccode\"] !== undefined ?\r\n            //     this.state.selectedRecord[\"nallottedspeccode\"].value : undefined;\r\n            selectedRecord[\"sversion\"] = parseInt(event.item.sversion);\r\n            selectedRecord[\"nallottedspeccode\"] = event;\r\n            //  if(this.props.Login.Component.length=== 0 ){\r\n            this.setState({ selectedRecord });\r\n            // }else{\r\n            //     if(event.value!== oldpromarycode ){\r\n            //     this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n            //     \"ok\", \"cancel\", () => this.setState({ selectedRecord }));\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n\r\n\r\n        // if (this.props.Login.Component === undefined || this.props.Login.Component.length === 0) {\r\n        //     //   this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents);\r\n        // } else {\r\n        //     // if(event.key!== this.props.Login.ActiveKey ){\r\n        //     // this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to clear the Existing Components ?\",\r\n        //     // \"ok\", \"cancel\", () =>  this.props.getRegSpecification(inputParam, this.props.Login.masterData, getComponents));\r\n        //     // }\r\n        // }\r\n    }\r\n\r\n    handleComponentRowClick = (event) => {\r\n        let selectedComponent = event.dataItem;\r\n        let SelectedTest = this.props.Login.Test && this.props.Login.Test[selectedComponent.slno] ? this.props.Login.Test[selectedComponent.slno] : [];\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                SelectedTest, selectedComponent,\r\n                testDataState: {\r\n                    skip: 0, take: this.props.Login.settings ?\r\n                        parseInt(this.props.Login.settings[14]) : 5\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    };\r\n\r\n    AddComponent = () => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            this.props.AddComponents(Map);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectComponent = this.state.selectComponent || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectComponent[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectComponent })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectComponent[fieldName] = comboData;\r\n                selectComponent[\"Sample Name\"] = comboData.label;\r\n                selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                // selectComponent[\"nneedsubsample\"] = nneedsubsample;\r\n                selectComponent[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                this.props.componentTest(selectComponent, false, this.state.specBasedComponent,\r\n                    this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false);\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n\r\n    onInputComponentOnChange = (event) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectComponent[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectComponent[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectComponent })\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectComponent\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveComponentClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.ComponentObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.ComponentObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n            objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = selectedComponent[\"dreceiveddate\"];\r\n            objcomponent[\"dreceiveddate\"] = dreceiveddate;\r\n            objcomponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            objcomponent[\"ntzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].value : -1;\r\n            objcomponent[\"stzdreceivedate\"] = selectedComponent[\"ntzdreceivedate\"] ? selectedComponent[\"ntzdreceivedate\"].label : \"\";\r\n            objcomponent[\"jsondata\"] = \"\"\r\n            selectedComponent = { ...selectedComponent, ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component, selectedComponent: selectedComponent, loadComponent: false, openChildModal: false,\r\n                        selectComponent: undefined, parentPopUpSize: \"xl\", Test, SelectedTest: Test[selectedComponent.slno]\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ComponentObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false, selectedComponent: saveComponent,\r\n                    SelectedTest: [], selectComponent: {}, showSaveContinue: false, loadComponent: false, parentPopUpSize: \"xl\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    ComponentObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = { ...objcomponent };\r\n            saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            const dreceiveddate = objcomponent[\"dreceiveddate\"];\r\n            saveComponent[\"dreceiveddate\"] = dreceiveddate;\r\n            saveComponent[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, this.props.Login.userInfo);\r\n            saveComponent[\"ntzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].value : -1;\r\n            saveComponent[\"stzdreceivedate\"] = objcomponent[\"ntzdreceivedate\"] ? objcomponent[\"ntzdreceivedate\"].label : \"\";\r\n            saveComponent[\"nallottedspeccode\"] = objcomponent[\"nallottedspeccode\"] ? objcomponent[\"nallottedspeccode\"] : -1;\r\n            saveComponent[\"jsondata\"] = \"\"\r\n            Component.unshift(saveComponent);\r\n            objcomponent1[\"scomments\"] = \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: saveComponent, SelectedTest: [], selectComponent: objcomponent1 }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onTestPackageChange = (comboData, fieldName, nneedsubsample) => {\r\n        const selectPackage = this.state.selectPackage || {};\r\n        const selectedTestData = this.state.selectedTestData || {};\r\n\r\n        if (comboData !== null) {\r\n            selectPackage[fieldName] = comboData;\r\n            selectPackage[\"stestpackagename\"] = comboData.label;\r\n            //selectPackage[\"ntestpackagecode\"] = comboData.item.ntestpackagecode;\r\n            // this.props.testPackageTest(Object.keys(this.props.Login.selectedComponent).length!==0?this.props.Login.selectedComponent:this.state.selectedSpec.nallottedspeccode.item, false, this.state.specBasedComponent,\r\n            //     this.props.Login.Component, this.state.specBasedTestPackage, this.state.specBasedTestPackage ? true : false, this.state.selectComponent,\r\n            //     this.props.Login.selectedComponent, this.props.Login,selectPackage,false,this.state.selectedSpec.nallottedspeccode,this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            //     );\r\n            const selectedComponentData = this.props.Login.selectedComponent ?\r\n                Object.keys(this.props.Login.selectedComponent).length !== 0\r\n                    ? this.props.Login.selectedComponent : this.state.selectedSpec.nallottedspeccode.item\r\n                : this.state.selectedSpec.nallottedspeccode.item;\r\n            this.props.testPackageTest(selectedComponentData, false, this.state.specBasedComponent,\r\n                this.props.Login.Component, this.state.selectComponent, this.props.Login.selectedComponent,\r\n                this.props.Login, selectPackage, false, this.state.selectedSpec.nallottedspeccode,\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample\r\n            );\r\n\r\n        }\r\n        else {\r\n            let availableTest = [];\r\n            if (selectPackage[\"ntestpackagecode\"]) {\r\n                delete selectPackage[\"ntestpackagecode\"];\r\n                delete selectedTestData[\"ntestgrouptestcode\"];\r\n\r\n                let Test = this.props.Login.Test || [];\r\n\r\n                let testData = this.props.Login.AllTest || [];\r\n\r\n                let componentTest = Test[this.props.Login.selectedComponent.slno] ? Test[this.props.Login.selectedComponent.slno] : [];\r\n\r\n                availableTest = filterRecordBasedOnTwoArrays(testData, componentTest, \"ntestcode\");\r\n            }\r\n            else {\r\n                availableTest = this.props.Login.TestCombined || [];\r\n\r\n            }\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedTestData: {}, selectPackage, TestCombined: availableTest }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const childoperation = this.props.Login.childoperation;\r\n        if (childoperation === \"create\") {\r\n            if (saveType === 1) {\r\n                this.SubSampleObjectAfterSave();\r\n            } else if (saveType === 2) {\r\n                this.SubSampleObject();\r\n            }\r\n        } else {\r\n            const Component = this.props.Login.Component;\r\n            const Test = this.props.Login.Test;\r\n            const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n            // const defaulttimezone = this.props.Login.defaulttimezone;\r\n            // const userInfo = this.props.Login.userInfo;\r\n            let selectedComponent = { ...this.state.selectComponent };\r\n            let objcomponent = {};\r\n\r\n            objcomponent[\"slno\"] = selectedComponent[\"slno\"] ? selectedComponent[\"slno\"] : \"\"\r\n            // objcomponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            // if(this.props.specBasedComponent){\r\n            //     objcomponent[\"scomponentname\"] = selectedComponent[\"ncomponentcode\"].label;\r\n            //     objcomponent[\"ncomponentcode\"] = selectedComponent[\"ncomponentcode\"] ? selectedComponent[\"ncomponentcode\"].value : -1;\r\n            //     objcomponent[\"nspecsampletypecode\"] = selectedComponent[\"nspecsampletypecode\"] ?selectedComponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     objcomponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(selectedComponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            objcomponent = { ...objcomponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            const index1 = subSampleDataGridList.findIndex(x => x.slno === objcomponent.slno)\r\n            if (index1 !== -1)\r\n                subSampleDataGridList[index1] = { ...objcomponent['jsonuidata'], ...objcomponent }\r\n\r\n            // objcomponent[\"jsondata\"] = {}\r\n            // objcomponent[\"jsonuidata\"] = {}\r\n\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                  //   let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 { value: selectedComponent[componentrow.label].value, label: selectedComponent[componentrow.label].label } : -1\r\n            //                            // if (componentrow.mandatory || selectedComponent[componentrow.label]) {\r\n            //                               //  componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                                // componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label].label\r\n            //                           //  }\r\n            //                             objcomponent[\"jsonuidata\"][componentrow.label]=selectedComponent[componentrow.label]?selectedComponent[componentrow.label].label:\"\"\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 selectedComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                     selectedComponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 objcomponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     selectedComponent[componentrow.label] ? convertDateTimetoString(selectedComponent[componentrow.label] ?\r\n            //                                         selectedComponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         selectedComponent[\"jsonuidata\"][componentrow.label]=selectedComponent[\"jsondata\"][componentrow.label]\r\n\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 selectedComponent[\"jsondata\"][`tz${componentrow.label}`] = selectedComponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: selectedComponent[`tz${componentrow.label}`].value, label: selectedComponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     selectedComponent[\"jsonuidata\"][`tz${componentrow.label}`]=selectedComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             objcomponent[\"jsondata\"][componentrow.label] = selectedComponent[componentrow.label] ?\r\n            //                                 selectedComponent[componentrow.label] : \"\"\r\n            //                                 objcomponent[\"jsonuidata\"][componentrow.label]=objcomponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (selectedComponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + selectedComponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                    // objcomponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             { value: selectedComponent[component.label].value, label: selectedComponent[component.label].label } : -1\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] =selectedComponent[component.label] ? selectedComponent[component.label].label :\"\"\r\n            //                     }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             objcomponent[\"jsondata\"][component.label] = convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                 selectedComponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             objcomponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) :\r\n            //                                 selectedComponent[component.label] ? convertDateTimetoString(selectedComponent[component.label] ?\r\n            //                                     selectedComponent[component.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                     objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                         }\r\n            //                         if (component.timezone) {\r\n            //                             objcomponent[\"jsondata\"][`tz${component.label}`] = selectedComponent[`tz${component.label}`] ?\r\n            //                                 { value: selectedComponent[`tz${component.label}`].value, label: selectedComponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 objcomponent[\"jsonuidata\"][`tz${component.label}`]  = objcomponent[\"jsondata\"][`tz${component.label}`] \r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         objcomponent[\"jsondata\"][component.label] = selectedComponent[component.label] ?\r\n            //                             selectedComponent[component.label] : \"\"\r\n\r\n            //                             objcomponent[\"jsonuidata\"][component.label] = objcomponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n\r\n            selectedComponent = { ...objcomponent }\r\n\r\n            const index = Component.findIndex(x => x.slno === selectedComponent.slno);\r\n            if (index > -1) {\r\n                Component.splice(index, 1, selectedComponent);\r\n            }\r\n            if (testrequired === 3) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login);\r\n            }\r\n            else if (selectedComponent[\"nneedservice\"] === true) {\r\n                this.props.getTestByComponentChange(Component, selectedComponent, this.props.Login, true);\r\n            } else {\r\n                delete selectedComponent.nneedservice;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        Component,\r\n                        selectedComponent: selectedComponent,\r\n                        loadSubSample: false, openChildModal: false,\r\n                        selectComponent: {}, parentPopUpSize: \"xl\",\r\n                        Test, SelectedTest: Test[selectedComponent.slno],\r\n                        screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                        subSampleDataGridList\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    SubSampleObjectAfterSave() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 2);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n\r\n\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent, this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n            // saveComponent[\"jsondata\"] = {}\r\n            // saveComponent[\"jsonuidata\"] = {}\r\n\r\n            // this.props.Login.masterData.SubSampleTemplate &&\r\n            //     this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n            //         row.children.map(column => {\r\n            //             column.children.map(component => {\r\n            //                 if (component.hasOwnProperty(\"children\")) {\r\n            //                    // let componentrowlabel = ''\r\n            //                    // let componentrowvalue = ''\r\n            //                     component.children.map(componentrow => {\r\n            //                         if (componentrow.inputtype === \"combo\") {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 { value: objcomponent[componentrow.label].value, label: objcomponent[componentrow.label].label } : -1\r\n            //                             // if (componentrow.mandatory || objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label].label\r\n            //                             // }\r\n            //                             saveComponent[\"jsonuidata\"][componentrow.label] = objcomponent[componentrow.label] ? objcomponent[componentrow.label].label  : \"\"\r\n\r\n            //                         }\r\n            //                         else if (componentrow.inputtype === \"date\") {\r\n            //                             if (componentrow.mandatory) {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                     objcomponent[componentrow.label] : new Date(), userInfo);\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             } else {\r\n            //                                 saveComponent[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n            //                                     convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) :\r\n            //                                     objcomponent[componentrow.label] ? convertDateTimetoString(objcomponent[componentrow.label] ?\r\n            //                                         objcomponent[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n            //                                         saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             }\r\n            //                             if (componentrow.timezone) {\r\n            //                                 saveComponent[\"jsondata\"][`tz${componentrow.label}`] = objcomponent[`tz${componentrow.label}`] ?\r\n            //                                     { value: objcomponent[`tz${componentrow.label}`].value, label: objcomponent[`tz${componentrow.label}`].label } :\r\n            //                                     defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                     saveComponent[\"jsonuidata\"][`tz${componentrow.label}`] = saveComponent[\"jsondata\"][`tz${componentrow.label}`]\r\n            //                             }\r\n            //                             // dateList.push(componentrow.label)\r\n            //                         }\r\n\r\n            //                         else {\r\n            //                             saveComponent[\"jsondata\"][componentrow.label] = objcomponent[componentrow.label] ?\r\n            //                                 objcomponent[componentrow.label] : \"\"\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][componentrow.label] = saveComponent[\"jsondata\"][componentrow.label]\r\n            //                             // if (objcomponent[componentrow.label]) {\r\n            //                             //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n            //                             //     componentrowvalue = componentrowvalue + ' ' + objcomponent[componentrow.label]\r\n            //                             // }\r\n            //                         }\r\n            //                     })\r\n            //                     //saveComponent[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n            //                 }\r\n            //                 else {\r\n            //                     if (component.inputtype === \"combo\") {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             { value: objcomponent[component.label].value, label: objcomponent[component.label].label } : -1\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] = objcomponent[component.label] ? objcomponent[component.label].label  :\"\"\r\n\r\n            //                         }\r\n            //                     else if (component.inputtype === \"date\") {\r\n            //                         if (component.mandatory) {\r\n            //                             saveComponent[\"jsondata\"][component.label] = convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                 objcomponent[component.label] : new Date(), userInfo);\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                         } else {\r\n            //                             saveComponent[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n            //                                 convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) :\r\n            //                                 objcomponent[component.label] ? convertDateTimetoString(objcomponent[component.label] ?\r\n            //                                     objcomponent[component.label] : new Date(), userInfo) : \"\";\r\n            //                                     saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n\r\n            //                                 }\r\n            //                         if (component.timezone) {\r\n            //                             saveComponent[\"jsondata\"][`tz${component.label}`] = objcomponent[`tz${component.label}`] ?\r\n            //                                 { value: objcomponent[`tz${component.label}`].value, label: objcomponent[`tz${component.label}`].label } :\r\n            //                                 defaulttimezone ? defaulttimezone : -1\r\n\r\n            //                                 saveComponent[\"jsonuidata\"][`tz${component.label}`]=  saveComponent[\"jsondata\"][`tz${component.label}`]\r\n            //                         }\r\n            //                         //dateList.push(component.label)\r\n            //                     }\r\n            //                     else {\r\n            //                         saveComponent[\"jsondata\"][component.label] = objcomponent[component.label] ?\r\n            //                             objcomponent[component.label] : \"\"\r\n\r\n            //                             saveComponent[\"jsonuidata\"][component.label] =  saveComponent[\"jsondata\"][component.label]\r\n            //                     }\r\n            //                 }\r\n\r\n            //             }\r\n            //             )\r\n            //         })\r\n            //     })\r\n\r\n            //  saveComponent[\"nallottedspeccode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"].value : -1;\r\n            Component.unshift(saveComponent);\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //    selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            // let selectedComponent = this.props.Login.selectedComponent;\r\n            const Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    Component, openChildModal: false,\r\n                    selectedComponent: saveComponent,\r\n                    loadSubSample: false,\r\n                    selectComponent: {},\r\n                    showSaveContinue: false,\r\n                    parentPopUpSize: \"xl\",\r\n                    SelectedTest: Test[saveComponent.slno],\r\n                    Test: Test, selectedTestData: {},\r\n                    screenName: this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n                    subSampleDataGridList,\r\n                    masterStatus: \"\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    SubSampleObject() {\r\n        const testrequired = this.state.selectedRecord.ntransactionstatus;\r\n        let objcomponent = this.state.selectComponent;\r\n        delete objcomponent.nneedservice;\r\n        let objcomponent1 = { ...this.state.selectComponent };\r\n        // const defaulttimezone = this.props.Login.defaulttimezone;\r\n        // const userInfo = this.props.Login.userInfo;\r\n        if (testrequired === 3) {\r\n            this.props.getTestfromDB(objcomponent, this.props.Login, 1);\r\n        } else {\r\n            const Component = this.props.Login.Component || [];\r\n            let saveComponent = {};\r\n            // if(this.props.specBasedComponent){\r\n            //     saveComponent[\"scomponentname\"] = objcomponent[\"ncomponentcode\"].label;\r\n            //     saveComponent[\"ncomponentcode\"] = objcomponent[\"ncomponentcode\"] ? objcomponent[\"ncomponentcode\"].value : -1;\r\n            //     saveComponent[\"nspecsampletypecode\"] = objcomponent[\"nspecsampletypecode\"] ?objcomponent[\"nspecsampletypecode\"]  : -1;\r\n            // }else{\r\n            //     saveComponent[\"nspecsampletypecode\"] = this.state.selectedSpec[\"nallottedspeccode\"] ? this.state.selectedSpec[\"nallottedspeccode\"]['item'].nspecsampletypecode : -1;\r\n            // }\r\n            saveComponent[\"slno\"] = this.props.Login.Component ? Object.keys(this.props.Login.Component).length + 1 : 1;\r\n\r\n\r\n            const subSampleDetail = getRegistrationSubSample(objcomponent,\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo,\r\n                this.props.Login.defaulttimezone, true, this.state.specBasedComponent,\r\n                this.state.selectedSpec)\r\n\r\n            saveComponent = { ...saveComponent, ...subSampleDetail.sampleRegistration }\r\n\r\n            let subSampleDataGridList = this.props.Login.subSampleDataGridList || []\r\n            subSampleDataGridList.push({ ...saveComponent['jsonuidata'], ...saveComponent })\r\n\r\n\r\n            Component.unshift(saveComponent);\r\n            // objcomponent1[\"scomments\"] = \"\";\r\n            //objcomponent1[\"ssubsamplename\"] = \"\";\r\n\r\n            let selectedTestData = this.state.selectedTestData[\"ntestgrouptestcode\"];\r\n            let selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                item.item['slno'] = saveComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            // selectedTestArray.map((item,i)=>{\r\n            //     selectedTestArray[i]['slno']=saveComponent.slno;\r\n            // })\r\n            let Test = this.props.Login.Test || [];\r\n\r\n            const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n\r\n            Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            const updateInfo = {\r\n                Component, selectedComponent: saveComponent,\r\n                selectComponent: objcomponent1,\r\n                //selectComponent:this.props.Login.saveContinueData,\r\n                SelectedTest: Test[saveComponent.slno],\r\n                Test: Test, subSampleDataGridList,\r\n                //selectedTestData: {}\r\n                saveContinueData: this.props.Login.saveContinueData,\r\n            }\r\n            this.addSubSampleSaveContinue(updateInfo, selectedTestData)\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         Component, selectedComponent: saveComponent,\r\n            //         selectComponent: objcomponent1,\r\n            //         SelectedTest: Test[saveComponent.slno],\r\n            //         Test: Test, selectedTestData: {}\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    addSubSampleSaveContinue = (updateInfo, selectedTestData) => {\r\n        const Map = {}\r\n        Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        Map[\"testrequired\"] = false;\r\n        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n        Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        Map[\"nspecsampletypecode\"] = updateInfo.selectedComponent[\"nspecsampletypecode\"] ?\r\n            updateInfo.selectedComponent[\"nspecsampletypecode\"] : -1\r\n        this.props.addSubSampleSaveContinue(updateInfo, Map, this.state.specBasedComponent,\r\n            this.props.Login.Components, selectedTestData, this.props.Login.lstComponent)\r\n    }\r\n\r\n    editComponent = (editselectedcomponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        this.props.EditComponent(inputData, objComponent, this.props.Login.userInfo, this.props.Login);\r\n    }\r\n\r\n    editSubSample = (editselectedcomponent, specBasedComponent) => {\r\n        let inputData = {};\r\n        let objComponent = { ...editselectedcomponent };\r\n        const defaulttimezone = this.props.Login.defaulttimezone;\r\n        const userInfo = this.props.Login.userInfo;\r\n        inputData[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n        inputData[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n        // inputData[\"masterData\"]=this.props.Login.masterData;\r\n\r\n\r\n\r\n        let selectComponent = this.state.selectComponent;\r\n        selectComponent['nspecsampletypecode'] = objComponent['nspecsampletypecode'] ?\r\n            objComponent['nspecsampletypecode'] : -1\r\n        if (specBasedComponent) {\r\n            selectComponent['ncomponentcode'] = { value: objComponent['ncomponentcode'] ? objComponent['ncomponentcode'] : -1, label: objComponent['scomponentname'] ? objComponent['scomponentname'] : \"\" }\r\n\r\n        }\r\n        selectComponent['slno'] = objComponent['slno']\r\n        this.props.Login.masterData.SubSampleTemplate &&\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        if (component.hasOwnProperty(\"children\")) {\r\n                            return component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                else if (componentrow.inputtype === \"date\") {\r\n\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][componentrow.label]) : \"\";\r\n\r\n                                    if (componentrow.timezone) {\r\n                                        selectComponent[`tz${componentrow.label}`] = objComponent[\"jsondata\"][`tz${componentrow.label}`] ?\r\n                                            objComponent[\"jsondata\"][`tz${componentrow.label}`] :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    selectComponent[componentrow.label] = objComponent[\"jsondata\"][componentrow.label] ?\r\n                                        objComponent[\"jsondata\"][componentrow.label] : \"\"\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                        else {\r\n                            if (component.inputtype === \"combo\") {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : -1\r\n                            }\r\n                            else if (component.inputtype === \"date\") {\r\n\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    rearrangeDateFormatforUI(userInfo, objComponent[\"jsondata\"][component.label]) : \"\";\r\n\r\n                                if (component.timezone) {\r\n                                    selectComponent[`tz${component.label}`] = objComponent[\"jsondata\"][`tz${component.label}`] ?\r\n                                        objComponent[\"jsondata\"][`tz${component.label}`] :\r\n                                        defaulttimezone ? defaulttimezone : -1\r\n                                }\r\n                            }\r\n                            else {\r\n                                selectComponent[component.label] = objComponent[\"jsondata\"][component.label] ?\r\n                                    objComponent[\"jsondata\"][component.label] : \"\"\r\n                            }\r\n                            return selectComponent;\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         loadSubSample: true, childoperation: \"update\",\r\n        //         ChildscreenName: \"SubSample\",\r\n        //         screenName: \"SubSample\",\r\n        //         openChildModal: false, selectComponent,\r\n        //         parentPopUpSize: \"lg\", loading: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo)\r\n        this.props.editSubSample(inputData, selectComponent,\r\n            this.props.Login.userInfo, specBasedComponent, this.props.Login.SubSamplecomboData,\r\n            this.state.selectedRecord);\r\n    }\r\n\r\n    deleteComponent = (event) => {\r\n        const dataItem = event;\r\n        const comp1 = this.props.Login.Component\r\n        const Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        const Test = this.props.Login.Test;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n\r\n        const index = comp1.findIndex(x => x.slno === dataItem.slno);\r\n        const subSampleIndex = subSampleDataGridList.findIndex(x => x.slno === dataItem.slno);\r\n        let updateInfo = {};\r\n        let incslno = comp1.length - 1;\r\n        if (comp1.length !== dataItem.slno) {\r\n            subSampleDataGridList = []\r\n            //  let slno = Component[index].slno\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            const preList = comp1.splice(0, index);\r\n            const afterList = comp1.splice(index, comp1.length);\r\n\r\n\r\n            preList.map(x => {\r\n                Test[incslno] = Test && Test[x.slno]\r\n                x.slno = incslno;\r\n                incslno = incslno - 1;\r\n                return null;\r\n            })\r\n\r\n\r\n            const Component1 = [...preList, ...afterList];\r\n\r\n            Component1.map(x => {\r\n                subSampleDataGridList.push({ ...x.jsonuidata, ...x })\r\n\r\n            })\r\n            sortByField(subSampleDataGridList, 'desc', 'slno')\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component1[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component1, selectedComponent: Component1[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n\r\n        } else {\r\n            if (index > -1) {\r\n                Component.splice(index, 1);\r\n            }\r\n            if (subSampleIndex > -1) {\r\n                subSampleDataGridList.splice(subSampleIndex, 1);\r\n            }\r\n            Test && Test[dataItem.slno] && delete Test[dataItem.slno]\r\n            SelectedTest = Test && Object.keys(Test).length > 0 && Test[Component[0].slno];\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { Component, selectedComponent: Component[0], Test, SelectedTest, subSampleDataGridList }\r\n            }\r\n        }\r\n\r\n\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    deleteTest = (event) => {\r\n        const dataItem = event;\r\n        let SelectedTest = this.props.Login.SelectedTest;\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n        const Test = this.props.Login.Test;\r\n        const index = SelectedTest.findIndex(x => x.ntestgrouptestcode === dataItem.ntestgrouptestcode);\r\n        if (index > -1) {\r\n            SelectedTest.splice(index, 1);\r\n        }\r\n        Test[selectedComponent.slno] = SelectedTest;\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { Test, SelectedTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSaveTestClick = (saveType, formRef) => {\r\n        let selectedTestData = this.props.Login.selectedTestData[\"ntestgrouptestcode\"];\r\n        let selectedTestArray = [];\r\n\r\n        let updateInfo = {}\r\n        let selectedComponent = this.props.Login.selectedComponent;\r\n\r\n        let Test = this.props.Login.Test || [];\r\n        if (this.props.Login.masterData.RealRegSubTypeValue ?\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false) {\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { SelectedTest: Test[selectedComponent.slno], Test: Test, selectedTestData: {}, loadTest: false, parentPopUpSize: \"xl\" }\r\n            }\r\n        } else {\r\n            selectedComponent = {\r\n                jsondata: { samplename: \"NA\" },\r\n                slno: 1\r\n            }\r\n            selectedTestData.map((item) => {\r\n                item.item['slno'] = selectedComponent.slno;\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n            const Component = [selectedComponent]\r\n            const ArrayTest = Test[selectedComponent.slno] ? Test[selectedComponent.slno] : [];\r\n            //  ArrayTest.push(selectedTestArray);\r\n            Test[selectedComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedComponent,\r\n                    Component,\r\n                    SelectedTest: Test[selectedComponent.slno],\r\n                    Test: Test, selectedTestData: {}, loadTest: false,\r\n                    parentPopUpSize: \"xl\"\r\n                    , screenName: this.props.Login.masterData.RealRegSubTypeValue ?\r\n                        this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename : \"scheduler\"\r\n                }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentDataStateChange = (event) => {\r\n        this.setState({\r\n            componentDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    subSampleDataStateChange = (event) => {\r\n        this.setState({\r\n            subSampleDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addsubSample = (specBasedComponent, specBasedTestPackage) => {\r\n        let Map = {};\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            Map[\"ntemplatemanipulationcode\"] = this.state.selectedSpec.ntemplatemanipulationcode;\r\n            Map[\"nallottedspeccode\"] = this.state.selectedSpec.nallottedspeccode.value;\r\n            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n            Map[\"testrequired\"] = false;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            let data = this.state.SubSamplecomboComponents || []\r\n            const SubSamplewithoutCombocomponent = this.state.SubSamplewithoutCombocomponent || []\r\n            const component = [...data, ...SubSamplewithoutCombocomponent]\r\n            const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n            if (component.length === 0) {\r\n                if (Layout !== undefined) {\r\n                    Layout.map(row => {\r\n                        return row.children.map(column => {\r\n                            return column.children.map(component => {\r\n                                return component.hasOwnProperty(\"children\") ?\r\n                                    component.children.map(componentrow => {\r\n                                        if (componentrow.inputtype === \"combo\" || componentrow.inputtype === \"backendsearchfilter\"\r\n                                            || componentrow.inputtype === \"frontendsearchfilter\") {\r\n                                            data.push(componentrow)\r\n                                        } else {\r\n                                            SubSamplewithoutCombocomponent.push(componentrow)\r\n                                        }\r\n                                        return null;\r\n                                    })\r\n                                    : component.inputtype === \"combo\" || component.inputtype === \"backendsearchfilter\"\r\n                                        || component.inputtype === \"frontendsearchfilter\" ? data.push(component) :\r\n                                        SubSamplewithoutCombocomponent.push(component)\r\n                            })\r\n                        })\r\n                    })\r\n                    const SubSamplecomboComponents = data\r\n                    let childColumnList = {};\r\n                    data.map(columnList => {\r\n                        const val = comboChild(data, columnList, childColumnList, true);\r\n                        data = val.data;\r\n                        childColumnList = val.childColumnList\r\n                        return null;\r\n                    })\r\n\r\n                    this.props.addsubSample(this.props.Login.masterData,\r\n                        this.props.Login.userInfo, data, this.state.selectComponent,\r\n                        childColumnList, SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent, specBasedComponent,\r\n                        Map, this.props.Login.Component, true, this.props.Login.SubSamplecomboData,\r\n                        this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n\r\n                    //  this.props.addsubSample(this.props.Login.userInfo, specBasedComponent, Map)\r\n                }\r\n            } else {\r\n                this.props.addsubSample(this.props.Login.masterData,\r\n                    this.props.Login.userInfo, data, this.state.selectComponent,\r\n                    this.state.parentSubSampleColumnList, this.state.SubSamplecomboComponents,\r\n                    this.state.SubSamplewithoutCombocomponent, specBasedComponent, Map,\r\n                    this.props.Login.Component, false, this.props.Login.SubSamplecomboData,\r\n                    this.state.selectedRecord, true, specBasedTestPackage, this.props.Login)\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.screenName !== 'scheduler') {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistration(true);\r\n                }\r\n            }\r\n        } else {\r\n            if (operation === \"update\") {\r\n                this.onUpdateRegistration(saveType, formRef, operation);\r\n            }\r\n            else {\r\n                if (operation === \"create\") {\r\n                    this.insertRegistrationScheduler(true);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    onUpdateRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 2,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            napproveconfversioncode: this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue ?\r\n                this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow\r\n                : false,\r\n            nneedsubsample: this.props.Login.masterData\r\n                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n            checkBoxOperation: 3,\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistration(this.props.Login.masterData,\r\n            this.state.selectedRecord, this.state.selectedSpec,\r\n            this.props.Login.masterData.registrationTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone,\r\n            operation, this.props.comboComponents);\r\n\r\n        //console.log(\"edit reg:\", param);\r\n\r\n        inputData[\"registration\"] = param.sampleRegistration\r\n        inputData[\"registration\"][\"jsonuidata\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"registration\"][\"npreregno\"] = String(this.state.selectedRecord.npreregno)\r\n        inputData[\"DateList\"] = param.dateList;\r\n        inputData['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n        inputData[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n        inputData[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n        inputData[\"selectedSample\"] = this.props.Login.masterData.selectedSample\r\n\r\n        // Object.keys(this.state.selectedRecord).map(key => {\r\n        //     if (typeof this.state.selectedRecord[key] === \"object\") {\r\n        //         if (this.state.selectedRecord[key] === null) {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //         }\r\n        //         else if (this.state.selectedRecord[key] instanceof Date) {\r\n        //             return inputData[\"registration\"][key] = formatInputDate(this.state.selectedRecord[key], false);\r\n        //         }\r\n        //         else {\r\n        //             return inputData[\"registration\"][key] = this.state.selectedRecord[key].value\r\n        //         }\r\n        //     }\r\n        //     else {\r\n        //         return inputData[\"registration\"][key] = this.state.selectedRecord[key];\r\n        //     }\r\n        // }\r\n        //  )\r\n        // console.log(\"edit:\", inputData);\r\n\r\n        // if (inputData[\"registration\"] ) {\r\n        //     delete inputData[\"registration\"][\"esignpassword\"]\r\n        //     delete inputData[\"registration\"][\"esigncomments\"]\r\n        //     delete inputData[\"registration\"][\"agree\"]\r\n        // }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"Registration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            selectedRecord: { ...this.state.selectedRecord, sloginid: this.props.Login.userInfo.sloginid },\r\n            action: 'editSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    // screenName:\"Esignature\",\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\", //openModal:true, openPortal:false\r\n                    openModal: false, openPortal: true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.updateRegistration(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    findSubsampleDateList(subsampletemplate) {\r\n        const dateList = []\r\n        subsampletemplate && subsampletemplate.map(row => {\r\n            return row.children.map(column => {\r\n                return column.children.map(component => {\r\n                    if (component.hasOwnProperty(\"children\")) {\r\n                        return component.children.map(componentrow => {\r\n                            if (componentrow.inputtype === \"date\") {\r\n                                dateList.push(componentrow.label)\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        if (component.inputtype === \"date\") {\r\n                            dateList.push(component.label)\r\n                        }\r\n                        return dateList\r\n                    }\r\n                }\r\n                )\r\n            })\r\n        })\r\n        return dateList;\r\n    }\r\n\r\n    insertRegistrationScheduler() {\r\n        let Components = this.props.Login.Component;\r\n        if (Components && Components.length > 0) {\r\n            let Test = this.props.Login.Test;\r\n            let Map = {};\r\n            Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n            Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                this.state.specBasedComponent,\r\n                this.props.Login.masterData.RealRegSubTypeValue ? this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false,\r\n                this.state.selectedSpec);\r\n            Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate ?\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata : this.props.Login.masterData.schedulerSubSampleTemplate.jsondata);\r\n            Map[\"nregtypecode\"] = 1;\r\n            Map[\"nregsubtypecode\"] = 1;\r\n            Map[\"nsampletypecode\"] = 1;\r\n            // Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n            Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n            Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n            Map[\"nneedtemplatebasedflow\"] = false;\r\n            Map[\"nneedsubsample\"] = this.props.Login.masterData.RealRegSubTypeValue ?\r\n                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false;\r\n            // Map[\"checkBoxOperation\"] = 3;\r\n            const param = getRegistrationScheduler(this.props.Login.masterData,\r\n                this.state.selectedRecord, this.state.selectedSpec,\r\n                this.props.Login.masterData.schedulerTemplate.jsondata,\r\n                this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                this.props.comboComponents);\r\n            Map[\"Registration\"] = param.sampleRegistration\r\n            Map[\"DateList\"] = param.dateList\r\n            Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"selectedscheduler\"] = this.props.Login.masterData.SelectedScheduler;\r\n\r\n            Map[\"selectedscheduler\"][\"sstarttime\"] = formatInputDateWithoutT(rearrangeDateFormat(this.props.Login.userInfo, Map[\"selectedscheduler\"][\"sstarttime\"]), false)\r\n            //Map[\"nflag\"] = 2;\r\n            // Map[\"ntype\"] = 2;\r\n            //Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n            //Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n            //  Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n            //Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n\r\n            const inputParam = {\r\n                inputData: Map,\r\n                postParamList: this.props.postParamList,\r\n                action: \"preregister\"\r\n            }\r\n            this.props.insertRegistrationScheduler(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n        }\r\n\r\n    }\r\n\r\n    insertRegistration() {\r\n        let Components = this.props.Login.Component;\r\n        let nneedsubsample = this.props.Login.masterData\r\n            && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n        if (this.state.selectedSpec.nallottedspeccode !== undefined\r\n            && this.state.selectedSpec.nallottedspeccode !== \"\") {\r\n            if (nneedsubsample ? Components && Components.length > 0 : true) {\r\n                let Test = this.props.Login.Test;\r\n                let Map = {};\r\n                Map[\"testgrouptest\"] = TestListManipulation(Components, Test);\r\n                if (nneedsubsample === false && this.props.Login.Test && this.props.Login.Test.length === 0) {\r\n                    Map[\"RegistrationSample\"] = [{\r\n                        \"jsondata\": { \"ssamplename\": \"NA\" }, \"slno\": 1\r\n                        , \"ncomponentcode\": -1, \"nspecsampletypecode\": this.state.selectedSpec.nallottedspeccode.item.nspecsampletypecode\r\n                    }]\r\n                } else {\r\n                    Map[\"RegistrationSample\"] = SubSample(this.props.Login.Component ? this.props.Login.Component : [],\r\n                        this.state.specBasedComponent,\r\n                        this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample, this.state.selectedSpec);\r\n                }\r\n\r\n                Map[\"subsampleDateList\"] = this.findSubsampleDateList(this.props.Login.masterData.SubSampleTemplate.jsondata);\r\n                //Map[\"FromDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.fromDate);//formatDate(this.fromDate);\r\n                // Map[\"ToDate\"] = rearrangeDateFormat(this.props.Login.userInfo, this.props.toDate);//formatDate(this.toDate);\r\n                Map[\"FromDate\"] = \"\";\r\n                Map[\"ToDate\"] = \"\";\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.registrationTemplate\r\n                    && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode;\r\n                Map[\"napproveconfversioncode\"] = this.props.Login.masterData.RealApprovalConfigVersionValue.napproveconfversioncode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData\r\n                    && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                const param = getRegistration(this.props.Login.masterData,\r\n                    this.state.selectedRecord, this.state.selectedSpec,\r\n                    this.props.Login.masterData.registrationTemplate.jsondata,\r\n                    this.props.Login.userInfo, this.props.Login.defaultTimeZone, 'create',\r\n                    this.props.comboComponents);\r\n                //console.log(\"param:\", param);\r\n                Map[\"Registration\"] = param.sampleRegistration\r\n                Map[\"DateList\"] = param.dateList\r\n                Map['sampledateconstraints'] = this.sampleeditable.sampledateconstraints;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"samplecombinationunique\"] = this.props.samplecombinationunique;\r\n                Map[\"subsamplecombinationunique\"] = this.props.subsamplecombinationunique;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"url\"] = this.props.Login.settings[24];\r\n                // Map[\"ntype\"] = 2;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"multipleselectionFlag\"] = this.props.Login.settings && parseInt(this.props.Login.settings[7]) === 3 ? true : false;\r\n                Map[\"ntestpackagecode\"] = this.state.selectedRecord['ntestpackagecode'] && this.state.selectedRecord['ntestpackagecode']\r\n\r\n                //console.log(\"this.props.Login.masterData.registrationTemplate:\", this.props.Login.masterData.registrationTemplate);\r\n                if (this.props.Login.masterData.SampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                    const ageComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                    const dateComp = this.props.Login.withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                    const genderComp = this.props.Login.comboComponents.filter(item => item.name === \"Gender\");\r\n                    if (this.state.selectedRecord.hasOwnProperty(ageComp[0].label)) {\r\n                        Map[\"AgeData\"] = parseInt(ageCalculate(this.state.selectedRecord[dateComp[0].label], true));\r\n                    }\r\n                    if (this.state.selectedRecord.hasOwnProperty(genderComp[0].label)) {\r\n                        Map[\"ngendercode\"] = this.state.selectedRecord[genderComp[0].label].value;\r\n\r\n                    }\r\n                    Map[\"Registration\"]['jsondata']['ageDataForRulesEngine'] = { 'nage': Map[\"AgeData\"], 'ngendercode': Map[\"ngendercode\"] }\r\n                   \r\n                    let orderType=  { \"Order Type\": {\r\n                                    \"pkey\": \"nordertypecode\",\r\n                                    \"label\": \"NA\",\r\n                                    \"value\": -1,\r\n                                    \"source\": \"ordertype\",\r\n                                    \"nordertypecode\": -1,\r\n                                    \"nquerybuildertablecode\": 246\r\n                                }};\r\n                    if(this.props.Login.masterData.registrationTemplate.ndefaulttemplatecode === 9){\r\n                            orderType=  { \"Order Type\": {\r\n                                \"pkey\": \"nordertypecode\",\r\n                                \"label\": \"External\",\r\n                                \"value\": 2,\r\n                                \"source\": \"ordertype\",\r\n                                \"nordertypecode\": 2,\r\n                                \"nquerybuildertablecode\": 246\r\n                            }};\r\n                    }\r\n                   \r\n                    Map[\"Registration\"]['jsondata'] = {... Map[\"Registration\"]['jsondata'], \r\n                                                          ...orderType\r\n                                                         }\r\n                }\r\n                Map[\"skipmethodvalidity\"] = false;\r\n                const inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.props.postParamList,\r\n                    action: \"preregister\"\r\n                }\r\n                //console.log(\"insert reg:\", inputParam);\r\n                this.props.insertRegistration(inputParam, this.props.Login.masterData)\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLETOPREREGISTER\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericBlur = (value, control) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (selectedRecord[control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedRecord[control.label] < parseFloat(control.max))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedRecord[control.label] > parseFloat(control.min))) {\r\n                    selectedRecord[control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    // addPatient =() => {\r\n    //     // const addParam = {\r\n    //     //     screenName: \"IDS_PATIENTMASTER\",\r\n    //     //     operation: \"create\",\r\n    //     //     primaryKeyName: \"npatientcode\",\r\n    //     //     masterData: this.props.Login.masterData,\r\n    //     //     userInfo: this.props.Login.userInfo,\r\n    //     //     ncontrolcode: addId,\r\n    //     //   };\r\n    //     // this.props.getPatientComboService(addParam);\r\n    //         const currentUserInfo = JSON.parse(JSON.stringify(this.props.Login.userInfo));\r\n    //         const userInfo = {\r\n    //             ...this.props.Login.userInfo, \r\n    //             \"nformcode\": 137,\r\n    //             \"nmodulecode\": 15, \"sformname\" : 'Patient Master', \r\n    //             \"smodulename\" : 'Contacts'\r\n    //         }\r\n    //         const inputParam = {\r\n    //             currentUserInfo,\r\n    //             inputData: { \"userinfo\": userInfo, currentdate: formatInputDate(new Date(), true) },\r\n    //             classUrl:'patient', methodUrl:'Patient', displayName:'IDS_PATIENT'\r\n    //         };\r\n\r\n    //         this.props.callService(inputParam);\r\n\r\n    // }\r\n\r\n    render() {\r\n\r\n        let saveType = 1;\r\n        if (this.props.ignoreFormValidation) {\r\n            saveType = 5;\r\n        }\r\n        let buttonLabel = \"Save\";\r\n        let idsLabel = \"IDS_SAVE\";\r\n        if (this.props.buttonLabel) {\r\n            buttonLabel = this.props.buttonLabel;\r\n            idsLabel = 'IDS_'.concat(buttonLabel.toUpperCase());\r\n        }\r\n        // const testColumnList = [\r\n        //     { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", width: \"200px\" },\r\n        //     { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_SOURCE\", \"dataField\": \"ssourcename\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_METHOD\", \"dataField\": \"smethodname\", width: \"150px\" },\r\n        //     { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", width: \"200px\" }]\r\n        return (\r\n            <Modal\r\n                size={this.props.Login.loadComponent ?\r\n                    'lg' : this.props.Login.loadSpec ? 'lg' :\r\n                        this.props.Login.loadTest ? 'lg' :\r\n                            this.props.Login.loadSubSample ? 'lg' :\r\n                                this.props.Login.loadCustomSearchFilter ? 'xl' : 'xl'}\r\n                // size={this.props.templateData[0] ?\r\n                //     this.props.templateData[0].children ?\r\n                //         this.props.templateData[0].children.length >= 2 ? 'xl' : 'lg' : 'lg' : 'lg'}\r\n                backdrop=\"static\"\r\n                //className={this.props.className || \"registrationModel\"}\r\n                className={this.props.Login.loadCustomSearchFilter ? 'wide-popup' : this.props.className || \"\"}\r\n                show={this.props.Login.openPortal}\r\n                onHide={this.props.closeModal}\r\n                enforceFocus={false}\r\n                dialogClassName=\"modal-dialog-slideout freakerstop\"\r\n                aria-labelledby=\"add-user\">\r\n                {/* <Modal.Header className=\"d-flex align-items-center mb-2\"> */}\r\n                <Modal.Header className=\"d-flex align-items-center\">\r\n                    <Modal.Title id=\"add-user\" className=\"header-primary flex-grow-1\">\r\n                        {this.props.graphView === true ? \"\" : this.props.Login.inputParam ?\r\n                            this.props.Login.esign === true ?\r\n                                <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                : this.props.Login.loadEsign === true ?\r\n                                    <FormattedMessage id={\"IDS_ESIGN\"} defaultMessage=\"Esign\" />\r\n                                    : this.props.loginoperation ?\r\n                                        <FormattedMessage id={this.props.Login.screenName} />\r\n                                        : <>\r\n                                            {this.props.operation ?\r\n                                                <>\r\n                                                    <FormattedMessage id={this.props.Login.operation && \"IDS_\".concat(this.props.Login.addMaster?this.props.Login.masterOperation[this.props.Login.masterIndex].toUpperCase(): this.props.Login.operation.toUpperCase())}\r\n                                                        defaultMessage='Add' />\r\n                                                    {\" \"}\r\n                                                    {\r\n                                                        this.props.Login.screenName ?\r\n                                                            <FormattedMessage id={this.props.Login.screenName} />\r\n                                                            : \"\"\r\n                                                    }\r\n                                                </>\r\n                                                :\r\n                                                this.props.Login.screenName ?\r\n                                                    <FormattedMessage id={this.props.Login.screenName} />\r\n                                                    : \"\"}\r\n                                        </>\r\n                            : \"\"}\r\n                    </Modal.Title>\r\n                    <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.Login.isDynamicViewSlideOut ? this.closeDynamicView :\r\n                        this.props.Login.loadCustomSearchFilter ? this.closeKendoFilter :\r\n                            this.props.Login.addMaster ? this.closeAddMaster : this.props.Login.loadSpec ?\r\n                                this.closeSpec : this.props.Login.loadTest ? this.closeTest : this.props.Login.loadComponent ?\r\n                                    this.closeComponent : this.props.Login.loadSubSample ? this.closeSubSample :\r\n                                        this.props.closeModal}>\r\n                        <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                    </Button>\r\n                    {this.props.esign === true ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SUBMIT' defaultMessage='Submit' />\r\n                        </Button>\r\n                        :\r\n                        (this.props.operation === \"create\" || this.props.operation === \"update\") && this.props.showValidate ?\r\n                            <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id='IDS_VALIDATE' defaultMessage='Validate' />\r\n                            </Button> :\r\n                            this.props.showCalculate ?\r\n                                <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                    <FormattedMessage id='IDS_CALCULATE' defaultMessage='Calculate' />\r\n                                </Button> :\r\n                                this.props.showParam === true && this.props.showExecute ?\r\n                                    <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(4)}>\r\n                                        <FontAwesomeIcon icon={faCalculator} /> { }\r\n                                        <FormattedMessage id='IDS_EXECUTE' defaultMessage='Execute' />\r\n                                    </Button> :\r\n                                    this.props.noSave || this.props.graphView ?\r\n                                        this.props.operation === \"view\" ? \"\"\r\n                                            : <Button className=\"btn btn-user btn-primary-blue\" role=\"button\"\r\n                                                onClick={this.props.resetView}\r\n                                            >\r\n                                                <FormattedMessage id={\"IDS_RESET\"} defaultMessage='Reset' />\r\n                                            </Button>\r\n                                        : this.props.Login.loadEsign === true && this.props.Login.operation === \"update\" ?\r\n                                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(3)}>\r\n                                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                                <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                            </Button>\r\n                                            : this.props.Login.loadCustomSearchFilter ? \"\" :\r\n                                                <Button className=\" btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(saveType)}>\r\n                                                    <FontAwesomeIcon icon={faSave} /> { }\r\n                                                    <FormattedMessage id={idsLabel} defaultMessage={buttonLabel} />\r\n                                                </Button>\r\n                    }\r\n                    {this.props.Login.operation === \"create\" && (this.props.Login.showSaveContinue && (this.props.Login.addMaster === undefined || this.props.Login.addMaster === false)) ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(2)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVECONTINUE' defaultMessage='Save & Continue' />\r\n                        </Button>\r\n                        : \"\"\r\n                    }\r\n                    {(this.props.operation === \"create\" || this.props.operation === \"update\")\r\n                        && this.props.esign !== true && this.props.showExecute === true && this.props.showSave ?\r\n                        <Button className=\"btn-user btn-primary-blue\" onClick={() => this.handleSaveClick(1)}>\r\n                            <FontAwesomeIcon icon={faSave} /> { }\r\n                            <FormattedMessage id='IDS_SAVE' defaultMessage='Save' />\r\n                        </Button>\r\n                        : \"\"}\r\n                </Modal.Header>\r\n                <Modal.Body className='popup-fixed-center-headed-full-width'>\r\n                    <ModalInner ref={this.myRef} >\r\n                        <Card.Body >\r\n                            {/* className=\"no-padding\" */}\r\n                            {/* <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1} percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                                vertical={true}\r\n                            > */}\r\n                            <React.Fragment>\r\n                                <Form ref={this.formRef}>\r\n\r\n                                    {this.props.Login.patientRegistration ?\r\n                                        <Row>\r\n                                            <Col>\r\n                                                <PatientMaster Login={this.props.Login} />\r\n                                            </Col>\r\n                                        </Row> : this.props.Login.isDynamicViewSlideOut ?\r\n                                            <ExternalOrderSlideout\r\n                                                dynamicExternalSample={this.props.Login.dynamicExternalSample}\r\n                                                dynamicExternalTestChild={this.props.Login.dynamicExternalTestChild}\r\n                                                dynamicGridSelectedId={this.props.Login.dynamicGridSelectedId || null}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                selectedDynamicViewControl={this.props.Login.selectedDynamicViewControl}\r\n                                            />\r\n\r\n                                            : this.props.Login.loadCustomSearchFilter ?\r\n                                                this.props.Login.seletedFilterComponent.inputtype === 'frontendsearchfilter' ?\r\n                                                    <KendoDatatoolFilter\r\n                                                        filter={this.props.Login.kendoFilter}\r\n                                                        handleFilterChange={this.handleFilterChange}\r\n                                                        filterData={this.props.Login.lstPatient || []}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        fields={this.props.Login.fields || []}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n\r\n                                                    /> : <FilterQueryBuilder\r\n                                                        fields={this.props.Login.fields || {}}\r\n                                                        onChange={this.onChangeAwesomeQueryBuilder}\r\n                                                        tree={this.props.Login.awesomeTree}\r\n                                                        config={this.props.Login.awesomeConfig}\r\n                                                        skip={this.props.Login.kendoSkip}\r\n                                                        take={this.props.Login.kendoTake}\r\n                                                        handlePageChange={this.handlePageChange}\r\n                                                        gridColumns={this.props.Login.gridColumns || []}\r\n                                                        filterData={this.props.Login.lstPatient}\r\n                                                        onRowClick={this.handleKendoRowClick}\r\n                                                        handleExecuteClick={this.handleExecuteClick}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                    /> :\r\n                                                this.props.Login.loadSpec ?\r\n                                                    <AddSpecification\r\n                                                        AgaramTree={this.props.Login.AgaramTree}\r\n                                                        openNodes={this.props.Login.OpenNodes}\r\n                                                        handleTreeClick={this.onTreeClick}\r\n                                                        focusKey={this.props.Login.FocusKey}\r\n                                                        activeKey={this.props.Login.ActiveKey}\r\n                                                        Specification={this.props.Login.Specification}\r\n                                                        selectedSpec={this.state.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        onSpecChange={this.onspecChange}\r\n                                                    />\r\n                                                    : this.props.Login.loadTest ?\r\n                                                        <AddTest\r\n                                                            TestCombined={this.props.Login.TestCombined || []}\r\n                                                            TestChange={this.TestChange}\r\n                                                            selectedTestData={this.props.Login.selectedTestData}\r\n                                                            TestPackage={this.props.Login.TestPackage || []}\r\n                                                            selectPackage={this.state.selectPackage}\r\n                                                            onTestPackageChange={this.onTestPackageChange}\r\n                                                            hideQualisForms={this.props.Login.hideQualisForms}\r\n\r\n                                                        /> : this.props.Login.loadComponent ?\r\n                                                            <AddComponentPopUp\r\n                                                                ref={this.myScrollRef}\r\n                                                                selectComponent={this.state.selectComponent || {}}\r\n                                                                RealSampleTypeValue={this.props.Login.masterData.RealSampleTypeValue || {}}\r\n                                                                RealRegTypeValue={this.props.Login.masterData.RealRegTypeValue || {}}\r\n                                                                RealRegSubTypeValue={this.props.Login.masterData.RealRegSubTypeValue || {}}\r\n                                                                RealFilterStatusValue={this.props.Login.masterData.RealFilterStatusValue || {}}\r\n                                                                formatMessage={this.props.intl.formatMessage}\r\n                                                                handleDateChange={this.handleDateChangeComp}\r\n                                                                Component={this.props.Login.lstComponent || []}\r\n                                                                onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                // onComboChange={this.onComponentComboChange}\r\n                                                                timeZoneList={this.props.Login.timeZoneList}\r\n                                                                onComponentChange={this.onComponentChange}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                sreceiveddate={this.props.Login.sreceiveddate || []}\r\n                                                                CurrentTime={this.props.Login.CurrentTime}\r\n                                                            /> : this.props.Login.addMaster ?\r\n                                                                <AddMasterRecords\r\n                                                                    selectedControl={this.props.Login.selectedControl[this.props.Login.masterIndex]}\r\n                                                                    fieldList={this.props.Login.masterfieldList && this.props.Login.masterfieldList[this.props.Login.masterIndex]}\r\n                                                                    extractedColumnList={this.props.Login.masterextractedColumnList[this.props.Login.masterIndex]}\r\n                                                                    // primaryKeyField={this.props.Login.masterprimaryKeyField}\r\n                                                                    selectedRecord={this.state.selectedMaster[this.props.Login.masterIndex] || {}}\r\n                                                                    onInputOnChange={this.onInputOnChangeMaster}\r\n                                                                    onComboChange={this.onComboChangeMaster}\r\n                                                                    handleDateChange={this.handleDateChangeMaster}\r\n                                                                    dataList={this.props.Login.masterdataList && this.props.Login.masterdataList[this.props.Login.masterIndex]}\r\n                                                                    onNumericInputOnChange={this.onNumericInputOnChangeMaster}\r\n                                                                    masterDesign={this.props.Login.masterDesign && this.props.Login.masterDesign[this.props.Login.masterIndex]}\r\n                                                                    mastertimeZoneList={this.props.Login.mastertimeZoneList}\r\n                                                                    masterdefaultTimeZone={this.props.Login.masterdefaultTimeZone}\r\n                                                                    onComboChangeMasterDyanmic={this.onComboChangeMasterDyanmic}\r\n                                                                    handleDateChangeMasterDynamic={this.handleDateChangeMasterDynamic}\r\n                                                                    onInputOnChangeMasterDynamic={this.onInputOnChangeMasterDynamic}\r\n                                                                    onNumericInputChangeMasterDynamic={this.onNumericInputChangeMasterDynamic}\r\n                                                                    onNumericBlurMasterDynamic={this.onNumericBlurMasterDynamic}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    Login={this.props.Login}\r\n                                                                    addMasterRecord={this.addMasterRecord}\r\n                                                                    userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                    masterIndex={this.props.Login.masterIndex}\r\n                                                                    custombuttonclick={this.custombuttonclick}\r\n                                                                    editMasterRecord={this.editMasterRecord}\r\n                                                                />\r\n                                                                : this.props.Login.loadSubSample ?\r\n                                                                    <AddSubSample\r\n                                                                        Component={this.props.Login.lstComponent || []}\r\n                                                                        selectComponent={this.state.selectComponent}\r\n                                                                        selectedRecord={this.state.selectedRecord}\r\n                                                                        onComponentChange={this.onComponentChange}\r\n                                                                        onInputComponentOnChange={this.onInputComponentOnChange}\r\n                                                                        templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                                                            this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                                                        userInfo={this.props.Login.userInfo}\r\n                                                                        timeZoneList={this.props.Login.timeZoneList}\r\n                                                                        defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                        handleDateChange={this.handleDateSubSampleChange}\r\n                                                                        onInputOnChange={this.onInputOnSubSampleChange}\r\n                                                                        onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                                                        onNumericBlur={this.onNumericBlurSubSample}\r\n                                                                        comboData={this.props.Login.SubSamplecomboData}\r\n                                                                        onComboChange={this.onComboSubSampleChange}\r\n                                                                        TestCombined={this.props.Login.TestCombined || []}\r\n                                                                        TestChange={this.TestChange}\r\n                                                                        selectedTestData={this.state.selectedTestData}\r\n                                                                        selectPackage={this.state.selectPackage}\r\n                                                                        selectedTestPackageData={this.state.selectedTestPackageData}\r\n                                                                        TestPackage={this.props.Login.TestPackage || []}\r\n                                                                        childoperation={this.props.Login.childoperation}\r\n                                                                        specBasedComponent={this.state.specBasedComponent}\r\n                                                                        onTestPackageChange={this.onTestPackageChange}\r\n                                                                        userRoleControlRights={this.props.Login.userRoleControlRights}\r\n                                                                        hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                                        addMasterRecord={this.addMasterRecord}\r\n                                                                        editMasterRecord={this.editMasterRecord}\r\n\r\n                                                                    />\r\n                                                                    : this.props.Login.loadEsign ?\r\n\r\n                                                                        <Esign\r\n                                                                            operation={this.props.Login.operation}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                            selectedRecord={this.props.Login.selectedRecord}\r\n                                                                        />\r\n                                                                        : <RegisterSlideOut\r\n                                                                            //addPatient={this.addPatient}\r\n                                                                            editfield={this.sampleeditable &&\r\n                                                                                this.sampleeditable['sampleeditable']}\r\n                                                                            ntransactionstatus={this.props.Login.masterData && this.props.Login.masterData.selectedSample &&\r\n                                                                                this.props.Login.masterData.selectedSample.length > 0\r\n                                                                                && this.props.Login.masterData.selectedSample[0].ntransactionstatus}\r\n                                                                            loadPreregister={this.props.Login.loadPreregister}\r\n                                                                            selectedSpec={this.state.selectedSpec}\r\n                                                                            selectedRecord={this.state.selectedRecord}\r\n                                                                            selectedComponent={this.props.Login.selectedComponent}\r\n                                                                            subSampleDataGridList={this.props.Login.subSampleDataGridList || []}\r\n                                                                            SelectedTest={this.props.Login.SelectedTest}\r\n                                                                            selectedTestData={this.state.selectedTestData}\r\n                                                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                                                            userRoleControlRights1={this.props.Login.userRoleControlRights}\r\n                                                                            templateData={this.props.Login.masterData.registrationTemplate ?\r\n                                                                                this.props.Login.masterData.registrationTemplate.jsondata :\r\n                                                                                this.props.Login.masterData.schedulerTemplate ?\r\n                                                                                    this.props.Login.masterData.schedulerTemplate.jsondata : {}}\r\n                                                                            handleChange={this.props.handleChange}\r\n                                                                            handleDateChange={this.handleDateChange}\r\n                                                                            onInputOnChange={this.onInputOnChange}\r\n                                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                                            onNumericBlur={this.onNumericBlur}\r\n                                                                            comboData={this.props.Login.comboData}\r\n                                                                            onComboChange={this.onComboChange}\r\n                                                                            userInfo={this.props.Login.userInfo}\r\n                                                                            timeZoneList={this.props.Login.timeZoneList}\r\n                                                                            defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                                                            AddSpec={this.AddSpec}\r\n                                                                            addTest={this.addTestslide}\r\n                                                                            handleComponentRowClick={this.handleComponentRowClick}\r\n                                                                            nneedsubsample={this.props.Login.masterData\r\n                                                                                && this.props.Login.masterData.RealRegSubTypeValue ?\r\n                                                                                this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample : false}\r\n                                                                            specBasedComponent={this.state.specBasedComponent}\r\n                                                                            AddComponent={this.AddComponent}\r\n                                                                            deleteComponent={this.deleteComponent}\r\n                                                                            deleteTest={this.deleteTest}\r\n                                                                            editComponent={this.editComponent}\r\n                                                                            componentColumnList={this.componentColumnList}\r\n                                                                            Component={this.props.Login.Component}\r\n                                                                            TestChange={this.TestChange}\r\n                                                                            testDataState={this.state.testDataState}\r\n                                                                            subSampleDataState={this.state.subSampleDataState}\r\n                                                                            testDataStateChange={this.testDataStateChange}\r\n                                                                            subSampleDataStateChange={this.subSampleDataStateChange}\r\n                                                                            addsubSample={this.addsubSample}\r\n                                                                            editSubSample={this.editSubSample}\r\n                                                                            subSampleDataGridFields={this.subSampleDataGridList}\r\n                                                                            selectedSample={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample[0] || {}}\r\n                                                                            operation={this.props.Login.operation}\r\n                                                                            specBasedTestPackage={this.state.specBasedTestPackage}\r\n                                                                            custombuttonclick={this.custombuttonclick}\r\n                                                                            addMasterRecord={this.addMasterRecord}\r\n                                                                            editMasterRecord={this.editMasterRecord}\r\n                                                                            onClickView={this.onClickView}\r\n                                                                            comboComponents={this.props.Login.comboComponents}\r\n                                                                            sampleType={{\r\n                                                                                \"label\": this.props.Login.masterData.RealSampleTypeValue.ssampletypename,\r\n                                                                                \"value\": this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                                                                                \"item\": this.props.Login.masterData.RealSampleTypeValue,\r\n                                                                            }}\r\n                                                                        />\r\n                                    }\r\n                                </Form>\r\n                            </React.Fragment>\r\n                            {/* </SplitterLayout> */}\r\n                        </Card.Body>\r\n                    </ModalInner>\r\n                </Modal.Body>\r\n            </Modal>\r\n        );\r\n\r\n    }\r\n\r\n    onComboChangeMaster = (comboData, fieldName, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        if (comboData !== null) {\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                selectedMaster[masterIndex][item.tableDataField] = comboData.value;\r\n            }\r\n            else if (item.foreignDataField) {\r\n                selectedMaster[masterIndex][item.foreignDataField] = comboData.value;\r\n            }\r\n        }\r\n        selectedMaster[masterIndex][fieldName] = comboData;\r\n        if (item.childIndex !== undefined) {\r\n            this.props.getChildComboMaster(selectedMaster, fieldName, item,\r\n                this.props.Login.selectedControl,\r\n                this.props.Login.masterfieldList,\r\n                this.props.Login.masterdataList, this.props.Login.userInfo, masterIndex)\r\n        } else {\r\n            this.setState({ selectedMaster });\r\n        }\r\n\r\n    }\r\n\r\n    handleDateChangeMaster = (dateName, dateValue, item) => {\r\n        //   const { selectedMaster } = this.state;\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n        const age = ageCalculate(dateValue);\r\n        selectedMaster[masterIndex][\"sage\"] = age;\r\n        this.setState({ selectedMaster });\r\n\r\n    }\r\n\r\n    onNumericInputOnChangeMaster = (value, name, item) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n\r\n    onInputOnChangeMaster = (event) => {\r\n        const selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? 3 : 4;\r\n            if (this.props.Login.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                if (selectedMaster[masterIndex].nneedcurrentaddress === 3) {\r\n                    selectedMaster[masterIndex].sflatnotemp = selectedMaster[masterIndex].sflatno;\r\n                    selectedMaster[masterIndex].shousenotemp = selectedMaster[masterIndex].shouseno;\r\n                    selectedMaster[masterIndex].spostalcodetemp = selectedMaster[masterIndex].spostalcode;\r\n                    selectedMaster[masterIndex].sstreettemp = selectedMaster[masterIndex].sstreet;\r\n                    selectedMaster[masterIndex].scitynametemp = selectedMaster[masterIndex].scityname;\r\n                    selectedMaster[masterIndex].sdistrictnametemp = selectedMaster[masterIndex].sdistrictname;\r\n                    selectedMaster[masterIndex].sregionnametemp = selectedMaster[masterIndex].sregionname;\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex].sflatnotemp = \"\";\r\n                    selectedMaster[masterIndex].shousenotemp = \"\";\r\n                    selectedMaster[masterIndex].spostalcodetemp = \"\";\r\n                    selectedMaster[masterIndex].sstreettemp = \"\";\r\n                    selectedMaster[masterIndex].scitynametemp = \"\";\r\n                    selectedMaster[masterIndex].sdistrictnametemp = \"\";\r\n                    selectedMaster[masterIndex].sregionnametemp = \"\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            if (event.target.name === \"smobileno\" || event.target.name === \"sphoneno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value !== \"\" ?\r\n                        event.target.value : selectedMaster[masterIndex][event.target.name];\r\n                }\r\n                else {\r\n                    selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onSaveMasterRecord = (saveType, formRef) => {\r\n        //add / edit            \r\n        const masterIndex = this.props.Login.masterIndex;\r\n        let inputData = [];\r\n        const selectedControl = this.props.Login.selectedControl\r\n        const masterDesign = this.props.Login.masterDesign\r\n        inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n        inputData[selectedControl[masterIndex].table.item.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n        let isEmailCheck = true;\r\n\r\n        const methodUrl = selectedControl[masterIndex].table.item.methodUrl.toLowerCase()\r\n        if (this.props.Login.masterOperation[masterIndex] === 'update') {\r\n            if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                inputData[methodUrl][\"ndynamicmastercode\"] = this.props.Login.masterEditObject[masterIndex].item?\r\n                this.props.Login.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode:this.props.Login.masterEditObject[masterIndex].ndynamicmastercode\r\n            }\r\n            else {\r\n                inputData[methodUrl][selectedControl[masterIndex][\"valuemember\"]] = this.props.Login.masterEditObject[masterIndex].value\r\n            }\r\n\r\n        }\r\n\r\n        if (selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n            const selectedMaster = this.state.selectedMaster;\r\n            inputData[\"userinfo\"] = { ...this.props.Login.userInfo, nformcode: selectedControl[masterIndex].table.item.nformcode };\r\n            inputData[\"masterdateconstraints\"] = masterDesign[masterIndex].screendesign.masterdateconstraints;\r\n            inputData[\"masterdatefields\"] = masterDesign[masterIndex].screendesign.masterdatefields;\r\n            inputData[\"mastercombinationunique\"] = masterDesign[masterIndex].screendesign.mastercombinationunique;\r\n            //add                          \r\n            inputData[\"dynamicmaster\"] = {\r\n                ...inputData[methodUrl],\r\n                nformcode: selectedControl[masterIndex].table.item.nformcode,\r\n                ndesigntemplatemappingcode: masterDesign[masterIndex].ndesigntemplatemappingcode,\r\n                jsondata: {}, jsonuidata: {}\r\n            };\r\n\r\n            const dateList = [];\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n\r\n            masterDesign[masterIndex] &&\r\n                masterDesign[masterIndex].slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[componentrow.label] ?\r\n                                            {\r\n                                                value: selectedMaster[masterIndex][componentrow.label].value,\r\n                                                label: selectedMaster[masterIndex][componentrow.label].label,\r\n                                                pkey: componentrow.valuemember,\r\n                                                nquerybuildertablecode: componentrow.nquerybuildertablecode,\r\n                                                source: componentrow.source,\r\n                                                [componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                                selectedMaster[masterIndex][componentrow.label].item? selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember] :\r\n                                                    selectedMaster[masterIndex][componentrow.label][componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                                    :\r\n                                                    selectedMaster[masterIndex][componentrow.label].item.jsondata[componentrow.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : componentrow.valuemember]\r\n                                            } : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ? selectedMaster[masterIndex][componentrow.label].label : \"\"\r\n\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                            //inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        else {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                formatDate(selectedMaster[masterIndex][componentrow.label] || new Date(), false) :\r\n                                                selectedMaster[masterIndex][componentrow.label] ? formatDate(selectedMaster[masterIndex][componentrow.label], false)\r\n                                                    : \"\";\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label];\r\n                                            //convertDateTimetoString(selectedRecord[componentrow.label], userInfo);\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`] = selectedMaster[masterIndex][`tz${componentrow.label}`] ?\r\n                                                { value: selectedMaster[masterIndex][`tz${componentrow.label}`].value, label: selectedMaster[masterIndex][`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${componentrow.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label] = selectedMaster[masterIndex][componentrow.label] ?\r\n                                            selectedMaster[masterIndex][componentrow.label] : \"\"\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][componentrow.label] = inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n                                        // inputData[\"dynamicmaster\"][\"jsondata\"][componentrow.label]\r\n\r\n                                    }\r\n                                    return inputData[\"dynamicmaster\"];\r\n                                })\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        {\r\n                                            value: selectedMaster[masterIndex][component.label].value,\r\n                                            label: selectedMaster[masterIndex][component.label].label,\r\n                                            pkey: component.valuemember,\r\n                                            nquerybuildertablecode: component.nquerybuildertablecode,\r\n                                            source: component.source,\r\n                                            [component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: this.props.Login.masterOperation[masterIndex] === 'update' ?\r\n                                            selectedMaster[masterIndex][component.label].item ?  selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]: selectedMaster[masterIndex][component.label][component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                                :\r\n                                                selectedMaster[masterIndex][component.label].item.jsondata[component.table.item.component === 'Dynamic' ? 'ndynamicmastercode' : component.valuemember]\r\n                                        } : -1\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label].label;\r\n                                    //selectedRecord[component.label] ? selectedRecord[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = formatDate(selectedMaster[masterIndex][component.label], false);\r\n                                        // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                        // selectedRecord[component.label] : new Date(), userInfo);\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo);\r\n\r\n                                    } else {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            //convertDateTimetoString(selectedRecord[component.label] ?                                      \r\n                                            //    selectedRecord[component.label] : new Date(), userInfo) :\r\n                                            formatDate(selectedMaster[masterIndex][component.label] || new Date(), false) :\r\n                                            selectedMaster[masterIndex][component.label] ?\r\n                                                // convertDateTimetoString(selectedRecord[component.label] ?\r\n                                                //   selectedRecord[component.label] : new Date(), userInfo) : \"\";\r\n                                                formatDate(selectedMaster[masterIndex][component.label], false) : \"\";\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                        //convertDateTimetoString(selectedRecord[component.label], userInfo)\r\n\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`] = selectedMaster[masterIndex][`tz${component.label}`] ?\r\n                                            { value: selectedMaster[masterIndex][`tz${component.label}`].value, label: selectedMaster[masterIndex][`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        inputData[\"dynamicmaster\"][\"jsonuidata\"][`tz${component.label}`] = inputData[\"dynamicmaster\"][\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    inputData[\"dynamicmaster\"][\"jsondata\"][component.label] = selectedMaster[masterIndex][component.label] ?\r\n                                        selectedMaster[masterIndex][component.label] : \"\"\r\n\r\n                                    inputData[\"dynamicmaster\"][\"jsonuidata\"][component.label] = inputData[\"dynamicmaster\"][\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return inputData[\"dynamicmaster\"];\r\n                        }\r\n                        )\r\n                        return inputData[\"dynamicmaster\"];\r\n                    })\r\n                    return inputData[\"dynamicmaster\"];\r\n                })\r\n\r\n\r\n            inputData[\"dynamicmaster\"][\"jsonstring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsondata\"]);\r\n            inputData[\"dynamicmaster\"][\"jsonuistring\"] = JSON.stringify(inputData[\"dynamicmaster\"][\"jsonuidata\"]);\r\n            inputData[\"masterdatelist\"] = dateList;\r\n\r\n\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === formCode.PATIENTMASTER) {\r\n            inputData[\"noneedfilter\"] = 1\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2\r\n            }\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        else if (selectedControl[masterIndex].table.item.component === 'Type3Component'\r\n            && selectedControl[masterIndex].table.item.nformcode === 43) {\r\n            inputData[\"noneedfilter\"] = 2; //will disl=play all db records\r\n            if (selectedControl[masterIndex].inputtype === 'backendsearchfilter' || selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                inputData[\"noneedfilter\"] = 2; //will display will added record\r\n            }\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (fieldName === \"semail\") {\r\n                    isEmailCheck = this.state.selectedMaster[masterIndex][fieldName] && this.state.selectedMaster[masterIndex][fieldName] !== \"\" && this.state.selectedMaster[masterIndex][fieldName] !== \"null\" ? validateEmail(this.state.selectedMaster[masterIndex][fieldName]) : true;\r\n                }\r\n                if (item.isJsonField === true) {\r\n                    let fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    if (item.controlType === \"datepicker\") {\r\n                        fieldData = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n\r\n                    }\r\n                    else if (item.controlType === \"selectbox\") {\r\n                        fieldData = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        fieldName = item.tableDataField;\r\n                    }\r\n                    inputData[methodUrl][item.jsonObjectName] = {\r\n                        ...inputData[methodUrl][item.jsonObjectName],\r\n                        [fieldName]: fieldData\r\n                    }\r\n                    return inputData[methodUrl];\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.tableDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n            inputData[methodUrl][\"nproductcode\"] = -1;\r\n            //inputData[methodUrl][\"ndiagnosticcasecode\"] = -1;\r\n            //inputData[methodUrl][\"sexternalorderid\"] = 1;\r\n            inputData[methodUrl][\"nordertypecode\"] = 1;\r\n        }\r\n        else {\r\n\r\n            this.props.Login.masterextractedColumnList[masterIndex].map(item => {\r\n                let fieldName = item.dataField;\r\n                if (item.isJsonField === true) {\r\n                    return inputData[methodUrl][item.jsonObjectName] = { ...inputData[methodUrl][item.jsonObjectName], [fieldName]: this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\" }\r\n                }\r\n                else {\r\n                    if (item.controlType === \"selectbox\") {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].label ? this.state.selectedMaster[masterIndex][fieldName].label : \"\" : -1;\r\n                        inputData[methodUrl][item.foreignDataField] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName].value ? this.state.selectedMaster[masterIndex][fieldName].value : \"\" : -1;\r\n                        return inputData;\r\n                    }\r\n                    else if (item.controlType === \"datepicker\") {\r\n                        inputData[methodUrl][item.dateField] = formatInputDate(this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\", false);\r\n                    }\r\n                    else if (item.controlType === \"checkbox\") {\r\n                        inputData[methodUrl][item.controlName] = this.state.selectedMaster[masterIndex][item.controlName] ? this.state.selectedMaster[masterIndex][item.controlName] : transactionStatus.NO;\r\n                    }\r\n                    else {\r\n                        inputData[methodUrl][fieldName] = this.state.selectedMaster[masterIndex][fieldName] ? this.state.selectedMaster[masterIndex][fieldName] : \"\";\r\n                    }\r\n                    // inputData[methodUrl][selectedRecordPrimarykey] = this.props.Login.selectedId;\r\n                    return inputData;\r\n                }\r\n            })\r\n        }\r\n        // }\r\n        const inputParam = {\r\n            withoutCombocomponent: this.props.Login.loadSubSample ? this.state.SubSamplewithoutCombocomponent\r\n                : this.props.Login.withoutCombocomponent,\r\n            comboComponents: this.props.Login.loadSubSample ? this.state.SubSamplecomboComponents\r\n                : this.props.Login.comboComponents,\r\n            selectedRecord: this.props.Login.loadSubSample ?\r\n                this.state.selectComponent\r\n                : this.state.selectedRecord,\r\n            selectedRecordName: this.props.Login.loadSubSample ?\r\n                'selectComponent'\r\n                : 'selectedRecord',\r\n            loadSubSample: this.props.Login.loadSubSample,\r\n            selectedControl: this.props.Login.selectedControl,\r\n            comboData: this.props.Login.loadSubSample ?\r\n                this.props.Login.SubSamplecomboData : this.props.Login.comboData,\r\n            comboName: this.props.Login.loadSubSample ?\r\n                'SubSamplecomboData' : 'comboData',\r\n            classUrl: selectedControl[masterIndex].table.item.classUrl,\r\n            methodUrl: selectedControl[masterIndex].table.item.methodUrl,\r\n            // displayName: this.props.Login.selectedControl.table.item.sdisplayname,\r\n            inputData: inputData,\r\n            operation: this.props.Login.masterOperation[masterIndex],\r\n            saveType, formRef,\r\n            screenName: this.props.Login.loadSubSample ? \"IDS_SUBSAMPLE\" :\r\n                this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename,\r\n            masterIndex,\r\n            selectedMaster: this.state.selectedMaster,\r\n            mastercomboComponents: this.props.Login.mastercomboComponents,\r\n            masterwithoutCombocomponent: this.props.Login.masterwithoutCombocomponent,\r\n            masterComboColumnFiled: this.props.Login.masterComboColumnFiled,\r\n            masterextractedColumnList: this.props.Login.masterextractedColumnList,\r\n            masterdataList: this.props.Login.masterdataList,\r\n            masterDesign: this.props.Login.masterDesign,\r\n            masterfieldList: this.props.Login.masterfieldList,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nportalrequired: this.props.Login.masterData.RealSampleTypeValue.nportalrequired,\r\n            nneedsubsample: this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample === true ? transactionStatus.YES : transactionStatus.NO,\r\n            masterEditObject: this.props.Login.masterEditObject,\r\n            masterOperation: this.props.Login.masterOperation\r\n        }\r\n\r\n        if (isEmailCheck) {\r\n            this.props.addMasterRecord(inputParam, this.props.Login.masterData)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onClickView = (selectedControl) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        if (selectedRecord[selectedControl.label] !== undefined && selectedRecord[selectedControl.label] !== '') {\r\n            this.props.viewExternalportalDetail(selectedControl, selectedRecord[selectedControl.label], this.props.Login.userInfo)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + \" \" + selectedControl.label);\r\n        }\r\n\r\n    }\r\n\r\n    addMasterRecord = (control) => {\r\n        let masterIndex = this.props.Login.masterIndex\r\n        if (masterIndex !== undefined) {\r\n            masterIndex = masterIndex + 1;\r\n        } else {\r\n            masterIndex = 0\r\n        }\r\n        let selectedControl = this.props.Login.selectedControl || []\r\n        let selectedMaster = this.state.selectedMaster || []\r\n        selectedMaster[masterIndex] = {}\r\n        selectedControl[masterIndex] = control\r\n\r\n        let fieldList = this.props.Login.masterfieldList || []\r\n        fieldList[masterIndex] = []\r\n\r\n        let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n        masterComboColumnFiled[masterIndex] = []\r\n\r\n        let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n        extractedColumnList[masterIndex] = []\r\n\r\n        let masterdataList = this.props.Login.masterdataList || []\r\n        let masterDesign = this.props.Login.masterDesign || []\r\n        let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n        let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n        let masterOperation = this.props.Login.masterOperation || []\r\n\r\n        masterdataList[masterIndex] = []\r\n        masterDesign[masterIndex] = []\r\n        masterwithoutCombocomponent[masterIndex] = []\r\n        mastercomboComponents[masterIndex] = []\r\n        masterOperation[masterIndex] = 'create'\r\n\r\n        if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n            if (control.table.item.component === 'Type2Component') {\r\n                fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n            } else {\r\n                fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n            }\r\n\r\n\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo)\r\n        }\r\n        else if (control.table.item.component === 'Type3Component') {\r\n            fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n            extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n            masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n            const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterprimaryKeyField: primaryKeyField,\r\n                masterComboColumnFiled: masterComboColumnFiled,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterOperation,\r\n                selectedMaster,\r\n                screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n            }\r\n\r\n            this.props.getAddMasterCombo(inputParam);\r\n\r\n        }\r\n        else if (control.table.item.component === 'Dynamic') {\r\n            const inputParam = {\r\n                userinfo: this.props.Login.userInfo,\r\n                selectedControl,\r\n                masterIndex,\r\n                masterdataList,\r\n                masterDesign,\r\n                masterComboColumnFiled,\r\n                masterwithoutCombocomponent,\r\n                mastercomboComponents,\r\n                masterfieldList: fieldList,\r\n                masterextractedColumnList: extractedColumnList,\r\n                masterComboColumnFiled,\r\n                masterOperation,\r\n                selectedMaster\r\n            }\r\n            this.props.getDynamicMasterTempalte(inputParam);\r\n        }\r\n\r\n        // this.props.getMasterRecord(control);\r\n    }\r\n\r\n    editMasterRecord = (control, editObject) => {\r\n        if (editObject) {\r\n            let masterIndex = this.props.Login.masterIndex\r\n            if (masterIndex !== undefined) {\r\n                masterIndex = masterIndex + 1;\r\n            } else {\r\n                masterIndex = 0\r\n            }\r\n            let selectedControl = this.props.Login.selectedControl || []\r\n            let selectedMaster = this.state.selectedMaster || []\r\n            selectedMaster[masterIndex] = {}\r\n            selectedControl[masterIndex] = control\r\n\r\n            let fieldList = this.props.Login.masterfieldList || []\r\n            fieldList[masterIndex] = []\r\n\r\n            let masterComboColumnFiled = this.props.Login.masterComboColumnFiled || []\r\n            masterComboColumnFiled[masterIndex] = []\r\n\r\n            let extractedColumnList = this.props.Login.masterextractedColumnList || []\r\n            extractedColumnList[masterIndex] = []\r\n\r\n            let masterdataList = this.props.Login.masterdataList || []\r\n            let masterDesign = this.props.Login.masterDesign || []\r\n            let masterwithoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n            let mastercomboComponents = this.props.Login.mastercomboComponents || []\r\n            let masterOperation = this.props.Login.masterOperation || []\r\n            let masterEditObject = this.props.Login.masterEditObject || []\r\n\r\n            masterdataList[masterIndex] = []\r\n            masterDesign[masterIndex] = []\r\n            masterwithoutCombocomponent[masterIndex] = []\r\n            mastercomboComponents[masterIndex] = []\r\n            masterOperation[masterIndex] = 'update'\r\n            masterEditObject[masterIndex] = editObject\r\n\r\n            if (control.table.item.component === 'Type2Component' || control.table.item.component === 'Type1Component') {\r\n                if (control.table.item.component === 'Type2Component') {\r\n                    fieldList[masterIndex] = getFieldSpecification().get(control.table.item.methodUrl) || [];\r\n                } else {\r\n                    fieldList[masterIndex] = getFieldSpecification1().get(control.table.item.methodUrl) || [];\r\n                }\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n\r\n                const updateInfo = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    addMaster: true,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    selectedMaster,\r\n                    masterEditObject,\r\n                    masterOperation\r\n                    // editObject\r\n                    //   screenName:selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode]\r\n\r\n                }\r\n                this.props.getEditMaster(updateInfo)\r\n            }\r\n            else if (control.table.item.component === 'Type3Component') {\r\n                fieldList[masterIndex] = getFieldSpecification3().get(control.table.item.methodUrl) || [];\r\n                extractedColumnList[masterIndex] = extractFieldHeader(Object.values(fieldList[masterIndex]));\r\n                masterComboColumnFiled[masterIndex] = extractedColumnList[masterIndex].filter(item =>\r\n                    item.ndesigncomponentcode === designComponents.COMBOBOX)\r\n                const primaryKeyField = Object.keys(fieldList[masterIndex]).length > 0 ? fieldList[masterIndex][0].dataField : \"\";\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterprimaryKeyField: primaryKeyField,\r\n                    masterComboColumnFiled: masterComboColumnFiled,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    screenName: selectedControl[masterIndex].displayname[this.props.Login.userInfo.slanguagetypecode],\r\n                    // editObject\r\n                }\r\n\r\n                this.props.getEditMaster(inputParam);\r\n\r\n            }\r\n            else if (control.table.item.component === 'Dynamic') {\r\n                const inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    selectedControl,\r\n                    masterIndex,\r\n                    masterdataList,\r\n                    masterDesign,\r\n                    masterComboColumnFiled,\r\n                    masterwithoutCombocomponent,\r\n                    mastercomboComponents,\r\n                    masterfieldList: fieldList,\r\n                    masterextractedColumnList: extractedColumnList,\r\n                    masterComboColumnFiled,\r\n                    masterEditObject,\r\n                    masterOperation,\r\n                    selectedMaster,\r\n                    //  editObject\r\n                }\r\n                this.props.getEditMaster(inputParam);\r\n            }\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTHERECORD\" }))\r\n        }\r\n\r\n    }\r\n\r\n    onComboChangeMasterDyanmic = (comboData, control, customName) => {\r\n\r\n        let comboName = customName || control.label;\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n        //if (comboData) {\r\n        comboData[\"item\"] = {\r\n            ...comboData[\"item\"], \"pkey\": control.valuemember, \"nquerybuildertablecode\": control.nquerybuildertablecode,\r\n            \"source\": control.source\r\n        };\r\n        selectedMaster[masterIndex][comboName] = comboData;\r\n\r\n        // console.log(\"selected:\", selectedMaster, comboData, control, customName);\r\n        if (control.child && control.child.length > 0) {\r\n            const childComboList = getSameRecordFromTwoArrays(this.props.Login.mastercomboComponents[masterIndex], control.child, \"label\")\r\n            let childColumnList = {};\r\n            childComboList.map(columnList => {\r\n                const val = this.comboChild(this.props.Login.mastercomboComponents[masterIndex], columnList, childColumnList, false);\r\n                childColumnList = val.childColumnList\r\n            })\r\n\r\n            const parentList = getSameRecordFromTwoArrays(this.props.Login.masterwithoutCombocomponent[masterIndex], control.child, \"label\")\r\n\r\n            if (comboData) {\r\n                const inputParem = {\r\n                    child: control.child,\r\n                    source: control.source,\r\n                    primarykeyField: control.valuemember,\r\n                    value: comboData.value,\r\n                    item: comboData.item\r\n                }\r\n                this.props.getChildValuesForAddMaster(inputParem,\r\n                    this.props.Login.userInfo, selectedMaster, this.props.Login.masterdataList,\r\n                    childComboList, childColumnList,\r\n                    this.props.Login.masterwithoutCombocomponent,\r\n                    [...childComboList, ...parentList], masterIndex)\r\n            } else {\r\n                let comboData = this.props.Login.masterdataList\r\n                const withoutCombocomponent = this.props.Login.masterwithoutCombocomponent || []\r\n                const inputParam = { control, comboComponents: this.props.Login.mastercomboComponents[masterIndex], withoutCombocomponent: withoutCombocomponent[masterIndex], selectedMaster: selectedMaster[masterIndex], comboData: comboData[masterIndex] }\r\n                const childParam = childComboClear(inputParam)\r\n                selectedMaster[masterIndex] = childParam.selectedRecord\r\n                comboData[masterIndex] = childParam.comboData\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedMaster, mastedataList: comboData }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedMaster }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChangeMasterDynamic = (event, radiotext) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (event.target.type === 'toggle') {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else if (event.target.type === 'numeric') {\r\n            if (/\\D/.test(event.target.value))\r\n                selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        } else if (event.target.type === 'checkbox') {\r\n            const value = selectedMaster[masterIndex][event.target.name];\r\n            if (value !== '' && value !== undefined) {\r\n                if (value.includes(radiotext)) {\r\n                    const index = value.indexOf(radiotext);\r\n                    if (index !== -1) {\r\n                        if (index === 0) {\r\n                            const indexcomma = value.indexOf(\",\")\r\n                            if (indexcomma !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(indexcomma + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = \"\"\r\n                            }\r\n                        } else {\r\n                            if (value.slice(index).indexOf(\",\") !== -1) {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index) + value.slice(index + value.slice(index).indexOf(\",\") + 1)\r\n                            } else {\r\n                                selectedMaster[masterIndex][event.target.name] = value.slice(0, index - 1)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    selectedMaster[masterIndex][event.target.name] = value + ',' + radiotext;\r\n                }\r\n\r\n            } else {\r\n                selectedMaster[masterIndex][event.target.name] = radiotext;\r\n            }\r\n        } else if (event.target.type === 'radio') {\r\n            selectedMaster[masterIndex][event.target.name] = radiotext\r\n        } else {\r\n            selectedMaster[masterIndex][event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n\r\n    handleDateChangeMasterDynamic = (dateValue, dateName) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][dateName] = dateValue;\r\n\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericInputChangeMasterDynamic = (value, name) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        selectedMaster[masterIndex][name] = value;\r\n        this.setState({ selectedMaster });\r\n    }\r\n\r\n    onNumericBlurMasterDynamic = (value, control) => {\r\n        let selectedMaster = this.state.selectedMaster || [];\r\n        const masterIndex = this.props.Login.masterIndex\r\n        selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n        if (selectedMaster[masterIndex][control.label]) {\r\n            if (control.max) {\r\n                if (!(selectedMaster[masterIndex][control.label] < parseFloat(control.max))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.max) : parseInt(control.max)\r\n                }\r\n            }\r\n            if (control.min) {\r\n                if (!(selectedMaster[masterIndex][control.label] > parseFloat(control.min))) {\r\n                    selectedMaster[masterIndex][control.label] = control.precision ? parseFloat(control.min) : parseInt(control.min)\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        this.setState({ selectedMaster });\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getChildValues,\r\n    getPreviewTemplate, getNewRegSpecification,\r\n    AddComponents, updateStore, EditComponent, getTest,\r\n    addsubSample, editSubSample, insertRegistration,\r\n    updateRegistration, addSubSampleSaveContinue, callService,\r\n    componentTest, getDynamicFilter, getDynamicFilterExecuteData,\r\n    insertRegistrationScheduler, testPackageTest, addMasterRecord,\r\n    getAddMasterCombo, getDynamicMasterTempalte,\r\n    getChildComboMaster, getChildValuesForAddMaster, viewExternalportalDetail,getEditMaster\r\n}\r\n)(injectIntl(PreRegisterSlideOutModal));"]},"metadata":{},"sourceType":"module"}