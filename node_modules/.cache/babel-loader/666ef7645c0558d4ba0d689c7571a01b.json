{"ast":null,"code":"import rsapi from \"../rsapi\";\nimport { toast } from \"react-toastify\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport Axios from \"axios\";\nimport { intl } from '../components/App';\nimport { transactionStatus } from \"../components/Enumeration\";\nimport { sortData } from \"../components/CommonScript\";\nimport { initRequest } from './LoginAction'; //add userroletemplate\n\nexport function addScreenModel(operation, masterData, userInfo, ncontrolCode, selectedInput) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let nregtypecode = masterData.realRegTypeValue ? masterData.realRegTypeValue.value : -1;\n    let nregsubtypecode = masterData.realRegSubTypeValue ? masterData.realRegSubTypeValue.value : -1;\n    let napprovalsubtypecode = masterData.realApprovalSubTypeValue.value;\n    rsapi.post(\"/userroletemplate/getUserRoleforTree/\", {\n      userinfo: userInfo,\n      nregtypecode: nregtypecode,\n      nregsubtypecode: nregsubtypecode,\n      napprovalsubtypecode: napprovalsubtypecode\n    }).then(response => {\n      // const  TaguserRoleData  = constructOptionList(response.data ||[], \"nuserrolecode\",\n      // \"suserrolename\" , undefined, undefined, undefined);\n      // const  TagListuserRoleData  = TaguserRoleData.get(\"OptionList\")\n      const userRoleActualData = response.data.slice();\n      selectedInput[\"sversiondescription\"] = \"\"; // masterData[\"selectedInput\"] = selectedInput;\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          userRoleData: response.data,\n          userRoleActualData,\n          openModal: true,\n          userRoleTreeData: [{\n            input: \"\"\n          }],\n          operation: operation,\n          ncontrolCode,\n          masterData,\n          selectedInput,\n          selectedRecord: {},\n          totalLevel: 1,\n          id: 0,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function fetchRecordById(primaryKeyName, primaryKeyValue, masterData, operation, selectedRecord, selectedInput, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (masterData.selectedURTVersion.ntransactionstatus === transactionStatus.APPROVED || masterData.selectedURTVersion.ntransactionstatus === transactionStatus.RETIRED) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTDRAFTRECORDTOEDIT\"\n      }));\n    } else {\n      const userRole = rsapi.post(\"userroletemplate/getUserRoleforTree\", {\n        \"nsitecode\": userInfo.nmastersitecode,\n        \"userinfo\": userInfo,\n        \"nregtypecode\": masterData.realRegTypeValue ? masterData.realRegTypeValue.value : -1,\n        \"nregsubtypecode\": masterData.realRegSubTypeValue ? masterData.realRegSubTypeValue.value : -1,\n        \"napprovalsubtypecode\": masterData.realApprovalSubTypeValue.value\n      });\n      let urlArray = [];\n\n      if (operation === \"update\") {\n        const component = rsapi.post(\"userroletemplate/getTreetemplate\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        });\n        urlArray = [userRole, component];\n      } else {\n        urlArray = [userRole];\n      } // dispatch(initRequest(true));\n\n\n      Axios.all(urlArray).then(response => {\n        selectedInput[\"sversiondescription\"] = response[1].data.levelsuserroletemplate[0][\"sversiondescription\"]; // masterData[\"selectedInput\"] = selectedInput;\n\n        selectedRecord[\"napprovalconfigcode\"] = response[1].data.levelsuserroletemplate[0][\"napprovalconfigcode\"];\n        let userRoleActualData = response[0].data;\n        let listUserRoledata = response[0].data.slice();\n        response[1].data.levelsuserroletemplate.map((item, i) => selectedRecord[i] = item[\"nuserrolecode\"].toString());\n\n        for (let i in userRoleActualData) {\n          if (selectedRecord[i] !== undefined) {\n            let index = listUserRoledata.findIndex(data => data.nuserrolecode === parseInt(selectedRecord[i]));\n\n            if (index > -1) {\n              listUserRoledata.splice(index, 1);\n            }\n          }\n        }\n\n        const id = response[1].data.levelsuserroletemplate.length - 1;\n\n        if (response[1].data.levelsuserroletemplate[0]['ntransactionstatus'] === transactionStatus.DRAFT) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              userRoleTreeData: response[1].data.levelsuserroletemplate,\n              userRoleData: listUserRoledata,\n              userRoleActualData,\n              openModal: true,\n              operation: operation,\n              selectedRecord,\n              selectedInput,\n              ncontrolCode,\n              id,\n              totalLevel: response[1].data.levelsuserroletemplate.length,\n              masterData,\n              loading: false\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SELECTDRAFTRECORDTOEDIT\"\n          }));\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function getTreetemplate(URTvalue, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"userroletemplate/getTreetemplate\", {\n      ntreeversiontempcode: URTvalue.ntreeversiontempcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData[\"levelsuserroletemplate\"] = response.data[\"levelsuserroletemplate\"];\n      masterData[\"selectedURTVersion\"] = URTvalue;\n      const selectedRecord = {};\n      selectedRecord[\"napprovalconfigcode\"] = response.data[\"levelsuserroletemplate\"] ? response.data[\"levelsuserroletemplate\"].length > 0 ? response.data[\"levelsuserroletemplate\"][0][\"napprovalconfigcode\"] : -1 : -1;\n      selectedRecord[\"ntransactionstatus\"] = response.data[\"levelsuserroletemplate\"] ? response.data[\"levelsuserroletemplate\"].length > 0 ? response.data[\"levelsuserroletemplate\"][0][\"ntransactionstatus\"] : this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ntransactionstatus\"] : [] : [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getURTFilterRegType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"userroletemplate/getApprovalRegSubType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getURTFilterRegSubType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"userroletemplate/getApprovalRegSubType\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getURTFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"userroletemplate/getFilterSubmit\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      let listuserroletemplate = sortData(response.data.listuserroletemplate);\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      masterData = { ...masterData,\n        listuserroletemplate\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/UserroleTemplateAction.js"],"names":["rsapi","toast","DEFAULT_RETURN","Axios","intl","transactionStatus","sortData","initRequest","addScreenModel","operation","masterData","userInfo","ncontrolCode","selectedInput","dispatch","nregtypecode","realRegTypeValue","value","nregsubtypecode","realRegSubTypeValue","napprovalsubtypecode","realApprovalSubTypeValue","post","userinfo","then","response","userRoleActualData","data","slice","type","payload","userRoleData","openModal","userRoleTreeData","input","selectedRecord","totalLevel","id","loading","catch","error","status","formatMessage","message","warn","fetchRecordById","primaryKeyName","primaryKeyValue","selectedURTVersion","ntransactionstatus","APPROVED","RETIRED","userRole","nmastersitecode","urlArray","component","all","levelsuserroletemplate","listUserRoledata","map","item","i","toString","undefined","index","findIndex","nuserrolecode","parseInt","splice","length","DRAFT","getTreetemplate","URTvalue","ntreeversiontempcode","props","Login","getURTFilterRegType","inputParam","inputData","getURTFilterRegSubType","getURTFilterSubmit","listuserroletemplate","searchRef","current"],"mappings":"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","sourcesContent":["import rsapi from \"../rsapi\";\r\nimport {\r\n    toast\r\n} from \"react-toastify\";\r\nimport {\r\n    DEFAULT_RETURN\r\n} from \"./LoginTypes\";\r\nimport Axios from \"axios\";\r\nimport {\r\n    intl\r\n} from '../components/App'\r\nimport {\r\n    transactionStatus\r\n} from \"../components/Enumeration\";\r\nimport { sortData } from \"../components/CommonScript\";\r\nimport { initRequest } from './LoginAction';\r\n\r\n//add userroletemplate\r\nexport function addScreenModel(operation, masterData, userInfo, ncontrolCode, selectedInput) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n       let nregtypecode= masterData.realRegTypeValue ? masterData.realRegTypeValue.value : -1\r\n       let nregsubtypecode= masterData.realRegSubTypeValue ? masterData.realRegSubTypeValue.value : -1\r\n       let napprovalsubtypecode = masterData.realApprovalSubTypeValue.value\r\n        rsapi.post(\"/userroletemplate/getUserRoleforTree/\", {userinfo: userInfo,nregtypecode:nregtypecode,nregsubtypecode:nregsubtypecode,napprovalsubtypecode:napprovalsubtypecode})\r\n            .then(response => {\r\n                // const  TaguserRoleData  = constructOptionList(response.data ||[], \"nuserrolecode\",\r\n                // \"suserrolename\" , undefined, undefined, undefined);\r\n                // const  TagListuserRoleData  = TaguserRoleData.get(\"OptionList\")\r\n\r\n\r\n                const userRoleActualData = response.data.slice();\r\n                selectedInput[\"sversiondescription\"] = \"\";\r\n                // masterData[\"selectedInput\"] = selectedInput;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        userRoleData: response.data,\r\n                        userRoleActualData,\r\n                        openModal: true,\r\n                        userRoleTreeData: [{\r\n                            input: \"\"\r\n                        }],\r\n                        operation: operation,\r\n                        ncontrolCode,\r\n                        masterData,\r\n                        selectedInput,\r\n                        selectedRecord: {},\r\n                        totalLevel: 1,\r\n                        id: 0, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function fetchRecordById(primaryKeyName, primaryKeyValue, masterData, operation, selectedRecord, selectedInput, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n        if (masterData.selectedURTVersion.ntransactionstatus === transactionStatus.APPROVED || masterData.selectedURTVersion.ntransactionstatus=== transactionStatus.RETIRED) {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTDRAFTRECORDTOEDIT\"\r\n            }));\r\n        } else {\r\n            const userRole = rsapi.post(\"userroletemplate/getUserRoleforTree\", {\r\n                \"nsitecode\": userInfo.nmastersitecode,\r\n                \"userinfo\": userInfo,\r\n                \"nregtypecode\": masterData.realRegTypeValue ? masterData.realRegTypeValue.value : -1,\r\n                \"nregsubtypecode\": masterData.realRegSubTypeValue ? masterData.realRegSubTypeValue.value : -1,\r\n                \"napprovalsubtypecode\": masterData.realApprovalSubTypeValue.value\r\n\r\n            });\r\n\r\n            let urlArray = [];\r\n            if (operation === \"update\") {\r\n                const component = rsapi.post(\"userroletemplate/getTreetemplate\", {\r\n                    [primaryKeyName]: primaryKeyValue,\r\n                    \"userinfo\": userInfo\r\n                });\r\n                urlArray = [userRole, component];\r\n            } else {\r\n                urlArray = [userRole];\r\n            }\r\n           // dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n               \r\n                      \r\n                  \r\n\r\n                    selectedInput[\"sversiondescription\"] = response[1].data.levelsuserroletemplate[0][\"sversiondescription\"];\r\n                    // masterData[\"selectedInput\"] = selectedInput;\r\n                    selectedRecord[\"napprovalconfigcode\"] = response[1].data.levelsuserroletemplate[0][\"napprovalconfigcode\"];\r\n                    let userRoleActualData = response[0].data;\r\n                    let listUserRoledata = response[0].data.slice();\r\n                    response[1].data.levelsuserroletemplate.map((item, i) =>\r\n                        selectedRecord[i] = (item[\"nuserrolecode\"]).toString(),\r\n                    )\r\n\r\n                    for (let i in userRoleActualData) {\r\n                        if (selectedRecord[i] !== undefined) {\r\n                            let index = (listUserRoledata).findIndex(data => data.nuserrolecode === parseInt(selectedRecord[i]));\r\n                            if (index > -1) {\r\n                                listUserRoledata.splice(index, 1);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const id = response[1].data.levelsuserroletemplate.length - 1\r\n\r\n                    if( response[1].data.levelsuserroletemplate[0]['ntransactionstatus']===transactionStatus.DRAFT){\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            userRoleTreeData: response[1].data.levelsuserroletemplate,\r\n                            userRoleData: listUserRoledata,\r\n                            userRoleActualData,\r\n                            openModal: true,\r\n                            operation: operation,\r\n                            selectedRecord,\r\n                            selectedInput,\r\n                            ncontrolCode,\r\n                            id,\r\n                            totalLevel: response[1].data.levelsuserroletemplate.length,\r\n                            masterData, loading: false\r\n                        }\r\n                    });\r\n                }\r\n                else{\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_SELECTDRAFTRECORDTOEDIT\"\r\n                    }));\r\n                }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({\r\n                            id: error.message\r\n                        }));\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getTreetemplate(URTvalue, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"userroletemplate/getTreetemplate\", {\r\n            ntreeversiontempcode: URTvalue.ntreeversiontempcode,\r\n            userinfo: userInfo,\r\n        })\r\n            .then(response => {\r\n                masterData[\"levelsuserroletemplate\"] = response.data[\"levelsuserroletemplate\"];\r\n                masterData[\"selectedURTVersion\"] = URTvalue;\r\n                const selectedRecord = {};\r\n                selectedRecord[\"napprovalconfigcode\"] = response.data[\"levelsuserroletemplate\"] ? response.data[\"levelsuserroletemplate\"].length > 0 ?\r\n                    response.data[\"levelsuserroletemplate\"][0][\"napprovalconfigcode\"] : -1 : -1\r\n\r\n                selectedRecord[\"ntransactionstatus\"] = response.data[\"levelsuserroletemplate\"] ? response.data[\"levelsuserroletemplate\"].length > 0 ?\r\n                    response.data[\"levelsuserroletemplate\"][0][\"ntransactionstatus\"] :\r\n                    this.props.Login.selectedRecord ? this.props.Login.selectedRecord[\"ntransactionstatus\"] : [] : []\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord, loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getURTFilterRegType(inputParam){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"userroletemplate/getApprovalRegSubType\", inputParam.inputData)\r\n        .then(response=> {\r\n            let masterData = {...inputParam.masterData,...response.data}\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData, loading: false\r\n                }\r\n            });\r\n        })\r\n        .catch(error=> {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: error.response.data\r\n                }));\r\n            }\r\n        })\r\n    }\r\n}\r\nexport function getURTFilterRegSubType(inputParam){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"userroletemplate/getApprovalRegSubType\", inputParam.inputData)\r\n        .then(response=> {\r\n            let masterData = {...inputParam.masterData,...response.data}\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData, loading: false\r\n                }\r\n            });\r\n        })\r\n        .catch(error=> {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: error.response.data\r\n                }));\r\n            }\r\n        })\r\n    }\r\n}\r\nexport function getURTFilterSubmit(inputParam){\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"userroletemplate/getFilterSubmit\", inputParam.inputData)\r\n        .then(response=> {\r\n            let masterData = {...inputParam.masterData,...response.data}\r\n            \r\n            let listuserroletemplate = sortData(response.data.listuserroletemplate);\r\n            if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                inputParam.searchRef.current.value = \"\";\r\n                masterData['searchedData'] = undefined\r\n            }\r\n            masterData ={...masterData,listuserroletemplate}\r\n          \r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData, loading: false\r\n                }\r\n            });\r\n        })\r\n        .catch(error=> {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading: false}}); \r\n            if (error.response.status === 500) {\r\n                toast.error(intl.formatMessage({\r\n                    id: error.message\r\n                }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: error.response.data\r\n                }));\r\n            }\r\n        })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}