{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nexport function openEmailHostModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\n  return dispatch => {\n    dispatch({\n      type: DEFAULT_RETURN,\n      payload: {\n        selectedRecord: {},\n        screenName: screenName,\n        operation: \"create\",\n        openModal: true,\n        ncontrolcode\n      }\n    });\n  };\n}\nexport function fetchEmailHostById(editParam) {\n  return function (dispatch) {\n    const URL1 = rsapi.post('emailhost/getActiveEmailHostById', {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    }); // const URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\n    // const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\n\n    dispatch(initRequest(true));\n    Axios.all([URL1]).then(response => {\n      let selectedRecord = {};\n      let selectedId = editParam.primaryKeyValue;\n      selectedRecord = response[0].data; //let EmailTagParameter = response[0].data[\"EmailTagParameter\"];\n      // getComboLabelValue(selectedRecord, Tag, \"nemailtagcode\", \"stagname\");\n      //     getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          operation: editParam.operation,\n          openModal: true,\n          screenName: editParam.screenName,\n          ncontrolcode: editParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/EmailHostAction.js"],"names":["rsapi","Axios","toast","DEFAULT_RETURN","initRequest","openEmailHostModal","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolcode","dispatch","type","payload","selectedRecord","openModal","fetchEmailHostById","editParam","URL1","post","primaryKeyField","primaryKeyValue","all","then","response","selectedId","data","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,KADJ,QAEO,gBAFP;AAGA,SACIC,cADJ,QAEO,cAFP;AAGA,SAASC,WAAT,QAA4B,eAA5B;AAIA,OAAO,SAASC,kBAAT,CAA4BC,UAA5B,EAAwCC,SAAxC,EAAmDC,cAAnD,EAAmEC,UAAnE,EAA+EC,QAA/E,EAAyFC,YAAzF,EAAuG;AAC1G,SAAQC,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAAEV,cAAP;AAAuBW,MAAAA,OAAO,EAAC;AAACC,QAAAA,cAAc,EAAG,EAAlB;AAAsBT,QAAAA,UAAU,EAAEA,UAAlC;AACpCC,QAAAA,SAAS,EAAE,QADyB;AACfS,QAAAA,SAAS,EAAE,IADI;AACEL,QAAAA;AADF;AAA/B,KAAD,CAAR;AAEH,GAHD;AAIH;AAED,OAAO,SAASM,kBAAT,CAA4BC,SAA5B,EAAuC;AAC1C,SAAO,UAAUN,QAAV,EAAoB;AACvB,UAAMO,IAAI,GAAGnB,KAAK,CAACoB,IAAN,CAAW,kCAAX,EAA+C;AAAE,OAACF,SAAS,CAACG,eAAX,GAA6BH,SAAS,CAACI,eAAzC;AAA0D,kBAAYJ,SAAS,CAACR;AAAhF,KAA/C,CAAb,CADuB,CAEvB;AACA;;AACAE,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAH,IAAAA,KAAK,CAACsB,GAAN,CAAU,CAACJ,IAAD,CAAV,EACKK,IADL,CACUC,QAAQ,IAAI;AACd,UAAIV,cAAc,GAAG,EAArB;AACA,UAAIW,UAAU,GAAGR,SAAS,CAACI,eAA3B;AACAP,MAAAA,cAAc,GAAGU,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAA7B,CAHc,CAKd;AACD;AACC;;AACAf,MAAAA,QAAQ,CAAC;AACLC,QAAAA,IAAI,EAAEV,cADD;AACiBW,QAAAA,OAAO,EAAE;AAC3BC,UAAAA,cAD2B;AAE3BR,UAAAA,SAAS,EAAEW,SAAS,CAACX,SAFM;AAG3BS,UAAAA,SAAS,EAAE,IAHgB;AAI3BV,UAAAA,UAAU,EAAEY,SAAS,CAACZ,UAJK;AAK3BK,UAAAA,YAAY,EAAEO,SAAS,CAACU,YALG;AAM3BC,UAAAA,OAAO,EAAE,KANkB;AAMXH,UAAAA;AANW;AAD1B,OAAD,CAAR;AAWH,KApBL,EAqBKI,KArBL,CAqBWC,KAAK,IAAI;AACZnB,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEV,cAAR;AAAwBW,QAAAA,OAAO,EAAE;AAAEe,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACN,QAAN,CAAeO,MAAf,KAA0B,GAA9B,EAAmC;AAC/B9B,QAAAA,KAAK,CAAC6B,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACD/B,QAAAA,KAAK,CAACgC,IAAN,CAAWH,KAAK,CAACN,QAAN,CAAeE,IAA1B;AACH;AACJ,KA7BL;AA8BH,GAnCD;AAoCH","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\n\r\nexport function openEmailHostModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n    return (dispatch) => {\r\n        dispatch({type: DEFAULT_RETURN, payload:{selectedRecord : {}, screenName: screenName,\r\n            operation: \"create\", openModal: true, ncontrolcode}});\r\n    }\r\n}\r\n\r\nexport function fetchEmailHostById(editParam) {\r\n    return function (dispatch) {\r\n        const URL1 = rsapi.post('emailhost/getActiveEmailHostById', { [editParam.primaryKeyField]: editParam.primaryKeyValue, \"userinfo\": editParam.userInfo })\r\n        // const URL2=rsapi.post(\"instrumentcategory/getActiveInstrumentCategoryById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n        // const URL3= rsapi.post('instrumentcategory/getInterfacetype',{\"userinfo\":editParam.userInfo})\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL1])\r\n            .then(response => {\r\n                let selectedRecord = {}\r\n                let selectedId = editParam.primaryKeyValue;\r\n                selectedRecord = response[0].data\r\n               \r\n                //let EmailTagParameter = response[0].data[\"EmailTagParameter\"];\r\n               // getComboLabelValue(selectedRecord, Tag, \"nemailtagcode\", \"stagname\");\r\n                //     getComboLabelValue(selectedRecord, Interfacetype, \"ninterfacetype\", \"sinterfacetypename\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        selectedRecord,\r\n                        operation: editParam.operation,\r\n                        openModal: true,\r\n                        screenName: editParam.screenName,\r\n                        ncontrolcode: editParam.ncontrolCode,\r\n                        loading: false, selectedId\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}