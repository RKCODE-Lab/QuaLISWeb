{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import Axios from'axios';import{toast}from'react-toastify';import{getComboLabelValue}from'../components/CommonScript';import{DEFAULT_RETURN}from'./LoginTypes';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import{transactionStatus}from'./../components/Enumeration';export function openSampleTestCommentsModal(screenName,operation,primaryKeyName,masterData,userInfo,ncontrolcode){return function(dispatch){if(operation===\"create\"||operation===\"update\"){var CommentType=rsapi.post(\"/sampletestcomments/getCommentType\",{\"userinfo\":userInfo});var CommentSubType=rsapi.post(\"/sampletestcomments/getCommentSubType\",{\"userinfo\":userInfo});var urlArray=[];if(operation===\"create\"){urlArray=[CommentType,CommentSubType];}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};selectedRecord[\"nstatus\"]=transactionStatus.ACTIVE;selectedRecord[\"ncommenttypevisible\"]=0;selectedRecord[\"ncommenttypecode\"]=0;// selectedRecord[\"ncommentsubtypecode\"] = 0;\nselectedRecord[\"ndefaultstatus\"]=4;dispatch({type:DEFAULT_RETURN,payload:{CommentType:response[0].data.CommentType||[],CommentSubType:response[1].data.CommentSubType||[],operation:operation,screenName:screenName,selectedRecord:selectedRecord,openModal:true,ncontrolcode:ncontrolcode,loading:false}});}).catch(function(error){dispatch(initRequest(false));if(error.response.status===500){toast.error(error.message);}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}};}export function fetchSampleTestCommentsById(editParam){return function(dispatch){var _rsapi$post;var URL1=rsapi.post('/sampletestcomments/getCommentType',{\"userinfo\":editParam.userInfo});var URL2=rsapi.post('/sampletestcomments/getCommentSubType',{\"userinfo\":editParam.userInfo});var URL3=rsapi.post(\"/sampletestcomments/getActiveSampleTestCommentsById\",(_rsapi$post={},_defineProperty(_rsapi$post,editParam.primaryKeyName,editParam.editRow.nsampletestcommentscode),_defineProperty(_rsapi$post,\"userinfo\",editParam.userInfo),_rsapi$post));dispatch(initRequest(true));Axios.all([URL1,URL2,URL3]).then(function(response){var selectedRecord={};var selectedId=editParam.editRow.nsampletestcommentscode;selectedRecord=response[2].data;var CommentType=response[0].data.CommentType;var CommentSubType=response[1].data.CommentSubType;getComboLabelValue(selectedRecord,CommentType,\"ncommenttypecode\",\"scommenttype\");getComboLabelValue(selectedRecord,CommentSubType,\"ncommentsubtypecode\",\"scommentsubtype\");dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,CommentType:response[0].data.CommentType||[],CommentSubType:response[1].data.CommentSubType||[],operation:editParam.operation,openModal:true,screenName:editParam.screenName,ncontrolcode:editParam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SampleTestCommentsAction.js"],"names":["rsapi","Axios","toast","getComboLabelValue","DEFAULT_RETURN","initRequest","intl","transactionStatus","openSampleTestCommentsModal","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolcode","dispatch","CommentType","post","CommentSubType","urlArray","all","then","response","selectedRecord","ACTIVE","type","payload","data","openModal","loading","catch","error","status","message","warn","formatMessage","id","fetchSampleTestCommentsById","editParam","URL1","URL2","URL3","editRow","nsampletestcommentscode","selectedId","ncontrolCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    getComboLabelValue\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from './../components/Enumeration';\r\n\r\n\r\n    export function openSampleTestCommentsModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n        return function (dispatch) {\r\n            if (operation === \"create\" || operation === \"update\" ) {\r\n                const CommentType = rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n                const CommentSubType = rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n                let urlArray = [];\r\n                if (operation === \"create\") {\r\n                   \r\n                    urlArray = [CommentType,CommentSubType];\r\n                } \r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                          let selectedRecord = {};\r\n                            selectedRecord[\"nstatus\"] = transactionStatus.ACTIVE;\r\n                            selectedRecord[\"ncommenttypevisible\"] = 0;\r\n                            selectedRecord[\"ncommenttypecode\"] = 0;\r\n                            // selectedRecord[\"ncommentsubtypecode\"] = 0;\r\n                            selectedRecord[\"ndefaultstatus\"] = 4;\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                CommentType: response[0].data.CommentType || [],\r\n                                CommentSubType: response[1].data.CommentSubType || [],\r\n                                operation,\r\n                                screenName,\r\n                                selectedRecord,\r\n                                openModal: true,\r\n                                ncontrolcode, loading: false\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(initRequest(false));\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({\r\n                                id: error.response.data\r\n                            }));\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n    \r\n    export function fetchSampleTestCommentsById (editParam){  \r\n        return function(dispatch){\r\n            const URL1= rsapi.post('/sampletestcomments/getCommentType',{\"userinfo\":editParam.userInfo});\r\n            const URL2= rsapi.post('/sampletestcomments/getCommentSubType',{\"userinfo\":editParam.userInfo});\r\n            const URL3=rsapi.post(\"/sampletestcomments/getActiveSampleTestCommentsById\", { [editParam.primaryKeyName] :editParam.editRow.nsampletestcommentscode , \"userinfo\": editParam.userInfo} )\r\n            dispatch(initRequest(true));\r\n            Axios.all([URL1,URL2,URL3])\r\n            .then(response=> { \r\n                let selectedRecord={}\r\n                let selectedId = editParam.editRow.nsampletestcommentscode;\r\n                selectedRecord=response[2].data\r\n                let CommentType = response[0].data.CommentType;\r\n                let CommentSubType = response[1].data.CommentSubType;\r\n               getComboLabelValue(selectedRecord, CommentType, \"ncommenttypecode\", \"scommenttype\");\r\n               getComboLabelValue(selectedRecord, CommentSubType, \"ncommentsubtypecode\", \"scommentsubtype\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:{\r\n                    selectedRecord ,\r\n                    CommentType: response[0].data.CommentType || [],\r\n                    CommentSubType: response[1].data.CommentSubType || [],\r\n                    operation:editParam.operation,\r\n                    openModal: true,\r\n                    screenName:editParam.screenName,\r\n                    ncontrolcode:editParam.ncontrolCode,\r\n                    loading:false,selectedId\r\n                }\r\n                }); \r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        }\r\n     }\r\n"]},"metadata":{},"sourceType":"module"}