{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\DashBoardTypes.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, fetchRecordDashBoardType, getSqlQueryDataService, getSqlQueryColumns, getAddDashboardDesign, selectCheckBoxDashBoardTypes, getDashBoardParameterMappingComboService, updateStore, validateEsignCredential, filterColumnData, checkParametersAvailableForDefaultValue, getReportViewChildDataListForDashBoard, //showDefaultValueInDataGrid,\nupdateDashBoarddesignDefaultValue } from '../../actions';\nimport Esign from '../../pages/audittrail/Esign';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ProductList, ContentPanel } from '../../pages/product/product.styled';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddDashBoardTypes from '../../pages/dashboardtypes/AddDashBoardTypes';\nimport { transactionStatus, chartType } from '../../components/Enumeration';\nimport AddSeriesColors from '../../pages/dashboardtypes/AddSeriesColors'; //import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport DashBoardDesignConfig from '../../pages/dashboardtypes/DashBoardDesignConfig';\nimport ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DashBoardTypes extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.openModal = input => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: input.operation,\n          screenName: \"IDS_DASHBOARDTYPES\",\n          openModal: true,\n          ncontrolCode: input.ncontrolCode,\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.setState({\n        isChartSeries: false\n      });\n      this.props.updateStore(updateInfo);\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteDashBoardType(\"delete\", ncontrolCode));\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"dashboardtypes\",\n        methodUrl: \"DashBoardTypes\",\n        displayName: \"IDS_DASHBOARDTYPES\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.DeleteDashBoardType = (operation, ncontrolCode) => {\n      let inputData = [];\n      let postParam = {\n        inputListName: \"DashBoardTypes\",\n        selectedObject: \"selectedDashBoardTypes\",\n        primaryKeyField: \"ndashboardtypecode\",\n        primaryKeyValue: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\n        fetchUrl: \"dashboardtypes/getAllSelectionDashBoardTypes\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      inputData[\"dashboardtype\"] = this.props.Login.masterData.selectedDashBoardTypes;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      const inputParam = {\n        methodUrl: \"DashBoardTypes\",\n        classUrl: \"dashboardtypes\",\n        inputData: inputData,\n        operation: \"delete\",\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"DashBoardTypes\",\n            operation: \"delete\",\n            methodUrl: \"DashBoardTypes\",\n            classUrl: \"dashboardtypes\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // console.log(\"Save :\", this.state.chartSeries);\n      let dataState = undefined;\n      let operation = this.props.Login.operation;\n      let inputData = [];\n      let selectedId = null;\n      let data = [];\n      let i = 0;\n      let postParam = undefined;\n\n      if (this.state.selectedRecord[\"ncharttypecode\"] && this.state.selectedRecord[\"ncharttypecode\"].value === chartType.BUBBLE && this.state.isChartSeries === false) {\n        if (this.state.selectedRecord[\"yFieldBubble\"].length !== this.state.selectedRecord[\"sizeField\"].length || this.state.selectedRecord[\"yFieldBubble\"].length !== this.state.selectedRecord[\"categoryField\"].length) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SERIESSHOULDBESAMELENGTH\"\n          }));\n          return;\n        }\n\n        if (this.state.selectedRecord[\"sizeField\"].length !== this.state.selectedRecord[\"categoryField\"].length) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SERIESSHOULDBESAMELENGTH\"\n          }));\n          return;\n        }\n      }\n\n      this.setState({\n        isChartSeries: true\n      });\n\n      if (this.state.selectedRecord[\"ncharttypecode\"] && (this.state.selectedRecord[\"ncharttypecode\"].value === chartType.PIECHART || this.state.selectedRecord[\"ncharttypecode\"].value === chartType.DONUT)) {\n        postParam = {\n          inputListName: \"DashBoardTypes\",\n          selectedObject: \"selectedDashBoardTypes\",\n          primaryKeyField: \"ndashboardtypecode\"\n        };\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"dashboardtype\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[\"dashboardtype\"][\"sdashboardtypename\"] = this.state.selectedRecord[\"sdashboardtypename\"] ? this.state.selectedRecord[\"sdashboardtypename\"] : \"\";\n        inputData[\"dashboardtype\"][\"nquerycode\"] = this.state.selectedRecord[\"nsqlquerycode\"] ? this.state.selectedRecord[\"nsqlquerycode\"].value : -1;\n        inputData[\"dashboardtype\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : -1;\n\n        if (operation !== \"create\") {\n          inputData[\"dashboardtype\"][\"ndashboardtypecode\"] = this.state.selectedRecord[\"ndashboardtypecode\"] ? this.state.selectedRecord[\"ndashboardtypecode\"] : -1;\n        }\n\n        this.props.Login.ChartProperty.forEach(prop => {\n          if (prop.schartpropertyname === \"field\") {\n            data.push({\n              \"ndashboardtypecode\": 1,\n              \"nchartpropertycode\": prop.nchartpropertycode,\n              \"nseries\": i,\n              \"schartpropvalue\": this.state.selectedRecord[\"field\"].item.Value\n            });\n          } else if (prop.schartpropertyname === \"nameField\") {\n            data.push({\n              \"ndashboardtypecode\": 1,\n              \"nchartpropertycode\": prop.nchartpropertycode,\n              \"nseries\": i,\n              \"schartpropvalue\": this.state.selectedRecord[\"nameField\"].item.Value\n            });\n          }\n        });\n        inputData[\"chartproptransaction\"] = data;\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          //methodUrl: this.props.Login.inputParam.methodUrl,\n          methodUrl: \"DashBoardTypes\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          operation: operation,\n          saveType,\n          formRef,\n          dataState,\n          selectedId,\n          postParam,\n          searchRef: this.searchRef\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n\n        this.setState({\n          isChartSeries: false\n        });\n      } else if (this.state.isChartSeries === true) {\n        postParam = {\n          inputListName: \"DashBoardTypes\",\n          selectedObject: \"selectedDashBoardTypes\",\n          primaryKeyField: \"ndashboardtypecode\"\n        };\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"dashboardtype\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        inputData[\"dashboardtype\"][\"sdashboardtypename\"] = this.state.selectedRecord[\"sdashboardtypename\"] ? this.state.selectedRecord[\"sdashboardtypename\"] : \"\";\n        inputData[\"dashboardtype\"][\"nquerycode\"] = this.state.selectedRecord[\"nsqlquerycode\"] ? this.state.selectedRecord[\"nsqlquerycode\"].value : -1;\n        inputData[\"dashboardtype\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : -1;\n\n        if (operation !== \"create\") {\n          inputData[\"dashboardtype\"][\"ndashboardtypecode\"] = this.state.selectedRecord[\"ndashboardtypecode\"] ? this.state.selectedRecord[\"ndashboardtypecode\"] : -1;\n        }\n\n        if (this.state.selectedRecord[\"ncharttypecode\"] && this.state.selectedRecord[\"ncharttypecode\"].value !== chartType.BUBBLE) {\n          i++;\n          this.props.Login.ChartProperty.forEach(prop => {\n            if (prop.schartpropertyname === \"xField\") {\n              data.push({\n                \"ndashboardtypecode\": 1,\n                \"nchartpropertycode\": prop.nchartpropertycode,\n                \"nseries\": i,\n                \"schartpropvalue\": this.state.selectedRecord[\"xColumnName\"].item.Value\n              });\n            } else if (prop.schartpropertyname === \"displayName\") {\n              data.push({\n                \"ndashboardtypecode\": 1,\n                \"nchartpropertycode\": prop.nchartpropertycode,\n                \"nseries\": i,\n                \"schartpropvalue\": this.state.selectedRecord[\"xColumnName\"].item.Value\n              });\n            }\n          });\n          this.state.selectedRecord[\"yColumnName\"] && this.state.selectedRecord[\"yColumnName\"].map(item => {\n            i++;\n            this.props.Login.ChartProperty.forEach(prop => {\n              if (prop.schartpropertyname === \"yField\") {\n                data.push({\n                  \"ndashboardtypecode\": 1,\n                  \"nchartpropertycode\": prop.nchartpropertycode,\n                  \"nseries\": i,\n                  \"schartpropvalue\": item.item.Value\n                });\n              } else if (prop.schartpropertyname === \"displayName\") {\n                data.push({\n                  \"ndashboardtypecode\": 1,\n                  \"nchartpropertycode\": prop.nchartpropertycode,\n                  \"nseries\": i,\n                  \"schartpropvalue\": item.item.Value\n                });\n              } else if (prop.schartpropertyname === \"areaFill\") {\n                data.push({\n                  \"ndashboardtypecode\": 1,\n                  \"nchartpropertycode\": prop.nchartpropertycode,\n                  \"nseries\": i,\n                  \"schartpropvalue\": item.item.Color\n                });\n              }\n            });\n            return null;\n          });\n        } else {\n          i++;\n          this.props.Login.ChartProperty.filter(field => field.schartpropertyname === \"xFieldBubble\").forEach(prop => {\n            data.push({\n              \"ndashboardtypecode\": 1,\n              \"nchartpropertycode\": prop.nchartpropertycode,\n              \"nseries\": i,\n              \"schartpropvalue\": this.state.selectedRecord[\"xFieldBubble\"].item.Value\n            });\n          });\n          this.state.selectedRecord[\"sizeField\"] && this.state.selectedRecord[\"sizeField\"].forEach((item, index) => {\n            i++;\n            this.props.Login.ChartProperty.filter(field => field.schartpropertyname !== \"xFieldBubble\").forEach(prop => {\n              if (prop.schartpropertyname === \"colorFill\") {\n                data.push({\n                  \"ndashboardtypecode\": 1,\n                  \"nchartpropertycode\": prop.nchartpropertycode,\n                  \"nseries\": i,\n                  \"schartpropvalue\": item.item.Color\n                });\n              } else {\n                data.push({\n                  \"ndashboardtypecode\": 1,\n                  \"nchartpropertycode\": prop.nchartpropertycode,\n                  \"nseries\": i,\n                  \"schartpropvalue\": this.state.selectedRecord[prop.schartpropertyname][index].item.Value\n                });\n              }\n            });\n          });\n        }\n\n        inputData[\"chartproptransaction\"] = data;\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"DashBoardTypes\",\n          //this.props.Login.inputParam.methodUrl,\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          operation: operation,\n          saveType,\n          formRef,\n          dataState,\n          selectedId,\n          postParam,\n          searchRef: this.searchRef\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: this.props.Login.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n\n        this.setState({\n          isChartSeries: false\n        });\n      }\n    };\n\n    this.getQueryColumns = () => {\n      this.props.getSqlQueryColumns(this.state.sqlQueryCode, this.state.chartTypeCode, this.props.Login.userInfo);\n    };\n\n    this.handleChange = (item, fieldName, isXField) => {\n      if (item !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        let xSeriesColumns = this.state.xSeriesColumns || {};\n        let ySeriesColumns = this.state.ySeriesColumns || {};\n\n        if (fieldName === \"ncharttypecode\") {\n          selectedRecord[fieldName] = item;\n          selectedRecord.nsqlquerycode = \"\";\n          this.props.getSqlQueryDataService(item.value, selectedRecord, this.props.Login.userInfo); //   this.setState({ chartTypeCode: item.value, selectedRecord });\n        } else if (fieldName === \"nsqlquerycode\") {\n          selectedRecord[fieldName] = item;\n          this.props.getSqlQueryColumns(item.value, selectedRecord[\"ncharttypecode\"].value, this.props.Login.userInfo, selectedRecord);\n        } else {\n          selectedRecord[fieldName] = item;\n        }\n\n        if (isXField !== \"ChartType\") {\n          let chartSeries = [...this.state.chartSeries]; // let index = 0;\n\n          let newXCols = [];\n          let newYCols = [];\n\n          if (this.props.Login.SqlColumns && this.props.Login.SqlColumns.xSeriesColumns) {\n            // console.log(\" xSeriesColumns 1 : \", this.props.Login.SqlColumns.xSeriesColumns);\n            if (selectedRecord[\"ncharttypecode\"] && selectedRecord[\"ncharttypecode\"].value !== chartType.PIECHART && selectedRecord[\"ncharttypecode\"].value !== chartType.DONUT) {\n              if (selectedRecord[\"xColumnName\"] && [selectedRecord[\"xColumnName\"]].length >= 0) {\n                newYCols = this.props.Login.SqlColumns.ySeriesColumns.filter(item => ![selectedRecord[\"xColumnName\"].value].includes(item.value));\n              } else {\n                newYCols = this.props.Login.SqlColumns.ySeriesColumns;\n              }\n\n              if (selectedRecord[\"yColumnName\"] && selectedRecord[\"yColumnName\"].length >= 0) {\n                newXCols = this.props.Login.SqlColumns.xSeriesColumns.filter(item => !selectedRecord[\"yColumnName\"].some(itemValue => itemValue.value === item.value));\n              } else {\n                newXCols = this.props.Login.SqlColumns.xSeriesColumns;\n              }\n\n              if (isXField === \"xField\") {\n                chartSeries[0].xField = item;\n              } else if (isXField === \"yField\" || isXField === \"sizeField\") {\n                chartSeries[0].yField = item;\n              }\n            } else {\n              if (selectedRecord[\"field\"] && [selectedRecord[\"field\"]].length >= 0) {\n                newYCols = this.props.Login.SqlColumns.ySeriesColumns.filter(item => ![selectedRecord[\"field\"].value].includes(item.value));\n              } else {\n                newYCols = this.props.Login.SqlColumns.ySeriesColumns;\n              }\n\n              if (selectedRecord[\"nameField\"] && [selectedRecord[\"nameField\"]].length >= 0) {\n                newXCols = this.props.Login.SqlColumns.xSeriesColumns.filter(item => ![selectedRecord[\"nameField\"].value].includes(item.value));\n              } else {\n                newXCols = this.props.Login.SqlColumns.xSeriesColumns;\n              }\n            }\n          }\n\n          this.setState({\n            selectedRecord,\n            sqlQueryCode: item.value,\n            sqlColumns: {\n              xSeriesColumns: newXCols,\n              ySeriesColumns: newYCols\n            },\n            xSeriesColumns,\n            ySeriesColumns\n          });\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.gridColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      isOpen: false,\n      controlMap: new Map(),\n      userRoleControlRights: [],\n      sqlQueryCode: 0,\n      chartTypeCode: 0,\n      chartSeries: [{\n        xField: [],\n        yField: [],\n        chartTitle: \"\"\n      }],\n      isChartSeries: false,\n      displayColorPicker: false,\n      color: {\n        r: '241',\n        g: '112',\n        b: '19',\n        a: '1'\n      },\n      pieCatagoryColumn: \"\",\n      pieValueColumn: \"\",\n      sqlColumns: [],\n      xSeriesColumns: [],\n      ySeriesColumns: []\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"ndashboardtypecode\";\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const deleteId = this.props.Login.inputParam && this.state.controlMap.has(\"Delete\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Delete\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const AddDashBoardtype = {\n      screenName: this.props.Login.screenName,\n      primaryKeyField,\n      undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId\n    };\n    const editParam = {\n      screenName: this.props.Login.screenName,\n      primaryKeyField: \"ndashboardtypecode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    }; // const deleteParam = { operation: \"delete\" };\n\n    const filterParam = {\n      inputListName: \"DashBoardTypes\",\n      selectedObject: \"selectedDashBoardTypes\",\n      primaryKeyField: \"ndashboardtypecode\",\n      // fetchUrl: \"dashboardtypes/getAllSelectionDashBoardTypes\", \n      fetchUrl: \"dashboardtypes/getDashBoardTypes\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sdashboardtypename\", \"schartname\", \"ssqlqueryname\"]\n    }; // console.log(\"Chart Property : \", this.props.ChartProperty);\n\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_DASHBOARDNAME\",\n      \"dataField\": \"sdashboardtypename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"ndesigncomponentcode\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_EXISTINGLINKTABLE\",\n      \"dataField\": \"nsqlquerycode\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DAYS\",\n      \"dataField\": \"ndays\",\n      \"width\": \"200px\"\n    }];\n    this.gridColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"ndesigncomponentcode\",\n      \"width\": \"200px\"\n    }];\n    const mandatoryFields = [];\n    mandatoryFields.push({\n      \"idsName\": \"IDS_DASHBOARDTYPENAME\",\n      \"dataField\": \"sdashboardtypename\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    });\n    mandatoryFields.push({\n      \"idsName\": \"IDS_CHARTTYPE\",\n      \"dataField\": \"ncharttypecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    });\n    mandatoryFields.push({\n      \"idsName\": \"IDS_QUERY\",\n      \"dataField\": \"nsqlquerycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    });\n    const fieldList = this.props.Login.ChartProperty || [];\n    fieldList.forEach(item => {\n      if (item.schartpropertyname === \"field\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_CATAEGORYFIELD\",\n          \"dataField\": item.schartpropertyname,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else if (item.schartpropertyname === \"nameField\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_VALUEFIELD\",\n          \"dataField\": item.schartpropertyname,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else if (item.schartpropertyname === \"yField\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_YSERIES\",\n          \"dataField\": \"yColumnName\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else if (item.schartpropertyname === \"xField\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_XSERIES\",\n          \"dataField\": \"xColumnName\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else if (item.schartpropertyname === \"xFieldBubble\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_XSERIES\",\n          \"dataField\": item.schartpropertyname,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else if (item.schartpropertyname === \"yFieldBubble\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_YSERIES\",\n          \"dataField\": item.schartpropertyname,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else if (item.schartpropertyname === \"sizeField\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_SIZEFIELD\",\n          \"dataField\": item.schartpropertyname,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      } else if (item.schartpropertyname === \"categoryField\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_CATAEGORYFIELD\",\n          \"dataField\": item.schartpropertyname,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      }\n    }); // console.log(\"props:\", this.props.Login);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster //filterColumnData ={(e)=>this.filterColumnData(e)}\n    , {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DASHBOARDTYPES\"\n      }),\n      masterData: this.props.Login.masterData || [],\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DashBoardTypes,\n      getMasterDetail: DashBoardTypes => this.props.selectCheckBoxDashBoardTypes(DashBoardTypes, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDashBoardTypes,\n      primaryKeyField: \"ndashboardtypecode\",\n      mainField: \"sdashboardtypename\",\n      firstField: \"schartname\" //secondField=\"ssqlqueryname\"\n      // isIDSField=\"Yes\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true,\n      openModal: () => this.props.fetchRecordDashBoardType(AddDashBoardtype, this.props.Login.masterData.selectedDashBoardTypes) // openModal={() => this.props.getAddDashboardDesign(this.props.Login.masterData.selectedDashBoardTypes,this.props.Login.userInfo)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.DashBoardTypes && this.props.Login.masterData.DashBoardTypes.length > 0 && this.props.Login.masterData.selectedDashBoardTypes ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.selectedDashBoardTypes.sdashboardtypename), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.selectedDashBoardTypes.ssqlqueryname), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-inline dropdown badget_menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      className: \"ActionIconColor\",\n      onClick: e => this.props.fetchRecordDashBoardType(editParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteDashboardType\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) // data-for=\"tooltip-common-wrap\"\n      ,\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 69\n      }\n    }))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(DashBoardDesignConfig, {\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData,\n      crudMaster: this.props.crudMaster,\n      errorCode: this.props.Login.errorCode,\n      masterStatus: this.props.Login.masterStatus,\n      openChildModal: this.props.Login.openChildModal,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.selectedRecord,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      validateEsignCredential: this.props.validateEsignCredential,\n      loadEsign: this.props.Login.loadEsign,\n      controlMap: this.state.controlMap,\n      showAccordian: this.state.showAccordian,\n      selectedId: this.props.Login.selectedId,\n      designComponents: this.props.Login.designComponents || [],\n      sqlQueryForParams: this.props.Login.sqlQueryForParams || [],\n      sqlQueryForExistingLinkTable: this.props.Login.sqlQueryForExistingLinkTable || [],\n      getAddDashboardDesign: this.props.getAddDashboardDesign,\n      getDashBoardParameterMappingComboService: this.props.getDashBoardParameterMappingComboService,\n      parentComponentList: this.props.Login.parentComponentList,\n      childComponentList: this.props.Login.childComponentList,\n      checkParametersAvailableForDefaultValue: this.props.checkParametersAvailableForDefaultValue,\n      getReportViewChildDataListForDashBoard: this.props.getReportViewChildDataListForDashBoard,\n      showDefaultValueInDataGrid: this.props.showDefaultValueInDataGrid,\n      updateDashBoarddesignDefaultValue: this.props.updateDashBoarddesignDefaultValue,\n      addDesignParam: this.state.addDesignParam,\n      gridData: this.state.gridData,\n      addMappingParam: this.state.addMappingParam,\n      mappingGridData: this.state.mappingGridData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 45\n      }\n    }))) : \"\")))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 29\n        }\n      }) : this.state.isChartSeries === false ? /*#__PURE__*/React.createElement(AddDashBoardTypes, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.handleChange,\n        chartType: this.props.Login.chartType || [],\n        sqlQuery: this.props.Login.sqlQuery || [] // ncharttypecode={this.props.Login.ncharttypecode || []}\n        // nsqlquerycode={this.props.Login.nsqlquerycode || []}\n        ,\n        getSqlQueryColumns: this.getQueryColumns,\n        extractedColumnList: this.extractedColumnList,\n        ChartProperty: this.props.Login.ChartProperty // SqlColumns={this.props.Login.SqlColumns || []}\n        ,\n        SqlColumns: this.state.sqlColumns || [],\n        Value: this.props.Login.Value,\n        operation: this.props.Login.operation,\n        xValue: this.props.Login.xValue,\n        yValue: this.props.Login.yValue,\n        xSeriesColumnList: this.props.Login.xSeriesColumnList || [],\n        ySeriesColumnList: this.props.Login.ySeriesColumnList || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddSeriesColors, {\n        displayColorPicker: this.state.displayColorPicker,\n        color: this.state.color // handleChange={this.handleColorChange}\n        ,\n        ySeries: this.state.chartSeries[0].yField,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        const addDesignParam = [];\n        const gridData = [];\n        this.props.Login.masterData.selectedDesignConfig && this.props.Login.masterData.selectedDesignConfig.forEach(item => {\n          addDesignParam.push({ ...item,\n            ndesigncomponentcode: {\n              label: item.sdesigncomponentname,\n              value: item.ndesigncomponentcode\n            },\n            nsqlquerycode: {\n              label: item.ssqlqueryname,\n              value: item.nsqlquerycode\n            }\n          });\n          gridData.push({ ...item,\n            ndesigncomponentcode: {\n              label: item.sdesigncomponentname,\n              value: item.ndesigncomponentcode\n            },\n            nsqlquerycode: {\n              label: item.ssqlqueryname,\n              value: item.nsqlquerycode\n            }\n          });\n        });\n        const addMappingParam = [];\n        const mappingGridData = [];\n        this.props.Login.masterData.DashBoardParameterMapping && this.props.Login.masterData.DashBoardParameterMapping.forEach(item => {\n          addMappingParam.push({ ...item\n          });\n          mappingGridData.push({ ...item\n          });\n        });\n        this.setState({\n          addDesignParam,\n          gridData,\n          addMappingParam,\n          mappingGridData,\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData // dataResult: process(this.props.Login.masterData, this.state.dataState),\n\n        });\n      } else {\n        const addDesignParam = [];\n        const gridData = [];\n        this.props.Login.masterData.selectedDesignConfig && this.props.Login.masterData.selectedDesignConfig.forEach(item => {\n          addDesignParam.push({ ...item,\n            ndesigncomponentcode: {\n              label: item.sdesigncomponentname,\n              value: item.ndesigncomponentcode\n            },\n            nsqlquerycode: {\n              label: item.ssqlqueryname,\n              value: item.nsqlquerycode\n            }\n          });\n          gridData.push({ ...item,\n            ndesigncomponentcode: {\n              label: item.sdesigncomponentname,\n              value: item.ndesigncomponentcode\n            },\n            nsqlquerycode: {\n              label: item.ssqlqueryname,\n              value: item.nsqlquerycode\n            }\n          });\n        });\n        const addMappingParam = [];\n        const mappingGridData = [];\n        this.props.Login.masterData.DashBoardParameterMapping && this.props.Login.masterData.DashBoardParameterMapping.forEach(item => {\n          addMappingParam.push({ ...item\n          });\n          mappingGridData.push({ ...item\n          });\n        });\n        this.setState({\n          addDesignParam,\n          gridData,\n          addMappingParam,\n          mappingGridData,\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          isOpen: false\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      let chartSeries = [...this.state.chartSeries];\n      chartSeries[0].xField = this.props.Login.selectedRecord.xColumnName;\n\n      if (this.props.Login.selectedRecord[\"ncharttypecode\"] && this.props.Login.selectedRecord[\"ncharttypecode\"].value === chartType.BUBBLE) {\n        chartSeries[0].yField = this.props.Login.selectedRecord.sizeField;\n      } else {\n        chartSeries[0].yField = this.props.Login.selectedRecord.yColumnName;\n      }\n\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.SqlColumns !== previousProps.Login.SqlColumns) {\n      let newXCols = [];\n      let newYCols = [];\n\n      if (this.props.Login.operation === \"update\") {\n        if (this.props.Login.selectedRecord[\"ncharttypecode\"] && (this.props.Login.selectedRecord[\"ncharttypecode\"].value === chartType.PIECHART || this.props.Login.selectedRecord[\"ncharttypecode\"].value === chartType.DONUT)) {\n          this.props.Login.selectedRecord[\"field\"] && this.props.Login.selectedRecord[\"field\"].value !== undefined ? newYCols = this.props.Login.SqlColumns.ySeriesColumns.filter(item => ![this.props.Login.selectedRecord[\"field\"].value].includes(item.value)) : newYCols = this.props.Login.SqlColumns.ySeriesColumns;\n\n          if (this.props.Login.selectedRecord[\"nameField\"] && this.props.Login.selectedRecord[\"nameField\"].value !== undefined) {\n            newXCols = this.props.Login.SqlColumns.xSeriesColumns.filter(item => ![this.props.Login.selectedRecord[\"nameField\"].value].includes(item.value));\n          } else {\n            newXCols = this.props.Login.SqlColumns.xSeriesColumns;\n          }\n        } else {\n          this.props.Login.selectedRecord[\"xColumnName\"] && this.props.Login.selectedRecord[\"xColumnName\"].value !== undefined ? newYCols = this.props.Login.SqlColumns.ySeriesColumns.filter(item => ![this.props.Login.selectedRecord[\"xColumnName\"].value].includes(item.value)) : newYCols = this.props.Login.SqlColumns.ySeriesColumns;\n\n          if (this.props.Login.selectedRecord[\"yColumnName\"] && this.props.Login.selectedRecord[\"yColumnName\"].length >= 0) {\n            newXCols = this.props.Login.SqlColumns.xSeriesColumns.filter(item => !this.props.Login.selectedRecord[\"yColumnName\"].some(itemValue => itemValue.value === item.value));\n          } else {\n            newXCols = this.props.Login.SqlColumns.xSeriesColumns;\n          }\n        }\n\n        this.setState({\n          sqlColumns: {\n            xSeriesColumns: newXCols,\n            ySeriesColumns: newYCols\n          }\n        });\n      } else {\n        this.setState({\n          sqlColumns: this.props.Login.SqlColumns\n        });\n      }\n    }\n\n    if (this.props.Login.xSeriesColumns !== previousProps.Login.xSeriesColumns) {\n      this.setState({\n        xSeriesColumns: this.props.Login.xSeriesColumns\n      });\n    }\n\n    if (this.props.Login.ySeriesColumns !== previousProps.Login.ySeriesColumns) {\n      this.setState({\n        ySeriesColumns: this.props.Login.ySeriesColumns\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchRecordDashBoardType,\n  selectCheckBoxDashBoardTypes,\n  getSqlQueryDataService,\n  getSqlQueryColumns,\n  getAddDashboardDesign,\n  getDashBoardParameterMappingComboService,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData,\n  checkParametersAvailableForDefaultValue,\n  getReportViewChildDataListForDashBoard,\n  //showDefaultValueInDataGrid, \n  updateDashBoarddesignDefaultValue\n})(injectIntl(DashBoardTypes));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/dashboardtypes/DashBoardTypes.jsx"],"names":["React","Row","Col","Card","Nav","FontAwesomeIcon","faPencilAlt","faTrashAlt","toast","connect","injectIntl","callService","crudMaster","fetchRecordDashBoardType","getSqlQueryDataService","getSqlQueryColumns","getAddDashboardDesign","selectCheckBoxDashBoardTypes","getDashBoardParameterMappingComboService","updateStore","validateEsignCredential","filterColumnData","checkParametersAvailableForDefaultValue","getReportViewChildDataListForDashBoard","updateDashBoarddesignDefaultValue","Esign","ConfirmMessage","ListMaster","DEFAULT_RETURN","ProductList","ContentPanel","showEsign","getControlMap","SlideOutModal","AddDashBoardTypes","transactionStatus","chartType","AddSeriesColors","DashBoardDesignConfig","ReactTooltip","mapStateToProps","state","Login","DashBoardTypes","Component","constructor","props","openModal","input","updateInfo","typeName","data","selectedRecord","operation","screenName","ncontrolCode","loading","closeModal","loadEsign","selectedId","setState","isChartSeries","confirmDelete","confirmMessage","confirm","intl","formatMessage","id","DeleteDashBoardType","reloadData","searchRef","current","value","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","masterData","selectedDashBoardTypes","ndashboardtypecode","fetchUrl","fecthInputObject","userinfo","userRoleControlRights","nformcode","screenData","onSaveClick","saveType","formRef","dataState","undefined","i","BUBBLE","length","warn","PIECHART","DONUT","nmastersitecode","ChartProperty","forEach","prop","schartpropertyname","push","nchartpropertycode","item","Value","map","Color","filter","field","index","getQueryColumns","sqlQueryCode","chartTypeCode","handleChange","fieldName","isXField","xSeriesColumns","ySeriesColumns","nsqlquerycode","chartSeries","newXCols","newYCols","SqlColumns","includes","some","itemValue","xField","yField","sqlColumns","onInputOnChange","event","target","type","name","checked","YES","NO","validateEsign","sreason","password","createRef","extractedColumnList","gridColumnList","skip","take","masterStatus","error","dataResult","isOpen","controlMap","Map","chartTitle","displayColorPicker","color","r","g","b","a","pieCatagoryColumn","pieValueColumn","getDerivedStateFromProps","render","addId","has","concat","get","ncontrolcode","editId","deleteId","AddDashBoardtype","editParam","filterParam","searchFieldList","mandatoryFields","fieldList","searchedData","sdashboardtypename","ssqlqueryname","float","indexOf","e","errorCode","openChildModal","showAccordian","designComponents","sqlQueryForParams","sqlQueryForExistingLinkTable","parentComponentList","childComponentList","showDefaultValueInDataGrid","addDesignParam","gridData","addMappingParam","mappingGridData","sqlQuery","xValue","yValue","xSeriesColumnList","ySeriesColumnList","componentDidUpdate","previousProps","Object","values","selectedDesignConfig","ndesigncomponentcode","label","sdesigncomponentname","DashBoardParameterMapping","xColumnName","sizeField","yColumnName"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n    callService, crudMaster, fetchRecordDashBoardType, getSqlQueryDataService,\r\n    getSqlQueryColumns, getAddDashboardDesign, selectCheckBoxDashBoardTypes, getDashBoardParameterMappingComboService,\r\n    updateStore, validateEsignCredential, filterColumnData, checkParametersAvailableForDefaultValue,\r\n    getReportViewChildDataListForDashBoard, //showDefaultValueInDataGrid,\r\n     updateDashBoarddesignDefaultValue\r\n} from '../../actions';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ProductList, ContentPanel } from '../../pages/product/product.styled';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddDashBoardTypes from '../../pages/dashboardtypes/AddDashBoardTypes'\r\nimport { transactionStatus, chartType } from '../../components/Enumeration';\r\nimport AddSeriesColors from '../../pages/dashboardtypes/AddSeriesColors';\r\n//import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport DashBoardDesignConfig from '../../pages/dashboardtypes/DashBoardDesignConfig';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\nclass DashBoardTypes extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.gridColumnList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false, controlMap: new Map(), userRoleControlRights: [],\r\n            sqlQueryCode: 0, chartTypeCode: 0, chartSeries: [{ xField: [], yField: [], chartTitle: \"\" }],\r\n            isChartSeries: false,\r\n            displayColorPicker: false, color: { r: '241', g: '112', b: '19', a: '1' },\r\n            pieCatagoryColumn: \"\", pieValueColumn: \"\",\r\n            sqlColumns: [], xSeriesColumns: [], ySeriesColumns: []\r\n        }\r\n        this.searchRef = React.createRef();\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n        \r\n    }\r\n\r\n    openModal = (input) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: input.operation,\r\n                screenName: \"IDS_DASHBOARDTYPES\",\r\n                openModal: true, ncontrolCode: input.ncontrolCode,\r\n                loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.setState({ isChartSeries: false });\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"ndashboardtypecode\";\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const deleteId = this.props.Login.inputParam && this.state.controlMap.has(\"Delete\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Delete\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n\r\n        const AddDashBoardtype = {\r\n            screenName: this.props.Login.screenName, primaryKeyField, undefined, operation: \"create\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: addId\r\n        };\r\n        const editParam = {\r\n            screenName: this.props.Login.screenName, primaryKeyField: \"ndashboardtypecode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n        // const deleteParam = { operation: \"delete\" };\r\n\r\n        const filterParam = {\r\n            inputListName: \"DashBoardTypes\", selectedObject: \"selectedDashBoardTypes\", primaryKeyField: \"ndashboardtypecode\",\r\n           // fetchUrl: \"dashboardtypes/getAllSelectionDashBoardTypes\", \r\n            fetchUrl: \"dashboardtypes/getDashBoardTypes\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sdashboardtypename\", \"schartname\", \"ssqlqueryname\"]\r\n        };\r\n        // console.log(\"Chart Property : \", this.props.ChartProperty);\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_DASHBOARDNAME\", \"dataField\": \"sdashboardtypename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"ndesigncomponentcode\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sfieldname\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_EXISTINGLINKTABLE\", \"dataField\": \"nsqlquerycode\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"200px\" }\r\n        ];\r\n        this.gridColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sfieldname\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"ndesigncomponentcode\", \"width\": \"200px\" },\r\n        ];\r\n        const mandatoryFields = [];\r\n\r\n        mandatoryFields.push({ \"idsName\": \"IDS_DASHBOARDTYPENAME\", \"dataField\": \"sdashboardtypename\"  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"})\r\n        mandatoryFields.push({ \"idsName\": \"IDS_CHARTTYPE\", \"dataField\": \"ncharttypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n        mandatoryFields.push({ \"idsName\": \"IDS_QUERY\", \"dataField\": \"nsqlquerycode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n\r\n        const fieldList = this.props.Login.ChartProperty || [];\r\n        fieldList.forEach(item => {\r\n            if (item.schartpropertyname === \"field\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_CATAEGORYFIELD\", \"dataField\": item.schartpropertyname , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n            }\r\n            else if (item.schartpropertyname === \"nameField\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_VALUEFIELD\", \"dataField\": item.schartpropertyname , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n            }\r\n            else if (item.schartpropertyname === \"yField\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_YSERIES\", \"dataField\": \"yColumnName\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n            }\r\n            else if (item.schartpropertyname === \"xField\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_XSERIES\", \"dataField\": \"xColumnName\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n            }\r\n            else if (item.schartpropertyname === \"xFieldBubble\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_XSERIES\", \"dataField\": item.schartpropertyname , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n            }\r\n            else if (item.schartpropertyname === \"yFieldBubble\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_YSERIES\", \"dataField\": item.schartpropertyname , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n            }\r\n            else if (item.schartpropertyname === \"sizeField\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_SIZEFIELD\", \"dataField\": item.schartpropertyname , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" })\r\n            }\r\n            else if (item.schartpropertyname === \"categoryField\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_CATAEGORYFIELD\", \"dataField\": item.schartpropertyname  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"})\r\n            }\r\n        });\r\n\r\n   // console.log(\"props:\", this.props.Login);\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-4\">\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster //filterColumnData ={(e)=>this.filterColumnData(e)}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_DASHBOARDTYPES\" })}\r\n                                masterData={this.props.Login.masterData || []}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DashBoardTypes}\r\n                                getMasterDetail={(DashBoardTypes) => this.props.selectCheckBoxDashBoardTypes(DashBoardTypes, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDashBoardTypes}\r\n                                primaryKeyField=\"ndashboardtypecode\"\r\n                                mainField=\"sdashboardtypename\"\r\n                                firstField=\"schartname\"\r\n                                //secondField=\"ssqlqueryname\"\r\n                                // isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                                openModal={() => this.props.fetchRecordDashBoardType(AddDashBoardtype, this.props.Login.masterData.selectedDashBoardTypes)}\r\n                            // openModal={() => this.props.getAddDashboardDesign(this.props.Login.masterData.selectedDashBoardTypes,this.props.Login.userInfo)}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            <ProductList className=\"panel-main-content\">\r\n                                {this.props.Login.masterData.DashBoardTypes && this.props.Login.masterData.DashBoardTypes.length > 0 && this.props.Login.masterData.selectedDashBoardTypes ?\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedDashBoardTypes.sdashboardtypename}</Card.Title>\r\n                                            <ContentPanel className=\"d-flex product-category\">\r\n                                                <Col md='6' >\r\n                                                {this.props.Login.masterData.selectedDashBoardTypes.ssqlqueryname}\r\n                                                </Col>\r\n                                                <Col md='6'>\r\n                                                    <div  className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                        <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                                                        <ProductList className=\"d-inline dropdown badget_menu\">\r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                data-for=\"tooltip_list_wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}>\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\"\r\n                                                                    onClick={(e) => this.props.fetchRecordDashBoardType(editParam)}\r\n                                                                />\r\n                                                            </Nav.Link>\r\n                                                            <Nav.Link name=\"deleteDashboardType\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                   // data-for=\"tooltip-common-wrap\"\r\n                                                                    onClick={() => this.confirmDelete( deleteId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            </Nav.Link>\r\n                                                            {/* <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1} \r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}>\r\n                                                                <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    // title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                    handleClickDelete={() => this.DeleteDashBoardType(\"delete\", deleteId)}\r\n                                                                />\r\n                                                            </Nav.Link> */}\r\n                                                        </ProductList>\r\n                                                    </div>\r\n                                                </Col>\r\n                                            </ContentPanel>\r\n                                        </Card.Header>\r\n\r\n                                        <Card.Body>\r\n                                            <DashBoardDesignConfig\r\n                                                operation={this.props.Login.operation}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                screenName={this.props.Login.screenName}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                masterData={this.props.Login.masterData}\r\n                                                crudMaster={this.props.crudMaster}\r\n                                                errorCode={this.props.Login.errorCode}\r\n                                                masterStatus={this.props.Login.masterStatus}\r\n                                                openChildModal={this.props.Login.openChildModal}\r\n                                                updateStore={this.props.updateStore}\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                screenData={this.props.Login.screenData}\r\n                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                loadEsign={this.props.Login.loadEsign}\r\n                                                controlMap={this.state.controlMap}\r\n                                                showAccordian={this.state.showAccordian}\r\n                                                selectedId={this.props.Login.selectedId}\r\n                                                designComponents={this.props.Login.designComponents || []}\r\n                                                sqlQueryForParams={this.props.Login.sqlQueryForParams || []}\r\n                                                sqlQueryForExistingLinkTable={this.props.Login.sqlQueryForExistingLinkTable || []}\r\n                                                getAddDashboardDesign={this.props.getAddDashboardDesign}\r\n                                                getDashBoardParameterMappingComboService={this.props.getDashBoardParameterMappingComboService}\r\n                                                parentComponentList={this.props.Login.parentComponentList}\r\n                                                childComponentList={this.props.Login.childComponentList}\r\n                                                checkParametersAvailableForDefaultValue={this.props.checkParametersAvailableForDefaultValue}\r\n                                                getReportViewChildDataListForDashBoard={this.props.getReportViewChildDataListForDashBoard}\r\n                                                showDefaultValueInDataGrid={this.props.showDefaultValueInDataGrid}\r\n                                                updateDashBoarddesignDefaultValue={this.props.updateDashBoarddesignDefaultValue}\r\n                                           \r\n                                                addDesignParam ={this.state.addDesignParam}\r\n                                                gridData={this.state.gridData}\r\n                                                addMappingParam={this.state.addMappingParam}\r\n                                                mappingGridData={this.state.mappingGridData}\r\n                                           />\r\n                                        </Card.Body>\r\n                                    </Card> : \"\"}\r\n                            </ProductList>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.state.isChartSeries === false ?\r\n                                <AddDashBoardTypes\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    handleChange={this.handleChange}\r\n                                    chartType={this.props.Login.chartType || []}\r\n                                    sqlQuery={this.props.Login.sqlQuery || []}\r\n                                    // ncharttypecode={this.props.Login.ncharttypecode || []}\r\n                                    // nsqlquerycode={this.props.Login.nsqlquerycode || []}\r\n                                    getSqlQueryColumns={this.getQueryColumns}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    ChartProperty={this.props.Login.ChartProperty}\r\n                                    // SqlColumns={this.props.Login.SqlColumns || []}\r\n                                    SqlColumns={this.state.sqlColumns || []}\r\n                                    Value={this.props.Login.Value}\r\n                                    operation={this.props.Login.operation}\r\n                                    xValue={this.props.Login.xValue}\r\n                                    yValue={this.props.Login.yValue}\r\n                                    xSeriesColumnList={this.props.Login.xSeriesColumnList || []}\r\n                                    ySeriesColumnList={this.props.Login.ySeriesColumnList || []}\r\n                                />\r\n                                :\r\n                                <AddSeriesColors\r\n                                    displayColorPicker={this.state.displayColorPicker}\r\n                                    color={this.state.color}\r\n                                    // handleChange={this.handleColorChange}\r\n                                    ySeries={this.state.chartSeries[0].yField}\r\n\r\n                                />\r\n\r\n\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", \r\n                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }), \r\n                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),                                   \r\n                                    () =>  this.DeleteDashBoardType(\"delete\", ncontrolCode));\r\n    };\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"dashboardtypes\",\r\n            methodUrl: \"DashBoardTypes\",\r\n            displayName: \"IDS_DASHBOARDTYPES\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    DeleteDashBoardType = (operation, ncontrolCode) => {\r\n        let inputData = [];\r\n\r\n        let postParam = {\r\n            inputListName: \"DashBoardTypes\",\r\n            selectedObject: \"selectedDashBoardTypes\",\r\n            primaryKeyField: \"ndashboardtypecode\",\r\n            primaryKeyValue: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n            fetchUrl: \"dashboardtypes/getAllSelectionDashBoardTypes\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo }\r\n        };\r\n        inputData[\"dashboardtype\"] = this.props.Login.masterData.selectedDashBoardTypes;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n\r\n        const inputParam = {\r\n            methodUrl: \"DashBoardTypes\",\r\n            classUrl: \"dashboardtypes\",\r\n            inputData: inputData,\r\n            operation: \"delete\", postParam, searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"DashBoardTypes\", operation: \"delete\",\r\n                    methodUrl: \"DashBoardTypes\",\r\n                    classUrl: \"dashboardtypes\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        // console.log(\"Save :\", this.state.chartSeries);\r\n\r\n\r\n        let dataState = undefined;\r\n        let operation = this.props.Login.operation;\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        let data = [];\r\n        let i = 0;\r\n        let postParam = undefined;\r\n\r\n        if (this.state.selectedRecord[\"ncharttypecode\"] && (this.state.selectedRecord[\"ncharttypecode\"].value === chartType.BUBBLE)\r\n            && this.state.isChartSeries === false) {\r\n\r\n            if ((this.state.selectedRecord[\"yFieldBubble\"].length !== this.state.selectedRecord[\"sizeField\"].length) ||\r\n                (this.state.selectedRecord[\"yFieldBubble\"].length !== this.state.selectedRecord[\"categoryField\"].length)) {\r\n\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SERIESSHOULDBESAMELENGTH\" }));\r\n                return;\r\n            }\r\n            if ((this.state.selectedRecord[\"sizeField\"].length !== this.state.selectedRecord[\"categoryField\"].length)) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SERIESSHOULDBESAMELENGTH\" }));\r\n                return;\r\n            }\r\n        }\r\n        this.setState({ isChartSeries: true });\r\n\r\n        if (this.state.selectedRecord[\"ncharttypecode\"] && (this.state.selectedRecord[\"ncharttypecode\"].value === chartType.PIECHART\r\n            || this.state.selectedRecord[\"ncharttypecode\"].value === chartType.DONUT)) {\r\n\r\n            postParam = { inputListName: \"DashBoardTypes\", selectedObject: \"selectedDashBoardTypes\", primaryKeyField: \"ndashboardtypecode\" };\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            inputData[\"dashboardtype\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            inputData[\"dashboardtype\"][\"sdashboardtypename\"] = this.state.selectedRecord[\"sdashboardtypename\"] ? this.state.selectedRecord[\"sdashboardtypename\"] : \"\";\r\n            inputData[\"dashboardtype\"][\"nquerycode\"] = this.state.selectedRecord[\"nsqlquerycode\"] ? this.state.selectedRecord[\"nsqlquerycode\"].value : -1;\r\n            inputData[\"dashboardtype\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : -1;\r\n            if (operation !== \"create\") {\r\n                inputData[\"dashboardtype\"][\"ndashboardtypecode\"] = this.state.selectedRecord[\"ndashboardtypecode\"] ? this.state.selectedRecord[\"ndashboardtypecode\"] : -1;\r\n            }\r\n\r\n            this.props.Login.ChartProperty.forEach(prop => {\r\n                if (prop.schartpropertyname === \"field\") {\r\n                    data.push({\r\n                        \"ndashboardtypecode\": 1,\r\n                        \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": this.state.selectedRecord[\"field\"].item.Value\r\n                    });\r\n                }\r\n                else if (prop.schartpropertyname === \"nameField\") {\r\n                    data.push({\r\n                        \"ndashboardtypecode\": 1,\r\n                        \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": this.state.selectedRecord[\"nameField\"].item.Value\r\n                    });\r\n                }\r\n            })\r\n\r\n            inputData[\"chartproptransaction\"] = data;\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                //methodUrl: this.props.Login.inputParam.methodUrl,\r\n                methodUrl: \"DashBoardTypes\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                operation: operation, saveType, formRef, dataState, selectedId,\r\n                postParam, searchRef: this.searchRef\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n            this.setState({ isChartSeries: false });\r\n        }\r\n        else if (this.state.isChartSeries === true) {\r\n\r\n            postParam = { inputListName: \"DashBoardTypes\", selectedObject: \"selectedDashBoardTypes\", primaryKeyField: \"ndashboardtypecode\" };\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            inputData[\"dashboardtype\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            inputData[\"dashboardtype\"][\"sdashboardtypename\"] = this.state.selectedRecord[\"sdashboardtypename\"] ? this.state.selectedRecord[\"sdashboardtypename\"] : \"\";\r\n            inputData[\"dashboardtype\"][\"nquerycode\"] = this.state.selectedRecord[\"nsqlquerycode\"] ? this.state.selectedRecord[\"nsqlquerycode\"].value : -1;\r\n            inputData[\"dashboardtype\"][\"ncharttypecode\"] = this.state.selectedRecord[\"ncharttypecode\"] ? this.state.selectedRecord[\"ncharttypecode\"].value : -1;\r\n            if (operation !== \"create\") {\r\n                inputData[\"dashboardtype\"][\"ndashboardtypecode\"] = this.state.selectedRecord[\"ndashboardtypecode\"] ? this.state.selectedRecord[\"ndashboardtypecode\"] : -1;\r\n            }\r\n            if (this.state.selectedRecord[\"ncharttypecode\"] && this.state.selectedRecord[\"ncharttypecode\"].value !== chartType.BUBBLE) {\r\n\r\n                i++;\r\n                this.props.Login.ChartProperty.forEach(prop => {\r\n\r\n                    if (prop.schartpropertyname === \"xField\") {\r\n                        data.push({\r\n                            \"ndashboardtypecode\": 1,\r\n                            \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": this.state.selectedRecord[\"xColumnName\"].item.Value\r\n                        });\r\n                    }\r\n                    else if (prop.schartpropertyname === \"displayName\") {\r\n                        data.push({\r\n                            \"ndashboardtypecode\": 1,\r\n                            \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": this.state.selectedRecord[\"xColumnName\"].item.Value\r\n                        });\r\n                    }\r\n                })\r\n\r\n                this.state.selectedRecord[\"yColumnName\"] && this.state.selectedRecord[\"yColumnName\"].map(item => {\r\n                    i++;\r\n                    this.props.Login.ChartProperty.forEach(prop => {\r\n                        if (prop.schartpropertyname === \"yField\") {\r\n                            data.push({\r\n                                \"ndashboardtypecode\": 1,\r\n                                \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": item.item.Value\r\n                            });\r\n                        }\r\n                        else if (prop.schartpropertyname === \"displayName\") {\r\n                            data.push({\r\n                                \"ndashboardtypecode\": 1,\r\n                                \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": item.item.Value\r\n                            });\r\n                        }\r\n                        else if (prop.schartpropertyname === \"areaFill\") {\r\n                            data.push({\r\n                                \"ndashboardtypecode\": 1,\r\n                                \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": item.item.Color\r\n                            });\r\n                        }\r\n                    });\r\n                    return null;\r\n                })\r\n\r\n            }\r\n            else {\r\n\r\n                i++;\r\n                this.props.Login.ChartProperty.filter((field) => field.schartpropertyname === \"xFieldBubble\").forEach(prop => {\r\n                    data.push({\r\n                        \"ndashboardtypecode\": 1,\r\n                        \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": this.state.selectedRecord[\"xFieldBubble\"].item.Value\r\n                    });\r\n                });\r\n\r\n                this.state.selectedRecord[\"sizeField\"] && this.state.selectedRecord[\"sizeField\"].forEach((item, index) => {\r\n                    i++;\r\n                    this.props.Login.ChartProperty.filter((field) => field.schartpropertyname !== \"xFieldBubble\").forEach(prop => {\r\n                        if (prop.schartpropertyname === \"colorFill\") {\r\n                            data.push({\r\n                                \"ndashboardtypecode\": 1,\r\n                                \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": item.item.Color\r\n                            });\r\n                        }\r\n                        else {\r\n                            data.push({\r\n                                \"ndashboardtypecode\": 1,\r\n                                \"nchartpropertycode\": prop.nchartpropertycode, \"nseries\": i, \"schartpropvalue\": this.state.selectedRecord[prop.schartpropertyname][index].item.Value\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            inputData[\"chartproptransaction\"] = data;\r\n\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"DashBoardTypes\",//this.props.Login.inputParam.methodUrl,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData,\r\n                operation: operation, saveType, formRef, dataState, selectedId,\r\n                postParam, searchRef: this.searchRef\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n            this.setState({ isChartSeries: false });\r\n        }\r\n    }\r\n\r\n    getQueryColumns = () => {\r\n        this.props.getSqlQueryColumns(this.state.sqlQueryCode, this.state.chartTypeCode, this.props.Login.userInfo);\r\n    }\r\n\r\n    handleChange = (item, fieldName, isXField) => {\r\n\r\n        if (item !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};          \r\n            let xSeriesColumns = this.state.xSeriesColumns || {};\r\n            let ySeriesColumns = this.state.ySeriesColumns || {};\r\n\r\n            if (fieldName === \"ncharttypecode\") {\r\n                selectedRecord[fieldName] = item;\r\n                selectedRecord.nsqlquerycode = \"\";\r\n                this.props.getSqlQueryDataService(item.value, selectedRecord, this.props.Login.userInfo);\r\n             //   this.setState({ chartTypeCode: item.value, selectedRecord });\r\n            }\r\n            else if (fieldName === \"nsqlquerycode\") {\r\n                selectedRecord[fieldName] = item;\r\n                this.props.getSqlQueryColumns(item.value, selectedRecord[\"ncharttypecode\"].value, this.props.Login.userInfo, selectedRecord);\r\n\r\n            }\r\n            else {\r\n                selectedRecord[fieldName] = item;\r\n            }\r\n            if (isXField !== \"ChartType\") {\r\n                \r\n                let chartSeries = [...this.state.chartSeries];\r\n                // let index = 0;\r\n                let newXCols = [];\r\n                let newYCols = [];\r\n\r\n                if (this.props.Login.SqlColumns && this.props.Login.SqlColumns.xSeriesColumns) {\r\n                   // console.log(\" xSeriesColumns 1 : \", this.props.Login.SqlColumns.xSeriesColumns);\r\n\r\n                    if (selectedRecord[\"ncharttypecode\"] && (selectedRecord[\"ncharttypecode\"].value !== chartType.PIECHART\r\n                        && selectedRecord[\"ncharttypecode\"].value !== chartType.DONUT)) {\r\n\r\n                        if (selectedRecord[\"xColumnName\"] && [selectedRecord[\"xColumnName\"]].length >= 0) {\r\n\r\n                            newYCols = this.props.Login.SqlColumns.ySeriesColumns.filter(item => ![selectedRecord[\"xColumnName\"].value].includes(item.value))\r\n                        }\r\n                        else {\r\n                            newYCols = this.props.Login.SqlColumns.ySeriesColumns\r\n                        }\r\n\r\n                        if (selectedRecord[\"yColumnName\"] && selectedRecord[\"yColumnName\"].length >= 0) {\r\n\r\n                            newXCols = this.props.Login.SqlColumns.xSeriesColumns.filter(item => !selectedRecord[\"yColumnName\"].some(itemValue => itemValue.value === item.value))\r\n                        }\r\n                        else {\r\n                            newXCols = this.props.Login.SqlColumns.xSeriesColumns\r\n                        }\r\n                        if (isXField === \"xField\") {\r\n                            chartSeries[0].xField = item;\r\n                        }\r\n                        else if (isXField === \"yField\" || isXField === \"sizeField\") {\r\n                            chartSeries[0].yField = item;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (selectedRecord[\"field\"] && [selectedRecord[\"field\"]].length >= 0) {\r\n\r\n                            newYCols = this.props.Login.SqlColumns.ySeriesColumns.filter(item => ![selectedRecord[\"field\"].value].includes(item.value))\r\n                        }\r\n                        else {\r\n                            newYCols = this.props.Login.SqlColumns.ySeriesColumns\r\n                        }\r\n\r\n                        if (selectedRecord[\"nameField\"] && [selectedRecord[\"nameField\"]].length >= 0) {\r\n\r\n                            newXCols = this.props.Login.SqlColumns.xSeriesColumns.filter(item => ![selectedRecord[\"nameField\"].value].includes(item.value))\r\n                        }\r\n                        else {\r\n                            newXCols = this.props.Login.SqlColumns.xSeriesColumns\r\n                        }\r\n\r\n                    }\r\n                }\r\n\r\n                this.setState({\r\n                    selectedRecord, sqlQueryCode: item.value,\r\n                    sqlColumns: { xSeriesColumns: newXCols, ySeriesColumns: newYCols },\r\n                    xSeriesColumns, ySeriesColumns\r\n                });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                const addDesignParam = [];\r\n                const gridData = [];\r\n    \r\n                this.props.Login.masterData.selectedDesignConfig &&\r\n                    this.props.Login.masterData.selectedDesignConfig.forEach(item => {\r\n                        addDesignParam.push({\r\n                            ...item,\r\n                            ndesigncomponentcode: { label: item.sdesigncomponentname, value: item.ndesigncomponentcode },\r\n                            nsqlquerycode: { label: item.ssqlqueryname, value: item.nsqlquerycode }\r\n                        });\r\n                        gridData.push({\r\n                            ...item,\r\n                            ndesigncomponentcode: { label: item.sdesigncomponentname, value: item.ndesigncomponentcode },\r\n                            nsqlquerycode: { label: item.ssqlqueryname, value: item.nsqlquerycode }\r\n                        });\r\n                    });\r\n    \r\n                const addMappingParam = [];\r\n                const mappingGridData = [];\r\n    \r\n                this.props.Login.masterData.DashBoardParameterMapping &&\r\n                    this.props.Login.masterData.DashBoardParameterMapping.forEach(item => {\r\n                        addMappingParam.push({ ...item });\r\n                        mappingGridData.push({ ...item });\r\n                    });\r\n                \r\n                this.setState({addDesignParam, gridData,\r\n                    addMappingParam, mappingGridData,\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    // dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n               \r\n                const addDesignParam = [];\r\n                const gridData = [];\r\n    \r\n                this.props.Login.masterData.selectedDesignConfig &&\r\n                    this.props.Login.masterData.selectedDesignConfig.forEach(item => {\r\n                        addDesignParam.push({\r\n                            ...item,\r\n                            ndesigncomponentcode: { label: item.sdesigncomponentname, value: item.ndesigncomponentcode },\r\n                            nsqlquerycode: { label: item.ssqlqueryname, value: item.nsqlquerycode }\r\n                        });\r\n                        gridData.push({\r\n                            ...item,\r\n                            ndesigncomponentcode: { label: item.sdesigncomponentname, value: item.ndesigncomponentcode },\r\n                            nsqlquerycode: { label: item.ssqlqueryname, value: item.nsqlquerycode }\r\n                        });\r\n                    });\r\n    \r\n                const addMappingParam = [];\r\n                const mappingGridData = [];\r\n    \r\n                this.props.Login.masterData.DashBoardParameterMapping &&\r\n                    this.props.Login.masterData.DashBoardParameterMapping.forEach(item => {\r\n                        addMappingParam.push({ ...item });\r\n                        mappingGridData.push({ ...item });\r\n                    });\r\n                              \r\n                this.setState({  addDesignParam, gridData,\r\n                    addMappingParam, mappingGridData,\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    isOpen: false\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n\r\n            let chartSeries = [...this.state.chartSeries];\r\n\r\n            chartSeries[0].xField = this.props.Login.selectedRecord.xColumnName;\r\n            if (this.props.Login.selectedRecord[\"ncharttypecode\"] && this.props.Login.selectedRecord[\"ncharttypecode\"].value === chartType.BUBBLE) {\r\n                chartSeries[0].yField = this.props.Login.selectedRecord.sizeField;\r\n            }\r\n            else {\r\n                chartSeries[0].yField = this.props.Login.selectedRecord.yColumnName;\r\n            }\r\n\r\n\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.SqlColumns !== previousProps.Login.SqlColumns) {\r\n            let newXCols = [];\r\n            let newYCols = [];\r\n\r\n            if (this.props.Login.operation === \"update\") {\r\n                if (this.props.Login.selectedRecord[\"ncharttypecode\"] && (this.props.Login.selectedRecord[\"ncharttypecode\"].value === chartType.PIECHART ||\r\n                    this.props.Login.selectedRecord[\"ncharttypecode\"].value === chartType.DONUT)) {\r\n\r\n                    this.props.Login.selectedRecord[\"field\"] && this.props.Login.selectedRecord[\"field\"].value !== undefined ?\r\n\r\n                        newYCols = this.props.Login.SqlColumns.ySeriesColumns.filter(item => ![this.props.Login.selectedRecord[\"field\"].value].includes(item.value))\r\n                        :\r\n                        newYCols = this.props.Login.SqlColumns.ySeriesColumns\r\n\r\n                    if (this.props.Login.selectedRecord[\"nameField\"] && this.props.Login.selectedRecord[\"nameField\"].value !== undefined) {\r\n\r\n                        newXCols = this.props.Login.SqlColumns.xSeriesColumns.filter(item => ![this.props.Login.selectedRecord[\"nameField\"].value].includes(item.value))\r\n                    }\r\n                    else {\r\n                        newXCols = this.props.Login.SqlColumns.xSeriesColumns\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    this.props.Login.selectedRecord[\"xColumnName\"] && this.props.Login.selectedRecord[\"xColumnName\"].value !== undefined ?\r\n\r\n                        newYCols = this.props.Login.SqlColumns.ySeriesColumns.filter(item => ![this.props.Login.selectedRecord[\"xColumnName\"].value].includes(item.value))\r\n                        :\r\n                        newYCols = this.props.Login.SqlColumns.ySeriesColumns\r\n\r\n                    if (this.props.Login.selectedRecord[\"yColumnName\"] && this.props.Login.selectedRecord[\"yColumnName\"].length >= 0) {\r\n                        newXCols = this.props.Login.SqlColumns.xSeriesColumns.filter(item => !this.props.Login.selectedRecord[\"yColumnName\"].some(itemValue => itemValue.value === item.value))\r\n                    }\r\n                    else {\r\n                        newXCols = this.props.Login.SqlColumns.xSeriesColumns\r\n                    }\r\n\r\n                }\r\n                this.setState({ sqlColumns: { xSeriesColumns: newXCols, ySeriesColumns: newYCols } });\r\n            }\r\n            else {\r\n                this.setState({ sqlColumns: this.props.Login.SqlColumns });\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.xSeriesColumns !== previousProps.Login.xSeriesColumns) {\r\n            this.setState({ xSeriesColumns: this.props.Login.xSeriesColumns });\r\n        }\r\n        if (this.props.Login.ySeriesColumns !== previousProps.Login.ySeriesColumns) {\r\n            this.setState({ ySeriesColumns: this.props.Login.ySeriesColumns });\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        callService, crudMaster, fetchRecordDashBoardType, selectCheckBoxDashBoardTypes, getSqlQueryDataService,\r\n        getSqlQueryColumns, getAddDashboardDesign, getDashBoardParameterMappingComboService, updateStore,\r\n        validateEsignCredential, filterColumnData, checkParametersAvailableForDefaultValue,\r\n        getReportViewChildDataListForDashBoard, //showDefaultValueInDataGrid, \r\n        updateDashBoarddesignDefaultValue\r\n    })(injectIntl(DashBoardTypes));"]},"metadata":{},"sourceType":"module"}