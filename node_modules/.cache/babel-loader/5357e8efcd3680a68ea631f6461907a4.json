{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { ColumnType, queryTypeFilter, transactionStatus } from '../components/Enumeration';\nimport { format } from 'date-fns';\nexport function getTestGroupRulesEngineAdd(userInfo, testgrouprulesengine, inputParam, masterData) {\n  let testcomments = [];\n  let reportcomments = [];\n  let predefcomments = [];\n  let sampletestcommentsList = [];\n  let selectedRecord = {};\n  let addGroupList = [];\n  return function (dispatch) {\n    if (masterData && masterData.SelectedTest === null || masterData && masterData.SelectedTest === undefined) {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_ADDTEST\"\n      }));\n    } else {\n      //if (masterData.SelectedSpecification&&masterData.SelectedSpecification['napprovalstatus'] === transactionStatus.APPROVED) { \n      dispatch(initRequest(true));\n      let url = [];\n\n      if (testgrouprulesengine) {\n        url.push(rsapi.post(\"/testgrouprulesengine/getdatabasetables\", {\n          userinfo: userInfo\n        }));\n      } else {\n        url.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\n          \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\n          \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\n          \"napproveconfversioncode\": masterData.SelectedSpecification.napproveconfversioncode,\n          \"nallottedspeccode\": masterData.SelectedSpecification.nallottedspeccode,\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/grade/getGrade\", {\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/site/getSite\", {\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\n          userinfo: userInfo\n        }));\n      }\n\n      Axios.all(url).then(response => {\n        const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\n        const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\n        const viewListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\n        const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\n        const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\n        const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\n        let commentsubtypelst = response[5].data['CommentSubType'];\n        let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6);\n        const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\n        const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\n        let commentlist = response[3].data;\n        let x = commentlist.filter(x => x.ncommentsubtypecode === 1);\n        let y = commentlist.filter(x => x.ncommentsubtypecode === 4);\n        let z = commentlist.filter(x => x.ncommentsubtypecode === 3);\n        testcomments = constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        reportcomments = constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        predefcomments = constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false).get(\"OptionList\");\n        masterData['testParameter'] = {};\n        masterData['testParameterComments'] = {};\n        masterData['testParameterreportComments'] = {};\n        masterData['testComments'] = {};\n        masterData['reportComments'] = {};\n        masterData['testSite'] = {};\n        masterData['testRepeat'] = [];\n        masterData['testenforceTests'] = [];\n        masterData['GradeValues'] = response[0].data.GradeValues;\n        selectedRecord[\"groupList\"] = [];\n        selectedRecord[\"groupList\"][0] = [];\n        selectedRecord[\"groupList\"][0][\"button_and\"] = true;\n        selectedRecord[\"groupList\"][0][0] = {};\n        addGroupList[0] = 1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            operation: 'create',\n            databaseviewList: viewListMap.get(\"OptionList\"),\n            testcomments,\n            reportcomments,\n            openPortalModal: true,\n            screenName: \"IDS_ADDRULESENGINE\",\n            testgrouprulesengine,\n            ...inputParam,\n            siteObject: {},\n            testCommentObject: {},\n            reportCommentObject: {},\n            testInitiateTests: [],\n            testRepeatTests: [],\n            testenforceTests: [],\n            testCommentsTests: [],\n            reportCommentsTests: [],\n            reportCommentsTestsTab: [],\n            activeTabIndex: 0,\n            masterData: { ...masterData,\n              testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              rulesOption: viewListMap.get(\"OptionList\"),\n              DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\n              GradeList: Grade.get(\"OptionList\"),\n              siteList: site.get(\"OptionList\"),\n              resultTypeList: resultType.get(\"OptionList\"),\n              testCommentsTestsTab: [],\n              testInitiateSiteTab: [],\n              PredefinedParameterOptions: [],\n              testRepeatTestsTab: [],\n              testenforceTestsTab: []\n            },\n            testInitiateTestOptions: viewListMap.get(\"OptionList\"),\n            testCommentsTestOptions: viewListMap.get(\"OptionList\"),\n            reportCommentsTestOptions: viewListMap.get(\"OptionList\"),\n            CommentType: CommentType.get(\"OptionList\"),\n            CommentSubType: CommentSubType.get(\"OptionList\"),\n            predefcomments,\n            openModalPopup: false,\n            openmodalsavePopup: false,\n            addGroupList,\n            selectedRecord,\n            viewColumnListByRule: viewListMap.get(\"OptionList\"),\n            isServiceNeed: true\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      }); // }\n      // else {\n      //     toast.warn(intl.formatMessage({ id: \"IDS_RULESCANBEADDEDONLYFORAPPROVEDSPEC\" })); \n      // }\n    }\n  };\n}\nexport function getSpecificationTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getSpecificationTestGroupRulesEngine\", {\n      'userinfo': userInfo,\n      \"nproductcatcode\": inputParam.nproductcatcode.item.nproductcatcode\n    }).then(response => {\n      const TestGroupSpecification = constructOptionList(response.data.TestGroupSpecification || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, undefined);\n      let TestGroupSpecificationList = TestGroupSpecification.get(\"OptionList\");\n\n      if (ismodalcombochange) {\n        selectedRecord = { ...selectedRecord,\n          ...inputParam,\n          'nallottedspeccode': TestGroupSpecificationList[0]\n        };\n        masterData = { ...masterData,\n          ...response.data\n        };\n      } else {\n        let selectedcombo = { ...inputParam,\n          'nallottedspeccode': TestGroupSpecificationList[0]\n        };\n        masterData = { ...masterData,\n          ...response.data,\n          selectedcombo\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getComponentTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getComponentTestGroupRulesEngine\", {\n      'userinfo': userInfo,\n      \"nallottedspeccode\": inputParam.nallottedspeccode.item.nallottedspeccode\n    }).then(response => {\n      const Component = constructOptionList(response.data.Component || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, undefined);\n      let ComponentList = Component.get(\"OptionList\");\n\n      if (ismodalcombochange) {\n        selectedRecord = { ...selectedRecord,\n          ...inputParam,\n          'ncomponentcode': ComponentList[0]\n        };\n        masterData = { ...masterData,\n          ...response.data\n        };\n      } else {\n        let selectedcombo = { ...inputParam,\n          'ncomponentcode': ComponentList[0]\n        };\n        masterData = { ...masterData,\n          ...response.data,\n          selectedcombo\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedTestGroupRulesEngine(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getSelectedTestGroupRulesEngine\", {\n      'userinfo': userInfo,\n      \"ntestgrouprulesenginecode\": parseInt(inputParam.ntestgrouprulesenginecode) //, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\n      ,\n      \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode\n    }).then(response => {\n      masterData = { ...masterData,\n        SelectedRulesEngine: response.data[\"SelectedRulesEngine\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestGroupRulesEngine(nproductcatcode, nallottedspeccode, ncomponentcode, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngine\", {\n      'userinfo': userInfo,\n      \"nproductcatcode\": nproductcatcode,\n      \"nallottedspeccode\": nallottedspeccode,\n      \"ncomponentcode\": ncomponentcode\n    }).then(response => {\n      masterData = { ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditTestGroupRulesEngine(operation, masterData //,\n// ncontrolCode\n, userInfo) {\n  let testcomments = [];\n  let reportcomments = [];\n  let predefcomments = [];\n  return function (dispatch) {\n    if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\n      let urlArray = [];\n      let selectedRecord = {};\n      urlArray.push(rsapi.post(\"testgrouprulesengine/getEditTestGroupRulesEngine\", {\n        'ntestgrouprulesenginecode': masterData.SelectedRulesEngine['ntestgrouprulesenginecode'],\n        'masterData': masterData,\n        \"userinfo\": userInfo\n      }));\n      urlArray.push(rsapi.post(\"/grade/getGrade\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/site/getSite\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\n        \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\n        \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\n        \"napproveconfversioncode\": masterData.SelectedSpecification.napproveconfversioncode,\n        \"nallottedspeccode\": masterData.SelectedSpecification.nallottedspeccode,\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/productcategory/getProductCategory\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\n        userinfo: userInfo\n      }));\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        masterData['testParameter'] = {};\n        masterData['testParameterComments'] = {};\n        masterData['testParameterreportComments'] = {};\n        let responsedata = response[0].data;\n        let srulename = responsedata['RulesEngineEdit'][0]['srulename']; //    let nruleexecorder = responsedata['RulesEngineEdit'][0]['nruleexecorder']\n\n        let groupList = responsedata['RulesEngineEdit'][0]['jsondata'];\n        let outcomeList = responsedata['RulesEngineEdit'][0]['jsonuidata'];\n        selectedRecord[\"groupList\"] = [];\n        groupList.map((ruleslist, index) => {\n          if (ruleslist.hasOwnProperty('button_or')) {\n            selectedRecord[\"groupList\"][index] = ruleslist[\"button_or\"];\n            selectedRecord[\"groupList\"][index][\"button_or\"] = true;\n          }\n\n          if (ruleslist.hasOwnProperty('button_and')) {\n            selectedRecord[\"groupList\"][index] = ruleslist[\"button_and\"];\n            selectedRecord[\"groupList\"][index][\"button_and\"] = true;\n          }\n\n          if (ruleslist.hasOwnProperty('button_not_button_and')) {\n            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_and\"];\n            selectedRecord[\"groupList\"][index][\"button_and\"] = true;\n            selectedRecord[\"groupList\"][index][\"button_not\"] = true;\n          }\n\n          if (ruleslist.hasOwnProperty('button_not_button_or')) {\n            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_or\"];\n            selectedRecord[\"groupList\"][index][\"button_or\"] = true;\n            selectedRecord[\"groupList\"][index][\"button_not\"] = true;\n          }\n        }); // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\n        //     selectedRecord[\"groupList\"]['button_not'] = true\n        // }\n        // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\n        //     selectedRecord[\"groupList\"]['button_not'] = true\n        // }\n\n        if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')) {\n          selectedRecord[\"groupList\"]['button_or'] = true;\n        } else {\n          selectedRecord[\"groupList\"]['button_and'] = true;\n        }\n\n        selectedRecord['srulename'] = srulename;\n        selectedRecord['srulenamecopy'] = srulename; //     selectedRecord['nruleexecordercopy'] = nruleexecorder\n        // selectedRecord[\"groupList\"][0][\"button_and\"] = true\n\n        let addGroupList = [];\n        addGroupList = responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList'];\n        const DiagnosticCase = constructOptionList(response[4].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\n        const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\n        const viewListMap = constructOptionList(response[4].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\n        const resultType = constructOptionList(response[4].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\n        const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\n        const CommentType = constructOptionList(response[6].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\n        const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\n        let commentsubtypelst = response[7].data['CommentSubType'];\n        let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6);\n        const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\n        let commentlist = response[3].data;\n        let x = commentlist.filter(x => x.ncommentsubtypecode === 1);\n        let y = commentlist.filter(x => x.ncommentsubtypecode === 4);\n        let z = commentlist.filter(x => x.ncommentsubtypecode === 3);\n        testcomments = constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        reportcomments = constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        predefcomments = constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false).get(\"OptionList\");\n        masterData['testParameter'] = outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'];\n        masterData['testRepeat'] = outcomeList['testRepeatTests'] && outcomeList['testRepeatTests'];\n        masterData['testenforceTests'] = outcomeList['testenforceTests'] && outcomeList['testenforceTests'];\n        masterData['testParameterComments'] = outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'];\n        masterData['testParameterreportComments'] = outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'];\n        masterData[\"testComments\"] = outcomeList['testCommentObject'] && outcomeList['testCommentObject'];\n        masterData[\"reportComments\"] = outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'];\n        masterData[\"testSite\"] = outcomeList['siteObject'] && outcomeList['siteObject'];\n        selectedRecord[\"nproductcatcode\"] = outcomeList['nproductcatcode'] && outcomeList['nproductcatcode'];\n        selectedRecord[\"nallottedspeccode\"] = outcomeList['nallottedspeccode'] && outcomeList['nallottedspeccode'];\n        selectedRecord[\"ncomponentcode\"] = outcomeList['ncomponentcode'] && outcomeList['ncomponentcode'];\n        selectedRecord[\"groupListJoins\"] = outcomeList['groupListJoins'] && outcomeList['groupListJoins'];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: \"IDS_EDITRULESENGINE\",\n            selectedRecord,\n            openPortalModal: true,\n            // ncontrolCode: ncontrolCode,\n            loading: false,\n            addGroupList,\n            masterData: { ...masterData,\n              testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              rulesOption: viewListMap.get(\"OptionList\"),\n              DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\n              GradeList: Grade.get(\"OptionList\"),\n              siteList: site.get(\"OptionList\"),\n              resultTypeList: resultType.get(\"OptionList\"),\n              testCommentsTestsTab: outcomeList['testCommentsTestsTab'],\n              testRepeatTestsTab: outcomeList['testRepeatTestsTab'],\n              testenforceTestsTab: outcomeList['testenforceTestsTab'],\n              PredefinedParameterOptions: outcomeList['PredefinedParameterOptions'],\n              testInitiateSiteTab: outcomeList['testInitiateSiteTab'],\n              reportCommentsTestsTab: outcomeList['reportCommentsTestsTab'],\n              GradeValues: response[4].data.GradeValues\n            },\n            viewColumnListByRule: viewListMap.get(\"OptionList\"),\n            testcomments,\n            reportcomments,\n            testInitiateTests: outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'],\n            testCommentsTests: outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'],\n            testRepeatTests: outcomeList['testRepeatTests'] && outcomeList['testRepeatTests'],\n            testenforceTests: outcomeList['testenforceTests'] && outcomeList['testenforceTests'],\n            reportCommentsTests: outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'],\n            siteObject: outcomeList['siteObject'] && outcomeList['siteObject'],\n            testCommentObject: outcomeList['testCommentObject'] && outcomeList['testCommentObject'],\n            reportCommentObject: outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'],\n            CommentType: CommentType.get(\"OptionList\"),\n            CommentSubType: CommentSubType.get(\"OptionList\"),\n            predefcomments,\n            openModalPopup: false,\n            openmodalsavePopup: false,\n            activeTabIndex: 0,\n            action: \"update\",\n            isServiceNeed: true\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTRULETOEDIT\"\n      }));\n    }\n  };\n}\nexport function getParameterforEnforce(selectedRecord, masterData, userInfo, activeTabIndex, action) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\", {\n      'userinfo': userInfo,\n      \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value,\n      'tabIndex': activeTabIndex,\n      'ntestgrouprulesenginecode': selectedRecord['ntestgrouprulesenginecode']\n    }).then(response => {\n      const testGroupTestParameterRulesEngine = constructOptionList(response.data.TestGroupTestParameterRulesEngine || [], \"ntestgrouptestparametercode\", \"sparametersynonym\", undefined, undefined, undefined);\n      let testGroupTestParameterRulesEngineList = testGroupTestParameterRulesEngine.get(\"OptionList\");\n      masterData['testGroupTestParameterRulesEngine'] = testGroupTestParameterRulesEngineList; //Start\n      //end\n      // let keylst = Object.keys(response.data.PredefinedValues)\n      // keylst.map(ntestgrouptestparametercode => {\n      //     response.data.PredefinedValues[ntestgrouptestparametercode] =\n      //         constructOptionList(response.data.PredefinedValues[ntestgrouptestparametercode]\n      //             || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n      //             undefined, undefined).get(\"OptionList\");\n      // })\n      // masterData['PredefinedValues'] = response.data.PredefinedValues\n      // masterData['GradeValues'] = response.data.GradeValues\n      // selectedRecord = { ...selectedRecord, 'ParameterRulesEngine': response.data.TestGroupTestParameterRulesEngine }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false,\n          action,\n          openmodalsavePopup: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterRulesEngine(selectedRecord, masterData, userInfo, activeTabIndex, action, isParameterPopupChanged) {\n  return function (dispatch) {\n    let additionalInfo = []; //    dispatch(initRequest(true));\n\n    rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\", {\n      'userinfo': userInfo,\n      \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value,\n      'tabIndex': activeTabIndex,\n      'ntestgrouprulesenginecode': selectedRecord['ntestgrouprulesenginecode']\n    }).then(response => {\n      let selectedResultGrade = [];\n      let paremterResultcode = [];\n      const parameterResults = response.data.TestGroupTestParameterRulesEngine;\n      let tempparameterResults = [...parameterResults];\n      let predefDefaultFlag = false;\n      let savedTest = masterData['testParameter'].filter(test => test['ntestgrouptestcode'] === selectedRecord['ntestgrouptestcode'].value);\n\n      if (savedTest.length > 0) {\n        if (savedTest[0]['ParameterRulesEngine']) {\n          let savedTestParameterlist = savedTest[0]['ParameterRulesEngine'];\n          tempparameterResults.map((param, index) => {\n            let savedParameter = savedTestParameterlist.filter(x => x['ntestgrouptestparametercode'] === param['ntestgrouptestparametercode'])[0];\n\n            if (savedParameter && savedParameter['sresult'] !== '') {\n              //delete parameterResults[index]; \n              let removeIndex = parameterResults.findIndex(x => x['ntestgrouptestparametercode'] === savedParameter['ntestgrouptestparametercode']);\n              parameterResults.splice(removeIndex, 1);\n            }\n          });\n        }\n      }\n\n      if (parameterResults.length > 0) {\n        parameterResults.map((param, index) => {\n          selectedResultGrade[index] = {\n            ngradecode: param.ngradecode\n          };\n          paremterResultcode[index] = param.ntestgrouptestparametercode; // let jsondata=JSON.parse(param.jsondata['value'])\n\n          if (param.hasOwnProperty('additionalInfo')) {\n            additionalInfo[param.ntestgrouptestparametercode] = param['additionalInfo'];\n          }\n\n          predefDefaultFlag = false;\n          response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] && response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode].map(predefinedvalue => {\n            // if (predefinedvalue.ndefaultstatus === transactionStatus.YES&&\n            //     predefinedvalue.nneedresultentryalert=== transactionStatus.NO\n            //      && predefinedvalue.nneedsubcodedresult=== transactionStatus.NO) {\n            //     if (!predefDefaultFlag) {\n            //         predefDefaultFlag = true;\n            //         response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\n            //             undefined, undefined).get(\"OptionList\");\n            //     }\n            //   //   if (response.data.TestGroupTestParameterRulesEngine[index].sresult === null) {\n            //         response.data.TestGroupTestParameterRulesEngine[index].sresult =predefinedvalue.spredefinedname;\n            //         response.data.TestGroupTestParameterRulesEngine[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\n            //         response.data.TestGroupTestParameterRulesEngine[index].sfinal = predefinedvalue.spredefinedsynonym;\n            //         response.data.TestGroupTestParameterRulesEngine[index].editable = true;\n            //         response.data.TestGroupTestParameterRulesEngine[index].ngradecode = predefinedvalue.ngradecode;\n            //         response.data.TestGroupTestParameterRulesEngine[index].sgradename = predefinedvalue.sgradename; \n            //         if (predefinedvalue.spredefinedcomments && predefinedvalue.spredefinedcomments !== null) {\n            //             response.data.TestGroupTestParameterRulesEngine[index].sresultcomment = predefinedvalue.spredefinedcomments\n            //                 && predefinedvalue.spredefinedcomments;\n            //         }\n            //  //  }\n            // }\n            // else {\n            if (!predefDefaultFlag) {\n              predefDefaultFlag = true;\n              response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n            } //}\n\n          });\n          response.data.TestGroupTestParameterRulesEngine[index].sresult = null;\n        });\n      } else {\n        return toast.info(intl.formatMessage({\n          id: \"IDS_NOMOREPARAMETERSAVAILABLEFORTHISTEST\"\n        }));\n      }\n\n      if (parameterResults.length > 0) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModalPopup: true,\n            modalParameterPopup: action === \"IDS_ADDPARAMETER\" ? true : false,\n            masterData: { ...masterData,\n              ...response.data,\n              paremterResultcode\n            },\n            selectedRecord: { ...selectedRecord,\n              additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n              selectedResultGrade: selectedResultGrade,\n              ParameterRulesEngine: response.data.TestGroupTestParameterRulesEngine\n            },\n            loading: false,\n            action,\n            openmodalsavePopup: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPredefinedDataRulesEngine(inputData, selectedRecord, currentAlertResultCode, masterData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData).then(response => {\n      let showMultiSelectCombo = false;\n      let ResultParameter = selectedRecord['ParameterRulesEngine'];\n      let onlyAlertMsgAvailable = false;\n      let testgrouptestpredefsubresult = response.data['testgrouptestpredefsubresult'];\n\n      if (inputData['nneedsubcodedresult'] === transactionStatus.YES) {\n        showMultiSelectCombo = true;\n        masterData['testgrouptestpredefsubresultOptions'] = testgrouptestpredefsubresult;\n      } else {\n        onlyAlertMsgAvailable = true;\n      }\n\n      for (const Parameter of ResultParameter) {\n        if (Parameter.additionalInfoUidata) {\n          if (Parameter.additionalInfoUidata || Parameter.additionalInfoUidata === \"\") {\n            let additionalInfoUidata = typeof Parameter.additionalInfoUidata === 'string' ? Parameter.additionalInfoUidata === \"\" ? \"\" : JSON.parse(Parameter.additionalInfoUidata) : Parameter.additionalInfoUidata;\n\n            if (Parameter['ntestgrouptestparametercode'] === currentAlertResultCode && Parameter['ntestgrouptestpredefcode'] === inputData['ntestgrouptestpredefcode']) {\n              if (Parameter.additionalInfoUidata) {\n                selectedRecord[\"ntestgrouptestpredefsubcode\"] = additionalInfoUidata['ntestgrouptestpredefsubcode'];\n                break;\n              }\n            } else {\n              if (selectedRecord[\"ntestgrouptestpredefsubcode\"]) {\n                delete selectedRecord[\"ntestgrouptestpredefsubcode\"];\n              }\n            }\n          }\n        }\n      }\n\n      ;\n      masterData['salertmessage'] = inputData.salertmessage;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData,\n          showAlertGrid: inputData.nneedresultentryalert === transactionStatus.NO ? false : true,\n          showAlertForPredefined: true,\n          showMultiSelectCombo,\n          onlyAlertMsgAvailable,\n          additionalInfoView: false,\n          selectedRecord,\n          showParameterGrid: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterResultValue(combodata, groupIndex, index, PredefinedParameterOptions, selectedRecord, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getParameterResultValue\", {\n      'userinfo': userInfo,\n      \"nparametertypecode\": combodata['stestname']['item']['nparametertypecode'],\n      'ntestgrouptestparametercode': combodata['stestname']['item']['ntestgrouptestparametercode']\n    }).then(response => {\n      const PredefinedParameterRulesEngine = constructOptionList(response.data.PredefinedParameterRulesEngine || [], \"ntestgrouptestpredefcode\", \"spredefinedname\", undefined, undefined, undefined);\n\n      if (PredefinedParameterOptions[groupIndex] === undefined) {\n        PredefinedParameterOptions[groupIndex] = [];\n      }\n\n      if (PredefinedParameterOptions[groupIndex][index] === undefined) {\n        PredefinedParameterOptions[groupIndex][index] = [];\n      }\n\n      PredefinedParameterOptions[groupIndex][index] = PredefinedParameterRulesEngine.get(\"OptionList\");\n      masterData['PredefinedParameterOptions'] = PredefinedParameterOptions;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function saveExecutionOrder(testGroupRulesEngineList, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/updateExecutionOrder\", {\n      'userinfo': userInfo,\n      'ntestgrouptestcode': testGroupRulesEngineList[0]['ntestgrouptestcode'],\n      'TestGroupRulesEngine': testGroupRulesEngineList\n    }).then(response => {\n      masterData['RulesEngine'] = response.data.RulesEngine;\n      masterData['RulesEngine'].map(x => {\n        if (x['ntestgrouprulesenginecode'] === masterData['SelectedRulesEngine']['ntestgrouprulesenginecode']) {\n          x['selected'] = {};\n          x['selected'] = true;\n        }\n      }); //  masterData['SelectedRulesEngine'] = response.data.SelectedRulesEngine\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          masterList: response.data['RulesEngine'] && sortData(response.data['RulesEngine'], 'ascending', 'nruleexecorder'),\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-4984\n//Added by Neeraj \n\nexport function getCopyValues(masterData, ncontrolCode, userInfo) {\n  return function (dispatch) {\n    if (masterData.SelectedSpecification.napprovalstatus === transactionStatus.APPROVED) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/testgrouprulesengine/getProductCategory\", {\n        'userinfo': userInfo,\n        ntestcode: masterData.SelectedTest.ntestcode\n      }).then(response => {\n        const PredefinedParameterRulesEngine = constructOptionList(response.data.getProductCategory || [], \"nproductcatcode\", \"sproductcatname\", undefined, undefined, undefined);\n        let getProductCategory = PredefinedParameterRulesEngine.get(\"OptionList\");\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            openChildModal: true,\n            getProductCategory,\n            loading: false,\n            ncontrolCode: ncontrolCode,\n            screenName: \"IDS_RULESFROM\",\n            operation: \"copy\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SPECIFICATIONMUSTNOTBEDRAFTSTATUS\"\n      }));\n    }\n  };\n} //ALPD-4984\n//Added by Neeraj \n\nexport function getProfileRootComboServices(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getProfileRoot\", {\n      'userinfo': methodParam.inputData.userinfo,\n      'nproductcatcode': methodParam.inputData.nproductcatcode,\n      'nproductcode': methodParam.inputData.nproductcode,\n      'ntestcode': methodParam.inputData.ntestcode\n    }).then(response => {\n      const PredefinedParameterRulesEngine = constructOptionList(response.data.getProfileRoot || [], \"ntemplatemanipulationcode\", \"sleveldescription\", undefined, undefined, undefined);\n      let getProfileRoot = PredefinedParameterRulesEngine.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          getProfileRoot,\n          loading: false,\n          screenName: \"IDS_RULESFROM\",\n          operation: \"copy\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-4984\n//Added by Neeraj \n\nexport function getProductComboServices(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getProductByProductCat\", {\n      'userinfo': methodParam.inputData.userinfo,\n      'nproductcatcode': methodParam.inputData.nproductcatcode,\n      'ntestcode': methodParam.inputData.ntestcode\n    }).then(response => {\n      const PredefinedParameterRulesEngine = constructOptionList(response.data.getProduct || [], \"nproductcode\", \"sproductname\", undefined, undefined, undefined);\n      let getProductList = PredefinedParameterRulesEngine.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          getProductList,\n          loading: false,\n          screenName: \"IDS_RULESFROM\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-4984\n//Added by Neeraj \n\nexport function getSpecificationComboServices(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getSpecification\", {\n      'userinfo': methodParam.inputData.userinfo,\n      'ntemplatemanipulationcode': methodParam.inputData.ntemplatemanipulationcode,\n      'ntestcode': methodParam.inputData.ntestcode\n    }).then(response => {\n      const PredefinedParameterRulesEngine = constructOptionList(response.data.getSpecification || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, undefined);\n      let getSpecificationList = PredefinedParameterRulesEngine.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          getSpecificationList,\n          loading: false,\n          screenName: \"IDS_RULESFROM\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-4984\n//Added by Neeraj \n\nexport function getComponentComboServices(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getComponent\", {\n      'userinfo': methodParam.inputData.userinfo,\n      'nallottedspeccode': methodParam.inputData.nallottedspeccode,\n      'ncomponentcode': methodParam.inputData.ncomponentcode,\n      'ntestcode': methodParam.inputData.ntestcode\n    }).then(response => {\n      const PredefinedParameterRulesEngine = constructOptionList(response.data.getComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, undefined);\n      let getComponentList = PredefinedParameterRulesEngine.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          getComponentList,\n          loading: false,\n          screenName: \"IDS_RULESFROM\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} //ALPD-4984\n//Added by Neeraj \n\nexport function getRulesTestComboServices(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getTestBasedOnRules\", {\n      'userinfo': methodParam.inputData.userinfo,\n      'selectedComponentCode': methodParam.inputData.selectedComponentCode,\n      'selectedSpecCode': methodParam.inputData.selectedSpecCode,\n      'ntestcode': methodParam.inputData.ntestcode,\n      'ntestgrouptestcode': methodParam.inputData.ntestgrouptestcode,\n      'ncomponentcode': methodParam.inputData.ncomponentcode,\n      'nallottedspeccode': methodParam.inputData.nallottedspeccode\n    }).then(response => {\n      const PredefinedParameterRulesEngine = constructOptionList(response.data.getRules || [], \"ntestgrouprulesenginecode\", \"srulename\", undefined, undefined, undefined);\n      let getRulesList = PredefinedParameterRulesEngine.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openChildModal: true,\n          getRulesList,\n          loading: false,\n          screenName: \"IDS_RULESFROM\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/TestGroupRuleEngineAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","ColumnType","queryTypeFilter","transactionStatus","format","getTestGroupRulesEngineAdd","userInfo","testgrouprulesengine","inputParam","masterData","testcomments","reportcomments","predefcomments","sampletestcommentsList","selectedRecord","addGroupList","dispatch","SelectedTest","undefined","warn","formatMessage","id","url","push","post","userinfo","ntestgrouptestcode","SelectedComponent","nspecsampletypecode","SelectedSpecification","napproveconfversioncode","nallottedspeccode","all","then","response","DiagnosticCase","data","Grade","viewListMap","resultType","site","CommentType","commentsubtypelst","w","filter","x","ncommentsubtypecode","CommentSubType","testInitiateTestCombo","commentlist","y","z","get","GradeValues","type","payload","loading","operation","databaseviewList","openPortalModal","screenName","siteObject","testCommentObject","reportCommentObject","testInitiateTests","testRepeatTests","testenforceTests","testCommentsTests","reportCommentsTests","reportCommentsTestsTab","activeTabIndex","testCommentsTestCombo","testRepeatTestCombo","testenforceTestCombo","rulesOption","DiagnosticCaseList","GradeList","siteList","resultTypeList","testCommentsTestsTab","testInitiateSiteTab","PredefinedParameterOptions","testRepeatTestsTab","testenforceTestsTab","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","openModalPopup","openmodalsavePopup","viewColumnListByRule","isServiceNeed","catch","error","status","message","getSpecificationTestGroupRulesEngine","ismodalcombochange","nproductcatcode","item","TestGroupSpecification","TestGroupSpecificationList","selectedcombo","getComponentTestGroupRulesEngine","Component","ComponentList","getSelectedTestGroupRulesEngine","parseInt","ntestgrouprulesenginecode","SelectedRulesEngine","getTestGroupRulesEngine","ncomponentcode","getEditTestGroupRulesEngine","length","urlArray","responsedata","srulename","groupList","outcomeList","map","ruleslist","index","hasOwnProperty","action","getParameterforEnforce","value","testGroupTestParameterRulesEngine","TestGroupTestParameterRulesEngine","testGroupTestParameterRulesEngineList","getParameterRulesEngine","isParameterPopupChanged","additionalInfo","selectedResultGrade","paremterResultcode","parameterResults","tempparameterResults","predefDefaultFlag","savedTest","test","savedTestParameterlist","param","savedParameter","removeIndex","findIndex","splice","ngradecode","ntestgrouptestparametercode","PredefinedValues","predefinedvalue","sresult","info","modalParameterPopup","ParameterRulesEngine","getPredefinedDataRulesEngine","inputData","currentAlertResultCode","inputParamData","ntestgrouptestpredefcode","showMultiSelectCombo","ResultParameter","onlyAlertMsgAvailable","testgrouptestpredefsubresult","YES","Parameter","additionalInfoUidata","JSON","parse","salertmessage","showAlertGrid","nneedresultentryalert","NO","showAlertForPredefined","additionalInfoView","showParameterGrid","getParameterResultValue","combodata","groupIndex","PredefinedParameterRulesEngine","saveExecutionOrder","testGroupRulesEngineList","RulesEngine","masterList","getCopyValues","ncontrolCode","napprovalstatus","APPROVED","ntestcode","getProductCategory","openChildModal","getProfileRootComboServices","methodParam","nproductcode","getProfileRoot","getProductComboServices","getProduct","getProductList","getSpecificationComboServices","ntemplatemanipulationcode","getSpecification","getSpecificationList","getComponentComboServices","getComponent","getComponentList","getRulesTestComboServices","selectedComponentCode","selectedSpecCode","getRules","getRulesList"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from '../components/CommonScript' //getComboLabelValue,, searchData\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    ColumnType,\r\n    queryTypeFilter,\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\nimport { format } from 'date-fns';\r\n\r\nexport function getTestGroupRulesEngineAdd(userInfo, testgrouprulesengine, inputParam, masterData) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    let sampletestcommentsList = []\r\n    let selectedRecord = {}\r\n    let addGroupList = []\r\n    return function (dispatch) {\r\n        if (masterData && masterData.SelectedTest === null || masterData && masterData.SelectedTest === undefined) {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_ADDTEST\" }));\r\n        }\r\n        else {\r\n            //if (masterData.SelectedSpecification&&masterData.SelectedSpecification['napprovalstatus'] === transactionStatus.APPROVED) { \r\n            dispatch(initRequest(true));\r\n            let url = [];\r\n            if (testgrouprulesengine) {\r\n                url.push(rsapi.post(\"/testgrouprulesengine/getdatabasetables\", {\r\n                    userinfo: userInfo\r\n                }));\r\n\r\n            } else {\r\n                url.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\r\n                    \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n                    \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\r\n                    \"napproveconfversioncode\": masterData.SelectedSpecification.napproveconfversioncode,\r\n                    \"nallottedspeccode\": masterData.SelectedSpecification.nallottedspeccode,\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/grade/getGrade\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/site/getSite\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                    userinfo: userInfo\r\n                }));\r\n            }\r\n            Axios.all(url)\r\n                .then(response => {\r\n                    const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    let commentsubtypelst = response[5].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                    const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\r\n\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    masterData['testComments'] = {}\r\n                    masterData['reportComments'] = {}\r\n                    masterData['testSite'] = {}\r\n                    masterData['testRepeat'] = []\r\n                    masterData['testenforceTests'] = []\r\n                    masterData['GradeValues'] = response[0].data.GradeValues\r\n                    selectedRecord[\"groupList\"] = [];\r\n                    selectedRecord[\"groupList\"][0] = [];\r\n                    selectedRecord[\"groupList\"][0][\"button_and\"] = true;\r\n                    selectedRecord[\"groupList\"][0][0] = {};\r\n                    addGroupList[0] = 1;\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            operation: 'create',\r\n                            databaseviewList: viewListMap.get(\"OptionList\"),\r\n                            testcomments,\r\n                            reportcomments,\r\n\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_ADDRULESENGINE\",\r\n                            testgrouprulesengine,\r\n                            ...inputParam,\r\n\r\n                            siteObject: {},\r\n                            testCommentObject: {},\r\n                            reportCommentObject: {},\r\n                            testInitiateTests: [],\r\n                            testRepeatTests: [],\r\n                            testenforceTests: [],\r\n                            testCommentsTests: [],\r\n                            reportCommentsTests: []\r\n                            ,\r\n                            reportCommentsTestsTab: [],\r\n\r\n                            activeTabIndex: 0,\r\n                            masterData: {\r\n                                ...masterData, testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                rulesOption: viewListMap.get(\"OptionList\"),\r\n                                DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                                GradeList: Grade.get(\"OptionList\"),\r\n                                siteList: site.get(\"OptionList\"),\r\n                                resultTypeList: resultType.get(\"OptionList\"),\r\n                                testCommentsTestsTab: [],\r\n                                testInitiateSiteTab: [],\r\n                                PredefinedParameterOptions: [],\r\n                                testRepeatTestsTab: [],\r\n                                testenforceTestsTab: [],\r\n                            },\r\n\r\n                            testInitiateTestOptions: viewListMap.get(\"OptionList\"),\r\n                            testCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            reportCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            addGroupList,\r\n                            selectedRecord,\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\"),\r\n                            isServiceNeed:true\r\n                            \r\n                        }\r\n                    });\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n            // }\r\n            // else {\r\n            //     toast.warn(intl.formatMessage({ id: \"IDS_RULESCANBEADDEDONLYFORAPPROVEDSPEC\" })); \r\n            // }\r\n\r\n        }\r\n    }\r\n}\r\nexport function getSpecificationTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSpecificationTestGroupRulesEngine\",\r\n            { 'userinfo': userInfo, \"nproductcatcode\": inputParam.nproductcatcode.item.nproductcatcode })\r\n            .then(response => {\r\n                const TestGroupSpecification = constructOptionList(response.data.TestGroupSpecification || [], \"nallottedspeccode\",\r\n                    \"sspecname\", undefined, undefined, undefined);\r\n                let TestGroupSpecificationList = TestGroupSpecification.get(\"OptionList\");\r\n                if (ismodalcombochange) {\r\n                    selectedRecord = { ...selectedRecord, ...inputParam, 'nallottedspeccode': TestGroupSpecificationList[0] }\r\n                    masterData = { ...masterData, ...response.data }\r\n                }\r\n                else {\r\n                    let selectedcombo = { ...inputParam, 'nallottedspeccode': TestGroupSpecificationList[0] }\r\n                    masterData = { ...masterData, ...response.data, selectedcombo }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getComponentTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getComponentTestGroupRulesEngine\",\r\n            { 'userinfo': userInfo, \"nallottedspeccode\": inputParam.nallottedspeccode.item.nallottedspeccode })\r\n            .then(response => {\r\n                const Component = constructOptionList(response.data.Component || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, undefined);\r\n                let ComponentList = Component.get(\"OptionList\");\r\n                if (ismodalcombochange) {\r\n                    selectedRecord = { ...selectedRecord, ...inputParam, 'ncomponentcode': ComponentList[0] }\r\n                    masterData = { ...masterData, ...response.data }\r\n                }\r\n                else {\r\n                    let selectedcombo = { ...inputParam, 'ncomponentcode': ComponentList[0] }\r\n                    masterData = { ...masterData, ...response.data, selectedcombo }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getSelectedTestGroupRulesEngine(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSelectedTestGroupRulesEngine\",\r\n            {\r\n                'userinfo': userInfo, \"ntestgrouprulesenginecode\": parseInt(inputParam.ntestgrouprulesenginecode)//, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\r\n                , \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData, SelectedRulesEngine: response.data[\"SelectedRulesEngine\"]\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestGroupRulesEngine(nproductcatcode, nallottedspeccode, ncomponentcode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngine\",\r\n            {\r\n                'userinfo': userInfo, \"nproductcatcode\": nproductcatcode\r\n                , \"nallottedspeccode\": nallottedspeccode\r\n                , \"ncomponentcode\": ncomponentcode\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getEditTestGroupRulesEngine(operation, masterData//,\r\n    // ncontrolCode\r\n    , userInfo) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    return function (dispatch) {\r\n        if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\r\n            let urlArray = [];\r\n            let selectedRecord = {}\r\n            urlArray.push(rsapi.post(\"testgrouprulesengine/getEditTestGroupRulesEngine\", {\r\n                'ntestgrouprulesenginecode':\r\n                    masterData.SelectedRulesEngine['ntestgrouprulesenginecode'], 'masterData': masterData, \"userinfo\": userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/grade/getGrade\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/site/getSite\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\r\n                \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n                \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\r\n                \"napproveconfversioncode\": masterData.SelectedSpecification.napproveconfversioncode,\r\n                \"nallottedspeccode\": masterData.SelectedSpecification.nallottedspeccode,\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/productcategory/getProductCategory\", {\r\n                userinfo: userInfo\r\n            }));\r\n\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    let responsedata = response[0].data\r\n                    let srulename = responsedata['RulesEngineEdit'][0]['srulename']\r\n                    //    let nruleexecorder = responsedata['RulesEngineEdit'][0]['nruleexecorder']\r\n                    let groupList = responsedata['RulesEngineEdit'][0]['jsondata']\r\n                    let outcomeList = responsedata['RulesEngineEdit'][0]['jsonuidata']\r\n                    selectedRecord[\"groupList\"] = []\r\n                    groupList.map((ruleslist, index) => {\r\n\r\n                        if (ruleslist.hasOwnProperty('button_or')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_or\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_and')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_and\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_not_button_and')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_and\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                            selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_not_button_or')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_or\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                            selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                        }\r\n                    })\r\n                    // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\r\n                    //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                    // }\r\n                    // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\r\n                    //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                    // }\r\n                    if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')) {\r\n                        selectedRecord[\"groupList\"]['button_or'] = true\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"groupList\"]['button_and'] = true\r\n                    }\r\n                    selectedRecord['srulename'] = srulename\r\n                    selectedRecord['srulenamecopy'] = srulename\r\n                    //     selectedRecord['nruleexecordercopy'] = nruleexecorder\r\n                    // selectedRecord[\"groupList\"][0][\"button_and\"] = true\r\n                    let addGroupList = []\r\n                    addGroupList = responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList']\r\n                    const DiagnosticCase = constructOptionList(response[4].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[4].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[4].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[6].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\r\n\r\n\r\n                    let commentsubtypelst = response[7].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = outcomeList['testInitiateTests'] && outcomeList['testInitiateTests']\r\n                    masterData['testRepeat'] = outcomeList['testRepeatTests'] && outcomeList['testRepeatTests']\r\n                    masterData['testenforceTests'] = outcomeList['testenforceTests'] && outcomeList['testenforceTests']\r\n\r\n                    masterData['testParameterComments'] = outcomeList['testCommentsTests'] && outcomeList['testCommentsTests']\r\n                    masterData['testParameterreportComments'] = outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests']\r\n\r\n                    masterData[\"testComments\"] = outcomeList['testCommentObject'] && outcomeList['testCommentObject']\r\n                    masterData[\"reportComments\"] = outcomeList['reportCommentObject'] && outcomeList['reportCommentObject']\r\n                    masterData[\"testSite\"] = outcomeList['siteObject'] && outcomeList['siteObject']\r\n                    selectedRecord[\"nproductcatcode\"] = outcomeList['nproductcatcode'] && outcomeList['nproductcatcode']\r\n                    selectedRecord[\"nallottedspeccode\"] = outcomeList['nallottedspeccode'] && outcomeList['nallottedspeccode']\r\n                    selectedRecord[\"ncomponentcode\"] = outcomeList['ncomponentcode'] && outcomeList['ncomponentcode']\r\n                    selectedRecord[\"groupListJoins\"] = outcomeList['groupListJoins'] && outcomeList['groupListJoins']\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation: operation, screenName: \"IDS_EDITRULESENGINE\", selectedRecord,\r\n                            openPortalModal: true,// ncontrolCode: ncontrolCode,\r\n                            loading: false, addGroupList,\r\n                            masterData: {\r\n                                ...masterData, testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                rulesOption: viewListMap.get(\"OptionList\"),\r\n                                DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                                GradeList: Grade.get(\"OptionList\"),\r\n                                siteList: site.get(\"OptionList\"),\r\n                                resultTypeList: resultType.get(\"OptionList\"),\r\n                                testCommentsTestsTab: outcomeList['testCommentsTestsTab'],\r\n                                testRepeatTestsTab: outcomeList['testRepeatTestsTab'],\r\n                                testenforceTestsTab: outcomeList['testenforceTestsTab'],\r\n                                PredefinedParameterOptions: outcomeList['PredefinedParameterOptions'],\r\n                                testInitiateSiteTab: outcomeList['testInitiateSiteTab'],\r\n                                reportCommentsTestsTab: outcomeList['reportCommentsTestsTab'],\r\n                                GradeValues: response[4].data.GradeValues\r\n                            },\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\"),\r\n\r\n                            testcomments,\r\n                            reportcomments,\r\n\r\n                            testInitiateTests: outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'],\r\n                            testCommentsTests: outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'],\r\n                            testRepeatTests: outcomeList['testRepeatTests'] && outcomeList['testRepeatTests'],\r\n                            testenforceTests: outcomeList['testenforceTests'] && outcomeList['testenforceTests'],\r\n                            reportCommentsTests: outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'],\r\n                            siteObject: outcomeList['siteObject'] && outcomeList['siteObject'],\r\n                            testCommentObject: outcomeList['testCommentObject'] && outcomeList['testCommentObject'],\r\n                            reportCommentObject: outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'],\r\n\r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            activeTabIndex: 0,\r\n                            action: \"update\",\r\n                            isServiceNeed:true\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTRULETOEDIT\" }));\r\n        }\r\n    }\r\n}\r\nexport function getParameterforEnforce(selectedRecord, masterData, userInfo, activeTabIndex,action) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",\r\n            { 'userinfo': userInfo, \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value, 'tabIndex': activeTabIndex,\r\n            'ntestgrouprulesenginecode':selectedRecord['ntestgrouprulesenginecode'] })\r\n            .then(response => {\r\n                const testGroupTestParameterRulesEngine = constructOptionList(response.data.TestGroupTestParameterRulesEngine || [], \"ntestgrouptestparametercode\",\r\n                    \"sparametersynonym\", undefined, undefined, undefined);\r\n                let testGroupTestParameterRulesEngineList = testGroupTestParameterRulesEngine.get(\"OptionList\");\r\n                masterData['testGroupTestParameterRulesEngine'] = testGroupTestParameterRulesEngineList\r\n                //Start\r\n\r\n                //end\r\n\r\n                // let keylst = Object.keys(response.data.PredefinedValues)\r\n                // keylst.map(ntestgrouptestparametercode => {\r\n                //     response.data.PredefinedValues[ntestgrouptestparametercode] =\r\n                //         constructOptionList(response.data.PredefinedValues[ntestgrouptestparametercode]\r\n                //             || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                //             undefined, undefined).get(\"OptionList\");\r\n                // })\r\n                // masterData['PredefinedValues'] = response.data.PredefinedValues\r\n                // masterData['GradeValues'] = response.data.GradeValues\r\n                // selectedRecord = { ...selectedRecord, 'ParameterRulesEngine': response.data.TestGroupTestParameterRulesEngine }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        action,\r\n                        openmodalsavePopup:false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function getParameterRulesEngine(selectedRecord, masterData, userInfo, activeTabIndex, action,isParameterPopupChanged) {\r\n    return function (dispatch) {\r\n        let additionalInfo = []\r\n    //    dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",\r\n            { 'userinfo': userInfo, \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value, 'tabIndex': activeTabIndex,\r\n        'ntestgrouprulesenginecode':selectedRecord['ntestgrouprulesenginecode'] })\r\n            .then(response => {\r\n                let selectedResultGrade = [];\r\n                let paremterResultcode = [];\r\n                const parameterResults = response.data.TestGroupTestParameterRulesEngine\r\n                let tempparameterResults=[...parameterResults]\r\n                let predefDefaultFlag = false;\r\n                let savedTest = masterData['testParameter'].filter(test => test['ntestgrouptestcode'] === selectedRecord['ntestgrouptestcode'].value)\r\n                if (savedTest.length > 0) {\r\n                    if(savedTest[0]['ParameterRulesEngine']){\r\n                        let savedTestParameterlist = savedTest[0]['ParameterRulesEngine']\r\n                        tempparameterResults.map((param, index) => {\r\n                            let savedParameter = savedTestParameterlist.filter(x => x['ntestgrouptestparametercode'] === param['ntestgrouptestparametercode'])[0]\r\n                            if (savedParameter&&savedParameter['sresult'] !== '') {\r\n                                //delete parameterResults[index]; \r\n                                  let removeIndex=parameterResults.findIndex(x=>x['ntestgrouptestparametercode']===savedParameter['ntestgrouptestparametercode'])\r\n                                  parameterResults.splice(removeIndex,1);\r\n                            }\r\n                        });\r\n                    } \r\n                }\r\n                if(parameterResults.length>0){\r\n                parameterResults.map((param, index) => {\r\n                    selectedResultGrade[index] = {\r\n                        ngradecode:  param.ngradecode\r\n                    };\r\n                    paremterResultcode[index] = param.ntestgrouptestparametercode;\r\n                    // let jsondata=JSON.parse(param.jsondata['value'])\r\n                      if(param.hasOwnProperty('additionalInfo')){\r\n                        additionalInfo[param.ntestgrouptestparametercode]=param['additionalInfo'] \r\n                      }  \r\n                    predefDefaultFlag = false;\r\n                    (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode]) &&\r\n                        response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode].map(predefinedvalue => {\r\n                            // if (predefinedvalue.ndefaultstatus === transactionStatus.YES&&\r\n                            //     predefinedvalue.nneedresultentryalert=== transactionStatus.NO\r\n                            //      && predefinedvalue.nneedsubcodedresult=== transactionStatus.NO) {\r\n                            //     if (!predefDefaultFlag) {\r\n                            //         predefDefaultFlag = true;\r\n                            //         response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                            //             undefined, undefined).get(\"OptionList\");\r\n                                        \r\n                            //     }\r\n                                \r\n                            //   //   if (response.data.TestGroupTestParameterRulesEngine[index].sresult === null) {\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].sresult =predefinedvalue.spredefinedname;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].sresultpredefinedname = predefinedvalue.sresultpredefinedname;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].sfinal = predefinedvalue.spredefinedsynonym;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].editable = true;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].ngradecode = predefinedvalue.ngradecode;\r\n                            //         response.data.TestGroupTestParameterRulesEngine[index].sgradename = predefinedvalue.sgradename; \r\n                            //         if (predefinedvalue.spredefinedcomments && predefinedvalue.spredefinedcomments !== null) {\r\n                            //             response.data.TestGroupTestParameterRulesEngine[index].sresultcomment = predefinedvalue.spredefinedcomments\r\n                            //                 && predefinedvalue.spredefinedcomments;\r\n                            //         }\r\n                            //  //  }\r\n                            // }\r\n                            // else {\r\n                               \r\n                                if (!predefDefaultFlag) {\r\n                                    predefDefaultFlag = true;\r\n                                    response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode] =\r\n                                        constructOptionList(response.data.PredefinedValues[parameterResults[index].ntestgrouptestparametercode]\r\n                                            || [], 'sresultpredefinedname', 'sresultpredefinedname', undefined,\r\n                                            undefined, undefined).get(\"OptionList\");\r\n                                }\r\n\r\n                            //}\r\n\r\n                        });\r\n                        response.data.TestGroupTestParameterRulesEngine[index].sresult=null\r\n                });\r\n            }\r\n            else\r\n            {\r\n              return  toast.info(intl.formatMessage({ id: \"IDS_NOMOREPARAMETERSAVAILABLEFORTHISTEST\" }));\r\n            }\r\n            if(parameterResults.length>0){\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModalPopup: true,\r\n                        modalParameterPopup: action === \"IDS_ADDPARAMETER\" ? true : false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            paremterResultcode\r\n\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n                            selectedResultGrade: selectedResultGrade,\r\n                            ParameterRulesEngine: response.data.TestGroupTestParameterRulesEngine\r\n                        },\r\n                        loading: false,\r\n                        action,\r\n                        openmodalsavePopup:false\r\n                    }\r\n                })\r\n            }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getPredefinedDataRulesEngine(inputData, selectedRecord, currentAlertResultCode, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntestgrouptestpredefcode: inputData.ntestgrouptestpredefcode,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getPredefinedData\", inputParamData)\r\n            .then(response => {\r\n                let showMultiSelectCombo = false;\r\n                let ResultParameter = selectedRecord['ParameterRulesEngine']\r\n                let onlyAlertMsgAvailable = false;\r\n                let testgrouptestpredefsubresult = response.data['testgrouptestpredefsubresult']\r\n                if (inputData['nneedsubcodedresult'] === transactionStatus.YES) {\r\n                    showMultiSelectCombo = true\r\n                    masterData['testgrouptestpredefsubresultOptions'] = testgrouptestpredefsubresult\r\n                }\r\n                else {\r\n                    onlyAlertMsgAvailable = true;\r\n                }\r\n                for (const Parameter of ResultParameter) {\r\n                    if(Parameter.additionalInfoUidata){\r\n                        if (Parameter.additionalInfoUidata || Parameter.additionalInfoUidata === \"\") {\r\n                            let additionalInfoUidata = typeof Parameter.additionalInfoUidata === 'string' ? Parameter.additionalInfoUidata === \"\" ? \"\" : JSON.parse(Parameter.additionalInfoUidata) :\r\n                                Parameter.additionalInfoUidata\r\n                            if (Parameter['ntestgrouptestparametercode'] === currentAlertResultCode &&\r\n                                Parameter['ntestgrouptestpredefcode'] === inputData['ntestgrouptestpredefcode']) {\r\n                                if (Parameter.additionalInfoUidata) {\r\n                                    selectedRecord[\"ntestgrouptestpredefsubcode\"] = additionalInfoUidata['ntestgrouptestpredefsubcode']\r\n                                    break;\r\n                                }\r\n                            } else {\r\n                                if (selectedRecord[\"ntestgrouptestpredefsubcode\"]) {\r\n                                    delete selectedRecord[\"ntestgrouptestpredefsubcode\"]\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n              \r\n\r\n                };\r\n                masterData['salertmessage'] = inputData.salertmessage\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData,\r\n                        showAlertGrid: inputData.nneedresultentryalert === transactionStatus.NO ? false : true,\r\n                        showAlertForPredefined: true,\r\n                        showMultiSelectCombo,\r\n                        onlyAlertMsgAvailable,\r\n                        additionalInfoView: false,\r\n                        selectedRecord,\r\n                        showParameterGrid:false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function getParameterResultValue(combodata, groupIndex, index, PredefinedParameterOptions, selectedRecord, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterResultValue\",\r\n            {\r\n                'userinfo': userInfo, \"nparametertypecode\": combodata['stestname']['item']['nparametertypecode'],\r\n                'ntestgrouptestparametercode': combodata['stestname']['item']['ntestgrouptestparametercode']\r\n            })\r\n            .then(response => {\r\n                const PredefinedParameterRulesEngine = constructOptionList(response.data.PredefinedParameterRulesEngine || [], \"ntestgrouptestpredefcode\",\r\n                    \"spredefinedname\", undefined, undefined, undefined);\r\n                if (PredefinedParameterOptions[groupIndex] === undefined) {\r\n                    PredefinedParameterOptions[groupIndex] = []\r\n                }\r\n                if (PredefinedParameterOptions[groupIndex][index] === undefined) {\r\n                    PredefinedParameterOptions[groupIndex][index] = []\r\n                }\r\n                PredefinedParameterOptions[groupIndex][index] = PredefinedParameterRulesEngine.get(\"OptionList\");\r\n                masterData['PredefinedParameterOptions'] = PredefinedParameterOptions\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function saveExecutionOrder(testGroupRulesEngineList, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/updateExecutionOrder\",\r\n            {\r\n                'userinfo': userInfo,\r\n                'ntestgrouptestcode': testGroupRulesEngineList[0]['ntestgrouptestcode'],\r\n                'TestGroupRulesEngine': testGroupRulesEngineList\r\n            })\r\n            .then(response => {\r\n                masterData['RulesEngine'] = response.data.RulesEngine\r\n                masterData['RulesEngine'].map(x => {\r\n                    if (x['ntestgrouprulesenginecode'] === masterData['SelectedRulesEngine']['ntestgrouprulesenginecode']) {\r\n                        x['selected'] = {};\r\n                        x['selected'] = true;\r\n                    }\r\n                });\r\n                //  masterData['SelectedRulesEngine'] = response.data.SelectedRulesEngine\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        masterList: response.data['RulesEngine'] && sortData(response.data['RulesEngine'], 'ascending', 'nruleexecorder'),\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n//ALPD-4984\r\n\t//Added by Neeraj \r\nexport function getCopyValues ( masterData,ncontrolCode, userInfo) {\r\n    return function (dispatch) {\r\n        if (masterData.SelectedSpecification.napprovalstatus===transactionStatus.APPROVED) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getProductCategory\",\r\n            {'userinfo': userInfo ,ntestcode: masterData.SelectedTest.ntestcode        \r\n            })\r\n            .then(response => {\r\n         const PredefinedParameterRulesEngine = constructOptionList(response.data.getProductCategory || [], \"nproductcatcode\",\r\n                    \"sproductcatname\", undefined, undefined, undefined);\r\n            let  getProductCategory = PredefinedParameterRulesEngine.get(\"OptionList\");\r\n                            dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,openChildModal:true,getProductCategory,\r\n                        loading: false,ncontrolCode:ncontrolCode,\r\n                        screenName:\"IDS_RULESFROM\",operation:\"copy\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }  else {\r\n        toast.warn(intl.formatMessage({ id: \"IDS_SPECIFICATIONMUSTNOTBEDRAFTSTATUS\" }));\r\n    }\r\n}\r\n}\r\n//ALPD-4984\r\n\t//Added by Neeraj \r\nexport function getProfileRootComboServices ( methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getProfileRoot\",\r\n            {'userinfo': methodParam.inputData.userinfo, \r\n                'nproductcatcode':methodParam.inputData.nproductcatcode,\r\n                'nproductcode':methodParam.inputData.nproductcode,\r\n                'ntestcode':methodParam.inputData.ntestcode\r\n            })\r\n            .then(response => {\r\n         const PredefinedParameterRulesEngine = constructOptionList(response.data.getProfileRoot || [], \"ntemplatemanipulationcode\",\r\n                    \"sleveldescription\", undefined, undefined, undefined);\r\n            let  getProfileRoot = PredefinedParameterRulesEngine.get(\"OptionList\");\r\n                            dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal:true,getProfileRoot,\r\n                        loading: false,\r\n                        screenName:\"IDS_RULESFROM\",operation:\"copy\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n}\r\n}\r\n//ALPD-4984\r\n\t//Added by Neeraj \r\nexport function getProductComboServices (methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getProductByProductCat\",\r\n            {'userinfo': methodParam.inputData.userinfo, \r\n                'nproductcatcode':methodParam.inputData.nproductcatcode,'ntestcode':methodParam.inputData.ntestcode})\r\n            .then(response => {\r\n         const PredefinedParameterRulesEngine = constructOptionList(response.data.getProduct || [], \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, undefined);\r\n            let  getProductList = PredefinedParameterRulesEngine.get(\"OptionList\");\r\n                            dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal:true,getProductList,\r\n                        loading: false,\r\n                        screenName:\"IDS_RULESFROM\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n//ALPD-4984\r\n\t//Added by Neeraj \r\nexport function getSpecificationComboServices (methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSpecification\",\r\n            {'userinfo': methodParam.inputData.userinfo, \r\n                'ntemplatemanipulationcode':methodParam.inputData.ntemplatemanipulationcode,'ntestcode':methodParam.inputData.ntestcode})\r\n            .then(response => {\r\n         const PredefinedParameterRulesEngine = constructOptionList(response.data.getSpecification || [], \"nallottedspeccode\",\r\n                    \"sspecname\", undefined, undefined, undefined);\r\n            let  getSpecificationList = PredefinedParameterRulesEngine.get(\"OptionList\");\r\n                            dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal:true,getSpecificationList,\r\n                        loading: false,\r\n                        screenName:\"IDS_RULESFROM\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n//ALPD-4984\r\n\t//Added by Neeraj \r\nexport function getComponentComboServices (methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getComponent\",\r\n            {'userinfo': methodParam.inputData.userinfo, 'nallottedspeccode':methodParam.inputData.nallottedspeccode,\r\n                'ncomponentcode':methodParam.inputData.ncomponentcode,'ntestcode':methodParam.inputData.ntestcode\r\n            })\r\n            .then(response => {\r\n         const PredefinedParameterRulesEngine = constructOptionList(response.data.getComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, undefined);\r\n            let  getComponentList = PredefinedParameterRulesEngine.get(\"OptionList\");\r\n                            dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal:true,getComponentList,\r\n                        loading: false,\r\n                        screenName:\"IDS_RULESFROM\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//ALPD-4984\r\n\t//Added by Neeraj \r\nexport function getRulesTestComboServices (methodParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getTestBasedOnRules\",\r\n            {'userinfo': methodParam.inputData.userinfo, 'selectedComponentCode':methodParam.inputData.selectedComponentCode,\r\n                'selectedSpecCode':methodParam.inputData.selectedSpecCode,'ntestcode':methodParam.inputData.ntestcode,\r\n                'ntestgrouptestcode':methodParam.inputData.ntestgrouptestcode,'ncomponentcode':methodParam.inputData.ncomponentcode,\r\n                'nallottedspeccode':methodParam.inputData.nallottedspeccode,\r\n\r\n            })\r\n            .then(response => {\r\n         const PredefinedParameterRulesEngine = constructOptionList(response.data.getRules || [], \"ntestgrouprulesenginecode\",\r\n                    \"srulename\", undefined, undefined, undefined);\r\n            let  getRulesList = PredefinedParameterRulesEngine.get(\"OptionList\");\r\n                            dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal:true,getRulesList,\r\n                        loading: false,\r\n                        screenName:\"IDS_RULESFROM\"\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}