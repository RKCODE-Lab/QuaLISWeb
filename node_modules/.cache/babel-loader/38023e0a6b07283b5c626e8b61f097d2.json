{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\droparea\\\\Row.jsx\";\nimport React, { useRef } from \"react\";\nimport { useDrag } from \"react-dnd\";\nimport { ROW } from \"./constants\";\nimport DropArea from \"./DropArea.jsx\";\nimport Column from \"./Column\";\nimport \"./styles.css\";\nconst style = {};\n\nconst DynamicRow = ({\n  data,\n  components,\n  baselength,\n  handleDrop,\n  className,\n  path,\n  indexrow,\n  onclickcomponent,\n  selectedFieldRecord\n}) => {\n  const ref = useRef(null);\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ROW,\n    item: {\n      type: ROW,\n      children: data.children,\n      path\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(ref);\n\n  const renderColumn = (column, currentPath) => {\n    return /*#__PURE__*/React.createElement(Column, {\n      key: column.id,\n      data: column,\n      baselength: baselength,\n      components: components,\n      handleDrop: handleDrop,\n      path: currentPath,\n      onclickcomponent: onclickcomponent,\n      selectedFieldRecord: selectedFieldRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    });\n  };\n\n  const classes = {\n    1: \"one\",\n    2: \"two\",\n    3: \"three\",\n    4: \"four\"\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    style: { ...style,\n      opacity\n    },\n    className: `base draggable row ${data.children && data.children.length > 0 ? classes[data.children.length] : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"columns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }, data.children.map((column, index) => {\n    const currentPath = `${path}-${index}`;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: column.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, data.children.length < 3 && /*#__PURE__*/React.createElement(DropArea, {\n      data: {\n        path: currentPath,\n        childrenCount: data.children.length\n      },\n      onDrop: handleDrop,\n      className: \"horizontalDrag\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 44\n      }\n    }), renderColumn(column, currentPath));\n  }), data.children.length < 3 && /*#__PURE__*/React.createElement(DropArea, {\n    data: {\n      path: `${path}-${data.children.length}`,\n      childrenCount: data.children.length\n    },\n    onDrop: handleDrop,\n    className: \"horizontalDrag\",\n    isLast: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default DynamicRow;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/droparea/Row.jsx"],"names":["React","useRef","useDrag","ROW","DropArea","Column","style","DynamicRow","data","components","baselength","handleDrop","className","path","indexrow","onclickcomponent","selectedFieldRecord","ref","isDragging","drag","type","item","children","collect","monitor","opacity","renderColumn","column","currentPath","id","classes","length","map","index","childrenCount"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { ROW } from \"./constants\";\r\nimport DropArea from \"./DropArea.jsx\";\r\nimport Column from \"./Column\";\r\nimport \"./styles.css\"\r\n\r\nconst style = {};\r\nconst DynamicRow = ({ data, components, baselength, handleDrop, className, path, indexrow, onclickcomponent, selectedFieldRecord }) => {\r\n  const ref = useRef(null);\r\n\r\n  const [{ isDragging }, drag] = useDrag({\r\n\r\n    type: ROW,\r\n    item: {\r\n      type: ROW,\r\n      children: data.children,\r\n      path\r\n    },\r\n    collect: monitor => ({\r\n      isDragging: monitor.isDragging()\r\n    })\r\n  });\r\n\r\n  const opacity = isDragging ? 0 : 1;\r\n  drag(ref);\r\n\r\n  const renderColumn = (column, currentPath) => {\r\n    return (\r\n      <Column\r\n        key={column.id}\r\n        data={column}\r\n        baselength={baselength}\r\n        components={components}\r\n        handleDrop={handleDrop}\r\n        path={currentPath}\r\n        onclickcomponent={onclickcomponent}\r\n        selectedFieldRecord={selectedFieldRecord}\r\n      />\r\n    );\r\n  };\r\n  const classes = {\r\n    1 :\"one\",\r\n    2: \"two\",\r\n    3: \"three\",\r\n    4: \"four\"\r\n  }\r\n\r\n  return (\r\n    <div ref={ref} style={{ ...style, opacity }} className={`base draggable row ${data.children && data.children.length > 0 ? classes[data.children.length] : \"\"}`}>\r\n      {/* {\"Row\"}{indexrow} */}\r\n      <div className=\"columns\">\r\n        {data.children.map((column, index) => {\r\n          const currentPath = `${path}-${index}`;\r\n\r\n          return (\r\n            <React.Fragment key={column.id}>\r\n              {data.children.length < 3 && <DropArea\r\n                data={{\r\n                  path: currentPath,\r\n                  childrenCount: data.children.length,\r\n                }}\r\n                onDrop={handleDrop}\r\n                className=\"horizontalDrag\"\r\n              />\r\n              }\r\n              {renderColumn(column, currentPath)}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n        {data.children.length < 3 &&\r\n          <DropArea\r\n            data={{\r\n              path: `${path}-${data.children.length}`,\r\n              childrenCount: data.children.length\r\n            }}\r\n            onDrop={handleDrop}\r\n            className=\"horizontalDrag\"\r\n            isLast\r\n          />\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default DynamicRow;\r\n"]},"metadata":{},"sourceType":"module"}