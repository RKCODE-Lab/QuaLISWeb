{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\myjobs\\\\MyJobs.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { faBolt, faCheck, faEye, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\nimport { ContentPanel } from '../../components/App.styles';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../testmanagement/testmaster-styled'; //import SplitPane from \"react-splitter-layout\";\n\nimport SplitterLayout from \"react-splitter-layout\";\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { getMyJobsubSampleDetail, getMyJobTestDetail, getMJTestChildTabDetail, performAction, updateStore, updateDecision, getRegType, getRegSubType, getTestStatus, getSection, getMyJobsSample, getStatusCombo, validateEsignCredential, crudMaster, validateEsignforApproval, getAppConfigVersion, getAcceptTest, filterTransactionList, checkListRecord, generateCOAReport, getMJSampleChildTabDetail, getAttachmentCombo, viewAttachment, deleteAttachment, getCommentsCombo, previewSampleReport, getEnforceCommentsHistory, reportGenerate } from '../../actions';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component'; //import ApprovalResultsTab from './ApprovalResultsTab';\n\nimport { getControlMap, showEsign, sortData, constructOptionList, getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport MyJobsFilter from './MyJobsFilter';\nimport { designProperties, transactionStatus, RegistrationType, RegistrationSubType } from '../../components/Enumeration';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport MyJobsSampleInfoGrid from './MyJobsSampleInfoGrid';\nimport MyJobsSampleInfoView from './MyJobsSampleInfoView'; //import ApprovalInstrumentTab from './ApprovalInstrumentTab'\n\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport Esign from '../audittrail/Esign';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal'; //mport EditApprovalParameter from './EditApprovalParameter';\n//import ApprovalHistoryTab from './ApprovalHistoryTab';\n//import SampleApprovalHistory from './SampleApprovalHistory';\n//import ResultChangeHistoryTab from './ResultChangeHistoryTab';\n//import ApprovalTask from './ApprovalTask';\n\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions'; //import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport CustomPopOver from '../../components/customPopover';\nimport ScrollBar from 'react-perfect-scrollbar'; //import ApprovalPrintHistoryTab from './ApprovalPrintHistoryTab';\n//import ApprovalHistoryTab from './ApprovalHistoryTab';\n\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DataGrid from '../../components/data-grid/data-grid.component'; //import ReportHistoryTab from './ReportHistoryTab';\n// import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass MyJobs extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subSampleSkip: e.skip,\n        subSampleTake: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.showAPSampleinfo = () => {\n      this.setState({\n        showSample: true,\n        showTest: false\n      });\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      console.log(\"val\", val);\n      this.setState({\n        initialVerticalWidth: val - 150\n      });\n    };\n\n    this.downloadReport = input => {\n      let inputParam = {\n        inputData: {\n          selectedRecord: { ...input.inputData\n          },\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"approval\",\n        operation: \"view\",\n        methodUrl: \"Report\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.MJ_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\"); // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n\n      if (this.state.showTest) {\n        // testTabMap.set(\"IDS_RESULTS\", <ApprovalResultsTab\n        //     userInfo={this.props.Login.userInfo}\n        //     masterData={this.props.Login.masterData}\n        //     inputParam={this.props.Login.inputParam}\n        //     dataState={this.state.resultDataState}\n        //     dataStateChange={this.testDataStateChange}\n        //     screenName=\"IDS_RESULTS\"\n        //     controlMap={this.state.controlMap}\n        //     userRoleControlRights={this.state.userRoleControlRights}\n        //     getStatusCombo={this.props.getStatusCombo}\n        //     selectedId={this.props.Login.masterData.selectedParamId}\n        //     viewFile={this.props.viewAttachment}\n        //     checkListRecord={this.props.checkListRecord}\n        //     getEnforceCommentsHistory={this.props.getEnforceCommentsHistory}\n        // />)\n        // testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\n        //     userInfo={this.props.Login.userInfo}\n        //     masterData={this.props.Login.masterData}\n        //     inputParam={this.props.Login.inputParam}\n        //     dataState={this.state.instrumentDataState}\n        //     dataStateChange={this.testDataStateChange}\n        //     screenName=\"IDS_INSTRUMENT\"\n        //     controlMap={this.state.controlMap}\n        //     userRoleControlRights={this.state.userRoleControlRights}\n        //     selectedId={null}\n        // />)\n        // testTabMap.set(\"IDS_MATERIAL\", <ApprovalResultsTab\n        //     userInfo={this.props.Login.userInfo}\n        //     masterData={this.props.Login.masterData}\n        //     inputParam={this.props.Login.inputParam}\n        //     dataState={this.state.dataState}\n        //     dataStateChange={this.testDataStateChange}\n        //     screenName=\"IDS_MATERIAL\"\n        //     controlMap={this.state.controlMap}\n        //     userRoleControlRights={this.state.userRoleControlRights}\n        //     selectedId={null}\n        // />)\n        // testTabMap.set(\"IDS_TASK\", <ApprovalTask\n        //     userInfo={this.props.Login.userInfo}\n        //     ResultUsedTasks={this.props.Login.masterData.ResultUsedTasks}\n        //     inputParam={this.props.Login.inputParam}\n        //     dataState={this.state.taskDataState}\n        //     dataStateChange={this.testDataStateChange}\n        //     screenName=\"IDS_TASK\"\n        //     controlMap={this.state.controlMap}\n        //     userRoleControlRights={this.state.userRoleControlRights}\n        //     selectedId={null}\n        // />)\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n          screenName: \"IDS_TESTATTACHMENTS\",\n          selectedMaster: selectedTestList,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n          deleteRecord: this.props.deleteAttachment,\n          fetchRecord: this.props.getAttachmentCombo,\n          onSaveClick: this.onAttachmentSaveClick,\n          masterList: selectedTestList,\n          masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n          addName: \"AddTestAttachment\",\n          editName: \"EditTestAttachment\",\n          deleteName: \"DeleteTestAttachment\",\n          viewName: \"ViewTestAttachment\",\n          methodUrl: \"TestAttachment\",\n          userInfo: this.props.Login.userInfo,\n          nsubsampleneed: this.props.Login.masterData.nneedsubsample,\n          subFields: [{\n            [designProperties.VALUE]: \"stestsynonym\"\n          }, {\n            [designProperties.VALUE]: \"dcreateddate\"\n          }],\n          deleteParam: {\n            methodUrl: \"TestAttachment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTATTACHMENTS\"\n          },\n          editParam: {\n            methodUrl: \"TestAttachment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTATTACHMENTS\",\n            masterList: selectedTestList\n          },\n          selectedListName: \"IDS_TESTS\",\n          displayName: \"stestsynonym\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1637,\n            columnNumber: 51\n          }\n        }));\n        testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n          screenName: \"IDS_TESTCOMMENTS\",\n          selectedMaster: selectedTestList,\n          onSaveClick: this.onCommentsSaveClick,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          Comments: this.props.Login.masterData.RegistrationTestComment || [],\n          fetchRecord: this.props.getCommentsCombo,\n          masterList: selectedTestList,\n          masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n          addName: \"AddTestComment\",\n          editName: \"EditTestComment\",\n          deleteName: \"DeleteTestComment\",\n          methodUrl: \"TestComment\",\n          isTestComment: false,\n          primaryKeyField: \"ntestcommentcode\",\n          dataState: this.state.testCommentDataState,\n          dataStateChange: this.testDataStateChange,\n          deleteParam: {\n            methodUrl: \"TestComment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTCOMMENTS\"\n          },\n          editParam: {\n            methodUrl: \"TestComment\",\n            ntransactiontestcode,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            esignRights: this.props.Login.userRoleControlRights,\n            screenName: \"IDS_TESTCOMMENTS\",\n            operation: \"update\",\n            masterList: selectedTestList,\n            ncontrolCode: editTestCommentsId\n          },\n          selectedListName: \"IDS_TESTS\",\n          displayName: \"stestsynonym\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1680,\n            columnNumber: 48\n          }\n        })); // testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\n        //     userInfo={this.props.Login.userInfo}\n        //     ApprovalResultChangeHistory={this.props.Login.masterData.ApprovalResultChangeHistory}\n        //     inputParam={this.props.Login.inputParam}\n        //     dataState={this.state.resultChangeDataState}\n        //     dataStateChange={this.testDataStateChange}\n        //     screenName=\"IDS_RESULTCHANGEHISTORY\"\n        //     controlMap={this.state.controlMap}\n        //     userRoleControlRights={this.state.userRoleControlRights}\n        //     selectedId={null}\n        // />)\n        // testTabMap.set(\"IDS_TESTAPPROVALHISTORY\",\n        //     <ApprovalHistoryTab\n        //         userInfo={this.props.Login.userInfo}\n        //         ApprovalHistory={this.props.Login.masterData.ApprovalHistory}\n        //         inputParam={this.props.Login.inputParam}\n        //         dataState={this.state.historyDataState}\n        //         dataStateChange={this.testDataStateChange}\n        //         screenName=\"IDS_TESTAPPROVALHISTORY\"\n        //         controlMap={this.state.controlMap}\n        //         userRoleControlRights={this.state.userRoleControlRights}\n        //         selectedId={null}\n        //     />)\n      }\n\n      return testTabMap;\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n\n      if (value === 0 || value === 0.0) {\n        selectedRecord[name] = \"\";\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            MJSelectedTest: this.props.Login.masterData.MJSelectedTest,\n            ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? String(this.props.Login.masterData.MJSelectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            historyDataState: this.state.historyDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState\n          };\n          this.props.getMJTestChildTabDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.MJSelectedSample,\n          npreregno: this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getMJSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.checkRetestAction = (action, ncontrolCode) => {\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\n\n      if (selectedTestList.length > 0) {\n        if (action.ntransactionstatus === transactionStatus.RETEST) {\n          if (this.props.Login.masterData.retestcount && this.props.Login.masterData.retestcount > 1) {\n            if (selectedTestList.length > 1) {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_SELECTONETESTONLY\"\n              }));\n            } else {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  action,\n                  masterData: this.props.Login.masterData,\n                  openChildModal: true,\n                  screenName: \"IDS_RETESTCOUNT\",\n                  operation: \"dynamic\"\n                }\n              };\n              this.props.updateStore(updateInfo);\n            }\n          } else {\n            this.performTestActions(action, ncontrolCode);\n          }\n        } else {\n          this.performTestActions(action, ncontrolCode);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTEST\"\n        }));\n      }\n    };\n\n    this.performTestActions = (action, ncontrolCode) => {\n      if (action.ntransactionstatus === transactionStatus.RETEST && this.state.selectedRecord && this.state.selectedRecord.retestcount > this.props.Login.masterData.retestcount) {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_MAX\"\n        }) + \": \" + this.props.Login.masterData.retestcount);\n      } else {\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let ntransCode = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n\n        if (ntransCode === transactionStatus.ALL) {\n          ntransCode = this.props.Login.masterData.FilterStatus.map(status => status.ntransactionstatus).join(\",\");\n        } else {\n          ntransCode = ntransCode + \",\" + action.ntransactionstatus;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = this.state;\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\n        testList = testList.slice(testskip, testskip + testtake);\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\n        const inputParam = {\n          inputData: {\n            'performaction': {\n              npreregno: selectedTestList.map(sample => sample.npreregno).join(\",\"),\n              ntransactionsamplecode: this.props.Login.masterData.MJSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n              ntransactiontestcode: selectedTestList.map(test => test.ntransactiontestcode).join(\",\"),\n              nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n              ntestcode: this.props.Login.masterData.realTestValue && this.props.Login.masterData.realTestValue.ntestcode,\n              nTransStatus: action.ntransactionstatus,\n              ntransactionstatus: String(-1),\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\n              nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nflag: 2,\n              ntype: 1,\n              userinfo: this.props.Login.userInfo,\n              MJSelectedSample: this.props.Login.masterData.MJSelectedSample,\n              MJSelectedSubSample: this.props.Login.masterData.MJSelectedSubSample,\n              MJSelectedTest: this.props.Login.masterData.MJSelectedTest,\n              retestcount: action.ntransactionstatus === transactionStatus.RETEST ? this.state.selectedRecord ? this.state.selectedRecord.retestcount || 1 : 1 : undefined,\n              ncontrolCode,\n              checkBoxOperation: 3,\n              ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n            },\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          methodUrl: \"performaction\",\n          postParamList: this.postParamList\n        };\n\n        if (action.nesignneed === transactionStatus.YES) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openChildModal: true,\n              screenName: \"performaction\",\n              operation: \"dynamic\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.performAction(inputParam);\n        }\n      }\n    };\n\n    this.updateDecision = action => {\n      let ntransCode = this.props.Login.masterData.realFilterStatusValue.ntransactionstatus;\n\n      if (ntransCode === transactionStatus.ALL) {\n        ntransCode = this.props.Login.masterData.FilterStatus.map(status => status.ntransactionstatus).join(\",\");\n      }\n\n      let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n      let {\n        skip,\n        take\n      } = this.state;\n      let sampleList = [...this.props.Login.masterData.MJ_SAMPLE];\n      sampleList = sampleList.splice(skip, skip + take);\n      let selectedsampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (selectedsampleList.length > 0) {\n        const inputData = {\n          'updatedecision': {\n            npreregno: selectedsampleList.map(sample => sample.npreregno).join(\",\"),\n            nTransStatus: action.ntransactionstatus,\n            ntransactionstatus: String(ntransCode),\n            dfrom: obj.fromDate,\n            dto: obj.toDate,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n            ntestcode: this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.ntestcode : 0,\n            nflag: 1,\n            userinfo: this.props.Login.userInfo,\n            napprovalversioncode: String(selectedsampleList[0].napprovalversioncode),\n            napprovalconfigcode: selectedsampleList[0].napprovalconfigcode,\n            selectedSample: this.props.Login.masterData.selectedSample\n          },\n          userinfo: this.props.Login.userInfo\n        };\n        let inputParam = {\n          postParamList: this.postParamList,\n          inputData,\n          masterData: this.props.Login.masterData\n        };\n\n        if (action.nesignneed === transactionStatus.YES) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openChildModal: true,\n              screenName: \"updatedecision\",\n              operation: \"decision\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.updateDecision(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLE\"\n        }));\n      }\n    };\n\n    this.onFilterComboChange = (comboData, fieldName) => {\n      if (comboData) {\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        let inputParamData = {};\n\n        if (fieldName === 'nsampletypecode') {\n          if (comboData.value !== this.props.Login.masterData.realSampleTypeValue.nsampletypecode) {\n            inputParamData = {\n              nflag: 2,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: this.props.Login.masterData,\n              realSampleTypeValue: comboData.item\n            };\n            this.props.getRegType(inputParamData);\n          }\n        } else if (fieldName === 'nregtypecode') {\n          if (comboData.value !== this.props.Login.masterData.realRegTypeValue.nregtypecode) {\n            inputParamData = {\n              nflag: 3,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: this.props.Login.masterData,\n              realRegTypeValue: comboData.item\n            };\n            this.props.getRegSubType(inputParamData);\n          }\n        } else if (fieldName === 'nregsubtypecode') {\n          if (comboData.value !== this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) {\n            let inputData = {\n              nflag: 4,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: comboData.value,\n              userinfo: this.props.Login.userInfo\n            };\n            inputParamData = {\n              inputData,\n              masterData: { ...this.props.Login.masterData,\n                realRegSubTypeValue: comboData.item\n              }\n            };\n            this.props.getAppConfigVersion(inputParamData);\n          }\n        } else if (fieldName === 'napproveconfversioncode') {\n          if (comboData.value !== this.props.Login.masterData.realApprovalVersionValue.napproveconfversioncode) {\n            inputParamData = {\n              nflag: 4,\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                realApprovalVersionValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n              nsectioncode: this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.realUserSectionValue.nsectioncode\n            };\n            this.props.getFilterStatus(inputParamData);\n          }\n        } else if (fieldName === 'nsectioncode') {\n          if (comboData.value !== this.props.Login.masterData.realUserSectionValue.nsectioncode) {\n            inputParamData = {\n              nflag: 5,\n              fromdate: obj.fromDate,\n              todate: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\n              nsectioncode: comboData.value === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : comboData.value,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                realUserSectionValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n              ntransactionstatus: JSON.stringify(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus),\n              stransactionstatus: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.realFilterStatusValue.ntransactionstatus\n            };\n            this.props.getSection(inputParamData);\n          }\n        } else if (fieldName === 'ntransactionstatus') {\n          if (comboData.value !== this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) {\n            let masterData = { ...this.props.Login.masterData,\n              realFilterStatusValue: comboData.item\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else if (fieldName === 'ntestcode') {\n          if (comboData.value !== this.props.Login.masterData.realTestValue.ntestcode) {\n            let masterData = { ...this.props.Login.masterData,\n              realTestValue: comboData.item\n            };\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else {\n          if (comboData.value !== this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) {\n            inputParamData = {\n              dfrom: obj.fromDate,\n              dto: obj.toDate,\n              nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n              nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n              nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n              napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\n              userinfo: this.props.Login.userInfo,\n              masterData: { ...this.props.Login.masterData,\n                FilterStatusValue: comboData.item\n              },\n              RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n              ntransactionstatus: comboData.value,\n              stransactionstatus: comboData.value === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : comboData.value,\n              nsectioncode: this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.realUserSectionValue.nsectioncode\n            };\n            this.props.getTestStatus(inputParamData);\n          }\n        }\n      }\n    };\n\n    this.onComboChange = comboData => {\n      if (comboData) {\n        let masterData = { ...this.props.Login.masterData,\n          GradeValue: comboData\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onInputOnChange = event => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      let dfrom = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date();\n      let dto = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date();\n      let obj = {};\n\n      if (dateName === 'fromDate') {\n        obj = convertDateValuetoString(dateValue, dto, this.props.Login.userInfo);\n        dfrom = obj.fromDate;\n        dto = obj.toDate;\n      } else {\n        obj = convertDateValuetoString(dfrom, dateValue, this.props.Login.userInfo);\n        dfrom = obj.fromDate;\n        dto = obj.toDate;\n      }\n\n      let inputParam = {\n        inputData: {\n          nflag: 2,\n          nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n          dfrom: String(dfrom),\n          dto: String(dto),\n          userinfo: this.props.Login.userInfo\n        },\n        masterData: this.props.Login.masterData\n      };\n      this.props.getAppConfigVersion(inputParam);\n    };\n\n    this.changeMandatory = (event, dataItem) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let value = event.currentTarget.checked ? transactionStatus.YES : transactionStatus.NO;\n      selectedRecord[\"approvalParameterEdit\"] = { ...selectedRecord[\"approvalParameterEdit\"],\n        [dataItem.ntransactionresultcode]: value\n      };\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      } = this.props.Login.masterData;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      };\n      let inputData = {\n        nneedsubsample: realRegSubTypeValue && realRegSubTypeValue.nneedsubsample || false,\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        ntransactionstatus: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\n        // ntransactionstatus: ((realFilterStatusValue && realFilterStatusValue.ntransactionstatus !== undefined) || realFilterStatusValue.ntransactionstatus !== '0') ? String(realFilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: realApprovalVersionValue ? realApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: String(realApprovalVersionValue ? realApprovalVersionValue.napprovalconfigversioncode : 1),\n        // napprovalversioncode: realApprovalVersionValue && realApprovalVersionValue.napprovalconfigversioncode ? String(realApprovalVersionValue.napprovalconfigversioncode) : null,\n        nsectioncode: realUserSectionValue ? realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(realUserSectionValue.nsectioncode) : null,\n        ntestcode: realTestValue && realTestValue.ntestcode ? realTestValue.ntestcode : -1,\n        userinfo: this.props.Login.userInfo,\n        activeTestTab: this.props.Login.activeTestTab || \"\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"\",\n        checkBoxOperation: 3,\n        ntype: 2,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.ntransactionstatus !== -1 && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== -1 && realUserSectionValue.nsectioncode !== null && realTestValue.ntestcode !== -1) {\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          resultDataState: this.state.resultDataState,\n          instrumentDataState: this.state.instrumentDataState,\n          materialDataState: this.state.materialDataState,\n          taskDataState: this.state.taskDataState,\n          documentDataState: this.state.documentDataState,\n          resultChangeDataState: this.state.resultChangeDataState,\n          testCommentDataState: this.state.testCommentDataState,\n          historyDataState: this.state.historyDataState,\n          samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n          sampleHistoryDataState: this.state.sampleHistoryDataState\n        };\n        this.props.getMyJobsSample(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo); //let realFromDate = obj.fromDate;\n      //  let realToDate = obj.toDate;\n\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate); // let realFromDate = new Date(this.props.Login.masterData.fromDate)\n      // let realToDate = new Date(this.props.Login.masterData.toDate)\n\n      let realSampleTypeValue = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue;\n      let realRegTypeValue = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue;\n      let realRegSubTypeValue = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue;\n      let realFilterStatusValue = this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue;\n      let realApprovalVersionValue = this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue;\n      let realUserSectionValue = this.props.Login.masterData.realUserSectionValue && this.props.Login.masterData.realUserSectionValue;\n      let realTestValue = this.props.Login.masterData.realTestValue && this.props.Login.masterData.realTestValue;\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApprovalVersionValue,\n        realUserSectionValue,\n        realTestValue\n      };\n      let inputData = {\n        // npreregno: \"0\",\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\n        nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\n        ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined || this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== '0' ? String(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : null,\n        nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\n        ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        userinfo: this.props.Login.userInfo,\n        activeTestTab: this.props.Login.activeTestTab,\n        activeSampleTab: this.props.Login.activeSampleTab,\n        checkBoxOperation: 3,\n        ntype: 2,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\" && realFilterStatusValue.sfilterstatus !== null && inputData.ntestcode !== undefined) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate)\n        inputData['fromdate'] = obj.fromDate;\n        inputData['todate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          resultDataState: this.state.resultDataState,\n          instrumentDataState: this.state.instrumentDataState,\n          materialDataState: this.state.materialDataState,\n          taskDataState: this.state.taskDataState,\n          documentDataState: this.state.documentDataState,\n          resultChangeDataState: this.state.resultChangeDataState,\n          testCommentDataState: this.state.testCommentDataState,\n          historyDataState: this.state.historyDataState,\n          samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n          sampleHistoryDataState: this.state.sampleHistoryDataState\n        };\n        this.props.getMyJobsSample(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_RESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_MATERIAL\":\n          this.setState({\n            materialDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TASK\":\n          this.setState({\n            taskDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          this.setState({\n            documentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          this.setState({\n            resultChangeDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          this.setState({\n            historyDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SAMPLEINFO\":\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SAMPLEAPPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_PRINTHISTORY\":\n          this.setState({\n            samplePrintHistoryDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_REPORTHISTORY\":\n          this.setState({\n            reportHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let ok = true;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.operation === 'enforce') {\n        inputData[\"enforcestatus\"] = {\n          ngradecode: this.props.Login.masterData.GradeValue.value || -1,\n          ntransactiontestcode: this.state.selectedRecord.ntransactiontestcode,\n          ntransactionresultcode: this.state.selectedRecord.ntransactionresultcode,\n          senforcestatuscomment: this.state.selectedRecord.senforcestatuscomment || \"\",\n          selectedTestCode: this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\")\n        };\n        inputParam = {\n          methodUrl: \"EnforceStatus\",\n          classUrl: 'approval',\n          inputData: inputData,\n          postParam: {\n            selectedObject: \"MJSelectedTest\",\n            primaryKeyField: \"ntransactiontestcode\"\n          },\n          operation: \"update\"\n        };\n      } else if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord: this.state.selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation\n        };\n        inputParam = onSaveSampleAttachment(saveParam);\n      } else {\n        let approvalparameter = [];\n\n        if (this.state.selectedRecord.approvalParameterEdit) {\n          Object.keys(this.state.selectedRecord.approvalParameterEdit).map(key => approvalparameter.push({\n            ntransactionresultcode: key,\n            nreportmandatory: this.state.selectedRecord.approvalParameterEdit[key]\n          }));\n          inputData[\"approvalparameter\"] = approvalparameter;\n          inputParam = {\n            methodUrl: \"ApprovalParameter\",\n            classUrl: 'approval',\n            inputData: inputData,\n            postParam: {\n              selectedObject: \"MJSelectedTest\",\n              primaryKeyField: \"ntransactiontestcode\"\n            },\n            operation: \"update\"\n          };\n        } else {\n          ok = false;\n          this.handleClose();\n        }\n      }\n\n      if (ok) {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openChildModal: true,\n              operation: this.props.Login.operation,\n              screenName: \"IDS_ENFORCESTATUS\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openChildModal\");\n        }\n      }\n    };\n\n    this.handleClose = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let templateData = this.props.Login.templateData;\n      let operation = this.props.Login.operation;\n      let openTemplateModal = this.props.Login.openTemplateModal;\n\n      if (this.props.Login.loadEsign) {\n        if (operation === \"delete\" || operation === \"dynamic\" || operation === 'reportgeneration' || this.props.Login.operation === 'decision') {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n          templateData = {};\n          operation = undefined;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openTemplateModal = false;\n        openModal = false;\n        openChildModal = false;\n        selectedRecord = {};\n        templateData = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          templateData,\n          selectedParamId: null,\n          operation,\n          openTemplateModal\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData,\n        operation: this.props.Login.operation\n      };\n\n      if (this.props.Login.operation === 'dynamic' || this.props.Login.operation === 'reportgeneration' || this.props.Login.operation === 'decision') {\n        this.props.validateEsignforApproval(inputParam, \"openChildModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.MJ_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.MJSelectedSample, \"npreregno\");\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let {\n          testskip,\n          testtake\n        } = this.state;\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\n        testList = testList.slice(testskip, testskip + testtake);\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, selectedTestList);\n      } // if (selectedTestList.length > 0) {\n\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      } //} else {\n      // toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\n      // }\n\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let {\n        testskip,\n        testtake,\n        skip,\n        take\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\n      let sampleList = this.props.Login.masterData.searchedSample ? [...this.props.Login.masterData.searchedSample] : [...this.props.Login.masterData.MJ_SAMPLE];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.MJSelectedSample, \"npreregno\");\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let ok = true;\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n\n        if (selectedSampleList.length > 0) {\n          inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\n        } else {\n          ok = false;\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n\n        if (selectedTestList.length > 0) {\n          inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n        } else {\n          ok = false;\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      }\n\n      if (ok) {\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              operation: this.props.Login.operation,\n              screenName: this.props.Login.screenName\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n        }\n      }\n    };\n\n    this.generateCOAReport = (inputData, ncontrolCode) => {\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        let inputParam = {\n          reporparam: inputData\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openChildModal: true,\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: \"reportgeneration\",\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.generateCOAReport(inputData);\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.formRef = React.createRef();\n    this.state = {\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      instrumentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'ssamplearno'\n        }]\n      },\n      materialDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      taskDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      // testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\n      testCommentDataState: {},\n      documentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      resultChangeDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      sampleHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      reportHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      samplePrintHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        group: [{\n          field: 'sarno'\n        }]\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      oldComboData: {},\n      selectedRecord: {},\n      operation: \"\",\n      screenName: undefined,\n      showSample: false,\n      showTest: true,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      firstPane: 0,\n      paneHeight: 0,\n      secondPaneHeight: 0,\n      tabPane: 0,\n      SampletypeList: [],\n      RegistrationTypeList: [],\n      RegistrationSubTypeList: [],\n      FilterStatusList: [],\n      ConfigVersionList: [],\n      UserSectionList: [],\n      TestList: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12],\n      splitChangeWidthPercentage: 22,\n      subSampleSkip: 0,\n      subSampleTake: 5\n    }; //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.multilingualMsg !== undefined && props.Login.multilingualMsg !== \"\") {\n      toast.warn(props.intl.formatMessage({\n        id: props.Login.multilingualMsg\n      }));\n      props.Login.multilingualMsg = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  } // onSecondaryPaneSizeChange = (e, val) => {\n  //     this.setState({\n  //         firstPane: e - val,\n  //         tabPane: e - 80,\n  //         childPane: this.state.parentHeight - e - 80\n  //     })\n  // }\n\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  showAPTestList() {\n    this.setState({\n      showTest: true,\n      showSample: false\n    });\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  render() {\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo); // let obj = this.covertDatetoString(this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date(), this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date())\n\n    let sampleSearchField = [\"sarno\", \"dregdate\", \"sdecisionstatus\", \"ssampletypestatus\", \"smanuflotno\", \"smanufname\", \"smanufsitename\", \"sproductcatname\", \"sproductname\", \"sspecname\"];\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\n      sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\", \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\", \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"];\n    }\n\n    const filterSampleParam = {\n      inputListName: \"MJ_SAMPLE\",\n      selectedObject: \"MJSelectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"myjobs/getMyJobsSubSampleDetails\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTests\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode || -1,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined ? String(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : null,\n        nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\n        ntestcode: this.props.Login.masterData.TestValue && this.props.Login.masterData.TestValue.ntestcode,\n        dfrom: obj.fromDate,\n        dto: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"dregdate\", \"sdecisionstatus\", \"ssampletypestatus\", \"smanuflotno\", \"smanufname\", \"smanufsitename\", \"sproductcatname\", \"sproductname\", \"sspecname\"],\n      searchFieldList: sampleSearchField,\n      changeList: [\"MJ_SUBSAMPLE\", \"MJ_TEST\", \"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"SampleApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"MJSelectedSample\", \"MJSelectedSubSample\", \"MJSelectedTest\", \"PrintHistory\", \"COAHistory\"]\n    };\n    const filterSubSampleParam = {\n      inputListName: \"MJ_SUBSAMPLE\",\n      selectedObject: \"MJSelectedSubSample\",\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTests\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        npreregno: this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode || -1,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        ntransactionstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== undefined ? String(this.props.Login.masterData.FilterStatusValue.ntransactionstatus) : \"-1\",\n        napprovalconfigcode: this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigcode || -1 : null,\n        napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue && this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode : null,\n        nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\n        dfrom: obj.fromDate,\n        dto: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"ssamplearno\"],\n      changeList: [\"MJ_TEST\", \"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"MJSelectedSubSample\", \"MJSelectedTest\"]\n    };\n    const filterTestParam = {\n      inputListName: \"MJ_TEST\",\n      selectedObject: \"MJSelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n      },\n      isSingleSelect: false,\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"smethodname\", \"ssectionname\", \"ssourcename\", \"stransdisplaystatus\", \"sinstrumentcatname\", \"stestname\"],\n      changeList: [\"ApprovalParameter\", \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"SampleApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"MJSelectedTest\"]\n    };\n    let AP_SampleList = this.props.Login.masterData.MJ_SAMPLE ? sortData(this.props.Login.masterData.MJ_SAMPLE, 'descending', 'npreregno') : [];\n    let AP_SubSampleList = this.props.Login.masterData.MJ_SUBSAMPLE ? this.props.Login.masterData.MJ_SUBSAMPLE : [];\n    let AP_TestList = this.props.Login.masterData.MJ_TEST ? this.props.Login.masterData.MJ_TEST : [];\n    let decisionStatus = this.props.Login.masterData.decisionStatus ? sortData(this.props.Login.masterData.decisionStatus, 'ascending', 'ntransactionstatus') : []; // let actionStatus = this.props.Login.masterData.actionStatus ? sortData(this.props.Login.masterData.actionStatus, 'descending', 'ntransactionstatus') : [];\n\n    let subSampleGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\n      ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\n      napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      screenName: this.props.Login.screenName,\n      searchSubSampleRef: this.searchSubSampleRef,\n      searchTestRef: this.searchTestRef,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      subSampleSkip: this.state.subSampleSkip,\n      subSampleTake: this.state.subSampleTake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      historyDataState: this.state.historyDataState,\n      samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n      sampleHistoryDataState: this.state.sampleHistoryDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n    };\n    let testGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      npreregno: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\"),\n      napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\n      nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\n      ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\n      dfrom: obj.fromDate,\n      dto: obj.toDate,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\n      screenName: this.props.Login.screenName,\n      searchTestRef: this.searchTestRef,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n    };\n    let testChildGetParam = {\n      masterData: this.props.Login.masterData,\n      ntransactionstatus: String(this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      npreregno: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.MJSelectedSubSample && this.props.Login.masterData.MJSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\n      screenName: this.props.Login.screenName,\n      postParamList: this.postParamList,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      historyDataState: this.state.historyDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\n    };\n    let breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, {\n      \"label\": \"IDS_SAMPLETYPE\",\n      \"value\": this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.ssampletypename || \"NA\" : this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_REGTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" : this.props.Login.masterData.RegTypeValue ? this.props.Login.masterData.RegTypeValue.sregtypename || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_REGSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"NA\" : this.props.Login.masterData.RegSubTypeValue ? this.props.Login.masterData.RegSubTypeValue.sregsubtypename : \"NA\"\n    }, {\n      \"label\": \"IDS_CONFIGVERSION\",\n      \"value\": this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.sversionname || \"NA\" : this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.sversionname || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_SECTION\",\n      \"value\": this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.ssectionname || \"NA\" : this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.ssectionname || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_Test\",\n      \"value\": this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.stestsynonym || \"NA\" : this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.stestsynonym || \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_FILTERSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus || \"NA\" : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.sfilterstatus || \"NA\" : \"NA\"\n    }];\n    const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\n    const editParamId = this.state.controlMap.has(\"Accept\") && this.state.controlMap.get(\"Accept\").ncontrolcode;\n    const TestDecisionActionId = this.state.controlMap.has(\"TestDecisionAction\") && this.state.controlMap.get(\"TestDecisionAction\").ncontrolcode;\n    const TestApprovalActionId = this.state.controlMap.has(\"TestApprovalAction\") && this.state.controlMap.get(\"TestApprovalAction\").ncontrolcode;\n    const reportGenerateId = this.state.controlMap.has(\"GenerateCOA\") && this.state.controlMap.get(\"GenerateCOA\").ncontrolcode;\n    const coaReportId = this.state.controlMap.has(\"COAReport\") && this.state.controlMap.get(\"COAReport\").ncontrolcode;\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"myjobs/getMyJobsSubSampleDetails\",\n      fecthInputObject: subSampleGetParam,\n      selectedObject: \"MJSelectedSample\",\n      inputListName: \"MJ_SAMPLE\",\n      updatedListname: \"updatedSample\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTests\"\n      }],\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\", \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      updatedListname: \"updatedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"myjobs/getApprovalTest\",\n      fecthInputObject: testGetParam,\n      selectedObject: \"MJSelectedSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTests\"\n      }],\n      inputListName: \"MJ_SUBSAMPLE\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\", \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\"]\n    }, {\n      filteredListName: \"searchedTests\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: testChildGetParam,\n      selectedObject: \"MJSelectedTest\",\n      inputListName: \"MJ_TEST\",\n      updatedListname: \"updatedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\", \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\", \"TestList\"]\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      needMultiSelect: true,\n      masterList: this.props.Login.masterData.searchedSample || AP_SampleList,\n      selectedMaster: this.props.Login.masterData.MJSelectedSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getMyJobsubSampleDetail,\n      inputParam: subSampleGetParam,\n      additionalParam: ['napprovalversioncode'],\n      mainField: 'sarno',\n      selectionList: this.state.selectedFilter,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\",\n      selectionColorField: \"stranscolor\",\n      selectedListName: \"MJSelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSample\",\n      needValidation: true,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns,\n      moreField: this.state.sampleMoreField,\n      jsonDesignFields: true,\n      jsonField: 'jsondata',\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\" //statusColor=\"sdecisioncolor\"\n      ,\n      statusColor: \"stranscolor\",\n      showStatusIcon: false,\n      showStatusName: true,\n      needFilter: true,\n      searchRef: this.searchSampleRef,\n      filterParam: filterSampleParam,\n      skip: this.state.skip,\n      take: this.state.take,\n      handlePageChange: this.handlePageChange,\n      showStatusBlink: true,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      childTabsKey: [\"MJ_SUBSAMPLE\", \"MJ_TEST\", \"RegistrationAttachment\", \"RegistrationComment\"],\n      actionIcons: [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\n        // onClick: ()=>this.previewSampleReport(reportPreviewId),\n        //inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\n        onClick: this.props.previewSampleReport,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId\n        }\n      } : this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportGenerateId) === -1,\n        // onClick: ()=>this.previewSampleReport(reportPreviewId),\n        //inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\n        onClick: obj => this.generateCOAReport(obj, reportGenerateId),\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId,\n          nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode\n        }\n      } : {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(coaReportId) === -1,\n        onClick: obj => this.props.reportGenerate(obj, reportGenerateId),\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: coaReportId\n        }\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload() // title={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\n        //  data-for=\"tooltip-common-wrap\"\n        ,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 57\n        }\n      })), this.props.Login.masterData.decisionStatus && this.state.userRoleControlRights.indexOf(TestDecisionActionId) !== -1 && this.props.Login.masterData.decisionStatus.length > 0 ? /*#__PURE__*/React.createElement(CustomPopOver, {\n        icon: faBolt,\n        nav: true,\n        data: decisionStatus,\n        btnClasses: \"btn-circle btn_grey ml-2\",\n        textKey: \"sdecisionstatus\",\n        iconKey: \"ntransactionstatus\",\n        dynamicButton: value => this.updateDecision(value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 57\n        }\n      }) : \"\")),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(MyJobsFilter, {\n          SampleType: this.state.SampletypeList || [],\n          SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || [],\n          RegType: this.state.RegistrationTypeList || [],\n          RegTypeValue: this.props.Login.masterData.realRegTypeValue || [],\n          RegSubType: this.state.RegistrationSubTypeList || [],\n          RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || [],\n          ApprovalVersion: this.state.ConfigVersionList || [],\n          ApprovalVersionValue: this.props.Login.masterData.realApprovalVersionValue || [],\n          UserSection: this.state.UserSectionList || [],\n          UserSectionValue: this.props.Login.masterData.realUserSectionValue || [],\n          JobStatus: this.props.Login.masterData.JobStatus || [],\n          Test: this.state.TestList || [],\n          TestValue: this.props.Login.masterData.realTestValue || [],\n          FilterStatus: this.state.FilterStatusList || [],\n          FilterStatusValue: this.props.Login.masterData.realFilterStatusValue || [],\n          fromDate: this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 66\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 37\n      }\n    }), this.props.Login.masterData.nneedsubsample ? /*#__PURE__*/React.createElement(ScrollBar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.verticalPaneSizeChange,\n      secondaryInitialSize: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 65\n      }\n    }, \"Sub Sample\"))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedSubSample || AP_SubSampleList,\n      selectedMaster: this.props.Login.masterData.MJSelectedSubSample,\n      primaryKeyField: \"ntransactionsamplecode\",\n      getMasterDetail: this.props.getMyJobTestDetail,\n      inputParam: testGetParam,\n      additionalParam: [],\n      mainField: \"ssamplearno\",\n      selectedListName: \"MJSelectedSubSample\",\n      objectName: \"subSample\",\n      listName: \"IDS_SUBSAMPLE\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      selectionColorField: \"stranscolor\",\n      statusColor: \"stranscolor\",\n      subFields: this.state.DynamicSubSampleColumns,\n      moreField: this.state.subSampleMoreField,\n      needValidation: false,\n      needMultiSelect: true,\n      needFilter: false,\n      searchRef: this.searchSubSampleRef,\n      filterParam: filterSubSampleParam,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSubSample\",\n      skip: this.state.subSampleSkip,\n      take: this.state.subSampleTake,\n      handlePageChange: this.handleSubSamplePageChange,\n      childTabsKey: [\"RegistrationTestAttachment\"],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 685,\n        columnNumber: 61\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 724,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 725,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 727,\n        columnNumber: 69\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showAPSampleinfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 69\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      needMultiSelect: true,\n      masterList: this.props.Login.masterData.searchedTests || AP_TestList,\n      selectedMaster: this.props.Login.masterData.MJSelectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getMJTestChildTabDetail,\n      inputParam: testChildGetParam,\n      additionalParam: [],\n      mainField: 'stestsynonym',\n      selectedListName: \"MJSelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      showStatusIcon: false,\n      showStatusName: true,\n      subFieldsLabel: true,\n      jsonField: 'jsondata',\n      jsonDesignFields: false,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\",\n      selectionColorField: \"scolorhexcode\",\n      selectionList: this.props.Login.masterData.FilterStatus || [],\n      needSubFieldlabel: true,\n      subFields: this.state.DynamicTestColumns,\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTests\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"MJ_SAMPLE\",\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 785,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ACCEPT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(editParamId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.getAcceptTest({\n          testGetParam,\n          MJSelectedTest: this.props.Login.masterData.MJSelectedTest,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: editParamId\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 788,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheck,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 81\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 65\n      }\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 806,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 807,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 809,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 810,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 811,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 813,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 814,\n        columnNumber: 77\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showAPTestList(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 816,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 77\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.length === 1 ? /*#__PURE__*/React.createElement(MyJobsSampleInfoView, {\n      data: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.length > 0 ? this.props.Login.masterData.MJSelectedSample[this.props.Login.masterData.MJSelectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 85\n      }\n    }) : /*#__PURE__*/React.createElement(MyJobsSampleInfoGrid, {\n      selectedSample: this.props.Login.masterData.MJSelectedSample,\n      userInfo: this.props.Login.userInfo || {},\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\",\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 838,\n        columnNumber: 85\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 864,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 49\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 867,\n        columnNumber: 55\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 869,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 65\n      }\n    }, \"Sample\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      paneHeight: this.state.tabPane,\n      activeKey: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 873,\n        columnNumber: 57\n      }\n    }), \" :\") : \"\", this.state.showTest ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881,\n        columnNumber: 60\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 882,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 69\n      }\n    }, \"Test\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      paneHeight: this.state.tabPane,\n      activeKey: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.onTestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 886,\n        columnNumber: 61\n      }\n    })) : \"\"))))) : /*#__PURE__*/React.createElement(ScrollBar, {\n      ref: ref => {\n        this._scrollBarRef = ref;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 898,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.verticalPaneSizeChange,\n      secondaryInitialSize: 400,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 30,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 917,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 921,\n        columnNumber: 73\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showAPSampleinfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 923,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 926,\n        columnNumber: 73\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 930,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      paneHeight: this.state.initialVerticalWidth,\n      needMultiSelect: true,\n      masterList: this.props.Login.masterData.searchedTests || AP_TestList,\n      selectedMaster: this.props.Login.masterData.MJSelectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getMJTestChildTabDetail,\n      inputParam: testChildGetParam,\n      additionalParam: [],\n      mainField: 'stestsynonym',\n      selectedListName: \"MJSelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      showStatusIcon: false,\n      showStatusName: true,\n      subFieldsLabel: true,\n      jsonField: 'jsondata',\n      jsonDesignFields: false,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"sfilterstatus\",\n      selectionColorField: \"scolorhexcode\",\n      selectionList: this.props.Login.masterData.FilterStatus || [],\n      needSubFieldlabel: true,\n      subFields: this.state.DynamicTestColumns,\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTests\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"MJ_SAMPLE\",\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 77\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        //   data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ACCEPT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(editParamId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.getAcceptTest({\n          testGetParam,\n          MJSelectedTest: this.props.Login.masterData.MJSelectedTest,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: editParamId\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 982,\n          columnNumber: 81\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheck,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 988,\n          columnNumber: 85\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 932,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(ContentPanel, {\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1004,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1008,\n        columnNumber: 81\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showAPTestList(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013,\n        columnNumber: 81\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: this.state.initialVerticalWidth\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 81\n      }\n    }, this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.length === 1 ? /*#__PURE__*/React.createElement(MyJobsSampleInfoView, {\n      data: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.length > 0 ? this.props.Login.masterData.MJSelectedSample[this.props.Login.masterData.MJSelectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1021,\n        columnNumber: 89\n      }\n    }) : /*#__PURE__*/React.createElement(MyJobsSampleInfoGrid, {\n      selectedSample: this.props.Login.masterData.MJSelectedSample,\n      userInfo: this.props.Login.userInfo || {},\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\",\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 89\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1057,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ScrollBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1059,\n        columnNumber: 53\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1062,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1063,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1064,\n        columnNumber: 77\n      }\n    }, \"Sample\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      paneHeight: this.state.tabPane,\n      activeKey: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 65\n      }\n    }), \" :\") : \"\", this.state.showTest ? /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1073,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 71\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 77\n      }\n    }, \"Test\"))), /*#__PURE__*/React.createElement(CustomTabs, {\n      paneHeight: this.state.tabPane,\n      activeKey: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.onTestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1080,\n        columnNumber: 69\n      }\n    })) : \"\")))))))))), this.props.Login.openChildModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.props.Login.operation === 'dynamic' ? () => this.performTestActions(this.props.Login.action, TestApprovalActionId) : this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openChildModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === 'enforce' ? [{\n        \"idsName\": \"IDS_COMMENTS\",\n        \"dataField\": \"senforcestatuscomment\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }] : [],\n      loginoperation: this.props.Login.operation === 'view' ? true : false //graphView={this.props.Login.operation !=='enforce' ? this.props.Login.operation:undefined}\n      ,\n      noSave: this.props.Login.operation === 'view' ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1115,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === 'enforce' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1123,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1124,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"ngradecode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_STATUS\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_STATUS\"\n        }),\n        value: this.props.Login.masterData.GradeValue || [],\n        options: this.props.Login.masterData.Grade || [],\n        optionId: \"ngradecode\",\n        optionValue: \"sgradename\",\n        isMandatory: true,\n        isMulti: false,\n        isDisabled: false,\n        isSearchable: false,\n        closeMenuOnSelect: true,\n        isClearable: false,\n        onChange: event => this.onComboChange(event, 'ngradecode'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1125,\n          columnNumber: 41\n        }\n      }), /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"senforcestatuscomment\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_COMMENTS\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_COMMENTS\"\n        }),\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"senforcestatuscomment\"] : \"\",\n        rows: \"2\",\n        isMandatory: true,\n        required: false,\n        maxLength: 255,\n        onChange: event => this.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1141,\n          columnNumber: 41\n        }\n      }))) : this.props.Login.operation === 'dynamic' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1155,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1156,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormNumericInput, {\n        name: \"retestcount\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_RETESTCOUNT\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_MAX\"\n        }) + \": \" + this.props.Login.masterData.retestcount,\n        type: \"text\",\n        strict: true,\n        className: \"form-control\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.retestcount : \"\",\n        maxLength: 6,\n        onChange: event => this.onNumericInputOnChange(event, 'retestcount'),\n        isMandatory: \"*\",\n        required: true,\n        noStyle: true // min={1}\n        // max={this.props.Login.masterData.retestcount}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1169,\n          columnNumber: 45\n        }\n      }))) : this.props.Login.operation === 'view' ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1188,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1189,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nresultparamcommenthistorycode\",\n        data: this.props.Login.masterData.enforceCommentsHistory || [],\n        dataResult: this.props.Login.masterData.enforceCommentsHistory || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData.enforceCommentsHistory ? this.props.Login.masterData.enforceCommentsHistory.length : 0\n        } // dataStateChange={this.dataStateChange}\n        ,\n        extractedColumnList: [{\n          \"idsName\": \"IDS_ENFORCESTATUSCOMMENT\",\n          \"dataField\": \"senforcestatuscomment\",\n          \"width\": \"450px\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        pageable: false,\n        hideColumnFilter: true,\n        isActionRequired: false,\n        isToolBarRequired: false,\n        scrollable: \"scrollable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1190,\n          columnNumber: 49\n        }\n      }))) : \"\" // <EditApprovalParameter\n      //     ApprovalParamEdit={this.props.Login.ApprovalParamEdit || []}\n      //     changeMandatory={this.changeMandatory}\n      //     selectedRecord={this.state.selectedRecord.approvalParameterEdit || {}}\n      //     nsubsampleneed={this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed}\n      // />\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1098,\n        columnNumber: 21\n      }\n    }) : \"\", this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.masterData.ChecklistData,\n      needSaveButton: false,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.handleClose,\n      onTemplateComboChange: this.onTemplateComboChange,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.props.onSaveCheckList,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord || [],\n      onTemplateDateChange: this.onTemplateDateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1224,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      userRoleControlRights,\n      controlMap,\n      sampleListColumns,\n      subSampleListColumns,\n      testListColumns,\n      SingleItem,\n      sampleListMainField,\n      subSampleListMainField,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      testMoreField,\n      resultDataState,\n      instrumentDataState,\n      materialDataState,\n      taskDataState,\n      documentDataState,\n      resultChangeDataState,\n      historyDataState,\n      testCommentDataState,\n      samplePrintHistoryDataState,\n      sampleHistoryDataState,\n      selectedRecord,\n      SampletypeList,\n      RegistrationTypeList,\n      RegistrationSubTypeList,\n      FilterStatusList,\n      ConfigVersionList,\n      UserSectionList,\n      TestList,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      DynamicSampleColumns,\n      DynamicSubSampleColumns,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField\n    } = this.state;\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      bool = true; // this.setState({userRoleControlRights, controlMap});\n    }\n\n    if (this.props.Login.masterData.RegSubTypeValue !== previousProps.Login.masterData.RegSubTypeValue) {\n      if (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === transactionStatus.NO) {\n        let dataState = {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n          group: [{\n            field: 'sarno'\n          }]\n        };\n        resultDataState = dataState;\n        instrumentDataState = dataState;\n        materialDataState = dataState;\n        taskDataState = dataState;\n        documentDataState = dataState;\n        resultChangeDataState = dataState;\n        historyDataState = dataState;\n        testCommentDataState = dataState; // this.setState({\n        //     resultDataState: dataSate,instrumentDataState: dataSate,\n        //     materialDataState: dataSate,taskDataState: dataSate,instrumentDataState: dataSate,\n        //     instrumentDataState: dataSate,documentDataState: dataSate,resultChangeDataState: dataSate,\n        //     historyDataState: dataSate,resultDataState: dataSate,testCommentDataState:dataSate,\n        // });\n\n        bool = true;\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord; // this.setState({selectedRecord: this.props.Login.selectedRecord });\n\n      bool = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\n      const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", undefined, undefined, true);\n      const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\n      const UserSectionListMap = constructOptionList(this.props.Login.masterData.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n      const TestListMap = constructOptionList(this.props.Login.masterData.Test || [], \"ntestcode\", \"stestsynonym\", undefined, undefined, true);\n      SampletypeList = SampletypeListMap.get(\"OptionList\");\n      RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\n      RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\n      FilterStatusList = FilterStatusListMap.get(\"OptionList\");\n      ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\n      UserSectionList = UserSectionListMap.get(\"OptionList\");\n      TestList = TestListMap.get(\"OptionList\");\n      bool = true;\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      }; // const selectedFilters = this.props.Login.masterData.FilterStatusValue && \n      //     this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? \n      //   JSON.stringify (JSON.parse(this.props.Login.masterData.FilterStatus)) : []\n      // const selectedFilters = this.props.Login.masterData.FilterStatusValue &&\n      //     this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ?\n      //     this.props.Login.masterData.FilterStatus : [];\n\n      const selectedFilters = this.props.Login.masterData.FilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\n        instrumentDataState = this.props.Login.instrumentDataState;\n      }\n\n      if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\n        taskDataState = this.props.Login.taskDataState;\n      }\n\n      if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\n        resultChangeDataState = this.props.Login.resultChangeDataState;\n      }\n\n      if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n        historyDataState = this.props.Login.historyDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.samplePrintHistoryDataState && this.props.Login.samplePrintHistoryDataState !== previousProps.Login.samplePrintHistoryDataState) {\n        samplePrintHistoryDataState = this.props.Login.samplePrintHistoryDataState;\n      }\n\n      if (this.props.Login.sampleHistoryDataState && this.props.Login.sampleHistoryDataState !== previousProps.Login.sampleHistoryDataState) {\n        sampleHistoryDataState = this.props.Login.sampleHistoryDataState;\n      }\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n      DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitems ? dynamicColumn.samplegridmoreitems : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n      testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n      testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      bool = true; // sampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.LISTITEM);\n      // subSampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], designProperties.LISTITEM);\n      // testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTITEM);\n      // sampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.LISTMAINFIELD);\n      // subSampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], designProperties.LISTMAINFIELD);\n      // testListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTMAINFIELD);\n      // SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.SINGLEITEMDATA)\n      // SampleGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.GRIDITEM)\n      // SampleGridExpandableItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.GRIDEXPANDABLEITEM)\n      // testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTMOREITEM)\n      // let {selectedRecord}=this.state\n\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n      selectedRecord['fromDate'] = obj.fromDate;\n      selectedRecord['toDate'] = obj.toDate; // this.setState({\n      //     sampleListColumns, subSampleListColumns, testListColumns, SingleItem,\n      //     sampleListMainField, subSampleListMainField, testListMainField,\n      //     SampleGridItem, SampleGridExpandableItem, testMoreField,selectedRecord\n      // })\n\n      bool = true;\n    }\n\n    if (bool) {\n      bool = false;\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        sampleListColumns,\n        subSampleListColumns,\n        testListColumns,\n        SingleItem,\n        sampleListMainField,\n        subSampleListMainField,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        testMoreField,\n        resultDataState,\n        instrumentDataState,\n        materialDataState,\n        taskDataState,\n        documentDataState,\n        resultChangeDataState,\n        historyDataState,\n        testCommentDataState,\n        samplePrintHistoryDataState,\n        sampleHistoryDataState,\n        selectedRecord,\n        SampletypeList,\n        RegistrationTypeList,\n        RegistrationSubTypeList,\n        FilterStatusList,\n        ConfigVersionList,\n        UserSectionList,\n        TestList,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField\n      });\n    }\n  } // previewSampleReport = (ncontrolCode) => {\n  //     console.log(\"report:\", this.props.Login.masterData.selectedSample);\n  //     const selectedSample = this.props.Login.masterData.selectedSample[0];\n  //     const inputData = {ndecisionstatus:selectedSample.ndecisionstatus,\n  //                         userinfo:this.props.Login.userInfo,\n  //                         nprimarykey: selectedSample.npreregno,\n  //                         ncoareporttypecode : reportCOAType.SAMPLECERTIFICATEPRIVIEW,\n  //                         nreporttypecode :REPORTTYPE.SAMPLEREPORT,\n  //                         sprimarykeyname :\"npreregno\",\n  //                         ncontrolcode : ncontrolCode,\n  //                         nregtypecode:selectedSample.nregtypecode,\n  //                         nregsubtypecode: selectedSample.nregsubtypecode\n  //                         }\n  //     this.props.previewSampleReport(inputData);\n  // }\n\n\n  sampleTabDetail() {\n    const tabMap = new Map();\n    let npreregno = this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n    tabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n      screenName: \"IDS_SAMPLEATTACHMENTS\",\n      selectedMaster: this.props.Login.masterData.MJSelectedSample,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      attachments: this.props.Login.masterData.RegistrationAttachment || [],\n      deleteRecord: this.props.deleteAttachment,\n      onSaveClick: this.onAttachmentSaveClick,\n      masterList: this.props.Login.masterData.MJSelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n      fetchRecord: this.props.getAttachmentCombo,\n      addName: \"AddSampleAttachment\",\n      editName: \"EditSampleAttachment\",\n      deleteName: \"DeleteSampleAttachment\",\n      viewName: \"ViewSampleAttachment\",\n      methodUrl: \"SampleAttachment\",\n      userInfo: this.props.Login.userInfo,\n      deleteParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: this.props.Login.screenName\n      },\n      editParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        masterList: this.props.Login.masterData.MJSelectedSample\n      },\n      selectedListName: \"IDS_SAMPLES\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1440,\n        columnNumber: 13\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n      screenName: \"IDS_SAMPLECOMMENTS\",\n      selectedMaster: this.props.Login.masterData.MJSelectedSample,\n      onSaveClick: this.onCommentsSaveClick,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      Comments: this.props.Login.masterData.RegistrationComment || [],\n      fetchRecord: this.props.getCommentsCombo,\n      masterList: this.props.Login.masterData.MJSelectedSample,\n      masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n      addName: \"AddSampleComment\",\n      editName: \"EditSampleComment\",\n      deleteName: \"DeleteSampleComment\",\n      methodUrl: \"SampleComment\",\n      isTestComment: false,\n      primaryKeyField: \"nregcommentcode\",\n      dataState: this.state.testCommentDataState,\n      dataStateChange: this.testDataStateChange,\n      deleteParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\"\n      },\n      editParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        operation: \"update\",\n        masterList: this.props.Login.masterData.MJ_SAMPLE,\n        ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n      },\n      selectedListName: \"IDS_SAMPLES\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481,\n        columnNumber: 46\n      }\n    })); // tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\",\n    //     <SampleApprovalHistory\n    //         userInfo={this.props.Login.userInfo}\n    //         ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\n    //         inputParam={this.props.Login.inputParam}\n    //         dataState={this.state.sampleHistoryDataState}\n    //         dataStateChange={this.sampleDataStateChange}\n    //         screenName=\"IDS_SAMPLEAPPROVALHISTORY\"\n    //         controlMap={this.state.controlMap}\n    //         userRoleControlRights={this.state.userRoleControlRights}\n    //         selectedId={null}\n    //     />)\n    // tabMap.set(\"IDS_PRINTHISTORY\",\n    //     <ApprovalPrintHistoryTab\n    //         userInfo={this.props.Login.userInfo}\n    //         ApprovalPrintHistory={this.props.Login.masterData.PrintHistory}\n    //         inputParam={this.props.Login.inputParam}\n    //         dataState={this.state.samplePrintHistoryDataState}\n    //         dataStateChange={this.sampleDataStateChange}\n    //         screenName=\"IDS_PRINTHISTORY\"\n    //         controlMap={this.state.controlMap}\n    //         userRoleControlRights={this.state.userRoleControlRights}\n    //         selectedId={null}\n    //     />);\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {// tabMap.set(\"IDS_REPORTHISTORY\",\n      //     <ReportHistoryTab\n      //         userInfo={this.props.Login.userInfo}\n      //         COAHistory={this.props.Login.masterData.COAHistory}\n      //         inputParam={this.props.Login.inputParam}\n      //         dataState={this.state.reportHistoryDataState}\n      //         dataStateChange={this.sampleDataStateChange}\n      //         screenName=\"IDS_REPORTHISTORY\"\n      //         controlMap={this.state.controlMap}\n      //         userRoleControlRights={this.state.userRoleControlRights}\n      //         selectedId={null}\n      //         viewDownloadFile={this.downloadReport}\n      //     />);\n    }\n\n    return tabMap;\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showTestList() {\n    this.setState({\n      showTest: true,\n      showSample: false\n    });\n  }\n\n  // covertDatetoString(startDateValue, endDateValue) {\n  //     const startDate = new Date(startDateValue);\n  //     const endDate = new Date(endDateValue);\n  //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\n  //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\n  //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\n  //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\n  //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\n  //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\n  //     const fromDate = fromDateOnly + \"T00:00:00\";\n  //     const toDate = toDateOnly + \"T23:59:59\";\n  //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\n  // }\n  getActiveTestURL() {\n    let url = \"approval/getapprovalparameter\";\n\n    switch (this.props.Login.activeTestTab) {\n      case \"IDS_RESULTS\":\n        url = \"approval/getapprovalparameter\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"approval/getApprovalResultChangeHistory\";\n        break;\n\n      case \"IDS_TESTAPPROVALHISTORY\":\n        url = \"approval/getApprovalHistory\";\n        break;\n\n      default:\n        url = \"approval/getapprovalparameter\";\n        break;\n    }\n\n    return url;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  getMyJobsubSampleDetail,\n  getMyJobTestDetail,\n  getMJTestChildTabDetail,\n  performAction,\n  updateStore,\n  viewAttachment,\n  checkListRecord,\n  updateDecision,\n  getRegType,\n  getRegSubType,\n  getTestStatus,\n  getSection,\n  getMyJobsSample,\n  getStatusCombo,\n  validateEsignCredential,\n  crudMaster,\n  validateEsignforApproval,\n  getAppConfigVersion,\n  getAcceptTest,\n  filterTransactionList,\n  getMJSampleChildTabDetail,\n  getAttachmentCombo,\n  deleteAttachment,\n  getCommentsCombo,\n  previewSampleReport,\n  generateCOAReport,\n  getEnforceCommentsHistory,\n  reportGenerate\n})(injectIntl(MyJobs));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/myjobs/MyJobs.jsx"],"names":["React","connect","injectIntl","faBolt","faCheck","faEye","faSync","FontAwesomeIcon","Button","Card","Col","Nav","Row","ContentPanel","ListWrapper","ProductList","SplitterLayout","DEFAULT_RETURN","getMyJobsubSampleDetail","getMyJobTestDetail","getMJTestChildTabDetail","performAction","updateStore","updateDecision","getRegType","getRegSubType","getTestStatus","getSection","getMyJobsSample","getStatusCombo","validateEsignCredential","crudMaster","validateEsignforApproval","getAppConfigVersion","getAcceptTest","filterTransactionList","checkListRecord","generateCOAReport","getMJSampleChildTabDetail","getAttachmentCombo","viewAttachment","deleteAttachment","getCommentsCombo","previewSampleReport","getEnforceCommentsHistory","reportGenerate","CustomTabs","getControlMap","showEsign","sortData","constructOptionList","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","toast","TransactionListMasterJson","MyJobsFilter","designProperties","transactionStatus","RegistrationType","RegistrationSubType","BreadcrumbComponent","MyJobsSampleInfoGrid","MyJobsSampleInfoView","FormSelectSearch","FormTextarea","Esign","SlideOutModal","templateChangeHandler","TemplateForm","Attachments","onSaveSampleAttachment","onSaveTestAttachment","Comments","onSaveSampleComments","onSaveTestComments","CustomPopOver","ScrollBar","FormNumericInput","DataGrid","mapStateToProps","state","Login","MyJobs","Component","constructor","props","paneSizeChange","d","setState","splitChangeWidthPercentage","handleSubSamplePageChange","e","subSampleSkip","skip","subSampleTake","take","setTimeout","_scrollBarRef","updateScroll","showAPSampleinfo","showSample","showTest","sampleInfoDataStateChange","event","sampleGridDataState","dataState","verticalPaneSizeChange","val","console","log","initialVerticalWidth","downloadReport","input","inputParam","inputData","selectedRecord","userinfo","userInfo","classUrl","operation","methodUrl","testTabDetail","testTabMap","Map","testskip","testtake","testList","masterData","searchedTests","MJ_TEST","editTestCommentsId","controlMap","has","get","ncontrolcode","slice","selectedTestList","MJSelectedTest","ntransactiontestcode","map","test","join","set","userRoleControlRights","RegistrationTestAttachment","onAttachmentSaveClick","nneedsubsample","VALUE","esignRights","screenName","masterList","onCommentsSaveClick","RegistrationTestComment","testCommentDataState","testDataStateChange","ncontrolCode","onNumericInputOnChange","value","name","onTestTabChange","tabProps","activeTestTab","length","String","item","npreregno","selectedSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","historyDataState","resultChangeDataState","warn","intl","formatMessage","id","onSampleTabChange","activeSampleTab","MJSelectedSample","handlePageChange","handleTestPageChange","checkRetestAction","action","ntransactionstatus","RETEST","retestcount","updateInfo","typeName","data","openChildModal","performTestActions","info","obj","realFromDate","realToDate","ntransCode","FilterStatusValue","ALL","FilterStatus","status","sample","ntransactionsamplecode","MJSelectedSubSample","nsectioncode","UserSectionValue","UserSection","section","ntestcode","realTestValue","nTransStatus","nsampletypecode","realSampleTypeValue","nregtypecode","realRegTypeValue","nregsubtypecode","realRegSubTypeValue","napprovalversioncode","ApprovalVersionValue","napprovalconfigversioncode","dfrom","fromDate","dto","toDate","nflag","ntype","undefined","checkBoxOperation","ndesigntemplatemappingcode","postParamList","nesignneed","YES","loadEsign","screenData","realFilterStatusValue","sampleList","MJ_SAMPLE","splice","selectedsampleList","TestValue","napprovalconfigcode","onFilterComboChange","comboData","fieldName","inputParamData","fromdate","todate","realApprovalVersionValue","napproveconfversioncode","RegSubTypeValue","realUserSectionValue","getFilterStatus","JSON","stringify","stransactionstatus","onComboChange","GradeValue","onInputOnChange","target","type","checked","NO","handleDateChange","dateName","dateValue","Date","RegTypeValue","changeMandatory","dataItem","currentTarget","ntransactionresultcode","onReload","searchSampleRef","searchSubSampleRef","searchTestRef","samplePrintHistoryDataState","sampleHistoryDataState","onFilterSubmit","parseInt","sfilterstatus","sampleGridDataStateChange","sampleDataStateChange","reportHistoryDataState","onSaveClick","saveType","formRef","ok","ngradecode","senforcestatuscomment","selectedTestCode","postParam","selectedObject","primaryKeyField","saveParam","approvalparameter","approvalParameterEdit","Object","keys","key","push","nreportmandatory","handleClose","nformcode","openModal","templateData","openTemplateModal","selectedParamId","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onTemplateInputChange","control","onTemplateComboChange","onTemplateDateChange","dateData","searchedSample","RegistrationGetSample","acceptList","isTestComment","x","selectedSampleList","selectedMaster","reporparam","createRef","settings","group","field","masterStatus","error","oldComboData","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SingleItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","firstPane","paneHeight","secondPaneHeight","tabPane","SampletypeList","RegistrationTypeList","RegistrationSubTypeList","FilterStatusList","ConfigVersionList","UserSectionList","TestList","getDerivedStateFromProps","multilingualMsg","componentDidMount","parentHeight","height","clientHeight","constructDesign","list","newList","i","LABEL","showAPTestList","gridfillingColumn","temparray","option","slanguagetypecode","render","sampleSearchField","ROUTINE","filterSampleParam","inputListName","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","searchFieldList","changeList","filterSubSampleParam","SampleTypeValue","filterTestParam","getActiveTestURL","isSingleSelect","AP_SampleList","AP_SubSampleList","MJ_SUBSAMPLE","AP_TestList","decisionStatus","subSampleGetParam","testGetParam","testChildGetParam","breadCrumbData","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregsubtypename","sversionname","ssectionname","stestsynonym","reportPreviewId","editParamId","TestDecisionActionId","TestApprovalActionId","reportGenerateId","coaReportId","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","selectedFilter","showFilter","openFilter","closeFilter","DynamicSampleColumns","sampleMoreField","PLASMA_POOL","title","controlname","objectName","hidden","indexOf","onClick","JobStatus","display","background","borderBottom","marginTop","searchedSubSample","DynamicSubSampleColumns","subSampleMoreField","float","split","setting","DynamicTestColumns","DynamicGridItem","DynamicGridMoreField","sampleTabDetail","Grade","enforceCommentsHistory","ChecklistData","onSaveCheckList","componentDidUpdate","previousProps","bool","values","nsubsampleneed","SampletypeListMap","SampleType","RegistrationTypeListMap","RegistrationSubTypeListMap","FilterStatusListMap","ConfigVersionListMap","ApprovalVersion","UserSectionListMap","TestListMap","Test","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","parse","index","findIndex","DynamicDesign","dynamicColumn","jsondata","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitems","sampledisplayfields","testlistmoreitems","tabMap","RegistrationAttachment","RegistrationComment","showSampleInfo","showTestList","url"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,KAA1B,EAAkCC,MAAlC,QAAgD,mCAAhD;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,GAAjC,QAA6C,iBAA7C;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,WAAT,QAA4B,sCAA5B;AACA,SAASC,WAAT,QAA4B,qCAA5B,C,CACA;;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SACIC,uBADJ,EAC6BC,kBAD7B,EACiDC,uBADjD,EAC0EC,aAD1E,EACyFC,WADzF,EACsGC,cADtG,EAEIC,UAFJ,EAEgBC,aAFhB,EAE8BC,aAF9B,EAE4CC,UAF5C,EAEyDC,eAFzD,EAE0EC,cAF1E,EAE0FC,uBAF1F,EAGIC,UAHJ,EAGgBC,wBAHhB,EAG0CC,mBAH1C,EAG+DC,aAH/D,EAG8EC,qBAH9E,EAGqGC,eAHrG,EAGsHC,iBAHtH,EAIIC,yBAJJ,EAI+BC,kBAJ/B,EAImDC,cAJnD,EAImEC,gBAJnE,EAIqFC,gBAJrF,EAIuGC,mBAJvG,EAKIC,yBALJ,EAK8BC,cAL9B,QAMO,eANP;AAOA,OAAOC,UAAP,MAAuB,oDAAvB,C,CACA;;AACA,SAASC,aAAT,EAAyBC,SAAzB,EAAoCC,QAApC,EAA8CC,mBAA9C,EAAmEC,0BAAnE,EAA+FC,wBAA/F,EAAyHC,mBAAzH,QAAoJ,+BAApJ;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,yBAAP,MAAsC,4CAAtC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,gBAA9C,EAAgEC,mBAAhE,QAA2F,8BAA3F;AACA,OAAOC,mBAAP,MAAgC,uCAAhC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC,C,CACA;;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,YAAP,MAAyB,wDAAzB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,aAAP,MAA0B,gDAA1B,C,CACA;AACA;AACA;AACA;AACA;;AACA,SAASC,qBAAT,QAAsC,yCAAtC;AACA,OAAOC,YAAP,MAAyB,qCAAzB;AACA,OAAOC,WAAP,MAAwB,gDAAxB;AACA,SAASC,sBAAT,EAAiCC,oBAAjC,QAA6D,wDAA7D;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,kDAAzD,C,CACA;;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,SAAP,MAAsB,yBAAtB,C,CACA;AACA;;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,QAAP,MAAqB,gDAArB,C,CACA;AACA;;AAGA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAGA,MAAMC,MAAN,SAAqBnF,KAAK,CAACoF,SAA3B,CAAqC;AACjCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAiEnBC,cAjEmB,GAiEDC,CAAD,IAAO;AACpB,WAAKC,QAAL,CAAc;AACVC,QAAAA,0BAA0B,EAAEF;AADlB,OAAd;AAGH,KArEkB;;AAAA,SAsHnBG,yBAtHmB,GAsHSC,CAAC,IAAI;AAC7B,WAAKH,QAAL,CAAc;AAAEI,QAAAA,aAAa,EAAED,CAAC,CAACE,IAAnB;AAAwBC,QAAAA,aAAa,EAAEH,CAAC,CAACI;AAAzC,OAAd;AAEAC,MAAAA,UAAU,CAAC,MAAM;AAAE,aAAKC,aAAL,CAAmBC,YAAnB;AAAmC,OAA5C,CAAV;AACH,KA1HkB;;AAAA,SA4HnBC,gBA5HmB,GA4HA,MAAM;AAErB,WAAKX,QAAL,CAAc;AAAEY,QAAAA,UAAU,EAAE,IAAd;AAAoBC,QAAAA,QAAQ,EAAE;AAA9B,OAAd;AACH,KA/HkB;;AAAA,SA8InBC,yBA9ImB,GA8IUC,KAAD,IAAW;AACnC,WAAKf,QAAL,CAAc;AACVgB,QAAAA,mBAAmB,EAAED,KAAK,CAACE;AADjB,OAAd;AAGH,KAlJkB;;AAAA,SAmJnBC,sBAnJmB,GAmJOC,GAAD,IAAS;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;AACA,WAAKnB,QAAL,CAAc;AACVsB,QAAAA,oBAAoB,EAAEH,GAAG,GAAG;AADlB,OAAd;AAGH,KAxJkB;;AAAA,SAq+CnBI,cAr+CmB,GAq+CDC,KAAD,IAAW;AACxB,UAAIC,UAAU,GAAG;AACbC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,cAAc,EAAE,EAAE,GAAGH,KAAK,CAACE;AAAX,WAAlB;AAA0CE,UAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC;AAArE,SADE;AAEbC,QAAAA,QAAQ,EAAE,UAFG;AAGbC,QAAAA,SAAS,EAAE,MAHE;AAIbC,QAAAA,SAAS,EAAE;AAJE,OAAjB;AAMA,WAAKnC,KAAL,CAAW9C,cAAX,CAA0B0E,UAA1B;AACH,KA7+CkB;;AAAA,SA8+CnBQ,aA9+CmB,GA8+CH,MAAM;AAClB,YAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,UAAI;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyB,KAAK7C,KAAlC;AACA,UAAI8C,QAAQ,GAAG,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAA5B,GAA4C,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAAhC,CAA5C,GAA6F,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BE,OAA5B,IAAuC,EAAnJ;AACA,YAAMC,kBAAkB,GAAG,KAAKlD,KAAL,CAAWmD,UAAX,CAAsBC,GAAtB,CAA0B,iBAA1B,KAAgD,KAAKpD,KAAL,CAAWmD,UAAX,CAAsBE,GAAtB,CAA0B,iBAA1B,EAA6CC,YAAxH;AACAR,MAAAA,QAAQ,GAAGA,QAAQ,CAACS,KAAT,CAAeX,QAAf,EAAyBA,QAAQ,GAAGC,QAApC,CAAX;AACA,UAAIW,gBAAgB,GAAGtF,0BAA0B,CAAC4E,QAAD,EAAW,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAAvC,EAAuD,sBAAvD,CAAjD,CANkB,CAOlB;;AACA,UAAIC,oBAAoB,GAAG,KAAKrD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,GAA6C,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,CAA2CE,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACF,oBAA5D,EAAkFG,IAAlF,CAAuF,GAAvF,CAA7C,GAA2I,IAAtK;;AACA,UAAI,KAAK7D,KAAL,CAAWqB,QAAf,EAAyB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAqB,QAAAA,UAAU,CAACoB,GAAX,CAAe,qBAAf,eAAsC,oBAAC,WAAD;AAClC,UAAA,UAAU,EAAC,qBADuB;AAElC,UAAA,cAAc,EAAEN,gBAFkB;AAGlC,UAAA,UAAU,EAAE,KAAKxD,KAAL,CAAWmD,UAHW;AAIlC,UAAA,qBAAqB,EAAE,KAAKnD,KAAL,CAAW+D,qBAJA;AAKlC,UAAA,WAAW,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiB,0BAA5B,IAA0D,EALrC;AAMlC,UAAA,YAAY,EAAE,KAAK3D,KAAL,CAAW7C,gBANS;AAOlC,UAAA,WAAW,EAAE,KAAK6C,KAAL,CAAW/C,kBAPU;AAQlC,UAAA,WAAW,EAAE,KAAK2G,qBARgB;AASlC,UAAA,UAAU,EAAET,gBATsB;AAUlC,UAAA,iBAAiB,EAAE,gCAVe;AAWlC,UAAA,OAAO,EAAE,mBAXyB;AAYlC,UAAA,QAAQ,EAAE,oBAZwB;AAalC,UAAA,UAAU,EAAE,sBAbsB;AAclC,UAAA,QAAQ,EAAE,oBAdwB;AAelC,UAAA,SAAS,EAAE,gBAfuB;AAgBlC,UAAA,QAAQ,EAAE,KAAKnD,KAAL,CAAWJ,KAAX,CAAiBoC,QAhBO;AAiBlC,UAAA,cAAc,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmB,cAjBV;AAkBlC,UAAA,SAAS,EAAE,CAAC;AAAE,aAAC1F,gBAAgB,CAAC2F,KAAlB,GAA0B;AAA5B,WAAD,EAA+C;AAAE,aAAC3F,gBAAgB,CAAC2F,KAAlB,GAA0B;AAA5B,WAA/C,CAlBuB;AAmBlC,UAAA,WAAW,EACP;AACI3B,YAAAA,SAAS,EAAE,gBADf;AAEIkB,YAAAA,oBAFJ;AAGIrB,YAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAH/B;AAIIU,YAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJjC;AAKIqB,YAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB8D,qBALlC;AAMIM,YAAAA,UAAU,EAAE;AANhB,WApB8B;AA8BlC,UAAA,SAAS,EAAE;AACP7B,YAAAA,SAAS,EAAE,gBADJ;AAEPkB,YAAAA,oBAFO;AAGPrB,YAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAHpB;AAIPU,YAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJtB;AAKPqB,YAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB8D,qBALvB;AAMPM,YAAAA,UAAU,EAAE,qBANL;AAOPC,YAAAA,UAAU,EAAEd;AAPL,WA9BuB;AAwClC,UAAA,gBAAgB,EAAC,WAxCiB;AAyClC,UAAA,WAAW,EAAC,cAzCsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAtC;AA2CAd,QAAAA,UAAU,CAACoB,GAAX,CAAe,kBAAf,eAAmC,oBAAC,QAAD;AAC/B,UAAA,UAAU,EAAC,kBADoB;AAE/B,UAAA,cAAc,EAAEN,gBAFe;AAG/B,UAAA,WAAW,EAAE,KAAKe,mBAHa;AAI/B,UAAA,UAAU,EAAE,KAAKvE,KAAL,CAAWmD,UAJQ;AAK/B,UAAA,qBAAqB,EAAE,KAAKnD,KAAL,CAAW+D,qBALH;AAM/B,UAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByB,uBAA5B,IAAuD,EANlC;AAO/B,UAAA,WAAW,EAAE,KAAKnE,KAAL,CAAW5C,gBAPO;AAQ/B,UAAA,UAAU,EAAE+F,gBARmB;AAS/B,UAAA,iBAAiB,EAAE,6BATY;AAU/B,UAAA,OAAO,EAAE,gBAVsB;AAW/B,UAAA,QAAQ,EAAE,iBAXqB;AAY/B,UAAA,UAAU,EAAE,mBAZmB;AAa/B,UAAA,SAAS,EAAE,aAboB;AAc/B,UAAA,aAAa,EAAE,KAdgB;AAe/B,UAAA,eAAe,EAAE,kBAfc;AAgB/B,UAAA,SAAS,EAAE,KAAKxD,KAAL,CAAWyE,oBAhBS;AAiB/B,UAAA,eAAe,EAAE,KAAKC,mBAjBS;AAkB/B,UAAA,WAAW,EACP;AACIlC,YAAAA,SAAS,EAAE,aADf;AAEIkB,YAAAA,oBAFJ;AAGIrB,YAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAH/B;AAIIU,YAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJjC;AAKIqB,YAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB8D,qBALlC;AAMIM,YAAAA,UAAU,EAAE;AANhB,WAnB2B;AA6B/B,UAAA,SAAS,EAAE;AACP7B,YAAAA,SAAS,EAAE,aADJ;AAEPkB,YAAAA,oBAFO;AAGPrB,YAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAHpB;AAIPU,YAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJtB;AAKPqB,YAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB8D,qBALvB;AAMPM,YAAAA,UAAU,EAAE,kBANL;AAOP9B,YAAAA,SAAS,EAAE,QAPJ;AAQP+B,YAAAA,UAAU,EAAEd,gBARL;AASPmB,YAAAA,YAAY,EAAEzB;AATP,WA7BoB;AAyC/B,UAAA,gBAAgB,EAAC,WAzCc;AA0C/B,UAAA,WAAW,EAAC,cA1CmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAnC,EA5FqB,CAyIrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAED,aAAOR,UAAP;AACH,KA/pDkB;;AAAA,SAgqDnBkC,sBAhqDmB,GAgqDM,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACtC,UAAI3C,cAAc,GAAG,KAAKnC,KAAL,CAAWmC,cAAhC;;AACA,UAAI0C,KAAK,KAAK,CAAV,IAAeA,KAAK,KAAK,GAA7B,EAAkC;AAC9B1C,QAAAA,cAAc,CAAC2C,IAAD,CAAd,GAAuB,EAAvB;AACA,aAAKtE,QAAL,CAAc;AAAE2B,UAAAA;AAAF,SAAd;AACH,OAHD,MAGO;AAEHA,QAAAA,cAAc,CAAC2C,IAAD,CAAd,GAAuBD,KAAvB;AACA,aAAKrE,QAAL,CAAc;AAAE2B,UAAAA;AAAF,SAAd;AAEH;AACJ,KA3qDkB;;AAAA,SA4qDnB4C,eA5qDmB,GA4qDAC,QAAD,IAAc;AAE5B,YAAMC,aAAa,GAAGD,QAAQ,CAACX,UAA/B;;AACA,UAAIY,aAAa,KAAK,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBgF,aAAvC,EAAsD;AAClD,YAAI,KAAK5E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,IAA8C,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,CAA2CyB,MAA3C,GAAoD,CAAtG,EAAyG;AACrG,cAAIhD,SAAS,GAAG;AACZa,YAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UADjB;AAEZU,YAAAA,cAAc,EAAE,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAFhC;AAGZC,YAAAA,oBAAoB,EAAE,KAAKrD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,GAClB0B,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,CAA2CE,GAA3C,CAA+CyB,IAAI,IAAIA,IAAI,CAAC1B,oBAA5D,EAAkFG,IAAlF,CAAuF,GAAvF,CAAD,CADY,GACoF,IAJ9F;AAKZwB,YAAAA,SAAS,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuC,cAA5B,GACP,KAAKjF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuC,cAA5B,CAA2C3B,GAA3C,CAA+CyB,IAAI,IAAIA,IAAI,CAACC,SAA5D,EAAuExB,IAAvE,CAA4E,GAA5E,CADO,GAC4E,IAN3E;AAOZzB,YAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAPf;AAQZ4C,YAAAA,aARY;AASZZ,YAAAA,UAAU,EAAEY,aATA;AAUZM,YAAAA,eAAe,EAAE,KAAKvF,KAAL,CAAWuF,eAVhB;AAWZC,YAAAA,mBAAmB,EAAE,KAAKxF,KAAL,CAAWwF,mBAXpB;AAYZC,YAAAA,iBAAiB,EAAE,KAAKzF,KAAL,CAAWyF,iBAZlB;AAaZC,YAAAA,aAAa,EAAE,KAAK1F,KAAL,CAAW0F,aAbd;AAcZC,YAAAA,iBAAiB,EAAE,KAAK3F,KAAL,CAAW2F,iBAdlB;AAeZC,YAAAA,gBAAgB,EAAE,KAAK5F,KAAL,CAAW4F,gBAfjB;AAgBZC,YAAAA,qBAAqB,EAAE,KAAK7F,KAAL,CAAW6F,qBAhBtB;AAiBZpB,YAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWyE;AAjBrB,WAAhB;AAmBA,eAAKpE,KAAL,CAAWlE,uBAAX,CAAmC+F,SAAnC,EAA8C,IAA9C;AACH,SArBD,MAqBO;AACH7D,UAAAA,KAAK,CAACyH,IAAN,CAAW,KAAKzF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ;AACJ,KAzsDkB;;AAAA,SA0sDnBC,iBA1sDmB,GA0sDElB,QAAD,IAAc;AAC9B,YAAMmB,eAAe,GAAGnB,QAAQ,CAACX,UAAjC;;AACA,UAAI8B,eAAe,KAAK,KAAK9F,KAAL,CAAWJ,KAAX,CAAiBkG,eAAzC,EAA0D;AACtD,YAAIjE,SAAS,GAAG;AACZa,UAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UADjB;AAEZuC,UAAAA,cAAc,EAAE,KAAKjF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAFhC;AAGZf,UAAAA,SAAS,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,GAA+C,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6CzC,GAA7C,CAAiDyB,IAAI,IAAIA,IAAI,CAACC,SAA9D,EAAyExB,IAAzE,CAA8E,GAA9E,CAA/C,GAAoI,IAHnI;AAIZzB,UAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAJf;AAKZgC,UAAAA,UAAU,EAAE8B,eALA;AAMZA,UAAAA;AANY,SAAhB;AAQA,aAAK9F,KAAL,CAAWhD,yBAAX,CAAqC6E,SAArC;AACH;AACJ,KAvtDkB;;AAAA,SA8tDnBmE,gBA9tDmB,GA8tDA1F,CAAC,IAAI;AACpB,WAAKH,QAAL,CAAc;AACVK,QAAAA,IAAI,EAAEF,CAAC,CAACE,IADE;AAEVE,QAAAA,IAAI,EAAEJ,CAAC,CAACI;AAFE,OAAd;AAIAC,MAAAA,UAAU,CAAC,MAAM;AAAE,aAAKC,aAAL,CAAmBC,YAAnB;AAAmC,OAA5C,CAAV;AACH,KApuDkB;;AAAA,SAquDnBoF,oBAruDmB,GAquDI3F,CAAC,IAAI;AACxB,WAAKH,QAAL,CAAc;AACVoC,QAAAA,QAAQ,EAAEjC,CAAC,CAACE,IADF;AAEVgC,QAAAA,QAAQ,EAAElC,CAAC,CAACI;AAFF,OAAd;AAIH,KA1uDkB;;AAAA,SA2uDnBwF,iBA3uDmB,GA2uDC,CAACC,MAAD,EAAS7B,YAAT,KAA0B;AAC1C,UAAI;AAAE/B,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAAyB,KAAK7C,KAAlC;AACA,UAAI8C,QAAQ,GAAG,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAA5B,GAA4C,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAAhC,CAA5C,GAA6F,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BE,OAAhC,CAA5G;AACAH,MAAAA,QAAQ,GAAGA,QAAQ,CAACS,KAAT,CAAeX,QAAf,EAAyBA,QAAQ,GAAGC,QAApC,CAAX;AACA,UAAIW,gBAAgB,GAAGtF,0BAA0B,CAAC4E,QAAD,EAAW,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAAvC,EAAuD,sBAAvD,CAAjD;;AACA,UAAID,gBAAgB,CAAC0B,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B,YAAIsB,MAAM,CAACC,kBAAP,KAA8BhI,iBAAiB,CAACiI,MAApD,EAA4D;AAExD,cAAI,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4D,WAA5B,IAA2C,KAAKtG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4D,WAA5B,GAA0C,CAAzF,EAA4F;AACxF,gBAAInD,gBAAgB,CAAC0B,MAAjB,GAA0B,CAA9B,EAAiC;AAC7B7G,cAAAA,KAAK,CAACyH,IAAN,CAAW,KAAKzF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,gBAAAA,EAAE,EAAE;AAAN,eAA9B,CAAX;AACH,aAFD,MAEO;AACH,oBAAMW,UAAU,GAAG;AACfC,gBAAAA,QAAQ,EAAE7K,cADK;AAEf8K,gBAAAA,IAAI,EAAE;AACFN,kBAAAA,MADE;AAEFzD,kBAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAF3B;AAGFgE,kBAAAA,cAAc,EAAE,IAHd;AAIF1C,kBAAAA,UAAU,EAAE,iBAJV;AAKF9B,kBAAAA,SAAS,EAAE;AALT;AAFS,eAAnB;AAUA,mBAAKlC,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH;AACJ,WAhBD,MAgBO;AACH,iBAAKI,kBAAL,CAAwBR,MAAxB,EAAgC7B,YAAhC;AACH;AAEJ,SAtBD,MAsBO;AAEH,eAAKqC,kBAAL,CAAwBR,MAAxB,EAAgC7B,YAAhC;AAEH;AACJ,OA5BD,MA4BO;AACHtG,QAAAA,KAAK,CAACyH,IAAN,CAAW,KAAKzF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KA/wDkB;;AAAA,SAgxDnBe,kBAhxDmB,GAgxDE,CAACR,MAAD,EAAS7B,YAAT,KAA0B;AAC3C,UAAI6B,MAAM,CAACC,kBAAP,KAA8BhI,iBAAiB,CAACiI,MAAhD,IAA0D,KAAK1G,KAAL,CAAWmC,cAArE,IAAuF,KAAKnC,KAAL,CAAWmC,cAAX,CAA0BwE,WAA1B,GAAwC,KAAKtG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4D,WAA/J,EAA4K;AAExKtI,QAAAA,KAAK,CAAC4I,IAAN,CAAW,KAAK5G,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,IAAmD,IAAnD,GAA0D,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4D,WAAjG;AAEH,OAJD,MAIO;AACH,YAAIO,GAAG,GAAG/I,wBAAwB,CAAC,KAAKkC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BoE,YAA7B,EAA2C,KAAK9G,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqE,UAAvE,EAAmF,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBoC,QAApG,CAAlC;AACA,YAAIgF,UAAU,GAAG,KAAKhH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,CAA8Cb,kBAA/D;;AACA,YAAIY,UAAU,KAAK5I,iBAAiB,CAAC8I,GAArC,EAA0C;AACtCF,UAAAA,UAAU,GAAG,KAAKhH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByE,YAA5B,CAAyC7D,GAAzC,CAA6C8D,MAAM,IAAIA,MAAM,CAAChB,kBAA9D,EAAkF5C,IAAlF,CAAuF,GAAvF,CAAb;AACH,SAFD,MAEO;AACHwD,UAAAA,UAAU,GAAGA,UAAU,GAAG,GAAb,GAAmBb,MAAM,CAACC,kBAAvC;AACH;;AACD,YAAI;AAAE7D,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAAyB,KAAK7C,KAAlC;AACA,YAAI8C,QAAQ,GAAG,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAA5B,GAA4C,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAAhC,CAA5C,GAA6F,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BE,OAAhC,CAA5G;AACAH,QAAAA,QAAQ,GAAGA,QAAQ,CAACS,KAAT,CAAeX,QAAf,EAAyBA,QAAQ,GAAGC,QAApC,CAAX;AACA,YAAIW,gBAAgB,GAAGtF,0BAA0B,CAAC4E,QAAD,EAAW,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAAvC,EAAuD,sBAAvD,CAAjD;AACA,cAAMxB,UAAU,GAAG;AACfC,UAAAA,SAAS,EAAE;AACP,6BAAiB;AACbmD,cAAAA,SAAS,EAAE7B,gBAAgB,CAACG,GAAjB,CAAqB+D,MAAM,IAAIA,MAAM,CAACrC,SAAtC,EAAiDxB,IAAjD,CAAsD,GAAtD,CADE;AAEb8D,cAAAA,sBAAsB,EAAE,KAAKtH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B6E,mBAA5B,CAAgDjE,GAAhD,CAAoD+D,MAAM,IAAIA,MAAM,CAACC,sBAArE,EAA6F9D,IAA7F,CAAkG,GAAlG,CAFX;AAGbH,cAAAA,oBAAoB,EAAEF,gBAAgB,CAACG,GAAjB,CAAqBC,IAAI,IAAIA,IAAI,CAACF,oBAAlC,EAAwDG,IAAxD,CAA6D,GAA7D,CAHT;AAIbgE,cAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,GACV,KAAKzH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,CAA6CD,YAA7C,KAA8D,CAAC,CAA/D,GACI,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CqE,OAAO,IAAIA,OAAO,CAACH,YAA/D,EAA6EhE,IAA7E,CAAkF,GAAlF,CADJ,GAEIsB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,CAA6CD,YAA9C,CAHA,GAIV,IARS;AASbI,cAAAA,SAAS,EAAE,KAAK5H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,IAA6C,KAAK7H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,CAA0CD,SATrF;AAUbE,cAAAA,YAAY,EAAE3B,MAAM,CAACC,kBAVR;AAWbA,cAAAA,kBAAkB,EAAEtB,MAAM,CAAC,CAAC,CAAF,CAXb;AAYbiD,cAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAZvG;AAabE,cAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAb9F;AAcbE,cAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eAdvG;AAebE,cAAAA,oBAAoB,EAAE,KAAKrI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4F,oBAA5B,CAAiDC,0BAf1D;AAgBb1E,cAAAA,cAAc,EAAE,KAAK7D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDvE,cAApG,IAAuH,KAhBzH;AAiBb2E,cAAAA,KAAK,EAAE3B,GAAG,CAAC4B,QAjBE;AAkBbC,cAAAA,GAAG,EAAE7B,GAAG,CAAC8B,MAlBI;AAmBbC,cAAAA,KAAK,EAAE,CAnBM;AAoBbC,cAAAA,KAAK,EAAE,CApBM;AAqBb9G,cAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QArBd;AAsBb+D,cAAAA,gBAAgB,EAAE,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAtBjC;AAuBbwB,cAAAA,mBAAmB,EAAE,KAAKvH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B6E,mBAvBpC;AAwBbnE,cAAAA,cAAc,EAAE,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAxB/B;AAyBbkD,cAAAA,WAAW,EAAEH,MAAM,CAACC,kBAAP,KAA8BhI,iBAAiB,CAACiI,MAAhD,GAAyD,KAAK1G,KAAL,CAAWmC,cAAX,GAA4B,KAAKnC,KAAL,CAAWmC,cAAX,CAA0BwE,WAA1B,IAAyC,CAArE,GAAyE,CAAlI,GAAsIwC,SAzBtI;AA0BbxE,cAAAA,YA1Ba;AA2BbyE,cAAAA,iBAAiB,EAAC,CA3BL;AA4BbC,cAAAA,0BAA0B,EAAE,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAvF,IAAoH,CAAC;AA5BnI,aADV;AA+BPjH,YAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC;AA/BpB,WADI;AAkCfU,UAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAlCd;AAmCfP,UAAAA,SAAS,EAAE,eAnCI;AAoCf8G,UAAAA,aAAa,EAAE,KAAKA;AApCL,SAAnB;;AAsCA,YAAI9C,MAAM,CAAC+C,UAAP,KAAsB9K,iBAAiB,CAAC+K,GAA5C,EAAiD;AAC7C,gBAAM5C,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE7K,cADK;AAEf8K,YAAAA,IAAI,EAAE;AACF2C,cAAAA,SAAS,EAAE,IADT;AAEFC,cAAAA,UAAU,EAAE;AAAEzH,gBAAAA,UAAF;AAAcc,gBAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C;AAA3C,eAFV;AAGFgE,cAAAA,cAAc,EAAE,IAHd;AAIF1C,cAAAA,UAAU,EAAE,eAJV;AAKF9B,cAAAA,SAAS,EAAE;AALT;AAFS,WAAnB;AAUA,eAAKlC,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH,SAZD,MAYO;AACH,eAAKvG,KAAL,CAAWjE,aAAX,CAAyB6F,UAAzB;AACH;AACJ;AACJ,KAv1DkB;;AAAA,SAw1DnB3F,cAx1DmB,GAw1DDkK,MAAD,IAAY;AACzB,UAAIa,UAAU,GAAG,KAAKhH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAnE;;AACA,UAAIY,UAAU,KAAK5I,iBAAiB,CAAC8I,GAArC,EAA0C;AACtCF,QAAAA,UAAU,GAAG,KAAKhH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByE,YAA5B,CAAyC7D,GAAzC,CAA6C8D,MAAM,IAAIA,MAAM,CAAChB,kBAA9D,EAAkF5C,IAAlF,CAAuF,GAAvF,CAAb;AACH;;AACD,UAAIqD,GAAG,GAAG/I,wBAAwB,CAAC,KAAKkC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BoE,YAA7B,EAA2C,KAAK9G,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqE,UAAvE,EAAmF,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBoC,QAApG,CAAlC;AACA,UAAI;AAAExB,QAAAA,IAAF;AAAQE,QAAAA;AAAR,UAAiB,KAAKf,KAA1B;AACA,UAAI4J,UAAU,GAAG,CAAC,GAAG,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B8G,SAAhC,CAAjB;AACAD,MAAAA,UAAU,GAAGA,UAAU,CAACE,MAAX,CAAkBjJ,IAAlB,EAAwBA,IAAI,GAAGE,IAA/B,CAAb;AACA,UAAIgJ,kBAAkB,GAAG7L,0BAA0B,CAAC0L,UAAD,EAAa,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuC,cAAzC,EAAyD,WAAzD,CAAnD;;AACA,UAAIyE,kBAAkB,CAAC7E,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,cAAMhD,SAAS,GAAG;AACd,4BAAkB;AACdmD,YAAAA,SAAS,EAAE0E,kBAAkB,CAACpG,GAAnB,CAAuB+D,MAAM,IAAIA,MAAM,CAACrC,SAAxC,EAAmDxB,IAAnD,CAAwD,GAAxD,CADG;AAEdsE,YAAAA,YAAY,EAAE3B,MAAM,CAACC,kBAFP;AAGdA,YAAAA,kBAAkB,EAAEtB,MAAM,CAACkC,UAAD,CAHZ;AAIdwB,YAAAA,KAAK,EAAE3B,GAAG,CAAC4B,QAJG;AAKdC,YAAAA,GAAG,EAAE7B,GAAG,CAAC8B,MALK;AAMdZ,YAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eANtG;AAOdE,YAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAP7F;AAQdE,YAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eARtG;AASdX,YAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,GACV,KAAKzH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,CAA6CD,YAA7C,KAA8D,CAAC,CAA/D,GACI,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CqE,OAAO,IAAIA,OAAO,CAACH,YAA/D,EAA6EhE,IAA7E,CAAkF,GAAlF,CADJ,GAEIsB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,CAA6CD,YAA9C,CAHA,GAIV,IAbU;AAcdI,YAAAA,SAAS,EAAE,KAAK5H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiH,SAA5B,GAAwC,KAAK3J,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiH,SAA5B,CAAsC/B,SAA9E,GAA0F,CAdvF;AAedgB,YAAAA,KAAK,EAAE,CAfO;AAgBd7G,YAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAhBb;AAiBdqG,YAAAA,oBAAoB,EAAEvD,MAAM,CAAC4E,kBAAkB,CAAC,CAAD,CAAlB,CAAsBrB,oBAAvB,CAjBd;AAkBduB,YAAAA,mBAAmB,EAAEF,kBAAkB,CAAC,CAAD,CAAlB,CAAsBE,mBAlB7B;AAmBd3E,YAAAA,cAAc,EAAE,KAAKjF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuC;AAnB9B,WADJ;AAqBXlD,UAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC;AArBhB,SAAlB;AAwBA,YAAIJ,UAAU,GAAG;AAAEqH,UAAAA,aAAa,EAAE,KAAKA,aAAtB;AAAqCpH,UAAAA,SAArC;AAAgDa,UAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C;AAA7E,SAAjB;;AACA,YAAIyD,MAAM,CAAC+C,UAAP,KAAsB9K,iBAAiB,CAAC+K,GAA5C,EAAiD;AAC7C,gBAAM5C,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE7K,cADK;AAEf8K,YAAAA,IAAI,EAAE;AACF2C,cAAAA,SAAS,EAAE,IADT;AAEFC,cAAAA,UAAU,EAAE;AAAEzH,gBAAAA,UAAF;AAAcc,gBAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C;AAA3C,eAFV;AAGFgE,cAAAA,cAAc,EAAE,IAHd;AAIF1C,cAAAA,UAAU,EAAE,gBAJV;AAKF9B,cAAAA,SAAS,EAAE;AALT;AAFS,WAAnB;AAUA,eAAKlC,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH,SAZD,MAYO;AACH,eAAKvG,KAAL,CAAW/D,cAAX,CAA0B2F,UAA1B;AACH;AACJ,OAzCD,MAyCO;AACH5D,QAAAA,KAAK,CAACyH,IAAN,CAAW,KAAKzF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KA/4DkB;;AAAA,SAg5DnBiE,mBAh5DmB,GAg5DG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AAE5C,UAAID,SAAJ,EAAe;AACX,YAAIjD,GAAG,GAAG/I,wBAAwB,CAAC,KAAKkC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+F,QAA7B,EAAuC,KAAKzI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiG,MAAnE,EAA2E,KAAK3I,KAAL,CAAWJ,KAAX,CAAiBoC,QAA5F,CAAlC;AACA,YAAIgI,cAAc,GAAG,EAArB;;AACA,YAAID,SAAS,KAAK,iBAAlB,EAAqC;AACjC,cAAID,SAAS,CAACtF,KAAV,KAAoB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAAxE,EAAyF;AACrFiC,YAAAA,cAAc,GAAG;AACbpB,cAAAA,KAAK,EAAE,CADM;AAEbqB,cAAAA,QAAQ,EAAEpD,GAAG,CAAC4B,QAFD;AAGbyB,cAAAA,MAAM,EAAErD,GAAG,CAAC8B,MAHC;AAIbZ,cAAAA,eAAe,EAAE+B,SAAS,CAACtF,KAJd;AAKbzC,cAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QALd;AAMbU,cAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UANhB;AAObsF,cAAAA,mBAAmB,EAAE8B,SAAS,CAAC/E;AAPlB,aAAjB;AASA,iBAAK/E,KAAL,CAAW9D,UAAX,CAAsB8N,cAAtB;AACH;AACJ,SAbD,MAaO,IAAID,SAAS,KAAK,cAAlB,EAAkC;AACrC,cAAID,SAAS,CAACtF,KAAV,KAAoB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAArE,EAAmF;AAC/E+B,YAAAA,cAAc,GAAG;AACbpB,cAAAA,KAAK,EAAE,CADM;AAEbqB,cAAAA,QAAQ,EAAEpD,GAAG,CAAC4B,QAFD;AAGbyB,cAAAA,MAAM,EAAErD,GAAG,CAAC8B,MAHC;AAIbZ,cAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAJpD;AAKbE,cAAAA,YAAY,EAAE6B,SAAS,CAACtF,KALX;AAMbzC,cAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QANd;AAObU,cAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAPhB;AAQbwF,cAAAA,gBAAgB,EAAE4B,SAAS,CAAC/E;AARf,aAAjB;AAUA,iBAAK/E,KAAL,CAAW7D,aAAX,CAAyB6N,cAAzB;AACH;AACJ,SAdM,MAcA,IAAID,SAAS,KAAK,iBAAlB,EAAqC;AAExC,cAAID,SAAS,CAACtF,KAAV,KAAoB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eAAxE,EAAyF;AACrF,gBAAItG,SAAS,GAAG;AACZ+G,cAAAA,KAAK,EAAE,CADK;AAEZqB,cAAAA,QAAQ,EAAEpD,GAAG,CAAC4B,QAFF;AAGZyB,cAAAA,MAAM,EAAErD,GAAG,CAAC8B,MAHA;AAIZZ,cAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAJrD;AAKZE,cAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAL/C;AAMZE,cAAAA,eAAe,EAAE2B,SAAS,CAACtF,KANf;AAOZzC,cAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC;AAPf,aAAhB;AASAgI,YAAAA,cAAc,GAAG;AACbnI,cAAAA,SADa;AAEba,cAAAA,UAAU,EAAE,EACR,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UADZ;AAER0F,gBAAAA,mBAAmB,EAAE0B,SAAS,CAAC/E;AAFvB;AAFC,aAAjB;AAOA,iBAAK/E,KAAL,CAAWrD,mBAAX,CAA+BqN,cAA/B;AACH;AACJ,SArBM,MAuBF,IAAID,SAAS,KAAK,yBAAlB,EAA6C;AAC9C,cAAID,SAAS,CAACtF,KAAV,KAAoB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqDC,uBAA7E,EAAsG;AAElGJ,YAAAA,cAAc,GAAG;AACbpB,cAAAA,KAAK,EAAE,CADM;AAEbJ,cAAAA,KAAK,EAAE3B,GAAG,CAAC4B,QAFE;AAGbC,cAAAA,GAAG,EAAE7B,GAAG,CAAC8B,MAHI;AAIbZ,cAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAJpD;AAKbE,cAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAL9C;AAMbE,cAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eANpD;AAObE,cAAAA,oBAAoB,EAAEyB,SAAS,CAACtF,KAPnB;AAQbzC,cAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QARd;AASbU,cAAAA,UAAU,EAAE,EAAE,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAtB;AAAkCyH,gBAAAA,wBAAwB,EAAEL,SAAS,CAAC/E;AAAtE,eATC;AAUbsF,cAAAA,eAAe,EAAE,KAAKrK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAVhC;AAWbZ,cAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAjD,KAAkE,CAAC,CAAnE,GAAuE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CyB,IAAI,IAAIA,IAAI,CAACyC,YAAzD,EAAuEhE,IAAvE,CAA4E,GAA5E,CAAvE,GAA0J,KAAKxD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C;AAX5M,aAAjB;AAaA,iBAAKxH,KAAL,CAAWuK,eAAX,CAA2BP,cAA3B;AACH;AACJ,SAlBI,MAmBA,IAAID,SAAS,KAAK,cAAlB,EAAkC;AACnC,cAAID,SAAS,CAACtF,KAAV,KAAoB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAzE,EAAuF;AACnFwC,YAAAA,cAAc,GAAG;AACbpB,cAAAA,KAAK,EAAE,CADM;AAEbqB,cAAAA,QAAQ,EAAEpD,GAAG,CAAC4B,QAFD;AAGbyB,cAAAA,MAAM,EAAErD,GAAG,CAAC8B,MAHC;AAIbZ,cAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAJpD;AAKbE,cAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAL9C;AAMbE,cAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eANpD;AAObE,cAAAA,oBAAoB,EAAE,KAAKrI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD5B,0BAP9D;AAQbf,cAAAA,YAAY,EAAEsC,SAAS,CAACtF,KAAV,KAAoB,CAAC,CAArB,GAAyB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CyB,IAAI,IAAIA,IAAI,CAACyC,YAAzD,EAAuEhE,IAAvE,CAA4E,GAA5E,CAAzB,GAA4GsG,SAAS,CAACtF,KARvH;AASbzC,cAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QATd;AAUbU,cAAAA,UAAU,EAAE,EAAE,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAtB;AAAkC4H,gBAAAA,oBAAoB,EAAER,SAAS,CAAC/E;AAAlE,eAVC;AAWbsF,cAAAA,eAAe,EAAE,KAAKrK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAXhC;AAYbhC,cAAAA,kBAAkB,EAAEoE,IAAI,CAACC,SAAL,CAAe,KAAKzK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAjE,CAZP;AAabsE,cAAAA,kBAAkB,EAAE,KAAK1K,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAlD,KAAyE,CAAzE,GAA6E,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByE,YAA5B,CAAyC7D,GAAzC,CAA6CyB,IAAI,IAAIA,IAAI,CAACqB,kBAA1D,EAA8E5C,IAA9E,CAAmF,GAAnF,CAA7E,GAAuK,KAAKxD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD;AAbhO,aAAjB;AAgBA,iBAAKpG,KAAL,CAAW3D,UAAX,CAAsB2N,cAAtB;AACH;AACJ,SApBI,MAoBE,IAAID,SAAS,KAAK,oBAAlB,EAAwC;AAC3C,cAAID,SAAS,CAACtF,KAAV,KAAoB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAA1E,EAA8F;AAC1F,gBAAI1D,UAAU,GAAG,EAAE,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAtB;AAAkC4G,cAAAA,qBAAqB,EAAEQ,SAAS,CAAC/E;AAAnE,aAAjB;AACA,kBAAMwB,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAE7K,cADK;AAEf8K,cAAAA,IAAI,EAAE;AAAE/D,gBAAAA;AAAF;AAFS,aAAnB;AAIA,iBAAK1C,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH;AACJ,SATM,MAUF,IAAIwD,SAAS,KAAK,WAAlB,EAA+B;AAChC,cAAID,SAAS,CAACtF,KAAV,KAAoB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,CAA0CD,SAAlE,EAA6E;AACzE,gBAAIlF,UAAU,GAAG,EAAE,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAtB;AAAkCmF,cAAAA,aAAa,EAAEiC,SAAS,CAAC/E;AAA3D,aAAjB;AACA,kBAAMwB,UAAU,GAAG;AACfC,cAAAA,QAAQ,EAAE7K,cADK;AAEf8K,cAAAA,IAAI,EAAE;AAAE/D,gBAAAA;AAAF;AAFS,aAAnB;AAIA,iBAAK1C,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH;AACJ,SATI,MAUA;AACD,cAAIuD,SAAS,CAACtF,KAAV,KAAoB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAA1E,EAA8F;AAC1F4D,YAAAA,cAAc,GAAG;AACbxB,cAAAA,KAAK,EAAE3B,GAAG,CAAC4B,QADE;AAEbC,cAAAA,GAAG,EAAE7B,GAAG,CAAC8B,MAFI;AAGbZ,cAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAHpD;AAIbE,cAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAJ9C;AAKbE,cAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eALpD;AAMbE,cAAAA,oBAAoB,EAAE,KAAKrI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD5B,0BAN9D;AAObxG,cAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAPd;AAQbU,cAAAA,UAAU,EAAE,EAAE,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAtB;AAAkCuE,gBAAAA,iBAAiB,EAAE6C,SAAS,CAAC/E;AAA/D,eARC;AASbsF,cAAAA,eAAe,EAAE,KAAKrK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAThC;AAUbhC,cAAAA,kBAAkB,EAAE0D,SAAS,CAACtF,KAVjB;AAWbkG,cAAAA,kBAAkB,EAAEZ,SAAS,CAACtF,KAAV,KAAoB,CAApB,GAAwB,KAAKxE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByE,YAA5B,CAAyC7D,GAAzC,CAA6CyB,IAAI,IAAIA,IAAI,CAACqB,kBAA1D,EAA8E5C,IAA9E,CAAmF,GAAnF,CAAxB,GAAkHsG,SAAS,CAACtF,KAXnI;AAYbgD,cAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAjD,KAAkE,CAAC,CAAnE,GAAuE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CyB,IAAI,IAAIA,IAAI,CAACyC,YAAzD,EAAuEhE,IAAvE,CAA4E,GAA5E,CAAvE,GAA0J,KAAKxD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C;AAZ5M,aAAjB;AAeA,iBAAKxH,KAAL,CAAW5D,aAAX,CAAyB4N,cAAzB;AACH;AACJ;AACJ;AACJ,KAvhEkB;;AAAA,SAwhEnBW,aAxhEmB,GAwhEFb,SAAD,IAAe;AAC3B,UAAIA,SAAJ,EAAe;AACX,YAAIpH,UAAU,GAAG,EAAE,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAtB;AAAkCkI,UAAAA,UAAU,EAAEd;AAA9C,SAAjB;AACA,cAAMvD,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE7K,cADK;AAEf8K,UAAAA,IAAI,EAAE;AAAE/D,YAAAA;AAAF;AAFS,SAAnB;AAIA,aAAK1C,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH;AACJ,KAjiEkB;;AAAA,SAkiEnBsE,eAliEmB,GAkiEA3J,KAAD,IAAW;AACzB,UAAIY,cAAc,GAAG,KAAKnC,KAAL,CAAWmC,cAAX,IAA6B,EAAlD;;AACA,UAAIZ,KAAK,CAAC4J,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCjJ,QAAAA,cAAc,CAACZ,KAAK,CAAC4J,MAAN,CAAarG,IAAd,CAAd,GAAoCvD,KAAK,CAAC4J,MAAN,CAAaE,OAAb,KAAyB,IAAzB,GAAgC5M,iBAAiB,CAAC+K,GAAlD,GAAwD/K,iBAAiB,CAAC6M,EAA9G;AACH,OAFD,MAGK;AACDnJ,QAAAA,cAAc,CAACZ,KAAK,CAAC4J,MAAN,CAAarG,IAAd,CAAd,GAAoCvD,KAAK,CAAC4J,MAAN,CAAatG,KAAjD;AACH;;AACD,WAAKrE,QAAL,CAAc;AAAE2B,QAAAA;AAAF,OAAd;AACH,KA3iEkB;;AAAA,SA4iEnBoJ,gBA5iEmB,GA4iEA,CAACC,QAAD,EAAWC,SAAX,KAAyB;AACxC,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACpBA,QAAAA,SAAS,GAAG,IAAIC,IAAJ,EAAZ;AACH;;AACD,UAAI7C,KAAK,GAAG,KAAKxI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+F,QAA5B,GAAuC1K,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBoC,QAAlB,EAA4B,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+F,QAAxD,CAA1D,GAA8H,IAAI4C,IAAJ,EAA1I;AACA,UAAI3C,GAAG,GAAG,KAAK1I,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiG,MAA5B,GAAqC5K,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBoC,QAAlB,EAA4B,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiG,MAAxD,CAAxD,GAA0H,IAAI0C,IAAJ,EAApI;AACA,UAAIxE,GAAG,GAAG,EAAV;;AACA,UAAIsE,QAAQ,KAAK,UAAjB,EAA6B;AACzBtE,QAAAA,GAAG,GAAG/I,wBAAwB,CAACsN,SAAD,EAAY1C,GAAZ,EAAiB,KAAK1I,KAAL,CAAWJ,KAAX,CAAiBoC,QAAlC,CAA9B;AACAwG,QAAAA,KAAK,GAAG3B,GAAG,CAAC4B,QAAZ;AACAC,QAAAA,GAAG,GAAG7B,GAAG,CAAC8B,MAAV;AACH,OAJD,MAIO;AACH9B,QAAAA,GAAG,GAAG/I,wBAAwB,CAAC0K,KAAD,EAAQ4C,SAAR,EAAmB,KAAKpL,KAAL,CAAWJ,KAAX,CAAiBoC,QAApC,CAA9B;AACAwG,QAAAA,KAAK,GAAG3B,GAAG,CAAC4B,QAAZ;AACAC,QAAAA,GAAG,GAAG7B,GAAG,CAAC8B,MAAV;AAEH;;AACD,UAAI/G,UAAU,GAAG;AACbC,QAAAA,SAAS,EAAE;AACP+G,UAAAA,KAAK,EAAE,CADA;AAEPX,UAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4I,YAA5B,IAA4C,KAAKtL,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4I,YAA5B,CAAyCrD,YAF5F;AAGPE,UAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,IAA+C,KAAKrK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,CAA4ClC,eAHrG;AAIPK,UAAAA,KAAK,EAAE1D,MAAM,CAAC0D,KAAD,CAJN;AAKPE,UAAAA,GAAG,EAAE5D,MAAM,CAAC4D,GAAD,CALJ;AAMP3G,UAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC;AANpB,SADE;AASbU,QAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C;AAThB,OAAjB;AAYA,WAAK1C,KAAL,CAAWrD,mBAAX,CAA+BiF,UAA/B;AACH,KA1kEkB;;AAAA,SA2kEnB2J,eA3kEmB,GA2kED,CAACrK,KAAD,EAAQsK,QAAR,KAAqB;AACnC,UAAI1J,cAAc,GAAG,KAAKnC,KAAL,CAAWmC,cAAX,IAA6B,EAAlD;AACA,UAAI0C,KAAK,GAAGtD,KAAK,CAACuK,aAAN,CAAoBT,OAApB,GAA8B5M,iBAAiB,CAAC+K,GAAhD,GAAsD/K,iBAAiB,CAAC6M,EAApF;AACAnJ,MAAAA,cAAc,CAAC,uBAAD,CAAd,GAA0C,EAAE,GAAGA,cAAc,CAAC,uBAAD,CAAnB;AAA8C,SAAC0J,QAAQ,CAACE,sBAAV,GAAmClH;AAAjF,OAA1C;AACA,WAAKrE,QAAL,CAAc;AAAE2B,QAAAA;AAAF,OAAd;AACH,KAhlEkB;;AAAA,SAilEnB6J,QAjlEmB,GAilER,MAAM;AACb,UAAI;AAAE7E,QAAAA,YAAF;AAAgBC,QAAAA,UAAhB;AAA4BiB,QAAAA,mBAA5B;AAAiDE,QAAAA,gBAAjD;AAAmEE,QAAAA,mBAAnE;AACAkB,QAAAA,qBADA;AACuBa,QAAAA,wBADvB;AACiDG,QAAAA,oBADjD;AACuEzC,QAAAA;AADvE,UACyF,KAAK7H,KAAL,CAAWJ,KAAX,CAAiB8C,UAD9G;AAEA,UAAIA,UAAU,GAAG,EAAE,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAtB;AAAkCoE,QAAAA,YAAlC;AAAgDC,QAAAA,UAAhD;AAA4DiB,QAAAA,mBAA5D;AAAiFE,QAAAA,gBAAjF;AAAmGE,QAAAA,mBAAnG;AAAwHkB,QAAAA,qBAAxH;AAA+Ia,QAAAA,wBAA/I;AAAyKG,QAAAA,oBAAzK;AAA+LzC,QAAAA;AAA/L,OAAjB;AACA,UAAIhG,SAAS,GAAG;AACZgC,QAAAA,cAAc,EAAGuE,mBAAmB,IAAIA,mBAAmB,CAACvE,cAA5C,IAA+D,KADnE;AAEZkE,QAAAA,eAAe,EAAGC,mBAAmB,IAAIA,mBAAmB,CAACD,eAA5C,IAAgE,CAAC,CAFtE;AAGZE,QAAAA,YAAY,EAAGC,gBAAgB,IAAIA,gBAAgB,CAACD,YAAtC,IAAuD,CAAC,CAH1D;AAIZE,QAAAA,eAAe,EAAGC,mBAAmB,IAAIA,mBAAmB,CAACD,eAA5C,IAAgE,CAAC,CAJtE;AAKZ/B,QAAAA,kBAAkB,EAACtB,MAAM,CAACwE,qBAAqB,GAAGA,qBAAqB,CAAClD,kBAAzB,GAA8C,CAAC,CAArE,CALb;AAMb;AACCwD,QAAAA,mBAAmB,EAAEO,wBAAwB,GAAGA,wBAAwB,CAACP,mBAAzB,IAAgD,CAAC,CAApD,GAAwD,IAPzF;AAQZvB,QAAAA,oBAAoB,EAACvD,MAAM,CAACqF,wBAAwB,GAAGA,wBAAwB,CAAC5B,0BAA5B,GAAwD,CAAjF,CARf;AASb;AACCf,QAAAA,YAAY,EAAE8C,oBAAoB,GAAGA,oBAAoB,CAAC9C,YAArB,KAAsC,CAAC,CAAvC,GAA2C,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CqE,OAAO,IAAIA,OAAO,CAACH,YAA/D,EAA6EhE,IAA7E,CAAkF,GAAlF,CAA3C,GAAoIsB,MAAM,CAACwF,oBAAoB,CAAC9C,YAAtB,CAA7I,GAAmL,IAVzM;AAWZI,QAAAA,SAAS,EAAEC,aAAa,IAAIA,aAAa,CAACD,SAA/B,GAA2CC,aAAa,CAACD,SAAzD,GAAqE,CAAC,CAXrE;AAYZ7F,QAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAZf;AAaZ4C,QAAAA,aAAa,EAAE,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBgF,aAAjB,IAAkC,EAbrC;AAcZkB,QAAAA,eAAe,EAAE,KAAK9F,KAAL,CAAWJ,KAAX,CAAiBkG,eAAjB,IAAoC,EAdzC;AAeZiD,QAAAA,iBAAiB,EAAC,CAfN;AAgBZF,QAAAA,KAAK,EAAC,CAhBM;AAiBZG,QAAAA,0BAA0B,EAAE,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAvF,IAAoH,CAAC;AAjBpI,OAAhB;;AAmBA,UAAInH,SAAS,CAACkG,eAAV,KAA8B,CAAC,CAA/B,IAAoClG,SAAS,CAACoG,YAAV,KAA2B,CAAC,CAAhE,IAAqEpG,SAAS,CAACsG,eAAV,KAA8B,CAAC,CAApG,IACGtG,SAAS,CAACuE,kBAAV,KAAiC,CAAC,CADrC,IAC0CvE,SAAS,CAAC+H,mBAAV,KAAkC,CAAC,CAD7E,IACkF/H,SAAS,CAACwG,oBAAV,KAAmC,CAAC,CADtH,IAEGiC,oBAAoB,CAAC9C,YAArB,KAAsC,IAFzC,IAEiDK,aAAa,CAACD,SAAd,KAA0B,CAAC,CAFhF,EAEmF;AAE/E,YAAIf,GAAG,GAAG/I,wBAAwB,CAACgJ,YAAD,EAAeC,UAAf,EAA2B,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBoC,QAA5C,CAAlC;AACAH,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBgF,GAAG,CAAC4B,QAA5B;AACA5G,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBgF,GAAG,CAAC8B,MAA1B;AACA,YAAI/G,UAAU,GAAG;AACbc,UAAAA,UADa;AAEbb,UAAAA,SAFa;AAGb+J,UAAAA,eAAe,EAAE,KAAKA,eAHT;AAIbC,UAAAA,kBAAkB,EAAE,KAAKA,kBAJZ;AAKbC,UAAAA,aAAa,EAAE,KAAKA,aALP;AAMbtL,UAAAA,IAAI,EAAE,KAAKb,KAAL,CAAWa,IANJ;AAObE,UAAAA,IAAI,EAAE,KAAKf,KAAL,CAAWe,IAPJ;AAQb6B,UAAAA,QAAQ,EAAE,KAAK5C,KAAL,CAAW4C,QARR;AASbC,UAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAW6C,QATR;AAUb0C,UAAAA,eAAe,EAAE,KAAKvF,KAAL,CAAWuF,eAVf;AAWbC,UAAAA,mBAAmB,EAAE,KAAKxF,KAAL,CAAWwF,mBAXnB;AAYbC,UAAAA,iBAAiB,EAAE,KAAKzF,KAAL,CAAWyF,iBAZjB;AAabC,UAAAA,aAAa,EAAE,KAAK1F,KAAL,CAAW0F,aAbb;AAcbC,UAAAA,iBAAiB,EAAE,KAAK3F,KAAL,CAAW2F,iBAdjB;AAebE,UAAAA,qBAAqB,EAAE,KAAK7F,KAAL,CAAW6F,qBAfrB;AAgBbpB,UAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWyE,oBAhBpB;AAiBbmB,UAAAA,gBAAgB,EAAE,KAAK5F,KAAL,CAAW4F,gBAjBhB;AAkBbwG,UAAAA,2BAA2B,EAAE,KAAKpM,KAAL,CAAWoM,2BAlB3B;AAmBbC,UAAAA,sBAAsB,EAAE,KAAKrM,KAAL,CAAWqM;AAnBtB,SAAjB;AAqBA,aAAKhM,KAAL,CAAW1D,eAAX,CAA2BsF,UAA3B;AACH,OA7BD,MA6BO;AACH5D,QAAAA,KAAK,CAACyH,IAAN,CAAW,KAAKzF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AACJ,KAxoEkB;;AAAA,SAyoEnBqG,cAzoEmB,GAyoEF,MAAM;AACnB,UAAIpF,GAAG,GAAG/I,wBAAwB,CAAC,KAAKkC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+F,QAA7B,EAAuC,KAAKzI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiG,MAAnE,EAA2E,KAAK3I,KAAL,CAAWJ,KAAX,CAAiBoC,QAA5F,CAAlC,CADmB,CAEnB;AACF;;AACE,UAAI8E,YAAY,GAAG/I,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBoC,QAAlB,EAA4B,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+F,QAAxD,CAAtC;AACA,UAAI1B,UAAU,GAAGhJ,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBoC,QAAlB,EAA4B,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiG,MAAxD,CAApC,CALmB,CAMnB;AACA;;AACA,UAAIX,mBAAmB,GAAG,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAAzG;AACA,UAAIE,gBAAgB,GAAG,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAAnG;AACA,UAAIE,mBAAmB,GAAG,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAAzG;AACA,UAAIkB,qBAAqB,GAAG,KAAKtJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,IAAqD,KAAKtJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA7G;AACA,UAAIa,wBAAwB,GAAG,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,IAAwD,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAAnH;AACA,UAAIG,oBAAoB,GAAG,KAAKtK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,IAAoD,KAAKtK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA3G;AACA,UAAIzC,aAAa,GAAG,KAAK7H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,IAA6C,KAAK7H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA7F;AACA,UAAInF,UAAU,GAAG,EAAE,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAtB;AAAkCoE,QAAAA,YAAlC;AAAgDC,QAAAA,UAAhD;AAA4DiB,QAAAA,mBAA5D;AAAiFE,QAAAA,gBAAjF;AAAmGE,QAAAA,mBAAnG;AAAwHkB,QAAAA,qBAAxH;AAA+Ia,QAAAA,wBAA/I;AAAyKG,QAAAA,oBAAzK;AAA+LzC,QAAAA;AAA/L,OAAjB;AACA,UAAIhG,SAAS,GAAG;AACb;AACCkG,QAAAA,eAAe,EAAG,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAApG,IAAwH,CAAC,CAF9H;AAGZE,QAAAA,YAAY,EAAEiE,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAA9F,CAAR,IAAuH,CAAC,CAH1H;AAIZE,QAAAA,eAAe,EAAE+D,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eAApG,CAAR,IAAgI,CAAC,CAJtI;AAKZ/B,QAAAA,kBAAkB,EAAI,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,IAAqD,KAAKtJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAlD,KAAyE0C,SAA/H,IAA6I,KAAK9I,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAlD,KAAyE,GAAvN,GAA8NtB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAnD,CAApO,GAA6S,IALrT;AAMZwD,QAAAA,mBAAmB,EAAE,KAAK5J,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,GAAuD,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqDP,mBAArD,IAA4E,CAAC,CAApI,GAAwI,IANjJ;AAOZvB,QAAAA,oBAAoB,EAAE,KAAKrI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,IAAwD,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD5B,0BAA7G,GAA0IzD,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD5B,0BAAtD,CAAhJ,GAAoO,IAP9O;AAQZf,QAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,GAAmD,KAAKtK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAjD,KAAkE,CAAC,CAAnE,GAAuE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CqE,OAAO,IAAIA,OAAO,CAACH,YAA/D,EAA6EhE,IAA7E,CAAkF,GAAlF,CAAvE,GAAgKsB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAlD,CAAzN,GAA2R,IAR7R;AASZI,QAAAA,SAAS,EAAE,KAAK5H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,GAA4C,KAAK7H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,CAA0CD,SAAtF,GAAkG,CAAC,CATlG;AAUZ/D,QAAAA,cAAc,EAAG,KAAK7D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDvE,cAApG,IAAuH,KAV3H;AAWZ9B,QAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAXf;AAYZ4C,QAAAA,aAAa,EAAE,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBgF,aAZpB;AAaZkB,QAAAA,eAAe,EAAE,KAAK9F,KAAL,CAAWJ,KAAX,CAAiBkG,eAbtB;AAcZiD,QAAAA,iBAAiB,EAAE,CAdP;AAeZF,QAAAA,KAAK,EAAC,CAfM;AAgBZG,QAAAA,0BAA0B,EAAE,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAvF,IAAoH,CAAC;AAhBpI,OAAhB;;AAkBA,UAAInH,SAAS,CAACkG,eAAV,KAA8B,CAAC,CAA/B,IAAoClG,SAAS,CAACoG,YAAV,KAA2B,CAAC,CAAhE,IAAqEpG,SAAS,CAACsG,eAAV,KAA8B,CAAC,CAApG,IACGtG,SAAS,CAACuE,kBAAV,KAAiC,IADpC,IAC4CvE,SAAS,CAAC+H,mBAAV,KAAkC,CAAC,CAD/E,IACoF/H,SAAS,CAACwG,oBAAV,KAAmC,IADvH,IAEGiB,qBAAqB,CAAC6C,aAAtB,KAAwC,IAF3C,IAEmDtK,SAAS,CAAC+F,SAAV,KAAwBkB,SAF/E,EAE0F;AAEtF;AACAjH,QAAAA,SAAS,CAAC,UAAD,CAAT,GAAwBgF,GAAG,CAAC4B,QAA5B;AACA5G,QAAAA,SAAS,CAAC,QAAD,CAAT,GAAsBgF,GAAG,CAAC8B,MAA1B;AACA,YAAI/G,UAAU,GAAG;AACbc,UAAAA,UADa;AAEbb,UAAAA,SAFa;AAGb+J,UAAAA,eAAe,EAAE,KAAKA,eAHT;AAIbC,UAAAA,kBAAkB,EAAE,KAAKA,kBAJZ;AAKbC,UAAAA,aAAa,EAAE,KAAKA,aALP;AAMbtL,UAAAA,IAAI,EAAE,KAAKb,KAAL,CAAWa,IANJ;AAObE,UAAAA,IAAI,EAAE,KAAKf,KAAL,CAAWe,IAPJ;AAQb6B,UAAAA,QAAQ,EAAE,KAAK5C,KAAL,CAAW4C,QARR;AASbC,UAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAW6C,QATR;AAUb0C,UAAAA,eAAe,EAAE,KAAKvF,KAAL,CAAWuF,eAVf;AAWbC,UAAAA,mBAAmB,EAAE,KAAKxF,KAAL,CAAWwF,mBAXnB;AAYbC,UAAAA,iBAAiB,EAAE,KAAKzF,KAAL,CAAWyF,iBAZjB;AAabC,UAAAA,aAAa,EAAE,KAAK1F,KAAL,CAAW0F,aAbb;AAcbC,UAAAA,iBAAiB,EAAE,KAAK3F,KAAL,CAAW2F,iBAdjB;AAebE,UAAAA,qBAAqB,EAAE,KAAK7F,KAAL,CAAW6F,qBAfrB;AAgBbpB,UAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWyE,oBAhBpB;AAiBbmB,UAAAA,gBAAgB,EAAE,KAAK5F,KAAL,CAAW4F,gBAjBhB;AAkBbwG,UAAAA,2BAA2B,EAAE,KAAKpM,KAAL,CAAWoM,2BAlB3B;AAmBbC,UAAAA,sBAAsB,EAAE,KAAKrM,KAAL,CAAWqM;AAnBtB,SAAjB;AAqBA,aAAKhM,KAAL,CAAW1D,eAAX,CAA2BsF,UAA3B;AACH,OA7BD,MA6BO;AACH5D,QAAAA,KAAK,CAACyH,IAAN,CAAW,KAAKzF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAX;AACH;AAEJ,KA5sEkB;;AAAA,SA6sEnBvB,mBA7sEmB,GA6sEInD,KAAD,IAAW;AAE7B,cAAQ,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBgF,aAAzB;AACI,aAAK,aAAL;AACI,eAAKzE,QAAL,CAAc;AACV+E,YAAAA,eAAe,EAAEhE,KAAK,CAACE;AADb,WAAd;AAGA;;AACJ,aAAK,gBAAL;AACI,eAAKjB,QAAL,CAAc;AACVgF,YAAAA,mBAAmB,EAAEjE,KAAK,CAACE;AADjB,WAAd;AAGA;;AACJ,aAAK,cAAL;AACI,eAAKjB,QAAL,CAAc;AACViF,YAAAA,iBAAiB,EAAElE,KAAK,CAACE;AADf,WAAd;AAGA;;AACJ,aAAK,UAAL;AACI,eAAKjB,QAAL,CAAc;AACVkF,YAAAA,aAAa,EAAEnE,KAAK,CAACE;AADX,WAAd;AAGA;;AACJ,aAAK,qBAAL;AACI,eAAKjB,QAAL,CAAc;AACVgF,YAAAA,mBAAmB,EAAEjE,KAAK,CAACE;AADjB,WAAd;AAGA;;AACJ,aAAK,kBAAL;AACI,eAAKjB,QAAL,CAAc;AACViE,YAAAA,oBAAoB,EAAElD,KAAK,CAACE;AADlB,WAAd;AAGA;;AACJ,aAAK,eAAL;AACI,eAAKjB,QAAL,CAAc;AACVmF,YAAAA,iBAAiB,EAAEpE,KAAK,CAACE;AADf,WAAd;AAGA;;AACJ,aAAK,yBAAL;AACI,eAAKjB,QAAL,CAAc;AACVqF,YAAAA,qBAAqB,EAAEtE,KAAK,CAACE;AADnB,WAAd;AAGA;;AACJ,aAAK,yBAAL;AACI,eAAKjB,QAAL,CAAc;AACVoF,YAAAA,gBAAgB,EAAErE,KAAK,CAACE;AADd,WAAd;AAGA;;AACJ;AACI,eAAKjB,QAAL,CAAc;AACV+E,YAAAA,eAAe,EAAEhE,KAAK,CAACE;AADb,WAAd;AAGA;AAlDR;AAqDH,KApwEkB;;AAAA,SAqwEnBgL,yBArwEmB,GAqwEUlL,KAAD,IAAW;AACnC,WAAKf,QAAL,CAAc;AACVgB,QAAAA,mBAAmB,EAAED,KAAK,CAACE;AADjB,OAAd;AAGH,KAzwEkB;;AAAA,SA0wEnBiL,qBA1wEmB,GA0wEMnL,KAAD,IAAW;AAC/B,cAAQ,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBkG,eAAzB;AACI,aAAK,gBAAL;AACI,eAAK3F,QAAL,CAAc;AACVgB,YAAAA,mBAAmB,EAAED,KAAK,CAACE;AADjB,WAAd;AAGA;;AACJ,aAAK,2BAAL;AACI,eAAKjB,QAAL,CAAc;AACV6L,YAAAA,sBAAsB,EAAE9K,KAAK,CAACE;AADpB,WAAd;AAGA;;AACJ,aAAK,kBAAL;AACI,eAAKjB,QAAL,CAAc;AACV4L,YAAAA,2BAA2B,EAAE7K,KAAK,CAACE;AADzB,WAAd;AAGA;;AACJ,aAAK,mBAAL;AACI,eAAKjB,QAAL,CAAc;AACVmM,YAAAA,sBAAsB,EAAEpL,KAAK,CAACE;AADpB,WAAd;AAGA;;AACJ;AACI,eAAKjB,QAAL,CAAc;AACVgB,YAAAA,mBAAmB,EAAED,KAAK,CAACE;AADjB,WAAd;AAGA;AAzBR;AA2BH,KAtyEkB;;AAAA,SAuyEnBmL,WAvyEmB,GAuyEL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,YAAM/J,UAAU,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAApC;AACA,UAAIb,SAAS,GAAG,EAAhB;AACA,UAAID,UAAU,GAAG,EAAjB;AACA,UAAI8K,EAAE,GAAG,IAAT;AACA7K,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBoC,QAAzC;;AACA,UAAI,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,SAAnC,EAA8C;AAC1CL,QAAAA,SAAS,CAAC,eAAD,CAAT,GAA6B;AACzB8K,UAAAA,UAAU,EAAE,KAAK3M,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BkI,UAA5B,CAAuCpG,KAAvC,IAAgD,CAAC,CADpC;AAEzBnB,UAAAA,oBAAoB,EAAE,KAAK1D,KAAL,CAAWmC,cAAX,CAA0BuB,oBAFvB;AAGzBqI,UAAAA,sBAAsB,EAAE,KAAK/L,KAAL,CAAWmC,cAAX,CAA0B4J,sBAHzB;AAIzBkB,UAAAA,qBAAqB,EAAE,KAAKjN,KAAL,CAAWmC,cAAX,CAA0B8K,qBAA1B,IAAmD,EAJjD;AAKzBC,UAAAA,gBAAgB,EAAE,KAAK7M,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,CAA2CE,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACF,oBAA5D,EAAkFG,IAAlF,CAAuF,GAAvF;AALO,SAA7B;AAOA5B,QAAAA,UAAU,GAAG;AACTO,UAAAA,SAAS,EAAE,eADF;AAETF,UAAAA,QAAQ,EAAE,UAFD;AAGTJ,UAAAA,SAAS,EAAEA,SAHF;AAITiL,UAAAA,SAAS,EAAE;AAAEC,YAAAA,cAAc,EAAE,gBAAlB;AAAoCC,YAAAA,eAAe,EAAE;AAArD,WAJF;AAKT9K,UAAAA,SAAS,EAAE;AALF,SAAb;AAOH,OAfD,MAgBK,IAAI,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBoE,UAAjB,KAAgC,uBAApC,EAA6D;AAC9D,YAAIiJ,SAAS,GAAG;AACZjL,UAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QADf;AAEZF,UAAAA,cAAc,EAAE,KAAKnC,KAAL,CAAWmC,cAFf;AAGZY,UAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAHjB;AAIZ8J,UAAAA,QAJY;AAIFC,UAAAA,OAJE;AAKZvK,UAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC;AALhB,SAAhB;AAOAN,QAAAA,UAAU,GAAG3C,sBAAsB,CAACgO,SAAD,CAAnC;AACH,OATI,MAUA;AACD,YAAIC,iBAAiB,GAAG,EAAxB;;AACA,YAAI,KAAKvN,KAAL,CAAWmC,cAAX,CAA0BqL,qBAA9B,EAAqD;AACjDC,UAAAA,MAAM,CAACC,IAAP,CAAY,KAAK1N,KAAL,CAAWmC,cAAX,CAA0BqL,qBAAtC,EAA6D7J,GAA7D,CAAkEgK,GAAD,IAC7DJ,iBAAiB,CAACK,IAAlB,CACI;AACI7B,YAAAA,sBAAsB,EAAE4B,GAD5B;AAEIE,YAAAA,gBAAgB,EAAE,KAAK7N,KAAL,CAAWmC,cAAX,CAA0BqL,qBAA1B,CAAgDG,GAAhD;AAFtB,WADJ,CADJ;AAQAzL,UAAAA,SAAS,CAAC,mBAAD,CAAT,GAAiCqL,iBAAjC;AACAtL,UAAAA,UAAU,GAAG;AACTO,YAAAA,SAAS,EAAE,mBADF;AAETF,YAAAA,QAAQ,EAAE,UAFD;AAGTJ,YAAAA,SAAS,EAAEA,SAHF;AAITiL,YAAAA,SAAS,EAAE;AAAEC,cAAAA,cAAc,EAAE,gBAAlB;AAAoCC,cAAAA,eAAe,EAAE;AAArD,aAJF;AAKT9K,YAAAA,SAAS,EAAE;AALF,WAAb;AAOH,SAjBD,MAiBO;AACHwK,UAAAA,EAAE,GAAG,KAAL;AACA,eAAKe,WAAL;AACH;AACJ;;AACD,UAAIf,EAAJ,EAAQ;AACJ,YAAIhP,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiB8D,qBAAlB,EAAyC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B0L,SAAnE,EAA8E,KAAK1N,KAAL,CAAWJ,KAAX,CAAiB0E,YAA/F,CAAb,EAA2H;AACvH,gBAAMiC,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE7K,cADK;AAEf8K,YAAAA,IAAI,EAAE;AACF2C,cAAAA,SAAS,EAAE,IADT;AAEFC,cAAAA,UAAU,EAAE;AAAEzH,gBAAAA,UAAF;AAAcc,gBAAAA;AAAd,eAFV;AAGFgE,cAAAA,cAAc,EAAE,IAHd;AAIFxE,cAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAJ1B;AAKF8B,cAAAA,UAAU,EAAE;AALV;AAFS,WAAnB;AAUA,eAAKhE,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH,SAZD,MAaK;AACD,eAAKvG,KAAL,CAAWvD,UAAX,CAAsBmF,UAAtB,EAAkCc,UAAlC,EAA8C,gBAA9C;AACH;AACJ;AACJ,KAj3EkB;;AAAA,SAk3EnB+K,WAl3EmB,GAk3EL,MAAM;AAChB,UAAIrE,SAAS,GAAG,KAAKpJ,KAAL,CAAWJ,KAAX,CAAiBwJ,SAAjC;AACA,UAAIuE,SAAS,GAAG,KAAK3N,KAAL,CAAWJ,KAAX,CAAiB+N,SAAjC;AACA,UAAIjH,cAAc,GAAG,KAAK1G,KAAL,CAAWJ,KAAX,CAAiB8G,cAAtC;AACA,UAAI5E,cAAc,GAAG,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBkC,cAAtC;AACA,UAAI8L,YAAY,GAAG,KAAK5N,KAAL,CAAWJ,KAAX,CAAiBgO,YAApC;AACA,UAAI1L,SAAS,GAAG,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjC;AACA,UAAI2L,iBAAiB,GAAG,KAAK7N,KAAL,CAAWJ,KAAX,CAAiBiO,iBAAzC;;AACA,UAAI,KAAK7N,KAAL,CAAWJ,KAAX,CAAiBwJ,SAArB,EAAgC;AAC5B,YAAIlH,SAAS,KAAK,QAAd,IAA0BA,SAAS,KAAK,SAAxC,IAAqDA,SAAS,KAAK,kBAAnE,IAAyF,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,UAA5H,EAAwI;AACpIkH,UAAAA,SAAS,GAAG,KAAZ;AACAuE,UAAAA,SAAS,GAAG,KAAZ;AACAjH,UAAAA,cAAc,GAAG,KAAjB;AACA5E,UAAAA,cAAc,GAAG,EAAjB;AACA8L,UAAAA,YAAY,GAAG,EAAf;AACA1L,UAAAA,SAAS,GAAG4G,SAAZ;AACH,SAPD,MAQK;AACDM,UAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,OAZD,MAaK;AACDyE,QAAAA,iBAAiB,GAAG,KAApB;AACAF,QAAAA,SAAS,GAAG,KAAZ;AACAjH,QAAAA,cAAc,GAAG,KAAjB;AACA5E,QAAAA,cAAc,GAAG,EAAjB;AACA8L,QAAAA,YAAY,GAAG,EAAf;AACH;;AAED,YAAMrH,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE7K,cADK;AAEf8K,QAAAA,IAAI,EAAE;AAAEkH,UAAAA,SAAF;AAAajH,UAAAA,cAAb;AAA6B0C,UAAAA,SAA7B;AAAwCtH,UAAAA,cAAxC;AAAwD8L,UAAAA,YAAxD;AAAsEE,UAAAA,eAAe,EAAE,IAAvF;AAA6F5L,UAAAA,SAA7F;AAAwG2L,UAAAA;AAAxG;AAFS,OAAnB;AAIA,WAAK7N,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH,KAp5EkB;;AAAA,SAq5EnBwH,aAr5EmB,GAq5EH,MAAM;AAClB,YAAMnM,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBoC,QADZ;AAERgM,YAAAA,OAAO,EAAE,KAAKrO,KAAL,CAAWmC,cAAX,CAA0B,eAA1B,CAFD;AAGRmM,YAAAA,WAAW,EAAC,KAAKtO,KAAL,CAAWmC,cAAX,CAA0B,aAA1B,KAA4C,KAAKnC,KAAL,CAAWmC,cAAX,CAA0B,aAA1B,EAAyC0C,KAHzF;AAIR0J,YAAAA,iBAAiB,EAAC,KAAKvO,KAAL,CAAWmC,cAAX,CAA0B,aAA1B,KAA4C,KAAKnC,KAAL,CAAWmC,cAAX,CAA0B,aAA1B,EAAyCqM;AAJ/F,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAKzO,KAAL,CAAWmC,cAAX,CAA0B,eAA1B;AARH,SADI;AAWfuH,QAAAA,UAAU,EAAE,KAAKrJ,KAAL,CAAWJ,KAAX,CAAiByJ,UAXd;AAYfnH,QAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC;AAZb,OAAnB;;AAcA,UAAI,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,SAA/B,IAA4C,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,kBAA3E,IAAiG,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,UAApI,EAAgJ;AAC5I,aAAKlC,KAAL,CAAWtD,wBAAX,CAAoCkF,UAApC,EAAgD,gBAAhD;AACH,OAFD,MAEO;AACH,aAAK5B,KAAL,CAAWxD,uBAAX,CAAmCoF,UAAnC,EAA+C,gBAA/C;AACH;AACJ,KAz6EkB;;AAAA,SA69EnByM,qBA79EmB,GA69EK,CAACnN,KAAD,EAAQoN,OAAR,KAAoB;AACxC,UAAIxM,cAAc,GAAGhD,qBAAqB,CAAC,CAAD,EAAI,KAAKa,KAAL,CAAWmC,cAAf,EAA+BZ,KAA/B,EAAsCoN,OAAtC,CAA1C;AACA,WAAKnO,QAAL,CAAc;AAAE2B,QAAAA;AAAF,OAAd;AACH,KAh+EkB;;AAAA,SAi+EnByM,qBAj+EmB,GAi+EK,CAACzE,SAAD,EAAYwE,OAAZ,KAAwB;AAC5C,UAAIxM,cAAc,GAAGhD,qBAAqB,CAAC,CAAD,EAAI,KAAKa,KAAL,CAAWmC,cAAf,EAA+BgI,SAA/B,EAA0CwE,OAA1C,CAA1C;AACA,WAAKnO,QAAL,CAAc;AAAE2B,QAAAA;AAAF,OAAd;AACH,KAp+EkB;;AAAA,SAq+EnB0M,oBAr+EmB,GAq+EI,CAACC,QAAD,EAAWH,OAAX,KAAuB;AAC1C,UAAIxM,cAAc,GAAGhD,qBAAqB,CAAC,CAAD,EAAI,KAAKa,KAAL,CAAWmC,cAAf,EAA+B2M,QAA/B,EAAyCH,OAAzC,CAA1C;AACA,WAAKnO,QAAL,CAAc;AAAE2B,QAAAA;AAAF,OAAd;AACH,KAx+EkB;;AAAA,SAy+EnBoC,mBAz+EmB,GAy+EG,CAACsI,QAAD,EAAWC,OAAX,EAAoB3K,cAApB,KAAuC;AACzD,YAAMY,UAAU,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAApC;AACA,UAAIb,SAAS,GAAG,EAAhB;AACA,UAAID,UAAU,GAAG,EAAjB;AACAC,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBoC,QAAzC;;AAGA,UAAI,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoE,UAAjB,KAAgC,oBAApC,EAA0D;AACtD,YAAIuF,UAAU,GAAG,EAAjB;;AACA,YAAI,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgM,cAA5B,KAA+C5F,SAAnD,EAA8D;AAC1DS,UAAAA,UAAU,GAAG1L,0BAA0B,CAAC,KAAKmC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgM,cAA7B,EAA6C,KAAK1O,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiM,qBAA5B,CAAkDzL,KAAlD,CAAwD,KAAKvD,KAAL,CAAWa,IAAnE,EAAyE,KAAKb,KAAL,CAAWa,IAAX,GAAkB,KAAKb,KAAL,CAAWe,IAAtG,CAA7C,EAA0J,WAA1J,CAAvC;AACH,SAFD,MAEO;AACH6I,UAAAA,UAAU,GAAG,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B8G,SAA5B,CAAsCtG,KAAtC,CAA4C,KAAKvD,KAAL,CAAWa,IAAvD,EAA6D,KAAKb,KAAL,CAAWa,IAAX,GAAkB,KAAKb,KAAL,CAAWe,IAA1F,CAAb;AACH;;AACD,YAAIkO,UAAU,GAAG/Q,0BAA0B,CAAC0L,UAAD,EAAa,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAAzC,EAA2D,WAA3D,CAA3C;AAEA,YAAIkH,SAAS,GAAG;AACZjL,UAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QADf;AAEZ6M,UAAAA,aAAa,EAAE,KAAK7O,KAAL,CAAW6O,aAFd;AAGZ/M,UAAAA,cAHY;AAIZY,UAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJjB;AAKZ8J,UAAAA,QALY;AAKFC,UAAAA,OALE;AAMZvK,UAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SANhB;AAOZ8C,UAAAA,SAAS,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,GAA+C,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6CzC,GAA7C,CAAiDwL,CAAC,IAAIA,CAAC,CAAC9J,SAAxD,EAAmExB,IAAnE,CAAwE,GAAxE,CAA/C,GAA8H;AAP7H,SAAhB;AASA5B,QAAAA,UAAU,GAAGxC,oBAAoB,CAAC6N,SAAD,EAAY2B,UAAZ,CAAjC;AACH;;AAED,UAAI,KAAK5O,KAAL,CAAWJ,KAAX,CAAiBoE,UAAjB,KAAgC,kBAApC,EAAwD;AACpD,YAAI;AAAEzB,UAAAA,QAAF;AAAYC,UAAAA;AAAZ,YAAyB,KAAK7C,KAAlC;AACA,YAAI8C,QAAQ,GAAG,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAA5B,GAA4C,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAAhC,CAA5C,GAA6F,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BE,OAAhC,CAA5G;AACAH,QAAAA,QAAQ,GAAGA,QAAQ,CAACS,KAAT,CAAeX,QAAf,EAAyBA,QAAQ,GAAGC,QAApC,CAAX;AACA,YAAIW,gBAAgB,GAAGtF,0BAA0B,CAAC4E,QAAD,EAAW,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAAvC,EAAuD,sBAAvD,CAAjD;AACA,YAAI6J,SAAS,GAAG;AACZjL,UAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QADf;AAEZ6M,UAAAA,aAAa,EAAE,KAAK7O,KAAL,CAAW6O,aAFd;AAGZ/M,UAAAA,cAHY;AAIZY,UAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJjB;AAKZ8J,UAAAA,QALY;AAKFC,UAAAA,OALE;AAMZvK,UAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SANhB;AAOZmB,UAAAA,oBAAoB,EAAE,KAAKrD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,GAA6C,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,CAA2CE,GAA3C,CAA+CwL,CAAC,IAAIA,CAAC,CAACzL,oBAAtD,EAA4EG,IAA5E,CAAiF,GAAjF,CAA7C,GAAqI;AAP/I,SAAhB;AASA5B,QAAAA,UAAU,GAAGvC,kBAAkB,CAAC4N,SAAD,EAAY9J,gBAAZ,CAA/B;AACH,OA3CwD,CA8C1D;;;AAGK,UAAIzF,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiB8D,qBAAlB,EAAyC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B0L,SAAnE,EAA8E,KAAK1N,KAAL,CAAWJ,KAAX,CAAiB0E,YAA/F,CAAb,EAA2H;AACvH,cAAMiC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE7K,cADK;AAEf8K,UAAAA,IAAI,EAAE;AACF2C,YAAAA,SAAS,EAAE,IADT;AAEFC,YAAAA,UAAU,EAAE;AAAEzH,cAAAA,UAAF;AAAcc,cAAAA;AAAd,aAFV;AAGFR,YAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAH1B;AAIF8B,YAAAA,UAAU,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBoE;AAJ3B;AAFS,SAAnB;AASA,aAAKhE,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH,OAXD,MAYK;AACD,aAAKvG,KAAL,CAAWvD,UAAX,CAAsBmF,UAAtB,EAAkCc,UAAlC,EAA8C,kBAA9C;AACH,OA/DoD,CAiEzD;AACG;AACJ;;AACF,KA7iFkB;;AAAA,SA8iFnBkB,qBA9iFmB,GA8iFK,CAAC4I,QAAD,EAAWC,OAAX,EAAoB3K,cAApB,KAAuC;AAC3D,YAAMY,UAAU,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAApC;AACA,UAAIb,SAAS,GAAG,EAAhB;AACA,UAAID,UAAU,GAAG,EAAjB;AACA,UAAI;AAAEW,QAAAA,QAAF;AAAYC,QAAAA,QAAZ;AAAsBhC,QAAAA,IAAtB;AAA4BE,QAAAA;AAA5B,UAAqC,KAAKf,KAA9C;AACA,UAAI8C,QAAQ,GAAG,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAA5B,GAA4C,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAAhC,CAA5C,GAA6F,CAAC,GAAG,KAAK3C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BE,OAAhC,CAA5G;AACAH,MAAAA,QAAQ,GAAGA,QAAQ,CAACS,KAAT,CAAeX,QAAf,EAAyBA,QAAQ,GAAGC,QAApC,CAAX;AACA,UAAIW,gBAAgB,GAAGtF,0BAA0B,CAAC4E,QAAD,EAAW,KAAKzC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAAvC,EAAuD,sBAAvD,CAAjD;AACA,UAAImG,UAAU,GAAG,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgM,cAA5B,GAA6C,CAAC,GAAG,KAAK1O,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgM,cAAhC,CAA7C,GAA+F,CAAC,GAAG,KAAK1O,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B8G,SAAhC,CAAhH;AACAD,MAAAA,UAAU,GAAGA,UAAU,CAACrG,KAAX,CAAiB1C,IAAjB,EAAuBA,IAAI,GAAGE,IAA9B,CAAb;AACA,UAAIqO,kBAAkB,GAAGlR,0BAA0B,CAAC0L,UAAD,EAAa,KAAKvJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAAzC,EAA2D,WAA3D,CAAnD;AACAlE,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBoC,QAAzC;AACA,UAAI0K,EAAE,GAAG,IAAT;;AACA,UAAI,KAAK1M,KAAL,CAAWJ,KAAX,CAAiBoE,UAAjB,KAAgC,uBAApC,EAA6D;AACzD,YAAIiJ,SAAS,GAAG;AACZjL,UAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QADf;AAEZF,UAAAA,cAFY;AAGZY,UAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAHjB;AAIZ8J,UAAAA,QAJY;AAIFC,UAAAA,OAJE;AAKZvK,UAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SALhB;AAMZ8M,UAAAA,cAAc,EAAE,KAAKhP,KAAL,CAAWgP,cANf;AAOZhK,UAAAA,SAAS,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,GAA+C,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6CzC,GAA7C,CAAiDwL,CAAC,IAAIA,CAAC,CAAC9J,SAAxD,EAAmExB,IAAnE,CAAwE,GAAxE,CAA/C,GAA8H;AAP7H,SAAhB;;AASA,YAAIuL,kBAAkB,CAAClK,MAAnB,GAA4B,CAAhC,EAAmC;AAC/BjD,UAAAA,UAAU,GAAG3C,sBAAsB,CAACgO,SAAD,EAAY8B,kBAAZ,CAAnC;AACH,SAFD,MAGK;AACDrC,UAAAA,EAAE,GAAG,KAAL;AACA1O,UAAAA,KAAK,CAACyH,IAAN,CAAW,KAAKzF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ,OAjBD,MAiBO,IAAI,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBoE,UAAjB,KAAgC,qBAApC,EAA2D;AAC9D,YAAIiJ,SAAS,GAAG;AACZjL,UAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QADf;AAEZF,UAAAA,cAFY;AAGZY,UAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAHjB;AAIZ8J,UAAAA,QAJY;AAIFC,UAAAA,OAJE;AAKZvK,UAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SALhB;AAMZ8M,UAAAA,cAAc,EAAE,KAAKhP,KAAL,CAAWgP,cANf;AAOZ3L,UAAAA,oBAAoB,EAAE,KAAKrD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,GAA6C,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,CAA2CE,GAA3C,CAA+CwL,CAAC,IAAIA,CAAC,CAACzL,oBAAtD,EAA4EG,IAA5E,CAAiF,GAAjF,CAA7C,GAAqI;AAP/I,SAAhB;;AASA,YAAIL,gBAAgB,CAAC0B,MAAjB,GAA0B,CAA9B,EAAiC;AAC7BjD,UAAAA,UAAU,GAAG1C,oBAAoB,CAAC+N,SAAD,EAAY9J,gBAAZ,CAAjC;AACH,SAFD,MAGK;AACDuJ,UAAAA,EAAE,GAAG,KAAL;AACA1O,UAAAA,KAAK,CAACyH,IAAN,CAAW,KAAKzF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,YAAAA,EAAE,EAAE;AAAN,WAA9B,CAAX;AACH;AACJ;;AACD,UAAI8G,EAAJ,EAAQ;AACJ,YAAIhP,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiB8D,qBAAlB,EAAyC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B0L,SAAnE,EAA8E,KAAK1N,KAAL,CAAWJ,KAAX,CAAiB0E,YAA/F,CAAb,EAA2H;AACvH,gBAAMiC,UAAU,GAAG;AACfC,YAAAA,QAAQ,EAAE7K,cADK;AAEf8K,YAAAA,IAAI,EAAE;AACF2C,cAAAA,SAAS,EAAE,IADT;AAEFC,cAAAA,UAAU,EAAE;AAAEzH,gBAAAA,UAAF;AAAcc,gBAAAA;AAAd,eAFV;AAGFR,cAAAA,SAAS,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAH1B;AAIF8B,cAAAA,UAAU,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBoE;AAJ3B;AAFS,WAAnB;AASA,eAAKhE,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AACH,SAXD,MAYK;AACD,eAAKvG,KAAL,CAAWvD,UAAX,CAAsBmF,UAAtB,EAAkCc,UAAlC,EAA8C,qBAA9C;AACH;AACJ;AACJ,KA/mFkB;;AAAA,SAinFnB3F,iBAjnFmB,GAinFC,CAAC8E,SAAD,EAAYyC,YAAZ,KAA6B;AAE7C,YAAM5B,UAAU,GAAG,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAApC;;AAEA,UAAIhF,SAAS,CAAC,KAAKsC,KAAL,CAAWJ,KAAX,CAAiB8D,qBAAlB,EAAyC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B0L,SAAnE,EAA8EpJ,YAA9E,CAAb,EAA0G;AACtG,YAAI1C,UAAU,GAAG;AAAEqN,UAAAA,UAAU,EAAEpN;AAAd,SAAjB;AACA,cAAM0E,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE7K,cADK;AAEf8K,UAAAA,IAAI,EAAE;AACFC,YAAAA,cAAc,EAAE,IADd;AAEF0C,YAAAA,SAAS,EAAE,IAFT;AAGFC,YAAAA,UAAU,EAAE;AAAEzH,cAAAA,UAAF;AAAcc,cAAAA;AAAd,aAHV;AAIFR,YAAAA,SAAS,EAAE,kBAJT;AAKF8B,YAAAA,UAAU,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBoE;AAL3B;AAFS,SAAnB;AAUA,aAAKhE,KAAL,CAAWhE,WAAX,CAAuBuK,UAAvB;AAEH,OAdD,MAcO;AAEH,aAAKvG,KAAL,CAAWjD,iBAAX,CAA6B8E,SAA7B;AAEH;AAEJ,KAzoFkB;;AAEf,SAAK+J,eAAL,GAAuBlR,KAAK,CAACwU,SAAN,EAAvB;AACA,SAAKrD,kBAAL,GAA0BnR,KAAK,CAACwU,SAAN,EAA1B;AACA,SAAKpD,aAAL,GAAqBpR,KAAK,CAACwU,SAAN,EAArB;AACA,SAAKzC,OAAL,GAAe/R,KAAK,CAACwU,SAAN,EAAf;AACA,SAAKvP,KAAL,GAAa;AACTwB,MAAAA,mBAAmB,EAAE;AAAEX,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,OADZ;AAETjK,MAAAA,eAAe,EAAE;AAAE1E,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAFR;AAGTlK,MAAAA,mBAAmB,EAAE;AAAE3E,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAHZ;AAITjK,MAAAA,iBAAiB,EAAE;AAAE5E,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAJV;AAKThK,MAAAA,aAAa,EAAE;AAAE7E,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OALN;AAMV;AACCjL,MAAAA,oBAAoB,EAAE,EAPb;AASTkB,MAAAA,iBAAiB,EAAE;AAAE9E,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OATV;AAUT7J,MAAAA,qBAAqB,EAAE;AAAEhF,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAVd;AAWTrD,MAAAA,sBAAsB,EAAE;AAAExL,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAXf;AAYT/C,MAAAA,sBAAsB,EAAE;AAAE9L,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,OAZf;AAaT5J,MAAAA,gBAAgB,EAAE;AAAE/E,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAbT;AAcTjO,MAAAA,SAAS,EAAE;AAAEZ,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,OAdF;AAeTpD,MAAAA,2BAA2B,EAAE;AAAEvL,QAAAA,IAAI,EAAE,CAAR;AAAWE,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,QAAAA,KAAK,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAD;AAAjG,OAfpB;AAgBT3L,MAAAA,qBAAqB,EAAE,EAhBd;AAiBTZ,MAAAA,UAAU,EAAE,IAAIR,GAAJ,EAjBH;AAkBTgN,MAAAA,YAAY,EAAE,EAlBL;AAmBTC,MAAAA,KAAK,EAAE,EAnBE;AAoBTC,MAAAA,YAAY,EAAE,EApBL;AAqBT1N,MAAAA,cAAc,EAAE,EArBP;AAsBTI,MAAAA,SAAS,EAAE,EAtBF;AAuBT8B,MAAAA,UAAU,EAAE8E,SAvBH;AAwBT/H,MAAAA,UAAU,EAAE,KAxBH;AAyBTC,MAAAA,QAAQ,EAAE,IAzBD;AA0BTyO,MAAAA,iBAAiB,EAAE,EA1BV;AA2BTC,MAAAA,oBAAoB,EAAE,EA3Bb;AA4BTC,MAAAA,eAAe,EAAE,EA5BR;AA6BTC,MAAAA,mBAAmB,EAAE,EA7BZ;AA8BTC,MAAAA,UAAU,EAAE,EA9BH;AA+BTC,MAAAA,cAAc,EAAE,EA/BP;AAgCTC,MAAAA,wBAAwB,EAAE,EAhCjB;AAiCTC,MAAAA,mBAAmB,EAAE,EAjCZ;AAkCTC,MAAAA,sBAAsB,EAAE,EAlCf;AAmCTC,MAAAA,iBAAiB,EAAE,EAnCV;AAoCTC,MAAAA,aAAa,EAAE,EApCN;AAqCTC,MAAAA,SAAS,EAAE,CArCF;AAsCTC,MAAAA,UAAU,EAAE,CAtCH;AAuCTC,MAAAA,gBAAgB,EAAE,CAvCT;AAwCTC,MAAAA,OAAO,EAAE,CAxCA;AAyCTC,MAAAA,cAAc,EAAE,EAzCP;AA0CTC,MAAAA,oBAAoB,EAAE,EA1Cb;AA2CTC,MAAAA,uBAAuB,EAAE,EA3ChB;AA4CTC,MAAAA,gBAAgB,EAAE,EA5CT;AA6CTC,MAAAA,iBAAiB,EAAE,EA7CV;AA8CTC,MAAAA,eAAe,EAAE,EA9CR;AA+CTC,MAAAA,QAAQ,EAAE,EA/CD;AAgDTtQ,MAAAA,IAAI,EAAE,CAhDG;AAiDTE,MAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,IAA6B,KAAKnP,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,CAA1B,CAjD1B;AAkDT5M,MAAAA,QAAQ,EAAE,CAlDD;AAmDTC,MAAAA,QAAQ,EAAE,KAAKxC,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,IAA6B,KAAKnP,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAnD9B;AAoDT/O,MAAAA,0BAA0B,EAAE,EApDnB;AAqDTG,MAAAA,aAAa,EAAE,CArDN;AAsDTE,MAAAA,aAAa,EAAE;AAtDN,KAAb,CANe,CA8Df;AACH;;AAQ8B,SAAxBsQ,wBAAwB,CAAC/Q,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAY0P,YAAZ,KAA6B,EAAjC,EAAqC;AACjCtR,MAAAA,KAAK,CAACyH,IAAN,CAAWzF,KAAK,CAACJ,KAAN,CAAY0P,YAAvB;AACAtP,MAAAA,KAAK,CAACJ,KAAN,CAAY0P,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAItP,KAAK,CAACJ,KAAN,CAAYoR,eAAZ,KAAgClI,SAAhC,IAA6C9I,KAAK,CAACJ,KAAN,CAAYoR,eAAZ,KAAgC,EAAjF,EAAqF;AACjFhT,MAAAA,KAAK,CAACyH,IAAN,CAAWzF,KAAK,CAAC0F,IAAN,CAAWC,aAAX,CAAyB;AAAEC,QAAAA,EAAE,EAAE5F,KAAK,CAACJ,KAAN,CAAYoR;AAAlB,OAAzB,CAAX;AACAhR,MAAAA,KAAK,CAACJ,KAAN,CAAYoR,eAAZ,GAA8B,EAA9B;AACH;;AAED,QAAIhR,KAAK,CAACJ,KAAN,CAAY2P,KAAZ,KAAsB5P,KAAK,CAAC4P,KAAhC,EAAuC;AACnCvR,MAAAA,KAAK,CAACuR,KAAN,CAAYvP,KAAK,CAACJ,KAAN,CAAY2P,KAAxB;AACAvP,MAAAA,KAAK,CAACJ,KAAN,CAAY2P,KAAZ,GAAoB,EAApB;AACH;;AAED,WAAO,IAAP;AACH,GA1FgC,CA2FjC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA0B,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKC,YAAT,EAAuB;AACnB,YAAMC,MAAM,GAAG,KAAKD,YAAL,CAAkBE,YAAjC;AACA,WAAKjR,QAAL,CAAc;AACViQ,QAAAA,SAAS,EAAEe,MAAM,GAAG,EADV;AAEVD,QAAAA,YAAY,EAAEC,MAAM,GAAG;AAFb,OAAd;AAIH;AACJ;;AAEDE,EAAAA,eAAe,CAACC,IAAD,EAAO;AAElB,QAAIC,OAAO,GAAG,EAAd;;AACA,QAAID,IAAI,CAACzM,MAAL,GAAc,CAAlB,EAAqB;AACjByM,MAAAA,IAAI,CAAChO,GAAL,CAAUkO,CAAD,IAAO;AACZD,QAAAA,OAAO,CAAChE,IAAR,CAAa;AAAE,WAACpP,gBAAgB,CAACsT,KAAlB,GAA0BD,CAA5B;AAA+B,WAACrT,gBAAgB,CAAC2F,KAAlB,GAA0B0N;AAAzD,SAAb;AACH,OAFD;AAGH;;AACD,WAAOD,OAAP;AACH;;AAaDG,EAAAA,cAAc,GAAG;AAEb,SAAKvR,QAAL,CAAc;AAAEa,MAAAA,QAAQ,EAAE,IAAZ;AAAkBD,MAAAA,UAAU,EAAE;AAA9B,KAAd;AACH;;AAED4Q,EAAAA,iBAAiB,CAAClL,IAAD,EAAO;AACpB;AACA,UAAMmL,SAAS,GAAGnL,IAAI,IAAIA,IAAI,CAACnD,GAAL,CAAUuO,MAAD,IAAY;AAC3C,aAAO;AAAE,mBAAWA,MAAM,CAAC1T,gBAAgB,CAACsT,KAAlB,CAAN,CAA+B,KAAKzR,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B8P,iBAAzD,CAAb;AAA0F,qBAAaD,MAAM,CAAC1T,gBAAgB,CAAC2F,KAAlB,CAA7G;AAAuI,iBAAS,OAAhJ;AAAyJ,sBAAc;AAAvK,OAAP;AACH,KAFyB,CAA1B;AAGA,WAAO8N,SAAP;AACH;;AAcDG,EAAAA,MAAM,GAAG;AACL,QAAIlL,GAAG,GAAG/I,wBAAwB,CAAC,KAAKkC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BoE,YAA7B,EAA2C,KAAK9G,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqE,UAAvE,EAAmF,KAAK/G,KAAL,CAAWJ,KAAX,CAAiBoC,QAApG,CAAlC,CADK,CAEL;;AACA,QAAIgQ,iBAAiB,GAAG,CAAC,OAAD,EAAU,UAAV,EAAsB,iBAAtB,EAAyC,mBAAzC,EAA8D,aAA9D,EAA6E,YAA7E,EAA2F,gBAA3F,EAA6G,iBAA7G,EAAgI,cAAhI,EAAgJ,WAAhJ,CAAxB;;AACA,QAAI,KAAKhS,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eAAhD,KAAoE7J,mBAAmB,CAAC2T,OAA/I,EAAwJ;AACpJD,MAAAA,iBAAiB,GAAG,CAAC,OAAD,EAAU,cAAV,EAA0B,iBAA1B,EAA6C,iBAA7C,EAAgE,cAAhE,EAAgF,WAAhF,EAA6F,YAA7F,EAA2G,uBAA3G,EAChB,aADgB,EACD,gBADC,EACiB,WADjB,EAC8B,iBAD9B,EACiD,oBADjD,EACuE,kBADvE,EAC2F,QAD3F,EACqG,UADrG,EACiH,UADjH,EAC6H,aAD7H,EAEhB,eAFgB,EAEC,eAFD,EAEkB,UAFlB,EAE8B,gBAF9B,EAEgD,kBAFhD,EAEoE,eAFpE,EAEqF,WAFrF,EAEkG,qBAFlG,CAApB;AAIH;;AACD,UAAME,iBAAiB,GAAG;AACtBC,MAAAA,aAAa,EAAE,WADO;AAEtBpF,MAAAA,cAAc,EAAE,kBAFM;AAGtBC,MAAAA,eAAe,EAAE,WAHK;AAItBoF,MAAAA,QAAQ,EAAE,kCAJY;AAKtBC,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAKzG,kBAAZ;AAAgC0G,QAAAA,qBAAqB,EAAE;AAAvD,OAAD,EAA+E;AAAED,QAAAA,GAAG,EAAE,KAAKxG,aAAZ;AAA2ByG,QAAAA,qBAAqB,EAAE;AAAlD,OAA/E,CALW;AAMtBC,MAAAA,gBAAgB,EAAE;AACd3J,QAAAA,KAAK,EAAE,CADO;AAEdD,QAAAA,KAAK,EAAE,CAFO;AAGdb,QAAAA,eAAe,EAAG,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAApG,IAAwH,CAAC,CAH5H;AAIdE,QAAAA,YAAY,EAAG,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAA9F,IAA+G,CAAC,CAJhH;AAKdE,QAAAA,eAAe,EAAG,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eAApG,IAAwH,CAAC,CAL5H;AAMdtE,QAAAA,cAAc,EAAG,KAAK7D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDvE,cAApG,IAAuH,KANzH;AAOduC,QAAAA,kBAAkB,EAAE,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,IAAqD,KAAKtJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAlD,KAAyE0C,SAA9H,GAA0IhE,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAnD,CAAhJ,GAAyN,IAP/N;AAQdwD,QAAAA,mBAAmB,EAAE,KAAK5J,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,GAAuD,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqDP,mBAArD,IAA4E,CAAC,CAApI,GAAwI,IAR/I;AASdvB,QAAAA,oBAAoB,EAAE,KAAKrI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,IAAwD,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD5B,0BAA7G,GAA0IzD,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD5B,0BAAtD,CAAhJ,GAAoO,IAT5O;AAUdf,QAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,GAAmD,KAAKtK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAjD,KAAkE,CAAC,CAAnE,GAAuE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CqE,OAAO,IAAIA,OAAO,CAACH,YAA/D,EAA6EhE,IAA7E,CAAkF,GAAlF,CAAvE,GAAgKsB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAlD,CAAzN,GAA2R,IAV3R;AAWdI,QAAAA,SAAS,EAAE,KAAK5H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiH,SAA5B,IAAyC,KAAK3J,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiH,SAA5B,CAAsC/B,SAX5E;AAYdY,QAAAA,KAAK,EAAE3B,GAAG,CAAC4B,QAZG;AAadC,QAAAA,GAAG,EAAE7B,GAAG,CAAC8B,MAbK;AAcd5G,QAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAdb;AAed+G,QAAAA,iBAAiB,EAAC,CAfJ;AAgBdC,QAAAA,0BAA0B,EAAC,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAtF,IAAoH,CAAC;AAhBlI,OANI;AAwBtBtG,MAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAxBP;AAyBtB;AACA+P,MAAAA,eAAe,EAAET,iBA1BK;AA2BtBU,MAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,SAAjB,EAA4B,mBAA5B,EACR,6BADQ,EACuB,iBADvB,EAC0C,uBAD1C,EACmE,sBADnE,EAER,iBAFQ,EAEW,4BAFX,EAEyC,yBAFzC,EAGR,wBAHQ,EAGkB,kBAHlB,EAGsC,qBAHtC,EAG6D,gBAH7D,EAG+E,cAH/E,EAG+F,YAH/F;AA3BU,KAA1B;AAgCA,UAAMC,oBAAoB,GAAG;AACzBR,MAAAA,aAAa,EAAE,cADU;AAEzBpF,MAAAA,cAAc,EAAE,qBAFS;AAGzBC,MAAAA,eAAe,EAAE,wBAHQ;AAIzBoF,MAAAA,QAAQ,EAAE,0BAJe;AAKzBC,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAKxG,aAAZ;AAA2ByG,QAAAA,qBAAqB,EAAE;AAAlD,OAAD,CALc;AAMzBC,MAAAA,gBAAgB,EAAE;AACd3J,QAAAA,KAAK,EAAE,CADO;AAEdD,QAAAA,KAAK,EAAE,CAFO;AAGd5D,QAAAA,SAAS,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,GAA+C,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6CzC,GAA7C,CAAiD+D,MAAM,IAAIA,MAAM,CAACrC,SAAlE,EAA6ExB,IAA7E,CAAkF,GAAlF,CAA/C,GAAwI,IAHrI;AAIduE,QAAAA,eAAe,EAAG,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BkQ,eAA5B,IAA+C,KAAK5S,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BkQ,eAA5B,CAA4C7K,eAA5F,IAAgH,CAAC,CAJpH;AAKdE,QAAAA,YAAY,EAAG,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4I,YAA5B,IAA4C,KAAKtL,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4I,YAA5B,CAAyCrD,YAAtF,IAAuG,CAAC,CALxG;AAMdE,QAAAA,eAAe,EAAG,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,IAA+C,KAAKrK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,CAA4ClC,eAA5F,IAAgH,CAAC,CANpH;AAOdtE,QAAAA,cAAc,EAAG,KAAK7D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDvE,cAApG,IAAuH,KAPzH;AAQduC,QAAAA,kBAAkB,EAAE,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,IAAiD,KAAKjH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,CAA8Cb,kBAA9C,KAAqE0C,SAAtH,GAAkIhE,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,CAA8Cb,kBAA/C,CAAxI,GAA6M,IARnN;AASdwD,QAAAA,mBAAmB,EAAE,KAAK5J,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4F,oBAA5B,GAAmD,KAAKtI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4F,oBAA5B,CAAiDsB,mBAAjD,IAAwE,CAAC,CAA5H,GAAgI,IATvI;AAUdvB,QAAAA,oBAAoB,EAAE,KAAKrI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4F,oBAA5B,IAAoD,KAAKtI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4F,oBAA5B,CAAiDC,0BAArG,GAAkI,KAAKvI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4F,oBAA5B,CAAiDC,0BAAnL,GAAgN,IAVxN;AAWdf,QAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,GAA+C,KAAKzH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,CAA6CD,YAA7C,KAA8D,CAAC,CAA/D,GAAmE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CqE,OAAO,IAAIA,OAAO,CAACH,YAA/D,EAA6EhE,IAA7E,CAAkF,GAAlF,CAAnE,GAA4JsB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,CAA6CD,YAA9C,CAAjN,GAA+Q,IAX/Q;AAYdgB,QAAAA,KAAK,EAAE3B,GAAG,CAAC4B,QAZG;AAadC,QAAAA,GAAG,EAAE7B,GAAG,CAAC8B,MAbK;AAcd5G,QAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAdb;AAed+G,QAAAA,iBAAiB,EAAC,CAfJ;AAgBdC,QAAAA,0BAA0B,EAAC,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAtF,IAAoH,CAAC;AAhBlI,OANO;AAwBzBtG,MAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAxBJ;AAyBzB+P,MAAAA,eAAe,EAAE,CAAC,OAAD,EAAU,aAAV,CAzBQ;AA0BzBC,MAAAA,UAAU,EAAE,CAAC,SAAD,EAAY,mBAAZ,EACR,6BADQ,EACuB,iBADvB,EAC0C,sBAD1C,EAER,iBAFQ,EAEW,4BAFX,EAEyC,yBAFzC,EAGR,wBAHQ,EAGkB,qBAHlB,EAGyC,gBAHzC;AA1Ba,KAA7B;AAgCA,UAAMG,eAAe,GAAG;AACpBV,MAAAA,aAAa,EAAE,SADK;AAEpBpF,MAAAA,cAAc,EAAE,gBAFI;AAGpBC,MAAAA,eAAe,EAAE,sBAHG;AAIpBoF,MAAAA,QAAQ,EAAE,KAAKU,gBAAL,EAJU;AAKpBN,MAAAA,gBAAgB,EAAE;AACdnP,QAAAA,oBAAoB,EAAE,KAAKrD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,GAA6C,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA5B,CAA2CE,GAA3C,CAA+CC,IAAI,IAAIA,IAAI,CAACF,oBAA5D,EAAkFG,IAAlF,CAAuF,GAAvF,CAA7C,GAA2I,IADnJ;AAEdzB,QAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAFb;AAGd+G,QAAAA,iBAAiB,EAAC,CAHJ;AAIdC,QAAAA,0BAA0B,EAAC,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAtF,IAAoH,CAAC;AAJlI,OALE;AAWpB+J,MAAAA,cAAc,EAAE,KAXI;AAYpBrQ,MAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAZT;AAapB+P,MAAAA,eAAe,EAAE,CAAC,OAAD,EAAU,aAAV,EAAyB,cAAzB,EAAyC,kBAAzC,EAA6D,aAA7D,EAA4E,cAA5E,EAA4F,aAA5F,EAA2G,qBAA3G,EAAkI,oBAAlI,EAAwJ,WAAxJ,CAbG;AAcpBC,MAAAA,UAAU,EAAE,CAAC,mBAAD,EACR,6BADQ,EACuB,iBADvB,EAC0C,uBAD1C,EACmE,sBADnE,EAER,iBAFQ,EAEW,4BAFX,EAEyC,yBAFzC,EAGR,wBAHQ,EAGkB,gBAHlB;AAdQ,KAAxB;AAoBA,QAAIM,aAAa,GAAG,KAAKhT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B8G,SAA5B,GAAwC7L,QAAQ,CAAC,KAAKqC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B8G,SAA7B,EAAwC,YAAxC,EAAsD,WAAtD,CAAhD,GAAqH,EAAzI;AACA,QAAIyJ,gBAAgB,GAAG,KAAKjT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwQ,YAA5B,GAA2C,KAAKlT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwQ,YAAvE,GAAsF,EAA7G;AACA,QAAIC,WAAW,GAAG,KAAKnT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BE,OAA5B,GAAsC,KAAK5C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BE,OAAlE,GAA4E,EAA9F;AACA,QAAIwQ,cAAc,GAAG,KAAKpT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0Q,cAA5B,GAA6CzV,QAAQ,CAAC,KAAKqC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0Q,cAA7B,EAA6C,WAA7C,EAA0D,oBAA1D,CAArD,GAAuI,EAA5J,CAjGK,CAkGN;;AACC,QAAIC,iBAAiB,GAAG;AACpB3Q,MAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UADT;AAEpB0D,MAAAA,kBAAkB,EAAEtB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,GAAoD,KAAKtJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAtG,GAA2H,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,GAAgD,KAAKjH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,CAA8Cb,kBAA9F,GAAmH,CAAC,CAAhP,CAFN;AAGpBrE,MAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAHP;AAIpB+F,MAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAJhG;AAKpBE,MAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YALvF;AAMpBE,MAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eANhG;AAOpBX,MAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,GAAmD,KAAKtK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAjD,KAAkE,CAAC,CAAnE,GAAuE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CqE,OAAO,IAAIA,OAAO,CAACH,YAA/D,EAA6EhE,IAA7E,CAAkF,GAAlF,CAAvE,GAAgKsB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAlD,CAAzN,GAA2R,IAPrR;AAQpBI,MAAAA,SAAS,EAAE,KAAK5H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,GAA4C,KAAK7H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,CAA0CD,SAAtF,GAAkG,CAAC,CAR1F;AASpBS,MAAAA,oBAAoB,EAAG,KAAKrI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,GAAuD,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD5B,0BAA5G,GAAyI,CAAC,CAT7I;AAUpB1E,MAAAA,cAAc,EAAC,KAAK7D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDvE,cAV9F;AAWpBe,MAAAA,aAAa,EAAE,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBgF,aAAjB,IAAkC,aAX7B;AAYpBkB,MAAAA,eAAe,EAAE,KAAK9F,KAAL,CAAWJ,KAAX,CAAiBkG,eAAjB,IAAoC,uBAZjC;AAapB9B,MAAAA,UAAU,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBoE,UAbT;AAcpB6H,MAAAA,kBAAkB,EAAE,KAAKA,kBAdL;AAepBC,MAAAA,aAAa,EAAE,KAAKA,aAfA;AAgBpBvJ,MAAAA,QAAQ,EAAE,KAAK5C,KAAL,CAAW4C,QAhBD;AAiBpBC,MAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAW6C,QAjBD;AAkBpBjC,MAAAA,aAAa,EAAE,KAAKZ,KAAL,CAAWY,aAlBN;AAmBpBE,MAAAA,aAAa,EAAE,KAAKd,KAAL,CAAWc,aAnBN;AAoBpByE,MAAAA,eAAe,EAAE,KAAKvF,KAAL,CAAWuF,eApBR;AAqBpBC,MAAAA,mBAAmB,EAAE,KAAKxF,KAAL,CAAWwF,mBArBZ;AAsBpBC,MAAAA,iBAAiB,EAAE,KAAKzF,KAAL,CAAWyF,iBAtBV;AAuBpBC,MAAAA,aAAa,EAAE,KAAK1F,KAAL,CAAW0F,aAvBN;AAwBpBC,MAAAA,iBAAiB,EAAE,KAAK3F,KAAL,CAAW2F,iBAxBV;AAyBpBE,MAAAA,qBAAqB,EAAE,KAAK7F,KAAL,CAAW6F,qBAzBd;AA0BpBpB,MAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWyE,oBA1Bb;AA2BpBmB,MAAAA,gBAAgB,EAAE,KAAK5F,KAAL,CAAW4F,gBA3BT;AA4BpBwG,MAAAA,2BAA2B,EAAE,KAAKpM,KAAL,CAAWoM,2BA5BpB;AA6BpBC,MAAAA,sBAAsB,EAAE,KAAKrM,KAAL,CAAWqM,sBA7Bf;AA8BpBhD,MAAAA,0BAA0B,EAAC,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAtF,IAAoH,CAAC;AA9B5H,KAAxB;AAgCA,QAAIsK,YAAY,GAAG;AACf5Q,MAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UADd;AAEf0D,MAAAA,kBAAkB,EAAEtB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,GAAoD,KAAKtJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkDlD,kBAAtG,GAA2H,KAAKpG,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,GAAgD,KAAKjH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,CAA8Cb,kBAA9F,GAAmH,CAAC,CAAhP,CAFX;AAGfrE,MAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAHZ;AAIf+F,MAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAJrG;AAKfE,MAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAL5F;AAMfE,MAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eANrG;AAOfnD,MAAAA,SAAS,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,IAAgD,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6CzC,GAA7C,CAAiD+D,MAAM,IAAIA,MAAM,CAACrC,SAAlE,EAA6ExB,IAA7E,CAAkF,GAAlF,CAP5C;AAQf6E,MAAAA,oBAAoB,EAAG,KAAKrI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,GAAuD,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD5B,0BAA5G,GAAyI,CAAC,CARlJ;AASff,MAAAA,YAAY,EAAE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,GAAmD,KAAKtK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAjD,KAAkE,CAAC,CAAnE,GAAuE,KAAKxH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,CAAwCpE,GAAxC,CAA4CqE,OAAO,IAAIA,OAAO,CAACH,YAA/D,EAA6EhE,IAA7E,CAAkF,GAAlF,CAAvE,GAAgKsB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiD9C,YAAlD,CAAzN,GAA2R,IAT1R;AAUfI,MAAAA,SAAS,EAAE,KAAK5H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,GAA4C,KAAK7H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,CAA0CD,SAAtF,GAAkG,CAAC,CAV/F;AAWfY,MAAAA,KAAK,EAAE3B,GAAG,CAAC4B,QAXI;AAYfC,MAAAA,GAAG,EAAE7B,GAAG,CAAC8B,MAZM;AAaf/D,MAAAA,aAAa,EAAE,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBgF,aAAjB,IAAkC,aAblC;AAcfkB,MAAAA,eAAe,EAAE,KAAK9F,KAAL,CAAWJ,KAAX,CAAiBkG,eAAjB,IAAoC,gBAdtC;AAef9B,MAAAA,UAAU,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBoE,UAfd;AAgBf8H,MAAAA,aAAa,EAAE,KAAKA,aAhBL;AAiBf9C,MAAAA,0BAA0B,EAAC,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAtF,IAAoH,CAAC;AAjBjI,KAAnB;AAmBA,QAAIuK,iBAAiB,GAAG;AACpB7Q,MAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UADT;AAEpB0D,MAAAA,kBAAkB,EAAEtB,MAAM,CAAC,KAAK9E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,IAAiD,KAAKjH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,CAA8Cb,kBAAhG,CAFN;AAGpBrE,MAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QAHP;AAIpB+F,MAAAA,eAAe,EAAE,KAAK/H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgDD,eAJhG;AAKpBE,MAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YALvF;AAMpBE,MAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eANhG;AAOpBnD,MAAAA,SAAS,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,IAAgD,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6CzC,GAA7C,CAAiD+D,MAAM,IAAIA,MAAM,CAACrC,SAAlE,EAA6ExB,IAA7E,CAAkF,GAAlF,CAPvC;AAQpB8D,MAAAA,sBAAsB,EAAE,KAAKtH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B6E,mBAA5B,IAAmD,KAAKvH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B6E,mBAA5B,CAAgDjE,GAAhD,CAAoD+D,MAAM,IAAIA,MAAM,CAACC,sBAArE,EAA6F9D,IAA7F,CAAkG,GAAlG,CARvD;AASpBoB,MAAAA,aAAa,EAAE,KAAK5E,KAAL,CAAWJ,KAAX,CAAiBgF,aAAjB,IAAkC,aAT7B;AAUpBkB,MAAAA,eAAe,EAAE,KAAK9F,KAAL,CAAWJ,KAAX,CAAiBkG,eAAjB,IAAoC,gBAVjC;AAWpB9B,MAAAA,UAAU,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBoE,UAXT;AAYpBiF,MAAAA,aAAa,EAAE,KAAKA,aAZA;AAapB1G,MAAAA,QAAQ,EAAE,KAAK5C,KAAL,CAAW4C,QAbD;AAcpBC,MAAAA,QAAQ,EAAE,KAAK7C,KAAL,CAAW6C,QAdD;AAepB0C,MAAAA,eAAe,EAAE,KAAKvF,KAAL,CAAWuF,eAfR;AAgBpBC,MAAAA,mBAAmB,EAAE,KAAKxF,KAAL,CAAWwF,mBAhBZ;AAiBpBC,MAAAA,iBAAiB,EAAE,KAAKzF,KAAL,CAAWyF,iBAjBV;AAkBpBC,MAAAA,aAAa,EAAE,KAAK1F,KAAL,CAAW0F,aAlBN;AAmBpBC,MAAAA,iBAAiB,EAAE,KAAK3F,KAAL,CAAW2F,iBAnBV;AAoBpBC,MAAAA,gBAAgB,EAAE,KAAK5F,KAAL,CAAW4F,gBApBT;AAqBpBC,MAAAA,qBAAqB,EAAE,KAAK7F,KAAL,CAAW6F,qBArBd;AAsBpBpB,MAAAA,oBAAoB,EAAE,KAAKzE,KAAL,CAAWyE,oBAtBb;AAuBpB4E,MAAAA,0BAA0B,EAAC,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAA5B,IAA0D,KAAKhJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsG,0BAAtF,IAAoH,CAAC;AAvB5H,KAAxB;AA0BA,QAAIwK,cAAc,GAAG,CACjB;AACI,eAAS,UADb;AAEI,eAAS3M,GAAG,CAAC4M;AAFjB,KADiB,EAId;AACC,eAAS,QADV;AAEC,eAAS5M,GAAG,CAAC6M;AAFd,KAJc,EAQjB;AACI,eAAS,gBADb;AAEI,eAAS,KAAK1T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,GAAkD,KAAKhI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,CAAgD2L,eAAhD,IAAmE,IAArH,GACL,KAAK3T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BkQ,eAA5B,GAA8C,KAAK5S,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BkQ,eAA5B,CAA4Ce,eAA5C,IAA+D,IAA7G,GAAoH;AAH5H,KARiB,EAYd;AACC,eAAS,aADV;AAEC,eAAS,KAAK3T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,GAA+C,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6C0L,YAA7C,IAA6D,IAA5G,GACL,KAAK5T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4I,YAA5B,GAA2C,KAAKtL,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4I,YAA5B,CAAyCsI,YAAzC,IAAyD,IAApG,GAA2G;AAHhH,KAZc,EAgBd;AACC,eAAS,gBADV;AAEC,eAAS,KAAK5T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,GAAkD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDyL,eAAhD,IAAmE,IAArH,GACL,KAAK7T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,GACI,KAAKrK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,CAA4CwJ,eADhD,GACkE;AAJvE,KAhBc,EAqBd;AACC,eAAS,mBADV;AAEC,eAAS,KAAK7T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,GACL,KAAKnK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,CAAqD2J,YAArD,IAAqE,IADhE,GAEL,KAAK9T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4F,oBAA5B,GAAmD,KAAKtI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4F,oBAA5B,CAAiDwL,YAAjD,IAAiE,IAApH,GAA2H;AAJhI,KArBc,EA2BjB;AACI,eAAS,aADb;AAEI,eAAS,KAAK9T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,GACL,KAAKtK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,CAAiDyJ,YAAjD,IAAiE,IAD5D,GAEL,KAAK/T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,GACI,KAAKzH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+E,gBAA5B,CAA6CsM,YAA7C,IAA6D,IADjE,GACwE;AALhF,KA3BiB,EAkCjB;AACI,eAAS,UADb;AAEI,eAAS,KAAK/T,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,GACL,KAAK7H,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,CAA0CmM,YAA1C,IAA0D,IADrD,GAEL,KAAKhU,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiH,SAA5B,GACI,KAAK3J,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiH,SAA5B,CAAsCqK,YAAtC,IAAsD,IAD1D,GACiE;AALzE,KAlCiB,EAyCjB;AACI,eAAS,kBADb;AAEI,eAAS,KAAKhU,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,GACL,KAAKtJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,CAAkD6C,aAAlD,IAAmE,IAD9D,GAEL,KAAKnM,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,GACI,KAAKjH,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BuE,iBAA5B,CAA8CkF,aAA9C,IAA+D,IADnE,GAC0E;AALlF,KAzCiB,CAArB;AAkDA,UAAM8H,eAAe,GAAG,KAAKtU,KAAL,CAAWmD,UAAX,CAAsBC,GAAtB,CAA0B,qBAA1B,KAAoD,KAAKpD,KAAL,CAAWmD,UAAX,CAAsBE,GAAtB,CAA0B,qBAA1B,EAAiDC,YAA7H;AACA,UAAMiR,WAAW,GAAG,KAAKvU,KAAL,CAAWmD,UAAX,CAAsBC,GAAtB,CAA0B,QAA1B,KAAuC,KAAKpD,KAAL,CAAWmD,UAAX,CAAsBE,GAAtB,CAA0B,QAA1B,EAAoCC,YAA/F;AACA,UAAMkR,oBAAoB,GAAG,KAAKxU,KAAL,CAAWmD,UAAX,CAAsBC,GAAtB,CAA0B,oBAA1B,KAAmD,KAAKpD,KAAL,CAAWmD,UAAX,CAAsBE,GAAtB,CAA0B,oBAA1B,EAAgDC,YAAhI;AACA,UAAMmR,oBAAoB,GAAG,KAAKzU,KAAL,CAAWmD,UAAX,CAAsBC,GAAtB,CAA0B,oBAA1B,KAAmD,KAAKpD,KAAL,CAAWmD,UAAX,CAAsBE,GAAtB,CAA0B,oBAA1B,EAAgDC,YAAhI;AACA,UAAMoR,gBAAgB,GAAG,KAAK1U,KAAL,CAAWmD,UAAX,CAAsBC,GAAtB,CAA0B,aAA1B,KAA4C,KAAKpD,KAAL,CAAWmD,UAAX,CAAsBE,GAAtB,CAA0B,aAA1B,EAAyCC,YAA9G;AACA,UAAMqR,WAAW,GAAG,KAAK3U,KAAL,CAAWmD,UAAX,CAAsBC,GAAtB,CAA0B,WAA1B,KAA0C,KAAKpD,KAAL,CAAWmD,UAAX,CAAsBE,GAAtB,CAA0B,WAA1B,EAAuCC,YAArG;AAGA,SAAKgG,aAAL,GAAqB,CACjB;AACIsL,MAAAA,gBAAgB,EAAE,gBADtB;AAEIC,MAAAA,WAAW,EAAE,IAFjB;AAGIC,MAAAA,SAAS,EAAE,KAAK7I,eAHpB;AAIIoB,MAAAA,eAAe,EAAE,WAJrB;AAKIoF,MAAAA,QAAQ,EAAE,kCALd;AAMII,MAAAA,gBAAgB,EAAEa,iBANtB;AAOItG,MAAAA,cAAc,EAAE,kBAPpB;AAQIoF,MAAAA,aAAa,EAAE,WARnB;AASIuC,MAAAA,eAAe,EAAE,eATrB;AAUIrC,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAKzG,kBAAZ;AAAgC0G,QAAAA,qBAAqB,EAAE;AAAvD,OAAD,EAA+E;AAAED,QAAAA,GAAG,EAAE,KAAKxG,aAAZ;AAA2ByG,QAAAA,qBAAqB,EAAE;AAAlD,OAA/E,CAVf;AAWIoC,MAAAA,YAAY,EAAE,CAAC,qBAAD,EAAwB,iBAAxB,EAA2C,kBAA3C,EAA+D,cAA/D,EAA+E,qBAA/E,EAAsG,iBAAtG,EACV,0BADU,EACkB,sBADlB,EAC0C,uBAD1C,EACmE,mBADnE,EACwF,UADxF,EACoG,QADpG,EAEV,kBAFU,EAEU,YAFV,EAEwB,SAFxB,EAEmC,YAFnC,EAEiD,iBAFjD,EAEoE,WAFpE,EAEiF,gBAFjF,EAEmG,cAFnG,EAGV,gBAHU,EAGQ,sBAHR,EAGgC,yBAHhC,EAG2D,kBAH3D,EAG+E,iBAH/E;AAXlB,KADiB,EAgBd;AACCJ,MAAAA,gBAAgB,EAAE,mBADnB;AAECG,MAAAA,eAAe,EAAE,kBAFlB;AAGCF,MAAAA,WAAW,EAAE,IAHd;AAICC,MAAAA,SAAS,EAAE,KAAK5I,kBAJjB;AAKCmB,MAAAA,eAAe,EAAE,wBALlB;AAMCoF,MAAAA,QAAQ,EAAE,wBANX;AAOCI,MAAAA,gBAAgB,EAAEc,YAPnB;AAQCvG,MAAAA,cAAc,EAAE,qBARjB;AASCsF,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,GAAG,EAAE,KAAKxG,aAAZ;AAA2ByG,QAAAA,qBAAqB,EAAE;AAAlD,OAAD,CATZ;AAUCJ,MAAAA,aAAa,EAAE,cAVhB;AAWCwC,MAAAA,YAAY,EAAE,CAAC,qBAAD,EAAwB,iBAAxB,EAA2C,kBAA3C,EAA+D,cAA/D,EAA+E,qBAA/E,EAAsG,iBAAtG,EACV,0BADU,EACkB,sBADlB,EAC0C,uBAD1C,EACmE,mBADnE,EACwF,UADxF,EACoG,QADpG,EAEV,kBAFU,EAEU,YAFV,EAEwB,SAFxB,EAEmC,YAFnC,EAEiD,iBAFjD,EAEoE,WAFpE,EAEiF,gBAFjF,EAEmG,cAFnG,EAGV,gBAHU,EAGQ,sBAHR,EAGgC,yBAHhC,EAG2D,kBAH3D,EAG+E,iBAH/E;AAXf,KAhBc,EA+Bd;AACCJ,MAAAA,gBAAgB,EAAE,eADnB;AAECC,MAAAA,WAAW,EAAE,IAFd;AAGCC,MAAAA,SAAS,EAAE,KAAK3I,aAHjB;AAICkB,MAAAA,eAAe,EAAE,sBAJlB;AAKCoF,MAAAA,QAAQ,EAAE,KAAKU,gBAAL,EALX;AAMCN,MAAAA,gBAAgB,EAAEe,iBANnB;AAOCxG,MAAAA,cAAc,EAAE,gBAPjB;AAQCoF,MAAAA,aAAa,EAAE,SARhB;AASCuC,MAAAA,eAAe,EAAE,aATlB;AAUCC,MAAAA,YAAY,EAAE,CAAC,qBAAD,EAAwB,iBAAxB,EAA2C,kBAA3C,EAA+D,cAA/D,EAA+E,qBAA/E,EAAsG,iBAAtG,EACV,0BADU,EACkB,sBADlB,EAC0C,uBAD1C,EACmE,mBADnE,EACwF,UADxF,EACoG,QADpG,EAEV,kBAFU,EAEU,YAFV,EAEwB,SAFxB,EAEmC,YAFnC,EAEiD,iBAFjD,EAEoE,WAFpE,EAEiF,gBAFjF,EAEmG,cAFnG,EAGV,gBAHU,EAGQ,sBAHR,EAGgC,yBAHhC,EAG2D,kBAH3D,EAG+E,iBAH/E,EAGkG,UAHlG;AAVf,KA/Bc,CAArB;AAgDA,wBACI,uDACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,iDAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,mBAAD;AAAqB,MAAA,cAAc,EAAEnB,cAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,SAAS,EAAC,uCAAvB;AAA+D,MAAA,GAAG,EAAGtC,YAAD,IAAkB;AAAE,aAAKA,YAAL,GAAoBA,YAApB;AAAkC,OAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAC,MAA5B;AAAmC,MAAA,UAAU,EAAE,IAA/C;AAAqD,MAAA,YAAY,EAAE,CAAnE;AAAsE,MAAA,oBAAoB,EAAE,KAAKvR,KAAL,CAAWS,0BAAvG;AAAmI,MAAA,yBAAyB,EAAE,KAAKH,cAAnK;AAAmL,MAAA,cAAc,EAAE,EAAnM;AAAuM,MAAA,gBAAgB,EAAE,EAAzN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,yBAAD;AACI,MAAA,0BAA0B,EAAE,KAAKN,KAAL,CAAWS,0BAD3C;AAEI,MAAA,eAAe,EAAE,IAFrB;AAGI,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgM,cAA5B,IAA8CsE,aAH9D;AAII,MAAA,cAAc,EAAE,KAAKhT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAJhD;AAKI,MAAA,eAAe,EAAC,WALpB;AAMI,MAAA,eAAe,EAAE,KAAK/F,KAAL,CAAWpE,uBANhC;AAOI,MAAA,UAAU,EAAEyX,iBAPhB;AAQI,MAAA,eAAe,EAAE,CAAC,sBAAD,CARrB;AASI,MAAA,SAAS,EAAE,OATf;AAUI,MAAA,aAAa,EAAE,KAAK1T,KAAL,CAAWiV,cAV9B;AAWI,MAAA,cAAc,EAAC,oBAXnB;AAYI,MAAA,kBAAkB,EAAC,eAZvB;AAaI,MAAA,mBAAmB,EAAC,aAbxB;AAcI,MAAA,gBAAgB,EAAC,kBAdrB;AAeI,MAAA,UAAU,EAAC,QAff;AAgBI,MAAA,QAAQ,EAAC,YAhBb;AAiBI,MAAA,gBAAgB,EAAE,KAAK5U,KAAL,CAAWnD,qBAjBjC;AAkBI,MAAA,cAAc,EAAC,gBAlBnB;AAmBI,MAAA,cAAc,EAAE,IAnBpB;AAoBI,MAAA,aAAa,EAAC,sBApBlB;AAqBI,MAAA,iBAAiB,EAAC,0CArBtB;AAsBI,MAAA,UAAU,EAAE,KAAKmD,KAAL,CAAWJ,KAAX,CAAiBiV,UAtBjC;AAuBI,MAAA,UAAU,EAAE,KAAKC,UAvBrB;AAwBI,MAAA,WAAW,EAAE,KAAKC,WAxBtB;AAyBI,MAAA,cAAc,EAAE,KAAK9I,cAzBzB;AA0BI,MAAA,SAAS,EAAE,KAAKtM,KAAL,CAAWqV,oBA1B1B;AA2BI,MAAA,SAAS,EAAE,KAAKrV,KAAL,CAAWsV,eA3B1B;AA4BI,MAAA,gBAAgB,EAAE,IA5BtB;AA6BI,MAAA,SAAS,EAAE,UA7Bf;AA8BI,MAAA,cAAc,EAAE,IA9BpB;AA+BI,MAAA,eAAe,EAAC,qBA/BpB;AAgCI,MAAA,WAAW,EAAC,oBAhChB,CAiCI;AAjCJ;AAkCI,MAAA,WAAW,EAAC,aAlChB;AAmCI,MAAA,cAAc,EAAE,KAnCpB;AAoCI,MAAA,cAAc,EAAE,IApCpB;AAqCI,MAAA,UAAU,EAAE,IArChB;AAsCI,MAAA,SAAS,EAAE,KAAKrJ,eAtCpB;AAuCI,MAAA,WAAW,EAAEsG,iBAvCjB;AAwCI,MAAA,IAAI,EAAE,KAAKvS,KAAL,CAAWa,IAxCrB;AAyCI,MAAA,IAAI,EAAE,KAAKb,KAAL,CAAWe,IAzCrB;AA0CI,MAAA,gBAAgB,EAAE,KAAKsF,gBA1C3B;AA2CI,MAAA,eAAe,EAAE,IA3CrB;AA4CI,MAAA,cAAc,EAAE,KAAKrG,KAAL,CAAWS,0BAAX,IAAyC,KAAKT,KAAL,CAAWS,0BAAX,GAAwC,EAAjF,GAAsF,YAAtF,GAAqG,KAAKT,KAAL,CAAWS,0BAAX,GAAwC,EAAxC,GAA6C,UAA7C,GAA0D,EA5CnL;AA6CI,MAAA,YAAY,EAAE,CAAC,cAAD,EAAiB,SAAjB,EAA6B,wBAA7B,EAAuD,qBAAvD,CA7ClB;AA8CI,MAAA,WAAW,EACP,CACI,KAAKJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,KAAKlI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAA7C,KAA8D5J,gBAAgB,CAAC6W,WAA/H,GACI;AACIC,QAAAA,KAAK,EAAE,QADX;AAEIC,QAAAA,WAAW,EAAE,SAFjB;AAGIC,QAAAA,UAAU,EAAE,QAHhB;AAIIC,QAAAA,MAAM,EAAE,KAAK3V,KAAL,CAAW+D,qBAAX,CAAiC6R,OAAjC,CAAyCtB,eAAzC,MAA8D,CAAC,CAJ3E;AAKI;AACA;AACAuB,QAAAA,OAAO,EAAE,KAAKxV,KAAL,CAAW3C,mBAPxB;AAQIwE,QAAAA,SAAS,EAAE;AACPE,UAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QADpB;AAEPiB,UAAAA,YAAY,EAAEgR;AAFP;AARf,OADJ,GAcI,KAAKjU,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eAAhD,KAAoE7J,mBAAmB,CAAC2T,OAA3I,GACI;AACIkD,QAAAA,KAAK,EAAE,QADX;AAEIC,QAAAA,WAAW,EAAE,SAFjB;AAGIC,QAAAA,UAAU,EAAE,QAHhB;AAIIC,QAAAA,MAAM,EAAE,KAAK3V,KAAL,CAAW+D,qBAAX,CAAiC6R,OAAjC,CAAyClB,gBAAzC,MAA+D,CAAC,CAJ5E;AAKI;AACA;AACAmB,QAAAA,OAAO,EAAG3O,GAAD,IAAS,KAAK9J,iBAAL,CAAuB8J,GAAvB,EAA4BwN,gBAA5B,CAPtB;AAQIxS,QAAAA,SAAS,EAAE;AACPE,UAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QADpB;AAEPiB,UAAAA,YAAY,EAAEgR,eAFP;AAGPhM,UAAAA,YAAY,EAAE,KAAKjI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,CAA6CD,YAHpD;AAIPE,UAAAA,eAAe,EAAE,KAAKnI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD;AAJ1D;AARf,OADJ,GAgBM;AACEgN,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,WAAW,EAAE,SAFf;AAGEC,QAAAA,UAAU,EAAE,QAHd;AAIEC,QAAAA,MAAM,EAAE,KAAK3V,KAAL,CAAW+D,qBAAX,CAAiC6R,OAAjC,CAAyCjB,WAAzC,MAA0D,CAAC,CAJrE;AAKEkB,QAAAA,OAAO,EAAG3O,GAAD,IAAS,KAAK7G,KAAL,CAAWzC,cAAX,CAA0BsJ,GAA1B,EAA+BwN,gBAA/B,CALpB;AAMExS,QAAAA,SAAS,EAAE;AACPE,UAAAA,QAAQ,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBoC,QADpB;AAEPiB,UAAAA,YAAY,EAAEqR;AAFP;AANb,OA/Bd,CA/CR;AA8FI,MAAA,aAAa,eACT,uDACI,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,qCAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGI,oBAAC,MAAD;AAAQ,QAAA,SAAS,EAAC,kCAAlB;AAAqD,QAAA,OAAO,EAAC,MAA7D;AACI,QAAA,OAAO,EAAE,MAAM,KAAK3I,QAAL,EADnB,CAEI;AACF;AAHF;AAII,oBAAU,KAAK3L,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAE5K,MAAvB;AAA+B,QAAA,KAAK,EAAE;AAAE,mBAAS;AAAX,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CAHJ,EAWK,KAAKgF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0Q,cAA5B,IACG,KAAKzT,KAAL,CAAW+D,qBAAX,CAAiC6R,OAAjC,CAAyCpB,oBAAzC,MAAmE,CAAC,CADvE,IAEG,KAAKnU,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0Q,cAA5B,CAA2CvO,MAA3C,GAAoD,CAFvD,gBAGG,oBAAC,aAAD;AACI,QAAA,IAAI,EAAEhK,MADV;AAEI,QAAA,GAAG,EAAE,IAFT;AAGI,QAAA,IAAI,EAAEuY,cAHV;AAII,QAAA,UAAU,EAAC,0BAJf;AAKI,QAAA,OAAO,EAAC,iBALZ;AAMI,QAAA,OAAO,EAAC,oBANZ;AAOI,QAAA,aAAa,EAAG5O,KAAD,IAAW,KAAKvI,cAAL,CAAoBuI,KAApB,CAP9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHH,GAcK,EAzBV,CADJ,CA/FR;AA6HI,MAAA,eAAe,EAAE,CACb;AACI,sCAAiB,oBAAC,YAAD;AACb,UAAA,UAAU,EAAE,KAAK7E,KAAL,CAAW6Q,cAAX,IAA6B,EAD5B;AAEb,UAAA,eAAe,EAAE,KAAKxQ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BsF,mBAA5B,IAAmD,EAFvD;AAGb,UAAA,OAAO,EAAE,KAAKrI,KAAL,CAAW8Q,oBAAX,IAAmC,EAH/B;AAIb,UAAA,YAAY,EAAE,KAAKzQ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwF,gBAA5B,IAAgD,EAJjD;AAKb,UAAA,UAAU,EAAE,KAAKvI,KAAL,CAAW+Q,uBAAX,IAAsC,EALrC;AAMb,UAAA,eAAe,EAAE,KAAK1Q,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,EANvD;AAOb,UAAA,eAAe,EAAE,KAAKzI,KAAL,CAAWiR,iBAAX,IAAgC,EAPpC;AAQb,UAAA,oBAAoB,EAAE,KAAK5Q,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByH,wBAA5B,IAAwD,EARjE;AASb,UAAA,WAAW,EAAE,KAAKxK,KAAL,CAAWkR,eAAX,IAA8B,EAT9B;AAUb,UAAA,gBAAgB,EAAE,KAAK7Q,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4H,oBAA5B,IAAoD,EAVzD;AAWb,UAAA,SAAS,EAAE,KAAKtK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+S,SAA5B,IAAyC,EAXvC;AAYb,UAAA,IAAI,EAAE,KAAK9V,KAAL,CAAWmR,QAAX,IAAuB,EAZhB;AAab,UAAA,SAAS,EAAE,KAAK9Q,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmF,aAA5B,IAA6C,EAb3C;AAcb,UAAA,YAAY,EAAE,KAAKlI,KAAL,CAAWgR,gBAAX,IAA+B,EAdhC;AAeb,UAAA,iBAAiB,EAAE,KAAK3Q,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4G,qBAA5B,IAAqD,EAf3D;AAgBb,UAAA,QAAQ,EAAE,KAAKtJ,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+F,QAA5B,GAAuC1K,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBoC,QAAlB,EAA4B,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+F,QAAxD,CAA1D,GAA8H,IAAI4C,IAAJ,EAhB3H;AAiBb,UAAA,MAAM,EAAE,KAAKrL,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiG,MAA5B,GAAqC5K,mBAAmB,CAAC,KAAKiC,KAAL,CAAWJ,KAAX,CAAiBoC,QAAlB,EAA4B,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiG,MAAxD,CAAxD,GAA0H,IAAI0C,IAAJ,EAjBrH;AAkBb,UAAA,mBAAmB,EAAE,KAAKxB,mBAlBb;AAmBb,UAAA,gBAAgB,EAAE,KAAKqB,gBAnBV;AAoBb,UAAA,QAAQ,EAAE,KAAKlL,KAAL,CAAWJ,KAAX,CAAiBoC,QApBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADrB,OADa,CA7HrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EA2JI,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BmB,cAA5B,gBACA,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAGyO,GAAD,IAAS;AAAE,aAAK1R,aAAL,GAAqB0R,GAArB;AAA2B,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,cAAD;AACI,MAAA,eAAe,EAAC,gBADpB;AAEI,MAAA,QAAQ,MAFZ;AAGI,MAAA,WAAW,EAAC,MAHhB;AAII,MAAA,YAAY,EAAE,CAJlB;AAKI,MAAA,yBAAyB,EAAE,KAAKjR,sBALpC;AAMI,MAAA,oBAAoB,EAAE,GAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWqB,QAAX,KAAwB,IAAxB,GAA+B;AAAE0U,QAAAA,OAAO,EAAE,OAAX;AAAoBC,QAAAA,UAAU,EAAE;AAAhC,OAA/B,GAA2E;AAAED,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,UAAU,EAAE;AAA/B,OAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAC,MAA5B;AACI,MAAA,YAAY,EAAE,CADlB;AACqB,MAAA,UAAU,EAAE,IADjC;AAEI,MAAA,oBAAoB,EAAE,KAAKhW,KAAL,CAAWS,0BAFrC;AAGI,MAAA,yBAAyB,EAAE,KAAKH,cAHpC;AAII,MAAA,cAAc,EAAE,EAJpB;AAKI,MAAA,gBAAgB,EAAE,EALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAE2V,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BG,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,CADJ,CADJ,eAMI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,yBAAD;AACI,MAAA,UAAU,EAAE,KAAKlW,KAAL,CAAW8B,oBAD3B;AAEI,MAAA,UAAU,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BoT,iBAA5B,IAAiD7C,gBAFjE;AAGI,MAAA,cAAc,EAAE,KAAKjT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B6E,mBAHhD;AAII,MAAA,eAAe,EAAC,wBAJpB;AAKI,MAAA,eAAe,EAAE,KAAKvH,KAAL,CAAWnE,kBALhC;AAMI,MAAA,UAAU,EAAEyX,YANhB;AAOI,MAAA,eAAe,EAAE,EAPrB;AAQI,MAAA,SAAS,EAAC,aARd;AASI,MAAA,gBAAgB,EAAC,qBATrB;AAUI,MAAA,UAAU,EAAC,WAVf;AAWI,MAAA,QAAQ,EAAC,eAXb;AAYI,MAAA,SAAS,EAAE,UAZf;AAaI,MAAA,gBAAgB,EAAE,IAbtB;AAcI,MAAA,cAAc,EAAE,IAdpB;AAeI,MAAA,cAAc,EAAE,IAfpB;AAgBI,MAAA,eAAe,EAAC,qBAhBpB;AAiBI,MAAA,WAAW,EAAC,oBAjBhB;AAkBI,MAAA,cAAc,EAAC,oBAlBnB;AAmBI,MAAA,kBAAkB,EAAC,qBAnBvB;AAoBI,MAAA,mBAAmB,EAAC,aApBxB;AAqBI,MAAA,WAAW,EAAC,aArBhB;AAsBI,MAAA,SAAS,EAAE,KAAK3T,KAAL,CAAWoW,uBAtB1B;AAuBI,MAAA,SAAS,EAAE,KAAKpW,KAAL,CAAWqW,kBAvB1B;AAwBI,MAAA,cAAc,EAAE,KAxBpB;AAyBI,MAAA,eAAe,EAAE,IAzBrB;AA0BI,MAAA,UAAU,EAAE,KA1BhB;AA2BI,MAAA,SAAS,EAAE,KAAKnK,kBA3BpB;AA4BI,MAAA,WAAW,EAAE8G,oBA5BjB;AA6BI,MAAA,gBAAgB,EAAE,KAAK3S,KAAL,CAAWnD,qBA7BjC;AA8BI,MAAA,cAAc,EAAC,mBA9BnB;AA+BI,MAAA,IAAI,EAAE,KAAK8C,KAAL,CAAWY,aA/BrB;AAgCI,MAAA,IAAI,EAAE,KAAKZ,KAAL,CAAWc,aAhCrB;AAiCI,MAAA,gBAAgB,EAAE,KAAKJ,yBAjC3B;AAkCI,MAAA,YAAY,EAAE,CAAC,4BAAD,CAlClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CANJ,CAPJ,eAoDI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAEuV,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,KAAK1V,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAA5B,CADJ,CADJ,eAII;AAAQ,MAAA,SAAS,EAAC,iCAAlB;AAAoD,MAAA,KAAK,EAAE;AAAEqQ,QAAAA,KAAK,EAAE;AAAT,OAA3D;AACI,MAAA,OAAO,EAAE,MAAM,KAAKnV,gBAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE/F,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAGqD,IAHrD,EAIK,KAAKiF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAJL,CAJJ,CADJ,eAYI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,yBAAD;AACI,MAAA,UAAU,EAAE,KAAKjG,KAAL,CAAW8B,oBAD3B;AAEI,MAAA,eAAe,EAAE,IAFrB;AAGI,MAAA,UAAU,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAA5B,IAA6CwQ,WAH7D;AAII,MAAA,cAAc,EAAE,KAAKnT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAJhD;AAKI,MAAA,eAAe,EAAC,sBALpB;AAMI,MAAA,eAAe,EAAE,KAAKpD,KAAL,CAAWlE,uBANhC;AAOI,MAAA,UAAU,EAAEyX,iBAPhB;AAQI,MAAA,eAAe,EAAE,EARrB;AASI,MAAA,SAAS,EAAE,cATf;AAUI,MAAA,gBAAgB,EAAC,gBAVrB;AAWI,MAAA,UAAU,EAAC,MAXf;AAYI,MAAA,QAAQ,EAAC,UAZb;AAaI,MAAA,QAAQ,EAAE,KAAKvT,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,IAA6B,KAAKnP,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,EAA8B+G,KAA9B,CAAoC,GAApC,EAAyC5S,GAAzC,CAA6C6S,OAAO,IAAIjK,QAAQ,CAACiK,OAAD,CAAhE,CAb3C;AAcI,MAAA,cAAc,EAAE,IAdpB;AAeI,MAAA,eAAe,EAAC,qBAfpB;AAgBI,MAAA,WAAW,EAAC,oBAhBhB;AAiBI,MAAA,cAAc,EAAE,KAjBpB;AAkBI,MAAA,cAAc,EAAE,IAlBpB;AAmBI,MAAA,cAAc,EAAE,IAnBpB;AAoBI,MAAA,SAAS,EAAE,UApBf;AAqBI,MAAA,gBAAgB,EAAE,KArBtB;AAsBI,MAAA,cAAc,EAAC,oBAtBnB;AAuBI,MAAA,kBAAkB,EAAC,eAvBvB;AAwBI,MAAA,mBAAmB,EAAC,eAxBxB;AAyBI,MAAA,aAAa,EAAE,KAAKnW,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByE,YAA5B,IAA4C,EAzB/D;AA0BI,MAAA,iBAAiB,EAAE,IA1BvB;AA2BI,MAAA,SAAS,EAAE,KAAKxH,KAAL,CAAWyW,kBA3B1B;AA4BI,MAAA,SAAS,EAAE,KAAKzW,KAAL,CAAWwQ,aA5B1B;AA6BI,MAAA,cAAc,EAAE,KA7BpB;AA8BI,MAAA,UAAU,EAAE,KA9BhB;AA+BI,MAAA,gBAAgB,EAAE,KAAKnQ,KAAL,CAAWnD,qBA/BjC;AAgCI,MAAA,cAAc,EAAC,eAhCnB;AAiCI,MAAA,SAAS,EAAE,KAAKiP,aAjCpB;AAkCI,MAAA,WAAW,EAAE+G,eAlCjB;AAmCI,MAAA,IAAI,EAAE,KAAKlT,KAAL,CAAW4C,QAnCrB;AAoCI,MAAA,IAAI,EAAE,KAAK5C,KAAL,CAAW6C,QApCrB;AAqCI,MAAA,iBAAiB,EAAE,IArCvB;AAsCI,MAAA,qBAAqB,EAAC,WAtC1B;AAuCI,MAAA,gBAAgB,EAAE,KAAKyD,oBAvC3B;AAwCI,MAAA,WAAW,EAAE,CAxCjB;AAyCI,MAAA,YAAY,EACR,CAAE,4BAAF,EAAgC,yBAAhC,CA1CR;AA6CI,MAAA,aAAa,eAET,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,6DAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGI,oBAAC,GAAD,CAAK,IAAL;AACG;AACC,oBAAU,KAAKjG,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFd;AAGI,QAAA,MAAM,EAAE,KAAKjG,KAAL,CAAW+D,qBAAX,CAAiC6R,OAAjC,CAAyCrB,WAAzC,MAA0D,CAAC,CAHvE;AAII,QAAA,SAAS,EAAC,kCAJd;AAIiD,QAAA,IAAI,EAAC,QAJtD;AAKI,QAAA,OAAO,EAAE,MAAM,KAAKlU,KAAL,CAAWpD,aAAX,CAAyB;AAAC0W,UAAAA,YAAD;AAAelQ,UAAAA,cAAc,EAAE,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA3D;AAA0EpB,UAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAArG;AAA+GiB,UAAAA,YAAY,EAACiR;AAA5H,SAAzB,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEpZ,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CAHJ,CA/CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAZJ,CADJ,CApDJ,CADJ,CADJ,eAyII,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,KAAK6E,KAAL,CAAWoB,UAAX,KAA0B,IAA1B,GAAiC;AAAE2U,QAAAA,OAAO,EAAE;AAAX,OAAjC,GAAwD;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAEE,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BG,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAK7V,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAN,CADJ,CADJ,eAII;AAAQ,MAAA,SAAS,EAAC,iCAAlB;AAAoD,MAAA,KAAK,EAAE;AAAEqQ,QAAAA,KAAK,EAAE;AAAT,OAA3D;AACI,MAAA,OAAO,EAAE,MAAM,KAAKvE,cAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE3W,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,OAIK,KAAKiF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAJL,CAJJ,CADJ,eAYI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAAEuL,QAAAA,MAAM,EAAE,KAAKxR,KAAL,CAAW8B;AAArB,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,IAAgD,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6ClB,MAA7C,KAAwD,CAAxG,gBACG,oBAAC,oBAAD;AACI,MAAA,IAAI,EAAG,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,IAAgD,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6ClB,MAA7C,GAAsD,CAAvG,GACF,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6C,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6ClB,MAA7C,GAAsD,CAAnG,CADE,GACsG,EAFhH;AAGI,MAAA,UAAU,EAAE,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,IAAgD,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5E,GACR,KAAKpG,KAAL,CAAWkQ,UADH,GACgB,EAJhC;AAKI,MAAA,UAAU,EAAC,gBALf;AAMI,MAAA,QAAQ,EAAI,KAAK7P,KAAL,CAAWJ,KAAX,CAAiBoC,QANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,gBAYG,oBAAC,oBAAD;AACI,MAAA,cAAc,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBADhD;AAEI,MAAA,QAAQ,EAAE,KAAK/F,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,IAA6B,EAF3C;AAGI,MAAA,UAAU,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAHjC;AAII,MAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiBgC,UAJjC;AAKI,MAAA,SAAS,EAAE,KAAKjC,KAAL,CAAWwB,mBAL1B;AAMI,MAAA,eAAe,EAAE,KAAKF,yBAN1B;AAOI,MAAA,mBAAmB,EAAE,KAAK0Q,iBAAL,CAAuB,KAAKhS,KAAL,CAAW0W,eAAlC,KAAoD,EAP7E;AAQI,MAAA,iBAAiB,EAAE,KAAK1E,iBAAL,CAAuB,KAAKhS,KAAL,CAAW2W,oBAAlC,KAAyD,EARhF;AASI,MAAA,eAAe,EAAE,WATrB;AAUI,MAAA,WAAW,EAAC,UAVhB;AAWI,MAAA,UAAU,EAAC,gBAXf;AAYI,MAAA,SAAS,EAAE,UAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbR,CADJ,CADJ,CAZJ,CADJ,CADJ,CADJ,CADJ,CADJ,CAzIJ,CARJ,eA0MI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAAEnF,QAAAA,MAAM,EAAE,mBAAmB,CAAC,KAAKxR,KAAL,CAAW8B,oBAAZ,GAAmC,GAAtD,IAA6D;AAAvE,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK9B,KAAL,CAAWoB,UAAX,gBACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAE6U,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BG,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,CADJ,CADF,eAME,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAE,KAAKlW,KAAL,CAAW4Q,OAAnC;AAA4C,MAAA,SAAS,EAAE,KAAKvQ,KAAL,CAAWJ,KAAX,CAAiBkG,eAAjB,IAAoC,uBAA3F;AACI,MAAA,SAAS,EAAE,KAAKyQ,eAAL,EADf;AACuC,MAAA,WAAW,EAAE,KAAK1Q,iBADzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,OADD,GAWA,EAZL,EAcM,KAAKlG,KAAL,CAAWqB,QAAX,gBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAE4U,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACK;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BG,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADL,CADH,eAMI,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAE,KAAKlW,KAAL,CAAW4Q,OAAnC;AAA4C,MAAA,SAAS,EAAE,KAAKvQ,KAAL,CAAWJ,KAAX,CAAiBgF,aAAjB,IAAkC,aAAzF;AACQ,MAAA,SAAS,EAAE,KAAKxC,aAAL,EADnB;AACyC,MAAA,WAAW,EAAE,KAAKsC,eAD3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADF,GAUE,EAxBR,CADJ,CADJ,CA1MJ,CADA,CADA,gBA+OA,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAG4N,GAAD,IAAS;AAAE,aAAK1R,aAAL,GAAqB0R,GAArB;AAA2B,OAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AACI,MAAA,eAAe,EAAC,gBADpB;AAEI,MAAA,QAAQ,MAFZ;AAGI,MAAA,WAAW,EAAC,MAHhB;AAII,MAAA,YAAY,EAAE,CAJlB;AAKI,MAAA,yBAAyB,EAAE,KAAKjR,sBALpC;AAMI,MAAA,oBAAoB,EAAE,GAN1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE,KAAK1B,KAAL,CAAWqB,QAAX,KAAwB,IAAxB,GAA+B;AAAE0U,QAAAA,OAAO,EAAE,OAAX;AAAoBC,QAAAA,UAAU,EAAE;AAAhC,OAA/B,GAA2E;AAAED,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,UAAU,EAAE;AAA/B,OAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,cAAD;AAAgB,MAAA,WAAW,EAAC,MAA5B;AACI,MAAA,YAAY,EAAE,CADlB;AACqB,MAAA,UAAU,EAAE,IADjC;AAEI,MAAA,oBAAoB,EAAE,KAAKhW,KAAL,CAAWS,0BAFrC;AAGI,MAAA,yBAAyB,EAAE,KAAKH,cAHpC;AAII,MAAA,cAAc,EAAE,EAJpB;AAKI,MAAA,gBAAgB,EAAE,EALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAE2V,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4B,KAAK1V,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAA5B,CADJ,CADJ,eAII;AAAQ,MAAA,SAAS,EAAC,iCAAlB;AAAoD,MAAA,KAAK,EAAE;AAAEqQ,QAAAA,KAAK,EAAE;AAAT,OAA3D;AACI,MAAA,OAAO,EAAE,MAAM,KAAKnV,gBAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE/F,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,EAGqD,IAHrD,EAIK,KAAKiF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAJL,CAJJ,CADJ,eAYI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,yBAAD;AACI,MAAA,UAAU,EAAE,KAAKjG,KAAL,CAAW8B,oBAD3B;AAEI,MAAA,eAAe,EAAE,IAFrB;AAGI,MAAA,UAAU,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BC,aAA5B,IAA6CwQ,WAH7D;AAII,MAAA,cAAc,EAAE,KAAKnT,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAJhD;AAKI,MAAA,eAAe,EAAC,sBALpB;AAMI,MAAA,eAAe,EAAE,KAAKpD,KAAL,CAAWlE,uBANhC;AAOI,MAAA,UAAU,EAAEyX,iBAPhB;AAQI,MAAA,eAAe,EAAE,EARrB;AASI,MAAA,SAAS,EAAE,cATf;AAUI,MAAA,gBAAgB,EAAC,gBAVrB;AAWI,MAAA,UAAU,EAAC,MAXf;AAYI,MAAA,QAAQ,EAAC,UAZb;AAaI,MAAA,QAAQ,EAAE,KAAKvT,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,IAA6B,KAAKnP,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,EAA8B+G,KAA9B,CAAoC,GAApC,EAAyC5S,GAAzC,CAA6C6S,OAAO,IAAIjK,QAAQ,CAACiK,OAAD,CAAhE,CAb3C;AAcI,MAAA,cAAc,EAAE,IAdpB;AAeI,MAAA,eAAe,EAAC,qBAfpB;AAgBI,MAAA,WAAW,EAAC,oBAhBhB;AAiBI,MAAA,cAAc,EAAE,KAjBpB;AAkBI,MAAA,cAAc,EAAE,IAlBpB;AAmBI,MAAA,cAAc,EAAE,IAnBpB;AAoBI,MAAA,SAAS,EAAE,UApBf;AAqBI,MAAA,gBAAgB,EAAE,KArBtB;AAsBI,MAAA,cAAc,EAAC,oBAtBnB;AAuBI,MAAA,kBAAkB,EAAC,eAvBvB;AAwBI,MAAA,mBAAmB,EAAC,eAxBxB;AAyBI,MAAA,aAAa,EAAE,KAAKnW,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByE,YAA5B,IAA4C,EAzB/D;AA0BI,MAAA,iBAAiB,EAAE,IA1BvB;AA2BI,MAAA,SAAS,EAAE,KAAKxH,KAAL,CAAWyW,kBA3B1B;AA4BI,MAAA,SAAS,EAAE,KAAKzW,KAAL,CAAWwQ,aA5B1B;AA6BI,MAAA,cAAc,EAAE,KA7BpB;AA8BI,MAAA,UAAU,EAAE,KA9BhB;AA+BI,MAAA,gBAAgB,EAAE,KAAKnQ,KAAL,CAAWnD,qBA/BjC;AAgCI,MAAA,cAAc,EAAC,eAhCnB;AAiCI,MAAA,SAAS,EAAE,KAAKiP,aAjCpB;AAkCI,MAAA,WAAW,EAAE+G,eAlCjB;AAmCI,MAAA,IAAI,EAAE,KAAKlT,KAAL,CAAW4C,QAnCrB;AAoCI,MAAA,IAAI,EAAE,KAAK5C,KAAL,CAAW6C,QApCrB;AAqCI,MAAA,iBAAiB,EAAE,IArCvB;AAsCI,MAAA,qBAAqB,EAAC,WAtC1B;AAuCI,MAAA,gBAAgB,EAAE,KAAKyD,oBAvC3B;AAwCI,MAAA,WAAW,EAAE,CAxCjB;AAyCI,MAAA,YAAY,EACR,CAAE,4BAAF,EAAgC,yBAAhC,CA1CR;AA6CI,MAAA,aAAa,eAET,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAC,6DAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGI,oBAAC,GAAD,CAAK,IAAL;AACC;AACG,oBAAU,KAAKjG,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFd;AAGI,QAAA,MAAM,EAAE,KAAKjG,KAAL,CAAW+D,qBAAX,CAAiC6R,OAAjC,CAAyCrB,WAAzC,MAA0D,CAAC,CAHvE;AAII,QAAA,SAAS,EAAC,kCAJd;AAIiD,QAAA,IAAI,EAAC,QAJtD;AAKI,QAAA,OAAO,EAAE,MAAM,KAAKlU,KAAL,CAAWpD,aAAX,CAAyB;AAAC0W,UAAAA,YAAD;AAAelQ,UAAAA,cAAc,EAAE,KAAKpD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BU,cAA3D;AAA0EpB,UAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAArG;AAA+GiB,UAAAA,YAAY,EAACiR;AAA5H,SAAzB,CALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEpZ,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,CAHJ,CA/CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAZJ,CADJ,CARJ,CADJ,CADJ,eA6FI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,KAAK6E,KAAL,CAAWoB,UAAX,KAA0B,IAA1B,GAAiC;AAAE2U,QAAAA,OAAO,EAAE;AAAX,OAAjC,GAAwD;AAAEA,QAAAA,OAAO,EAAE;AAAX,OAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,IAAN;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAEE,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BG,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAK7V,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAAN,CADJ,CADJ,eAII;AAAQ,MAAA,SAAS,EAAC,iCAAlB;AAAoD,MAAA,KAAK,EAAE;AAAEqQ,QAAAA,KAAK,EAAE;AAAT,OAA3D;AACI,MAAA,OAAO,EAAE,MAAM,KAAKvE,cAAL,EADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGI,oBAAC,eAAD;AAAiB,MAAA,IAAI,EAAE3W,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,OAIK,KAAKiF,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CAJL,CAJJ,CADJ,eAYI,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAAEuL,QAAAA,MAAM,EAAE,KAAKxR,KAAL,CAAW8B;AAArB,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,IAAgD,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6ClB,MAA7C,KAAwD,CAAxG,gBACG,oBAAC,oBAAD;AACI,MAAA,IAAI,EAAG,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,IAAgD,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6ClB,MAA7C,GAAsD,CAAvG,GACF,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6C,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6ClB,MAA7C,GAAsD,CAAnG,CADE,GACsG,EAFhH;AAGI,MAAA,UAAU,EAAE,KAAK7E,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,IAAgD,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5E,GACR,KAAKpG,KAAL,CAAWkQ,UADH,GACgB,EAJhC;AAKI,MAAA,UAAU,EAAC,gBALf;AAMI,MAAA,QAAQ,EAAI,KAAK7P,KAAL,CAAWJ,KAAX,CAAiBoC,QANjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,gBAYG,oBAAC,oBAAD;AACI,MAAA,cAAc,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBADhD;AAEI,MAAA,QAAQ,EAAE,KAAK/F,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,IAA6B,EAF3C;AAGI,MAAA,UAAU,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiB8C,UAHjC;AAII,MAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiBgC,UAJjC;AAKI,MAAA,SAAS,EAAE,KAAKjC,KAAL,CAAWwB,mBAL1B;AAMI,MAAA,eAAe,EAAE,KAAKF,yBAN1B;AAOI,MAAA,mBAAmB,EAAE,KAAK0Q,iBAAL,CAAuB,KAAKhS,KAAL,CAAW0W,eAAlC,KAAoD,EAP7E;AAQI,MAAA,iBAAiB,EAAE,KAAK1E,iBAAL,CAAuB,KAAKhS,KAAL,CAAW2W,oBAAlC,KAAyD,EARhF;AASI,MAAA,eAAe,EAAE,WATrB;AAUI,MAAA,WAAW,EAAC,UAVhB;AAWI,MAAA,UAAU,EAAC,gBAXf;AAYI,MAAA,SAAS,EAAE,UAZf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbR,CADJ,CADJ,CAZJ,CADJ,CADJ,CADJ,CADJ,CADJ,CA7FJ,CARJ,eA8JI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,KAAK,EAAE;AAAEnF,QAAAA,MAAM,EAAE,mBAAmB,CAAC,KAAKxR,KAAL,CAAW8B,oBAAZ,GAAmC,GAAtD,IAA6D;AAAvE,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAK9B,KAAL,CAAWoB,UAAX,gBACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,IAAD,CAAM,MAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAM,MAAA,KAAK,EAAE;AAAE2U,QAAAA,OAAO,EAAE,cAAX;AAA2BG,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACY;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADZ,CADA,CADJ,eAMI,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAE,KAAKlW,KAAL,CAAW4Q,OAAnC;AAA4C,MAAA,SAAS,EAAE,KAAKvQ,KAAL,CAAWJ,KAAX,CAAiBkG,eAAjB,IAAoC,uBAA3F;AACA,MAAA,SAAS,EAAE,KAAKyQ,eAAL,EADX;AACmC,MAAA,WAAW,EAAE,KAAK1Q,iBADrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,OADH,GAWK,EAZV,EAaS,KAAKlG,KAAL,CAAWqB,QAAX,gBACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACM,oBAAC,IAAD,CAAM,MAAN;AAAa,MAAA,KAAK,EAAE;AAAE4U,QAAAA,YAAY,EAAE;AAAhB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE,cAAX;AAA2BG,QAAAA,SAAS,EAAE;AAAtC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CADF,CADN,eAOI,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAE,KAAKlW,KAAL,CAAW4Q,OAAnC;AAA4C,MAAA,SAAS,EAAE,KAAKvQ,KAAL,CAAWJ,KAAX,CAAiBgF,aAAjB,IAAkC,aAAzF;AACI,MAAA,SAAS,EAAE,KAAKxC,aAAL,EADf;AACqC,MAAA,WAAW,EAAE,KAAKsC,eADvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADH,GAWK,EAxBd,CADJ,CADJ,CA9JJ,CADJ,CA1YJ,CADJ,CADJ,CADJ,CAFJ,CADJ,EAulBK,KAAK1E,KAAL,CAAWJ,KAAX,CAAiB8G,cAAjB,gBACG,oBAAC,aAAD;AACI,MAAA,WAAW,EAAE,KAAK1G,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,SAA/B,GAA2C,MAAM,KAAKyE,kBAAL,CAAwB,KAAK3G,KAAL,CAAWJ,KAAX,CAAiBuG,MAAzC,EAAiDiO,oBAAjD,CAAjD,GAA0H,KAAK7H,WADhJ;AAEI,MAAA,SAAS,EAAE,KAAKvM,KAAL,CAAWJ,KAAX,CAAiBsC,SAFhC;AAGI,MAAA,UAAU,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBoE,UAHjC;AAII,MAAA,UAAU,EAAE,KAAKyJ,WAJrB;AAKI,MAAA,IAAI,EAAE,KAAKzN,KAAL,CAAWJ,KAAX,CAAiB8G,cAL3B;AAMI,MAAA,UAAU,EAAE,KAAK1G,KAAL,CAAWJ,KAAX,CAAiBgC,UANjC;AAOI,MAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWJ,KAAX,CAAiBwJ,SAP5B;AAQI,MAAA,aAAa,EAAE,KAAK2E,aARxB;AASI,MAAA,YAAY,EAAE,KAAK/N,KAAL,CAAWJ,KAAX,CAAiB0P,YATnC;AAUI,MAAA,WAAW,EAAE,KAAKtP,KAAL,CAAWhE,WAV5B;AAWI,MAAA,cAAc,EAAE,KAAK2D,KAAL,CAAWmC,cAAX,IAA6B,EAXjD;AAYI,MAAA,eAAe,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,SAA/B,GAA2C,CAAC;AAAE,mBAAW,cAAb;AAA6B,qBAAa,uBAA1C;AAAmE,0BAAkB,WAArF;AAAkG,uBAAe;AAAjH,OAAD,CAA3C,GAA4K,EAZjM;AAaI,MAAA,cAAc,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,MAA/B,GAAwC,IAAxC,GAA+C,KAbnE,CAcI;AAdJ;AAeI,MAAA,MAAM,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,MAA/B,GAAwC,IAAxC,GAA+C,KAf3D;AAgBI,MAAA,YAAY,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBwJ,SAAjB,gBACV,oBAAC,KAAD;AACI,QAAA,SAAS,EAAE,KAAKpJ,KAAL,CAAWJ,KAAX,CAAiBsC,SADhC;AAEI,QAAA,eAAe,EAAE,KAAK2I,eAF1B;AAGI,QAAA,UAAU,EAAE,KAAK7K,KAAL,CAAWJ,KAAX,CAAiBgC,UAHjC;AAII,QAAA,cAAc,EAAE,KAAKjC,KAAL,CAAWmC,cAAX,IAA6B,EAJjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAQV,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,SAA/B,gBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,IAAI,EAAE,YADV;AAEI,QAAA,SAAS,EAAE,KAAKlC,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFf;AAGI,QAAA,WAAW,EAAE,KAAK5F,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAHjB;AAII,QAAA,KAAK,EAAE,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BkI,UAA5B,IAA0C,EAJrD;AAKI,QAAA,OAAO,EAAE,KAAK5K,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B8T,KAA5B,IAAqC,EALlD;AAMI,QAAA,QAAQ,EAAC,YANb;AAOI,QAAA,WAAW,EAAC,YAPhB;AAQI,QAAA,WAAW,EAAE,IARjB;AASI,QAAA,OAAO,EAAE,KATb;AAUI,QAAA,UAAU,EAAE,KAVhB;AAWI,QAAA,YAAY,EAAE,KAXlB;AAYI,QAAA,iBAAiB,EAAE,IAZvB;AAaI,QAAA,WAAW,EAAE,KAbjB;AAcI,QAAA,QAAQ,EAAGtV,KAAD,IAAW,KAAKyJ,aAAL,CAAmBzJ,KAAnB,EAA0B,YAA1B,CAdzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,eAiBI,oBAAC,YAAD;AACI,QAAA,IAAI,EAAC,uBADT;AAEI,QAAA,KAAK,EAAE,KAAKlB,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFX;AAGI,QAAA,WAAW,EAAE,KAAK5F,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAHjB;AAII,QAAA,KAAK,EAAE,KAAKjG,KAAL,CAAWmC,cAAX,GAA4B,KAAKnC,KAAL,CAAWmC,cAAX,CAA0B,uBAA1B,CAA5B,GAAiF,EAJ5F;AAKI,QAAA,IAAI,EAAC,GALT;AAMI,QAAA,WAAW,EAAE,IANjB;AAOI,QAAA,QAAQ,EAAE,KAPd;AAQI,QAAA,SAAS,EAAE,GARf;AASI,QAAA,QAAQ,EAAGZ,KAAD,IAAW,KAAK2J,eAAL,CAAqB3J,KAArB,CATzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBJ,CADJ,CADJ,GAgCI,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,SAA/B,gBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAC,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAaI,oBAAC,gBAAD;AACI,QAAA,IAAI,EAAC,aADT;AAEI,QAAA,KAAK,EAAE,KAAKlC,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFX;AAGI,QAAA,WAAW,EAAE,KAAK5F,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,IAAmD,IAAnD,GAA0D,KAAK5F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B4D,WAHvG;AAII,QAAA,IAAI,EAAC,MAJT;AAKI,QAAA,MAAM,EAAE,IALZ;AAMI,QAAA,SAAS,EAAC,cANd;AAOI,QAAA,KAAK,EAAE,KAAK3G,KAAL,CAAWmC,cAAX,GAA4B,KAAKnC,KAAL,CAAWmC,cAAX,CAA0BwE,WAAtD,GAAoE,EAP/E;AAQI,QAAA,SAAS,EAAE,CARf;AASI,QAAA,QAAQ,EAAGpF,KAAD,IAAW,KAAKqD,sBAAL,CAA4BrD,KAA5B,EAAmC,aAAnC,CATzB;AAUI,QAAA,WAAW,EAAC,GAVhB;AAWI,QAAA,QAAQ,EAAE,IAXd;AAYI,QAAA,OAAO,EAAE,IAZb,CAaA;AACA;AAdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbJ,CADJ,CADJ,GAiCI,KAAKlB,KAAL,CAAWJ,KAAX,CAAiBsC,SAAjB,KAA+B,MAA/B,gBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,QAAD;AACI,QAAA,eAAe,EAAE,gCADrB;AAEI,QAAA,IAAI,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+T,sBAA5B,IAAsD,EAFhE;AAGI,QAAA,UAAU,EAAE,KAAKzW,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+T,sBAA5B,IAAsD,EAHtE;AAII,QAAA,SAAS,EAAE;AAAEjW,UAAAA,IAAI,EAAE,CAAR;AAAWE,UAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+T,sBAA5B,GAAqD,KAAKzW,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+T,sBAA5B,CAAmD5R,MAAxG,GAAiH;AAAlI,SAJf,CAKI;AALJ;AAMI,QAAA,mBAAmB,EACf,CACI;AAAE,qBAAW,0BAAb;AAAyC,uBAAa,uBAAtD;AAA+E,mBAAS;AAAxF,SADJ,CAPR;AAWI,QAAA,QAAQ,EAAE,KAAK7E,KAAL,CAAWJ,KAAX,CAAiBoC,QAX/B;AAYI,QAAA,UAAU,EAAE,KAAKrC,KAAL,CAAWmD,UAZ3B;AAaI,QAAA,qBAAqB,EAAE,KAAKnD,KAAL,CAAW+D,qBAbtC;AAcI,QAAA,UAAU,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBgC,UAdjC;AAeI,QAAA,QAAQ,EAAE,KAfd;AAgBI,QAAA,gBAAgB,EAAE,IAhBtB;AAiBI,QAAA,gBAAgB,EAAE,KAjBtB;AAkBI,QAAA,iBAAiB,EAAE,KAlBvB;AAmBI,QAAA,UAAU,EAAE,YAnBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CADJ,GA0BM,EAnGN,CAoGI;AACA;AACA;AACA;AACA;AACA;AAzHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GA6HK,EAptBV,EAqtBK,KAAK5B,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgU,aAA5B,IAA6C,KAAK1W,KAAL,CAAWJ,KAAX,CAAiBoE,UAAjB,KAAgC,qBAA7E,gBACG,oBAAC,YAAD;AACI,MAAA,YAAY,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgU,aAD9C;AAEI,MAAA,cAAc,EAAE,KAFpB;AAGI,MAAA,OAAO,EAAE,KAAKjK,OAHlB;AAII,MAAA,qBAAqB,EAAE,KAAK4B,qBAJhC;AAKI,MAAA,WAAW,EAAE,KAAKZ,WALtB;AAMI,MAAA,qBAAqB,EAAE,KAAKc,qBANhC;AAOI,MAAA,UAAU,EAAE,KAAKvO,KAAL,CAAWJ,KAAX,CAAiBoE,UAPjC;AAQI,MAAA,WAAW,EAAE,KAAKhE,KAAL,CAAW2W,eAR5B;AASI,MAAA,KAAK,EAAE,KAAK3W,KAAL,CAAWJ,KATtB;AAUI,MAAA,UAAU,EAAE,KAAKI,KAAL,CAAWJ,KAAX,CAAiBiO,iBAVjC;AAWI,MAAA,cAAc,EAAE,KAAKlO,KAAL,CAAWmC,cAAX,IAA6B,EAXjD;AAYI,MAAA,oBAAoB,EAAE,KAAK0M,oBAZ/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAeK,EApuBV,CADJ;AAwuBH;;AAEDoI,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI;AAAEnT,MAAAA,qBAAF;AAAyBZ,MAAAA,UAAzB;AACA2M,MAAAA,iBADA;AACmBC,MAAAA,oBADnB;AACyCC,MAAAA,eADzC;AAC0DE,MAAAA,UAD1D;AAEAG,MAAAA,mBAFA;AAEqBC,MAAAA,sBAFrB;AAE6CC,MAAAA,iBAF7C;AAGAJ,MAAAA,cAHA;AAGgBC,MAAAA,wBAHhB;AAG0CI,MAAAA,aAH1C;AAIAjL,MAAAA,eAJA;AAIiBC,MAAAA,mBAJjB;AAKAC,MAAAA,iBALA;AAKmBC,MAAAA,aALnB;AAMAC,MAAAA,iBANA;AAMmBE,MAAAA,qBANnB;AAOAD,MAAAA,gBAPA;AAOkBnB,MAAAA,oBAPlB;AAQA2H,MAAAA,2BARA;AAQ6BC,MAAAA,sBAR7B;AASAlK,MAAAA,cATA;AASgB0O,MAAAA,cAThB;AASgCC,MAAAA,oBAThC;AAUAC,MAAAA,uBAVA;AAUyBC,MAAAA,gBAVzB;AAWAC,MAAAA,iBAXA;AAWmBC,MAAAA,eAXnB;AAWoCC,MAAAA,QAXpC;AAW8CtQ,MAAAA,IAX9C;AAWoDE,MAAAA,IAXpD;AAW0D6B,MAAAA,QAX1D;AAWoEC,MAAAA,QAXpE;AAW8EoS,MAAAA,cAX9E;AAYAI,MAAAA,oBAZA;AAYsBe,MAAAA,uBAZtB;AAY+CK,MAAAA,kBAZ/C;AAYmEC,MAAAA,eAZnE;AAaAC,MAAAA;AAbA,QAayB,KAAK3W,KAblC;AAcA,QAAImX,IAAI,GAAG,KAAX;;AACA,QAAI,KAAK9W,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B0L,SAA1B,KAAwCmJ,aAAa,CAACjX,KAAd,CAAoBoC,QAApB,CAA6B0L,SAAzE,EAAoF;AAChFhK,MAAAA,qBAAqB,GAAG,EAAxB;;AACA,UAAI,KAAK1D,KAAL,CAAWJ,KAAX,CAAiB8D,qBAArB,EAA4C;AACxC,aAAK1D,KAAL,CAAWJ,KAAX,CAAiB8D,qBAAjB,CAAuC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B0L,SAAjE,KAA+EN,MAAM,CAAC2J,MAAP,CAAc,KAAK/W,KAAL,CAAWJ,KAAX,CAAiB8D,qBAAjB,CAAuC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B0L,SAAjE,CAAd,EAA2FpK,GAA3F,CAA+FyB,IAAI,IAC9KrB,qBAAqB,CAAC6J,IAAtB,CAA2BxI,IAAI,CAAC9B,YAAhC,CAD2E,CAA/E;AAEH;;AACDH,MAAAA,UAAU,GAAGrF,aAAa,CAAC,KAAKuC,KAAL,CAAWJ,KAAX,CAAiB8D,qBAAlB,EAAyC,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBoC,QAAjB,CAA0B0L,SAAnE,CAA1B;AACAoJ,MAAAA,IAAI,GAAG,IAAP,CAPgF,CAQhF;AACH;;AACD,QAAI,KAAK9W,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,KAAgDwM,aAAa,CAACjX,KAAd,CAAoB8C,UAApB,CAA+B2H,eAAnF,EAAoG;AAChG,UAAI,KAAKrK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,IAA+C,KAAKrK,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B2H,eAA5B,CAA4C2M,cAA5C,KAA+D5Y,iBAAiB,CAAC6M,EAApI,EAAwI;AACpI,YAAI7J,SAAS,GAAG;AAAEZ,UAAAA,IAAI,EAAE,CAAR;AAAWE,UAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,GAA4BjD,QAAQ,CAAC,KAAKlM,KAAL,CAAWJ,KAAX,CAAiBuP,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE,CAAvF;AAA0FC,UAAAA,KAAK,EAAE,CAAC;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAAD;AAAjG,SAAhB;AACAnK,QAAAA,eAAe,GAAG9D,SAAlB;AACA+D,QAAAA,mBAAmB,GAAG/D,SAAtB;AACAgE,QAAAA,iBAAiB,GAAGhE,SAApB;AACAiE,QAAAA,aAAa,GAAGjE,SAAhB;AACAkE,QAAAA,iBAAiB,GAAGlE,SAApB;AACAoE,QAAAA,qBAAqB,GAAGpE,SAAxB;AACAmE,QAAAA,gBAAgB,GAAGnE,SAAnB;AACAgD,QAAAA,oBAAoB,GAAGhD,SAAvB,CAToI,CAUpI;AACA;AACA;AACA;AACA;AACA;;AACA0V,QAAAA,IAAI,GAAG,IAAP;AACH;AACJ;;AACD,QAAI,KAAK9W,KAAL,CAAWJ,KAAX,CAAiBkC,cAAjB,KAAoC+U,aAAa,CAACjX,KAAd,CAAoBkC,cAA5D,EAA4E;AAExEA,MAAAA,cAAc,GAAG,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBkC,cAAlC,CAFwE,CAGxE;;AACAgV,MAAAA,IAAI,GAAG,IAAP;AACH;;AACD,QAAI,KAAK9W,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,KAAgCmU,aAAa,CAACjX,KAAd,CAAoB8C,UAAxD,EAAoE;AAChE,YAAMuU,iBAAiB,GAAGrZ,mBAAmB,CAAC,KAAKoC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BwU,UAA5B,IAA0C,EAA3C,EAA+C,iBAA/C,EAAkE,iBAAlE,EAAqF,WAArF,EAAkG,iBAAlG,EAAqH,KAArH,CAA7C;AACA,YAAMC,uBAAuB,GAAGvZ,mBAAmB,CAAC,KAAKoC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BrE,gBAA5B,IAAgD,EAAjD,EAAqD,cAArD,EAAqE,cAArE,EAAqF,SAArF,EAAgG,WAAhG,EAA6G,cAA7G,EAA6H,KAA7H,CAAnD;AACA,YAAM+Y,0BAA0B,GAAGxZ,mBAAmB,CAAC,KAAKoC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BpE,mBAA5B,IAAmD,EAApD,EAAwD,iBAAxD,EAA2E,iBAA3E,EAA8F,SAA9F,EAAyG,WAAzG,EAAsH,iBAAtH,EAAyI,KAAzI,CAAtD;AACA,YAAM+Y,mBAAmB,GAAGzZ,mBAAmB,CAAC,KAAKoC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByE,YAA5B,IAA4C,EAA7C,EAAiD,oBAAjD,EAAuE,eAAvE,EAAwF2B,SAAxF,EAAmGA,SAAnG,EAA8G,IAA9G,CAA/C;AACA,YAAMwO,oBAAoB,GAAG1Z,mBAAmB,CAAC,KAAKoC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B6U,eAA5B,IAA+C,EAAhD,EAAoD,4BAApD,EAAkF,cAAlF,EAAkG,YAAlG,EAAgH,oBAAhH,EAAsI,KAAtI,CAAhD;AACA,YAAMC,kBAAkB,GAAG5Z,mBAAmB,CAAC,KAAKoC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgF,WAA5B,IAA2C,EAA5C,EAAgD,cAAhD,EAAgE,cAAhE,EAAgFoB,SAAhF,EAA2FA,SAA3F,EAAsG,IAAtG,CAA9C;AACA,YAAM2O,WAAW,GAAG7Z,mBAAmB,CAAC,KAAKoC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BgV,IAA5B,IAAoC,EAArC,EAAyC,WAAzC,EAAsD,cAAtD,EAAsE5O,SAAtE,EAAiFA,SAAjF,EAA4F,IAA5F,CAAvC;AACA0H,MAAAA,cAAc,GAAGyG,iBAAiB,CAACjU,GAAlB,CAAsB,YAAtB,CAAjB;AACAyN,MAAAA,oBAAoB,GAAG0G,uBAAuB,CAACnU,GAAxB,CAA4B,YAA5B,CAAvB;AACA0N,MAAAA,uBAAuB,GAAG0G,0BAA0B,CAACpU,GAA3B,CAA+B,YAA/B,CAA1B;AACA2N,MAAAA,gBAAgB,GAAG0G,mBAAmB,CAACrU,GAApB,CAAwB,YAAxB,CAAnB;AACA4N,MAAAA,iBAAiB,GAAG0G,oBAAoB,CAACtU,GAArB,CAAyB,YAAzB,CAApB;AACA6N,MAAAA,eAAe,GAAG2G,kBAAkB,CAACxU,GAAnB,CAAuB,YAAvB,CAAlB;AACA8N,MAAAA,QAAQ,GAAG2G,WAAW,CAACzU,GAAZ,CAAgB,YAAhB,CAAX;AACA8T,MAAAA,IAAI,GAAG,IAAP;AACAtW,MAAAA,IAAI,GAAG,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY,IAAjB,KAA0BsI,SAA1B,GAAsCtI,IAAtC,GAA6C,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY,IAArE;AACAE,MAAAA,IAAI,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,IAAjB,IAAyBA,IAAhC;AACA6B,MAAAA,QAAQ,GAAG,KAAKvC,KAAL,CAAWJ,KAAX,CAAiB2C,QAAjB,KAA8BuG,SAA9B,GAA0CvG,QAA1C,GAAqD,KAAKvC,KAAL,CAAWJ,KAAX,CAAiB2C,QAAjF;AACAC,MAAAA,QAAQ,GAAG,KAAKxC,KAAL,CAAWJ,KAAX,CAAiB4C,QAAjB,IAA6BA,QAAxC;AACA,UAAImV,kBAAkB,GAAG;AAAEvR,QAAAA,kBAAkB,EAAEhI,iBAAiB,CAACwZ,OAAxC;AAAiDzL,QAAAA,aAAa,EAAE,KAAKnM,KAAL,CAAW0F,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAAhE;AAAsHiS,QAAAA,aAAa,EAAE;AAArI,OAAzB,CApBgE,CAsBhE;AACA;AACA;AAEA;AACA;AACA;;AAEA,YAAMC,eAAe,GAAG,KAAK9X,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByE,YAA5B,IAA4C,EAApE;AAEA,YAAM4Q,kBAAkB,GAAGvN,IAAI,CAACwN,KAAL,CAAWxN,IAAI,CAACC,SAAL,CAAeqN,eAAf,CAAX,CAA3B;AAEA,YAAMG,KAAK,GAAGF,kBAAkB,CAACG,SAAnB,CAA6BnT,IAAI,IAAIA,IAAI,CAACqB,kBAAL,KAA4BhI,iBAAiB,CAACwZ,OAAnF,CAAd;;AACA,UAAIG,kBAAkB,CAAClT,MAAnB,GAA4B,CAA5B,IAAiCoT,KAAK,KAAK,CAAC,CAAhD,EAAmD;AAC/CF,QAAAA,kBAAkB,CAACxK,IAAnB,CAAwBoK,kBAAxB;AACH;;AACD/C,MAAAA,cAAc,GAAGmD,kBAAjB;;AACA,UAAI,KAAK/X,KAAL,CAAWJ,KAAX,CAAiBsF,eAAjB,IAAoC,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBsF,eAAjB,KAAqC2R,aAAa,CAACjX,KAAd,CAAoBsF,eAAjG,EAAkH;AAC9GA,QAAAA,eAAe,GAAG,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBsF,eAAnC;AACH;;AACD,UAAI,KAAKlF,KAAL,CAAWJ,KAAX,CAAiBuF,mBAAjB,IAAwC,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBuF,mBAAjB,KAAyC0R,aAAa,CAACjX,KAAd,CAAoBuF,mBAAzG,EAA8H;AAC1HA,QAAAA,mBAAmB,GAAG,KAAKnF,KAAL,CAAWJ,KAAX,CAAiBuF,mBAAvC;AACH;;AACD,UAAI,KAAKnF,KAAL,CAAWJ,KAAX,CAAiByF,aAAjB,IAAkC,KAAKrF,KAAL,CAAWJ,KAAX,CAAiByF,aAAjB,KAAmCwR,aAAa,CAACjX,KAAd,CAAoByF,aAA7F,EAA4G;AACxGA,QAAAA,aAAa,GAAG,KAAKrF,KAAL,CAAWJ,KAAX,CAAiByF,aAAjC;AACH;;AACD,UAAI,KAAKrF,KAAL,CAAWJ,KAAX,CAAiB4F,qBAAjB,IAA0C,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB4F,qBAAjB,KAA2CqR,aAAa,CAACjX,KAAd,CAAoB4F,qBAA7G,EAAoI;AAChIA,QAAAA,qBAAqB,GAAG,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB4F,qBAAzC;AACH;;AACD,UAAI,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB2F,gBAAjB,IAAqC,KAAKvF,KAAL,CAAWJ,KAAX,CAAiB2F,gBAAjB,KAAsCsR,aAAa,CAACjX,KAAd,CAAoB2F,gBAAnG,EAAqH;AACjHA,QAAAA,gBAAgB,GAAG,KAAKvF,KAAL,CAAWJ,KAAX,CAAiB2F,gBAApC;AACH;;AACD,UAAI,KAAKvF,KAAL,CAAWJ,KAAX,CAAiBwE,oBAAjB,IAAyC,KAAKpE,KAAL,CAAWJ,KAAX,CAAiBwE,oBAAjB,KAA0CyS,aAAa,CAACjX,KAAd,CAAoBwE,oBAA3G,EAAiI;AAC7HA,QAAAA,oBAAoB,GAAG,KAAKpE,KAAL,CAAWJ,KAAX,CAAiBwE,oBAAxC;AACH;;AACD,UAAI,KAAKpE,KAAL,CAAWJ,KAAX,CAAiBmM,2BAAjB,IAAgD,KAAK/L,KAAL,CAAWJ,KAAX,CAAiBmM,2BAAjB,KAAiD8K,aAAa,CAACjX,KAAd,CAAoBmM,2BAAzH,EAAsJ;AAClJA,QAAAA,2BAA2B,GAAG,KAAK/L,KAAL,CAAWJ,KAAX,CAAiBmM,2BAA/C;AACH;;AACD,UAAI,KAAK/L,KAAL,CAAWJ,KAAX,CAAiBoM,sBAAjB,IAA2C,KAAKhM,KAAL,CAAWJ,KAAX,CAAiBoM,sBAAjB,KAA4C6K,aAAa,CAACjX,KAAd,CAAoBoM,sBAA/G,EAAuI;AACnIA,QAAAA,sBAAsB,GAAG,KAAKhM,KAAL,CAAWJ,KAAX,CAAiBoM,sBAA1C;AACH;AACJ;;AAED,QAAI,KAAKhM,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByV,aAA5B,IAA6C,KAAKnY,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByV,aAA5B,KAA8CtB,aAAa,CAACjX,KAAd,CAAoB8C,UAApB,CAA+ByV,aAA9H,EAA6I;AACzI,YAAMC,aAAa,GAAG5N,IAAI,CAACwN,KAAL,CAAW,KAAKhY,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4ByV,aAA5B,CAA0CE,QAA1C,CAAmD7T,KAA9D,CAAtB;AACAwQ,MAAAA,oBAAoB,GAAGoD,aAAa,CAACE,cAAd,GAA+BF,aAAa,CAACE,cAA7C,GAA8D,EAArF;AACAvC,MAAAA,uBAAuB,GAAGqC,aAAa,CAACG,iBAAd,GAAkCH,aAAa,CAACG,iBAAhD,GAAoE,EAA9F;AACAnC,MAAAA,kBAAkB,GAAGgC,aAAa,CAACI,YAAd,GAA6BJ,aAAa,CAACI,YAA3C,GAA0D,EAA/E;AAEAnC,MAAAA,eAAe,GAAG+B,aAAa,CAACK,cAAd,GAA+BL,aAAa,CAACK,cAA7C,GAA8D,EAAhF;AACAnC,MAAAA,oBAAoB,GAAG8B,aAAa,CAACM,mBAAd,GAAoCN,aAAa,CAACM,mBAAlD,GAAwE,EAA/F;AAEA7I,MAAAA,UAAU,GAAGuI,aAAa,CAACO,mBAAd,GAAoCP,aAAa,CAACO,mBAAlD,GAAwE,EAArF;AACAxI,MAAAA,aAAa,GAAGiI,aAAa,CAACQ,iBAAd,GAAkCR,aAAa,CAACQ,iBAAhD,GAAoE,EAApF;AACAjJ,MAAAA,eAAe,GAAGyI,aAAa,CAACI,YAAd,GAA6BJ,aAAa,CAACI,YAA3C,GAA0D,EAA5E;AACA1B,MAAAA,IAAI,GAAG,IAAP,CAZyI,CAazI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,UAAIjQ,GAAG,GAAG/I,wBAAwB,CAAC,KAAKkC,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B+F,QAA7B,EAAuC,KAAKzI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BiG,MAAnE,EAA2E,KAAK3I,KAAL,CAAWJ,KAAX,CAAiBoC,QAA5F,CAAlC;AACAF,MAAAA,cAAc,CAAC,UAAD,CAAd,GAA6B+E,GAAG,CAAC4B,QAAjC;AACA3G,MAAAA,cAAc,CAAC,QAAD,CAAd,GAA2B+E,GAAG,CAAC8B,MAA/B,CA1ByI,CA2BzI;AACA;AACA;AACA;AACA;;AACAmO,MAAAA,IAAI,GAAG,IAAP;AACH;;AACD,QAAIA,IAAJ,EAAU;AACNA,MAAAA,IAAI,GAAG,KAAP;AACA,WAAK3W,QAAL,CAAc;AACVuD,QAAAA,qBADU;AACaZ,QAAAA,UADb;AAEV2M,QAAAA,iBAFU;AAESC,QAAAA,oBAFT;AAE+BC,QAAAA,eAF/B;AAEgDE,QAAAA,UAFhD;AAGVG,QAAAA,mBAHU;AAGWC,QAAAA,sBAHX;AAGmCC,QAAAA,iBAHnC;AAIVJ,QAAAA,cAJU;AAIMC,QAAAA,wBAJN;AAIgCI,QAAAA,aAJhC;AAKVjL,QAAAA,eALU;AAKOC,QAAAA,mBALP;AAMVC,QAAAA,iBANU;AAMSC,QAAAA,aANT;AAOVC,QAAAA,iBAPU;AAOSE,QAAAA,qBAPT;AAQVD,QAAAA,gBARU;AAQQnB,QAAAA,oBARR;AASV2H,QAAAA,2BATU;AASmBC,QAAAA,sBATnB;AAUVlK,QAAAA,cAVU;AAUM0O,QAAAA,cAVN;AAUsBC,QAAAA,oBAVtB;AAWVC,QAAAA,uBAXU;AAWeC,QAAAA,gBAXf;AAYVC,QAAAA,iBAZU;AAYSC,QAAAA,eAZT;AAY0BC,QAAAA,QAZ1B;AAaVtQ,QAAAA,IAbU;AAaJE,QAAAA,IAbI;AAaE6B,QAAAA,QAbF;AAaYC,QAAAA,QAbZ;AAasBoS,QAAAA,cAbtB;AAcVI,QAAAA,oBAdU;AAcYe,QAAAA,uBAdZ;AAeVK,QAAAA,kBAfU;AAeUC,QAAAA,eAfV;AAgBVC,QAAAA;AAhBU,OAAd;AAkBH;AACJ,GA30CgC,CA60CjC;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEAC,EAAAA,eAAe,GAAG;AACd,UAAMsC,MAAM,GAAG,IAAIvW,GAAJ,EAAf;AACA,QAAI0C,SAAS,GAAG,KAAKhF,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,GAA+C,KAAK/F,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAA5B,CAA6CzC,GAA7C,CAAiD+D,MAAM,IAAIA,MAAM,CAACrC,SAAlE,EAA6ExB,IAA7E,CAAkF,GAAlF,CAA/C,GAAwI,IAAxJ;AACAqV,IAAAA,MAAM,CAACpV,GAAP,CAAW,uBAAX,eACI,oBAAC,WAAD;AACI,MAAA,UAAU,EAAC,uBADf;AAEI,MAAA,cAAc,EAAE,KAAKzD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAFhD;AAGI,MAAA,UAAU,EAAE,KAAKpG,KAAL,CAAWmD,UAH3B;AAII,MAAA,qBAAqB,EAAE,KAAKnD,KAAL,CAAW+D,qBAJtC;AAKI,MAAA,WAAW,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BoW,sBAA5B,IAAsD,EALvE;AAMI,MAAA,YAAY,EAAE,KAAK9Y,KAAL,CAAW7C,gBAN7B;AAOI,MAAA,WAAW,EAAE,KAAKyG,qBAPtB;AAQI,MAAA,UAAU,EAAE,KAAK5D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAR5C;AASI,MAAA,iBAAiB,EAAE,kCATvB;AAUI,MAAA,WAAW,EAAE,KAAK/F,KAAL,CAAW/C,kBAV5B;AAWI,MAAA,OAAO,EAAE,qBAXb;AAYI,MAAA,QAAQ,EAAE,sBAZd;AAaI,MAAA,UAAU,EAAE,wBAbhB;AAcI,MAAA,QAAQ,EAAE,sBAdd;AAeI,MAAA,SAAS,EAAE,kBAff;AAgBI,MAAA,QAAQ,EAAE,KAAK+C,KAAL,CAAWJ,KAAX,CAAiBoC,QAhB/B;AAiBI,MAAA,WAAW,EACP;AACIG,QAAAA,SAAS,EAAE,kBADf;AAEI6C,QAAAA,SAFJ;AAGIhD,QAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAH/B;AAIIU,QAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJjC;AAKIqB,QAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB8D,qBALlC;AAMIM,QAAAA,UAAU,EAAE,KAAKhE,KAAL,CAAWJ,KAAX,CAAiBoE;AANjC,OAlBR;AA4BI,MAAA,SAAS,EAAE;AACP7B,QAAAA,SAAS,EAAE,kBADJ;AAEP6C,QAAAA,SAFO;AAGPhD,QAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAHpB;AAIPU,QAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJtB;AAKPqB,QAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB8D,qBALvB;AAMPO,QAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD;AANjC,OA5Bf;AAqCI,MAAA,gBAAgB,EAAC,aArCrB;AAsCI,MAAA,WAAW,EAAC,OAtChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AA0CI8S,IAAAA,MAAM,CAACpV,GAAP,CAAW,oBAAX,eAAiC,oBAAC,QAAD;AAC7B,MAAA,UAAU,EAAC,oBADkB;AAE7B,MAAA,cAAc,EAAE,KAAKzD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBAFf;AAG7B,MAAA,WAAW,EAAE,KAAK7B,mBAHW;AAI7B,MAAA,UAAU,EAAE,KAAKvE,KAAL,CAAWmD,UAJM;AAK7B,MAAA,qBAAqB,EAAE,KAAKnD,KAAL,CAAW+D,qBALL;AAM7B,MAAA,QAAQ,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqW,mBAA5B,IAAmD,EANhC;AAO7B,MAAA,WAAW,EAAE,KAAK/Y,KAAL,CAAW5C,gBAPK;AAQ7B,MAAA,UAAU,EAAE,KAAK4C,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4BqD,gBARX;AAS7B,MAAA,iBAAiB,EAAE,6BATU;AAU7B,MAAA,OAAO,EAAE,kBAVoB;AAW7B,MAAA,QAAQ,EAAE,mBAXmB;AAY7B,MAAA,UAAU,EAAE,qBAZiB;AAa7B,MAAA,SAAS,EAAE,eAbkB;AAc7B,MAAA,aAAa,EAAE,KAdc;AAe7B,MAAA,eAAe,EAAE,iBAfY;AAgB7B,MAAA,SAAS,EAAE,KAAKpG,KAAL,CAAWyE,oBAhBO;AAiB7B,MAAA,eAAe,EAAE,KAAKC,mBAjBO;AAkB7B,MAAA,WAAW,EACP;AACIlC,QAAAA,SAAS,EAAE,eADf;AAEI6C,QAAAA,SAFJ;AAGIhD,QAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAH/B;AAIIU,QAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJjC;AAKIqB,QAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB8D,qBALlC;AAMIM,QAAAA,UAAU,EAAE;AANhB,OAnByB;AA6B7B,MAAA,SAAS,EAAE;AACP7B,QAAAA,SAAS,EAAE,eADJ;AAEP6C,QAAAA,SAFO;AAGPhD,QAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC,QAHpB;AAIPU,QAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C,UAJtB;AAKPqB,QAAAA,WAAW,EAAE,KAAK/D,KAAL,CAAWJ,KAAX,CAAiB8D,qBALvB;AAMPM,QAAAA,UAAU,EAAE,oBANL;AAOP9B,QAAAA,SAAS,EAAE,QAPJ;AAQP+B,QAAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B8G,SARjC;AASPlF,QAAAA,YAAY,EAAE,KAAK3E,KAAL,CAAWmD,UAAX,CAAsBC,GAAtB,CAA0B,mBAA1B,KAAkD,KAAKpD,KAAL,CAAWmD,UAAX,CAAsBE,GAAtB,CAA0B,mBAA1B,EAA+CC;AATxG,OA7BkB;AAyC7B,MAAA,gBAAgB,EAAC,aAzCY;AA0C7B,MAAA,WAAW,EAAC,OA1CiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjC,EA7CU,CA4Fd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAI,KAAKjD,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,IAAmD,KAAKpI,KAAL,CAAWJ,KAAX,CAAiB8C,UAAjB,CAA4B0F,mBAA5B,CAAgDD,eAAhD,KAAoE7J,mBAAmB,CAAC2T,OAA/I,EAAwJ,CACpJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AACD,WAAO4G,MAAP;AACH;;AAoPDG,EAAAA,cAAc,GAAG;AACb,SAAK7Y,QAAL,CAAc;AAAEY,MAAAA,UAAU,EAAE,IAAd;AAAoBC,MAAAA,QAAQ,EAAE;AAA9B,KAAd;AACH;;AACDiY,EAAAA,YAAY,GAAG;AACX,SAAK9Y,QAAL,CAAc;AAAEa,MAAAA,QAAQ,EAAE,IAAZ;AAAkBD,MAAAA,UAAU,EAAE;AAA9B,KAAd;AACH;;AA6sBD;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA+R,EAAAA,gBAAgB,GAAG;AACf,QAAIoG,GAAG,GAAG,+BAAV;;AACA,YAAQ,KAAKlZ,KAAL,CAAWJ,KAAX,CAAiBgF,aAAzB;AACI,WAAK,aAAL;AACIsU,QAAAA,GAAG,GAAG,+BAAN;AACA;;AACJ,WAAK,gBAAL;AACIA,QAAAA,GAAG,GAAG,6CAAN;AACA;;AACJ,WAAK,cAAL;AACIA,QAAAA,GAAG,GAAG,2CAAN;AACA;;AACJ,WAAK,UAAL;AACIA,QAAAA,GAAG,GAAG,uCAAN;AACA;;AACJ,WAAK,qBAAL;AACIA,QAAAA,GAAG,GAAG,8BAAN;AACA;;AACJ,WAAK,kBAAL;AACIA,QAAAA,GAAG,GAAG,yBAAN;AACA;;AACJ,WAAK,yBAAL;AACIA,QAAAA,GAAG,GAAG,yCAAN;AACA;;AACJ,WAAK,yBAAL;AACIA,QAAAA,GAAG,GAAG,6BAAN;AACA;;AAEJ;AACIA,QAAAA,GAAG,GAAG,+BAAN;AACA;AA5BR;;AA8BA,WAAOA,GAAP;AACH;;AA79EgC;;AA6oFrC,eAAeve,OAAO,CAAC+E,eAAD,EAAkB;AACpC9D,EAAAA,uBADoC;AACXC,EAAAA,kBADW;AACSC,EAAAA,uBADT;AACkCC,EAAAA,aADlC;AACiDC,EAAAA,WADjD;AAC8DkB,EAAAA,cAD9D;AAC8EJ,EAAAA,eAD9E;AAEpCb,EAAAA,cAFoC;AAEpBC,EAAAA,UAFoB;AAERC,EAAAA,aAFQ;AAEOC,EAAAA,aAFP;AAEqBC,EAAAA,UAFrB;AAEiCC,EAAAA,eAFjC;AAEkDC,EAAAA,cAFlD;AAGpCC,EAAAA,uBAHoC;AAGXC,EAAAA,UAHW;AAGCC,EAAAA,wBAHD;AAG2BC,EAAAA,mBAH3B;AAGgDC,EAAAA,aAHhD;AAG+DC,EAAAA,qBAH/D;AAIpCG,EAAAA,yBAJoC;AAITC,EAAAA,kBAJS;AAIWE,EAAAA,gBAJX;AAI6BC,EAAAA,gBAJ7B;AAI+CC,EAAAA,mBAJ/C;AAKpCN,EAAAA,iBALoC;AAKjBO,EAAAA,yBALiB;AAKSC,EAAAA;AALT,CAAlB,CAAP,CAMZ3C,UAAU,CAACiF,MAAD,CANE,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { faBolt, faCheck, faEye,  faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Button, Card, Col, Nav, Row, } from 'react-bootstrap';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../testmanagement/testmaster-styled';\r\n//import SplitPane from \"react-splitter-layout\";\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    getMyJobsubSampleDetail, getMyJobTestDetail, getMJTestChildTabDetail, performAction, updateStore, updateDecision,\r\n    getRegType, getRegSubType,getTestStatus,getSection,  getMyJobsSample, getStatusCombo, validateEsignCredential,\r\n    crudMaster, validateEsignforApproval, getAppConfigVersion, getAcceptTest, filterTransactionList, checkListRecord, generateCOAReport,\r\n    getMJSampleChildTabDetail, getAttachmentCombo, viewAttachment, deleteAttachment, getCommentsCombo, previewSampleReport,\r\n    getEnforceCommentsHistory,reportGenerate\r\n} from '../../actions'\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\n//import ApprovalResultsTab from './ApprovalResultsTab';\r\nimport { getControlMap,  showEsign, sortData, constructOptionList, getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\r\nimport { toast } from 'react-toastify';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport MyJobsFilter from './MyJobsFilter'\r\nimport { designProperties, transactionStatus, RegistrationType, RegistrationSubType } from '../../components/Enumeration';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport MyJobsSampleInfoGrid from './MyJobsSampleInfoGrid';\r\nimport MyJobsSampleInfoView from './MyJobsSampleInfoView';\r\n//import ApprovalInstrumentTab from './ApprovalInstrumentTab'\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport Esign from '../audittrail/Esign';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\n//mport EditApprovalParameter from './EditApprovalParameter';\r\n//import ApprovalHistoryTab from './ApprovalHistoryTab';\r\n//import SampleApprovalHistory from './SampleApprovalHistory';\r\n//import ResultChangeHistoryTab from './ResultChangeHistoryTab';\r\n//import ApprovalTask from './ApprovalTask';\r\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\n//import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport CustomPopOver from '../../components/customPopover';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\n//import ApprovalPrintHistoryTab from './ApprovalPrintHistoryTab';\r\n//import ApprovalHistoryTab from './ApprovalHistoryTab';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n//import ReportHistoryTab from './ReportHistoryTab';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass MyJobs extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.formRef = React.createRef();\r\n        this.state = {\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            resultDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            instrumentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\r\n            materialDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            taskDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n           // testCommentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'ssamplearno' }] },\r\n            testCommentDataState: { },\r\n\r\n            documentDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            resultChangeDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            sampleHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            reportHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            historyDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            samplePrintHistoryDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            oldComboData: {},\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: undefined,\r\n            showSample: false,\r\n            showTest: true,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            firstPane: 0,\r\n            paneHeight: 0,\r\n            secondPaneHeight: 0,\r\n            tabPane: 0,\r\n            SampletypeList: [],\r\n            RegistrationTypeList: [],\r\n            RegistrationSubTypeList: [],\r\n            FilterStatusList: [],\r\n            ConfigVersionList: [],\r\n            UserSectionList: [],\r\n            TestList: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n            splitChangeWidthPercentage: 22,\r\n            subSampleSkip: 0,\r\n            subSampleTake :5,\r\n        }\r\n        //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\") {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.multilingualMsg !== undefined && props.Login.multilingualMsg !== \"\") {\r\n            toast.warn(props.intl.formatMessage({ id: props.Login.multilingualMsg }));\r\n            props.Login.multilingualMsg = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n\r\n        return null;\r\n    }\r\n    // onSecondaryPaneSizeChange = (e, val) => {\r\n    //     this.setState({\r\n    //         firstPane: e - val,\r\n    //         tabPane: e - 80,\r\n    //         childPane: this.state.parentHeight - e - 80\r\n    //     })\r\n    // }\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({ subSampleSkip: e.skip,subSampleTake: e.take });\r\n\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    \r\n    showAPSampleinfo = () => {\r\n\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showAPTestList() {\r\n      \r\n        this.setState({ showTest: true, showSample: false })\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n    verticalPaneSizeChange = (val) => {\r\n        console.log(\"val\", val)\r\n        this.setState({\r\n            initialVerticalWidth: val - 150\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo)\r\n        // let obj = this.covertDatetoString(this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date(), this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date())\r\n        let sampleSearchField = [\"sarno\", \"dregdate\", \"sdecisionstatus\", \"ssampletypestatus\", \"smanuflotno\", \"smanufname\", \"smanufsitename\", \"sproductcatname\", \"sproductname\", \"sspecname\"];\r\n        if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n            sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"sregsubtypename\", \"sregtypename\", \"sspecname\", \"smanufname\", \"sstorageconditionname\",\r\n                \"sclientname\", \"scontainertype\", \"sdeadline\", \"sdecisionstatus\", \"sdeviationcomments\", \"sdispositionname\", \"slotno\", \"sbatchno\", \"sourfile\", \"speriodname\",\r\n                \"spriorityname\", \"sreceiveddate\", \"sremarks\", \"sreportremarks\", \"ssamplecondition\", \"ssuppliername\", \"stotalqty\", \"stransdisplaystatus\"\r\n            ]\r\n        }\r\n        const filterSampleParam = {\r\n            inputListName: \"MJ_SAMPLE\",\r\n            selectedObject: \"MJSelectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"myjobs/getMyJobsSubSampleDetails\",\r\n            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTests\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                nsampletypecode: (this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode) || -1,\r\n                nregtypecode: (this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\r\n                nregsubtypecode: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\r\n                nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n                ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined ? String(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) : \"-1\",\r\n                napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n                napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : null,\r\n                nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\r\n                ntestcode: this.props.Login.masterData.TestValue && this.props.Login.masterData.TestValue.ntestcode,\r\n                dfrom: obj.fromDate,\r\n                dto: obj.toDate,\r\n                userinfo: this.props.Login.userInfo,\r\n                checkBoxOperation:3,\r\n                ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"dregdate\", \"sdecisionstatus\", \"ssampletypestatus\", \"smanuflotno\", \"smanufname\", \"smanufsitename\", \"sproductcatname\", \"sproductname\", \"sspecname\"],\r\n            searchFieldList: sampleSearchField,\r\n            changeList: [\"MJ_SUBSAMPLE\", \"MJ_TEST\", \"ApprovalParameter\",\r\n                \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"SampleApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"MJSelectedSample\", \"MJSelectedSubSample\", \"MJSelectedTest\", \"PrintHistory\", \"COAHistory\"]\r\n        };\r\n        const filterSubSampleParam = {\r\n            inputListName: \"MJ_SUBSAMPLE\",\r\n            selectedObject: \"MJSelectedSubSample\",\r\n            primaryKeyField: \"ntransactionsamplecode\",\r\n            fetchUrl: \"approval/getApprovalTest\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTests\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                npreregno: this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\",\r\n                nsampletypecode: (this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode) || -1,\r\n                nregtypecode: (this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode) || -1,\r\n                nregsubtypecode: (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode) || -1,\r\n                nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n                ntransactionstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus !== undefined ? String(this.props.Login.masterData.FilterStatusValue.ntransactionstatus) : \"-1\",\r\n                napprovalconfigcode: this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n                napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue && this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode ? this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode : null,\r\n                nsectioncode: this.props.Login.masterData.UserSectionValue ? this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.UserSectionValue.nsectioncode) : null,\r\n                dfrom: obj.fromDate,\r\n                dto: obj.toDate,\r\n                userinfo: this.props.Login.userInfo,\r\n                checkBoxOperation:3,\r\n                ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"ssamplearno\"],\r\n            changeList: [\"MJ_TEST\", \"ApprovalParameter\",\r\n                \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"MJSelectedSubSample\", \"MJSelectedTest\"]\r\n        };\r\n\r\n        const filterTestParam = {\r\n            inputListName: \"MJ_TEST\",\r\n            selectedObject: \"MJSelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                checkBoxOperation:3,\r\n                ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n            },\r\n            isSingleSelect: false,\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sarno\", \"ssamplearno\", \"stestsynonym\", \"dtransactiondate\", \"smethodname\", \"ssectionname\", \"ssourcename\", \"stransdisplaystatus\", \"sinstrumentcatname\", \"stestname\"],\r\n            changeList: [\"ApprovalParameter\",\r\n                \"ApprovalResultChangeHistory\", \"ApprovalHistory\", \"SampleApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"MJSelectedTest\"]\r\n        };\r\n        \r\n        let AP_SampleList = this.props.Login.masterData.MJ_SAMPLE ? sortData(this.props.Login.masterData.MJ_SAMPLE, 'descending', 'npreregno') : [];\r\n        let AP_SubSampleList = this.props.Login.masterData.MJ_SUBSAMPLE ? this.props.Login.masterData.MJ_SUBSAMPLE : [];\r\n        let AP_TestList = this.props.Login.masterData.MJ_TEST ? this.props.Login.masterData.MJ_TEST : [];\r\n        let decisionStatus = this.props.Login.masterData.decisionStatus ? sortData(this.props.Login.masterData.decisionStatus, 'ascending', 'ntransactionstatus') : [];\r\n       // let actionStatus = this.props.Login.masterData.actionStatus ? sortData(this.props.Login.masterData.actionStatus, 'descending', 'ntransactionstatus') : [];\r\n        let subSampleGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\r\n            ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\r\n            napprovalversioncode : this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\r\n            nneedsubsample:this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            screenName: this.props.Login.screenName,\r\n            searchSubSampleRef: this.searchSubSampleRef,\r\n            searchTestRef: this.searchTestRef,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            subSampleSkip: this.state.subSampleSkip,\r\n            subSampleTake: this.state.subSampleTake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n            sampleHistoryDataState: this.state.sampleHistoryDataState,\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n        };\r\n        let testGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus : this.props.Login.masterData.FilterStatusValue ? this.props.Login.masterData.FilterStatusValue.ntransactionstatus : -1),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            npreregno: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            napprovalversioncode : this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode : -1,\r\n            nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\r\n            ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\r\n            dfrom: obj.fromDate,\r\n            dto: obj.toDate,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\r\n            screenName: this.props.Login.screenName,\r\n            searchTestRef: this.searchTestRef,\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n        };\r\n        let testChildGetParam = {\r\n            masterData: this.props.Login.masterData,\r\n            ntransactionstatus: String(this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus),\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            npreregno: this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.MJSelectedSubSample && this.props.Login.masterData.MJSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_RESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEINFO\",\r\n            screenName: this.props.Login.screenName,\r\n            postParamList: this.postParamList,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1\r\n\r\n        };\r\n        let breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            {\r\n                \"label\": \"IDS_SAMPLETYPE\",\r\n                \"value\": this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.ssampletypename || \"NA\" :\r\n                    this.props.Login.masterData.SampleTypeValue ? this.props.Login.masterData.SampleTypeValue.ssampletypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                    this.props.Login.masterData.RegTypeValue ? this.props.Login.masterData.RegTypeValue.sregtypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename || \"NA\" :\r\n                    this.props.Login.masterData.RegSubTypeValue ?\r\n                        this.props.Login.masterData.RegSubTypeValue.sregsubtypename : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_CONFIGVERSION\",\r\n                \"value\": this.props.Login.masterData.realApprovalVersionValue ?\r\n                    this.props.Login.masterData.realApprovalVersionValue.sversionname || \"NA\" :\r\n                    this.props.Login.masterData.ApprovalVersionValue ? this.props.Login.masterData.ApprovalVersionValue.sversionname || \"NA\" : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_SECTION\",\r\n                \"value\": this.props.Login.masterData.realUserSectionValue ?\r\n                    this.props.Login.masterData.realUserSectionValue.ssectionname || \"NA\" :\r\n                    this.props.Login.masterData.UserSectionValue ?\r\n                        this.props.Login.masterData.UserSectionValue.ssectionname || \"NA\" : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_Test\",\r\n                \"value\": this.props.Login.masterData.realTestValue ?\r\n                    this.props.Login.masterData.realTestValue.stestsynonym || \"NA\" :\r\n                    this.props.Login.masterData.TestValue ?\r\n                        this.props.Login.masterData.TestValue.stestsynonym || \"NA\" : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_FILTERSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ?\r\n                    this.props.Login.masterData.realFilterStatusValue.sfilterstatus || \"NA\" :\r\n                    this.props.Login.masterData.FilterStatusValue ?\r\n                        this.props.Login.masterData.FilterStatusValue.sfilterstatus || \"NA\" : \"NA\"\r\n            }\r\n        ];\r\n        \r\n        const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\r\n        const editParamId = this.state.controlMap.has(\"Accept\") && this.state.controlMap.get(\"Accept\").ncontrolcode;\r\n        const TestDecisionActionId = this.state.controlMap.has(\"TestDecisionAction\") && this.state.controlMap.get(\"TestDecisionAction\").ncontrolcode;\r\n        const TestApprovalActionId = this.state.controlMap.has(\"TestApprovalAction\") && this.state.controlMap.get(\"TestApprovalAction\").ncontrolcode;\r\n        const reportGenerateId = this.state.controlMap.has(\"GenerateCOA\") && this.state.controlMap.get(\"GenerateCOA\").ncontrolcode;\r\n        const coaReportId = this.state.controlMap.has(\"COAReport\") && this.state.controlMap.get(\"COAReport\").ncontrolcode;\r\n\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"myjobs/getMyJobsSubSampleDetails\",\r\n                fecthInputObject: subSampleGetParam,\r\n                selectedObject: \"MJSelectedSample\",\r\n                inputListName: \"MJ_SAMPLE\",\r\n                updatedListname: \"updatedSample\",\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTests\" }],\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\",\r\n                    \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\"]\r\n            }, {\r\n                filteredListName: \"searchedSubSample\",\r\n                updatedListname: \"updatedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"myjobs/getApprovalTest\",\r\n                fecthInputObject: testGetParam,\r\n                selectedObject: \"MJSelectedSubSample\",\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTests\" }],\r\n                inputListName: \"MJ_SUBSAMPLE\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\",\r\n                    \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\"]\r\n            }, {\r\n                filteredListName: \"searchedTests\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                fecthInputObject: testChildGetParam,\r\n                selectedObject: \"MJSelectedTest\",\r\n                inputListName: \"MJ_TEST\",\r\n                updatedListname: \"updatedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\",\r\n                    \"SampletypeList\", \"RegistrationTypeList\", \"RegistrationSubTypeList\", \"FilterStatusList\", \"UserSectionList\", \"TestList\"]\r\n            }]\r\n\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                    <Row noGutters={\"true\"}>\r\n                        <Col md={12} className='parent-port-height sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper>\r\n                                <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} secondaryInitialSize={this.state.splitChangeWidthPercentage} onSecondaryPaneSizeChange={this.paneSizeChange} primaryMinSize={40} secondaryMinSize={20}>\r\n                                    <TransactionListMasterJson\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        needMultiSelect={true}\r\n                                        masterList={this.props.Login.masterData.searchedSample || AP_SampleList}\r\n                                        selectedMaster={this.props.Login.masterData.MJSelectedSample}\r\n                                        primaryKeyField=\"npreregno\"\r\n                                        getMasterDetail={this.props.getMyJobsubSampleDetail}\r\n                                        inputParam={subSampleGetParam}\r\n                                        additionalParam={['napprovalversioncode']}\r\n                                        mainField={'sarno'}\r\n                                        selectionList={this.state.selectedFilter}\r\n                                        selectionField=\"ntransactionstatus\"\r\n                                        selectionFieldName=\"sfilterstatus\"\r\n                                        selectionColorField=\"stranscolor\"\r\n                                        selectedListName=\"MJSelectedSample\"\r\n                                        objectName=\"sample\"\r\n                                        listName=\"IDS_SAMPLE\"\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        searchListName=\"searchedSample\"\r\n                                        needValidation={true}\r\n                                        validationKey=\"napprovalversioncode\"\r\n                                        validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        subFields={this.state.DynamicSampleColumns}\r\n                                        moreField={this.state.sampleMoreField}\r\n                                        jsonDesignFields={true}\r\n                                        jsonField={'jsondata'}\r\n                                        showStatusLink={true}\r\n                                        statusFieldName=\"stransdisplaystatus\"\r\n                                        statusField=\"ntransactionstatus\"\r\n                                        //statusColor=\"sdecisioncolor\"\r\n                                        statusColor=\"stranscolor\"\r\n                                        showStatusIcon={false}\r\n                                        showStatusName={true}\r\n                                        needFilter={true}\r\n                                        searchRef={this.searchSampleRef}\r\n                                        filterParam={filterSampleParam}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        showStatusBlink={true}\r\n                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                        childTabsKey={[\"MJ_SUBSAMPLE\", \"MJ_TEST\",  \"RegistrationAttachment\", \"RegistrationComment\"]}\r\n                                        actionIcons={\r\n                                            [\r\n                                                this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                    {\r\n                                                        title: \"Report\",\r\n                                                        controlname: \"reports\",\r\n                                                        objectName: \"sample\",\r\n                                                        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\r\n                                                        // onClick: ()=>this.previewSampleReport(reportPreviewId),\r\n                                                        //inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\r\n                                                        onClick: this.props.previewSampleReport,\r\n                                                        inputData: {\r\n                                                            userinfo: this.props.Login.userInfo,\r\n                                                            ncontrolcode: reportPreviewId\r\n                                                        },\r\n                                                    } :\r\n                                                    this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE ?\r\n                                                        {\r\n                                                            title: \"Report\",\r\n                                                            controlname: \"reports\",\r\n                                                            objectName: \"sample\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(reportGenerateId) === -1,\r\n                                                            // onClick: ()=>this.previewSampleReport(reportPreviewId),\r\n                                                            //inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }\r\n                                                            onClick: (obj) => this.generateCOAReport(obj, reportGenerateId),\r\n                                                            inputData: {\r\n                                                                userinfo: this.props.Login.userInfo,\r\n                                                                ncontrolcode: reportPreviewId,\r\n                                                                nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                                                                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                                                            },\r\n                                                        }\r\n                                                        : {\r\n                                                            title: \"Report\",\r\n                                                            controlname: \"reports\",\r\n                                                            objectName: \"sample\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(coaReportId) === -1,\r\n                                                            onClick: (obj) => this.props.reportGenerate(obj, reportGenerateId),\r\n                                                            inputData: {\r\n                                                                userinfo: this.props.Login.userInfo,\r\n                                                                ncontrolcode: coaReportId,\r\n                                                               \r\n                                                            },\r\n\r\n                                                        }\r\n                                            ]\r\n                                        }\r\n\r\n                                        commonActions={\r\n                                            <>\r\n                                                <ProductList className=\"d-flex product-category float-right\">\r\n                                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                        onClick={() => this.onReload()}\r\n                                                        // title={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                      //  data-for=\"tooltip-common-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                    {/* </Tooltip> */}\r\n                                                    {this.props.Login.masterData.decisionStatus &&\r\n                                                        this.state.userRoleControlRights.indexOf(TestDecisionActionId) !== -1 &&\r\n                                                        this.props.Login.masterData.decisionStatus.length > 0 ?\r\n                                                        <CustomPopOver\r\n                                                            icon={faBolt}\r\n                                                            nav={true}\r\n                                                            data={decisionStatus}\r\n                                                            btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                            textKey=\"sdecisionstatus\"\r\n                                                            iconKey=\"ntransactionstatus\"\r\n                                                            dynamicButton={(value) => this.updateDecision(value)}\r\n                                                        >\r\n                                                        </CustomPopOver>\r\n\r\n                                                        : \"\"}\r\n                                                </ProductList>\r\n                                            </>\r\n                                        }\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"Sample Filter\": <MyJobsFilter\r\n                                                    SampleType={this.state.SampletypeList || []}\r\n                                                    SampleTypeValue={this.props.Login.masterData.realSampleTypeValue || []}\r\n                                                    RegType={this.state.RegistrationTypeList || []}\r\n                                                    RegTypeValue={this.props.Login.masterData.realRegTypeValue || []}\r\n                                                    RegSubType={this.state.RegistrationSubTypeList || []}\r\n                                                    RegSubTypeValue={this.props.Login.masterData.realRegSubTypeValue || []}\r\n                                                    ApprovalVersion={this.state.ConfigVersionList || []}\r\n                                                    ApprovalVersionValue={this.props.Login.masterData.realApprovalVersionValue || []}\r\n                                                    UserSection={this.state.UserSectionList || []}\r\n                                                    UserSectionValue={this.props.Login.masterData.realUserSectionValue || []}\r\n                                                    JobStatus={this.props.Login.masterData.JobStatus || []}\r\n                                                    Test={this.state.TestList || []}\r\n                                                    TestValue={this.props.Login.masterData.realTestValue || []}\r\n                                                    FilterStatus={this.state.FilterStatusList || []}\r\n                                                    FilterStatusValue={this.props.Login.masterData.realFilterStatusValue || []}\r\n                                                    fromDate={this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()}\r\n                                                    toDate={this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()}\r\n                                                    onFilterComboChange={this.onFilterComboChange}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    \r\n                                                />\r\n                                            }\r\n                                        ]}\r\n\r\n                                    />\r\n                                   {this.props.Login.masterData.nneedsubsample ?\r\n                                    <ScrollBar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n                                    <SplitterLayout\r\n                                        customClassName=\"detailed-inner\"\r\n                                        vertical\r\n                                        borderColor=\"#999\"\r\n                                        primaryIndex={1}\r\n                                        onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                        secondaryInitialSize={400}\r\n                                    >\r\n                                        <div>\r\n                                            <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                <SplitterLayout borderColor=\"#999\"\r\n                                                    primaryIndex={1} percentage={true}\r\n                                                    secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                                    onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                                    primaryMinSize={40}\r\n                                                    secondaryMinSize={30}\r\n                                                >\r\n                                                    <Card>\r\n                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                <h4 className=\"card-title\">Sub Sample</h4>\r\n                                                            </span>\r\n                                                        </Card.Header>\r\n                                                        <Card.Body className='p-0'>\r\n                                                            <TransactionListMasterJson\r\n                                                                paneHeight={this.state.initialVerticalWidth}\r\n                                                                masterList={this.props.Login.masterData.searchedSubSample || AP_SubSampleList}\r\n                                                                selectedMaster={this.props.Login.masterData.MJSelectedSubSample}\r\n                                                                primaryKeyField=\"ntransactionsamplecode\"\r\n                                                                getMasterDetail={this.props.getMyJobTestDetail}\r\n                                                                inputParam={testGetParam}\r\n                                                                additionalParam={[]}\r\n                                                                mainField=\"ssamplearno\"\r\n                                                                selectedListName=\"MJSelectedSubSample\"\r\n                                                                objectName=\"subSample\"\r\n                                                                listName=\"IDS_SUBSAMPLE\"\r\n                                                                jsonField={'jsondata'}\r\n                                                                jsonDesignFields={true}\r\n                                                                showStatusLink={true}\r\n                                                                showStatusName={true}\r\n                                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                                statusField=\"ntransactionstatus\"\r\n                                                                selectionField=\"ntransactionstatus\"\r\n                                                                selectionFieldName=\"stransdisplaystatus\"\r\n                                                                selectionColorField=\"stranscolor\"\r\n                                                                statusColor=\"stranscolor\"\r\n                                                                subFields={this.state.DynamicSubSampleColumns}\r\n                                                                moreField={this.state.subSampleMoreField}\r\n                                                                needValidation={false}\r\n                                                                needMultiSelect={true}\r\n                                                                needFilter={false}\r\n                                                                searchRef={this.searchSubSampleRef}\r\n                                                                filterParam={filterSubSampleParam}\r\n                                                                filterColumnData={this.props.filterTransactionList}\r\n                                                                searchListName=\"searchedSubSample\"\r\n                                                                skip={this.state.subSampleSkip}\r\n                                                                take={this.state.subSampleTake}\r\n                                                                handlePageChange={this.handleSubSamplePageChange}\r\n                                                                childTabsKey={[\"RegistrationTestAttachment\"]}\r\n                                                            />\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                    <ContentPanel>\r\n                                                        <Card>\r\n                                                            <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                <span style={{ display: \"inline-block\" }}>\r\n                                                                    <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                </span>\r\n                                                                <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                    onClick={() => this.showAPSampleinfo()}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                </button>\r\n                                                            </Card.Header>\r\n                                                            <Card.Body className='p-0'>\r\n\r\n                                                                <TransactionListMasterJson\r\n                                                                    paneHeight={this.state.initialVerticalWidth}\r\n                                                                    needMultiSelect={true}\r\n                                                                    masterList={this.props.Login.masterData.searchedTests || AP_TestList}\r\n                                                                    selectedMaster={this.props.Login.masterData.MJSelectedTest}\r\n                                                                    primaryKeyField=\"ntransactiontestcode\"\r\n                                                                    getMasterDetail={this.props.getMJTestChildTabDetail}\r\n                                                                    inputParam={testChildGetParam}\r\n                                                                    additionalParam={[]}\r\n                                                                    mainField={'stestsynonym'}\r\n                                                                    selectedListName=\"MJSelectedTest\"\r\n                                                                    objectName=\"test\"\r\n                                                                    listName=\"IDS_TEST\"\r\n                                                                    pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                    showStatusLink={true}\r\n                                                                    statusFieldName=\"stransdisplaystatus\"\r\n                                                                    statusField=\"ntransactionstatus\"\r\n                                                                    showStatusIcon={false}\r\n                                                                    showStatusName={true}\r\n                                                                    subFieldsLabel={true}\r\n                                                                    jsonField={'jsondata'}\r\n                                                                    jsonDesignFields={false}\r\n                                                                    selectionField=\"ntransactionstatus\"\r\n                                                                    selectionFieldName=\"sfilterstatus\"\r\n                                                                    selectionColorField=\"scolorhexcode\"\r\n                                                                    selectionList={this.props.Login.masterData.FilterStatus || []}\r\n                                                                    needSubFieldlabel={true}\r\n                                                                    subFields={this.state.DynamicTestColumns}\r\n                                                                    moreField={this.state.testMoreField}\r\n                                                                    needValidation={false}\r\n                                                                    needFilter={false}\r\n                                                                    filterColumnData={this.props.filterTransactionList}\r\n                                                                    searchListName=\"searchedTests\"\r\n                                                                    searchRef={this.searchTestRef}\r\n                                                                    filterParam={filterTestParam}\r\n                                                                    skip={this.state.testskip}\r\n                                                                    take={this.state.testtake}\r\n                                                                    showMoreResetList={true}\r\n                                                                    showMoreResetListName=\"MJ_SAMPLE\"\r\n                                                                    handlePageChange={this.handleTestPageChange}\r\n                                                                    buttonCount={5}\r\n                                                                    childTabsKey={\r\n                                                                        [ \"RegistrationTestAttachment\", \"RegistrationTestComment\"\r\n                                                                        ]\r\n                                                                    }\r\n                                                                    commonActions={\r\n\r\n                                                                        <ProductList className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                                                          \r\n\r\n                                                                            <Nav.Link \r\n                                                                               // data-for=\"tooltip-common-wrap\" \r\n                                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" })} \r\n                                                                                hidden={this.state.userRoleControlRights.indexOf(editParamId) === -1} \r\n                                                                                className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                                                                onClick={() => this.props.getAcceptTest({testGetParam, MJSelectedTest: this.props.Login.masterData.MJSelectedTest,userInfo: this.props.Login.userInfo, ncontrolcode:editParamId})}>\r\n                                                                                <FontAwesomeIcon icon={faCheck} />\r\n                                                                            </Nav.Link>\r\n\r\n                                                                            \r\n                                                                        </ProductList>\r\n                                                                    }\r\n                                                                />\r\n                                                            </Card.Body>\r\n                                                        </Card>\r\n                                                    </ContentPanel>\r\n                                                </SplitterLayout>\r\n                                            </div>\r\n                                            <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                <Card className=\"border-0\">\r\n                                                    <Card.Body className='p-0'>\r\n                                                        <Row>\r\n                                                            <Col md={12}>\r\n                                                                <Card className='p-0'>\r\n                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                        </span>\r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                            onClick={() => this.showAPTestList()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </button>\r\n                                                                    </Card.Header>\r\n                                                                    <Card.Body>\r\n                                                                        <ScrollBar>\r\n                                                                            <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                                {this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.length === 1 ?\r\n                                                                                    <MyJobsSampleInfoView\r\n                                                                                        data={(this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.length > 0) ?\r\n                                                                                            this.props.Login.masterData.MJSelectedSample[this.props.Login.masterData.MJSelectedSample.length - 1] : {}}\r\n                                                                                        SingleItem={this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample ?\r\n                                                                                            this.state.SingleItem : []}\r\n                                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                        userInfo = {this.props.Login.userInfo}\r\n\r\n                                                                                    />\r\n\r\n                                                                                    :\r\n                                                                                    <MyJobsSampleInfoGrid\r\n                                                                                        selectedSample={this.props.Login.masterData.MJSelectedSample}\r\n                                                                                        userInfo={this.props.Login.userInfo || {}}\r\n                                                                                        masterData={this.props.Login.masterData}\r\n                                                                                        inputParam={this.props.Login.inputParam}\r\n                                                                                        dataState={this.state.sampleGridDataState}\r\n                                                                                        dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                        extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem)||[]}\r\n                                                                                        detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField)||[]}\r\n                                                                                        primaryKeyField={\"npreregno\"}\r\n                                                                                        expandField=\"expanded\"\r\n                                                                                        screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                        jsonField={\"jsondata\"}\r\n                                                                                    />\r\n                                                                                }\r\n                                                                            </div>\r\n                                                                        </ScrollBar>\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </ContentPanel>\r\n                                        </div>\r\n                                        <div>\r\n                                            <ScrollBar>\r\n                                                <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                    {this.state.showSample ?\r\n                                                      <Card>\r\n                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                <h4 className=\"card-title\">Sample</h4>\r\n                                                            </span>\r\n                                                        </Card.Header>\r\n                                                        <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"}\r\n                                                            tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                      </Card>\r\n                                                    :\"\"}\r\n                                                       \r\n                                                     {this.state.showTest ?\r\n                                                        <Card>\r\n                                                           <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                    <h4 className=\"card-title\">Test</h4>\r\n                                                                </span>\r\n                                                            </Card.Header>\r\n                                                            <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"}\r\n                                                                    tabDetail={this.testTabDetail()} onTabChange={this.onTestTabChange} />\r\n                                                        </Card>\r\n                                                      : \"\"}\r\n                                                </div>\r\n                                            </ScrollBar>\r\n                                        </div>\r\n                                    </SplitterLayout>\r\n                                 \r\n                                </ScrollBar>\r\n                                   :\r\n\r\n                                    <ScrollBar ref={(ref) => { this._scrollBarRef = ref; }}>\r\n                                        <SplitterLayout\r\n                                            customClassName=\"detailed-inner\"\r\n                                            vertical\r\n                                            borderColor=\"#999\"\r\n                                            primaryIndex={1}\r\n                                            onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                            secondaryInitialSize={400}\r\n                                        >\r\n                                            <div>\r\n                                                <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                    <SplitterLayout borderColor=\"#999\"\r\n                                                        primaryIndex={1} percentage={true}\r\n                                                        secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                                        onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                                        primaryMinSize={40}\r\n                                                        secondaryMinSize={30}\r\n                                                    >\r\n                                                        \r\n                                                        <ContentPanel>\r\n                                                            <Card>\r\n                                                                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                    <span style={{ display: \"inline-block\" }}>\r\n                                                                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                                    </span>\r\n                                                                    <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                        onClick={() => this.showAPSampleinfo()}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                                                                    </button>\r\n                                                                </Card.Header>\r\n                                                                <Card.Body className='p-0'>\r\n\r\n                                                                    <TransactionListMasterJson\r\n                                                                        paneHeight={this.state.initialVerticalWidth}\r\n                                                                        needMultiSelect={true}\r\n                                                                        masterList={this.props.Login.masterData.searchedTests || AP_TestList}\r\n                                                                        selectedMaster={this.props.Login.masterData.MJSelectedTest}\r\n                                                                        primaryKeyField=\"ntransactiontestcode\"\r\n                                                                        getMasterDetail={this.props.getMJTestChildTabDetail}\r\n                                                                        inputParam={testChildGetParam}\r\n                                                                        additionalParam={[]}\r\n                                                                        mainField={'stestsynonym'}\r\n                                                                        selectedListName=\"MJSelectedTest\"\r\n                                                                        objectName=\"test\"\r\n                                                                        listName=\"IDS_TEST\"\r\n                                                                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                        showStatusLink={true}\r\n                                                                        statusFieldName=\"stransdisplaystatus\"\r\n                                                                        statusField=\"ntransactionstatus\"\r\n                                                                        showStatusIcon={false}\r\n                                                                        showStatusName={true}\r\n                                                                        subFieldsLabel={true}\r\n                                                                        jsonField={'jsondata'}\r\n                                                                        jsonDesignFields={false}\r\n                                                                        selectionField=\"ntransactionstatus\"\r\n                                                                        selectionFieldName=\"sfilterstatus\"\r\n                                                                        selectionColorField=\"scolorhexcode\"\r\n                                                                        selectionList={this.props.Login.masterData.FilterStatus || []}\r\n                                                                        needSubFieldlabel={true}\r\n                                                                        subFields={this.state.DynamicTestColumns}\r\n                                                                        moreField={this.state.testMoreField}\r\n                                                                        needValidation={false}\r\n                                                                        needFilter={false}\r\n                                                                        filterColumnData={this.props.filterTransactionList}\r\n                                                                        searchListName=\"searchedTests\"\r\n                                                                        searchRef={this.searchTestRef}\r\n                                                                        filterParam={filterTestParam}\r\n                                                                        skip={this.state.testskip}\r\n                                                                        take={this.state.testtake}\r\n                                                                        showMoreResetList={true}\r\n                                                                        showMoreResetListName=\"MJ_SAMPLE\"\r\n                                                                        handlePageChange={this.handleTestPageChange}\r\n                                                                        buttonCount={5}\r\n                                                                        childTabsKey={\r\n                                                                            [ \"RegistrationTestAttachment\", \"RegistrationTestComment\"\r\n                                                                            ]\r\n                                                                        }\r\n                                                                        commonActions={\r\n\r\n                                                                            <ProductList className=\"d-flex product-category justify-content-end icon-group-wrap\">\r\n                                                                              \r\n\r\n                                                                                <Nav.Link \r\n                                                                                 //   data-for=\"tooltip-common-wrap\" \r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ACCEPT\" })} \r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(editParamId) === -1} \r\n                                                                                    className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                                                                    onClick={() => this.props.getAcceptTest({testGetParam, MJSelectedTest: this.props.Login.masterData.MJSelectedTest,userInfo: this.props.Login.userInfo, ncontrolcode:editParamId})}>\r\n                                                                                    <FontAwesomeIcon icon={faCheck} />\r\n                                                                                </Nav.Link>\r\n\r\n                                                                                \r\n                                                                            </ProductList>\r\n                                                                        }\r\n                                                                    />\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                        </ContentPanel>\r\n                                                    </SplitterLayout>\r\n                                                </div>\r\n                                                <ContentPanel style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                    <Card className=\"border-0\">\r\n                                                        <Card.Body className='p-0'>\r\n                                                            <Row>\r\n                                                                <Col md={12}>\r\n                                                                    <Card className='p-0'>\r\n                                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                            </span>\r\n                                                                            <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                onClick={() => this.showAPTestList()}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                            </button>\r\n                                                                        </Card.Header>\r\n                                                                        <Card.Body>\r\n                                                                            <ScrollBar>\r\n                                                                                <div style={{ height: this.state.initialVerticalWidth }}>\r\n                                                                                    {this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.length === 1 ?\r\n                                                                                        <MyJobsSampleInfoView\r\n                                                                                            data={(this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample.length > 0) ?\r\n                                                                                                this.props.Login.masterData.MJSelectedSample[this.props.Login.masterData.MJSelectedSample.length - 1] : {}}\r\n                                                                                            SingleItem={this.props.Login.masterData.MJSelectedSample && this.props.Login.masterData.MJSelectedSample ?\r\n                                                                                                this.state.SingleItem : []}\r\n                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                            userInfo = {this.props.Login.userInfo}\r\n\r\n                                                                                        />\r\n\r\n                                                                                        :\r\n                                                                                        <MyJobsSampleInfoGrid\r\n                                                                                            selectedSample={this.props.Login.masterData.MJSelectedSample}\r\n                                                                                            userInfo={this.props.Login.userInfo || {}}\r\n                                                                                            masterData={this.props.Login.masterData}\r\n                                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                                            dataState={this.state.sampleGridDataState}\r\n                                                                                            dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                            extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem)||[]}\r\n                                                                                            detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField)||[]}\r\n                                                                                            primaryKeyField={\"npreregno\"}\r\n                                                                                            expandField=\"expanded\"\r\n                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                            jsonField={\"jsondata\"}\r\n                                                                                        />\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                            </ScrollBar>\r\n                                                                        </Card.Body>\r\n                                                                    </Card>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                </ContentPanel>\r\n                                            </div>\r\n                                            <div>\r\n                                                <ScrollBar>\r\n                                                    <div style={{ height: \"calc(110vh - \" + (+this.state.initialVerticalWidth + 100) + \"px)\" }}>\r\n                                                        {this.state.showSample ?\r\n                                                            <Card>\r\n                                                                <Card.Header>\r\n                                                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                            <h4 className=\"card-title\">Sample</h4>\r\n                                                                        </span>\r\n                                                                </Card.Header>\r\n                                                                <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"}\r\n                                                                tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n\r\n                                                            </Card>\r\n                                                            : \"\"}\r\n                                                            {this.state.showTest ?\r\n                                                                <Card>\r\n                                                                      <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                            <h4 className=\"card-title\">Test</h4>\r\n                                                                        </span>\r\n                                                                    </Card.Header>\r\n                                                                    \r\n                                                                    <CustomTabs paneHeight={this.state.tabPane} activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"}\r\n                                                                        tabDetail={this.testTabDetail()} onTabChange={this.onTestTabChange} />\r\n                                                                </Card>\r\n                                                                : \"\"}\r\n                                                    </div>\r\n                                                </ScrollBar>\r\n                                            </div>\r\n                                        </SplitterLayout>\r\n                                     \r\n                                    </ScrollBar>\r\n                                   } \r\n\r\n                                </SplitterLayout>\r\n                            </ListWrapper >\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {this.props.Login.openChildModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.props.Login.operation === 'dynamic' ? () => this.performTestActions(this.props.Login.action, TestApprovalActionId) : this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.screenName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openChildModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.operation === 'enforce' ? [{ \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"senforcestatuscomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }] : []}\r\n                        loginoperation={this.props.Login.operation === 'view' ? true : false}\r\n                        //graphView={this.props.Login.operation !=='enforce' ? this.props.Login.operation:undefined}\r\n                        noSave={this.props.Login.operation === 'view' ? true : false}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            this.props.Login.operation === 'enforce' ?\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormSelectSearch\r\n                                            name={\"ngradecode\"}\r\n                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_STATUS\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_STATUS\" })}\r\n                                            value={this.props.Login.masterData.GradeValue || []}\r\n                                            options={this.props.Login.masterData.Grade || []}\r\n                                            optionId=\"ngradecode\"\r\n                                            optionValue=\"sgradename\"\r\n                                            isMandatory={true}\r\n                                            isMulti={false}\r\n                                            isDisabled={false}\r\n                                            isSearchable={false}\r\n                                            closeMenuOnSelect={true}\r\n                                            isClearable={false}\r\n                                            onChange={(event) => this.onComboChange(event, 'ngradecode')}\r\n                                        />\r\n                                        <FormTextarea\r\n                                            name=\"senforcestatuscomment\"\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                            value={this.state.selectedRecord ? this.state.selectedRecord[\"senforcestatuscomment\"] : \"\"}\r\n                                            rows=\"2\"\r\n                                            isMandatory={true}\r\n                                            required={false}\r\n                                            maxLength={255}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                        />\r\n                                    </Col>\r\n                                </Row> :\r\n                                this.props.Login.operation === 'dynamic' ?\r\n                                    <Row>\r\n                                        <Col md=\"12\">\r\n                                            {/* <FormNumericInput\r\n                                            name={\"retestcount\"}\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_RETESTCOUNT\" })}\r\n                                            type=\"number\"\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_FILENAME\" })}\r\n                                            value={this.state.selectedRecord?this.state.selectedRecord.retestcount:\"\"}\r\n                                            isMandatory=\"*\" \r\n                                            required={true}\r\n                                            min={1}\r\n                                            max={10}\r\n                                        /> */}\r\n                                            <FormNumericInput\r\n                                                name=\"retestcount\"\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_RETESTCOUNT\" })}\r\n                                                placeholder={this.props.intl.formatMessage({ id: \"IDS_MAX\" }) + \": \" + this.props.Login.masterData.retestcount}\r\n                                                type=\"text\"\r\n                                                strict={true}\r\n                                                className=\"form-control\"\r\n                                                value={this.state.selectedRecord ? this.state.selectedRecord.retestcount : \"\"}\r\n                                                maxLength={6}\r\n                                                onChange={(event) => this.onNumericInputOnChange(event, 'retestcount')}\r\n                                                isMandatory=\"*\"\r\n                                                required={true}\r\n                                                noStyle={true}\r\n                                            // min={1}\r\n                                            // max={this.props.Login.masterData.retestcount}\r\n                                            />\r\n                                        </Col>\r\n                                    </Row> :\r\n                                    this.props.Login.operation === 'view' ?\r\n                                        <Row>\r\n                                            <Col md={12}>\r\n                                                <DataGrid\r\n                                                    primaryKeyField={\"nresultparamcommenthistorycode\"}\r\n                                                    data={this.props.Login.masterData.enforceCommentsHistory || []}\r\n                                                    dataResult={this.props.Login.masterData.enforceCommentsHistory || []}\r\n                                                    dataState={{ skip: 0, take: this.props.Login.masterData.enforceCommentsHistory ? this.props.Login.masterData.enforceCommentsHistory.length : 0 }}\r\n                                                    // dataStateChange={this.dataStateChange}\r\n                                                    extractedColumnList={\r\n                                                        [\r\n                                                            { \"idsName\": \"IDS_ENFORCESTATUSCOMMENT\", \"dataField\": \"senforcestatuscomment\", \"width\": \"450px\" }\r\n                                                        ]\r\n                                                    }\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    pageable={false}\r\n                                                    hideColumnFilter={true}\r\n                                                    isActionRequired={false}\r\n                                                    isToolBarRequired={false}\r\n                                                    scrollable={\"scrollable\"}\r\n                                                />\r\n                                            </Col>\r\n                                        </Row>\r\n                                        : \"\"\r\n                                        // <EditApprovalParameter\r\n                                        //     ApprovalParamEdit={this.props.Login.ApprovalParamEdit || []}\r\n                                        //     changeMandatory={this.changeMandatory}\r\n                                        //     selectedRecord={this.state.selectedRecord.approvalParameterEdit || {}}\r\n                                        //     nsubsampleneed={this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed}\r\n                                        // />\r\n                        }\r\n                    />\r\n                    : \"\"}\r\n                {this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ?\r\n                    <TemplateForm\r\n                        templateData={this.props.Login.masterData.ChecklistData}\r\n                        needSaveButton={false}\r\n                        formRef={this.formRef}\r\n                        onTemplateInputChange={this.onTemplateInputChange}\r\n                        handleClose={this.handleClose}\r\n                        onTemplateComboChange={this.onTemplateComboChange}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.props.onSaveCheckList}\r\n                        Login={this.props.Login}\r\n                        viewScreen={this.props.Login.openTemplateModal}\r\n                        selectedRecord={this.state.selectedRecord || []}\r\n                        onTemplateDateChange={this.onTemplateDateChange}\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { userRoleControlRights, controlMap,\r\n            sampleListColumns, subSampleListColumns, testListColumns, SingleItem,\r\n            sampleListMainField, subSampleListMainField, testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, testMoreField,\r\n            resultDataState, instrumentDataState,\r\n            materialDataState, taskDataState,\r\n            documentDataState, resultChangeDataState,\r\n            historyDataState, testCommentDataState,\r\n            samplePrintHistoryDataState, sampleHistoryDataState,\r\n            selectedRecord, SampletypeList, RegistrationTypeList,\r\n            RegistrationSubTypeList, FilterStatusList,\r\n            ConfigVersionList, UserSectionList, TestList, skip, take, testskip, testtake, selectedFilter,\r\n            DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns, DynamicGridItem,\r\n            DynamicGridMoreField } = this.state;\r\n        let bool = false;\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            bool = true;\r\n            // this.setState({userRoleControlRights, controlMap});\r\n        }\r\n        if (this.props.Login.masterData.RegSubTypeValue !== previousProps.Login.masterData.RegSubTypeValue) {\r\n            if (this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nsubsampleneed === transactionStatus.NO) {\r\n                let dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sarno' }] }\r\n                resultDataState = dataState\r\n                instrumentDataState = dataState\r\n                materialDataState = dataState\r\n                taskDataState = dataState\r\n                documentDataState = dataState\r\n                resultChangeDataState = dataState\r\n                historyDataState = dataState\r\n                testCommentDataState = dataState\r\n                // this.setState({\r\n                //     resultDataState: dataSate,instrumentDataState: dataSate,\r\n                //     materialDataState: dataSate,taskDataState: dataSate,instrumentDataState: dataSate,\r\n                //     instrumentDataState: dataSate,documentDataState: dataSate,resultChangeDataState: dataSate,\r\n                //     historyDataState: dataSate,resultDataState: dataSate,testCommentDataState:dataSate,\r\n                // });\r\n                bool = true;\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n\r\n            selectedRecord = this.props.Login.selectedRecord\r\n            // this.setState({selectedRecord: this.props.Login.selectedRecord });\r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const SampletypeListMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'ascending', 'nsampletypecode', false);\r\n            const RegistrationTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            const RegistrationSubTypeListMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            const FilterStatusListMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", undefined, undefined, true);\r\n            const ConfigVersionListMap = constructOptionList(this.props.Login.masterData.ApprovalVersion || [], \"napprovalconfigversioncode\", \"sversionname\", 'descending', 'ntransactionstatus', false);\r\n            const UserSectionListMap = constructOptionList(this.props.Login.masterData.UserSection || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\r\n            const TestListMap = constructOptionList(this.props.Login.masterData.Test || [], \"ntestcode\", \"stestsynonym\", undefined, undefined, true);\r\n            SampletypeList = SampletypeListMap.get(\"OptionList\");\r\n            RegistrationTypeList = RegistrationTypeListMap.get(\"OptionList\");\r\n            RegistrationSubTypeList = RegistrationSubTypeListMap.get(\"OptionList\");\r\n            FilterStatusList = FilterStatusListMap.get(\"OptionList\");\r\n            ConfigVersionList = ConfigVersionListMap.get(\"OptionList\");\r\n            UserSectionList = UserSectionListMap.get(\"OptionList\");\r\n            TestList = TestListMap.get(\"OptionList\");\r\n            bool = true;\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n\r\n            // const selectedFilters = this.props.Login.masterData.FilterStatusValue && \r\n            //     this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ? \r\n            //   JSON.stringify (JSON.parse(this.props.Login.masterData.FilterStatus)) : []\r\n\r\n            // const selectedFilters = this.props.Login.masterData.FilterStatusValue &&\r\n            //     this.props.Login.masterData.FilterStatusValue.ntransactionstatus === transactionStatus.ALL ?\r\n            //     this.props.Login.masterData.FilterStatus : [];\r\n\r\n            const selectedFilters = this.props.Login.masterData.FilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\r\n                instrumentDataState = this.props.Login.instrumentDataState;\r\n            }\r\n            if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\r\n                taskDataState = this.props.Login.taskDataState;\r\n            }\r\n            if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\r\n                resultChangeDataState = this.props.Login.resultChangeDataState;\r\n            }\r\n            if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n                historyDataState = this.props.Login.historyDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.samplePrintHistoryDataState && this.props.Login.samplePrintHistoryDataState !== previousProps.Login.samplePrintHistoryDataState) {\r\n                samplePrintHistoryDataState = this.props.Login.samplePrintHistoryDataState;\r\n            }\r\n            if (this.props.Login.sampleHistoryDataState && this.props.Login.sampleHistoryDataState !== previousProps.Login.sampleHistoryDataState) {\r\n                sampleHistoryDataState = this.props.Login.sampleHistoryDataState;\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n            DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitems ? dynamicColumn.samplegridmoreitems : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n            testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\r\n            bool = true;\r\n            // sampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.LISTITEM);\r\n            // subSampleListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], designProperties.LISTITEM);\r\n            // testListColumns = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTITEM);\r\n            // sampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.LISTMAINFIELD);\r\n            // subSampleListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[2], designProperties.LISTMAINFIELD);\r\n            // testListMainField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTMAINFIELD);\r\n            // SingleItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.SINGLEITEMDATA)\r\n            // SampleGridItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.GRIDITEM)\r\n            // SampleGridExpandableItem = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[1], designProperties.GRIDEXPANDABLEITEM)\r\n            // testMoreField = listDataFromDynamicArray(this.props.Login.masterData.DynamicColumns[3], designProperties.LISTMOREITEM)\r\n            // let {selectedRecord}=this.state\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n            selectedRecord['fromDate'] = obj.fromDate;\r\n            selectedRecord['toDate'] = obj.toDate;\r\n            // this.setState({\r\n            //     sampleListColumns, subSampleListColumns, testListColumns, SingleItem,\r\n            //     sampleListMainField, subSampleListMainField, testListMainField,\r\n            //     SampleGridItem, SampleGridExpandableItem, testMoreField,selectedRecord\r\n            // })\r\n            bool = true;\r\n        }\r\n        if (bool) {\r\n            bool = false;\r\n            this.setState({\r\n                userRoleControlRights, controlMap,\r\n                sampleListColumns, subSampleListColumns, testListColumns, SingleItem,\r\n                sampleListMainField, subSampleListMainField, testListMainField,\r\n                SampleGridItem, SampleGridExpandableItem, testMoreField,\r\n                resultDataState, instrumentDataState,\r\n                materialDataState, taskDataState,\r\n                documentDataState, resultChangeDataState,\r\n                historyDataState, testCommentDataState,\r\n                samplePrintHistoryDataState, sampleHistoryDataState,\r\n                selectedRecord, SampletypeList, RegistrationTypeList,\r\n                RegistrationSubTypeList, FilterStatusList,\r\n                ConfigVersionList, UserSectionList, TestList,\r\n                skip, take, testskip, testtake, selectedFilter,\r\n                DynamicSampleColumns, DynamicSubSampleColumns,\r\n                DynamicTestColumns, DynamicGridItem,\r\n                DynamicGridMoreField\r\n            });\r\n        }\r\n    }\r\n\r\n    // previewSampleReport = (ncontrolCode) => {\r\n\r\n    //     console.log(\"report:\", this.props.Login.masterData.selectedSample);\r\n    //     const selectedSample = this.props.Login.masterData.selectedSample[0];\r\n\r\n    //     const inputData = {ndecisionstatus:selectedSample.ndecisionstatus,\r\n    //                         userinfo:this.props.Login.userInfo,\r\n    //                         nprimarykey: selectedSample.npreregno,\r\n    //                         ncoareporttypecode : reportCOAType.SAMPLECERTIFICATEPRIVIEW,\r\n    //                         nreporttypecode :REPORTTYPE.SAMPLEREPORT,\r\n    //                         sprimarykeyname :\"npreregno\",\r\n    //                         ncontrolcode : ncontrolCode,\r\n    //                         nregtypecode:selectedSample.nregtypecode,\r\n    //                         nregsubtypecode: selectedSample.nregsubtypecode\r\n    //                         }\r\n    //     this.props.previewSampleReport(inputData);\r\n\r\n    // }\r\n\r\n    sampleTabDetail() {\r\n        const tabMap = new Map();\r\n        let npreregno = this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        tabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                selectedMaster={this.props.Login.masterData.MJSelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.MJSelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.MJSelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_SAMPLES\"\r\n                displayName=\"sarno\"\r\n            />)\r\n\r\n            tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n                screenName=\"IDS_SAMPLECOMMENTS\"\r\n                selectedMaster={this.props.Login.masterData.MJSelectedSample}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                masterList={this.props.Login.masterData.MJSelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n                addName={\"AddSampleComment\"}\r\n                editName={\"EditSampleComment\"}\r\n                deleteName={\"DeleteSampleComment\"}\r\n                methodUrl={\"SampleComment\"}\r\n                isTestComment={false}\r\n                primaryKeyField={\"nregcommentcode\"}\r\n                dataState={this.state.testCommentDataState}\r\n                dataStateChange={this.testDataStateChange}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleComment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: this.props.Login.masterData.MJ_SAMPLE,\r\n                    ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n\r\n                }}\r\n                selectedListName=\"IDS_SAMPLES\"\r\n                displayName=\"sarno\"\r\n            />)\r\n\r\n\r\n            \r\n        // tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\",\r\n        //     <SampleApprovalHistory\r\n        //         userInfo={this.props.Login.userInfo}\r\n        //         ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\r\n        //         inputParam={this.props.Login.inputParam}\r\n        //         dataState={this.state.sampleHistoryDataState}\r\n        //         dataStateChange={this.sampleDataStateChange}\r\n        //         screenName=\"IDS_SAMPLEAPPROVALHISTORY\"\r\n        //         controlMap={this.state.controlMap}\r\n        //         userRoleControlRights={this.state.userRoleControlRights}\r\n        //         selectedId={null}\r\n        //     />)\r\n\r\n        // tabMap.set(\"IDS_PRINTHISTORY\",\r\n        //     <ApprovalPrintHistoryTab\r\n        //         userInfo={this.props.Login.userInfo}\r\n        //         ApprovalPrintHistory={this.props.Login.masterData.PrintHistory}\r\n        //         inputParam={this.props.Login.inputParam}\r\n        //         dataState={this.state.samplePrintHistoryDataState}\r\n        //         dataStateChange={this.sampleDataStateChange}\r\n        //         screenName=\"IDS_PRINTHISTORY\"\r\n        //         controlMap={this.state.controlMap}\r\n        //         userRoleControlRights={this.state.userRoleControlRights}\r\n        //         selectedId={null}\r\n        //     />);\r\n        if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode === RegistrationSubType.ROUTINE) {\r\n            // tabMap.set(\"IDS_REPORTHISTORY\",\r\n            //     <ReportHistoryTab\r\n            //         userInfo={this.props.Login.userInfo}\r\n            //         COAHistory={this.props.Login.masterData.COAHistory}\r\n            //         inputParam={this.props.Login.inputParam}\r\n            //         dataState={this.state.reportHistoryDataState}\r\n            //         dataStateChange={this.sampleDataStateChange}\r\n            //         screenName=\"IDS_REPORTHISTORY\"\r\n            //         controlMap={this.state.controlMap}\r\n            //         userRoleControlRights={this.state.userRoleControlRights}\r\n            //         selectedId={null}\r\n            //         viewDownloadFile={this.downloadReport}\r\n            //     />);\r\n        }\r\n        return tabMap;\r\n    }\r\n    downloadReport = (input) => {\r\n        let inputParam = {\r\n            inputData: { selectedRecord: { ...input.inputData }, userinfo: this.props.Login.userInfo },\r\n            classUrl: \"approval\",\r\n            operation: \"view\",\r\n            methodUrl: \"Report\"\r\n        }\r\n        this.props.viewAttachment(inputParam)\r\n    }\r\n    testTabDetail = () => {\r\n        const testTabMap = new Map();\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.MJ_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n        // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        if (this.state.showTest) {\r\n            // testTabMap.set(\"IDS_RESULTS\", <ApprovalResultsTab\r\n            //     userInfo={this.props.Login.userInfo}\r\n            //     masterData={this.props.Login.masterData}\r\n            //     inputParam={this.props.Login.inputParam}\r\n            //     dataState={this.state.resultDataState}\r\n            //     dataStateChange={this.testDataStateChange}\r\n            //     screenName=\"IDS_RESULTS\"\r\n            //     controlMap={this.state.controlMap}\r\n            //     userRoleControlRights={this.state.userRoleControlRights}\r\n            //     getStatusCombo={this.props.getStatusCombo}\r\n            //     selectedId={this.props.Login.masterData.selectedParamId}\r\n            //     viewFile={this.props.viewAttachment}\r\n            //     checkListRecord={this.props.checkListRecord}\r\n            //     getEnforceCommentsHistory={this.props.getEnforceCommentsHistory}\r\n            // />)\r\n            // testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\r\n            //     userInfo={this.props.Login.userInfo}\r\n            //     masterData={this.props.Login.masterData}\r\n            //     inputParam={this.props.Login.inputParam}\r\n            //     dataState={this.state.instrumentDataState}\r\n            //     dataStateChange={this.testDataStateChange}\r\n            //     screenName=\"IDS_INSTRUMENT\"\r\n            //     controlMap={this.state.controlMap}\r\n            //     userRoleControlRights={this.state.userRoleControlRights}\r\n            //     selectedId={null}\r\n            // />)\r\n            // testTabMap.set(\"IDS_MATERIAL\", <ApprovalResultsTab\r\n            //     userInfo={this.props.Login.userInfo}\r\n            //     masterData={this.props.Login.masterData}\r\n            //     inputParam={this.props.Login.inputParam}\r\n            //     dataState={this.state.dataState}\r\n            //     dataStateChange={this.testDataStateChange}\r\n            //     screenName=\"IDS_MATERIAL\"\r\n            //     controlMap={this.state.controlMap}\r\n            //     userRoleControlRights={this.state.userRoleControlRights}\r\n            //     selectedId={null}\r\n            // />)\r\n            // testTabMap.set(\"IDS_TASK\", <ApprovalTask\r\n            //     userInfo={this.props.Login.userInfo}\r\n            //     ResultUsedTasks={this.props.Login.masterData.ResultUsedTasks}\r\n            //     inputParam={this.props.Login.inputParam}\r\n            //     dataState={this.state.taskDataState}\r\n            //     dataStateChange={this.testDataStateChange}\r\n            //     screenName=\"IDS_TASK\"\r\n            //     controlMap={this.state.controlMap}\r\n            //     userRoleControlRights={this.state.userRoleControlRights}\r\n            //     selectedId={null}\r\n            // />)\r\n            testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n                screenName=\"IDS_TESTATTACHMENTS\"\r\n                selectedMaster={selectedTestList}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={selectedTestList}\r\n                masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n                addName={\"AddTestAttachment\"}\r\n                editName={\"EditTestAttachment\"}\r\n                deleteName={\"DeleteTestAttachment\"}\r\n                viewName={\"ViewTestAttachment\"}\r\n                methodUrl={\"TestAttachment\"}\r\n                userInfo={this.props.Login.userInfo}\r\n                nsubsampleneed={this.props.Login.masterData.nneedsubsample}\r\n                subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"TestAttachment\",\r\n                        ntransactiontestcode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\",\r\n                    masterList: selectedTestList\r\n\r\n                }}\r\n                selectedListName=\"IDS_TESTS\"\r\n                displayName=\"stestsynonym\"\r\n            />)\r\n            testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n                screenName=\"IDS_TESTCOMMENTS\"\r\n                selectedMaster={selectedTestList}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                masterList={selectedTestList}\r\n                masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n                addName={\"AddTestComment\"}\r\n                editName={\"EditTestComment\"}\r\n                deleteName={\"DeleteTestComment\"}\r\n                methodUrl={\"TestComment\"}\r\n                isTestComment={false}\r\n                primaryKeyField={\"ntestcommentcode\"}\r\n                dataState={this.state.testCommentDataState}\r\n                dataStateChange={this.testDataStateChange}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"TestComment\",\r\n                        ntransactiontestcode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: selectedTestList,\r\n                    ncontrolCode: editTestCommentsId\r\n\r\n                }}\r\n                selectedListName=\"IDS_TESTS\"\r\n                displayName=\"stestsynonym\"\r\n            />)\r\n\r\n            // testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\r\n            //     userInfo={this.props.Login.userInfo}\r\n            //     ApprovalResultChangeHistory={this.props.Login.masterData.ApprovalResultChangeHistory}\r\n            //     inputParam={this.props.Login.inputParam}\r\n            //     dataState={this.state.resultChangeDataState}\r\n            //     dataStateChange={this.testDataStateChange}\r\n            //     screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n            //     controlMap={this.state.controlMap}\r\n            //     userRoleControlRights={this.state.userRoleControlRights}\r\n            //     selectedId={null}\r\n\r\n            // />)\r\n\r\n\r\n\r\n\r\n            // testTabMap.set(\"IDS_TESTAPPROVALHISTORY\",\r\n            //     <ApprovalHistoryTab\r\n            //         userInfo={this.props.Login.userInfo}\r\n            //         ApprovalHistory={this.props.Login.masterData.ApprovalHistory}\r\n            //         inputParam={this.props.Login.inputParam}\r\n            //         dataState={this.state.historyDataState}\r\n            //         dataStateChange={this.testDataStateChange}\r\n            //         screenName=\"IDS_TESTAPPROVALHISTORY\"\r\n            //         controlMap={this.state.controlMap}\r\n            //         userRoleControlRights={this.state.userRoleControlRights}\r\n            //         selectedId={null}\r\n            //     />)\r\n        }\r\n\r\n        return testTabMap;\r\n    }\r\n    onNumericInputOnChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        if (value === 0 || value === 0.0) {\r\n            selectedRecord[name] = \"\";\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n\r\n        }\r\n    }\r\n    onTestTabChange = (tabProps) => {\r\n\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.MJSelectedTest && this.props.Login.masterData.MJSelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    MJSelectedTest: this.props.Login.masterData.MJSelectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ?\r\n                        String(this.props.Login.masterData.MJSelectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    historyDataState: this.state.historyDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                }\r\n                this.props.getMJTestChildTabDetail(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.MJSelectedSample,\r\n                npreregno: this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getMJSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n    showTestList() {\r\n        this.setState({ showTest: true, showSample: false })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n    checkRetestAction = (action, ncontrolCode) => {\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n        if (selectedTestList.length > 0) {\r\n            if (action.ntransactionstatus === transactionStatus.RETEST) {\r\n\r\n                if (this.props.Login.masterData.retestcount && this.props.Login.masterData.retestcount > 1) {\r\n                    if (selectedTestList.length > 1) {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONETESTONLY\" }));\r\n                    } else {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                action,\r\n                                masterData: this.props.Login.masterData,\r\n                                openChildModal: true,\r\n                                screenName: \"IDS_RETESTCOUNT\",\r\n                                operation: \"dynamic\"\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                } else {\r\n                    this.performTestActions(action, ncontrolCode);\r\n                }\r\n\r\n            } else {\r\n\r\n                this.performTestActions(action, ncontrolCode);\r\n\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n        }\r\n    }\r\n    performTestActions = (action, ncontrolCode) => {\r\n        if (action.ntransactionstatus === transactionStatus.RETEST && this.state.selectedRecord && this.state.selectedRecord.retestcount > this.props.Login.masterData.retestcount) {\r\n\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_MAX\" }) + \": \" + this.props.Login.masterData.retestcount)\r\n\r\n        } else {\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo)\r\n            let ntransCode = this.props.Login.masterData.FilterStatusValue.ntransactionstatus\r\n            if (ntransCode === transactionStatus.ALL) {\r\n                ntransCode = this.props.Login.masterData.FilterStatus.map(status => status.ntransactionstatus).join(\",\");\r\n            } else {\r\n                ntransCode = ntransCode + \",\" + action.ntransactionstatus\r\n            }\r\n            let { testskip, testtake } = this.state\r\n            let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\r\n            testList = testList.slice(testskip, testskip + testtake);\r\n            let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n            const inputParam = {\r\n                inputData: {\r\n                    'performaction': {\r\n                        npreregno: selectedTestList.map(sample => sample.npreregno).join(\",\"),\r\n                        ntransactionsamplecode: this.props.Login.masterData.MJSelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                        ntransactiontestcode: selectedTestList.map(test => test.ntransactiontestcode).join(\",\"),\r\n                        nsectioncode: this.props.Login.masterData.UserSectionValue ?\r\n                            this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ?\r\n                                this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') :\r\n                                String(this.props.Login.masterData.UserSectionValue.nsectioncode) :\r\n                            null,\r\n                        ntestcode: this.props.Login.masterData.realTestValue && this.props.Login.masterData.realTestValue.ntestcode,\r\n                        nTransStatus: action.ntransactionstatus,\r\n                        ntransactionstatus: String(-1),\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.ApprovalVersionValue.napprovalconfigversioncode,\r\n                        nneedsubsample:(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nflag: 2,\r\n                        ntype: 1,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        MJSelectedSample: this.props.Login.masterData.MJSelectedSample,\r\n                        MJSelectedSubSample: this.props.Login.masterData.MJSelectedSubSample,\r\n                        MJSelectedTest: this.props.Login.masterData.MJSelectedTest,\r\n                        retestcount: action.ntransactionstatus === transactionStatus.RETEST ? this.state.selectedRecord ? this.state.selectedRecord.retestcount || 1 : 1 : undefined,\r\n                        ncontrolCode,\r\n                        checkBoxOperation:3,\r\n                        ndesigntemplatemappingcode:(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)||-1\r\n                    },\r\n                    userinfo: this.props.Login.userInfo\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                methodUrl: \"performaction\",\r\n                postParamList: this.postParamList\r\n            }\r\n            if (action.nesignneed === transactionStatus.YES) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openChildModal: true,\r\n                        screenName: \"performaction\",\r\n                        operation: \"dynamic\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.performAction(inputParam)\r\n            }\r\n        }\r\n    }\r\n    updateDecision = (action) => {\r\n        let ntransCode = this.props.Login.masterData.realFilterStatusValue.ntransactionstatus\r\n        if (ntransCode === transactionStatus.ALL) {\r\n            ntransCode = this.props.Login.masterData.FilterStatus.map(status => status.ntransactionstatus).join(\",\");\r\n        }\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo)\r\n        let { skip, take } = this.state\r\n        let sampleList = [...this.props.Login.masterData.MJ_SAMPLE];\r\n        sampleList = sampleList.splice(skip, skip + take);\r\n        let selectedsampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (selectedsampleList.length > 0) {\r\n            const inputData = {\r\n                'updatedecision': {\r\n                    npreregno: selectedsampleList.map(sample => sample.npreregno).join(\",\"),\r\n                    nTransStatus: action.ntransactionstatus,\r\n                    ntransactionstatus: String(ntransCode),\r\n                    dfrom: obj.fromDate,\r\n                    dto: obj.toDate,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    nsectioncode: this.props.Login.masterData.UserSectionValue ?\r\n                        this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ?\r\n                            this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') :\r\n                            String(this.props.Login.masterData.UserSectionValue.nsectioncode) :\r\n                        null,\r\n                    ntestcode: this.props.Login.masterData.TestValue ? this.props.Login.masterData.TestValue.ntestcode : 0,\r\n                    nflag: 1,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    napprovalversioncode: String(selectedsampleList[0].napprovalversioncode),\r\n                    napprovalconfigcode: selectedsampleList[0].napprovalconfigcode,\r\n                    selectedSample: this.props.Login.masterData.selectedSample,\r\n                }, userinfo: this.props.Login.userInfo\r\n\r\n            }\r\n            let inputParam = { postParamList: this.postParamList, inputData, masterData: this.props.Login.masterData }\r\n            if (action.nesignneed === transactionStatus.YES) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openChildModal: true,\r\n                        screenName: \"updatedecision\",\r\n                        operation: \"decision\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.updateDecision(inputParam)\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n        }\r\n\r\n    }\r\n    onFilterComboChange = (comboData, fieldName) => {\r\n\r\n        if (comboData) {\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n            let inputParamData = {};\r\n            if (fieldName === 'nsampletypecode') {\r\n                if (comboData.value !== this.props.Login.masterData.realSampleTypeValue.nsampletypecode) {\r\n                    inputParamData = {\r\n                        nflag: 2,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        realSampleTypeValue: comboData.item\r\n                    };\r\n                    this.props.getRegType(inputParamData)\r\n                }\r\n            } else if (fieldName === 'nregtypecode') {\r\n                if (comboData.value !== this.props.Login.masterData.realRegTypeValue.nregtypecode) {\r\n                    inputParamData = {\r\n                        nflag: 3,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        realRegTypeValue: comboData.item\r\n                    }\r\n                    this.props.getRegSubType(inputParamData)\r\n                }\r\n            } else if (fieldName === 'nregsubtypecode') {\r\n\r\n                if (comboData.value !== this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) {\r\n                    let inputData = {\r\n                        nflag: 4,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo\r\n                    }\r\n                    inputParamData = {\r\n                        inputData,\r\n                        masterData: {\r\n                            ...this.props.Login.masterData,\r\n                            realRegSubTypeValue: comboData.item\r\n                        }\r\n                    }\r\n                    this.props.getAppConfigVersion(inputParamData)\r\n                }\r\n            }\r\n\r\n            else if (fieldName === 'napproveconfversioncode') {\r\n                if (comboData.value !== this.props.Login.masterData.realApprovalVersionValue.napproveconfversioncode) {\r\n                   \r\n                    inputParamData = {\r\n                        nflag: 4,\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, realApprovalVersionValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                        nsectioncode: this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.realUserSectionValue.nsectioncode,\r\n                    }\r\n                    this.props.getFilterStatus(inputParamData)\r\n                }\r\n            }\r\n            else if (fieldName === 'nsectioncode') {\r\n                if (comboData.value !== this.props.Login.masterData.realUserSectionValue.nsectioncode) {\r\n                    inputParamData = {\r\n                        nflag: 5,\r\n                        fromdate: obj.fromDate,\r\n                        todate: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\r\n                        nsectioncode: comboData.value === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : comboData.value,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, realUserSectionValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                        ntransactionstatus: JSON.stringify(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus),\r\n                        stransactionstatus: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                    }\r\n\r\n                    this.props.getSection(inputParamData);\r\n                }\r\n            } else if (fieldName === 'ntransactionstatus') {\r\n                if (comboData.value !== this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) {\r\n                    let masterData = { ...this.props.Login.masterData, realFilterStatusValue: comboData.item }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n            else if (fieldName === 'ntestcode') {\r\n                if (comboData.value !== this.props.Login.masterData.realTestValue.ntestcode) {\r\n                    let masterData = { ...this.props.Login.masterData, realTestValue: comboData.item }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { masterData }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n            else {\r\n                if (comboData.value !== this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) {\r\n                    inputParamData = {\r\n                        dfrom: obj.fromDate,\r\n                        dto: obj.toDate,\r\n                        nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                        nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                        napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        masterData: { ...this.props.Login.masterData, FilterStatusValue: comboData.item },\r\n                        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                        ntransactionstatus: comboData.value,\r\n                        stransactionstatus: comboData.value === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : comboData.value,\r\n                        nsectioncode: this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.realUserSectionValue.nsectioncode,\r\n                    }\r\n\r\n                    this.props.getTestStatus(inputParamData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onComboChange = (comboData) => {\r\n        if (comboData) {\r\n            let masterData = { ...this.props.Login.masterData, GradeValue: comboData }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { masterData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateName, dateValue) => {\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        let dfrom = this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date()\r\n        let dto = this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date()\r\n        let obj = {}\r\n        if (dateName === 'fromDate') {\r\n            obj = convertDateValuetoString(dateValue, dto, this.props.Login.userInfo)\r\n            dfrom = obj.fromDate\r\n            dto = obj.toDate\r\n        } else {\r\n            obj = convertDateValuetoString(dfrom, dateValue, this.props.Login.userInfo)\r\n            dfrom = obj.fromDate\r\n            dto = obj.toDate\r\n\r\n        }\r\n        let inputParam = {\r\n            inputData: {\r\n                nflag: 2,\r\n                nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n                dfrom: String(dfrom),\r\n                dto: String(dto),\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            masterData: this.props.Login.masterData\r\n\r\n        }\r\n        this.props.getAppConfigVersion(inputParam)\r\n    }\r\n    changeMandatory = (event, dataItem) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let value = event.currentTarget.checked ? transactionStatus.YES : transactionStatus.NO\r\n        selectedRecord[\"approvalParameterEdit\"] = { ...selectedRecord[\"approvalParameterEdit\"], [dataItem.ntransactionresultcode]: value }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue,\r\n            realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue } = this.props.Login.masterData\r\n        let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue }\r\n        let inputData = {\r\n            nneedsubsample: (realRegSubTypeValue && realRegSubTypeValue.nneedsubsample) || false,\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            ntransactionstatus:String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\r\n           // ntransactionstatus: ((realFilterStatusValue && realFilterStatusValue.ntransactionstatus !== undefined) || realFilterStatusValue.ntransactionstatus !== '0') ? String(realFilterStatusValue.ntransactionstatus) : \"-1\",\r\n            napprovalconfigcode: realApprovalVersionValue ? realApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n            napprovalversioncode:String(realApprovalVersionValue ? realApprovalVersionValue.napprovalconfigversioncode :1),\r\n           // napprovalversioncode: realApprovalVersionValue && realApprovalVersionValue.napprovalconfigversioncode ? String(realApprovalVersionValue.napprovalconfigversioncode) : null,\r\n            nsectioncode: realUserSectionValue ? realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(realUserSectionValue.nsectioncode) : null,\r\n            ntestcode: realTestValue && realTestValue.ntestcode ? realTestValue.ntestcode : -1,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestTab: this.props.Login.activeTestTab || \"\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"\",\r\n            checkBoxOperation:3,\r\n            ntype:2,\r\n            ndesigntemplatemappingcode:(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)||-1\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1\r\n            && inputData.ntransactionstatus !== -1 && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== -1\r\n            && realUserSectionValue.nsectioncode !== null && realTestValue.ntestcode!==-1) {\r\n\r\n            let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo)\r\n            inputData['fromdate'] = obj.fromDate;\r\n            inputData['todate'] = obj.toDate;\r\n            let inputParam = {\r\n                masterData,\r\n                inputData,\r\n                searchSampleRef: this.searchSampleRef,\r\n                searchSubSampleRef: this.searchSubSampleRef,\r\n                searchTestRef: this.searchTestRef,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                resultDataState: this.state.resultDataState,\r\n                instrumentDataState: this.state.instrumentDataState,\r\n                materialDataState: this.state.materialDataState,\r\n                taskDataState: this.state.taskDataState,\r\n                documentDataState: this.state.documentDataState,\r\n                resultChangeDataState: this.state.resultChangeDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n                historyDataState: this.state.historyDataState,\r\n                samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n                sampleHistoryDataState: this.state.sampleHistoryDataState\r\n            }\r\n            this.props.getMyJobsSample(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n        }\r\n    }\r\n    onFilterSubmit = () => {\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n        //let realFromDate = obj.fromDate;\r\n      //  let realToDate = obj.toDate;\r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        // let realFromDate = new Date(this.props.Login.masterData.fromDate)\r\n        // let realToDate = new Date(this.props.Login.masterData.toDate)\r\n        let realSampleTypeValue = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue\r\n        let realRegTypeValue = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue\r\n        let realRegSubTypeValue = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue\r\n        let realFilterStatusValue = this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue\r\n        let realApprovalVersionValue = this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue\r\n        let realUserSectionValue = this.props.Login.masterData.realUserSectionValue && this.props.Login.masterData.realUserSectionValue\r\n        let realTestValue = this.props.Login.masterData.realTestValue && this.props.Login.masterData.realTestValue\r\n        let masterData = { ...this.props.Login.masterData, realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApprovalVersionValue, realUserSectionValue, realTestValue }\r\n        let inputData = {\r\n           // npreregno: \"0\",\r\n            nsampletypecode: (this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode) || -1,\r\n            ntransactionstatus: ((this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== undefined) || this.props.Login.masterData.realFilterStatusValue.ntransactionstatus !== '0') ? String(this.props.Login.masterData.realFilterStatusValue.ntransactionstatus) : \"-1\",\r\n            napprovalconfigcode: this.props.Login.masterData.realApprovalVersionValue ? this.props.Login.masterData.realApprovalVersionValue.napprovalconfigcode || -1 : null,\r\n            napprovalversioncode: this.props.Login.masterData.realApprovalVersionValue && this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode ? String(this.props.Login.masterData.realApprovalVersionValue.napprovalconfigversioncode) : null,\r\n            nsectioncode: this.props.Login.masterData.realUserSectionValue ? this.props.Login.masterData.realUserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(section => section.nsectioncode).join(',') : String(this.props.Login.masterData.realUserSectionValue.nsectioncode) : null,\r\n            ntestcode: this.props.Login.masterData.realTestValue ? this.props.Login.masterData.realTestValue.ntestcode : -1,\r\n            nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestTab: this.props.Login.activeTestTab,\r\n            activeSampleTab: this.props.Login.activeSampleTab,\r\n            checkBoxOperation: 3,\r\n            ntype:2,\r\n            ndesigntemplatemappingcode:(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)||-1\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1\r\n            && inputData.ntransactionstatus !== \"-1\" && inputData.napprovalconfigcode !== -1 && inputData.napprovalversioncode !== \"-1\"\r\n            && realFilterStatusValue.sfilterstatus !== null && inputData.ntestcode !== undefined) {\r\n\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate)\r\n            inputData['fromdate'] = obj.fromDate;\r\n            inputData['todate'] = obj.toDate;\r\n            let inputParam = {\r\n                masterData,\r\n                inputData,\r\n                searchSampleRef: this.searchSampleRef,\r\n                searchSubSampleRef: this.searchSubSampleRef,\r\n                searchTestRef: this.searchTestRef,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                resultDataState: this.state.resultDataState,\r\n                instrumentDataState: this.state.instrumentDataState,\r\n                materialDataState: this.state.materialDataState,\r\n                taskDataState: this.state.taskDataState,\r\n                documentDataState: this.state.documentDataState,\r\n                resultChangeDataState: this.state.resultChangeDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n                historyDataState: this.state.historyDataState,\r\n                samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n                sampleHistoryDataState: this.state.sampleHistoryDataState\r\n            }\r\n            this.props.getMyJobsSample(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }))\r\n        }\r\n\r\n    }\r\n    testDataStateChange = (event) => {\r\n\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_RESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                this.setState({\r\n                    materialDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TASK\":\r\n                this.setState({\r\n                    taskDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                this.setState({\r\n                    documentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                this.setState({\r\n                    resultChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTAPPROVALHISTORY\":\r\n                this.setState({\r\n                    historyDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SAMPLEINFO\":\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SAMPLEAPPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            case \"IDS_PRINTHISTORY\":\r\n                this.setState({\r\n                    samplePrintHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            case \"IDS_REPORTHISTORY\":\r\n                this.setState({\r\n                    reportHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let ok = true;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        if (this.props.Login.operation === 'enforce') {\r\n            inputData[\"enforcestatus\"] = {\r\n                ngradecode: this.props.Login.masterData.GradeValue.value || -1,\r\n                ntransactiontestcode: this.state.selectedRecord.ntransactiontestcode,\r\n                ntransactionresultcode: this.state.selectedRecord.ntransactionresultcode,\r\n                senforcestatuscomment: this.state.selectedRecord.senforcestatuscomment || \"\",\r\n                selectedTestCode: this.props.Login.masterData.MJSelectedTest.map(test => test.ntransactiontestcode).join(\",\")\r\n            }\r\n            inputParam = {\r\n                methodUrl: \"EnforceStatus\",\r\n                classUrl: 'approval',\r\n                inputData: inputData,\r\n                postParam: { selectedObject: \"MJSelectedTest\", primaryKeyField: \"ntransactiontestcode\" },\r\n                operation: \"update\"\r\n            }\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord: this.state.selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam);\r\n        }\r\n        else {\r\n            let approvalparameter = []\r\n            if (this.state.selectedRecord.approvalParameterEdit) {\r\n                Object.keys(this.state.selectedRecord.approvalParameterEdit).map((key) =>\r\n                    approvalparameter.push(\r\n                        {\r\n                            ntransactionresultcode: key,\r\n                            nreportmandatory: this.state.selectedRecord.approvalParameterEdit[key]\r\n                        }\r\n                    )\r\n                )\r\n                inputData[\"approvalparameter\"] = approvalparameter\r\n                inputParam = {\r\n                    methodUrl: \"ApprovalParameter\",\r\n                    classUrl: 'approval',\r\n                    inputData: inputData,\r\n                    postParam: { selectedObject: \"MJSelectedTest\", primaryKeyField: \"ntransactiontestcode\" },\r\n                    operation: \"update\"\r\n                }\r\n            } else {\r\n                ok = false;\r\n                this.handleClose()\r\n            }\r\n        }\r\n        if (ok) {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        openChildModal: true,\r\n                        operation: this.props.Login.operation,\r\n                        screenName: \"IDS_ENFORCESTATUS\",\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openChildModal\");\r\n            }\r\n        }\r\n    }\r\n    handleClose = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let templateData = this.props.Login.templateData;\r\n        let operation = this.props.Login.operation;\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        if (this.props.Login.loadEsign) {\r\n            if (operation === \"delete\" || operation === \"dynamic\" || operation === 'reportgeneration' || this.props.Login.operation === 'decision') {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false;\r\n                selectedRecord = {};\r\n                templateData = {};\r\n                operation = undefined;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openTemplateModal = false;\r\n            openModal = false;\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n            templateData = {}\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, openChildModal, loadEsign, selectedRecord, templateData, selectedParamId: null, operation, openTemplateModal }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData,\r\n            operation: this.props.Login.operation\r\n        }\r\n        if (this.props.Login.operation === 'dynamic' || this.props.Login.operation === 'reportgeneration' || this.props.Login.operation === 'decision') {\r\n            this.props.validateEsignforApproval(inputParam, \"openChildModal\");\r\n        } else {\r\n            this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n        }\r\n    }\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n    //     const fromDate = fromDateOnly + \"T00:00:00\";\r\n    //     const toDate = toDateOnly + \"T23:59:59\";\r\n\r\n\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n    getActiveTestURL() {\r\n        let url = \"approval/getapprovalparameter\"\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"approval/getapprovalparameter\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"approval/getApprovalResultChangeHistory\"\r\n                break;\r\n            case \"IDS_TESTAPPROVALHISTORY\":\r\n                url = \"approval/getApprovalHistory\"\r\n                break;\r\n\r\n            default:\r\n                url = \"approval/getapprovalparameter\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n       \r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.MJ_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.MJSelectedSample, \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let { testskip, testtake } = this.state\r\n            let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\r\n            testList = testList.slice(testskip, testskip + testtake);\r\n            let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n        }\r\n\r\n       \r\n       // if (selectedTestList.length > 0) {\r\n\r\n            \r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        operation: this.props.Login.operation,\r\n                        screenName: this.props.Login.screenName,\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n            }\r\n\r\n        //} else {\r\n           // toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n       // }\r\n    }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let { testskip, testtake, skip, take } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : [...this.props.Login.masterData.MJ_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.MJSelectedTest, \"ntransactiontestcode\");\r\n        let sampleList = this.props.Login.masterData.searchedSample ? [...this.props.Login.masterData.searchedSample] : [...this.props.Login.masterData.MJ_SAMPLE];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.MJSelectedSample, \"npreregno\");\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let ok = true;\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.MJSelectedSample ? this.props.Login.masterData.MJSelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            if (selectedSampleList.length > 0) {\r\n                inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\r\n            }\r\n            else {\r\n                ok = false\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.MJSelectedTest ? this.props.Login.masterData.MJSelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            if (selectedTestList.length > 0) {\r\n                inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n            }\r\n            else {\r\n                ok = false\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        }\r\n        if (ok) {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData },\r\n                        operation: this.props.Login.operation,\r\n                        screenName: this.props.Login.screenName,\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    generateCOAReport = (inputData, ncontrolCode) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            let inputParam = { reporparam: inputData }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openChildModal: true,\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: \"reportgeneration\",\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        } else {\r\n\r\n            this.props.generateCOAReport(inputData);\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    getMyJobsubSampleDetail, getMyJobTestDetail, getMJTestChildTabDetail, performAction, updateStore, viewAttachment, checkListRecord,\r\n    updateDecision, getRegType, getRegSubType, getTestStatus,getSection, getMyJobsSample, getStatusCombo,\r\n    validateEsignCredential, crudMaster, validateEsignforApproval, getAppConfigVersion, getAcceptTest, filterTransactionList,\r\n    getMJSampleChildTabDetail, getAttachmentCombo, deleteAttachment, getCommentsCombo, previewSampleReport, \r\n    generateCOAReport, getEnforceCommentsHistory,reportGenerate\r\n})(injectIntl(MyJobs))"]},"metadata":{},"sourceType":"module"}