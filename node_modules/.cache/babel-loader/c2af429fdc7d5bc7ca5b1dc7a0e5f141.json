{"ast":null,"code":"'use strict';\n\nvar buildComparisonOperator = function (field, operator, value) {\n  return [field, operator, value].join(' ');\n};\n\nvar buildBooleanOperator = function (field, operator, value) {\n  return buildComparisonOperator(field, 'is' + (value ? '' : ' not'), operator);\n};\n\nmodule.exports = function (dialect) {\n  dialect.operators.comparison.add('$eq', {\n    inversedOperator: '$ne',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '=', value);\n    }\n  });\n  dialect.operators.comparison.add('$ne', {\n    inversedOperator: '$eq',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '!=', value);\n    }\n  });\n  dialect.operators.comparison.add('$gt', {\n    inversedOperator: '$lte',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '>', value);\n    }\n  });\n  dialect.operators.comparison.add('$lt', {\n    inversedOperator: '$gte',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '<', value);\n    }\n  });\n  dialect.operators.comparison.add('$gte', {\n    inversedOperator: '$lt',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '>=', value);\n    }\n  });\n  dialect.operators.comparison.add('$lte', {\n    inversedOperator: '$gt',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '<=', value);\n    }\n  });\n  dialect.operators.comparison.add('$is', {\n    inversedOperator: '$isNot',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'is', value);\n    }\n  });\n  dialect.operators.comparison.add('$isNot', {\n    inversedOperator: '$is',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'is not', value);\n    }\n  });\n  dialect.operators.comparison.add('$isDistinct', {\n    inversedOperator: '$isNotDistinct',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'is distinct from', value);\n    }\n  });\n  dialect.operators.comparison.add('$isNotDistinct', {\n    inversedOperator: '$isDistinct',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'is not distinct from', value);\n    }\n  });\n  dialect.operators.comparison.add('$like', {\n    inversedOperator: '$nlike',\n    defaultFetchingOperator: '$value',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'like', value);\n    }\n  });\n  dialect.operators.comparison.add('$nlike', {\n    inversedOperator: '$like',\n    defaultFetchingOperator: '$value',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'not like', value);\n    }\n  });\n  dialect.operators.comparison.add('$similarTo', {\n    inversedOperator: '$nsimilarTo',\n    defaultFetchingOperator: '$value',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'similar to', value);\n    }\n  });\n  dialect.operators.comparison.add('$nsimilarTo', {\n    inversedOperator: '$similarTo',\n    defaultFetchingOperator: '$value',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'not similar to', value);\n    }\n  });\n  dialect.operators.comparison.add('$match', {\n    inversedOperator: '$nmatch',\n    defaultFetchingOperator: '$value',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '~', value);\n    }\n  });\n  dialect.operators.comparison.add('$nmatch', {\n    inversedOperator: '$match',\n    defaultFetchingOperator: '$value',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '!~', value);\n    }\n  });\n  dialect.operators.comparison.add('$imatch', {\n    inversedOperator: '$nimatch',\n    defaultFetchingOperator: '$value',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '~*', value);\n    }\n  });\n  dialect.operators.comparison.add('$nimatch', {\n    inversedOperator: '$imatch',\n    defaultFetchingOperator: '$value',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, '!~*', value);\n    }\n  });\n  dialect.operators.comparison.add('$null', {\n    inversedOperator: '$nnull',\n    defaultFetchingOperator: '$boolean',\n    fn: function (field, value) {\n      return buildBooleanOperator(field, 'null', value);\n    }\n  });\n  dialect.operators.comparison.add('$nnull', {\n    inversedOperator: '$null',\n    defaultFetchingOperator: '$boolean',\n    fn: function (field, value) {\n      return buildBooleanOperator(field, 'null', !value);\n    }\n  });\n  dialect.operators.comparison.add('$true', {\n    inversedOperator: '$ntrue',\n    defaultFetchingOperator: '$boolean',\n    fn: function (field, value) {\n      return buildBooleanOperator(field, 'true', value);\n    }\n  });\n  dialect.operators.comparison.add('$ntrue', {\n    inversedOperator: '$true',\n    defaultFetchingOperator: '$boolean',\n    fn: function (field, value) {\n      return buildBooleanOperator(field, 'true', !value);\n    }\n  });\n  dialect.operators.comparison.add('$false', {\n    inversedOperator: '$nfalse',\n    defaultFetchingOperator: '$boolean',\n    fn: function (field, value) {\n      return buildBooleanOperator(field, 'false', value);\n    }\n  });\n  dialect.operators.comparison.add('$nfalse', {\n    inversedOperator: '$false',\n    defaultFetchingOperator: '$boolean',\n    fn: function (field, value) {\n      return buildBooleanOperator(field, 'false', !value);\n    }\n  });\n  dialect.operators.comparison.add('$unknown', {\n    inversedOperator: '$nunknown',\n    defaultFetchingOperator: '$boolean',\n    fn: function (field, value) {\n      return buildBooleanOperator(field, 'unknown', value);\n    }\n  });\n  dialect.operators.comparison.add('$nunknown', {\n    inversedOperator: '$unknown',\n    defaultFetchingOperator: '$boolean',\n    fn: function (field, value) {\n      return buildBooleanOperator(field, 'unknown', !value);\n    }\n  });\n  dialect.operators.comparison.add('$in', {\n    inversedOperator: '$nin',\n    defaultFetchingOperator: '$inValues',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'in', value);\n    }\n  });\n  dialect.operators.comparison.add('$nin', {\n    inversedOperator: '$in',\n    defaultFetchingOperator: '$inValues',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'not in', value);\n    }\n  });\n  dialect.operators.comparison.add('$between', {\n    inversedOperator: '$nbetween',\n    defaultFetchingOperator: '$betweenValues',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'between', value);\n    }\n  });\n  dialect.operators.comparison.add('$nbetween', {\n    inversedOperator: '$between',\n    defaultFetchingOperator: '$betweenValues',\n    fn: function (field, value) {\n      return buildComparisonOperator(field, 'not between', value);\n    }\n  });\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/node_modules/json-sql/lib/dialects/base/operators/comparison.js"],"names":["buildComparisonOperator","field","operator","value","join","buildBooleanOperator","module","exports","dialect","operators","comparison","add","inversedOperator","fn","defaultFetchingOperator"],"mappings":"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","sourcesContent":["'use strict';\n\nvar buildComparisonOperator = function(field, operator, value) {\n\treturn [field, operator, value].join(' ');\n};\n\nvar buildBooleanOperator = function(field, operator, value) {\n\treturn buildComparisonOperator(field, 'is' + (value ? '' : ' not'), operator);\n};\n\nmodule.exports = function(dialect) {\n\tdialect.operators.comparison.add('$eq', {\n\t\tinversedOperator: '$ne',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '=', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$ne', {\n\t\tinversedOperator: '$eq',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '!=', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$gt', {\n\t\tinversedOperator: '$lte',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '>', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$lt', {\n\t\tinversedOperator: '$gte',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '<', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$gte', {\n\t\tinversedOperator: '$lt',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '>=', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$lte', {\n\t\tinversedOperator: '$gt',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '<=', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$is', {\n\t\tinversedOperator: '$isNot',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'is', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$isNot', {\n\t\tinversedOperator: '$is',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'is not', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$isDistinct', {\n\t\tinversedOperator: '$isNotDistinct',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'is distinct from', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$isNotDistinct', {\n\t\tinversedOperator: '$isDistinct',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'is not distinct from', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$like', {\n\t\tinversedOperator: '$nlike',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'like', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nlike', {\n\t\tinversedOperator: '$like',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'not like', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$similarTo', {\n\t\tinversedOperator: '$nsimilarTo',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'similar to', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nsimilarTo', {\n\t\tinversedOperator: '$similarTo',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'not similar to', value);\n\t\t}\n\t});\n\n\n\tdialect.operators.comparison.add('$match', {\n\t\tinversedOperator: '$nmatch',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '~', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nmatch', {\n\t\tinversedOperator: '$match',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '!~', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$imatch', {\n\t\tinversedOperator: '$nimatch',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '~*', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nimatch', {\n\t\tinversedOperator: '$imatch',\n\t\tdefaultFetchingOperator: '$value',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, '!~*', value);\n\t\t}\n\t});\n\n\n\tdialect.operators.comparison.add('$null', {\n\t\tinversedOperator: '$nnull',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'null', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nnull', {\n\t\tinversedOperator: '$null',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'null', !value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$true', {\n\t\tinversedOperator: '$ntrue',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'true', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$ntrue', {\n\t\tinversedOperator: '$true',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'true', !value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$false', {\n\t\tinversedOperator: '$nfalse',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'false', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nfalse', {\n\t\tinversedOperator: '$false',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'false', !value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$unknown', {\n\t\tinversedOperator: '$nunknown',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'unknown', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nunknown', {\n\t\tinversedOperator: '$unknown',\n\t\tdefaultFetchingOperator: '$boolean',\n\t\tfn: function(field, value) {\n\t\t\treturn buildBooleanOperator(field, 'unknown', !value);\n\t\t}\n\t});\n\n\n\tdialect.operators.comparison.add('$in', {\n\t\tinversedOperator: '$nin',\n\t\tdefaultFetchingOperator: '$inValues',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'in', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nin', {\n\t\tinversedOperator: '$in',\n\t\tdefaultFetchingOperator: '$inValues',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'not in', value);\n\t\t}\n\t});\n\n\n\tdialect.operators.comparison.add('$between', {\n\t\tinversedOperator: '$nbetween',\n\t\tdefaultFetchingOperator: '$betweenValues',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'between', value);\n\t\t}\n\t});\n\n\tdialect.operators.comparison.add('$nbetween', {\n\t\tinversedOperator: '$between',\n\t\tdefaultFetchingOperator: '$betweenValues',\n\t\tfn: function(field, value) {\n\t\t\treturn buildComparisonOperator(field, 'not between', value);\n\t\t}\n\t});\n};\n"]},"metadata":{},"sourceType":"script"}