{"ast":null,"code":"import _classCallCheck from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{FormattedMessage,injectIntl}from'react-intl';import{Grid,GridColumn as Column,GridNoRecords}from'@progress/kendo-react-grid';import{AtTableWrap}from'../data-grid/data-grid.styles';import{loadMessages,LocalizationProvider}from'@progress/kendo-react-intl';// import ReactTooltip from 'react-tooltip';\nvar DataGridWithSelection=/*#__PURE__*/function(_React$Component){_inherits(DataGridWithSelection,_React$Component);var _super=_createSuper(DataGridWithSelection);function DataGridWithSelection(){_classCallCheck(this,DataGridWithSelection);return _super.apply(this,arguments);}_createClass(DataGridWithSelection,[{key:\"render\",value://lastSelectedIndex = 0;\n// state = {\n//     data: this.props.data.map(dataItem => Object.assign({ selected: false }, dataItem))\n// }\n// selectionChange = (event) => {\n//     const data = this.state.data.map(item=>{\n//         if(item.ProductID === event.dataItem.ProductID){\n//             item.selected = !event.dataItem.selected;\n//         }\n//         return item;\n//     });\n//     this.setState({ data });\n// }\n// rowClick = event => {\n//     let last = this.lastSelectedIndex;\n//     const data = [...this.state.data];\n//     const current = data.findIndex(dataItem => dataItem === event.dataItem);\n//     if (!event.nativeEvent.shiftKey) {\n//         this.lastSelectedIndex = last = current;\n//     }\n//     if (!event.nativeEvent.ctrlKey) {\n//         data.forEach(item => (item.selected = false));\n//     }\n//     const select = !event.dataItem.selected;\n//     for (let i = Math.min(last, current); i <= Math.max(last, current); i++) {\n//         data[i].selected = select;\n//     }\n//     this.setState({ data });\n// };\n// headerSelectionChange = (event) => {\n//     const checked = event.syntheticEvent.target.checked;\n//     const data = this.state.data.map(item=>{\n//         item.selected = checked;\n//         return item;\n//     });\n//     this.setState({ data });\n// }\nfunction render(){var _this=this;// let selectAll = true;\n// if (this.props.data && this.props.data.length > 0){\n//     this.props.data.forEach(dataItem => {\n//         if (dataItem.selected){\n//             if (dataItem.selected === false){\n//                 selectAll = false;\n//             }\n//         }\n//         else{\n//             selectAll = false;\n//         }            \n//     }) \n// }\n// else{\n//     selectAll = false;\n// }\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AtTableWrap,{className:\"at-list-table\"},/*#__PURE__*/React.createElement(LocalizationProvider,{language:this.props.userInfo.slanguagetypecode},/*#__PURE__*/React.createElement(Grid,{data:this.props.data,style:{height:'400px'},selectedField:\"selected\",onSelectionChange:this.props.selectionChange,onHeaderSelectionChange:this.props.headerSelectionChange,onRowClick:this.props.rowClick},/*#__PURE__*/React.createElement(GridNoRecords,null,this.props.intl.formatMessage({id:\"IDS_NORECORDSAVAILABLE\"})),/*#__PURE__*/React.createElement(Column,{field:\"selected\",width:\"50px\",title:this.props.title,headerSelectionValue:this.props.selectAll// selectable={false}  \n// headerSelectionValue={\n//     this.props.data.findIndex(dataItem => dataItem.selected === false) === -1\n// }                       \n}),this.props.extractedColumnList.map(function(item,index){return/*#__PURE__*/React.createElement(Column,{key:index,width:item.width,title:_this.props.intl.formatMessage({id:item.idsName}),cell:function cell(row){return/*#__PURE__*/React.createElement(\"td\",{\"data-tip\":row[\"dataItem\"][item.dataField]},item.isIdsField?/*#__PURE__*/React.createElement(FormattedMessage,{id:row[\"dataItem\"][item.dataField],defaultMessage:row[\"dataItem\"][item.dataField]}):row[\"dataItem\"][item.dataField]);}});})))));}}]);return DataGridWithSelection;}(React.Component);export default injectIntl(DataGridWithSelection);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/components/data-grid/DataGridWithSelection.jsx"],"names":["React","FormattedMessage","injectIntl","Grid","GridColumn","Column","GridNoRecords","AtTableWrap","loadMessages","LocalizationProvider","DataGridWithSelection","props","userInfo","slanguagetypecode","data","height","selectionChange","headerSelectionChange","rowClick","intl","formatMessage","id","title","selectAll","extractedColumnList","map","item","index","width","idsName","row","dataField","isIdsField","Component"],"mappings":"wtBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,gBAAT,CAA2BC,UAA3B,KAA6C,YAA7C,CACA,OAASC,IAAT,CAAeC,UAAU,GAAIC,CAAAA,MAA7B,CAAoCC,aAApC,KAAyD,4BAAzD,CACA,OAASC,WAAT,KAA4B,+BAA5B,CACA,OAASC,YAAT,CAAuBC,oBAAvB,KAAmD,4BAAnD,CACA;GAEMC,CAAAA,qB,oTAEF;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,iBAAS,gBACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBACI,4CAEI,oBAAC,WAAD,EAAa,SAAS,CAAC,eAAvB,eACA,oBAAC,oBAAD,EAAsB,QAAQ,CAAE,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,iBAApD,eAEI,oBAAC,IAAD,EACI,IAAI,CAAE,KAAKF,KAAL,CAAWG,IADrB,CAEI,KAAK,CAAE,CAAEC,MAAM,CAAE,OAAV,CAFX,CAGI,aAAa,CAAC,UAHlB,CAII,iBAAiB,CAAE,KAAKJ,KAAL,CAAWK,eAJlC,CAKI,uBAAuB,CAAE,KAAKL,KAAL,CAAWM,qBALxC,CAMI,UAAU,CAAE,KAAKN,KAAL,CAAWO,QAN3B,eAQI,oBAAC,aAAD,MACa,KAAKP,KAAL,CAAWQ,IAAX,CAAgBC,aAAhB,CAA8B,CAAEC,EAAE,CAAE,wBAAN,CAA9B,CADb,CARJ,cAWI,oBAAC,MAAD,EACI,KAAK,CAAC,UADV,CAEI,KAAK,CAAC,MAFV,CAGI,KAAK,CAAE,KAAKV,KAAL,CAAWW,KAHtB,CAII,oBAAoB,CAAE,KAAKX,KAAL,CAAWY,SAErC;AACA;AACA;AACA;AATA,EAXJ,CAsBK,KAAKZ,KAAL,CAAWa,mBAAX,CAA+BC,GAA/B,CAAmC,SAACC,IAAD,CAAOC,KAAP,qBAChC,oBAAC,MAAD,EAAQ,GAAG,CAAEA,KAAb,CACI,KAAK,CAAED,IAAI,CAACE,KADhB,CAEI,KAAK,CAAE,KAAI,CAACjB,KAAL,CAAWQ,IAAX,CAAgBC,aAAhB,CAA8B,CAAEC,EAAE,CAAEK,IAAI,CAACG,OAAX,CAA9B,CAFX,CAGI,IAAI,CAAE,cAACC,GAAD,qBACF,0BAAI,WAAUA,GAAG,CAAC,UAAD,CAAH,CAAgBJ,IAAI,CAACK,SAArB,CAAd,EACKL,IAAI,CAACM,UAAL,cACG,oBAAC,gBAAD,EAAkB,EAAE,CAAEF,GAAG,CAAC,UAAD,CAAH,CAAgBJ,IAAI,CAACK,SAArB,CAAtB,CAAuD,cAAc,CAAED,GAAG,CAAC,UAAD,CAAH,CAAgBJ,IAAI,CAACK,SAArB,CAAvE,EADH,CAEKD,GAAG,CAAC,UAAD,CAAH,CAAgBJ,IAAI,CAACK,SAArB,CAHV,CADE,EAHV,EADgC,EAAnC,CAtBL,CAFJ,CADA,CAFJ,CADJ,CA8CH,C,mCA3G+B/B,KAAK,CAACiC,S,EA8G1C,cAAe/B,CAAAA,UAAU,CAACQ,qBAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Grid, GridColumn as Column,GridNoRecords } from '@progress/kendo-react-grid';\r\nimport { AtTableWrap } from '../data-grid/data-grid.styles';\r\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nclass DataGridWithSelection extends React.Component {\r\n\r\n    //lastSelectedIndex = 0;\r\n    // state = {\r\n    //     data: this.props.data.map(dataItem => Object.assign({ selected: false }, dataItem))\r\n    // }\r\n\r\n    // selectionChange = (event) => {\r\n    //     const data = this.state.data.map(item=>{\r\n    //         if(item.ProductID === event.dataItem.ProductID){\r\n    //             item.selected = !event.dataItem.selected;\r\n    //         }\r\n    //         return item;\r\n    //     });\r\n    //     this.setState({ data });\r\n    // }\r\n    // rowClick = event => {\r\n    //     let last = this.lastSelectedIndex;\r\n    //     const data = [...this.state.data];\r\n    //     const current = data.findIndex(dataItem => dataItem === event.dataItem);\r\n\r\n    //     if (!event.nativeEvent.shiftKey) {\r\n    //         this.lastSelectedIndex = last = current;\r\n    //     }\r\n\r\n    //     if (!event.nativeEvent.ctrlKey) {\r\n    //         data.forEach(item => (item.selected = false));\r\n    //     }\r\n    //     const select = !event.dataItem.selected;\r\n    //     for (let i = Math.min(last, current); i <= Math.max(last, current); i++) {\r\n    //         data[i].selected = select;\r\n    //     }\r\n    //     this.setState({ data });\r\n    // };\r\n\r\n    // headerSelectionChange = (event) => {\r\n    //     const checked = event.syntheticEvent.target.checked;\r\n    //     const data = this.state.data.map(item=>{\r\n    //         item.selected = checked;\r\n    //         return item;\r\n    //     });\r\n    //     this.setState({ data });\r\n    // }\r\n\r\n    render() {\r\n        // let selectAll = true;\r\n        // if (this.props.data && this.props.data.length > 0){\r\n        //     this.props.data.forEach(dataItem => {\r\n        //         if (dataItem.selected){\r\n        //             if (dataItem.selected === false){\r\n        //                 selectAll = false;\r\n        //             }\r\n        //         }\r\n        //         else{\r\n        //             selectAll = false;\r\n        //         }            \r\n        //     }) \r\n        // }\r\n        // else{\r\n        //     selectAll = false;\r\n        // }\r\n        return (\r\n            <div>\r\n\r\n                <AtTableWrap className=\"at-list-table\">\r\n                <LocalizationProvider language={this.props.userInfo.slanguagetypecode}>\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                    <Grid\r\n                        data={this.props.data}\r\n                        style={{ height: '400px' }}\r\n                        selectedField=\"selected\"\r\n                        onSelectionChange={this.props.selectionChange}\r\n                        onHeaderSelectionChange={this.props.headerSelectionChange}\r\n                        onRowClick={this.props.rowClick}\r\n                    >\r\n                        <GridNoRecords>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                        </GridNoRecords>\r\n                        <Column\r\n                            field=\"selected\"\r\n                            width=\"50px\"\r\n                            title={this.props.title}\r\n                            headerSelectionValue={this.props.selectAll}\r\n\r\n                        // selectable={false}  \r\n                        // headerSelectionValue={\r\n                        //     this.props.data.findIndex(dataItem => dataItem.selected === false) === -1\r\n                        // }                       \r\n                        />\r\n                        {this.props.extractedColumnList.map((item, index) =>\r\n                            <Column key={index}\r\n                                width={item.width}\r\n                                title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                cell={(row) => (\r\n                                    <td data-tip={row[\"dataItem\"][item.dataField]}>\r\n                                        {item.isIdsField ?\r\n                                            <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                            : row[\"dataItem\"][item.dataField]}\r\n                                    </td>\r\n                                )} />\r\n                        )}\r\n\r\n                    </Grid>\r\n                </LocalizationProvider >\r\n                </AtTableWrap>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default injectIntl(DataGridWithSelection);"]},"metadata":{},"sourceType":"module"}