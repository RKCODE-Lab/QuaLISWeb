{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\batchruncreation\\\\BatchResultTab.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport DataGrid from '../../components/data-grid/data-grid.component';\n\nconst BatchResultTab = props => {\n  const batchViewList = [];\n  const batchCSViewList = [];\n  batchViewList.push({\n    \"idsName\": \"IDS_ARNO\",\n    \"dataField\": \"sarno\",\n    \"width\": \"155px\"\n  });\n\n  if (props.nneedsubsample) {\n    batchViewList.push({\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"155px\"\n    });\n  }\n\n  batchViewList.push( //{\"idsName\":\"IDS_LIIMSPRIMARYCODE\",\"dataField\":\"limsprimarycode\",\"width\":\"155px\"}, \n  // {\"idsName\":\"IDS_BATCHNO\",\"dataField\":\"sbatcharno\",\"width\":\"155px\"},\n  // {\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\",\"width\":\"155px\"},\n  {\n    \"idsName\": \"IDS_TEST\",\n    \"dataField\": \"stestsynonym\",\n    \"width\": \"250px\"\n  }, {\n    \"idsName\": \"IDS_REPEATRETEST\",\n    \"dataField\": \"repretest\",\n    \"width\": \"250px\"\n  }, {\n    \"idsName\": \"IDS_PARAMETERNAME\",\n    \"dataField\": \"sparametersynonym\",\n    \"width\": \"200px\"\n  }, {\n    \"idsName\": \"IDS_RESULT\",\n    \"dataField\": \"sresult\",\n    \"width\": \"250px\"\n  }, {\n    \"idsName\": \"IDS_RESULTFLAG\",\n    \"dataField\": \"sgradename\",\n    \"width\": \"250px\"\n  } //{\"idsName\":\"IDS_RETEST\",\"dataField\":\"ntestretestno\",\"width\":\"250px\"},\n  // {\"idsName\":\"IDS_TRANSDATE\",\"dataField\":\"stransactiondate\",\"width\":\"250px\"},\n  // {\"idsName\":\"IDS_REMARKS\",\"dataField\":\"scomments\",\"width\":\"250px\"},\n  );\n  batchCSViewList.push( //{ label:props.intl.formatMessage({ id: \"IDS_LIIMSPRIMARYCODE\"}), key: \"limsprimarycode\",\"width\":\"250px\"},\n  //{ label:props.intl.formatMessage({ id: \"IDS_LIIMSPRIMARYCODE\"}), key: \"sampleID\",\"width\":\"250px\"},\n  {\n    label: props.intl.formatMessage({\n      id: \"IDS_BATCHNOGROUPID\"\n    }),\n    key: \"sbatcharno\",\n    \"width\": \"250px\"\n  }, {\n    label: props.intl.formatMessage({\n      id: \"IDS_ARNO\"\n    }),\n    key: \"sarno\",\n    \"width\": \"250px\"\n  });\n\n  if (props.nneedsubsample) {\n    batchCSViewList.push({\n      label: props.intl.formatMessage({\n        id: \"IDS_SAMPLEARNO\"\n      }),\n      key: \"ssamplearno\",\n      \"width\": \"250px\"\n    });\n  }\n\n  batchCSViewList.push( //  { label:props.intl.formatMessage({ id: \"IDS_LIIMSPRIMARYCODE\"}), key: \"limsprimarycode\",\"width\":\"250px\"},\n  //{ label:props.intl.formatMessage({ id: \"IDS_SAMPLEARNO\" }), key: \"ssamplearno\",\"width\":\"250px\"},\n  {\n    label: props.intl.formatMessage({\n      id: \"IDS_LIIMSPRIMARYCODE\"\n    }),\n    key: \"sampleID\",\n    \"width\": \"250px\"\n  }, {\n    label: props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }),\n    key: \"stestsynonym\",\n    \"width\": \"250px\"\n  }, {\n    label: props.intl.formatMessage({\n      id: \"IDS_REPEATRETEST\"\n    }),\n    key: \"repretest\",\n    \"width\": \"250px\"\n  } //{ label:props.intl.formatMessage({ id: \"IDS_PARAMETERNAME\"}),key:\"sparametersynonym\",\"width\":\"200px\"},\n  // label:props.intl.formatMessage({ id: \"IDS_RESULT\" }),key:\"sresult\",\"width\":\"250px\"},\n  // { label:props.intl.formatMessage({ id: \"IDS_RESULTFLAG\" }),key:\"sgradename\",\"width\":\"250px\"},\n  //{ label:props.intl.formatMessage({ id: \"IDS_RETEST\" }),key:\"ntestretestno\",\"width\":\"250px\"},\n  );\n  const csvReport = {\n    data: props.resultview && props.resultview.length > 0 ? props.resultview : [],\n    headers: batchCSViewList,\n    filename: 'Clue_Mediator_Report.csv'\n  };\n  return /*#__PURE__*/React.createElement(Row, {\n    noGutters: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DataGrid, {\n    key: \"ntransactionresultcode\",\n    primaryKeyField: \"ntransactionresultcode\",\n    data: props.resultview && props.resultview.length > 0 ? props.resultview : [],\n    ELNTest: props.ELNTest && props.ELNTest.length > 0 ? props.ELNTest : [] // dataResult = {process(props.printHistory || [], { skip: 0, take: 10 })}\n    ,\n    dataResult: props.dataResult,\n    dataState: props.dataState,\n    batchCSViewList: batchCSViewList,\n    dataStateChange: props.dataStateChange,\n    extractedColumnList: batchViewList,\n    userInfo: props.userInfo,\n    pageable: true,\n    scrollable: 'scrollable',\n    gridHeight: '375px',\n    iscsv: \"true\" //csvReport={csvReport}\n    ,\n    isActionRequired: false,\n    methodUrl: props.methodUrl,\n    selectedId: 0,\n    isToolBarRequired: true,\n    isAddRequired: false,\n    isRefreshRequired: false,\n    isDownloadPDFRequired: false,\n    isImportRequired: false,\n    isExportExcelRequired: false,\n    isDownloadExcelRequired: false,\n    selectedfilename: props.selectedfilename,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default BatchResultTab;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/batchruncreation/BatchResultTab.jsx"],"names":["React","Row","Col","DataGrid","BatchResultTab","props","batchViewList","batchCSViewList","push","nneedsubsample","label","intl","formatMessage","id","key","csvReport","data","resultview","length","headers","filename","ELNTest","dataResult","dataState","dataStateChange","userInfo","methodUrl","selectedfilename"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\n\r\n\r\nconst BatchResultTab = (props) =>{\r\n    const batchViewList = [];\r\n    const batchCSViewList = [];\r\n    \r\n\r\n    batchViewList .push(        \r\n      {\"idsName\":\"IDS_ARNO\",\"dataField\":\"sarno\",\"width\":\"155px\"},\r\n    );\r\n    if (props.nneedsubsample){\r\n        batchViewList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\r\n    }\r\n      batchViewList .push(  \r\n        //{\"idsName\":\"IDS_LIIMSPRIMARYCODE\",\"dataField\":\"limsprimarycode\",\"width\":\"155px\"}, \r\n       // {\"idsName\":\"IDS_BATCHNO\",\"dataField\":\"sbatcharno\",\"width\":\"155px\"},\r\n        // {\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\",\"width\":\"155px\"},\r\n        {\"idsName\":\"IDS_TEST\",\"dataField\":\"stestsynonym\",\"width\":\"250px\"},\r\n        {\"idsName\":\"IDS_REPEATRETEST\",\"dataField\":\"repretest\",\"width\":\"250px\"},\r\n        {\"idsName\":\"IDS_PARAMETERNAME\",\"dataField\":\"sparametersynonym\",\"width\":\"200px\"},\r\n        {\"idsName\":\"IDS_RESULT\",\"dataField\":\"sresult\",\"width\":\"250px\"},\r\n        {\"idsName\":\"IDS_RESULTFLAG\",\"dataField\":\"sgradename\",\"width\":\"250px\"},\r\n       //{\"idsName\":\"IDS_RETEST\",\"dataField\":\"ntestretestno\",\"width\":\"250px\"},\r\n        // {\"idsName\":\"IDS_TRANSDATE\",\"dataField\":\"stransactiondate\",\"width\":\"250px\"},\r\n        // {\"idsName\":\"IDS_REMARKS\",\"dataField\":\"scomments\",\"width\":\"250px\"},\r\n        \r\n     );\r\n\r\n\r\n     batchCSViewList.push(\r\n      //{ label:props.intl.formatMessage({ id: \"IDS_LIIMSPRIMARYCODE\"}), key: \"limsprimarycode\",\"width\":\"250px\"},\r\n      //{ label:props.intl.formatMessage({ id: \"IDS_LIIMSPRIMARYCODE\"}), key: \"sampleID\",\"width\":\"250px\"},\r\n      { label:props.intl.formatMessage({ id: \"IDS_BATCHNOGROUPID\"}), key: \"sbatcharno\",\"width\":\"250px\"},\r\n      { label:props.intl.formatMessage({ id: \"IDS_ARNO\" }), key: \"sarno\",\"width\":\"250px\"},\r\n      );\r\n     if (props.nneedsubsample){\r\n       batchCSViewList.push({label:props.intl.formatMessage({ id: \"IDS_SAMPLEARNO\" }), key: \"ssamplearno\",\"width\":\"250px\"});\r\n      }\r\n      \r\n      batchCSViewList.push(\r\n      //  { label:props.intl.formatMessage({ id: \"IDS_LIIMSPRIMARYCODE\"}), key: \"limsprimarycode\",\"width\":\"250px\"},\r\n        //{ label:props.intl.formatMessage({ id: \"IDS_SAMPLEARNO\" }), key: \"ssamplearno\",\"width\":\"250px\"},\r\n        { label:props.intl.formatMessage({ id: \"IDS_LIIMSPRIMARYCODE\"}), key: \"sampleID\",\"width\":\"250px\"},\r\n        { label:props.intl.formatMessage({ id: \"IDS_TEST\" }),key:\"stestsynonym\",\"width\":\"250px\"},\r\n        { label:props.intl.formatMessage({ id: \"IDS_REPEATRETEST\" }),key:\"repretest\",\"width\":\"250px\"},\r\n        //{ label:props.intl.formatMessage({ id: \"IDS_PARAMETERNAME\"}),key:\"sparametersynonym\",\"width\":\"200px\"},\r\n        // label:props.intl.formatMessage({ id: \"IDS_RESULT\" }),key:\"sresult\",\"width\":\"250px\"},\r\n       // { label:props.intl.formatMessage({ id: \"IDS_RESULTFLAG\" }),key:\"sgradename\",\"width\":\"250px\"},\r\n        //{ label:props.intl.formatMessage({ id: \"IDS_RETEST\" }),key:\"ntestretestno\",\"width\":\"250px\"},\r\n     );\r\n\r\n     const csvReport = {\r\n        data: props.resultview && props.resultview.length > 0 ? props.resultview :[],\r\n        headers: batchCSViewList,\r\n        filename: 'Clue_Mediator_Report.csv'\r\n      };\r\n    \r\n    return (\r\n    \r\n        <Row noGutters>\r\n            <Col md={12}>\r\n                <DataGrid\r\n                    key=\"ntransactionresultcode\"\r\n                    primaryKeyField = \"ntransactionresultcode\"\r\n                    data = {props.resultview && props.resultview.length > 0 ? props.resultview :[]}\r\n                    ELNTest={props.ELNTest && props.ELNTest.length > 0 ? props.ELNTest :[]}\r\n                   // dataResult = {process(props.printHistory || [], { skip: 0, take: 10 })}\r\n                    dataResult = {props.dataResult}\r\n                    dataState = {props.dataState}\r\n                    batchCSViewList={batchCSViewList}\r\n                    dataStateChange = {props.dataStateChange}\r\n                    extractedColumnList = {batchViewList}\r\n                    userInfo={props.userInfo}\r\n                    pageable={true}\r\n                    scrollable={'scrollable'}\r\n                    gridHeight = {'375px'}\r\n                    iscsv={\"true\"}\r\n                    //csvReport={csvReport}\r\n                    isActionRequired={false}\r\n                    methodUrl={props.methodUrl}\r\n                    selectedId={0}\r\n                    isToolBarRequired={true}\r\n                    isAddRequired={false}\r\n                    isRefreshRequired={false}\r\n                    isDownloadPDFRequired={false}\r\n                    isImportRequired={false}\r\n                    isExportExcelRequired={false}\r\n                    isDownloadExcelRequired={false}\r\n                    selectedfilename={props.selectedfilename}\r\n                >\r\n                </DataGrid>\r\n            </Col>\r\n        </Row>\r\n    \r\n    );\r\n};\r\nexport default BatchResultTab;\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}