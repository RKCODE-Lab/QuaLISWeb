{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nimport { numericGrade } from '../pages/ResultEntryBySample/ResultEntryValidation';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, filterRecordBasedOnTwoArrays, getRecordBasedOnPrimaryKeyName, getSameRecordFromTwoArrays, replaceUpdatedObject, sortData, updatedObjectWithNewElement, rearrangeDateFormat } from '../components/CommonScript';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntranscode: String(inputData.ntransactionstatus),\n      ntransactiontestcode: 0,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestKey: inputData.activeTestKey,\n      activeSampleKey: inputData.activeSampleKey\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"resultentrybysample/getResultEntryDetails\", inputParamData).then(response => {\n        // if (response.data.DynamicGetSamples) {\n        //     sortData(response.data.DynamicGetSamples, \"\", \"\");\n        // }\n        // if (response.data.DynamicGetTests) {\n        //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n        // }\n        //sortData(response.data);\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n        }; // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        //     inputData.searchSampleRef.current.value = \"\";\n        //     masterData['searchedSample'] = undefined\n        // }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.RESelectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSample = inputData.RESelectedSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\n        let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE;\n        inputData = { ...inputData,\n          childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"],\n          ntransactiontestcode,\n          RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey\n        };\n        dispatch(getTestChildTabREDetail(inputData, true));\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n        };\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode;\n        }\n\n        const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSample: inputData.RESelectedSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory,\n              RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestREDetail(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactiontestcode: 0,\n      ntranscode: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestKey: inputData.activeTestKey\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultEntryDetails\", inputParamData).then(response => {\n      // if (response.data.DynamicGetTests) {\n      //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n      // }\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            RESelectedSubSample: inputData.RESelectedSubSample\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSampleChildTabREDetail(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let url = \"\";\n\n    switch (inputData.activeSampleKey) {\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      default:\n        url = \"attachment/getSampleAttachment\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(url, inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            RESelectedSample: inputData.RESelectedSample\n          },\n          loading: false,\n          activeSampleKey: inputData.activeSampleKey,\n          screenName: inputData.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (inputData.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        activeName = \"ResultUsedInstrument\";\n        dataStateName = \"instrumentDataState\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        activeName = \"\";\n        dataStateName = \"materialDataState\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        activeName = \"ResultUsedTasks\";\n        dataStateName = \"taskDataState\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"documentDataState\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        activeName = \"ResultChangeHistory\";\n        dataStateName = \"resultChangeDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        let responseData = { ...response.data,\n          RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n          RESelectedTest: inputData.RESelectedTest\n        };\n        let skipInfo = {}; //responseData = sortData(responseData)\n\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...sortData(responseData),\n          RESelectedTest: inputData.RESelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            activeTestKey: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        RESelectedTest: inputData.RESelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData[dataStateName].skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestKey: inputData.activeTestKey,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function getRERegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRERegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultRegistrationType: inputData.defaultRegistrationType\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREApprovalConfigVersion(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultRegistrationSubType: inputData.defaultRegistrationSubType // fromDate: inputData.fromdate,\n            //  toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFilterStatus\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultjobstatus: inputData.defaultjobstatus // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREJobStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getJobStatus\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getResultEntryDetails(inputParamData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultEntryDetails\", inputParamData.inputData).then(response => {\n      let masterData = { ...inputParamData.masterData\n      };\n\n      if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\n        inputParamData.refs.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\n        inputParamData.refs.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\n        inputParamData.refs.searchTestRef.current.value = \"\"; // masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            realFromDate: response.data[\"fromDate\"],\n            realToDate: response.data[\"toDate\"]\n          },\n          loading: false,\n          showTest: inputParamData.inputData.showTest,\n          showSample: inputParamData.inputData.showSample,\n          activeTestKey: inputParamData.inputData.activeTestKey,\n          skip: 0,\n          take: inputParamData.inputData.take,\n          testskip: 0,\n          testtake: inputParamData.inputData.testtake,\n          resultDataState: { ...inputParamData.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParamData.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParamData.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParamData.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParamData.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParamData.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParamData.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParamData.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\n  return function (dispatch) {\n    let TestList = [...inputData.RE_TEST];\n    TestList = TestList.splice(testskip, testskip + testtake);\n    let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\n\n    if (acceptTestList && acceptTestList.length > 0) {\n      if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\n        let inputParamData = {\n          ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n          userinfo: userInfo\n        };\n        dispatch(initRequest(true));\n        rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData).then(response => {\n          let selectedResultGrade = [];\n          let paremterResultcode = [];\n          const parameterResults = response.data.ResultParameter;\n          parameterResults.map((param, index) => {\n            selectedResultGrade[index] = {\n              ngradecode: param.ngradecode\n            };\n            paremterResultcode[index] = param.ntransactionresultcode;\n            response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n              if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n\n                if (response.data.ResultParameter[index].sresult === null) {\n                  response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n                  response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\n                  response.data.ResultParameter[index].editable = true;\n                  response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n                }\n              }\n\n              return null;\n            });\n            return null;\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData,\n                ...response.data,\n                paremterResultcode //,\n                //selectedResultGrade ,\n\n              },\n              selectedRecord: {\n                selectedResultGrade: selectedResultGrade,\n                ResultParameter: response.data.ResultParameter\n              },\n              loading: false,\n              screenName: \"IDS_RESULTENTRY\",\n              openModal: true,\n              operation: \"update\",\n              activeTestKey: \"IDS_RESULTS\",\n              ncontrolcode: ncontrolcode\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); //}\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTTESTTOENTERRESULT\"\n        }));\n      }\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTTESTTOENTERRESULT\"\n      }));\n    }\n  };\n}\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\n  if (acceptList !== undefined && acceptList.length > 0) {\n    return function (dispatch) {\n      let inputData = inputParam.testChildGetREParam;\n      let inputParamData = {\n        ntype: 3,\n        nflag: 3,\n        nsampletypecode: inputData.nsampletypecode,\n        nregtypecode: inputData.nregtypecode,\n        nregsubtypecode: inputData.nregsubtypecode,\n        npreregno: inputData.npreregno,\n        ntranscode: String(inputData.ntransactionstatus),\n        napprovalversioncode: inputData.napprovalversioncode,\n        napprovalconfigcode: inputData.napprovalconfigcode,\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: userInfo,\n        fromdate: inputData.fromdate,\n        todate: inputData.todate,\n        ntestcode: inputData.ntestcode,\n        transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        activeTestKey: inputData.activeTestKey,\n        ncontrolcode: inputParam.inputData.ncontrolcode\n      };\n      let activeName = \"\";\n      let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n      //     documentDataState, testCommentDataState } = inputData\n      // let url = \"resultentrybysample/getTestbasedParameter\"\n\n      switch (inputData.activeTestKey) {\n        case \"IDS_RESULTS\":\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          activeName = \"\";\n          dataStateName = \"materialDataState\";\n          break;\n\n        case \"IDS_TASK\":\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          activeName = \"\";\n          dataStateName = \"documentDataState\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          activeName = \"ResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          activeName = \"\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        default:\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/completeTest\", inputParamData).then(response => {\n        let RE_SAMPLE = [];\n        let RE_TEST = [];\n        let responseData = response.data;\n\n        if (responseData[\"RE_TEST\"].length > 0) {\n          RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\n        } else {\n          RE_TEST = inputData.masterData[\"RE_TEST\"];\n        }\n\n        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\n        const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\n        let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\n        let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest);\n        let searchedSample = undefined;\n\n        if (inputData.masterData[\"searchedSample\"]) {\n          searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\n        }\n\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          RE_SAMPLE,\n          RESelectedSubSample: inputData.masterData.RESelectedSubSample,\n          searchedSample,\n          RESelectedSample,\n          RESelectedTest: RESelectedTest2,\n          RE_TEST: responseData[\"RE_TEST\"]\n        };\n        let skipInfo = {};\n\n        if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\n          skipInfo = { ...skipInfo,\n            skip: 0,\n            take: inputParam.take\n          };\n        }\n\n        if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\n          skipInfo = { ...skipInfo,\n            testskip: 0,\n            testtake: inputParam.testtake\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        let respObject = { ...inputParamData.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          selectedRecord: undefined,\n          loading: false,\n          screenName: inputData.activeTestKey,\n          ...skipInfo\n        };\n\n        if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [searchedSample[0]]\n            }\n          };\n          dispatch(fetchSelectedData(inputParameter, respObject));\n        } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [RE_SAMPLE[0]]\n            }\n          };\n          dispatch(fetchSelectedData(inputParameter, respObject));\n        } else {\n          respObject = { ...respObject,\n            masterData\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n} //Compare two array and return the first array which is available in second array\n\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\n  const filterArray = firstArray.filter(function (x) {\n    return secondArray.some(function (y) {\n      return x[PrimaryKey] === y[PrimaryKey];\n    });\n  });\n  return filterArray;\n}\n\nfunction fetchSelectedData(inputParam, respObject) {\n  return dispatch => {\n    rsapi.post(inputParam.fetchUrl, { ...inputParam\n    }).then(response => {\n      const masterData = { ...respObject.masterData,\n        ...response.data,\n        RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\n      }; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function testMethodSourceEdit(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.test.ntransactiontestcode,\n      ntestgrouptestcode: inputData.test.ntestgrouptestcode,\n      ntestcode: inputData.test.ntestcode,\n      ncontrolcode: inputData.editSourceMethodId,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData).then(response => {\n      const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\", \"ssourcename\", undefined, undefined, undefined);\n      const TagListSource = TagSource.get(\"OptionList\");\n      const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\", \"smethodname\", undefined, undefined, undefined);\n      const TagListMethod = TagMethod.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            SourceData: TagListSource,\n            MethodData: TagListMethod,\n            RESelectedSubSample: inputData.masterData.RESelectedSubSample\n          },\n          selectedRecord: {\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            stestsynonym: inputData.test.stestsynonym,\n            nsourcecode: response.data.SourceDataValue,\n            nmethodcode: response.data.MethodDataValue\n          },\n          loading: false,\n          screenName: \"IDS_TESTMETHODSOURCE\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.editSourceMethodId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateParameterComments(inputData, masterData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      ntransactionresultcode: inputData.ntransactionresultcode,\n      sresultcomment: inputData.sresultcomment,\n      transactiontestcode: inputData.transactiontestcode,\n      userinfo: inputData.userinfo,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      ncontrolcode: inputData.ncontrolcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          loading: false,\n          loadEsign: false,\n          screenName: \"IDS_RESULT\",\n          openModal: false,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode //ncontrolcode:inputData.editSourceMethodId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREInstrument(inputData) {\n  return function (dispatch) {\n    let urlArray = [];\n    const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\n      userinfo: inputData.userInfo\n    });\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputData.userInfo\n    });\n    urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory\n          },\n          selectedId: null,\n          selectedRecord: {\n            stestsynonym: inputData.test.stestsynonym,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\n            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\n            npreregno: inputData.test.npreregno,\n            //dtodate: new Date(response[2].data),//new Date(),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            //dfromdate: new Date(response[2].data),//new Date(),\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            ntzfromdate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            },\n            ntztodate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            }\n          },\n          timeZoneList: TagListTimeZone || [],\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let urlArray = []; //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\n\n    const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\n      nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo\n    });\n    const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [timeZoneService, getResultUsedInstrument];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory,\n            // ...response[0].data,\n            ...response[1].data //...response[2].data\n\n          },\n          selectedId: inputData.editRow.nresultusedinstrumentcode,\n          selectedRecord: {\n            stestsynonym: inputData.editRow.stestsynonym,\n            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\n            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n            ninstrumentcatcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\n            },\n            ninstrumentcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\n            },\n            ntzfromdate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\n            },\n            ntztodate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\n            },\n            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\n          },\n          timeZoneList: TagListTimeZone || [],\n          ncontrolcode: inputData.ncontrolCode,\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteTaskRecord(inputData, userInfo) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchTaskRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\n          selectedRecord: {\n            npreregno: response.data.EditResultUsedTasks[0].npreregno,\n            stestsynonym: inputData.editRow.stestsynonym,\n            sanalysistime: response.data.EditResultUsedTasks[0].sanalysistime,\n            smisctime: response.data.EditResultUsedTasks[0].smisctime,\n            spreanalysistime: response.data.EditResultUsedTasks[0].spreanalysistime,\n            spreparationtime: response.data.EditResultUsedTasks[0].spreparationtime,\n            scomments: response.data.EditResultUsedTasks[0].scomments,\n            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\n          },\n          loading: false,\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function parameterRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n      ncontrolcode: inputData.controlcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData\n          },\n          selectedId: response.data.ParameterComments.ntransactionresultcode,\n          selectedRecord: {\n            sresultcomment: response.data.ParameterComments.sresultcomment,\n            stestsynonym: inputData.selectedRecord.stestsynonym,\n            sparametersynonym: inputData.selectedRecord.sparametersynonym,\n            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\n            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n            ncontrolcode: inputData.controlcode\n          },\n          loading: false,\n          screenName: \"IDS_PARAMETERCOMMENTS\",\n          openModal: true,\n          operation: \"updateParameterComments\",\n          ncontrolcode: inputData.controlcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkListRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\n      nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\n      ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\n      ncontrolcode: inputData.ncontrolcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData).then(response => {\n      let selectedRecord = {};\n      let lsteditedQB = [];\n      selectedRecord = {\n        npreregno: inputData.selectedRecord.npreregno,\n        stestsynonym: inputData.selectedRecord.stestsynonym,\n        sparametersynonym: inputData.selectedRecord.sparametersynonym,\n        ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\n        ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n        transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\n      };\n      response.data.ChecklistData.map(checklist => {\n        selectedRecord[checklist.nchecklistversionqbcode] = {\n          nchecklistqbcode: checklist.nchecklistqbcode,\n          nchecklistversioncode: checklist.nchecklistversioncode,\n          nchecklistversionqbcode: checklist.nchecklistversionqbcode,\n          sdefaultvalue: checklist.sdefaultvalue\n        };\n        lsteditedQB.push(checklist.nchecklistversionqbcode);\n        return null;\n      });\n      selectedRecord[\"editedQB\"] = lsteditedQB;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.selectedId,\n          selectedRecord: selectedRecord,\n          loading: false,\n          screenName: \"IDS_CHECKLISTRESULT\",\n          openTemplateModal: true,\n          needSaveButton: inputData.needSaveButton,\n          operation: \"create\",\n          ncontrolCode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\n  return function (dispatch) {\n    let listResultCheckList = [];\n\n    if (selectedRecord && selectedRecord.editedQB) {\n      selectedRecord.editedQB.map(qbcode => listResultCheckList.push(selectedRecord[qbcode]));\n      let inputParamData = {\n        ntransactionresultcode: selectedRecord.ntransactionresultcode,\n        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n        transactiontestcode: selectedRecord.transactiontestcode,\n        npreregno: selectedRecord.npreregno,\n        ResultCheckList: listResultCheckList,\n        userinfo: userInfo,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ncontrolcode: -1\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord: {},\n            templateData: undefined,\n            openTemplateModal: false,\n            openModal: false,\n            loading: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: false,\n          selectedRecord: {},\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }\n  };\n}\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\n  if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\n    return function (dispatch) {\n      let inputParamData = {\n        userinfo: inputData.userinfo,\n        ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\n        npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ncontrolcode: inputData.ncontrolcode\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...response.data,\n              TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\n              RESelectedSubSample: inputData.masterData.RESelectedSubSample\n            },\n            loading: false,\n            activeTestKey: \"IDS_RESULTS\",\n            openModal: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n}\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: parameterData.ntransactiontestcode,\n      nformulacode: parameterData.ntestgrouptestformulacode,\n      userinfo: userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData).then(response => {\n      const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\n        return {\n          \"idsName\": \"IDS_FILLALLFIELDS\",\n          \"dataField\": index,\n          \"mandatory\": true\n        };\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          selectedRecord: { ...selectedRecord,\n            parameterData: parameterData,\n            sformulacalculationdetail: response.data.query,\n            formulainput: response.data.Formula,\n            resultindex: index,\n            selectedForumulaInput: []\n          },\n          validateFormulaMandyFields,\n          loading: false,\n          screenName: \"IDS_RESULTFORMULA\",\n          showFormula: true,\n          operation: \"validate\",\n          showValidate: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function calculateFormula(inputDataValue) {\n  return function (dispatch) {\n    const inputData = {\n      ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\n      sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\n      nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\n      userinfo: inputDataValue.userInfo,\n      dynamicformulafields: inputDataValue.lstDynamicFields\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/calculateFormula\", inputData).then(response => {\n      // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n      // {\n      //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n      //     sresult: response.data.Result,\n      //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n      //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n      //     parameter: inputDataValue.selectedRecord.parameterData\n      // }\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\n      inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\n        ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputDataValue.masterData //selectedResultData: inputDataValue.selectedResultData,\n            //selectedResultGrade: inputDataValue.selectedResultGrade,\n            //ResultParameter: inputDataValue.ResultParameter\n\n          },\n          selectedRecord: {\n            selectedResultGrade: inputDataValue.selectedResultGrade,\n            ResultParameter: inputDataValue.ResultParameter\n          },\n          loading: false,\n          screenName: \"IDS_RESULTENTRY\",\n          showFormula: false,\n          operation: \"update\",\n          showValidate: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data);\n        toast.warn(error.response.data[\"Result\"]);\n      }\n    });\n  };\n}\nexport function getREFilterTestData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultFilterStatus: inputData.defaultFilterStatus\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateTestMethodSource(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\n          },\n          loading: false,\n          openModal: false,\n          loadEsign: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultImportFile(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n\n      if (response.data.returnStatus && response.data.returnStatus !== \"\") {\n        toast.info(response.data.returnStatus);\n      } else {\n        toast.warn(response.data.returnStatus);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialComplete(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\n          dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\n          dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\n          dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\n          dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\n          dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\n          dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\n          let {\n            selectedRecord,\n            userInfo,\n            nregtypecode,\n            nregsubtypecode\n          } = inputParam[\"screenData\"];\n          delete selectedRecord.esignpassword;\n          delete selectedRecord.esigncomments;\n          delete selectedRecord.agree;\n          delete inputParam.inputData.password;\n          userInfo = inputParam.inputData.userinfo;\n          dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMeanCalculationTestParameter(meanParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: meanParam.selectedRecord.npreregno,\n      ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\n      userinfo: meanParam.userInfo\n    };\n    return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData).then(response => {\n      const list = response.data || []; // const optionList = [];\n      // list.map(item=>{\n      //     console.log(\"item:\", item);\n      //         optionList.push({item:item, \n      //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n      //                         value:item.ntransactionresultcode})\n      //     })\n      // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          meanTestParameterList: list,\n          screenName: \"IDS_MEANPARAMETER\",\n          ncontrolcode: meanParam.ncontrolCode,\n          selectedTestParameterMean: meanParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","activeName","dataStateName","post","then","response","oldSelectedTest","masterData","RESelectedTest","data","childTabsKey","checkBoxOperation","removeElementFromArray","RE_TEST","length","RESelectedSample","RESelectedSubSample","RE_SUBSAMPLE","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","catch","error","status","message","warn","TestSelected","isGrandChildGetRequired","toString","getTestChildTabREDetail","showFilter","activeSampleTab","getTestREDetail","ntransactionsamplecode","getSampleChildTabREDetail","url","responseData","screenName","join","getRERegistrationType","getRERegistrationSubType","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","TestList","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","param","ngradecode","ntransactionresultcode","PredefinedValues","predefinedvalue","ndefaultstatus","YES","get","sresult","spredefinedname","sfinal","editable","selectedRecord","openModal","operation","formatMessage","id","completeTest","inputParam","acceptList","completeResultId","testChildGetREParam","napprovalconfigcode","transactiontestcode","RE_SAMPLE","RESelectedTest1","RESelectedTest2","searchedSample","respObject","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","x","some","y","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","addResultUsedInstrumentId","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","sformulacalculationdetail","query","formulainput","Formula","resultindex","selectedForumulaInput","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","dynamicformulafields","lstDynamicFields","Result","parseInt","getREFilterTestData","defaultFilterStatus","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", inputParamData)\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    //sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters,'ascending','ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument,'descending','nresultusedinstrumentcode') :  [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks,'descending','nresultusedtaskcode') :  [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment,'descending','ntestattachmentcode') :  [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory,'descending','nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment,'descending','ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters,'ascending','ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }else{\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", inputParamData)\r\n            .then(response => {\r\n                // if (response.data.DynamicGetTests) {\r\n                //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                // }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    let skipInfo = {};\r\n                    //responseData = sortData(responseData)\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...sortData(responseData),\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }else{\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort:undefined,\r\n                        filter:undefined\r\n                    }\r\n                }\r\n            }else{\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort:undefined,\r\n                        filter:undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                           // fromDate: inputData.fromdate,\r\n                          //  toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getJobStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", inputParamData.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate:response.data[\"fromDate\"],\r\n                            realToDate:response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: {...inputParamData.resultDataState,sort:undefined,filter:undefined},\r\n                        instrumentDataState: {...inputParamData.instrumentDataState,sort:undefined,filter:undefined},\r\n                        materialDataState: {...inputParamData.materialDataState,sort:undefined,filter:undefined},\r\n                        taskDataState: {...inputParamData.taskDataState,sort:undefined,filter:undefined},\r\n                        documentDataState: {...inputParamData.documentDataState,sort:undefined,filter:undefined},\r\n                        resultChangeDataState: {...inputParamData.resultChangeDataState,sort:undefined,filter:undefined},\r\n                        testCommentDataState:{...inputParamData.testCommentDataState,sort:undefined,filter:undefined},\r\n                        historyDataState: {...inputParamData.historyDataState,sort:undefined,filter:undefined},\r\n                        samplePrintHistoryDataState: {...inputParamData.samplePrintHistoryDataState,sort:undefined,filter:undefined},\r\n                        sampleHistoryDataState: {...inputParamData.sampleHistoryDataState,sort:undefined,filter:undefined}\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n    let TestList = [...inputData.RE_TEST];\r\n    TestList = TestList.splice(testskip, testskip + testtake);\r\n    let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n    if (acceptTestList && acceptTestList.length > 0) {\r\n        if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                        response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                            constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                                undefined, undefined).get(\"OptionList\");\r\n                                        if (response.data.ResultParameter[index].sresult === null) {\r\n                                            response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].editable = true;\r\n                                            response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                        }\r\n                                    }\r\n                                    return null;\r\n                                });\r\n                            return null;\r\n                        });\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    selectedResultGrade:  selectedResultGrade,\r\n                                    ResultParameter:response.data.ResultParameter\r\n                                },\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            //}\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    } else {\r\n        dispatch({\r\n            type: DEFAULT_RETURN,\r\n            payload: {\r\n                loading: false\r\n            }\r\n        })\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n        }));\r\n     }\r\n  }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n                    RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RESelectedSubSample: inputData.masterData.RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if(masterData.RE_SAMPLE && masterData.RE_SAMPLE.length<=inputParam.skip){\r\n                        skipInfo ={\r\n                            ...skipInfo,\r\n                            skip:0,\r\n                            take:inputParam.take\r\n                        }\r\n                    }\r\n                    if(masterData.RE_TEST && masterData.RE_TEST.length<=inputParam.testskip){\r\n                        skipInfo ={\r\n                            ...skipInfo,\r\n                            testskip:0,\r\n                            testtake:inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }else{\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort:undefined,\r\n                                filter:undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData(inputParameter, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData(inputParameter, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample:response.data.RESelectedSample||respObject.masterData.RESelectedSample||[]\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat( inputData.userInfo,response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat( inputData.userInfo,response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate:rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo,response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode:inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData,userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                        selectedRecord: {\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].scomments,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.editedQB) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: listResultCheckList,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign:false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign:false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign:false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index,selectedRecord) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            selectedForumulaInput: []\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                 // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord:{\r\n                            selectedResultGrade:  inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: { loading: false}})\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus: inputData.defaultFilterStatus,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"],  inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    }else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}