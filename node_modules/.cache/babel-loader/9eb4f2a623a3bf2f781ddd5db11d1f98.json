{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\storagemanagement\\\\RetrievalCertificate.jsx\";\nimport React from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faThumbsUp, faCloudDownloadAlt, faUserLock, faClock, faCheckCircle, faChartPie, faCheck } from '@fortawesome/free-solid-svg-icons'; //,faUserTimes, faTrash\n\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { callService, crudMaster, validateEsignCredential, updateStore, filterColumnData, getRetrievalCertificateForFilter, getRetrievalCertificateComboService, getProjectBasedUsers, getRetrievalCertificateDetail, reloadRetrievalCertificate, reportRetrievalCetificate } from '../../actions';\nimport { ReactComponent as CheckCertificate } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Check Certificate.svg\";\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber, validateTwoDigitDate, convertDateValuetoString, formatInputDate } from '../../components/CommonScript'; //searchData, sortData,\n\nimport ListMaster from '../../components/list-master/list-master.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { transactionStatus, REPORTTYPE } from '../../components/Enumeration';\nimport { Affix } from 'rsuite';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport RetrievalCertificateFilter from './RetrievalCertificateFilter';\nimport AddRetrievalCertificate from './AddRetrievalCertificate'; // import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass RetrievalCertificate extends React.Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // };\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.ConfirmDelete = (deleteParam, deleteID) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(deleteParam, deleteID));\n    };\n\n    this.deleteRecord = (deleteParam, nControlcode) => {\n      let objdate = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = objdate.fromDate;\n      let toDate = objdate.toDate;\n      const postParam = {\n        inputListName: \"RetrievalCertificate\",\n        selectedObject: \"SelectedRetrievalCertificate\",\n        primaryKeyField: \"nretrievalcertificatecode\",\n        primaryKeyValue: this.props.Login.masterData.SelectedRetrievalCertificate.nretrievalcertificatecode,\n        fetchUrl: \"retrievalcertificate/getRetrievalCertificate\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo,\n          \"fromDate\": fromDate,\n          \"toDate\": toDate\n        }\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"RetrievalCertificate\",\n        displayName: this.props.Login.screenName,\n        inputData: {\n          [\"retrievalcertificate\"]: this.props.Login.masterData.SelectedRetrievalCertificate,\n          \"fromDate\": fromDate,\n          \"toDate\": toDate,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState,\n        postParam\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, nControlcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.Login.screenName && this.props.intl.formatMessage({\n              id: this.props.Login.screenName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      let inputData = [];\n      this.searchRef.current.value = \"\";\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate; // if (isFilterSubmit) {\n\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\n        fromDate = selectedRecord[\"fromdate\"];\n      }\n\n      if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\n        toDate = selectedRecord[\"todate\"];\n      } //  }\n\n\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate,\n          currentDate: null\n        },\n        classUrl: \"retrievalcertificate\",\n        methodUrl: \"RetrievalCertificate\",\n        displayName: \"IDS_RETRIEVALCERTIFICATE\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.getRetrievalCertificateForFilter(inputParam); // }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate: obj.fromDate,\n          toDate: obj.toDate,\n          currentDate: null\n        },\n        classUrl: \"retrievalcertificate\",\n        methodUrl: \"RetrievalCertificate\",\n        displayName: \"IDS_RETRIEVALCERTIFICATE\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.reloadRetrievalCertificate(inputParam);\n    };\n\n    this.onCompleteClick = completeId => {\n      // if(this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus !== transactionStatus.COMPLETED){\n      // const ncontrolCode = this.state.controlMap.has(\"CompleteRetrievalCertificate\") && this.state.controlMap.get(\"CompleteRetrievalCertificate\").ncontrolcode\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo; //add               \n\n      let postParam = undefined;\n      inputData[\"retrievalcertificate\"] = {\n        \"nretrievalcertificatecode\": this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"] ? this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"].Value : \"\"\n      };\n      inputData[\"retrievalcertificate\"] = this.props.Login.masterData.SelectedRetrievalCertificate;\n      postParam = {\n        inputListName: \"RetrievalCertificate\",\n        selectedObject: \"SelectedRetrievalCertificate\",\n        primaryKeyField: \"nretrievalcertificatecode\"\n      };\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate,\n          toDate\n        },\n        classUrl: 'retrievalcertificate',\n        methodUrl: \"RetrievalCertificate\",\n        inputData: inputData,\n        operation: \"complete\",\n        postParam\n      };\n      let saveType;\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            saveType,\n            operation: \"complete\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // }\n      // else{\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\"}));\n      // }\n\n    };\n\n    this.onCheckClick = checkId => {\n      //  if(this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus !== transactionStatus.COMPLETED){\n      // const ncontrolCode = this.state.controlMap.has(\"CompleteRetrievalCertificate\") && this.state.controlMap.get(\"CompleteRetrievalCertificate\").ncontrolcode\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo; //add               \n\n      let postParam = undefined;\n      inputData[\"retrievalcertificate\"] = {\n        \"nretrievalcertificatecode\": this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"] ? this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"].Value : \"\"\n      };\n      inputData[\"retrievalcertificate\"] = this.props.Login.masterData.SelectedRetrievalCertificate;\n      postParam = {\n        inputListName: \"RetrievalCertificate\",\n        selectedObject: \"SelectedRetrievalCertificate\",\n        primaryKeyField: \"nretrievalcertificatecode\"\n      };\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate,\n          toDate\n        },\n        classUrl: 'retrievalcertificate',\n        methodUrl: \"RetrievalCertificate\",\n        inputData: inputData,\n        operation: \"check\",\n        postParam\n      };\n      let saveType;\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, checkId);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            saveType,\n            operation: \"check\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // }\n      // else{\n      //     toast.warn(this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.CONDUCTED ? \"IDS_TESTTRAININGALREADYCONDUCTED\" : \"IDS_TESTTRAININGALREADYCOMPLETED\"}));\n      // }\n\n    };\n\n    this.onApproveClick = approveId => {\n      //if(this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus !== transactionStatus.COMPLETED){\n      // const ncontrolCode = this.state.controlMap.has(\"CompleteRetrievalCertificate\") && this.state.controlMap.get(\"CompleteRetrievalCertificate\").ncontrolcode\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo; //add               \n\n      let postParam = undefined;\n      inputData[\"retrievalcertificate\"] = {\n        \"nretrievalcertificatecode\": this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"] ? this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"].Value : \"\"\n      };\n      inputData[\"retrievalcertificate\"] = this.props.Login.masterData.SelectedRetrievalCertificate;\n      postParam = {\n        inputListName: \"RetrievalCertificate\",\n        selectedObject: \"SelectedRetrievalCertificate\",\n        primaryKeyField: \"nretrievalcertificatecode\"\n      };\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          fromDate,\n          toDate\n        },\n        classUrl: 'retrievalcertificate',\n        methodUrl: \"RetrievalCertificate\",\n        inputData: inputData,\n        operation: \"approve\",\n        postParam\n      };\n      let saveType;\n      const masterData = this.props.Login.masterData;\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            saveType,\n            operation: \"approve\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // }\n      // else{\n      //     toast.warn(this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.CONDUCTED ? \"IDS_TESTTRAININGALREADYCONDUCTED\" : \"IDS_TESTTRAININGALREADYCOMPLETED\"}));\n      // }\n\n    };\n\n    this.onDownloadClick = ncontrolCode => {\n      const inputParam = {\n        inputData: {\n          classUrl: 'retrievalcertificate',\n          methodUrl: \"RetrievalReportCertificate\",\n          operation: \"report\",\n          userinfo: this.props.Login.userInfo,\n          nreporttypecode: REPORTTYPE.CONTROLBASED,\n          ncontrolcode: ncontrolCode,\n          nretrievalcertificatecode: this.props.Login.masterData.SelectedRetrievalCertificate && this.props.Login.masterData.SelectedRetrievalCertificate.nretrievalcertificatecode\n        }\n      };\n      this.props.reportRetrievalCetificate(inputParam['inputData']);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\" || this.props.Login.operation === \"check\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {}; //selectedRecord[fieldName] = comboData;\n\n      if (comboData !== null) {\n        if (fieldName === \"nprojectmastercode\") {\n          //  if (selectedRecord&&selectedRecord[\"nprojectmastercode\"]&&selectedRecord[\"nprojectmastercode\"].value!==comboData.value) {\n          selectedRecord[fieldName] = comboData;\n          this.props.getProjectBasedUsers(comboData.item.nprojectmastercode, this.props.Login.userInfo, selectedRecord, this.props.Login.screenName); // }\n        } else {\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onInputOnChange = (event, optional, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? 1 : 2;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        if (event.target.name === \"sphoneno\") {\n          if (event.target.value !== \"\") {\n            event.target.value = validatePhoneNumber(event.target.value);\n            selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n\n      if (this.state.selectedRecord['semail'] && this.state.selectedRecord['semail'] !== \"\" && this.state.selectedRecord['semail'] !== \"null\" ? validateEmail(this.state.selectedRecord[\"semail\"]) : true) {\n        inputData[\"ncontrolcode\"] = this.props.Login.ncontrolCode;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n        let fromDate = obj.fromDate;\n        let toDate = obj.toDate;\n        inputData[\"fromDate\"] = fromDate;\n        inputData[\"toDate\"] = toDate;\n        let postParam = undefined;\n\n        if (this.props.Login.operation === \"update\") {\n          // edit\n          postParam = {\n            inputListName: \"RetrievalCertificate\",\n            selectedObject: \"SelectedRetrievalCertificate\",\n            primaryKeyField: \"nretrievalcertificatecode\"\n          };\n          inputData[\"retrievalcertificate\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n          this.retrievalcertificateFieldList.map(item => {\n            return inputData[\"retrievalcertificate\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n          });\n        } else {\n          //add               \n          inputData[\"retrievalcertificate\"] = {\n            \"nsitecode\": this.props.Login.userInfo.ntranssitecode\n          };\n          this.retrievalcertificateFieldList.map(item => {\n            return inputData[\"retrievalcertificate\"][item] = this.state.selectedRecord[item];\n          });\n        }\n\n        if (this.state.selectedRecord[\"dretrievalcertificatedate\"]) {\n          inputData[\"retrievalcertificate\"][\"dretrievalcertificatedate\"] = formatInputDate(this.state.selectedRecord[\"dretrievalcertificatedate\"], false);\n        }\n\n        inputData[\"retrievalcertificate\"][\"nstorageconditioncode\"] = this.state.selectedRecord[\"nstorageconditioncode\"] ? this.state.selectedRecord[\"nstorageconditioncode\"].value : \"-1\";\n        inputData[\"retrievalcertificate\"][\"nprojectmastercode\"] = this.state.selectedRecord[\"nprojectmastercode\"] ? this.state.selectedRecord[\"nprojectmastercode\"].value : \"-1\";\n        const inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            fromDate,\n            toDate\n          },\n          classUrl: \"retrievalcertificate\",\n          //this.props.Login.inputParam.classUrl,\n          methodUrl: \"RetrievalCertificate\",\n          inputData: inputData,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALIDEMAIL\"\n        }));\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.state = {\n      isOpen: false,\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      sidebarview: false,\n      screenName: undefined,\n      userLogged: true,\n      selectedRetrievalCertificate: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.retrievalcertificateFieldList = ['sretrievalcertificateno', 'sbiomaterialtype', 'nprojectmastercode', 'srequestid', 'stestingmethod', 'spreparationmethod', 'nstorageconditioncode', 'sinvestigatorname', 'sorganizationaddress', 'sphoneno', 'semail', 'dretrievalcertificatedate', 'scomment']; //'nmahcode',\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    //console.log('screen name:',this.props.Login.screenName,'operation ;',this.props.Login.operation)\n    //console.log('selected r :', this.props.Login.inputParam)\n    let userStatusCSS = \"outline-secondary\";\n\n    if (this.props.Login.masterData.SelectedRetrievalCertificate && this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.APPROVED) {\n      userStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.SelectedRetrievalCertificate && this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.COMPLETED) {\n      userStatusCSS = \"outline-correction\";\n    } else if (this.props.Login.masterData.SelectedRetrievalCertificate && this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.CHECKED) {\n      userStatusCSS = \"outline-danger\";\n    }\n\n    const addId = this.state.controlMap.has(\"AddRetrievalCertificate\") && this.state.controlMap.get(\"AddRetrievalCertificate\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditRetrievalCertificate\") && this.state.controlMap.get(\"EditRetrievalCertificate\").ncontrolcode;\n    const completeId = this.state.controlMap.has(\"CompleteRetrievalCertificate\") && this.state.controlMap.get(\"CompleteRetrievalCertificate\").ncontrolcode;\n    const checkId = this.state.controlMap.has(\"CheckRetrievalCertificate\") && this.state.controlMap.get(\"CheckRetrievalCertificate\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"ApproveRetrievalCertificate\") && this.state.controlMap.get(\"ApproveRetrievalCertificate\").ncontrolcode;\n    const downloadId = this.state.controlMap.has(\"DownloadRetrievalCertificate\") && this.state.controlMap.get(\"DownloadRetrievalCertificate\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteRetrievalCertificate\") && this.state.controlMap.get(\"DeleteRetrievalCertificate\").ncontrolcode;\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.FromDate, this.state.selectedRecord[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let fromDate = obj.fromDate;\n    let toDate = obj.toDate;\n    const filterParam = {\n      inputListName: \"RetrievalCertificate\",\n      selectedObject: \"SelectedRetrievalCertificate\",\n      primaryKeyField: \"nretrievalcertificatecode\",\n      fetchUrl: \"retrievalcertificate/getRetrievalCertificate\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        fromDate,\n        toDate\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"FromDate\", \"ToDate\"],\n      searchFieldList: ['sretrievalcertificateno', 'sbiomaterialtype', 'sprojectname', 'srequestid', 'stestingmethod', 'spreparationmethod', 'sstorageconditionname', 'sinvestigatorname', 'sorganizationaddress', 'sphoneno', 'semail', 'dretrievalcertificatedate', 'scomment']\n    };\n    this.validationColumnList = [{\n      \"idsName\": \"IDS_BIOLOGICALMATERIALTYPE\",\n      \"dataField\": \"sbiomaterialtype\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PROJECTNAME\",\n      \"dataField\": \"nprojectmastercode\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_REQUESTID\",\n      \"dataField\": \"srequestid\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_TESTINGMETHOD\",\n      \"dataField\": \"stestingmethod\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_PREPARATIONMETHOD\",\n      \"dataField\": \"spreparationmethod\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_STORAGECONDITION\",\n      \"dataField\": \"nstorageconditioncode\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_INVESTIGATORNAME\",\n      \"dataField\": \"sinvestigatorname\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, //  { \"idsName\": \"IDS_PHONE\", \"dataField\": \"sphoneno\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\n    //  { \"idsName\": \"IDS_EMAILID\", \"dataField\": \"semail\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\n    {\n      \"idsName\": \"IDS_RETRIEVALCERTIFICATEDATE\",\n      \"dataField\": \"dretrievalcertificatedate\",\n      \"width\": \"150px\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"selectbox\"\n    } // { \"idsName\": \"IDS_ORGANIZATIONADDRESS\", \"dataField\": \"sorganizationaddress\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\n    //  { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomment\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\n    ];\n    const mandatoryFields = [];\n    this.validationColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate, this.props.Login.masterData && this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    const breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": breadCrumbDataDate.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": breadCrumbDataDate.breadCrumbto\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      onClick: () => this.setState({\n        sidebarview: !this.state.sidebarview\n      }),\n      className: \"sidebar-view-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 29\n      }\n    }, !this.state.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 37\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"IDS_RETRIEVALCERTIFICATE\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.RetrievalCertificate,\n      getMasterDetail: retrievalcertificate => this.props.getRetrievalCertificateDetail(retrievalcertificate, fromDate, toDate, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedRetrievalCertificate,\n      primaryKeyField: \"nretrievalcertificatecode\",\n      mainField: \"sretrievalcertificateno\",\n      firstField: \"sprojectname\",\n      secondField: \"stransdisplaystatus\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false,\n      openModal: () => this.props.getRetrievalCertificateComboService(\"IDS_RETRIEVALCERTIFICATE\", \"create\", \"nretrievalcertificatecode\", null, this.props.Login.masterData, this.props.Login.userInfo, addId),\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterComponent: [{\n        \"IDS_RETRIEVALCERTIFICATE\": /*#__PURE__*/React.createElement(RetrievalCertificateFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          handleDateChange: this.handleDateChange,\n          fromDate: fromDate,\n          toDate: toDate,\n          userInfo: this.props.Login.userInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.state.sidebarview ? '8' : \"10\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.RetrievalCertificate && this.props.Login.masterData.RetrievalCertificate.length > 0 && this.props.Login.masterData.SelectedRetrievalCertificate ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.sretrievalcertificateno)), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      className: \"text-muted font-weight-normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 10,\n      className: \"d-flex no-padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${userStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: this.props.Login.masterData ? this.props.Login.masterData.SelectedRetrievalCertificate ? this.props.Login.masterData.SelectedRetrievalCertificate.stransdisplaystatus : \"\" : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 57\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: () => this.props.getRetrievalCertificateComboService(\"IDS_RETRIEVALCERTIFICATE\", \"update\", \"nretrievalcertificatecode\", this.props.Login.masterData.SelectedRetrievalCertificate.nretrievalcertificatecode, this.props.Login.masterData, this.props.Login.userInfo, editId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      name: \"deletemethodname\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      onClick: () => this.ConfirmDelete(deleteParam, deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 61\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(completeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COMPLETE\"\n      }),\n      onClick: () => this.onCompleteClick(completeId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheckCircle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 64\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(checkId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CHECK\"\n      }),\n      onClick: () => this.onCheckClick(checkId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(CheckCertificate, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      onClick: () => this.onApproveClick(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(downloadId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADFILE\"\n      }),\n      onClick: () => this.onDownloadClick(downloadId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCloudDownloadAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 65\n      }\n    }))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_BIOLOGICALMATERIALTYPE\",\n      message: \"Biological Material Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.sbiomaterialtype))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PROJECTNAME\",\n      message: \"Project Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.sprojectname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REQUESTID\",\n      message: \"Request Id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.srequestid))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_TESTINGMETHOD\",\n      message: \"Method used for testing\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.stestingmethod))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PREPARATIONMETHOD\",\n      message: \"Method used for preparation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.spreparationmethod))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_STORAGECONDITION\",\n      message: \"Storage Condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.sstorageconditionname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_INVESTIGATORNAME\",\n      message: \"Principal Investigator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 61\n      }\n    }, \" \", this.props.Login.masterData.SelectedRetrievalCertificate.sinvestigatorname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ORGANIZATIONADDRESS\",\n      message: \"Organization Address\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 61\n      }\n    }, \" \", this.props.Login.masterData.SelectedRetrievalCertificate.sorganizationaddress))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_PHONENO\",\n      message: \"Phone no\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.sphoneno))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_EMAILID\",\n      message: \"Email Id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.semail))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RETRIEVALCERTIFICATEDATE\",\n      message: \"Material Certificate Date\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.sretrievalcertificatedate && this.props.Login.masterData.SelectedRetrievalCertificate.sretrievalcertificatedate.length > 1 ? this.props.Login.masterData.SelectedRetrievalCertificate.sretrievalcertificatedate.substring(0, 10) : \"-\"))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_COMMENTS\",\n      message: \"Comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedRetrievalCertificate.scomment)))))) : \"\"))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam || [],\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddRetrievalCertificate, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        formatMessage: this.props.intl.formatMessage,\n        projectList: this.props.Login.projectList || [],\n        Users: true,\n        storageconditionList: this.props.Login.storageconditionList || [],\n        currentTime: this.props.Login.currentTime || [],\n        selectedRetrievalCertificate: this.props.Login.masterData.SelectedRetrievalCertificate || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  filterColumnData,\n  updateStore,\n  getRetrievalCertificateForFilter,\n  getRetrievalCertificateComboService,\n  getProjectBasedUsers,\n  getRetrievalCertificateDetail,\n  reloadRetrievalCertificate,\n  reportRetrievalCetificate\n})(injectIntl(RetrievalCertificate));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/storagemanagement/RetrievalCertificate.jsx"],"names":["React","Row","Col","Card","Nav","FormGroup","FormLabel","FontAwesomeIcon","faPencilAlt","faTrashAlt","faThumbsUp","faCloudDownloadAlt","faUserLock","faClock","faCheckCircle","faChartPie","faCheck","connect","injectIntl","FormattedMessage","toast","callService","crudMaster","validateEsignCredential","updateStore","filterColumnData","getRetrievalCertificateForFilter","getRetrievalCertificateComboService","getProjectBasedUsers","getRetrievalCertificateDetail","reloadRetrievalCertificate","reportRetrievalCetificate","ReadOnlyText","ContentPanel","constructOptionList","getControlMap","showEsign","validateEmail","validatePhoneNumber","validateTwoDigitDate","convertDateValuetoString","formatInputDate","ListMaster","SlideOutModal","Esign","DEFAULT_RETURN","BreadcrumbComponent","ListWrapper","transactionStatus","REPORTTYPE","Affix","ConfirmMessage","RetrievalCertificateFilter","AddRetrievalCertificate","mapStateToProps","state","Login","RetrievalCertificate","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","ConfirmDelete","deleteParam","deleteID","confirmMessage","confirm","intl","formatMessage","id","deleteRecord","nControlcode","objdate","masterData","FromDate","ToDate","userInfo","fromDate","toDate","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","SelectedRetrievalCertificate","nretrievalcertificatecode","fetchUrl","fecthInputObject","userinfo","inputParam","classUrl","methodUrl","displayName","screenName","inputData","operation","dataState","userRoleControlRights","nformcode","updateInfo","typeName","data","loadEsign","screenData","openModal","openFilter","showFilter","closeFilter","onFilterSubmit","searchRef","current","value","selectedRecord","undefined","obj","currentDate","reloadData","onCompleteClick","completeId","Value","saveType","esignNeeded","onCheckClick","checkId","onApproveClick","approveId","onDownloadClick","ncontrolCode","nreporttypecode","CONTROLBASED","ncontrolcode","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","closeModal","selectedId","onComboChange","comboData","fieldName","caseNo","item","nprojectmastercode","onInputOnChange","event","optional","name","target","type","checked","handleDateChange","dateName","dateValue","onSaveClick","formRef","JSON","parse","stringify","retrievalcertificateFieldList","map","ntranssitecode","warn","onTabChange","tabProps","isOpen","masterStatus","error","userLogged","selectedRetrievalCertificate","controlMap","Map","showAccordian","createRef","getDerivedStateFromProps","render","userStatusCSS","ntransactionstatus","APPROVED","COMPLETED","CHECKED","addId","has","get","editId","downloadId","deleteId","filterParam","unchangeList","searchFieldList","validationColumnList","mandatoryFields","forEach","mandatory","push","breadCrumbDataDate","breadCrumbData","breadCrumbFrom","breadCrumbto","length","searchedData","retrievalcertificate","sretrievalcertificateno","stransdisplaystatus","indexOf","sbiomaterialtype","sprojectname","srequestid","stestingmethod","spreparationmethod","sstorageconditionname","sinvestigatorname","sorganizationaddress","sphoneno","semail","sretrievalcertificatedate","substring","scomment","projectList","storageconditionList","currentTime","componentDidUpdate","previousProps","Object","values","generateBreadCrumData","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faTrashAlt, faThumbsUp,faCloudDownloadAlt, faUserLock, faClock, faCheckCircle, faChartPie, faCheck } from '@fortawesome/free-solid-svg-icons';//,faUserTimes, faTrash\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, filterColumnData ,getRetrievalCertificateForFilter, getRetrievalCertificateComboService,\r\n    getProjectBasedUsers,getRetrievalCertificateDetail,reloadRetrievalCertificate,reportRetrievalCetificate\r\n} from '../../actions';\r\nimport { ReactComponent as CheckCertificate} from '../../assets/image/Check Certificate.svg';\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport { constructOptionList, getControlMap, showEsign, validateEmail, validatePhoneNumber, validateTwoDigitDate, convertDateValuetoString, formatInputDate } from '../../components/CommonScript';//searchData, sortData,\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\n\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { transactionStatus,REPORTTYPE } from '../../components/Enumeration';\r\nimport { Affix } from 'rsuite';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport RetrievalCertificateFilter from './RetrievalCertificateFilter';\r\nimport AddRetrievalCertificate from './AddRetrievalCertificate';\r\n// import ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass RetrievalCertificate extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // };\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            sidebarview: false,\r\n            screenName: undefined,\r\n            userLogged: true,\r\n            selectedRetrievalCertificate: undefined,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.retrievalcertificateFieldList = ['sretrievalcertificateno','sbiomaterialtype', 'nprojectmastercode', 'srequestid',\r\n            'stestingmethod', 'spreparationmethod', 'nstorageconditioncode', 'sinvestigatorname', 'sorganizationaddress', 'sphoneno','semail','dretrievalcertificatedate','scomment'];//'nmahcode',\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })          \r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n                        //console.log('screen name:',this.props.Login.screenName,'operation ;',this.props.Login.operation)\r\n                        //console.log('selected r :', this.props.Login.inputParam)\r\n        \r\n                        let userStatusCSS = \"outline-secondary\";\r\n\r\n                        if (this.props.Login.masterData.SelectedRetrievalCertificate&&this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.APPROVED) {\r\n\r\n                            userStatusCSS = \"outline-success\";\r\n                \r\n                        }\r\n                \r\n                        else if (this.props.Login.masterData.SelectedRetrievalCertificate && this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.COMPLETED) {\r\n                \r\n                            userStatusCSS = \"outline-correction\";\r\n                \r\n                        }\r\n                        else if (this.props.Login.masterData.SelectedRetrievalCertificate && this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.CHECKED) {\r\n                \r\n                            userStatusCSS = \"outline-danger\";\r\n\r\n                        }\r\n\r\n        const addId = this.state.controlMap.has(\"AddRetrievalCertificate\") && this.state.controlMap.get(\"AddRetrievalCertificate\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditRetrievalCertificate\") && this.state.controlMap.get(\"EditRetrievalCertificate\").ncontrolcode;\r\n        const completeId = this.state.controlMap.has(\"CompleteRetrievalCertificate\") && this.state.controlMap.get(\"CompleteRetrievalCertificate\").ncontrolcode\r\n        const checkId = this.state.controlMap.has(\"CheckRetrievalCertificate\") && this.state.controlMap.get(\"CheckRetrievalCertificate\").ncontrolcode\r\n        const approveId = this.state.controlMap.has(\"ApproveRetrievalCertificate\") && this.state.controlMap.get(\"ApproveRetrievalCertificate\").ncontrolcode\r\n        const downloadId = this.state.controlMap.has(\"DownloadRetrievalCertificate\") && this.state.controlMap.get(\"DownloadRetrievalCertificate\").ncontrolcode\r\n\r\n        const deleteId = this.state.controlMap.has(\"DeleteRetrievalCertificate\") && this.state.controlMap.get(\"DeleteRetrievalCertificate\").ncontrolcode;\r\n        const deleteParam = { operation: \"delete\" };\r\n        let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\r\n            this.state.selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate),\r\n            this.props.Login.userInfo)\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        const filterParam = {\r\n            inputListName: \"RetrievalCertificate\",\r\n            selectedObject: \"SelectedRetrievalCertificate\",\r\n            primaryKeyField: \"nretrievalcertificatecode\",\r\n            fetchUrl: \"retrievalcertificate/getRetrievalCertificate\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo, fromDate, toDate },\r\n            masterData: this.props.Login.masterData,\r\n            unchangeList: [\"FromDate\", \"ToDate\"],\r\n            searchFieldList: ['sretrievalcertificateno','sbiomaterialtype', 'sprojectname', 'srequestid',\r\n            'stestingmethod', 'spreparationmethod', 'sstorageconditionname', 'sinvestigatorname', 'sorganizationaddress', 'sphoneno','semail','dretrievalcertificatedate','scomment']\r\n\r\n\r\n        };\r\n        this.validationColumnList = [\r\n            { \"idsName\": \"IDS_BIOLOGICALMATERIALTYPE\", \"dataField\": \"sbiomaterialtype\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_PROJECTNAME\", \"dataField\": \"nprojectmastercode\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_REQUESTID\", \"dataField\": \"srequestid\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_TESTINGMETHOD\", \"dataField\": \"stestingmethod\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_PREPARATIONMETHOD\", \"dataField\": \"spreparationmethod\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_STORAGECONDITION\", \"dataField\": \"nstorageconditioncode\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_INVESTIGATORNAME\", \"dataField\": \"sinvestigatorname\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n          //  { \"idsName\": \"IDS_PHONE\", \"dataField\": \"sphoneno\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n          //  { \"idsName\": \"IDS_EMAILID\", \"dataField\": \"semail\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            { \"idsName\": \"IDS_RETRIEVALCERTIFICATEDATE\", \"dataField\": \"dretrievalcertificatedate\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\" },\r\n           // { \"idsName\": \"IDS_ORGANIZATIONADDRESS\", \"dataField\": \"sorganizationaddress\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n          //  { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomment\", \"width\": \"150px\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n        ]\r\n        const mandatoryFields = [];\r\n        this.validationColumnList.forEach(item => item.mandatory === true ?\r\n            mandatoryFields.push(item) : \"\"\r\n        );\r\n        let breadCrumbDataDate = convertDateValuetoString(this.props.Login.masterData && this.props.Login.masterData.FromDate,\r\n            this.props.Login.masterData && this.props.Login.masterData.ToDate,\r\n            this.props.Login.userInfo)\r\n\r\n        const breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": breadCrumbDataDate.breadCrumbFrom\r\n            },\r\n            {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": breadCrumbDataDate.breadCrumbto\r\n            }\r\n        ];\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                   \r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.state.sidebarview ? '4' : \"2\"}`}>\r\n                            <span onClick= {()=>this.setState({sidebarview:!this.state.sidebarview})} className='sidebar-view-btn'>\r\n                                {!this.state.sidebarview ?\r\n                                    <i class=\"fa fa-less-than\"></i> :\r\n                                    <i class=\"fa fa-greater-than\"></i> \r\n                                }\r\n                            </span>\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"IDS_RETRIEVALCERTIFICATE\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.RetrievalCertificate}\r\n                                getMasterDetail={(retrievalcertificate) => this.props.getRetrievalCertificateDetail(retrievalcertificate, fromDate, toDate, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedRetrievalCertificate}\r\n                                primaryKeyField=\"nretrievalcertificatecode\"\r\n                                mainField=\"sretrievalcertificateno\"\r\n                                firstField=\"sprojectname\"\r\n                                secondField=\"stransdisplaystatus\"\r\n                                isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={false}\r\n                                openModal={() => this.props.getRetrievalCertificateComboService(\"IDS_RETRIEVALCERTIFICATE\", \"create\", \"nretrievalcertificatecode\", null, this.props.Login.masterData, this.props.Login.userInfo, addId)}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n\r\n\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_RETRIEVALCERTIFICATE\":\r\n                                            <RetrievalCertificateFilter\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                fromDate={fromDate}\r\n                                                toDate={toDate}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n\r\n                       \r\n                        <Col md={`${!this.state.sidebarview ? '8' : \"10\"}`}>\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.RetrievalCertificate && this.props.Login.masterData.RetrievalCertificate.length > 0 && this.props.Login.masterData.SelectedRetrievalCertificate ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title>\r\n                                                    <h1 className=\"product-title-main\">{this.props.Login.masterData.SelectedRetrievalCertificate.sretrievalcertificateno}</h1>\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle className=\"text-muted font-weight-normal\">\r\n                                                    <Row>\r\n                                                        <Col md={10} className=\"d-flex no-padding\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                       \r\n                                                    <span className={`btn btn-outlined ${userStatusCSS} btn-sm ml-3`}>\r\n                                                        <FormattedMessage id={this.props.Login.masterData ?\r\n                                                        this.props.Login.masterData.SelectedRetrievalCertificate ? \r\n                                                        this.props.Login.masterData.SelectedRetrievalCertificate.stransdisplaystatus:\"\":\"\"} />\r\n                                                   </span>\r\n\r\n                                                   </h2>\r\n                                                        </Col>\r\n                                                        <Col md={2}>\r\n                                                            <div className=\"d-flex product-category float-right icon-group-wrap\">\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                    onClick={() => this.props.getRetrievalCertificateComboService(\"IDS_RETRIEVALCERTIFICATE\", \"update\", \"nretrievalcertificatecode\", this.props.Login.masterData.SelectedRetrievalCertificate.nretrievalcertificatecode, this.props.Login.masterData, this.props.Login.userInfo, editId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt} title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                                </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" name=\"deletemethodname\"\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            \r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                            onClick={() => this.ConfirmDelete(deleteParam,deleteId)}\r\n                                                        >\r\n                                                            <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            \r\n                                                        </Nav.Link>\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}\r\n                                                                    onClick={() => this.onCompleteClick(completeId)}\r\n                                                                >\r\n                                                               <FontAwesomeIcon icon={faCheckCircle}/>\r\n                                                                </Nav.Link> \r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(checkId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CHECK\" })}\r\n                                                                    onClick={() => this.onCheckClick(checkId)}\r\n                                                                >\r\n                                                                {/* <FontAwesomeIcon icon={faCheck} /> */}\r\n                                                                <CheckCertificate/>\r\n                                                                </Nav.Link> \r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                    onClick={() => this.onApproveClick(approveId)}\r\n                                                                >\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                                </Nav.Link> \r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(downloadId) === -1}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\r\n                                                                    onClick={() => this.onDownloadClick(downloadId)}\r\n                                                                >\r\n                                                                <FontAwesomeIcon icon={faCloudDownloadAlt} />\r\n                                                                </Nav.Link> \r\n                                                            </div>\r\n\r\n                                                        </Col>\r\n                                                    </Row>\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Row>\r\n                                                <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_BIOLOGICALMATERIALTYPE\" message=\"Biological Material Type\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.sbiomaterialtype}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_PROJECTNAME\" message=\"Project Name\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.sprojectname}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_REQUESTID\" message=\"Request Id\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.srequestid}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_TESTINGMETHOD\" message=\"Method used for testing\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.stestingmethod}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_PREPARATIONMETHOD\" message=\"Method used for preparation\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.spreparationmethod}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_STORAGECONDITION\" message=\"Storage Condition\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.sstorageconditionname}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_INVESTIGATORNAME\" message=\"Principal Investigator\" /></FormLabel>\r\n                                                            <ReadOnlyText> {this.props.Login.masterData.SelectedRetrievalCertificate.sinvestigatorname}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_ORGANIZATIONADDRESS\" message=\"Organization Address\" /></FormLabel>\r\n                                                            <ReadOnlyText> {this.props.Login.masterData.SelectedRetrievalCertificate.sorganizationaddress}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_PHONENO\" message=\"Phone no\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.sphoneno}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_EMAILID\" message=\"Email Id\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.semail}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_RETRIEVALCERTIFICATEDATE\" message=\"Material Certificate Date\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.sretrievalcertificatedate && \r\n                                                            this.props.Login.masterData.SelectedRetrievalCertificate.sretrievalcertificatedate.length > 1 ? \r\n                                                            this.props.Login.masterData.SelectedRetrievalCertificate.sretrievalcertificatedate.substring(0,10)\r\n                                                        :\"-\"}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={4}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_COMMENTS\" message=\"Comment\" /></FormLabel>\r\n                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedRetrievalCertificate.scomment}</ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n\r\n                                                </Row>\r\n                                             \r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam || []}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            :\r\n                            <AddRetrievalCertificate\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                projectList={this.props.Login.projectList || []}Users\r\n                                storageconditionList={this.props.Login.storageconditionList || []}\r\n                                currentTime={this.props.Login.currentTime || []}\r\n                                selectedRetrievalCertificate={this.props.Login.masterData.SelectedRetrievalCertificate || {}}\r\n                                operation={this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    ConfirmDelete = (deleteParam,deleteID) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(deleteParam,deleteID));\r\n    }\r\n\r\n    deleteRecord = (deleteParam, nControlcode) => {\r\n\r\n        let objdate = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n\r\n        let fromDate = objdate.fromDate;\r\n        let toDate = objdate.toDate;\r\n\r\n        const postParam = {\r\n            inputListName: \"RetrievalCertificate\", selectedObject: \"SelectedRetrievalCertificate\",\r\n            primaryKeyField: \"nretrievalcertificatecode\",\r\n            primaryKeyValue: this.props.Login.masterData.SelectedRetrievalCertificate.nretrievalcertificatecode,\r\n            fetchUrl: \"retrievalcertificate/getRetrievalCertificate\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo,\"fromDate\":fromDate,\"toDate\":toDate },\r\n        }\r\n        \r\n\r\n        const inputParam = {\r\n                                classUrl: this.props.Login.inputParam.classUrl,\r\n                                methodUrl: \"RetrievalCertificate\",\r\n                                displayName:this.props.Login.screenName,\r\n                                inputData: {[\"retrievalcertificate\"] :this.props.Login.masterData.SelectedRetrievalCertificate,   \r\n                                \"fromDate\":fromDate,\"toDate\":toDate,\"userinfo\": this.props.Login.userInfo},\r\n                                operation:deleteParam.operation,\r\n            dataState: this.state.dataState ,\r\n            postParam\r\n                            }       \r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, nControlcode)){\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign:true, screenData:{inputParam, masterData:this.props.Login.masterData}, \r\n                    openModal:true, screenName: this.props.Login.screenName && this.props.intl.formatMessage({ id:this.props.Login.screenName}),\r\n                    operation:deleteParam.operation\r\n                    }\r\n                }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else{\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ userRoleControlRights, controlMap });\r\n        }\r\n\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n                this.props.Login.masterData.ToDate,\r\n                this.props.Login.userInfo);\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_FROM\",\r\n                    \"value\": obj.breadCrumbFrom\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TO\",\r\n                    \"value\": obj.breadCrumbto\r\n                },\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n\r\n        let inputData = [];\r\n        this.searchRef.current.value = \"\";\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n       // if (isFilterSubmit) {\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\r\n                fromDate = selectedRecord[\"fromdate\"];\r\n            }\r\n            if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\r\n                toDate = selectedRecord[\"todate\"];\r\n            }\r\n      //  }\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                currentDate: null\r\n            },\r\n            classUrl: \"retrievalcertificate\",\r\n            methodUrl: \"RetrievalCertificate\",\r\n            displayName: \"IDS_RETRIEVALCERTIFICATE\",\r\n\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.getRetrievalCertificateForFilter(inputParam);\r\n        // }\r\n      }\r\n    reloadData = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                currentDate: null\r\n            },\r\n            classUrl: \"retrievalcertificate\",\r\n            methodUrl: \"RetrievalCertificate\",\r\n            displayName: \"IDS_RETRIEVALCERTIFICATE\",\r\n\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.reloadRetrievalCertificate(inputParam);\r\n    }\r\n\r\n    onCompleteClick = (completeId) => {\r\n       // if(this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus !== transactionStatus.COMPLETED){\r\n       // const ncontrolCode = this.state.controlMap.has(\"CompleteRetrievalCertificate\") && this.state.controlMap.get(\"CompleteRetrievalCertificate\").ncontrolcode\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        //add               \r\n        let postParam = undefined;\r\n        inputData[\"retrievalcertificate\"] = { \"nretrievalcertificatecode\": this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"] ? this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"].Value : \"\" };\r\n        inputData[\"retrievalcertificate\"] = this.props.Login.masterData.SelectedRetrievalCertificate;\r\n\r\n        postParam = { inputListName: \"RetrievalCertificate\", selectedObject: \"SelectedRetrievalCertificate\", primaryKeyField: \"nretrievalcertificatecode\" };\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate, toDate,\r\n            },\r\n            classUrl: 'retrievalcertificate',\r\n            methodUrl: \"RetrievalCertificate\",\r\n            inputData: inputData,\r\n            operation: \"complete\", postParam\r\n        }\r\n        let saveType;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },openModal:true, saveType, operation: \"complete\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    // }\r\n    // else{\r\n    //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTRECORD\"}));\r\n    // }\r\n\r\n    }\r\n    onCheckClick = (checkId) => {\r\n      //  if(this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus !== transactionStatus.COMPLETED){\r\n       // const ncontrolCode = this.state.controlMap.has(\"CompleteRetrievalCertificate\") && this.state.controlMap.get(\"CompleteRetrievalCertificate\").ncontrolcode\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        //add               \r\n        let postParam = undefined;\r\n        inputData[\"retrievalcertificate\"] = { \"nretrievalcertificatecode\": this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"] ? this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"].Value : \"\" };\r\n        inputData[\"retrievalcertificate\"] = this.props.Login.masterData.SelectedRetrievalCertificate;\r\n\r\n        postParam = { inputListName: \"RetrievalCertificate\", selectedObject: \"SelectedRetrievalCertificate\", primaryKeyField: \"nretrievalcertificatecode\" };\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate, toDate,\r\n            },\r\n            classUrl: 'retrievalcertificate',\r\n            methodUrl: \"RetrievalCertificate\",\r\n            inputData: inputData,\r\n            operation: \"check\", postParam\r\n        }\r\n        let saveType;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, checkId);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, openModal:true,saveType, operation: \"check\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    // }\r\n    // else{\r\n    //     toast.warn(this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.CONDUCTED ? \"IDS_TESTTRAININGALREADYCONDUCTED\" : \"IDS_TESTTRAININGALREADYCOMPLETED\"}));\r\n    // }\r\n\r\n    }\r\n    onApproveClick = (approveId) => {\r\n        //if(this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus !== transactionStatus.COMPLETED){\r\n       // const ncontrolCode = this.state.controlMap.has(\"CompleteRetrievalCertificate\") && this.state.controlMap.get(\"CompleteRetrievalCertificate\").ncontrolcode\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        //add               \r\n        let postParam = undefined;\r\n        inputData[\"retrievalcertificate\"] = { \"nretrievalcertificatecode\": this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"] ? this.props.Login.masterData.SelectedRetrievalCertificate[\"nretrievalcertificatecode\"].Value : \"\" };\r\n        inputData[\"retrievalcertificate\"] = this.props.Login.masterData.SelectedRetrievalCertificate;\r\n\r\n        postParam = { inputListName: \"RetrievalCertificate\", selectedObject: \"SelectedRetrievalCertificate\", primaryKeyField: \"nretrievalcertificatecode\" };\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                fromDate, toDate,\r\n            },\r\n            classUrl: 'retrievalcertificate',\r\n            methodUrl: \"RetrievalCertificate\",\r\n            inputData: inputData,\r\n            operation: \"approve\", postParam\r\n        }\r\n        let saveType;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, approveId);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },openModal:true, saveType, operation: \"approve\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    // }\r\n    // else{\r\n    //     toast.warn(this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedRetrievalCertificate.ntransactionstatus === transactionStatus.CONDUCTED ? \"IDS_TESTTRAININGALREADYCONDUCTED\" : \"IDS_TESTTRAININGALREADYCOMPLETED\"}));\r\n    // }\r\n\r\n    }\r\n\r\n    onDownloadClick = (ncontrolCode) => {\r\n            const inputParam = {\r\n                inputData: {\r\n                    classUrl: 'retrievalcertificate',\r\n                    methodUrl: \"RetrievalReportCertificate\",\r\n                    operation: \"report\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nreporttypecode: REPORTTYPE.CONTROLBASED,\r\n                    ncontrolcode: ncontrolCode,\r\n                    nretrievalcertificatecode:this.props.Login.masterData.SelectedRetrievalCertificate && this.props.Login.masterData.SelectedRetrievalCertificate.nretrievalcertificatecode,\r\n                    \r\n                },\r\n            }\r\n            this.props.reportRetrievalCetificate(inputParam['inputData']);\r\n       \r\n    }\r\n\r\n   \r\n\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\"\r\n                || this.props.Login.operation === \"complete\" || this.props.Login.operation === \"check\"\r\n                  || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\";\r\n                selectedRecord['esigncomments'] = \"\";\r\n                selectedRecord['esignreason']=\"\";\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName,caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        //selectedRecord[fieldName] = comboData;\r\n        if (comboData !== null) {\r\n            if (fieldName === \"nprojectmastercode\") {\r\n              //  if (selectedRecord&&selectedRecord[\"nprojectmastercode\"]&&selectedRecord[\"nprojectmastercode\"].value!==comboData.value) {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.props.getProjectBasedUsers(\r\n                        comboData.item.nprojectmastercode,\r\n                        this.props.Login.userInfo,\r\n                        selectedRecord,\r\n                        this.props.Login.screenName\r\n                    );\r\n               // }\r\n            }\r\n            else {\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n                 \r\n            \r\n        }\r\n    }\r\n\r\n    \r\n    onInputOnChange = (event, optional,name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 1 : 2;\r\n            }\r\n        } else if (event.target.type === 'select-one') {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        } else {\r\n            if (event.target.name === \"sphoneno\") {\r\n                if (event.target.value !== \"\") {\r\n                    event.target.value = validatePhoneNumber(event.target.value);\r\n                    selectedRecord[event.target.name] = event.target.value !== \"\" ? event.target.value : selectedRecord[event.target.name];\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n\r\n        let inputData = [];\r\n        if (this.state.selectedRecord['semail'] && this.state.selectedRecord['semail'] !== \"\" && this.state.selectedRecord['semail'] !== \"null\" ? validateEmail(this.state.selectedRecord[\"semail\"]) : true) {\r\n\r\n            inputData[\"ncontrolcode\"] = this.props.Login.ncontrolCode;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n\r\n            let fromDate = obj.fromDate;\r\n            let toDate = obj.toDate;\r\n            inputData[\"fromDate\"] = fromDate;\r\n            inputData[\"toDate\"] = toDate;\r\n\r\n            let postParam = undefined;\r\n        \r\n            if (this.props.Login.operation === \"update\") {\r\n                // edit\r\n                postParam = { inputListName: \"RetrievalCertificate\", selectedObject: \"SelectedRetrievalCertificate\", primaryKeyField: \"nretrievalcertificatecode\" };\r\n                inputData[\"retrievalcertificate\"] = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\r\n\r\n                this.retrievalcertificateFieldList.map(item => {\r\n                    return inputData[\"retrievalcertificate\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n                })\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"retrievalcertificate\"] = { \"nsitecode\": this.props.Login.userInfo.ntranssitecode };\r\n\r\n\r\n                this.retrievalcertificateFieldList.map(item => {\r\n                    return inputData[\"retrievalcertificate\"][item] = this.state.selectedRecord[item]\r\n                });\r\n\r\n            }\r\n            if (this.state.selectedRecord[\"dretrievalcertificatedate\"]) {\r\n                inputData[\"retrievalcertificate\"][\"dretrievalcertificatedate\"] = formatInputDate(\r\n                    this.state.selectedRecord[\"dretrievalcertificatedate\"],\r\n                    false\r\n                );\r\n            }\r\n\r\n            inputData[\"retrievalcertificate\"][\"nstorageconditioncode\"] = this.state.selectedRecord[\"nstorageconditioncode\"] ? this.state.selectedRecord[\"nstorageconditioncode\"].value : \"-1\";\r\n            inputData[\"retrievalcertificate\"][\"nprojectmastercode\"] = this.state.selectedRecord[\"nprojectmastercode\"] ? this.state.selectedRecord[\"nprojectmastercode\"].value : \"-1\";\r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    fromDate, toDate,\r\n                },\r\n                classUrl: \"retrievalcertificate\", //this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"RetrievalCertificate\",\r\n                inputData: inputData,\r\n                operation: this.props.Login.operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (\r\n                showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\")\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALIDEMAIL\" }));\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    \r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,filterColumnData ,\r\n    updateStore, getRetrievalCertificateForFilter, getRetrievalCertificateComboService, getProjectBasedUsers, getRetrievalCertificateDetail,\r\n    reloadRetrievalCertificate,reportRetrievalCetificate\r\n})(injectIntl(RetrievalCertificate));\r\n\r\n"]},"metadata":{},"sourceType":"module"}