{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageLocation.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled';\nimport ReactTooltip from 'react-tooltip';\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddTreeview from './AddTreeview';\nimport AddTreeProperties from './AddTreeProperties';\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport { transactionStatus } from '../../components/Enumeration';\n\nclass SampleStorageLocation extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onChange = event => {\n      this.setState({\n        panes: event.newState\n      });\n    };\n\n    this.addChildNode = (e, clickedItem) => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.items = item.items || [];\n          item.items.push({\n            id: uuid(),\n            text: this.props.intl.formatMessage({\n              id: \"IDS_LABEL\"\n            }),\n            expanded: true,\n            editable: false,\n            locationlastnode: false,\n            containerfirstnode: false,\n            containerlastnode: false\n          });\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.equalNode = (e, clickedItem) => {\n      let parentItem = {};\n      let parentFound = false;\n      let newData = [...this.state.treeData];\n      mapTree(this.state.treeData, \"items\", item => {\n        if (item.items) {\n          if (parentFound) {\n            parentItem = item;\n            parentFound = false;\n          }\n        }\n\n        if (item.id === clickedItem.id) {\n          parentFound = true;\n        }\n\n        return item;\n      });\n\n      if (parentItem.text === undefined) {\n        newData.push({\n          id: uuid(),\n          text: this.props.intl.formatMessage({\n            id: \"IDS_LABEL\"\n          }),\n          expanded: true,\n          editable: false,\n          locationlastnode: false,\n          containerfirstnode: false,\n          containerlastnode: false\n        });\n        this.setState({\n          treeData: newData\n        });\n      } else {\n        newData = mapTree(this.state.treeData, \"items\", item => {\n          if (item.id === parentItem.id) {\n            item.items.push({\n              id: uuid(),\n              text: this.props.intl.formatMessage({\n                id: \"IDS_LABEL\"\n              }),\n              expanded: true,\n              editable: false,\n              locationlastnode: false,\n              containerfirstnode: false,\n              containerlastnode: false\n            });\n          }\n\n          return item;\n        });\n        this.setState({\n          treeData: newData\n        });\n      }\n    };\n\n    this.deleteNode = clickedItem => {\n      const newData = removeItems(this.state.treeData, \"items\", item => {\n        return item.id === clickedItem.id;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.editRecord = (e, clickedItem) => {\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: false,\n          selectedRecord: {}\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.itemRender = props => {\n      if (this.state.toggleAction) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item.editable ? /*#__PURE__*/React.createElement(Form.Group, {\n          className: \"k-editable-text-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Form.Control, {\n          id: \"nodename\",\n          name: \"nodename\",\n          type: \"text\",\n          onKeyDown: e => e.stopPropagation(),\n          value: props.item.text,\n          autoFocus: true,\n          autoComplete: \"off\",\n          onChange: e => this.handleChange(e, props.item),\n          onBlur: e => this.handleBlur(e, props.item),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 29\n          }\n        })) : /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }\n        }, props.item.text));\n      } else {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, props.item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                            ${props.item.editable ? \"active-node\" : \"\"}\n                            ${props.item.expanded ? \"expand-node\" : \"collapse-node\"}\n                            `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 29\n          }\n        }, props.item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 66\n          }\n        }) : props.item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 67\n          }\n        }) : props.item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 72\n          }\n        }) : props.item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 67\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 109\n          }\n        }), props.item.text), props.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level1\",\n          onClick: e => {\n            e.stopPropagation();\n            this.equalNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-level2\",\n          onClick: e => {\n            e.stopPropagation();\n            this.addChildNode(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-edit k-i-pencil\",\n          onClick: e => {\n            e.stopPropagation();\n            this.editRecord(e, props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 41\n          }\n        }), !props.item.isRoot ? /*#__PURE__*/React.createElement(\"span\", {\n          className: \"k-icon k-i-delete\",\n          onClick: e => {\n            e.stopPropagation();\n            this.deleteNode(props.item);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 45\n          }\n        }) : null) : null) : \"\");\n      }\n    };\n\n    this.onItemClick = event => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.onExpandChange = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.itemRenderView = clickedItem => {\n      let item = clickedItem.item;\n\n      if (!this.state.toggleActionView) {\n        return /*#__PURE__*/React.createElement(React.Fragment, null, clickedItem.item ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: `normal-node\n                        ${item.selected ? \"active-node\" : \"\"}\n                        ${item.expanded ? \"expand-node\" : \"collapse-node\"}\n                        `,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 29\n          }\n        }, item.containerfirstnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBoxOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 60\n          }\n        }) : item.locationlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faLocationArrow,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 61\n          }\n        }) : item.containerlastnode ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 66\n          }\n        }) : item.expanded ? /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolderOpen,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 61\n          }\n        }) : /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faFolder,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 103\n          }\n        }), item.text), clickedItem.item.editable ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"action-icon tree-toggle m-l-half\",\n          onClick: e => this.setProperties(e, clickedItem),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 37\n          }\n        })) : null) : \"\");\n      }\n    };\n\n    this.onItemClickView = event => {\n      // if (this.state.selectedItem) {\n      //     let selectedobj = this.state.selectedItem;\n      //         selectedobj.selected = false\n      //     this.setState({\n      //         selectedItem : selectedobj\n      //     })\n      // }\n      // this.setState({\n      //     selectedItem : event.item\n      // })            \n      let newData = mapTree(this.state.treeDataView, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        } else if (item.id === event.item.id) {\n          item.editable = true;\n        }\n\n        return item;\n      });\n      newData.map(data => {\n        this.clearSelected(data, event.item);\n      });\n      this.setState({\n        treeDataView: newData\n      });\n    };\n\n    this.onExpandChangeView = event => {\n      event.item.expanded = !event.item.expanded;\n      this.forceUpdate();\n    };\n\n    this.setProperties = (event, clickedItem) => {\n      this.props.openPropertyModal(clickedItem);\n    };\n\n    this.handleChange = (e, clickedItem) => {\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.id === clickedItem.id) {\n          item.text = e.target.value;\n        }\n\n        return item;\n      });\n      this.setState({\n        treeData: newData\n      });\n    };\n\n    this.handleBlur = (e, item) => {\n      item.editable = false;\n      this.setState({\n        toggleAction: !this.state.toggleAction\n      });\n    };\n\n    this.onSaveClick = () => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties();\n      } else {\n        this.onSaveSampleStorageLocation();\n      }\n    };\n\n    this.onSaveProperties = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\n        let inputData = [];\n        let jsondata = {};\n        let postParam = undefined;\n        let count = 0;\n\n        if (selectedRecord[\"locationlastnode\"] !== undefined && selectedRecord[\"locationlastnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (selectedRecord[\"containerfirstnode\"] !== undefined && selectedRecord[\"containerfirstnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (selectedRecord[\"containerlastnode\"] !== undefined && selectedRecord[\"containerlastnode\"] === true) {\n          count = count + 1;\n        }\n\n        if (count > 1) {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_SELECTONLYONE\"\n          }));\n        } else {\n          let newData = mapTree(this.state.treeDataView, \"items\", item => {\n            if (item.id === this.props.Login.clickedItem.item.id) {\n              item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\n              item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\n              item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\n            }\n\n            if (item.selected && item.selected === true) {\n              item.selected = false;\n            }\n\n            return item;\n          });\n          postParam = {\n            inputListName: \"sampleStorageLocation\",\n            selectedObject: \"selectedSampleStorageLocation\",\n            primaryKeyField: \"nsamplestoragelocationcode\"\n          };\n          jsondata[\"data\"] = newData;\n          inputData[\"userinfo\"] = this.props.Login.userInfo;\n          inputData[\"sampleStorageVersion\"] = {\n            \"nstatus\": 1\n          };\n          inputData[\"sampleStorageLocation\"] = {\n            \"nstatus\": 1\n          };\n          inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"];\n          inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\n          inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nstoragecategorycode\"];\n          inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n          inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n          inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"update\",\n            saveType,\n            formRef,\n            postParam\n          };\n          const masterData = this.props.Login.masterData; // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          //     const updateInfo = {\n          //         typeName: DEFAULT_RETURN,\n          //         data: {\n          //             loadEsign: true, screenData: { inputParam, masterData }, saveType\n          //         }\n          //     }\n          //     this.props.updateStore(updateInfo);\n          // } else {\n\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\"); // }\n        }\n      }\n    };\n\n    this.onSaveSampleStorageLocation = (saveType, formRef) => {\n      const {\n        selectedRecord\n      } = this.state; // if (selectedRecord[\"nstoragecategorycode\"] && selectedRecord[\"nstoragecategorycode\"] !== undefined) {\n      //     if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\n\n      let inputData = [];\n      let jsondata = {};\n      let postParam = undefined;\n      let countLevels = 0;\n      let newData = mapTree(this.state.treeData, \"items\", item => {\n        if (item.editable === true) {\n          item.editable = false;\n        }\n\n        if (item.expanded === false) {\n          item.expanded = true;\n        }\n\n        countLevels++;\n        return item;\n      }); // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\n\n      if (countLevels > 3) {\n        jsondata[\"data\"] = newData;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sampleStorageLocation\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageVersion\"] = {\n          \"nstatus\": 1\n        };\n        inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\n        inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = selectedRecord[\"nstoragecategorycode\"].value;\n        inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\n\n        if (this.props.Login.operation === \"create\") {\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"create\",\n            saveType,\n            formRef\n          };\n          const masterData = this.props.Login.masterData; // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          //     const updateInfo = {\n          //         typeName: DEFAULT_RETURN,\n          //         data: {\n          //             loadEsign: true, screenData: { inputParam, masterData }, saveType\n          //         }\n          //     }\n          //     this.props.updateStore(updateInfo);\n          // } else {\n          // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");.\n          // }\n\n          this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\n        } else {\n          inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"];\n          inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n          inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n          const inputParam = {\n            classUrl: \"samplestoragelocation\",\n            methodUrl: \"SampleStorageLocation\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            operation: \"update\",\n            saveType,\n            formRef\n          };\n          const masterData = this.props.Login.masterData;\n          this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData); // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          //     const updateInfo = {\n          //         typeName: DEFAULT_RETURN,\n          //         data: {\n          //             loadEsign: true, screenData: { inputParam, masterData }, saveType\n          //         }\n          //     }\n          //     this.props.updateStore(updateInfo);\n          // } else {\n          // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          // }\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_CREATEATLEASTFOURLEVELS\"\n        }));\n      }\n    };\n\n    this.deleteSampleStorageLocation = ncontrolCode => {\n      let inputData = [];\n      inputData[\"sampleStorageVersion\"] = {};\n      inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"];\n      inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"];\n      inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"];\n      const inputParam = {\n        methodUrl: \"SampleStorageLocation\",\n        classUrl: \"samplestoragelocation\",\n        inputData: inputData,\n        operation: \"delete\",\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n      this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData); // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\n      //             screenName: this.props.Login.inputParam.displayName\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      // }\n    };\n\n    this.confirmDelete = ncontrolCode => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteSampleStorageLocation(ncontrolCode));\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (caseNo === 3) {\n        let nfilterStorageCategory = this.state.nfilterStorageCategory || {};\n        nfilterStorageCategory = comboData;\n        this.searchRef.current.value = \"\";\n        this.setState({\n          nfilterStorageCategory\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.state.nfilterStorageCategory.value) {\n        let inputParam = {\n          inputData: {\n            nstoragecategorycode: this.state.nfilterStorageCategory.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterStorageCategory: this.state.nfilterStorageCategory\n          }\n        };\n        this.props.changeStorageCategoryFilter(inputParam, this.props.Login.masterData.filterStorageCategory);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STORAGECATEGORYNOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.onApproveSampleStorageLocation = ncontrolCode => {\n      let locationEnd = false;\n      let storageStart = false;\n      let storageEnd = false;\n      mapTree(this.state.treeDataView, \"items\", item => {\n        if (item.locationlastnode === true) {\n          locationEnd = true;\n        }\n\n        if (item.containerfirstnode === true) {\n          storageStart = true;\n        }\n\n        if (item.containerlastnode === true) {\n          storageEnd = true;\n        }\n\n        return null;\n      });\n\n      if (locationEnd === false) {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTLOCATIONEND\"\n        }));\n        return;\n      }\n\n      if (storageStart === false) {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTSTORAGESTART\"\n        }));\n        return;\n      }\n\n      if (storageEnd === false) {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_PLEASESELECTSTORAGEEND\"\n        }));\n        return;\n      }\n\n      const masterData = this.props.Login.masterData;\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: \"IDS_SAMPLESTORAGELOCATION\",\n        userInfo: this.props.Login.userInfo\n      }; // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData }, openModal: true,\n      //             screenName: this.props.Login.inputParam.displayName\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n\n      this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData); // }\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"samplestoragelocation\",\n        methodUrl: \"SampleStorageLocation\",\n        displayName: \"IDS_SAMPLESTORAGELOCATION\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo) => {\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft);\n    };\n\n    this.openStorageLocation = () => {\n      if (this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0) {\n        this.props.fetchStorageCategory({\n          userInfo: this.props.Login.userInfo,\n          id: uuid(),\n          nfilterStorageCategory: this.state.nfilterStorageCategory\n        });\n      } else {\n        toast.warning(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSTORAGECATEGORY\"\n        }));\n      }\n    };\n\n    this.state = {\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        text: \"root\",\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let {\n      filterData\n    } = this.state;\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      });\n    }\n\n    if (this.props.Login.treeData !== previousProps.Login.treeData) {\n      this.setState({\n        treeData: this.props.Login.treeData\n      });\n    }\n\n    if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n      if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\n        this.setState({\n          treeDataView: JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\n        });\n      }\n    }\n\n    let nfilterStorageCategory = this.state.nStorageCategory || {};\n    let filterStorageCategory = this.state.filterStorageCategory || {};\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\n      filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\n\n      if (filterStorageCategory && filterStorageCategory.length > 0) {\n        nfilterStorageCategory = filterStorageCategory[0];\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\n      nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterStorageCategory,\n        selectedRecord,\n        filterStorageCategory\n      });\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n  clearSelected(innerObj, selectedItem) {\n    if (innerObj.id == selectedItem.id) {\n      innerObj.selected = true;\n    } else {\n      innerObj.selected = false;\n    }\n\n    if (innerObj.items && innerObj.items.length > 0) {\n      innerObj.items.map(childObj => {\n        this.clearSelected(childObj, selectedItem);\n      });\n    }\n\n    return innerObj;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\" // \"value\": this.props.Login.masterData.selectedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\n        //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\n\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"samplestoragelocation/getSelectedSampleStorageLocation\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const mandatoryFields = [{\n      \"idsName\": \"IDS_STORAGECATEGORY\",\n      \"dataField\": \"nstoragecategorycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\",\n      \"dataField\": \"ssamplestoragelocationname\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 866,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 868,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      secondaryInitialSize: 25,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 874,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      paneHeight: this.state.parentHeight,\n      needMultiSelect: false,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageLocation || [],\n      selectedMaster: [this.props.Login.masterData.selectedSampleStorageLocation],\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageLocation(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"ssamplestoragelocationname\",\n      selectedListName: \"selectedSampleStorageLocation\",\n      objectName: \"LocationMaster\",\n      listName: \"IDS_SAMPLESTORAGELOCATION\",\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      needFilter: true,\n      hidePaging: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.openStorageLocation(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915,\n          columnNumber: 49\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.reloadData(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921,\n          columnNumber: 49\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_TESTFILTER\": /*#__PURE__*/React.createElement(StorageCategoryFilter, {\n          filterStorageCategory: this.state.filterStorageCategory || [],\n          nfilterStorageCategory: this.state.nfilterStorageCategory || {},\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 928,\n            columnNumber: 49\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 876,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1 //secondaryInitialSize={400}\n      ,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 943,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 944,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      style: {\n        paddingRight: '0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 945,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      masterList: this.props.Login.masterData.sampleStorageVersion || [],\n      needMultiSelect: false,\n      selectedMaster: [this.props.Login.masterData.selectedSampleStorageVersion],\n      primaryKeyField: \"nsamplestorageversioncode\",\n      getMasterDetail: selectedItem => this.props.getSelectedSampleStorageVersion(selectedItem, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"nversionno\",\n      mainFieldLabel: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      selectedListName: \"selectedSampleStorageVersion\",\n      objectName: \"Version\",\n      listName: \"IDS_SAMPLESTORAGEVersion\",\n      hideSearch: true,\n      needValidation: false,\n      needFilter: false,\n      moreField: [],\n      skip: this.state.detailSkip,\n      take: this.state.detailTake,\n      hidePaging: true,\n      handlePageChange: this.handleDetailPageChange,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '' // actionIcons={\n      //     [\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\n      //             controlname: \"faPencilAlt\",\n      //             objectName: \"detailtoedit\",\n      //             hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      //             onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\n      //         },\n      //         {\n      //             title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n      //             controlname: \"faTrashAlt\",\n      //             objectName: \"mastertodelete\",\n      //             hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      //             onClick: () => this.confirmDelete(deleteId)\n      //         }\n      //     ]\n      // }\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content grid-master tree-view-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 53\n      }\n    }, this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1000,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1001,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 69\n      }\n    }, this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1004,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"action-icons-wrap mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006,\n        columnNumber: 81\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined  outline-secondary btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1009,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DRAFT\",\n      defaultMessage: \"Draft\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1010,\n        columnNumber: 93\n      }\n    })) : this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.RETIRED ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-danger btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_RETIRED\",\n      defaultMessage: \"Retired\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016,\n        columnNumber: 97\n      }\n    })) : /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined outline-success btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1019,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_APPROVED\",\n      defaultMessage: \"Approved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 97\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1025,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ? /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle 1 outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: e => this.onEditSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1027,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 89\n      }\n    })) : /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 \",\n      href: \"#\",\n      hidden: this.state.userRoleControlRights.indexOf(copyId) === -1,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COPY\"\n      }),\n      onClick: e => this.props.copySampleStorageVersion(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1037,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCopy,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1043,\n        columnNumber: 89\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.confirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1047,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 85\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"QB\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(approveId) === -1,\n      \"data-for\": \"tooltip_list_wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVE\"\n      }),\n      onClick: () => this.onApproveSampleStorageLocation(approveId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1061,\n        columnNumber: 85\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(TreeViewEditable, {\n      id: \"samplestoragelocation\",\n      name: \"samplestoragelocation\" // label=\"Sample Storage Location\"\n      ,\n      data: this.state.treeDataView,\n      expandIcons: true,\n      selectField: 'active-node',\n      item: this.itemRenderView,\n      onExpandChange: this.onExpandChangeView,\n      onItemClick: this.onItemClickView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1068,\n        columnNumber: 69\n      }\n    }))) : \"\"))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGELOCATION\"\n      }),\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.loadTreeProperties === true ? [] : mandatoryFields,\n      addComponent: this.props.Login.loadTreeProperties ? /*#__PURE__*/React.createElement(AddTreeProperties, {\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1109,\n          columnNumber: 33\n        }\n      }) : this.state.treeData ? /*#__PURE__*/React.createElement(AddTreeview, {\n        treeData: this.state.treeData,\n        onInputChange: e => this.onInputChange(e),\n        selectedRecord: this.state.selectedRecord || {},\n        itemRender: this.itemRender,\n        onExpandChange: this.onExpandChange,\n        onItemClick: this.onItemClick,\n        onComboChange: this.onComboChange,\n        storageCategoryList: this.props.Login.storageCategoryList || [],\n        isOnlyDraft: this.props.Login.isOnlyDraft,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1114,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1099,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData,\n  changeStorageCategoryFilter,\n  getSelectedSampleStorageLocation,\n  openPropertyModal,\n  editSampleStorageLocation,\n  approveSampleStorageLocation,\n  getSelectedSampleStorageVersion,\n  fetchStorageCategory,\n  copySampleStorageVersion,\n  crudSampleStorageLocation\n})(injectIntl(SampleStorageLocation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageLocation.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","toast","ListMaster","constructOptionList","getControlMap","showEsign","ReadOnlyText","ContentPanel","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","DEFAULT_RETURN","ListWrapper","ProductList","ReactTooltip","uuid","TreeEditable","TreeViewEditable","mapTree","removeItems","ConfirmMessage","AddTreeview","AddTreeProperties","Splitter","TransactionListMaster","BreadcrumbComponent","SplitterLayout","StorageCategoryFilter","transactionStatus","SampleStorageLocation","constructor","props","onChange","event","setState","panes","newState","addChildNode","e","clickedItem","newData","state","treeData","item","id","items","push","text","intl","formatMessage","expanded","editable","locationlastnode","containerfirstnode","containerlastnode","equalNode","parentItem","parentFound","undefined","deleteNode","editRecord","toggleAction","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","root","operation","closeModal","onInputChange","target","type","name","checked","value","itemRender","stopPropagation","handleChange","handleBlur","isRoot","onItemClick","onExpandChange","forceUpdate","itemRenderView","toggleActionView","selected","setProperties","onItemClickView","treeDataView","map","clearSelected","onExpandChangeView","onSaveClick","Login","onSaveProperties","onSaveSampleStorageLocation","saveType","formRef","inputData","jsondata","postParam","count","info","inputListName","selectedObject","primaryKeyField","userInfo","masterData","selectedSampleStorageLocation","selectedSampleStorageVersion","inputParam","classUrl","methodUrl","displayName","countLevels","deleteSampleStorageLocation","ncontrolCode","searchRef","confirmDelete","confirmMessage","confirm","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","skip","take","handleDetailPageChange","onComboChange","comboData","fieldName","caseNo","nfilterStorageCategory","current","openFilter","showFilter","closeFilter","onFilterSubmit","nstoragecategorycode","userinfo","filterStorageCategory","warn","onApproveSampleStorageLocation","locationEnd","storageStart","storageEnd","warning","reloadData","onEditSampleStorageLocation","isOnlyDraft","sampleStorageVersion","length","openStorageLocation","Object","keys","size","scrollable","userRoleControlRights","controlMap","Map","detailSkip","detailTake","settings","selectedItem","createRef","getDerivedStateFromProps","masterStatus","error","componentDidUpdate","previousProps","isComponentUpdated","filterData","nformcode","values","ncontrolcode","JSON","parse","nStorageCategory","filterStorageCategoryMap","get","generateBreadCrumData","innerObj","childObj","componentDidMount","parentHeight","height","clientHeight","firstPane","breadCrumbData","selectedStorageCategoryName","render","addId","has","editId","deleteId","copyId","approveId","filterParam","fetchUrl","fecthInputObject","searchFieldList","mandatoryFields","searchedData","sampleStorageLocation","indexOf","paddingRight","ssamplestoragelocationname","napprovalstatus","DRAFT","RETIRED","storageCategoryList","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddTreeview from './AddTreeview';\r\nimport AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\nclass SampleStorageLocation extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    text: \"root\",\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    onChange = (event) => {\r\n\r\n        this.setState({ panes: event.newState })\r\n\r\n    };\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let isComponentUpdated = false;\r\n        let { filterData } = this.state;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({ controlMap, userRoleControlRights });\r\n        }\r\n\r\n        if (this.props.Login.treeData !== previousProps.Login.treeData) {\r\n            this.setState({\r\n                treeData: this.props.Login.treeData\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion && this.props.Login.masterData.selectedSampleStorageVersion !== undefined) {\r\n                this.setState({\r\n                    treeDataView:\r\n                        JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\r\n                });\r\n            }\r\n        }\r\n        let nfilterStorageCategory = this.state.nStorageCategory || {};\r\n        let filterStorageCategory = this.state.filterStorageCategory || {};\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            const filterStorageCategoryMap = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", 'nstoragecategorycode', 'ascending', false);\r\n            filterStorageCategory = filterStorageCategoryMap.get(\"OptionList\");\r\n            if (filterStorageCategory && filterStorageCategory.length > 0) {\r\n                nfilterStorageCategory = filterStorageCategory[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterStorageCategory !== previousProps.Login.masterData.nfilterStorageCategory) {\r\n            nfilterStorageCategory = this.props.Login.masterData.nfilterStorageCategory;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterStorageCategory, selectedRecord, filterStorageCategory });\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n    addChildNode = (e, clickedItem) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.items = item.items || [];\r\n                item.items.push({\r\n                    id: uuid(),\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                    expanded: true,\r\n                    editable: false,\r\n                    locationlastnode: false,\r\n                    containerfirstnode: false,\r\n                    containerlastnode: false\r\n                });\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    equalNode = (e, clickedItem) => {\r\n        let parentItem = {};\r\n        let parentFound = false;\r\n        let newData = [...this.state.treeData];\r\n        mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.items) {\r\n                if (parentFound) {\r\n                    parentItem = item;\r\n                    parentFound = false;\r\n                }\r\n            }\r\n\r\n            if (item.id === clickedItem.id) {\r\n                parentFound = true;\r\n            }\r\n\r\n            return item;\r\n        });\r\n        if (parentItem.text === undefined) {\r\n            newData.push({\r\n                id: uuid(),\r\n                text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                expanded: true,\r\n                editable: false,\r\n                locationlastnode: false,\r\n                containerfirstnode: false,\r\n                containerlastnode: false\r\n            });\r\n            this.setState({ treeData: newData });\r\n        } else {\r\n            newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n                if (item.id === parentItem.id) {\r\n                    item.items.push({\r\n                        id: uuid(),\r\n                        text: this.props.intl.formatMessage({ id: \"IDS_LABEL\" }),\r\n                        expanded: true,\r\n                        editable: false,\r\n                        locationlastnode: false,\r\n                        containerfirstnode: false,\r\n                        containerlastnode: false\r\n                    });\r\n                }\r\n                return item;\r\n            });\r\n            this.setState({ treeData: newData });\r\n        }\r\n    };\r\n    deleteNode = (clickedItem) => {\r\n        const newData = removeItems(this.state.treeData, \"items\", (item) => {\r\n            return item.id === clickedItem.id;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n    editRecord = (e, clickedItem) => {\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: false, selectedRecord: {}\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    itemRender = (props) => {\r\n        if (this.state.toggleAction) {\r\n            return (\r\n                <>\r\n                    {props.item.editable ? (\r\n                        <Form.Group className=\"k-editable-text-wrap\">\r\n                            <Form.Control\r\n                                id={\"nodename\"}\r\n                                name={\"nodename\"}\r\n                                type=\"text\"\r\n                                onKeyDown={(e) => e.stopPropagation()}\r\n                                value={props.item.text}\r\n                                autoFocus\r\n                                autoComplete=\"off\"\r\n                                onChange={(e) => this.handleChange(e, props.item)}\r\n                                onBlur={(e) => this.handleBlur(e, props.item)}\r\n                            />\r\n                        </Form.Group>\r\n                    ) : (\r\n                        <span>{props.item.text}</span>\r\n                    )}\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                    {props.item ? (\r\n                        <>\r\n                            <span className={`normal-node\r\n                            ${props.item.editable ? \"active-node\" : \"\"}\r\n                            ${props.item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                            `}>\r\n                                {props.item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                    props.item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                        props.item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                            props.item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                {props.item.text}\r\n                            </span>\r\n                            {props.item.editable ? (\r\n                                <>\r\n                                        <span\r\n                                            className=\"action-icon tree-level1\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.equalNode(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                        <span\r\n                                            className=\"action-icon tree-level2\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.addChildNode(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                        <span\r\n                                            className=\"k-icon k-i-edit k-i-pencil\"\r\n                                            onClick={(e) => {\r\n                                                e.stopPropagation();\r\n                                                this.editRecord(e, props.item);\r\n                                            }}\r\n                                        ></span>\r\n                                    {!props.item.isRoot ? (\r\n                                            <span\r\n                                                className=\"k-icon k-i-delete\"\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation();\r\n                                                    this.deleteNode(props.item);\r\n                                                }}\r\n                                            ></span>\r\n                                    ) : null}\r\n                                </>\r\n                            ) : null}\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    onItemClick = (event) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    onExpandChange = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n    itemRenderView = (clickedItem) => {\r\n        let item = clickedItem.item;\r\n        if (!this.state.toggleActionView) {\r\n            return (\r\n                <>\r\n                    {clickedItem.item ? (\r\n                        <>\r\n                            <span className={`normal-node\r\n                        ${item.selected ? \"active-node\" : \"\"}\r\n                        ${item.expanded ? \"expand-node\" : \"collapse-node\"}\r\n                        `} >\r\n                                {item.containerfirstnode ? <FontAwesomeIcon icon={faBoxOpen} /> :\r\n                                    item.locationlastnode ? <FontAwesomeIcon icon={faLocationArrow} /> :\r\n                                        item.containerlastnode ? <FontAwesomeIcon icon={faBox} /> :\r\n                                            item.expanded ? <FontAwesomeIcon icon={faFolderOpen} /> : <FontAwesomeIcon icon={faFolder} />}\r\n                                {item.text}\r\n                            </span>\r\n                            {/* <ul className=\"list-inline mb-0\">\r\n                                <li className=\"list-inline-item mr-3\">{clickedItem.item.text}</li> */}\r\n                            {clickedItem.item.editable ? (\r\n                                <>\r\n                                    {/* <li className=\"list-inline-item\"> */}\r\n                                    <span\r\n                                        className=\"action-icon tree-toggle m-l-half\"\r\n                                        onClick={(e) => this.setProperties(e, clickedItem)}\r\n                                    ></span>\r\n                                    {/* </li> */}\r\n                                </>\r\n                            ) : null}\r\n                            {/* </ul> */}\r\n                        </>\r\n                    ) : (\r\n                        \"\"\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n    };\r\n    onItemClickView = (event) => {\r\n        // if (this.state.selectedItem) {\r\n        //     let selectedobj = this.state.selectedItem;\r\n        //         selectedobj.selected = false\r\n        //     this.setState({\r\n        //         selectedItem : selectedobj\r\n        //     })\r\n        // }\r\n        // this.setState({\r\n        //     selectedItem : event.item\r\n        // })            \r\n\r\n        let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            } else if (item.id === event.item.id) {\r\n                item.editable = true;\r\n            }\r\n            return item;\r\n        });\r\n        newData.map((data) => {\r\n            this.clearSelected(data, event.item)\r\n        })\r\n        this.setState({ treeDataView: newData });\r\n    };\r\n    clearSelected(innerObj, selectedItem) {\r\n        if (innerObj.id == selectedItem.id) {\r\n            innerObj.selected = true;\r\n        } else {\r\n            innerObj.selected = false;\r\n        }\r\n        if (innerObj.items && innerObj.items.length > 0) {\r\n            innerObj.items.map((childObj) => {\r\n                this.clearSelected(childObj, selectedItem)\r\n            })\r\n        }\r\n        return innerObj\r\n    }\r\n    onExpandChangeView = (event) => {\r\n        event.item.expanded = !event.item.expanded;\r\n        this.forceUpdate();\r\n    };\r\n    setProperties = (event, clickedItem) => {\r\n        this.props.openPropertyModal(clickedItem);\r\n    };\r\n\r\n    handleChange = (e, clickedItem) => {\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.id === clickedItem.id) {\r\n                item.text = e.target.value;\r\n            }\r\n            return item;\r\n        });\r\n        this.setState({ treeData: newData });\r\n    };\r\n\r\n    handleBlur = (e, item) => {\r\n        item.editable = false;\r\n        this.setState({ toggleAction: !this.state.toggleAction });\r\n    };\r\n\r\n    onSaveClick = () => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties();\r\n        } else {\r\n            this.onSaveSampleStorageLocation();\r\n        }\r\n    };\r\n    onSaveProperties = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\r\n            let inputData = [];\r\n            let jsondata = {}\r\n            let postParam = undefined;\r\n            let count = 0;\r\n            if (selectedRecord[\"locationlastnode\"] !== undefined && selectedRecord[\"locationlastnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (selectedRecord[\"containerfirstnode\"] !== undefined && selectedRecord[\"containerfirstnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (selectedRecord[\"containerlastnode\"] !== undefined && selectedRecord[\"containerlastnode\"] === true) {\r\n                count = count + 1;\r\n            }\r\n            if (count > 1) {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONE\" }));\r\n            } else {\r\n                let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n                    if (item.id === this.props.Login.clickedItem.item.id) {\r\n                        item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\r\n                        item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\r\n                        item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\r\n                    }\r\n                    if (item.selected && item.selected === true) {\r\n                        item.selected = false;\r\n                    }\r\n                    return item;\r\n                });\r\n\r\n                postParam = { inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n                jsondata[\"data\"] = newData;\r\n                inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n                inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n                inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n                inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n                inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\r\n                inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nstoragecategorycode\"]\r\n                inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n                inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n                inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\r\n\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"update\", saveType, formRef, postParam\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                //     const updateInfo = {\r\n                //         typeName: DEFAULT_RETURN,\r\n                //         data: {\r\n                //             loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                //         }\r\n                //     }\r\n                //     this.props.updateStore(updateInfo);\r\n                // } else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                // }\r\n            }\r\n        }\r\n    }\r\n    onSaveSampleStorageLocation = (saveType, formRef) => {\r\n\r\n        const { selectedRecord } = this.state;\r\n\r\n        // if (selectedRecord[\"nstoragecategorycode\"] && selectedRecord[\"nstoragecategorycode\"] !== undefined) {\r\n        //     if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\r\n\r\n        let inputData = [];\r\n        let jsondata = {}\r\n        let postParam = undefined;\r\n        let countLevels = 0;\r\n\r\n        let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n            if (item.editable === true) {\r\n                item.editable = false;\r\n            }\r\n            if (item.expanded === false) {\r\n                item.expanded = true;\r\n            }\r\n            countLevels++;\r\n            return item;\r\n        });\r\n\r\n        // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n        if (countLevels > 3) {\r\n\r\n\r\n            jsondata[\"data\"] = newData;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n            inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n\r\n            inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\r\n            inputData[\"sampleStorageLocation\"][\"nstoragecategorycode\"] = selectedRecord[\"nstoragecategorycode\"].value;\r\n            inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\r\n\r\n            if (this.props.Login.operation === \"create\") {\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"create\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                //     const updateInfo = {\r\n                //         typeName: DEFAULT_RETURN,\r\n                //         data: {\r\n                //             loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                //         }\r\n                //     }\r\n                //     this.props.updateStore(updateInfo);\r\n                // } else {\r\n                // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");.\r\n                // }\r\n                this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n            } else {\r\n                inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n                inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n                inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n\r\n                const inputParam = {\r\n                    classUrl: \"samplestoragelocation\",\r\n                    methodUrl: \"SampleStorageLocation\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData,\r\n                    operation: \"update\", saveType, formRef\r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n                this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n                // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                //     const updateInfo = {\r\n                //         typeName: DEFAULT_RETURN,\r\n                //         data: {\r\n                //             loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                //         }\r\n                //     }\r\n                //     this.props.updateStore(updateInfo);\r\n                // } else {\r\n                // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                // }\r\n\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_CREATEATLEASTFOURLEVELS\" }));\r\n        }\r\n\r\n    }\r\n\r\n    deleteSampleStorageLocation = (ncontrolCode) => {\r\n        let inputData = [];\r\n        inputData[\"sampleStorageVersion\"] = {};\r\n\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestoragelocationcode\"]\r\n        inputData[\"sampleStorageVersion\"][\"nsamplestorageversioncode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nsamplestorageversioncode\"]\r\n        inputData[\"sampleStorageVersion\"][\"napprovalstatus\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"napprovalstatus\"]\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nstoragecategorycode\"] = this.props.Login.masterData.selectedSampleStorageVersion[\"nstoragecategorycode\"]\r\n\r\n        const inputParam = {\r\n            methodUrl: \"SampleStorageLocation\",\r\n            classUrl: \"samplestoragelocation\",\r\n            inputData: inputData,\r\n            operation: \"delete\", searchRef: this.searchRef\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        this.props.crudSampleStorageLocation(inputParam, this.props.Login.masterData);\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData }, operation: \"delete\", openModal: true,\r\n        //             screenName: this.props.Login.inputParam.displayName\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        // this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        // }\r\n\r\n    }\r\n    confirmDelete = (ncontrolCode) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\",\r\n            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteSampleStorageLocation(ncontrolCode));\r\n    };\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (caseNo === 3) {\r\n\r\n            let nfilterStorageCategory = this.state.nfilterStorageCategory || {}\r\n            nfilterStorageCategory = comboData;\r\n            this.searchRef.current.value = \"\";\r\n            this.setState({ nfilterStorageCategory })\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n\r\n    }\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": this.props.Login.masterData.selectedStorageCategoryName && this.props.Login.masterData.selectedStorageCategoryName !== null ? this.props.Login.masterData.selectedStorageCategoryName : \"NA\"\r\n                    // \"value\": this.props.Login.masterData.selectedSampleStorageLocation ? this.props.Login.masterData.filterStorageCategory && this.props.Login.masterData.filterStorageCategory !== undefined ?\r\n                    //     this.props.Login.masterData.selectedStorageCategoryName : \"NA\" : \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        if (this.state.nfilterStorageCategory.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    nstoragecategorycode: this.state.nfilterStorageCategory.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterStorageCategory: this.state.nfilterStorageCategory\r\n\r\n                }\r\n            }\r\n            this.props.changeStorageCategoryFilter(inputParam, this.props.Login.masterData.filterStorageCategory);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STORAGECATEGORYNOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    onApproveSampleStorageLocation = (ncontrolCode) => {\r\n\r\n        let locationEnd = false;\r\n        let storageStart = false;\r\n        let storageEnd = false;\r\n        mapTree(this.state.treeDataView, \"items\", (item) => {\r\n            if (item.locationlastnode === true) {\r\n                locationEnd = true;\r\n            }\r\n            if (item.containerfirstnode === true) {\r\n                storageStart = true;\r\n            }\r\n            if (item.containerlastnode === true) {\r\n                storageEnd = true;\r\n            }\r\n            return null;\r\n        });\r\n        if (locationEnd === false) {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTLOCATIONEND\" }));\r\n            return;\r\n        }\r\n        if (storageStart === false) {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGESTART\" }));\r\n            return;\r\n        }\r\n        if (storageEnd === false) {\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSTORAGEEND\" }));\r\n            return;\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageLocation\",\r\n            displayName: \"IDS_SAMPLESTORAGELOCATION\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData }, openModal: true,\r\n        //             screenName: this.props.Login.inputParam.displayName\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        this.props.approveSampleStorageLocation(this.props.Login.userInfo, this.props.Login.masterData);\r\n        // }\r\n    }\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"samplestoragelocation\",\r\n            methodUrl: \"SampleStorageLocation\",\r\n            displayName: \"IDS_SAMPLESTORAGELOCATION\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo) => {\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft);\r\n    }\r\n    openStorageLocation = () => {\r\n        if (this.state.nfilterStorageCategory && Object.keys(this.state.nfilterStorageCategory).length !== 0) {\r\n            this.props.fetchStorageCategory({ userInfo: this.props.Login.userInfo, id: uuid(), nfilterStorageCategory: this.state.nfilterStorageCategory });\r\n        }else{\r\n            toast.warning(this.props.intl.formatMessage({ id: \"IDS_SELECTSTORAGECATEGORY\" }));           \r\n        }\r\n    }\r\n    render() {\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"samplestoragelocation/getSelectedSampleStorageLocation\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n        const mandatoryFields = [\r\n            { \"idsName\": \"IDS_STORAGECATEGORY\", \"dataField\": \"nstoragecategorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            { \"idsName\": \"IDS_SAMPLESTORAGELOCATIONNAME\", \"dataField\": \"ssamplestoragelocationname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n        ]\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        : \"\"}\r\n                    <Row noGutters={true}>\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper> */}\r\n                            <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n                                {/* First column */}\r\n                                <TransactionListMaster\r\n                                    paneHeight={this.state.parentHeight}\r\n                                    needMultiSelect={false}\r\n                                    masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.sampleStorageLocation || []}\r\n                                    selectedMaster={[this.props.Login.masterData.selectedSampleStorageLocation]}\r\n                                    primaryKeyField=\"nsamplestoragelocationcode\"\r\n                                    getMasterDetail={(selectedItem) =>\r\n                                        this.props.getSelectedSampleStorageLocation(\r\n                                            selectedItem,\r\n                                            this.props.Login.userInfo, this.props.Login.masterData\r\n                                        )}\r\n                                    inputParam={{\r\n                                        userInfo: this.props.Login.userInfo,\r\n                                        masterData: this.props.Login.masterData\r\n                                    }}\r\n                                    mainField={\"ssamplestoragelocationname\"}\r\n                                    selectedListName=\"selectedSampleStorageLocation\"\r\n                                    objectName=\"LocationMaster\"\r\n                                    listName=\"IDS_SAMPLESTORAGELOCATION\"\r\n                                    filterColumnData={this.props.filterColumnData}\r\n                                    searchListName=\"searchedData\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={filterParam}\r\n                                    showFilter={this.props.Login.showFilter}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    needFilter={true}\r\n                                    hidePaging={false}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                data-for=\"tooltip-common-wrap\"\r\n                                                hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.openStorageLocation()}>\r\n                                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                            </Button>\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                onClick={() => this.reloadData()}\r\n                                                data-for=\"tooltip-common-wrap\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_TESTFILTER\":\r\n                                                <StorageCategoryFilter\r\n                                                    filterStorageCategory={this.state.filterStorageCategory || []}\r\n                                                    nfilterStorageCategory={this.state.nfilterStorageCategory || {}}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n\r\n                                />\r\n\r\n                                {/* End of first column */}\r\n                                <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\r\n                                    customClassName=\"fixed_list_height\">\r\n                                    {/* <PerfectScrollbar> */}\r\n                                        {/* Start of second column */}\r\n                                        <div className=\"card_group\">\r\n                                            <Row>\r\n                                                <Col md={3} style={{ paddingRight: '0' }}>\r\n                                                    {/* Start of version column */}\r\n                                                    <TransactionListMaster\r\n                                                        masterList={this.props.Login.masterData.sampleStorageVersion || []}\r\n                                                        needMultiSelect={false}\r\n                                                        selectedMaster={[this.props.Login.masterData.selectedSampleStorageVersion]}\r\n                                                        primaryKeyField=\"nsamplestorageversioncode\"\r\n                                                        getMasterDetail={(selectedItem) =>\r\n                                                            this.props.getSelectedSampleStorageVersion(\r\n                                                                selectedItem, this.props.Login.userInfo,\r\n                                                                this.props.Login.masterData\r\n                                                            )}\r\n                                                        inputParam={{\r\n                                                            userInfo: this.props.Login.userInfo,\r\n                                                            masterData: this.props.Login.masterData\r\n                                                        }}\r\n                                                        mainField={\"nversionno\"}\r\n                                                        mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                                        selectedListName=\"selectedSampleStorageVersion\"\r\n                                                        objectName=\"Version\"\r\n                                                        listName=\"IDS_SAMPLESTORAGEVersion\"\r\n                                                        hideSearch={true}\r\n                                                        needValidation={false}\r\n                                                        needFilter={false}\r\n                                                        moreField={[]}\r\n                                                        skip={this.state.detailSkip}\r\n                                                        take={this.state.detailTake}\r\n                                                        hidePaging={true}\r\n                                                        handlePageChange={this.handleDetailPageChange}\r\n                                                        splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                    // actionIcons={\r\n                                                    //     [\r\n                                                    //         {\r\n                                                    //             title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                    //             controlname: \"faPencilAlt\",\r\n                                                    //             objectName: \"detailtoedit\",\r\n                                                    //             hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n                                                    //             onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\r\n                                                    //         },\r\n                                                    //         {\r\n                                                    //             title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                    //             controlname: \"faTrashAlt\",\r\n                                                    //             objectName: \"mastertodelete\",\r\n                                                    //             hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\r\n                                                    //             onClick: () => this.confirmDelete(deleteId)\r\n                                                    //         }\r\n                                                    //     ]\r\n                                                    // }\r\n                                                    />\r\n                                                    {/* End of version column */}\r\n                                                </Col>\r\n                                                <Col md={9}>\r\n                                                    {/* Start of detailed content */}\r\n                                                    <ProductList className=\"panel-main-content grid-master tree-view-container\">\r\n                                                        {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\r\n                                                            <Card className=\"border-0\">\r\n                                                                <Card.Header>\r\n                                                                    <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\r\n                                                                    <Card.Subtitle>\r\n                                                                        <div className=\"d-flex product-category\">\r\n                                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                                                <Nav.Link className=\"action-icons-wrap mr-2\">\r\n                                                                                    {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n\r\n                                                                                        <span className={`btn btn-outlined  outline-secondary btn-sm ml-3`}>\r\n                                                                                            <FormattedMessage id={\"IDS_DRAFT\"} defaultMessage=\"Draft\" />\r\n                                                                                        </span>\r\n                                                                                        :\r\n                                                                                        this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.RETIRED ?\r\n\r\n                                                                                            <span className={`btn btn-outlined outline-danger btn-sm ml-3`}>\r\n                                                                                                <FormattedMessage id={\"IDS_RETIRED\"} defaultMessage=\"Retired\" />\r\n                                                                                            </span>\r\n                                                                                            :\r\n                                                                                            <span className={`btn btn-outlined outline-success btn-sm ml-3`}>\r\n                                                                                                <FormattedMessage id={\"IDS_APPROVED\"} defaultMessage=\"Approved\" />\r\n                                                                                            </span>\r\n                                                                                    }\r\n                                                                                </Nav.Link>\r\n                                                                            </h2>\r\n                                                                            <div className=\"d-inline\">\r\n                                                                                {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === transactionStatus.DRAFT ?\r\n                                                                                    <Nav.Link className=\"btn btn-circle 1 outline-grey mr-2 \" href=\"#\"\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                        onClick={(e) => this.onEditSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n\r\n                                                                                    </Nav.Link>\r\n                                                                                    :\r\n                                                                                    <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n                                                                                        hidden={this.state.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                                        data-for=\"tooltip_list_wrap\"\r\n                                                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                                        onClick={(e) => this.props.copySampleStorageVersion(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                                                                    >\r\n                                                                                        <FontAwesomeIcon icon={faCopy} />\r\n\r\n                                                                                    </Nav.Link>\r\n                                                                                }\r\n                                                                                <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                    onClick={() => this.confirmDelete(deleteId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                                </Nav.Link>\r\n                                                                                <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                                    hidden={this.state.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                                    onClick={() => this.onApproveSampleStorageLocation(approveId)}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                                                </Nav.Link>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </Card.Subtitle>\r\n                                                                </Card.Header>\r\n                                                                <Card.Body>\r\n                                                                    <TreeViewEditable\r\n                                                                        id=\"samplestoragelocation\"\r\n                                                                        name=\"samplestoragelocation\"\r\n                                                                        // label=\"Sample Storage Location\"\r\n                                                                        data={this.state.treeDataView}\r\n                                                                        expandIcons={true}\r\n                                                                        selectField={'active-node'}\r\n                                                                        item={this.itemRenderView}\r\n                                                                        onExpandChange={this.onExpandChangeView}\r\n                                                                        onItemClick={this.onItemClickView}\r\n                                                                    />\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                            : \"\"}\r\n\r\n                                                    </ProductList>\r\n                                                    {/* End of detailed content */}\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                        </div>\r\n                                        {/* End of second column */}\r\n                                    {/* </PerfectScrollbar> */}\r\n\r\n                                </SplitterLayout>\r\n\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATION\" })}\r\n                        onSaveClick={this.onSaveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={this.props.Login.loadTreeProperties === true ? [] : mandatoryFields}\r\n                        addComponent={\r\n                            this.props.Login.loadTreeProperties ? (\r\n                                <AddTreeProperties\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                            ) : this.state.treeData ? (\r\n                                <AddTreeview\r\n                                    treeData={this.state.treeData}\r\n                                    onInputChange={(e) => this.onInputChange(e)}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    itemRender={this.itemRender}\r\n                                    onExpandChange={this.onExpandChange}\r\n                                    onItemClick={this.onItemClick}\r\n                                    onComboChange={this.onComboChange}\r\n                                    storageCategoryList={this.props.Login.storageCategoryList || []}\r\n                                    isOnlyDraft={this.props.Login.isOnlyDraft}\r\n                                />\r\n                            ) : (\r\n                                <></>\r\n                            )\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, validateEsignCredential, filterColumnData, changeStorageCategoryFilter,\r\n    getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation,\r\n    getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation\r\n})(injectIntl(SampleStorageLocation));"]},"metadata":{},"sourceType":"module"}