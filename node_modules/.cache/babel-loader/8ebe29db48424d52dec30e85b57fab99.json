{"ast":null,"code":"import rsapi from '../rsapi';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, sortData } from '../components/CommonScript'; // export function fetchRecordCertificateType1(fetchRecordParam) {\n//     //export function fetchRecordCertificateType (screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode){\n//     return function (dispatch) {\n//         let urlArray = [];\n//         let selectedId = null; \n//         if (fetchRecordParam.operation === \"update\") {\n//             const certificateType = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveCertificateTypeById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\n//             urlArray = [certificateType];\n//             selectedId = fetchRecordParam.primaryKeyValue;\n//             dispatch(initRequest(true));\n//             Axios.all(urlArray)\n//                 .then(Axios.spread((...response) => {\n//                     dispatch({\n//                         type: DEFAULT_RETURN,\n//                         payload: {\n//                             selectedRecord:\n//                                 fetchRecordParam.operation === \"update\" ? response[0].data : undefined, operation: fetchRecordParam.operation,\n//                             screenName: \"IDS_CERTIFICATETYPE\",\n//                             openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\n//                             loading: false, selectedId\n//                         }\n//                     });\n//                 }))\n//                 .catch(error => {\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                     if (error.response.status === 500) {\n//                         toast.error(intl.formatMessage({ id: error.message }));\n//                     }\n//                     else {\n//                         toast.warn(intl.formatMessage({ id: error.response.data }));\n//                     }\n//                 })\n//         } else {\n//             dispatch({\n//                 type: DEFAULT_RETURN,\n//                 payload: {\n//                     selectedRecord: {}, operation: fetchRecordParam.operation,\n//                     screenName: \"IDS_CERTIFICATETYPE\",\n//                     openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\n//                     loading: false\n//                 }\n//             });\n//         }\n//     }\n// }\n\nexport function fetchRecordCertificateType(fetchRecordParam) {\n  return function (dispatch) {\n    const reportBatchService = rsapi.post(\"certificatetype/getCertificateTypeComboData\", {\n      userinfo: fetchRecordParam.userInfo\n    });\n    let urlArray = []; // let selectedId = null;\n\n    if (fetchRecordParam.operation === \"update\") {\n      const certificateType = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveCertificateTypeById\", {\n        [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue,\n        \"userinfo\": fetchRecordParam.userInfo\n      });\n      urlArray = [reportBatchService, certificateType]; // selectedId = fetchRecordParam.primaryKeyValue;\n    } else {\n      urlArray = [reportBatchService];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const reportBatchMap = constructOptionList(response[0].data || [], \"ncertificatereporttypecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportBatchList = reportBatchMap.get(\"OptionList\");\n      let selectedRecord = {};\n\n      if (fetchRecordParam.operation === \"update\") {\n        selectedRecord = response[1].data;\n        reportBatchList.map(item => item.value === selectedRecord.ncertificatereporttypecode ? selectedRecord[\"ncertificatereporttypecode\"] = {\n          \"label\": item.label,\n          \"value\": item.value,\n          \"item\": item\n        } : \"\");\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          reportBatchTypeList: reportBatchList,\n          selectedRecord,\n          operation: fetchRecordParam.operation,\n          screenName: \"IDS_CERTIFICATETYPE\",\n          openModal: true,\n          ncontrolCode: fetchRecordParam.ncontrolCode,\n          loading: false //  selectedId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getCertificateTypeVersion(certificatetype, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"certificatetype/getCertificateTypeByClick\", {\n      ncertificatetypecode: certificatetype.ncertificatetypecode,\n      userinfo: userInfo\n    }).then(response => {\n      let responseData = sortData(response.data);\n      masterData = { ...masterData,\n        ...responseData\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportMasterByCertificateType(ncertificatetypecode, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"certificatetype/getReportMasterByCertificateType\", {\n      ncertificatetypecode,\n      userinfo: userInfo\n    }).then(response => {\n      const reportmasterMap = constructOptionList(response.data.reportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\n      const reportmaster = reportmasterMap.get(\"OptionList\");\n      const previewReportmasterMap = constructOptionList(response.data.previewreportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\n      const previewReportmaster = previewReportmasterMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          reportMasterList: reportmaster,\n          previewReportMasterList: previewReportmaster,\n          openChildModal: true,\n          screenName: \"IDS_CERTIFICATETYPEVERSION\",\n          operation: \"create\",\n          id: 'certificatetypeversion',\n          selectedRecord: {},\n          reportDetailsList: []\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getReportDetailByReport(nreportcode, ncertificatetypecode, selectedRecord, userInfo, fieldName) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"certificatetype/getReportDetailByReport\", {\n      nreportcode,\n      ncertificatetypecode,\n      userinfo: userInfo\n    }).then(response => {\n      const reportdetailMap = constructOptionList(response.data.reportDetails || [], \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\n      let reportDetail = reportdetailMap.get(\"OptionList\");\n\n      if (fieldName === \"npreviewreportcode\") {\n        selectedRecord['npreviewreportdetailcode'] = [];\n        selectedRecord['spreviewdisplaystatus'] = '';\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            previewReportDetailsList: reportDetail,\n            selectedRecord\n          }\n        });\n      } else {\n        selectedRecord['nreportdetailcode'] = [];\n        selectedRecord['sdisplaystatus'] = '';\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            reportDetailsList: reportDetail,\n            selectedRecord\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchCertificateTypeVersionById(editParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('certificatetype/fetchCertificateTypeVersionById', {\n      ncertificatetypeversioncode: editParam.primaryKeyValue,\n      userinfo: editParam.userInfo\n    }).then(response => {\n      const responseData = response.data.selectedRecord;\n      const reportMasterMap = constructOptionList(response.data.reportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\n      const reportMaster = reportMasterMap.get(\"OptionList\");\n      const reportdetailMap = constructOptionList(response.data.ReportDetails || [], \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\n      const reportDetail = reportdetailMap.get(\"OptionList\");\n      const previewReportMasterMap = constructOptionList(response.data.previewreportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\n      const previewReportMaster = previewReportMasterMap.get(\"OptionList\");\n      const previewReportdetailMap = constructOptionList(response.data.PreviewReportDetails || [], \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\n      const previewReportDetail = previewReportdetailMap.get(\"OptionList\");\n      let selectedReportDetail = undefined;\n      reportDetail.forEach(report => {\n        if (report.value === responseData.nreportdetailcode) {\n          selectedReportDetail = report;\n        }\n      });\n      let selectedPreviewReportDetail = undefined;\n      previewReportDetail.forEach(report => {\n        if (report.value === responseData.npreviewreportdetailcode) {\n          selectedPreviewReportDetail = report;\n        }\n      });\n      let selectedRecord = {};\n\n      if (selectedReportDetail) {\n        reportMaster.forEach(master => {\n          if (master.value === selectedReportDetail.item.nreportcode) {\n            selectedRecord['nreportcode'] = master;\n          }\n        });\n      } else {\n        selectedReportDetail = {\n          label: \"NA\",\n          value: -1,\n          item: {\n            sreportname: \"NA\",\n            nreportcode: -1\n          }\n        };\n      }\n\n      if (selectedPreviewReportDetail) {\n        previewReportMaster.forEach(master => {\n          if (master.value === selectedPreviewReportDetail.item.nreportcode) {\n            selectedRecord['npreviewreportcode'] = master;\n          }\n        });\n      } else {\n        selectedPreviewReportDetail = {\n          label: \"NA\",\n          value: -1,\n          item: {\n            sreportname: \"NA\",\n            nreportcode: -1\n          }\n        };\n      }\n\n      selectedRecord['nreportcode'] = selectedRecord['nreportcode'] ? selectedRecord['nreportcode'] : {\n        label: \"NA\",\n        value: -1,\n        item: {}\n      };\n      selectedRecord['nreportdetailcode'] = selectedReportDetail;\n      selectedRecord['sdisplaystatus'] = selectedReportDetail.item.sdisplaystatus;\n      selectedRecord['npreviewreportcode'] = selectedRecord['npreviewreportcode'] ? selectedRecord['npreviewreportcode'] : {\n        label: \"NA\",\n        value: -1,\n        item: {}\n      };\n      selectedRecord['npreviewreportdetailcode'] = selectedPreviewReportDetail;\n      selectedRecord['spreviewdisplaystatus'] = selectedPreviewReportDetail.item.sdisplaystatus;\n      selectedRecord['ntransactionstatus'] = responseData.ntransactionstatus;\n      selectedRecord['ncertificatetypeversionno'] = responseData.ncertificatetypeversionno;\n      selectedRecord['nversionno'] = responseData.nversionno;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openChildModal: true,\n          operation: \"update\",\n          screenName: \"IDS_CERTIFICATETYPEVERSION\",\n          id: 'certificatetypeversion',\n          reportMasterList: reportMaster,\n          reportDetailsList: reportDetail,\n          previewReportMasterList: previewReportMaster,\n          previewReportDetailsList: previewReportDetail,\n          selectedId: editParam.primaryKeyValue,\n          selectedRecord,\n          ncontrolCode: editParam.ncontrolCode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/CertificateTypeAction.js"],"names":["rsapi","intl","Axios","toast","DEFAULT_RETURN","initRequest","constructOptionList","sortData","fetchRecordCertificateType","fetchRecordParam","dispatch","reportBatchService","post","userinfo","userInfo","urlArray","operation","certificateType","inputParam","classUrl","primaryKeyField","primaryKeyValue","all","then","response","reportBatchMap","data","undefined","reportBatchList","get","selectedRecord","map","item","value","ncertificatereporttypecode","label","type","payload","reportBatchTypeList","screenName","openModal","ncontrolCode","loading","catch","error","status","formatMessage","id","message","warn","getCertificateTypeVersion","certificatetype","masterData","ncertificatetypecode","responseData","getReportMasterByCertificateType","reportmasterMap","reportmaster","previewReportmasterMap","previewreportmaster","previewReportmaster","reportMasterList","previewReportMasterList","openChildModal","reportDetailsList","getReportDetailByReport","nreportcode","fieldName","reportdetailMap","reportDetails","reportDetail","previewReportDetailsList","fetchCertificateTypeVersionById","editParam","ncertificatetypeversioncode","reportMasterMap","reportMaster","ReportDetails","previewReportMasterMap","previewReportMaster","previewReportdetailMap","PreviewReportDetails","previewReportDetail","selectedReportDetail","forEach","report","nreportdetailcode","selectedPreviewReportDetail","npreviewreportdetailcode","master","sreportname","sdisplaystatus","ntransactionstatus","ncertificatetypeversionno","nversionno","selectedId"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { intl } from '../components/App';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, sortData } from '../components/CommonScript';\r\n\r\n\r\n// export function fetchRecordCertificateType1(fetchRecordParam) {\r\n//     //export function fetchRecordCertificateType (screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode){\r\n//     return function (dispatch) {\r\n\r\n//         let urlArray = [];\r\n//         let selectedId = null; \r\n//         if (fetchRecordParam.operation === \"update\") {\r\n//             const certificateType = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveCertificateTypeById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\r\n\r\n//             urlArray = [certificateType];\r\n//             selectedId = fetchRecordParam.primaryKeyValue;\r\n\r\n//             dispatch(initRequest(true));\r\n//             Axios.all(urlArray)\r\n//                 .then(Axios.spread((...response) => {\r\n\r\n//                     dispatch({\r\n//                         type: DEFAULT_RETURN,\r\n//                         payload: {\r\n//                             selectedRecord:\r\n//                                 fetchRecordParam.operation === \"update\" ? response[0].data : undefined, operation: fetchRecordParam.operation,\r\n//                             screenName: \"IDS_CERTIFICATETYPE\",\r\n//                             openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n//                             loading: false, selectedId\r\n//                         }\r\n//                     });\r\n//                 }))\r\n\r\n//                 .catch(error => {\r\n//                     dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                     if (error.response.status === 500) {\r\n//                         toast.error(intl.formatMessage({ id: error.message }));\r\n//                     }\r\n//                     else {\r\n//                         toast.warn(intl.formatMessage({ id: error.response.data }));\r\n//                     }\r\n//                 })\r\n//         } else {\r\n//             dispatch({\r\n//                 type: DEFAULT_RETURN,\r\n//                 payload: {\r\n//                     selectedRecord: {}, operation: fetchRecordParam.operation,\r\n//                     screenName: \"IDS_CERTIFICATETYPE\",\r\n//                     openModal: true, ncontrolCode: fetchRecordParam.ncontrolCode,\r\n//                     loading: false\r\n//                 }\r\n//             });\r\n//         }\r\n\r\n//     }\r\n// }\r\n\r\nexport function fetchRecordCertificateType(fetchRecordParam) {\r\n    return function (dispatch) {\r\n\r\n        const reportBatchService = rsapi.post(\"certificatetype/getCertificateTypeComboData\",\r\n            { userinfo: fetchRecordParam.userInfo });\r\n\r\n        let urlArray = [];\r\n        // let selectedId = null;\r\n\r\n        if (fetchRecordParam.operation === \"update\") {\r\n            const certificateType = rsapi.post(fetchRecordParam.inputParam.classUrl + \"/getActiveCertificateTypeById\", { [fetchRecordParam.primaryKeyField]: fetchRecordParam.primaryKeyValue, \"userinfo\": fetchRecordParam.userInfo });\r\n\r\n            urlArray = [reportBatchService, certificateType];\r\n            // selectedId = fetchRecordParam.primaryKeyValue;\r\n        }\r\n        else {\r\n            urlArray = [reportBatchService];\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const reportBatchMap = constructOptionList(response[0].data || [], \"ncertificatereporttypecode\",\r\n                    \"sdisplayname\", undefined, undefined, true);\r\n\r\n                const reportBatchList = reportBatchMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                if (fetchRecordParam.operation === \"update\") {\r\n                    selectedRecord = response[1].data;\r\n                    reportBatchList.map(item => item.value === selectedRecord.ncertificatereporttypecode ?\r\n                        selectedRecord[\"ncertificatereporttypecode\"] = {\r\n                            \"label\": item.label,\r\n                            \"value\": item.value,\r\n                            \"item\": item\r\n                        }\r\n                        : \"\");\r\n\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        reportBatchTypeList: reportBatchList,\r\n                        selectedRecord,\r\n                        operation: fetchRecordParam.operation,\r\n                        screenName: \"IDS_CERTIFICATETYPE\",\r\n                        openModal: true,\r\n                        ncontrolCode: fetchRecordParam.ncontrolCode,\r\n                        loading: false,\r\n                        //  selectedId\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getCertificateTypeVersion(certificatetype, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"certificatetype/getCertificateTypeByClick\", { ncertificatetypecode: certificatetype.ncertificatetypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                let responseData = sortData(response.data)\r\n                masterData = { ...masterData, ...responseData }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data)\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportMasterByCertificateType(ncertificatetypecode, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"certificatetype/getReportMasterByCertificateType\", { ncertificatetypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                const reportmasterMap = constructOptionList(response.data.reportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\r\n                const reportmaster = reportmasterMap.get(\"OptionList\");\r\n\r\n                const previewReportmasterMap = constructOptionList(response.data.previewreportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\r\n                const previewReportmaster = previewReportmasterMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        reportMasterList: reportmaster,\r\n                        previewReportMasterList: previewReportmaster,\r\n                        openChildModal: true,\r\n                        screenName: \"IDS_CERTIFICATETYPEVERSION\",\r\n                        operation: \"create\",\r\n                        id: 'certificatetypeversion',\r\n                        selectedRecord:{},\r\n                        reportDetailsList:[]\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data)\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getReportDetailByReport(nreportcode,ncertificatetypecode, selectedRecord, userInfo, fieldName) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"certificatetype/getReportDetailByReport\", { nreportcode,ncertificatetypecode, userinfo: userInfo })\r\n            .then(response => {\r\n                const reportdetailMap = constructOptionList(response.data.reportDetails || [], \r\n                                \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\r\n                let reportDetail = reportdetailMap.get(\"OptionList\");\r\n               \r\n                if (fieldName === \"npreviewreportcode\"){\r\n                    selectedRecord['npreviewreportdetailcode'] = [];\r\n                    selectedRecord['spreviewdisplaystatus'] = '';\r\n                    dispatch({ type: DEFAULT_RETURN,payload: {  loading: false,\r\n                                                                previewReportDetailsList: reportDetail,\r\n                                                                selectedRecord\r\n                                                            }\r\n                            })\r\n                }\r\n                else{\r\n                    selectedRecord['nreportdetailcode'] = [];\r\n                    selectedRecord['sdisplaystatus'] = '';\r\n                    dispatch({ type: DEFAULT_RETURN,payload: {  loading: false,\r\n                                                                reportDetailsList: reportDetail,\r\n                                                                selectedRecord\r\n                                                            }\r\n                                        })\r\n                }         \r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data)\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function fetchCertificateTypeVersionById(editParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('certificatetype/fetchCertificateTypeVersionById', { ncertificatetypeversioncode: editParam.primaryKeyValue, userinfo: editParam.userInfo })\r\n            .then(response => {\r\n                const responseData = response.data.selectedRecord;\r\n                \r\n                const reportMasterMap = constructOptionList(response.data.reportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\r\n                const reportMaster = reportMasterMap.get(\"OptionList\");\r\n                \r\n                const reportdetailMap = constructOptionList(response.data.ReportDetails || [], \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\r\n                const reportDetail = reportdetailMap.get(\"OptionList\");\r\n\r\n                const previewReportMasterMap = constructOptionList(response.data.previewreportmaster || [], \"nreportcode\", \"sreportname\", undefined, undefined, true);\r\n                const previewReportMaster = previewReportMasterMap.get(\"OptionList\");\r\n                \r\n                const previewReportdetailMap = constructOptionList(response.data.PreviewReportDetails || [], \"nreportdetailcode\", \"nversionno\", undefined, undefined, true);\r\n                const previewReportDetail = previewReportdetailMap.get(\"OptionList\");\r\n              \r\n                let selectedReportDetail = undefined;\r\n                reportDetail.forEach(report =>{\r\n                    if (report.value === responseData.nreportdetailcode) {\r\n                        selectedReportDetail = report\r\n                    }\r\n                })\r\n\r\n                let selectedPreviewReportDetail = undefined;\r\n                previewReportDetail.forEach(report =>{\r\n                    if (report.value === responseData.npreviewreportdetailcode) {\r\n                        selectedPreviewReportDetail = report\r\n                    }\r\n                })\r\n\r\n                let selectedRecord = {};\r\n                if(selectedReportDetail){\r\n                    reportMaster.forEach(master => {\r\n                        if (master.value === selectedReportDetail.item.nreportcode) {\r\n                            selectedRecord['nreportcode'] = master\r\n                        }\r\n                    })\r\n                }else{\r\n                    selectedReportDetail = {label:\"NA\",value:-1,item:{sreportname:\"NA\",nreportcode:-1}}\r\n                }\r\n\r\n                if(selectedPreviewReportDetail){\r\n                    previewReportMaster.forEach(master => {\r\n                        if (master.value === selectedPreviewReportDetail.item.nreportcode) {\r\n                            selectedRecord['npreviewreportcode'] = master\r\n                        }\r\n                    })\r\n                }else{\r\n                    selectedPreviewReportDetail = {label:\"NA\",value:-1,item:{sreportname:\"NA\",nreportcode:-1}}\r\n                }\r\n\r\n                selectedRecord['nreportcode'] = selectedRecord['nreportcode']?selectedRecord['nreportcode'] :{label:\"NA\",value:-1,item:{}}\r\n                selectedRecord['nreportdetailcode'] = selectedReportDetail;\r\n                selectedRecord['sdisplaystatus'] =  selectedReportDetail.item.sdisplaystatus;\r\n\r\n                selectedRecord['npreviewreportcode'] = selectedRecord['npreviewreportcode']?selectedRecord['npreviewreportcode'] :{label:\"NA\",value:-1,item:{}}\r\n                selectedRecord['npreviewreportdetailcode'] = selectedPreviewReportDetail;\r\n                selectedRecord['spreviewdisplaystatus'] =  selectedPreviewReportDetail.item.sdisplaystatus;\r\n\r\n                selectedRecord['ntransactionstatus'] = responseData.ntransactionstatus\r\n                selectedRecord['ncertificatetypeversionno'] = responseData.ncertificatetypeversionno\r\n                selectedRecord['nversionno'] = responseData.nversionno\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        openChildModal:true,\r\n                        operation:\"update\",\r\n                        screenName:\"IDS_CERTIFICATETYPEVERSION\",\r\n                        id: 'certificatetypeversion',\r\n                        reportMasterList: reportMaster,\r\n                        reportDetailsList: reportDetail,\r\n                        previewReportMasterList: previewReportMaster,\r\n                        previewReportDetailsList: previewReportDetail,\r\n                        selectedId:editParam.primaryKeyValue,\r\n                        selectedRecord,\r\n                        ncontrolCode : editParam.ncontrolCode\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data)\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}