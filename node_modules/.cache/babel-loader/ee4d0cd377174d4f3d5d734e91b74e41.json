{"ast":null,"code":"import { DEFAULT_RETURN, UPDATE_LANGUAGE, REQUEST_INIT } from './LoginTypes';\nimport rsapi from \"../rsapi\";\nimport { intl, createIntlReinitilize } from '../components/App';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { constructjsonOptionList, constructOptionList, formatInputDate, rearrangeDateFormat } from '../components/CommonScript';\nimport { getHomeDashBoard } from './DashBoardTypeAction';\nimport { getListStaticDashBoard } from './StaticDashBoardAction';\nimport { getListAlert } from './AlertViewAction';\nimport { getRandomColor } from '../components/header/headerutils';\nimport { loadMessages } from '@progress/kendo-react-intl';\nimport messages_ru from '../assets/translations/ru.json';\nimport messages_tg from '../assets/translations/tg.json';\nimport messages_en from '../assets/translations/en.json';\nimport messages_ko from '../assets/translations/ko.json';\nimport messages_fr from '../assets/translations/fr.json';\nimport { PostgreSQLMaintenance, transactionStatus } from '../components/Enumeration';\nimport { callService } from './ServiceAction';\nimport ConfirmMessage from '../components/confirm-alert/confirm-message.component';\nconst messages = {\n  'en-US': messages_en,\n  'ru-RU': messages_ru,\n  'tg-TG': messages_tg,\n  //ALPD-5196 ADDed by Neeraj -All masters screens > Filter is in multi Language\n  'ko-KR': messages_ko,\n  'fr-FR': messages_fr\n};\nexport const initRequest = loading => {\n  return {\n    type: REQUEST_INIT,\n    payload: loading\n  };\n};\nexport const navPage = data => dispatch => {\n  dispatch({\n    type: DEFAULT_RETURN,\n    payload: {\n      navigation: data,\n      nusermultirolecode: undefined,\n      nusersitecode: undefined,\n      selectedRecord: undefined,\n      loginFlag: false //  ALPD-5704   Added loginFlag to handle url login issue by Vishakh (09-04-2025)\n\n    }\n  });\n};\nexport const changeLanguage = (language, selectedRecord, loginType) => dispatch => {\n  const loginTypeMap = constructjsonOptionList(loginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, language);\n  createIntlReinitilize(language); //ALPD-715 Fix\n\n  dispatch({\n    type: UPDATE_LANGUAGE,\n    payload: {\n      language,\n      // selectedRecord,\n      loginTypeList: loginTypeMap.get(\"OptionList\"),\n      selectedRecord: { ...selectedRecord,\n        // ALPD-3839\n        nlogintypecode: loginTypeMap.get(\"OptionList\").find(item => item.value === selectedRecord.nlogintypecode.value) || \"\" // nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\"\n\n      }\n    }\n  });\n};\nexport const clickOnLoginButton = (inputData, languageList) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputData.url, inputData).then(response => {\n      const returnStr = response.data[\"rtn\"];\n\n      if (returnStr.toUpperCase() === \"SUCCESS\") {\n        const responseData = response.data;\n        const PassFlag = responseData.PassFlag; //ALPD-4789 L.Subashini cleared warnings\n\n        languageList && languageList.map(x => {\n          return loadMessages(messages[inputData.slanguagetypecode], inputData.slanguagetypecode);\n        });\n        createIntlReinitilize(inputData.slanguagetypecode);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openCPModal: response.data.PassFlag === transactionStatus.UNLOCK || PassFlag === transactionStatus.EXPIRED ? true : false,\n            passwordPolicy: response.data.PasswordPolicy,\n            screenName: PassFlag === transactionStatus.UNLOCK ? \"IDS_CREATEPASSWORD\" : PassFlag === transactionStatus.EXPIRED ? \"IDS_CHANGEPASSWORD\" : \"\",\n            PassFlag,\n            userInfo: response.data.UserInfo,\n            // userInfo: {\n            //     nlogintypecode: inputData.nlogintypecode\n            // }\n            loginFlag: true //  ALPD-5704   Added loginFlag to handle url login issue by Vishakh (09-04-2025)\n\n          }\n        });\n\n        if (responseData.PassFlag !== transactionStatus.UNLOCK && responseData.PassFlag !== transactionStatus.EXPIRED) {\n          const inputParam = {\n            userInfo: responseData.UserInfo,\n            menuDesign: responseData.MenuDesign,\n            HomeDesign: responseData.HomeDesign,\n            navigation: responseData.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename,\n            defaultMenuHome: responseData.HomeDesign.filter(x => x.ndefaultstatus === 3)[0],\n            userRoleControlRights: responseData.UserRoleControlRights,\n            userFormControlProperties: responseData.UserFormControlproperties,\n            transactionValidation: responseData.TransactionValidation,\n            displayName: responseData.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].sdisplayname,\n            userMultiRole: responseData.UserMultiRole,\n            settings: responseData.Settings,\n            reportSettings: responseData.ReportSettings,\n            integrationSettings: responseData.IntegrationSettings,\n            elnUserInfo: responseData.ELNUserInfo,\n            elnSite: responseData.ELNSite,\n            genericLabel: responseData.GenericLabel,\n            genericLabelIDS: responseData.GenericLabelIDS,\n            sdmselnsettings: responseData.SDMSELNSettings,\n            hideQualisForms: responseData.HideQualisForms,\n            filterOperator: responseData.FilterOperator,\n            deputyUser: response.data.DeputyUser,\n            deputyUserRole: response.data.DeputyUserRole,\n            isDeputyLogin: false,\n            loading: false,\n            userImagePath: responseData.UserImagePath,\n            //profileColor: \"#002699\",\n            profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\n            idleneed: true,\n            colortheme: responseData.colortheme,\n            selectedUserUiConfig: responseData.selectedUserUiConfig\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: inputParam\n          });\n\n          if (inputParam.navigation === 'dashboard') {\n            dispatch(getListStaticDashBoard(responseData.UserInfo));\n          } else if (inputParam.navigation === 'apiservice') {\n            const inputParam1 = {\n              inputData: {\n                currentdate: formatInputDate(new Date(), true),\n                \"userinfo\": inputParam.userInfo\n              },\n              serviceNeed: true,\n              classUrl: inputParam.navigation,\n              methodUrl: responseData.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].smethodurl\n            };\n            dispatch(callService(inputParam1));\n          }\n\n          dispatch(getListAlert(responseData.UserInfo, true));\n\n          if (responseData.PasswordAlertDay) {\n            toast.info(intl.formatMessage({\n              id: \"IDS_PASSWORDEXPIRY\"\n            }) + \" \" + responseData.PasswordAlertDay + \" \" + intl.formatMessage({\n              id: \"IDS_DAYS\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: returnStr\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response === undefined) {\n        toast.warn(\"Service not available\");\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const submitChangeRole = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getuserscreenrightsmenu\", inputParam).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          userInfo: response.data.UserInfo,\n          menuDesign: response.data.MenuDesign,\n          navigation: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename,\n          defaultMenuHome: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0],\n          userRoleControlRights: response.data.UserRoleControlRights,\n          userMultiRole: response.data.UserMultiRole,\n          deputyUser: response.data.DeputyUser,\n          deputyUserRole: response.data.DeputyUserRole,\n          loading: false,\n          masterData: [],\n          displayName: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].sdisplayname,\n          // navigation: \"home\",\n          inputParam: {},\n          openRoleBox: false\n        }\n      });\n\n      if (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename === 'dashboard') {\n        dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\n      } else if (inputParam.navigation === 'apiservice') {\n        const inputParam1 = {\n          inputData: {\n            currentdate: formatInputDate(new Date(), true),\n            \"userinfo\": response.data.UserInfo\n          },\n          serviceNeed: true,\n          classUrl: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename,\n          methodUrl: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].smethodurl\n        };\n        dispatch(callService(inputParam1));\n      } // dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\n\n\n      dispatch(getListAlert(response.data.UserInfo));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const updateStore = updateInfo => dispatch => {\n  //ALPD-3511 added loadEsignStateHandle key to handle EsignStateHandle component\n  if (updateInfo.data.loadEsign === true || updateInfo.data.loadEsignStateHandle) {\n    const currentTimeUrl = rsapi.post(\"/timezone/getLocalTimeByZone\", {\n      \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\n    });\n    const reasonUrl = rsapi.post(\"/reason/getReason\", {\n      \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([currentTimeUrl, reasonUrl]).then(response => {\n      const reasonMap = constructOptionList(response[1].data || [], \"nreasoncode\", \"sreason\", undefined, undefined, false);\n      const reasonList = reasonMap.get(\"OptionList\");\n      dispatch({\n        type: updateInfo.typeName,\n        payload: {\n          serverTime: rearrangeDateFormat(updateInfo.data.screenData.inputParam.inputData.userinfo, response[0].data),\n          esignReasonList: reasonList,\n          ...updateInfo.data,\n          masterStatus: \"\",\n          errorCode: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  } else {\n    dispatch({\n      type: updateInfo.typeName,\n      payload: { ...updateInfo.data,\n        masterStatus: \"\",\n        errorCode: undefined\n      }\n    });\n  }\n};\nexport const getChangeUserRole = userInfo => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getchangerole\", {\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}; //commend by gowtham \n// export const getLoginDetails = () => {\n//     return (dispatch) => {\n//         dispatch(initRequest(true));\n//         rsapi.post(\"/login/getloginInfo\", {})\n//             .then(response => {\n//                 // let loginType = [];\n//                 // response.data.LoginType.map(type => {\n//                 //     loginType\n//                 // })\n//                 const languageMap = constructOptionList(response.data.Language || [], \"slanguagetypecode\", \"slanguagename\", false, false, true);\n//                 let defaultLanguage = languageMap.get(\"DefaultValue\") ? languageMap.get(\"DefaultValue\") : undefined;\n//                 let languageCode = defaultLanguage ? defaultLanguage.value : \"en-US\";\n//                 const loginTypeMap = constructjsonOptionList(response.data.LoginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, languageCode);\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loginTypes: response.data.LoginType,\n//                         loginTypeList: loginTypeMap.get(\"OptionList\"),\n//                         languageList: languageMap.get(\"OptionList\"),\n//                         nlanguagecode: defaultLanguage || \"\",\n//                         selectedRecord: {\n//                             nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\",\n//                             nlanguagecode: defaultLanguage || \"\"\n//                         },\n//                         language: defaultLanguage.value,\n//                         loading: false\n//                     }\n//                 });\n//             })\n//             .catch(error => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loading: false\n//                     }\n//                 });\n//                 if (error.response && error.response.status === 500) {\n//                     toast.error(intl.formatMessage({\n//                         id: error.message\n//                     }));\n//                 } else if (error.response === undefined) {\n//                     toast.warn(\"Service not available\");\n//                 } else {\n//                     toast.warn(intl.formatMessage({\n//                         id: error.response.data\n//                     }));\n//                 }\n//             });\n//     }\n// }\n\nexport const getLoginDetails = () => {\n  return dispatch => {\n    dispatch(initRequest(true)); // Gowtham R -- ALPD-5190 -- 14/12/2024 -- for Vacuum Start\n\n    rsapi.post(\"/login/getJavaTime\").then(response => {\n      const maintenanceBreakPopUp = breakTime => {\n        const confirmMessage = new ConfirmMessage();\n        confirmMessage.confirm(\"MaintainceBreakMessage\", intl.formatMessage({\n          id: \"IDS_MAINTAINCEBREAK\"\n        }), intl.formatMessage({\n          id: \"IDS_MAINTAINCEBREAKMESSAGE\"\n        }), undefined, undefined, undefined, false, undefined, breakTime);\n      };\n\n      let MaintenanceBreak = 0;\n\n      if (PostgreSQLMaintenance.STARTHOUR > PostgreSQLMaintenance.ENDHOUR) {\n        const minutesLeftToday = 60 - PostgreSQLMaintenance.STARTMINUTE + (23 - PostgreSQLMaintenance.STARTHOUR) * 60;\n        const minutesNextDay = PostgreSQLMaintenance.ENDHOUR * 60 + PostgreSQLMaintenance.ENDMINUTE;\n        MaintenanceBreak = minutesLeftToday + minutesNextDay;\n      } else if (PostgreSQLMaintenance.STARTHOUR < PostgreSQLMaintenance.ENDHOUR) {\n        const minutesThisDay = (PostgreSQLMaintenance.ENDHOUR - PostgreSQLMaintenance.STARTHOUR) * 60 - PostgreSQLMaintenance.STARTMINUTE + PostgreSQLMaintenance.ENDMINUTE;\n        MaintenanceBreak = minutesThisDay;\n      } else {\n        MaintenanceBreak = PostgreSQLMaintenance.ENDMINUTE - PostgreSQLMaintenance.STARTMINUTE;\n      }\n\n      const date = new Date();\n      date.setHours(response.data.Hours);\n      date.setMinutes(response.data.Minutes);\n      date.setSeconds(response.data.Seconds);\n\n      const isMaintenanceTime = () => {\n        if ((date.getHours() > PostgreSQLMaintenance.STARTHOUR || date.getHours() === PostgreSQLMaintenance.STARTHOUR && date.getMinutes() >= PostgreSQLMaintenance.STARTMINUTE) && (date.getHours() < PostgreSQLMaintenance.ENDHOUR || date.getHours() === PostgreSQLMaintenance.ENDHOUR && date.getMinutes() < PostgreSQLMaintenance.ENDMINUTE)) {\n          MaintenanceBreak = PostgreSQLMaintenance.ENDMINUTE - date.getMinutes();\n          return true;\n        } else {\n          return false;\n        }\n      };\n\n      const incrementTimeByMinute = () => {\n        date.setMinutes(date.getMinutes() + 1);\n\n        if (date.getMinutes() === 60) {\n          date.setMinutes(0);\n          date.setHours(date.getHours() + 1);\n        }\n\n        if (date.getHours() === 24) {\n          date.setHours(0);\n        }\n      };\n\n      const maintenanceCheck = () => {\n        if (isMaintenanceTime()) {\n          maintenanceBreakPopUp(60000 * MaintenanceBreak);\n        }\n      };\n\n      setTimeout(() => {\n        incrementTimeByMinute();\n        maintenanceCheck();\n        setInterval(() => {\n          incrementTimeByMinute();\n          maintenanceCheck();\n        }, 60000);\n      }, (60 - (date.getSeconds() + 1)) * 1000);\n\n      if (isMaintenanceTime()) {\n        maintenanceBreakPopUp(60000 * MaintenanceBreak);\n      } else {\n        // for Vacuum End\n        rsapi.post(\"/login/getloginInfo\", {}).then(response => {\n          const languageMap = constructOptionList(response.data.Language || [], \"slanguagetypecode\", \"slanguagename\", false, false, true);\n          let defaultLanguage = languageMap.get(\"DefaultValue\") ? languageMap.get(\"DefaultValue\") : undefined;\n          let languageCode = defaultLanguage ? defaultLanguage.value : \"en-US\";\n          const loginTypeMap = constructjsonOptionList(response.data.LoginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, languageCode);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loginTypes: response.data.LoginType,\n              loginTypeList: loginTypeMap.get(\"OptionList\"),\n              languageList: languageMap.get(\"OptionList\"),\n              nlanguagecode: defaultLanguage || \"\",\n              selectedRecord: {\n                nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\",\n                nlanguagecode: defaultLanguage || \"\"\n              },\n              language: defaultLanguage.value,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response && error.response.status === 500) {\n            toast.error(intl.formatMessage({\n              id: error.message\n            }));\n          } else if (error.response === undefined) {\n            toast.warn(\"Service not available\");\n          } else {\n            toast.warn(intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      }\n    });\n  };\n};\nexport const getUserSiteAndRole = (inputParam, selectedRecord) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getloginvalidation\", { ...inputParam\n    }).then(response => {\n      if (inputParam.Language !== undefined && inputParam.logintype !== undefined) {\n        //Start\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\n        if (response.data && response.data.NewAdsUser && response.data.NewAdsUser === \"true\") {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              openADSModal: true,\n              userInfo: {\n                nlogintypecode: inputParam.nlogintypecode || selectedRecord.nlogintypecode && selectedRecord.nlogintypecode.value\n              },\n              screenName: \"IDS_NEWADSUSERVALIDATION\",\n              loading: false,\n              createPwdRecord: {}\n            }\n          });\n        } //End\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\n        else {\n          const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\n          const siteMap = constructOptionList(response.data.Site || [], \"nusersitecode\", \"ssitename\", false, false, true, \"ndefaultsite\");\n          let loggeInLoginTypeCode = response.data.Users.nlogintypecode;\n          let logintypecode = inputParam.logintype.filter(x => x.value === loggeInLoginTypeCode);\n\n          if (inputParam.logintype.length > 0 && logintypecode.length === 0) {\n            logintypecode = inputParam.logintype;\n            loggeInLoginTypeCode = logintypecode[0].value;\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loginUserRole: roleMap.get(\"OptionList\"),\n              loginUserSite: siteMap.get(\"OptionList\"),\n              nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\n              nusersitecode: siteMap.get(\"DefaultValue\") ? siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\n              nusercode: response.data.Users.nusercode,\n              nlogintypecode: logintypecode ? logintypecode[0] : \"\",\n              selectedRecord: { ...selectedRecord,\n                nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\n                nusersitecode: siteMap.get(\"DefaultValue\") ? siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\n                nusercode: response.data.Users.nusercode,\n                nlogintypecode: logintypecode ? logintypecode[0] : \"\"\n              },\n              openCPModal: response.data.PassFlag === 6 ? true : false,\n              passwordPolicy: response.data.PasswordPolicy,\n              screenName: \"IDS_CREATEPASSWORD\",\n              loading: false,\n              PassFlag: response.data.PassFlag,\n              createPwdRecord: {},\n              userInfo: {\n                nlogintypecode: loggeInLoginTypeCode\n              }\n            }\n          });\n        }\n      } else {\n        toast.warn(inputParam.Language === undefined ? \"Language not available\" : \"Login type not available\");\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loginUserRole: [],\n          loginUserSite: [],\n          selectedRecord: { ...selectedRecord,\n            nusermultirolecode: \"\",\n            nusersitecode: \"\"\n          }\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response === undefined) {\n        toast.warn(\"Service not available\");\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const createPassword = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/createnewpassword\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: false,\n          loading: false,\n          createPwdRecord: {}\n        }\n      });\n      toast.success(intl.formatMessage({\n        id: \"IDS_PASSWORDCREATEDSUCCESSFULLY\"\n      }));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}; //Start ALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\n\nexport const validateADSPassword = inputParam => {\n  let selectedRecord = inputParam.selectedRecord || {};\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/validateadspassword\", { ...inputParam\n    }).then(response => {\n      if (inputParam.slanguagefilename !== undefined) {\n        const roleMap = constructOptionList(response.data && response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\n        const siteMap = constructOptionList(response.data && response.data.Site || [], \"nusersitecode\", \"ssitename\", false, false, true, \"ndefaultsite\"); // let loggeInLoginTypeCode = response.data.Users.nlogintypecode;\n        // let logintypecode = inputParam.logintype.filter(x => x.value === loggeInLoginTypeCode);\n        // if (inputParam.logintype.length > 0 && logintypecode.length === 0) {\n        //     logintypecode = inputParam.logintype;\n        //     loggeInLoginTypeCode = logintypecode[0].value;\n        // }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loginUserRole: roleMap.get(\"OptionList\"),\n            loginUserSite: siteMap.get(\"OptionList\"),\n            nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\n            nusersitecode: siteMap.get(\"DefaultValue\") ? siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\n            nusercode: response.data.Users.nusercode,\n            nlogintypecode: inputParam.nlogintypecode,\n            selectedRecord: { ...selectedRecord,\n              nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\n              nusersitecode: siteMap.get(\"DefaultValue\") ? siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\n              nusercode: response.data.Users.nusercode //nlogintypecode: ...inputParam.nlogintypecode || \"\"\n\n            },\n            openADSModal: false,\n            passwordPolicy: response.data.PasswordPolicy,\n            // screenName: \"IDS_CREATEPASSWORD\",\n            loading: false,\n            // PassFlag: response.data.PassFlag,\n            createPwdRecord: {},\n            userInfo: {\n              nlogintypecode: inputParam.nlogintypecode\n            }\n          }\n        });\n      } else {\n        toast.warn(\"Language not available\");\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loginUserRole: [],\n          loginUserSite: [],\n          selectedRecord: { ...selectedRecord,\n            nusermultirolecode: \"\",\n            nusersitecode: \"\"\n          }\n        }\n      });\n\n      if (error.response && error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else if (error.response === undefined) {\n        toast.warn(\"Service not available\");\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}; //End\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\n\nexport const changepassword = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/changepassword\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: false,\n          loading: false,\n          createPwdRecord: {},\n          navigation: \"login\"\n        }\n      });\n      toast.success(intl.formatMessage({\n        id: \"IDS_PASSWORDCHANGEDSUCCESSFULLY\"\n      }));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function validateEsignforDigitalSignature(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        dispatch(saveDigitalSign(inputParam[\"screenData\"][\"inputParam\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const saveDigitalSign = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const formData = inputParam.formData;\n    formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n    rsapi.post(\"/digitalsignature/updateDigitalSignature\", formData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: false,\n          loading: false,\n          loadEsign: false\n        }\n      });\n      toast.success(intl.formatMessage({\n        id: \"IDS_DIGITALSIGNATURESAVEDSUCCESSFULLY\"\n      }));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getPassWordPolicy = nuserrolecode => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getPassWordPolicy\", {\n      nuserrolecode\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: true,\n          loading: false,\n          createPwdRecord: {},\n          screenName: \"IDS_CHANGEPASSWORD\",\n          passwordPolicy: response.data.PasswordPolicy\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const getDigitalSign = (nusercode, userInfo) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/digitalsignature/getDigitalSignature\", {\n      nusercode: nusercode,\n      userInfo: userInfo\n    }).then(response => {\n      let responseData = response.data;\n      let selectedDigiSign = responseData !== \"\" ? responseData : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openCPModal: true,\n          loading: false,\n          screenName: \"IDS_DIGITALSIGNATURE\",\n          operation: \"update\",\n          selectedDigiSign,\n          isInitialRender: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const changeOwner = inputData => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/changeOwner\", { ...inputData\n    }).then(response => {\n      const responseData = response.data;\n      const inputParam = {\n        userInfo: responseData.UserInfo,\n        menuDesign: responseData.MenuDesign,\n        userRoleControlRights: responseData.UserRoleControlRights,\n        userFormControlProperties: responseData.UserFormControlproperties,\n        transactionValidation: responseData.TransactionValidation,\n        //displayName: \"\",\n        userMultiRole: responseData.UserMultiRole,\n        isDeputyLogin: true,\n        // settings: responseData.Settings,\n        //deputyUser: responseData.DeputyUser,\n        // deputyUserRole: responseData.DeputyUserRole,\n        loading: false,\n        masterData: [],\n        //navigation: \"home\",\n        navigation: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename,\n        defaultMenuHome: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0],\n        inputParam: {},\n        displayName: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].sdisplayname,\n        openRoleBox: false,\n        userImagePath: responseData.UserImagePath,\n        profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\n        idleneed: true\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: inputParam\n      });\n\n      if (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename === 'dashboard') {\n        dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\n      } else if (inputParam.navigation === 'apiservice') {\n        const inputParam1 = {\n          inputData: {\n            currentdate: formatInputDate(new Date(), true),\n            \"userinfo\": response.data.UserInfo\n          },\n          serviceNeed: true,\n          classUrl: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].shomename,\n          methodUrl: response.data.HomeDesign.filter(x => x.ndefaultstatus === 3)[0].smethodurl\n        };\n        dispatch(callService(inputParam1));\n      } //dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\n\n\n      dispatch(getListAlert(response.data.UserInfo));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const logOutAuditAction = (inputData, languageList) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post('login/insertAuditAction', { ...inputData,\n      nFlag: 2\n    }).then(response => {\n      languageList && languageList.map(x => {\n        loadMessages({}, x.slanguagetypecode);\n      });\n      dispatch(navPage(\"login\"));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const elnLoginAction = (inputParam, serverUrl, uiUrl) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(serverUrl, { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (response !== null && response.data.objResponse !== null) {\n        if (response.data.objResponse.status) {\n          if (uiUrl) {\n            let user = response;\n            let elnURL = uiUrl + \"#\" + user.data.username + \"$\" + user.data.password;\n            window.open(elnURL, '_blank');\n          } else {\n            toast.info(intl.FormattedMessage({\n              id: \"IDS_ELNUIURLNOTAVAILABLE\"\n            }));\n          }\n        } else {\n          toast.info(response.data.objResponse.information);\n        } // if(!$(\"#appsdetails\").is(\":hidden\")){\n        //     $('#appsdetails').addClass(\"dp-none\");\n        // }\n\n      }\n\n      ;\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const sdmsLoginAction = (inputParam, serverUrl, sdmsUIUrl) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(serverUrl, { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (response !== null && response.data.status) {\n        if (response.data.status) {\n          const sdmsURL = sdmsUIUrl + \"?un=\" + response.data.username + \"&pd=\" + response.data.password + \"&sc=\" + inputParam.sSiteCode;\n          window.open(sdmsURL, '_blank');\n        } else {\n          toast.info(response.Message);\n        }\n      } else {\n        toast.info(intl.FormattedMessage({\n          id: \"IDS_CHECKSYNCSERVICE\"\n        }));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const getUsersiteRole = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post('login/changeSite', {\n      \"usersSite\": inputParam.selectedRecord.nusersitecode.item\n    }).then(response => {\n      const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loginUserRole: roleMap.get(\"OptionList\"),\n          selectedRecord: { ...inputParam.selectedRecord,\n            nusermultirolecode: roleMap.get(\"DefaultValue\") ? roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\"\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const checkPassword = (inputParam, selectedRecord) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getlogintypevalidation\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: { ...selectedRecord,\n            nusercode: response.data.Users.nusercode\n          },\n          userInfo: {\n            nlogintypecode: inputParam.nlogintypecode\n          },\n          openCPModal: response.data.PassFlag === 6 ? true : false,\n          passwordPolicy: response.data.PasswordPolicy,\n          screenName: \"IDS_CREATEPASSWORD\",\n          loading: false,\n          PassFlag: response.data.PassFlag,\n          createPwdRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function getDashBoardForHome(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/staticdashboard/getListStaticDashBoard\", {\n      'userinfo': inputParam.data.userInfo\n    }).then(response => {\n      let respObject = {\n        masterDataStatic: response.data,\n        loading: false,\n        userInfo: inputParam.data.userInfo\n      };\n\n      if (response.data !== null && Object.keys(response.data).length > 0) {\n        respObject = { ...inputParam.data,\n          ...respObject,\n          currentPageNo: -1\n        };\n      }\n\n      dispatch(getHomeDashBoard(inputParam.data.userInfo, 0, false, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport const getcolorMaster = userInfo => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/useruiconfig/getcolormastertheme\", {\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport const submitUserTheme = (useruiconfig, userInfo) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/useruiconfig/createUserUiConfig\", {\n      \"useruiconfig\": useruiconfig,\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...response.data,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}; //ALPD-4102\n\nexport const getAboutInfo = userinfo => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/login/getAboutInfo\", {\n      userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openAboutModal: true,\n          loading: false,\n          screenName: \"IDS_ABOUT\",\n          aboutInfo: response.data.jsondata\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/LoginAction.js"],"names":["DEFAULT_RETURN","UPDATE_LANGUAGE","REQUEST_INIT","rsapi","intl","createIntlReinitilize","Axios","toast","constructjsonOptionList","constructOptionList","formatInputDate","rearrangeDateFormat","getHomeDashBoard","getListStaticDashBoard","getListAlert","getRandomColor","loadMessages","messages_ru","messages_tg","messages_en","messages_ko","messages_fr","PostgreSQLMaintenance","transactionStatus","callService","ConfirmMessage","messages","initRequest","loading","type","payload","navPage","data","dispatch","navigation","nusermultirolecode","undefined","nusersitecode","selectedRecord","loginFlag","changeLanguage","language","loginType","loginTypeMap","loginTypeList","get","nlogintypecode","find","item","value","clickOnLoginButton","inputData","languageList","post","url","then","response","returnStr","toUpperCase","responseData","PassFlag","map","x","slanguagetypecode","openCPModal","UNLOCK","EXPIRED","passwordPolicy","PasswordPolicy","screenName","userInfo","UserInfo","inputParam","menuDesign","MenuDesign","HomeDesign","filter","ndefaultstatus","shomename","defaultMenuHome","userRoleControlRights","UserRoleControlRights","userFormControlProperties","UserFormControlproperties","transactionValidation","TransactionValidation","displayName","sdisplayname","userMultiRole","UserMultiRole","settings","Settings","reportSettings","ReportSettings","integrationSettings","IntegrationSettings","elnUserInfo","ELNUserInfo","elnSite","ELNSite","genericLabel","GenericLabel","genericLabelIDS","GenericLabelIDS","sdmselnsettings","SDMSELNSettings","hideQualisForms","HideQualisForms","filterOperator","FilterOperator","deputyUser","DeputyUser","deputyUserRole","DeputyUserRole","isDeputyLogin","userImagePath","UserImagePath","profileColor","idleneed","colortheme","selectedUserUiConfig","inputParam1","currentdate","Date","serviceNeed","classUrl","methodUrl","smethodurl","PasswordAlertDay","info","formatMessage","id","warn","catch","error","status","message","submitChangeRole","masterData","openRoleBox","updateStore","updateInfo","loadEsign","loadEsignStateHandle","currentTimeUrl","screenData","userinfo","reasonUrl","all","reasonMap","reasonList","typeName","serverTime","esignReasonList","masterStatus","errorCode","getChangeUserRole","getLoginDetails","maintenanceBreakPopUp","breakTime","confirmMessage","confirm","MaintenanceBreak","STARTHOUR","ENDHOUR","minutesLeftToday","STARTMINUTE","minutesNextDay","ENDMINUTE","minutesThisDay","date","setHours","Hours","setMinutes","Minutes","setSeconds","Seconds","isMaintenanceTime","getHours","getMinutes","incrementTimeByMinute","maintenanceCheck","setTimeout","setInterval","getSeconds","languageMap","Language","defaultLanguage","languageCode","LoginType","loginTypes","nlanguagecode","getUserSiteAndRole","logintype","NewAdsUser","openADSModal","createPwdRecord","roleMap","siteMap","Site","loggeInLoginTypeCode","Users","logintypecode","length","loginUserRole","loginUserSite","nusercode","createPassword","success","validateADSPassword","slanguagefilename","changepassword","validateEsignforDigitalSignature","toLowerCase","saveDigitalSign","formData","append","JSON","stringify","getPassWordPolicy","nuserrolecode","getDigitalSign","selectedDigiSign","operation","isInitialRender","changeOwner","logOutAuditAction","nFlag","elnLoginAction","serverUrl","uiUrl","objResponse","user","elnURL","username","password","window","open","FormattedMessage","information","sdmsLoginAction","sdmsUIUrl","sdmsURL","sSiteCode","Message","getUsersiteRole","checkPassword","getDashBoardForHome","respObject","masterDataStatic","Object","keys","currentPageNo","getcolorMaster","submitUserTheme","useruiconfig","getAboutInfo","openAboutModal","aboutInfo","jsondata"],"mappings":"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","sourcesContent":["import { DEFAULT_RETURN, UPDATE_LANGUAGE, REQUEST_INIT } from './LoginTypes';\r\nimport rsapi from \"../rsapi\";\r\nimport { intl, createIntlReinitilize } from '../components/App';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { constructjsonOptionList, constructOptionList, formatInputDate, rearrangeDateFormat } from '../components/CommonScript';\r\nimport { getHomeDashBoard } from './DashBoardTypeAction';\r\nimport { getListStaticDashBoard } from './StaticDashBoardAction';\r\nimport { getListAlert } from './AlertViewAction'\r\nimport { getRandomColor } from '../components/header/headerutils';\r\nimport { loadMessages } from '@progress/kendo-react-intl';\r\nimport messages_ru from '../assets/translations/ru.json';\r\nimport messages_tg from '../assets/translations/tg.json';\r\nimport messages_en from '../assets/translations/en.json';\r\nimport messages_ko from '../assets/translations/ko.json';\r\nimport messages_fr from '../assets/translations/fr.json';\r\nimport { PostgreSQLMaintenance, transactionStatus } from '../components/Enumeration';\r\nimport { callService } from './ServiceAction';\r\nimport ConfirmMessage from '../components/confirm-alert/confirm-message.component';\r\n\r\nconst messages = {\r\n    'en-US': messages_en,\r\n    'ru-RU': messages_ru,\r\n    'tg-TG': messages_tg,\r\n    //ALPD-5196 ADDed by Neeraj -All masters screens > Filter is in multi Language\r\n    'ko-KR': messages_ko,\r\n    'fr-FR': messages_fr\r\n}\r\n\r\n\r\nexport const initRequest = (loading) => {\r\n    return {\r\n        type: REQUEST_INIT,\r\n        payload: loading\r\n    }\r\n}\r\n\r\nexport const navPage = (data) => dispatch => {\r\n    dispatch({\r\n        type: DEFAULT_RETURN,\r\n        payload: {\r\n            navigation: data,\r\n            nusermultirolecode: undefined,\r\n            nusersitecode: undefined,\r\n            selectedRecord: undefined,\r\n            loginFlag: false    //  ALPD-5704   Added loginFlag to handle url login issue by Vishakh (09-04-2025)\r\n        }\r\n    });\r\n}\r\n\r\nexport const changeLanguage = (language, selectedRecord, loginType) => (dispatch) => {\r\n    const loginTypeMap = constructjsonOptionList(loginType || [], \"nlogintypecode\",\r\n        \"sdisplayname\", false, false, true, undefined, 'jsondata', true, language);\r\n    createIntlReinitilize(language);  //ALPD-715 Fix\r\n    dispatch({\r\n        type: UPDATE_LANGUAGE,\r\n        payload: {\r\n            language,\r\n            // selectedRecord,\r\n            loginTypeList: loginTypeMap.get(\"OptionList\"),\r\n            selectedRecord: {\r\n                ...selectedRecord,\r\n                // ALPD-3839\r\n                nlogintypecode: loginTypeMap.get(\"OptionList\").find(item => item.value === selectedRecord.nlogintypecode.value) || \"\"\r\n                // nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\"\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nexport const clickOnLoginButton = (inputData, languageList) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputData.url, inputData)\r\n            .then(response => {\r\n                const returnStr = response.data[\"rtn\"];\r\n                if (returnStr.toUpperCase() === \"SUCCESS\") {\r\n                    const responseData = response.data;\r\n                    const PassFlag = responseData.PassFlag;\r\n                    //ALPD-4789 L.Subashini cleared warnings\r\n                    languageList &&\r\n                        languageList.map(x => {\r\n                            return loadMessages(messages[inputData.slanguagetypecode], inputData.slanguagetypecode);\r\n                        })\r\n                    createIntlReinitilize(inputData.slanguagetypecode);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openCPModal: response.data.PassFlag === transactionStatus.UNLOCK || PassFlag === transactionStatus.EXPIRED ? true : false,\r\n                            passwordPolicy: response.data.PasswordPolicy,\r\n                            screenName: PassFlag === transactionStatus.UNLOCK ? \"IDS_CREATEPASSWORD\" : PassFlag === transactionStatus.EXPIRED ? \"IDS_CHANGEPASSWORD\" : \"\",\r\n                            PassFlag,\r\n                            userInfo: response.data.UserInfo,\r\n                            // userInfo: {\r\n                            //     nlogintypecode: inputData.nlogintypecode\r\n                            // }\r\n                            loginFlag: true //  ALPD-5704   Added loginFlag to handle url login issue by Vishakh (09-04-2025)\r\n                        }\r\n                    });\r\n                    if (responseData.PassFlag !== transactionStatus.UNLOCK && responseData.PassFlag !== transactionStatus.EXPIRED) {\r\n                        const inputParam = {\r\n                            userInfo: responseData.UserInfo,\r\n                            menuDesign: responseData.MenuDesign,\r\n                            HomeDesign: responseData.HomeDesign,\r\n                            navigation: (responseData.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename,\r\n                            defaultMenuHome: (responseData.HomeDesign.filter(x => x.ndefaultstatus === 3))[0],\r\n                            userRoleControlRights: responseData.UserRoleControlRights,\r\n                            userFormControlProperties: responseData.UserFormControlproperties,\r\n                            transactionValidation: responseData.TransactionValidation,\r\n                            displayName: (responseData.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].sdisplayname,\r\n                            userMultiRole: responseData.UserMultiRole,\r\n                            settings: responseData.Settings,\r\n                            reportSettings: responseData.ReportSettings,\r\n                            integrationSettings: responseData.IntegrationSettings,\r\n                            elnUserInfo: responseData.ELNUserInfo,\r\n                            elnSite: responseData.ELNSite,\r\n                            genericLabel: responseData.GenericLabel,\r\n                            genericLabelIDS: responseData.GenericLabelIDS,\r\n                            sdmselnsettings: responseData.SDMSELNSettings,\r\n                            hideQualisForms: responseData.HideQualisForms,\r\n                            filterOperator: responseData.FilterOperator,\r\n                            deputyUser: response.data.DeputyUser,\r\n                            deputyUserRole: response.data.DeputyUserRole,\r\n                            isDeputyLogin: false,\r\n                            loading: false,\r\n                            userImagePath: responseData.UserImagePath,\r\n                            //profileColor: \"#002699\",\r\n                            profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\r\n                            idleneed: true,\r\n                            colortheme: responseData.colortheme,\r\n                            selectedUserUiConfig: responseData.selectedUserUiConfig\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: inputParam\r\n                        });\r\n\r\n                        if (inputParam.navigation === 'dashboard') {\r\n                            dispatch(getListStaticDashBoard(responseData.UserInfo));\r\n                        } else if (inputParam.navigation === 'apiservice') {\r\n                            const inputParam1 = {\r\n                                inputData: { currentdate: formatInputDate(new Date(), true), \"userinfo\": inputParam.userInfo },\r\n                                serviceNeed: true, classUrl: inputParam.navigation, methodUrl: (responseData.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].smethodurl\r\n                            };\r\n                            dispatch(callService(inputParam1));\r\n                        }\r\n\r\n                        dispatch(getListAlert(responseData.UserInfo, true));\r\n                        if (responseData.PasswordAlertDay) {\r\n                            toast.info(intl.formatMessage({\r\n                                id: \"IDS_PASSWORDEXPIRY\"\r\n                            }) + \" \" + responseData.PasswordAlertDay + \" \" + intl.formatMessage({\r\n                                id: \"IDS_DAYS\"\r\n                            }))\r\n                        }\r\n                    }\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: returnStr\r\n                    }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else if (error.response === undefined) {\r\n                    toast.warn(\"Service not available\");\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const submitChangeRole = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getuserscreenrightsmenu\", inputParam)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        userInfo: response.data.UserInfo,\r\n                        menuDesign: response.data.MenuDesign,\r\n                        navigation: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename,\r\n                        defaultMenuHome: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0],\r\n                        userRoleControlRights: response.data.UserRoleControlRights,\r\n                        userMultiRole: response.data.UserMultiRole,\r\n                        deputyUser: response.data.DeputyUser,\r\n                        deputyUserRole: response.data.DeputyUserRole,\r\n                        loading: false,\r\n                        masterData: [],\r\n                        displayName: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].sdisplayname,\r\n                        // navigation: \"home\",\r\n                        inputParam: {},\r\n                        openRoleBox: false\r\n                    }\r\n                });\r\n                if ((response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename === 'dashboard') {\r\n                    dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\r\n                } else if (inputParam.navigation === 'apiservice') {\r\n                    const inputParam1 = {\r\n                        inputData: { currentdate: formatInputDate(new Date(), true), \"userinfo\": response.data.UserInfo },\r\n                        serviceNeed: true, classUrl: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename, methodUrl: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].smethodurl\r\n                    };\r\n                    dispatch(callService(inputParam1));\r\n                }\r\n\r\n                // dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\r\n                dispatch(getListAlert(response.data.UserInfo));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const updateStore = (updateInfo) => dispatch => {\r\n    //ALPD-3511 added loadEsignStateHandle key to handle EsignStateHandle component\r\n    if (updateInfo.data.loadEsign === true || updateInfo.data.loadEsignStateHandle) {\r\n\r\n        const currentTimeUrl = rsapi.post(\"/timezone/getLocalTimeByZone\", {\r\n            \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\r\n        });\r\n        const reasonUrl = rsapi.post(\"/reason/getReason\", {\r\n            \"userinfo\": updateInfo.data.screenData.inputParam.inputData.userinfo\r\n        });\r\n        dispatch(initRequest(true));\r\n        Axios.all([currentTimeUrl, reasonUrl])\r\n            .then(response => {\r\n\r\n                const reasonMap = constructOptionList(response[1].data || [], \"nreasoncode\",\r\n                    \"sreason\", undefined, undefined, false);\r\n                const reasonList = reasonMap.get(\"OptionList\");\r\n\r\n                dispatch({\r\n                    type: updateInfo.typeName,\r\n                    payload: {\r\n                        serverTime: rearrangeDateFormat(updateInfo.data.screenData.inputParam.inputData.userinfo, response[0].data),\r\n                        esignReasonList: reasonList,\r\n                        ...updateInfo.data,\r\n                        masterStatus: \"\",\r\n                        errorCode: undefined,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    } else {\r\n        dispatch({\r\n            type: updateInfo.typeName,\r\n            payload: {\r\n                ...updateInfo.data,\r\n                masterStatus: \"\",\r\n                errorCode: undefined\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport const getChangeUserRole = (userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getchangerole\", {\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//commend by gowtham \r\n// export const getLoginDetails = () => {\r\n//     return (dispatch) => {\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"/login/getloginInfo\", {})\r\n//             .then(response => {\r\n//                 // let loginType = [];\r\n//                 // response.data.LoginType.map(type => {\r\n//                 //     loginType\r\n//                 // })\r\n//                 const languageMap = constructOptionList(response.data.Language || [], \"slanguagetypecode\", \"slanguagename\", false, false, true);\r\n//                 let defaultLanguage = languageMap.get(\"DefaultValue\") ? languageMap.get(\"DefaultValue\") : undefined;\r\n//                 let languageCode = defaultLanguage ? defaultLanguage.value : \"en-US\";\r\n//                 const loginTypeMap = constructjsonOptionList(response.data.LoginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, languageCode);\r\n\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loginTypes: response.data.LoginType,\r\n//                         loginTypeList: loginTypeMap.get(\"OptionList\"),\r\n//                         languageList: languageMap.get(\"OptionList\"),\r\n//                         nlanguagecode: defaultLanguage || \"\",\r\n//                         selectedRecord: {\r\n//                             nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\",\r\n//                             nlanguagecode: defaultLanguage || \"\"\r\n//                         },\r\n//                         language: defaultLanguage.value,\r\n//                         loading: false\r\n//                     }\r\n//                 });\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loading: false\r\n//                     }\r\n//                 });\r\n//                 if (error.response && error.response.status === 500) {\r\n//                     toast.error(intl.formatMessage({\r\n//                         id: error.message\r\n//                     }));\r\n//                 } else if (error.response === undefined) {\r\n//                     toast.warn(\"Service not available\");\r\n//                 } else {\r\n//                     toast.warn(intl.formatMessage({\r\n//                         id: error.response.data\r\n//                     }));\r\n//                 }\r\n//             });\r\n//     }\r\n// }\r\n\r\nexport const getLoginDetails = () => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n\r\n        // Gowtham R -- ALPD-5190 -- 14/12/2024 -- for Vacuum Start\r\n        rsapi.post(\"/login/getJavaTime\")\r\n        .then(response => {\r\n            const maintenanceBreakPopUp = (breakTime) => {\r\n                const confirmMessage = new ConfirmMessage();\r\n                confirmMessage.confirm(\r\n                    \"MaintainceBreakMessage\",\r\n                        intl.formatMessage({\r\n                            id: \"IDS_MAINTAINCEBREAK\"\r\n                        }),\r\n                        intl.formatMessage({\r\n                            id: \"IDS_MAINTAINCEBREAKMESSAGE\"\r\n                        }),\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        false,\r\n                        undefined,\r\n                        breakTime\r\n                    );\r\n                }\r\n                let MaintenanceBreak = 0;\r\n                if (PostgreSQLMaintenance.STARTHOUR > PostgreSQLMaintenance.ENDHOUR) {\r\n                    const minutesLeftToday = (60 - PostgreSQLMaintenance.STARTMINUTE) + ((23 - PostgreSQLMaintenance.STARTHOUR) * 60);\r\n                    const minutesNextDay = (PostgreSQLMaintenance.ENDHOUR * 60) + PostgreSQLMaintenance.ENDMINUTE;\r\n                    MaintenanceBreak = minutesLeftToday + minutesNextDay;\r\n                } else if (PostgreSQLMaintenance.STARTHOUR < PostgreSQLMaintenance.ENDHOUR) {\r\n                    const minutesThisDay = ((PostgreSQLMaintenance.ENDHOUR - PostgreSQLMaintenance.STARTHOUR) * 60)\r\n                        - PostgreSQLMaintenance.STARTMINUTE + PostgreSQLMaintenance.ENDMINUTE;\r\n                        MaintenanceBreak = minutesThisDay;\r\n                } else {\r\n                    MaintenanceBreak = PostgreSQLMaintenance.ENDMINUTE - PostgreSQLMaintenance.STARTMINUTE;\r\n                }                \r\n                const date = new Date();\r\n                date.setHours(response.data.Hours);\r\n                date.setMinutes(response.data.Minutes);\r\n                date.setSeconds(response.data.Seconds);\r\n                \r\n                const isMaintenanceTime = () => {\r\n                    if (\r\n                        (date.getHours() > PostgreSQLMaintenance.STARTHOUR || \r\n                        (date.getHours() === PostgreSQLMaintenance.STARTHOUR && date.getMinutes() >= PostgreSQLMaintenance.STARTMINUTE)) &&\r\n                        (date.getHours() < PostgreSQLMaintenance.ENDHOUR || \r\n                        (date.getHours() === PostgreSQLMaintenance.ENDHOUR && date.getMinutes() < PostgreSQLMaintenance.ENDMINUTE))\r\n                    ) {\r\n                        MaintenanceBreak = PostgreSQLMaintenance.ENDMINUTE - date.getMinutes();\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                };\r\n                \r\n                const incrementTimeByMinute = () => {\r\n                    date.setMinutes(date.getMinutes() + 1);\r\n                    if (date.getMinutes() === 60) {\r\n                        date.setMinutes(0);\r\n                        date.setHours(date.getHours() + 1);\r\n                    }\r\n                    if (date.getHours() === 24) {\r\n                        date.setHours(0);\r\n                    }\r\n                };\r\n                \r\n                const maintenanceCheck = () => {\r\n                    if (isMaintenanceTime()) {\r\n                        maintenanceBreakPopUp(60000 * MaintenanceBreak);\r\n                    }\r\n                };\r\n                \r\n                setTimeout(() => {\r\n                    incrementTimeByMinute();\r\n                    maintenanceCheck();\r\n                    \r\n                    setInterval(() => {\r\n                        incrementTimeByMinute();\r\n                        maintenanceCheck();\r\n                    }, 60000);\r\n                    \r\n                }, (60 - (date.getSeconds() + 1)) * 1000);\r\n                \r\n                if (isMaintenanceTime()) {\r\n                    maintenanceBreakPopUp(60000 * MaintenanceBreak);\r\n                }else{\r\n                    // for Vacuum End\r\n                    \r\n                    rsapi.post(\"/login/getloginInfo\", {})\r\n                        .then(response => {\r\n            \r\n                            const languageMap = constructOptionList(response.data.Language || [], \"slanguagetypecode\", \"slanguagename\", false, false, true);\r\n                            let defaultLanguage = languageMap.get(\"DefaultValue\") ? languageMap.get(\"DefaultValue\") : undefined;\r\n                            let languageCode = defaultLanguage ? defaultLanguage.value : \"en-US\";\r\n                            const loginTypeMap = constructjsonOptionList(response.data.LoginType || [], \"nlogintypecode\", \"sdisplayname\", false, false, true, undefined, 'jsondata', true, languageCode);\r\n            \r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loginTypes: response.data.LoginType,\r\n                                    loginTypeList: loginTypeMap.get(\"OptionList\"),\r\n                                    languageList: languageMap.get(\"OptionList\"),\r\n                                    nlanguagecode: defaultLanguage || \"\",\r\n                                    selectedRecord: {\r\n                                        nlogintypecode: loginTypeMap.get(\"DefaultValue\") ? loginTypeMap.get(\"DefaultValue\") : \"\",\r\n                                        nlanguagecode: defaultLanguage || \"\"\r\n                                    },\r\n                                    language: defaultLanguage.value,\r\n                                    loading: false\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false\r\n                                }\r\n                            });\r\n                            if (error.response && error.response.status === 500) {\r\n                                toast.error(intl.formatMessage({\r\n                                    id: error.message\r\n                                }));\r\n                            } else if (error.response === undefined) {\r\n                                toast.warn(\"Service not available\");\r\n                            } else {\r\n                                toast.warn(intl.formatMessage({\r\n                                    id: error.response.data\r\n                                }));\r\n                            }\r\n                        });\r\n                }\r\n                \r\n            });\r\n        }\r\n}\r\n\r\nexport const getUserSiteAndRole = (inputParam, selectedRecord) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getloginvalidation\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                if (inputParam.Language !== undefined && inputParam.logintype !== undefined) {\r\n                    //Start\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\r\n                    if (response.data && response.data.NewAdsUser && response.data.NewAdsUser === \"true\") {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                openADSModal: true,\r\n                                userInfo: {\r\n                                    nlogintypecode: inputParam.nlogintypecode || selectedRecord.nlogintypecode && selectedRecord.nlogintypecode.value,\r\n                                },\r\n                                screenName: \"IDS_NEWADSUSERVALIDATION\",\r\n                                loading: false,\r\n                                createPwdRecord: {},\r\n                            }\r\n                        });\r\n                    }\r\n                    //End\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\r\n                    else {\r\n                        const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\r\n                        const siteMap = constructOptionList(response.data.Site || [], \"nusersitecode\", \"ssitename\", false, false, true, \"ndefaultsite\");\r\n                        let loggeInLoginTypeCode = response.data.Users.nlogintypecode;\r\n                        let logintypecode = inputParam.logintype.filter(x => x.value === loggeInLoginTypeCode);\r\n                        if (inputParam.logintype.length > 0 && logintypecode.length === 0) {\r\n                            logintypecode = inputParam.logintype;\r\n                            loggeInLoginTypeCode = logintypecode[0].value;\r\n                        }\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loginUserRole: roleMap.get(\"OptionList\"),\r\n                                loginUserSite: siteMap.get(\"OptionList\"),\r\n                                nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                    roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\r\n\r\n                                nusersitecode: siteMap.get(\"DefaultValue\") ?\r\n                                    siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\r\n\r\n                                nusercode: response.data.Users.nusercode,\r\n                                nlogintypecode: logintypecode ? logintypecode[0] : \"\",\r\n\r\n                                selectedRecord: {\r\n                                    ...selectedRecord,\r\n                                    nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                        roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\r\n                                    nusersitecode: siteMap.get(\"DefaultValue\") ?\r\n                                        siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\r\n                                    nusercode: response.data.Users.nusercode,\r\n                                    nlogintypecode: logintypecode ? logintypecode[0] : \"\"\r\n                                },\r\n\r\n                                openCPModal: response.data.PassFlag === 6 ? true : false,\r\n                                passwordPolicy: response.data.PasswordPolicy,\r\n                                screenName: \"IDS_CREATEPASSWORD\",\r\n                                loading: false,\r\n                                PassFlag: response.data.PassFlag,\r\n                                createPwdRecord: {},\r\n                                userInfo: {\r\n                                    nlogintypecode: loggeInLoginTypeCode\r\n                                }\r\n                            }\r\n\r\n\r\n                        });\r\n                    }\r\n                } else {\r\n                    toast.warn(inputParam.Language === undefined ? \"Language not available\" : \"Login type not available\");\r\n                }\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loginUserRole: [],\r\n                        loginUserSite: [],\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nusermultirolecode: \"\",\r\n                            nusersitecode: \"\"\r\n                        }\r\n                    }\r\n                });\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else if (error.response === undefined) {\r\n                    toast.warn(\"Service not available\");\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n\r\n\r\n            });\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const createPassword = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/createnewpassword\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: false,\r\n                        loading: false,\r\n                        createPwdRecord: {}\r\n                    }\r\n                });\r\n                toast.success(intl.formatMessage({\r\n                    id: \"IDS_PASSWORDCREATEDSUCCESSFULLY\"\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Start ALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\r\nexport const validateADSPassword = (inputParam) => {\r\n    let selectedRecord = inputParam.selectedRecord || {};\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/validateadspassword\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n\r\n                if (inputParam.slanguagefilename !== undefined) {\r\n\r\n                    const roleMap = constructOptionList((response.data && response.data.UserMultiRole) || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\r\n                    const siteMap = constructOptionList((response.data && response.data.Site) || [], \"nusersitecode\", \"ssitename\", false, false, true, \"ndefaultsite\");\r\n                    // let loggeInLoginTypeCode = response.data.Users.nlogintypecode;\r\n                    // let logintypecode = inputParam.logintype.filter(x => x.value === loggeInLoginTypeCode);\r\n                    // if (inputParam.logintype.length > 0 && logintypecode.length === 0) {\r\n                    //     logintypecode = inputParam.logintype;\r\n                    //     loggeInLoginTypeCode = logintypecode[0].value;\r\n                    // }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loginUserRole: roleMap.get(\"OptionList\"),\r\n                            loginUserSite: siteMap.get(\"OptionList\"),\r\n                            nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\r\n\r\n                            nusersitecode: siteMap.get(\"DefaultValue\") ?\r\n                                siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\r\n\r\n                            nusercode: response.data.Users.nusercode,\r\n                            nlogintypecode: inputParam.nlogintypecode,\r\n\r\n                            selectedRecord: {\r\n                                ...selectedRecord,\r\n                                nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                    roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\",\r\n                                nusersitecode: siteMap.get(\"DefaultValue\") ?\r\n                                    siteMap.get(\"DefaultValue\") : siteMap.get(\"OptionList\") ? siteMap.get(\"OptionList\")[0] : \"\",\r\n                                nusercode: response.data.Users.nusercode,\r\n                                //nlogintypecode: ...inputParam.nlogintypecode || \"\"\r\n                            },\r\n\r\n                            openADSModal: false,\r\n                            passwordPolicy: response.data.PasswordPolicy,\r\n                            // screenName: \"IDS_CREATEPASSWORD\",\r\n                            loading: false,\r\n                            // PassFlag: response.data.PassFlag,\r\n                            createPwdRecord: {},\r\n                            userInfo: {\r\n                                nlogintypecode: inputParam.nlogintypecode\r\n                            }\r\n                        }\r\n\r\n\r\n                    });\r\n\r\n                } else {\r\n                    toast.warn(\"Language not available\");\r\n                }\r\n            }\r\n            )\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loginUserRole: [],\r\n                        loginUserSite: [],\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nusermultirolecode: \"\",\r\n                            nusersitecode: \"\"\r\n                        }\r\n                    }\r\n                });\r\n                if (error.response && error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else if (error.response === undefined) {\r\n                    toast.warn(\"Service not available\");\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n\r\n\r\n            });\r\n    }\r\n}\r\n//End\tALPD-4393 17/06/2024 Abdul Gaffoor.A To validate ads password of login User and to get ads user details and update it\r\n\r\nexport const changepassword = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/changepassword\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: false,\r\n                        loading: false,\r\n                        createPwdRecord: {},\r\n                        navigation: \"login\"\r\n                    }\r\n                });\r\n                toast.success(intl.formatMessage({\r\n                    id: \"IDS_PASSWORDCHANGEDSUCCESSFULLY\"\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function validateEsignforDigitalSignature(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    }\r\n                    dispatch(saveDigitalSign(inputParam[\"screenData\"][\"inputParam\"]))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport const saveDigitalSign = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const formData = inputParam.formData;\r\n        formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n        rsapi.post(\"/digitalsignature/updateDigitalSignature\", formData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: false,\r\n                        loading: false,\r\n                        loadEsign: false\r\n                    }\r\n                });\r\n                toast.success(intl.formatMessage({\r\n                    id: \"IDS_DIGITALSIGNATURESAVEDSUCCESSFULLY\"\r\n                }));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getPassWordPolicy = (nuserrolecode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getPassWordPolicy\", {\r\n            nuserrolecode\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: true,\r\n                        loading: false,\r\n                        createPwdRecord: {},\r\n                        screenName: \"IDS_CHANGEPASSWORD\",\r\n                        passwordPolicy: response.data.PasswordPolicy\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getDigitalSign = (nusercode, userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/digitalsignature/getDigitalSignature\", {\r\n            nusercode: nusercode, userInfo: userInfo\r\n        })\r\n            .then(response => {\r\n                let responseData = response.data;\r\n                let selectedDigiSign = responseData !== \"\" ? responseData : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openCPModal: true,\r\n                        loading: false,\r\n                        screenName: \"IDS_DIGITALSIGNATURE\",\r\n                        operation: \"update\",\r\n                        selectedDigiSign,\r\n                        isInitialRender: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeOwner = (inputData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/changeOwner\", {\r\n            ...inputData\r\n        })\r\n            .then(response => {\r\n                const responseData = response.data;\r\n                const inputParam = {\r\n                    userInfo: responseData.UserInfo,\r\n                    menuDesign: responseData.MenuDesign,\r\n                    userRoleControlRights: responseData.UserRoleControlRights,\r\n                    userFormControlProperties: responseData.UserFormControlproperties,\r\n                    transactionValidation: responseData.TransactionValidation,\r\n                    //displayName: \"\",\r\n                    userMultiRole: responseData.UserMultiRole,\r\n                    isDeputyLogin: true,\r\n                    // settings: responseData.Settings,\r\n                    //deputyUser: responseData.DeputyUser,\r\n                    // deputyUserRole: responseData.DeputyUserRole,\r\n                    loading: false,\r\n                    masterData: [],\r\n                    //navigation: \"home\",\r\n                    navigation: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename,\r\n                    defaultMenuHome: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0],\r\n                    inputParam: {},\r\n                    displayName: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].sdisplayname,\r\n                    openRoleBox: false,\r\n                    userImagePath: responseData.UserImagePath,\r\n                    profileColor: responseData.UserImagePath === \"\" ? getRandomColor([240, 360], [90, 100], [0, 95], [1, 1]) : \"#ff0000\",\r\n                    idleneed: true\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: inputParam\r\n                });\r\n                if ((response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename === 'dashboard') {\r\n                    dispatch(getListStaticDashBoard(response.data.UserInfo, 1));\r\n                } else if (inputParam.navigation === 'apiservice') {\r\n                    const inputParam1 = {\r\n                        inputData: { currentdate: formatInputDate(new Date(), true), \"userinfo\": response.data.UserInfo },\r\n                        serviceNeed: true, classUrl: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].shomename, methodUrl: (response.data.HomeDesign.filter(x => x.ndefaultstatus === 3))[0].smethodurl\r\n                    };\r\n                    dispatch(callService(inputParam1));\r\n                }\r\n                //dispatch(getHomeDashBoard(response.data.UserInfo, 0, false));\r\n                dispatch(getListAlert(response.data.UserInfo));\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const logOutAuditAction = (inputData, languageList) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('login/insertAuditAction', {\r\n            ...inputData,\r\n            nFlag: 2\r\n        })\r\n            .then(response => {\r\n                languageList &&\r\n                    languageList.map(x => {\r\n                        loadMessages({}, x.slanguagetypecode);\r\n                    })\r\n                dispatch(navPage(\"login\"))\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const elnLoginAction = (inputParam, serverUrl, uiUrl) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(serverUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (response !== null && response.data.objResponse !== null) {\r\n                    if (response.data.objResponse.status) {\r\n                        if (uiUrl) {\r\n                            let user = response;\r\n                            let elnURL = uiUrl + \"#\" + user.data.username + \"$\" + user.data.password;\r\n                            window.open(elnURL, '_blank');\r\n                        } else {\r\n                            toast.info(intl.FormattedMessage({\r\n                                id: \"IDS_ELNUIURLNOTAVAILABLE\"\r\n                            }))\r\n                        }\r\n                    } else {\r\n                        toast.info(response.data.objResponse.information);\r\n                    }\r\n                    // if(!$(\"#appsdetails\").is(\":hidden\")){\r\n                    //     $('#appsdetails').addClass(\"dp-none\");\r\n                    // }\r\n                };\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const sdmsLoginAction = (inputParam, serverUrl, sdmsUIUrl) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(serverUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (response !== null && response.data.status) {\r\n                    if (response.data.status) {\r\n                        const sdmsURL = sdmsUIUrl + \"?un=\" + response.data.username + \"&pd=\" + response.data.password + \"&sc=\" + inputParam.sSiteCode;\r\n                        window.open(sdmsURL, '_blank');\r\n                    } else {\r\n                        toast.info(response.Message);\r\n                    }\r\n                } else {\r\n                    toast.info(intl.FormattedMessage({\r\n                        id: \"IDS_CHECKSYNCSERVICE\"\r\n                    }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const getUsersiteRole = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('login/changeSite', {\r\n            \"usersSite\": inputParam.selectedRecord.nusersitecode.item\r\n        })\r\n            .then(response => {\r\n                const roleMap = constructOptionList(response.data.UserMultiRole || [], \"nusermultirolecode\", \"suserrolename\", false, false, true, \"ndefaultrole\");\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loginUserRole: roleMap.get(\"OptionList\"),\r\n                        selectedRecord: {\r\n                            ...inputParam.selectedRecord,\r\n                            nusermultirolecode: roleMap.get(\"DefaultValue\") ?\r\n                                roleMap.get(\"DefaultValue\") : roleMap.get(\"OptionList\") ? roleMap.get(\"OptionList\")[0] : \"\"\r\n\r\n\r\n                        },\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const checkPassword = (inputParam, selectedRecord) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getlogintypevalidation\", {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            nusercode: response.data.Users.nusercode\r\n                        },\r\n                        userInfo: {\r\n                            nlogintypecode: inputParam.nlogintypecode\r\n                        },\r\n                        openCPModal: response.data.PassFlag === 6 ? true : false,\r\n                        passwordPolicy: response.data.PasswordPolicy,\r\n                        screenName: \"IDS_CREATEPASSWORD\",\r\n                        loading: false,\r\n                        PassFlag: response.data.PassFlag,\r\n                        createPwdRecord: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getDashBoardForHome(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/staticdashboard/getListStaticDashBoard\", { 'userinfo': inputParam.data.userInfo })\r\n\r\n            .then(response => {\r\n\r\n                let respObject = { masterDataStatic: response.data, loading: false, userInfo: inputParam.data.userInfo };\r\n                if (response.data !== null && Object.keys(response.data).length > 0) {\r\n                    respObject = { ...inputParam.data, ...respObject, currentPageNo: -1 };\r\n                }\r\n                dispatch(getHomeDashBoard(inputParam.data.userInfo, 0, false, respObject));\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport const getcolorMaster = (userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/useruiconfig/getcolormastertheme\", {\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const submitUserTheme = (useruiconfig, userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/useruiconfig/createUserUiConfig\", {\r\n            \"useruiconfig\": useruiconfig, \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...response.data,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n//ALPD-4102\r\nexport const getAboutInfo = (userinfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/login/getAboutInfo\", {\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openAboutModal: true,\r\n                        loading: false,\r\n                        screenName: \"IDS_ABOUT\",\r\n                        aboutInfo: response.data.jsondata\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}