{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { constructOptionList, rearrangeDateFormat } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function getComboSampleCollection(addParam) {\n  return function (dispatch) {\n    let urlArray = [];\n    const service1 = rsapi.post(\"unit/getUnit\", {\n      userinfo: addParam.userInfo\n    });\n    const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: addParam.userInfo\n    });\n    urlArray = [service1, service2];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedId = null;\n      let unit;\n      const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", undefined, undefined, true);\n      unit = unitMap.get(\"OptionList\");\n      let date = rearrangeDateFormat(addParam.userInfo, response[1].data);\n      let selectedRecord = { ...addParam.selectedRecord,\n        \"dcollectiondate\": date\n      };\n      let masterData = { ...addParam.masterData,\n        \"barcodedata\": undefined\n      };\n      selectedId = addParam.primaryKeyField;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          unit,\n          operation: addParam.operation,\n          screenName: addParam.screenName,\n          selectedRecord: selectedRecord,\n          masterData,\n          openModal: true,\n          //ALPD-4618--Vignesh R(01-08-2024)\n          ncontrolcode: addParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getBarcodeDataCollection(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"storagesamplecollection/getBarcodeConfigDataCollection\", {\n      userinfo: inputParam.userinfo,\n      nprojecttypecode: inputParam.nprojecttypecode,\n      spositionvalue: inputParam.spositionvalue,\n      nbarcodeLength: inputParam.nbarcodeLength,\n      jsondata: inputParam.jsondata\n    }).then(response => {\n      let barcodedata = response.data.jsondataBarcodeData;\n      let masterData = { ...inputParam.masterData,\n        \"barcodedata\": barcodedata,\n        \"jsondataBarcodeFields\": response.data.jsondataBarcodeFields\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          ...inputParam.selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function saveCollection(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const service1 = rsapi.post(\"storagesamplecollection/\" + inputParam.operation + \"SampleCollection\", inputParam.inputData);\n    const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputParam.inputData.userinfo\n    });\n    urlArray = [service1, service2];\n    Axios.all(urlArray).then(response => {\n      let openModal = false;\n\n      if (inputParam.saveType === 2) {\n        openModal = true;\n      }\n\n      let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\n      masterData = { ...masterData,\n        \"SampleCollection\": response[0].data.SampleCollection,\n        \"barcodedata\": \"\"\n      };\n      let selectedRecord = { ...inputParam.selectedRecord,\n        \"sbarcodeid\": \"\",\n        \"nsampleqty\": \"\",\n        \"nunitcode\": \"\",\n        \"scomments\": \"\",\n        \"dcollectiondate\": date\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          openModal: openModal,\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActiveSampleCollectionById(editParam) {\n  return function (dispatch) {\n    let selectedId = null;\n    dispatch(initRequest(true));\n    rsapi.post(\"storagesamplecollection/getActiveSampleCollectionById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"nprojecttypecode\": editParam.editRow.nprojecttypecode,\n      \"userinfo\": editParam.userInfo\n    }).then(response => {\n      selectedId = editParam.primaryKeyValue;\n      let instname = [];\n      instname.push({\n        \"value\": response.data.activeSampleColletionByID[\"nunitcode\"],\n        \"label\": response.data.activeSampleColletionByID[\"sunitname\"]\n      });\n      let date = rearrangeDateFormat(editParam.userInfo, response.data.activeSampleColletionByID['scollectiondate']); //let selectedRecord = response.data && response.data.activeSampleColletionByID\n\n      let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\n      let masterData = { ...editParam.masterData,\n        \"barcodedata\": barcodedata,\n        \"jsondataBarcodeFields\": response.data.jsondataBarcodeFields\n      };\n      let selectedRecord = { ...editParam.selectedRecord,\n        \"sbarcodeid\": response.data.activeSampleColletionByID['sbarcodeid'],\n        \"nsampleqty\": response.data.activeSampleColletionByID['nsampleqty'],\n        \"dcollectiondate\": date,\n        \"scomments\": response.data.activeSampleColletionByID['scomments']\n      };\n      selectedRecord[\"nunitcode\"] = instname[0];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          operation: editParam.operation,\n          ncontrolcode: editParam.ncontrolCode,\n          openModal: true,\n          loading: false,\n          selectedId,\n          dataState: editParam.dataState,\n          screenName: editParam.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSampleCollection(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"storagesamplecollection/getSampleCollection\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.masterData,\n        ...response.data\n      };\n      let selectedId = null;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialSampleCollection(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo; // if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\n        //     inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n        //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        // }\n\n        dispatch(saveCollection(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"]));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/SampleCollectionAction.js"],"names":["rsapi","Axios","toast","constructOptionList","rearrangeDateFormat","DEFAULT_RETURN","initRequest","intl","getComboSampleCollection","addParam","dispatch","urlArray","service1","post","userinfo","userInfo","service2","all","then","response","selectedId","unit","unitMap","data","undefined","get","date","selectedRecord","masterData","primaryKeyField","type","payload","operation","screenName","openModal","ncontrolcode","ncontrolCode","loading","catch","error","status","message","warn","getBarcodeDataCollection","inputParam","nprojecttypecode","spositionvalue","nbarcodeLength","jsondata","barcodedata","jsondataBarcodeData","jsondataBarcodeFields","saveCollection","inputData","saveType","SampleCollection","loadEsign","getActiveSampleCollectionById","editParam","primaryKeyValue","editRow","instname","push","activeSampleColletionByID","dataState","getSampleCollection","validateEsignCredentialSampleCollection"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport {\r\n    constructOptionList, rearrangeDateFormat\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\n\r\n\r\nexport function getComboSampleCollection(addParam) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const service1 = rsapi.post(\"unit/getUnit\", { userinfo: addParam.userInfo });\r\n    \r\n        const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: addParam.userInfo\r\n        });\r\n\r\n\r\n\r\n        urlArray = [service1, service2]\r\n\r\n        dispatch(initRequest(true));\r\n\r\n        Axios.all(urlArray).then(response => {\r\n\r\n\r\n            let selectedId = null;\r\n            let unit;\r\n\r\n            const unitMap = constructOptionList(response[0].data || [], \"nunitcode\",\r\n                \"sunitname\", undefined, undefined, true);\r\n            unit = unitMap.get(\"OptionList\");\r\n\r\n            let date = rearrangeDateFormat(addParam.userInfo, response[1].data);\r\n\r\n            let selectedRecord = { ...addParam.selectedRecord, \"dcollectiondate\": date }\r\n\r\n                let masterData={...addParam.masterData,\"barcodedata\":undefined}\r\n\r\n            selectedId = addParam.primaryKeyField;\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    unit,\r\n                    operation: addParam.operation, screenName: addParam.screenName,\r\n                    selectedRecord: selectedRecord,\r\n                    masterData,\r\n                    openModal: true,\r\n\t\t\t\t\t//ALPD-4618--Vignesh R(01-08-2024)\r\n                    ncontrolcode: addParam.ncontrolCode,\r\n                    loading: false, selectedId\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function getBarcodeDataCollection(inputParam) {\r\n    return function (dispatch) {\r\n      \r\n            dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"storagesamplecollection/getBarcodeConfigDataCollection\", { userinfo: inputParam.userinfo, nprojecttypecode: inputParam.nprojecttypecode, spositionvalue: inputParam.spositionvalue, nbarcodeLength: inputParam.nbarcodeLength, jsondata: inputParam.jsondata }).then(response => {\r\n\r\n            let barcodedata = response.data.jsondataBarcodeData;\r\n\r\n            let masterData = { ...inputParam.masterData, \"barcodedata\": barcodedata,\"jsondataBarcodeFields\":response.data.jsondataBarcodeFields }\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    ...inputParam.selectedRecord,\r\n                    loading: false\r\n                }\r\n            });\r\n        }\r\n        )\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    \r\n    }\r\n}\r\n\r\nexport function saveCollection(inputParam, masterData) {\r\n    return function (dispatch) {\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n      \r\n\r\n        const service1 = rsapi.post(\"storagesamplecollection/\" + inputParam.operation + \"SampleCollection\", inputParam.inputData);\r\n        const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo:inputParam.inputData.userinfo\r\n        });\r\n\r\n        urlArray = [service1, service2]\r\n\r\n        Axios.all(urlArray).then(response => {\r\n        let openModal=false;\r\n           if(inputParam.saveType===2){\r\n            openModal=true;\r\n           }\r\n           let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\r\n\r\n            masterData = { ...masterData, \"SampleCollection\": response[0].data.SampleCollection, \"barcodedata\":\"\" }\r\n            let selectedRecord = { ...inputParam.selectedRecord, \"sbarcodeid\": \"\", \"nsampleqty\": \"\", \"nunitcode\": \"\", \"scomments\": \"\", \"dcollectiondate\": date}\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    openModal: openModal,\r\n                    loading: false,\r\n                    loadEsign:false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getActiveSampleCollectionById(editParam) {\r\n    return function (dispatch) {\r\n\r\n        let selectedId = null;\r\n        dispatch(initRequest(true));\r\n\r\n        rsapi.post(\"storagesamplecollection/getActiveSampleCollectionById\", { [editParam.primaryKeyField]: editParam.primaryKeyValue,\"nprojecttypecode\":editParam.editRow.nprojecttypecode, \"userinfo\": editParam.userInfo }).then(response => {\r\n            selectedId = editParam.primaryKeyValue;\r\n            let instname = [];\r\n            instname.push({\r\n                \"value\": response.data.activeSampleColletionByID[\"nunitcode\"],\r\n                \"label\": response.data.activeSampleColletionByID[\"sunitname\"]\r\n            });\r\n            let date = rearrangeDateFormat(editParam.userInfo, response.data.activeSampleColletionByID['scollectiondate']);\r\n\r\n            //let selectedRecord = response.data && response.data.activeSampleColletionByID\r\n\r\n            let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\r\n            let masterData = { ...editParam.masterData, \"barcodedata\": barcodedata, \"jsondataBarcodeFields\":response.data.jsondataBarcodeFields }\r\n            let selectedRecord = {\r\n                ...editParam.selectedRecord, \"sbarcodeid\": response.data.activeSampleColletionByID['sbarcodeid'], \"nsampleqty\": response.data.activeSampleColletionByID['nsampleqty'],\r\n                \"dcollectiondate\": date, \"scomments\": response.data.activeSampleColletionByID['scomments']\r\n            }\r\n            selectedRecord[\"nunitcode\"] = instname[0];\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    operation: editParam.operation,\r\n                    ncontrolcode: editParam.ncontrolCode,\r\n                    openModal: true,\r\n                    loading: false,\r\n                    selectedId,\r\n                    dataState:editParam.dataState,\r\n                    screenName: editParam.screenName\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getSampleCollection(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"storagesamplecollection/getSampleCollection\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data }\r\n                let selectedId=null;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false,selectedId\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function validateEsignCredentialSampleCollection(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    // if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                    //     inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n                    //     delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n                    // }\r\n                    \r\n\t\r\n                        dispatch(saveCollection(inputParam[\"screenData\"][\"inputParam\"],inputParam[\"screenData\"][\"masterData\"]))\r\n \r\n                 \r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}