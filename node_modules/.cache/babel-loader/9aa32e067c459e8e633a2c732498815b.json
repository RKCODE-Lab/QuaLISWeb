{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\registration\\\\Registration.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { showUnderDevelopment, callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange, getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo, filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail, getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues, getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail, acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService, cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample, getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction, preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail } from '../../actions';\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { getControlMap, showEsign, sortData, constructOptionList, onDropAttachFileList, deleteAttachmentDropZone, convertDateTimetoString, comboChild } from '../../components/CommonScript';\nimport RegistrationFilter from './RegistrationFilter';\nimport Esign from '../audittrail/Esign';\nimport { injectIntl } from 'react-intl';\nimport { MediaHeader, ProductList } from '../product/product.styled';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SplitterLayout from \"react-splitter-layout\";\nimport AddTest from './AddTest';\nimport { designProperties, RegistrationType, transactionStatus } from '../../components/Enumeration'; // import BreadcrumbComponentToolbar from '../../components/ToolbarBreadcrumb.Component';\n\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { ContentPanel } from '../../components/App.styles';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddPrinter from './AddPrinter';\nimport SampleGridTab from './SampleGridTab';\nimport AddFile from './AddFile';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleComments, onSaveSubSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\nimport { onSaveSampleAttachment, onSaveSubSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { ReactComponent as Quarantine } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/Quarantine.svg\";\nimport { ReactComponent as Register } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/register.svg\";\nimport { ReactComponent as Reject } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/reject.svg\";\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript';\nimport RegistrationResultTab from './RegistrationResultTab';\nimport PortalModal from '../../PortalModal';\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\nimport AddSubSample from './AddSubSample';\n\nclass Registration extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.onReload = () => {\n      // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\n      // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\n      const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const RealFromDate = obj.fromDate;\n      const RealToDate = obj.toDate;\n      let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue;\n      let RealDesignTemplateMappingValue = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue;\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let SampleTypeValue = RealSampleTypeValue;\n      let RegTypeValue = RealRegTypeValue;\n      let RegSubTypeValue = RealRegSubTypeValue;\n      let FilterStatusValue = RealFilterStatusValue;\n      let DesignTemplateMappingValue = RealDesignTemplateMappingValue; // let FromDate = this.props.Login.masterData.FromDate\n      // let ToDate = this.props.Login.masterData.ToDate\n\n      const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        FromDate,\n        ToDate,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        SampleTypeValue,\n        RegTypeValue,\n        RegSubTypeValue,\n        FilterStatusValue,\n        DesignTemplateMappingValue,\n        RealDesignTemplateMappingValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        activeSubSampleTab,\n        flag: 1,\n        nneedtemplatebasedflow: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\n        inputData['FromDate'] = obj.fromDate;\n        inputData['ToDate'] = obj.toDate;\n        let inputParam = {\n          masterData,\n          inputData,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchSampleRef: this.searchSampleRef,\n          searchTestRef: this.searchTestRef,\n          selectedFilter: this.state.selectedFilter\n        };\n        this.props.ReloadData(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\n      const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate);\n      let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue;\n      let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue;\n      let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue;\n      let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue;\n      let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue;\n      let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n      let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n      let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n      let masterData = { ...this.props.Login.masterData,\n        RealSampleTypeValue,\n        RealRegTypeValue,\n        RealRegSubTypeValue,\n        RealFilterStatusValue,\n        RealFromDate,\n        RealToDate,\n        RealDesignTemplateMappingValue\n      };\n      let inputData = {\n        npreregno: \"\",\n        nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        userinfo: this.props.Login.userInfo,\n        activeSampleTab,\n        activeTestTab,\n        activeSubSampleTab,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        checkBoxOperation: 3\n      };\n\n      if (inputData.nsampletypecode) {\n        if (inputData.ndesigntemplatemappingcode) {\n          const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n          inputData['FromDate'] = obj.fromDate;\n          inputData['ToDate'] = obj.toDate;\n          const selectedFilter = {};\n          selectedFilter[\"fromdate\"] = RealFromDate;\n          selectedFilter[\"todate\"] = RealToDate;\n          const inputParam = {\n            masterData,\n            inputData,\n            searchSubSampleRef: this.searchSubSampleRef,\n            searchSampleRef: this.searchSampleRef,\n            searchTestRef: this.searchTestRef,\n            selectedFilter\n          };\n          this.props.getRegistrationSample(inputParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      if (this.state.enableAutoHeight) {\n        this.setState({\n          initialVerticalWidth: val - 150\n        });\n      }\n    };\n\n    this.changeSplitterOption = () => {\n      this.setState({\n        enableAutoHeight: !this.state.enableAutoHeight,\n        initialVerticalWidth: \"57vh\"\n      });\n    };\n\n    this.handleDateSubSampleChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComponentChange = (comboData, fieldName, nneedsubsample) => {\n      if (comboData !== null) {\n        //  if (!nneedsubsample) {\n        const selectedRecord = this.state.selectedRecord || {};\n\n        if (fieldName === 'ntzdreceivedate') {\n          selectedRecord[\"ntzdreceivedate\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          // const oldspecsampletypecode = selectComponent.nspecsampletypecode\n          // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\n          //     //selectComponent[\"nneedservice\"] = true;\n          // }\n          selectedRecord[fieldName] = comboData;\n          selectedRecord[\"Sample Name\"] = comboData.label;\n          selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\n          selectedRecord[\"ntestgrouptestcode\"] = [];\n          this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent, this.props.Login.Conponent);\n        } // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         selectComponent\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        // } else {\n        //     const selectComponent = this.state.selectComponent || {};\n        //     selectComponent[fieldName] = comboData;\n        //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\n        //     this.setState({ selectComponent })\n        // }\n\n      }\n    };\n\n    this.onInputOnSubSampleChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedRecord['timeonly'] = false;\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboSubSampleChange = (comboData, control, customName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        let parentList = [];\n        let childComboList = [];\n        let childColumnList = {};\n        let comboName = customName || control.label;\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData ? comboData.value : -1,\n          item: comboData ? comboData.item : \"\",\n          label: comboName,\n          nameofdefaultcomp: control.name\n        };\n\n        if (comboData) {\n          selectedRecord[comboName] = comboData;\n        } else {\n          selectedRecord[comboName] = [];\n        }\n\n        if (control.child && control.child.length > 0) {\n          childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents, control.child, \"label\");\n          childColumnList = {};\n          childColumnList = childComboList.map(columnList => {\n            const val = comboChild(this.state.regSubSamplecomboComponents, columnList, childColumnList, false); //  childColumnList = val.childColumnList\n\n            return val.childColumnList;\n          });\n          parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent, control.child, \"label\");\n          this.props.getChildValues(inputParem, this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData, childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent, [...childComboList, ...parentList]);\n        } else {\n          this.setState({\n            selectedRecord\n          }); // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: { selectedRecord }\n          // }\n          // this.props.updateStore(updateInfo);\n        }\n      } else {\n        const regSubSamplecomboData = this.props.Login.regSubSamplecomboData;\n        selectedRecord[control.label] = \"\";\n\n        if (control.child && control.child.length > 0) {\n          control.child.map(temp => {\n            selectedRecord[temp.label] = \"\";\n            delete regSubSamplecomboData[temp.label];\n            const components = [...this.state.regSubSamplecomboComponents, ...this.state.regSubSamplewithoutCombocomponent];\n            components.map(component => {\n              if (component.label === temp.label) {\n                if (component.child && component.child.length > 0) {\n                  component.child.map(temp1 => {\n                    selectedRecord[temp1.label] = \"\";\n                    delete regSubSamplecomboData[temp.label];\n                  });\n                }\n              }\n            });\n          });\n        }\n\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            selectedRecord,\n            regSubSamplecomboData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onNumericInputSubSampleChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveSubSampleClick = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n\n      if (operation === 'create') {\n        let objSubSample = this.state.selectedRecord;\n        const defaulttimezone = this.props.Login.defaulttimezone;\n        const userInfo = this.props.Login.userInfo;\n        let saveSubSample = {};\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno');\n        const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\n\n        if (this.props.Login.specBasedComponent) {\n          saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1;\n          saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1;\n        } else {\n          const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\n          saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\n        }\n\n        saveSubSample[\"jsondata\"] = {};\n        saveSubSample[\"jsonuidata\"] = {};\n        const dateList = [];\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.hasOwnProperty(\"children\")) {\n                //let componentrowlabel = ''\n                // let componentrowvalue = ''\n                component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ? {\n                      value: objSubSample[componentrow.label].value,\n                      label: objSubSample[componentrow.label].label\n                    } : -1;\n                    saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"; // if (componentrow.mandatory || objSubSample[componentrow.label]) {\n                    //     componentrowlabel = componentrowlabel + '&' + componentrow.label\n                    //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\n                    // }\n                  } else if (componentrow.inputtype === \"date\") {\n                    if (componentrow.mandatory) {\n                      saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo);\n                      saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label];\n                    } else {\n                      saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ? convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo) : objSubSample[componentrow.label] ? convertDateTimetoString(objSubSample[componentrow.label] ? objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\n                      saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label];\n                    }\n\n                    if (componentrow.timezone) {\n                      saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ? {\n                        value: objSubSample[`tz${componentrow.label}`].value,\n                        label: objSubSample[`tz${componentrow.label}`].label\n                      } : defaulttimezone ? defaulttimezone : -1;\n                      saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`];\n                    }\n\n                    dateList.push(componentrow.label);\n                  } else {\n                    saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label] : \"\";\n                    saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]; // if (objSubSample[componentrow.label]) {\n                    //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\n                    //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\n                    // }\n                  }\n\n                  return saveSubSample;\n                }); //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\n              } else {\n                if (component.inputtype === \"combo\") {\n                  saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ? {\n                    value: objSubSample[component.label].value,\n                    label: objSubSample[component.label].label\n                  } : -1;\n                  saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\";\n                } else if (component.inputtype === \"date\") {\n                  if (component.mandatory) {\n                    saveSubSample[\"jsondata\"][component.label] = convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo);\n                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                  } else {\n                    saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ? convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo) : objSubSample[component.label] ? convertDateTimetoString(objSubSample[component.label] ? objSubSample[component.label] : new Date(), userInfo) : \"\";\n                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                  }\n\n                  if (component.timezone) {\n                    saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ? {\n                      value: objSubSample[`tz${component.label}`].value,\n                      label: objSubSample[`tz${component.label}`].label\n                    } : defaulttimezone ? defaulttimezone : -1;\n                    saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`];\n                  }\n\n                  dateList.push(component.label);\n                } else {\n                  saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label] : \"\";\n                  saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label];\n                }\n              }\n\n              return saveSubSample;\n            });\n            return saveSubSample;\n          });\n          return saveSubSample;\n        });\n        saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1; // Component.unshift(saveSubSample);\n\n        let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\n        const selectedTestArray = [];\n        selectedTestData && selectedTestData.map(item => {\n          return selectedTestArray.push(item.item);\n        }); // const Test = this.props.Login.Test || [];\n        // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\n        //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\n\n        const map = {};\n        map['RegistrationSample'] = saveSubSample;\n        map['subsampleDateList'] = dateList;\n        map['subsampledateconstraints'] = this.state.subsampledateconstraints;\n        map['testgrouptest'] = selectedTestArray;\n        map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\");\n        map['userinfo'] = userInfo;\n        map['checkBoxOperation'] = 3;\n        map['ntype'] = 3;\n        map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n        map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n        map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n        map[\"checkBoxOperation\"] = 3;\n        map[\"masterData\"] = this.props.Login.masterData;\n        map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n        map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n        map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n        const inputParam = {\n          inputData: map,\n          postParamList: this.postParamList\n        };\n        this.props.saveSubSample(inputParam);\n      } else {\n        this.onUpdateSubSampleRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.mandatoryList = (prereg, printer, file, childtest, regSubSample) => {\n      let mandatory = [];\n\n      if (file) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_IMPORTFILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }];\n      } else if (printer) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_PRINTER\",\n          \"dataField\": \"sprintername\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else if (regSubSample) {\n        this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.mandatory === true) {\n                  mandatory.push({\n                    \"mandatory\": true,\n                    \"idsName\": componentrow.label,\n                    \"dataField\": componentrow.label,\n                    \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n\n                return mandatory;\n              }) : component.mandatory === true ? mandatory.push({\n                \"mandatory\": true,\n                \"idsName\": component.label,\n                \"dataField\": component.label,\n                \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n              }) : \"\";\n            });\n          });\n        });\n      } else if (childtest) {\n        mandatory = [{\n          \"mandatory\": true,\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"ntestgrouptestcode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      }\n\n      return mandatory;\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.onSaveChildTestClick = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\"); //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\n\n      const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\n      let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n      const inputData = {\n        TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\n        RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\n        ntransactionsamplecode: ntransactionsamplecode,\n        userinfo: this.props.Login.userInfo,\n        nregtypecode: masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\n        nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\n        ntype: 3,\n        nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n        npreregno: selectedSample && selectedSample.map(sample => sample.npreregno).join(\",\"),\n        // ntransactionsamplecode: selectedSubsample &&\n        // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        FromDate: obj.fromDate,\n        ToDate: obj.toDate,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"registration\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Test\",\n        responseKeyList: [{\n          \"responseKey\": \"selectedSample\",\n          \"masterDataKey\": \"RegistrationGetSample\",\n          \"primaryKey\": \"npreregno\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedSubSample\",\n          \"masterDataKey\": \"RegistrationGetSubSample\",\n          \"primaryKey\": \"ntransactionsamplecode\",\n          \"dataAction\": \"update\"\n        }, {\n          \"responseKey\": \"selectedTest\",\n          \"masterDataKey\": \"RegistrationGetTest\",\n          \"primaryKey\": \"ntransactiontestcode\",\n          \"dataAction\": \"add\"\n        }],\n        saveType,\n        formRef,\n        postParamList: this.postParamList\n      };\n\n      if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.getRegistrationComboService = (ScreenName, operation, primaryKeyField, masterData, userInfo, editId) => {\n      const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode;\n\n      if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\n        let data = [];\n        const withoutCombocomponent = [];\n        const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n        if (Layout !== undefined) {\n          Layout.map(row => {\n            return row.children.map(column => {\n              return column.children.map(component => {\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                  if (componentrow.inputtype === \"combo\") {\n                    data.push(componentrow);\n                  } else {\n                    withoutCombocomponent.push(componentrow);\n                  }\n\n                  return null;\n                }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n              });\n            });\n          });\n          const comboComponents = data;\n          let childColumnList = {};\n          data.map(columnList => {\n            const val = comboChild(data, columnList, childColumnList, true);\n            data = val.data;\n            childColumnList = val.childColumnList;\n            return null;\n          });\n          const mapOfFilterRegData = {\n            nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\n          };\n          this.props.getPreviewTemplate(masterData, userInfo, editId, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent, true, false, mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename);\n        } else {\n          toast.info(\"Configure the preregister template for this registrationtype\");\n        }\n      } else {\n        toast.info(\"select the approved design template\");\n      }\n    };\n\n    this.comboChild = (data, columnList, childColumnList, slice) => {\n      let retunObj = {}; // if (data.findIndex(x => x.label === columnList.label) !== -1) {\n\n      if (!childColumnList.hasOwnProperty(columnList.label)) {\n        if (childColumnList[columnList.label] === undefined) {\n          if (columnList.hasOwnProperty(\"child\")) {\n            let childList = [];\n            columnList.child.map(childData => {\n              const index = data.findIndex(x => x.label === childData.label);\n\n              if (index !== -1) {\n                childList.push(data[index]);\n\n                if (slice) {\n                  data = [...data.slice(0, index), ...data.slice(index + 1)];\n                }\n              }\n\n              return data;\n            });\n            childColumnList[columnList.label] = childList;\n\n            if (childList.length > 0) {\n              childList.map(y => {\n                if (y.hasOwnProperty(\"child\")) {\n                  const val = comboChild(data, y, childColumnList, slice);\n                  retunObj[\"data\"] = val.data;\n                  retunObj[\"childColumnList\"] = val.childColumnList;\n                } else {\n                  retunObj[\"data\"] = data;\n                  retunObj[\"childColumnList\"] = childColumnList;\n                }\n\n                return null;\n              });\n            } else {\n              retunObj[\"data\"] = data;\n              retunObj[\"childColumnList\"] = childColumnList;\n            }\n          } else {\n            retunObj[\"data\"] = data;\n            retunObj[\"childColumnList\"] = childColumnList;\n          }\n        } else {\n          retunObj[\"data\"] = data;\n          retunObj[\"childColumnList\"] = childColumnList;\n        }\n      } else {\n        retunObj[\"data\"] = data;\n        retunObj[\"childColumnList\"] = childColumnList;\n      }\n\n      return retunObj;\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n      setTimeout(() => {\n        this._scrollBarRef.updateScroll();\n      });\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take\n      });\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subsampleskip: e.skip,\n        subsampletake: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterChange = (event, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSample: this.props.Login.masterData.selectedSample,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.selectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab,\n          subSampleCommentDataState: this.state.subSampleCommentDataState,\n          subSampleAttachmentDataState: this.state.subSampleAttachmentDataState\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.ontestTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n\n      if (activeTestTab !== this.props.Login.activeTestTab) {\n        if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedTest: this.props.Login.masterData.selectedTest,\n            ntransactiontestcode: this.props.Login.masterData.selectedTest ? String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n            npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestTab,\n            screenName: activeTestTab,\n            resultDataState: this.state.resultDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            testAttachmentDataState: this.state.testAttachmentDataState\n          };\n          this.props.getTestChildTabDetailRegistration(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedFile = this.state.selectedFile || {};\n      selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedFile,\n        actionType: \"new\"\n      });\n    };\n\n    this.handleFilterDateChange = (dateName, dateValue) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.onUpdateRegistrationConfirm = () => {\n      this.showAlert();\n      this.onUpdateRegistration(this.props.Login.regEditParam.saveType, this.props.Login.regEditParam.formRef, this.props.Login.regEditParam.operation, 2);\n    };\n\n    this.confirmAlert = () => {\n      if (this.state.showConfirmAlert) {\n        if (this.props.Login.regDateEditConfirmMessage) {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.regDateEditConfirmMessage, this.props.intl.formatMessage({\n            id: \"IDS_OK\"\n          }), this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }), () => this.onUpdateRegistrationConfirm(), undefined, () => this.showAlert());\n        } else {\n          this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.Login.booleanFlag, \"ok\", \"Cancel\", () => this.insertRegistration(false), undefined, () => this.showAlert());\n        }\n      }\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.showAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.AddFile = () => {\n      let selectedRecord = this.state.selectedRecord;\n      let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\n      let booleanmanuf = true;\n\n      if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\n        booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false;\n      }\n\n      if (booleanmanuf) {\n        if (this.state.selectedRecord.nallottedspeccode !== undefined) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadFile: true,\n              ChildscreenName: \"File\",\n              childoperation: \"Import\",\n              parentPopUpSize: \"lg\",\n              selectedFile: undefined\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSPECIFICATION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTMANUFACTURER\"\n        }));\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectComponent = this.state.selectComponent || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectComponent[name] = '';\n        this.setState({\n          selectComponent\n        });\n      } else {\n        selectComponent[name] = value;\n        this.setState({\n          selectComponent\n        });\n      }\n    };\n\n    this.onSampleTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nsampletypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.ConfirmComponent = props => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\", \"ok\", \"cancel\", () => this.getComponentfromJava(props));\n    };\n\n    this.onRegTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map[\"nregtypecode\"] = parseInt(event.value);\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.acceptRegistration = (registerId, skip, take) => {\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n\n\n      let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (acceptList && acceptList.length > 0) {\n        if (acceptList.every(this.checkPreregisterAndQuarentine)) {\n          if (this.props.Login.masterData.selectedTest.length > 0) {\n            if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n              Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\n              ;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 3;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n              Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n              Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n              Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_ACCEPTREGISTRATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.acceptRegistrationConfirm(inputParam, registerId));\n            } else {\n              let Map = {};\n              Map[\"fromdate\"] = \"\";\n              Map[\"todate\"] = \"\";\n              Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n              Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n              Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n              Map[\"nfilterstatus\"] = -1;\n              Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\"); // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\n              //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\n\n              Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n              Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n              Map[\"userinfo\"] = this.props.Login.userInfo;\n              Map[\"nflag\"] = 2;\n              Map[\"ntype\"] = 1;\n              Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n              Map[\"activeSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n              Map[\"activeSubSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n              Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n              Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n              Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n              Map[\"checkBoxOperation\"] = 3;\n              Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n              let inputParam = {\n                inputData: Map,\n                postParamList: this.postParamList,\n                action: 'accept'\n              };\n              this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\", \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDTESTTOREGISTERSAMPLES\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGQUARANTINESAMPLES\"\n        }));\n      }\n    };\n\n    this.acceptRegistrationConfirm = (inputParam, registerId) => {\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, registerId)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            parentPopUpSize: 'lg',\n            screenName: this.props.Login.screenName,\n            operation: 'accept'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.acceptRegistration(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectQuarantine = (quarantineId, skip, take) => {\n      let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\n      let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (quarentineList && quarentineList.length > 0) {\n        if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\n          // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\n          //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\n          //if (ntransactionstatus === transactionStatus.PREREGISTER) {\n          let Map = {};\n          Map[\"fromdate\"] = \"\";\n          Map[\"todate\"] = \"\";\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 1;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\n          Map[\"ntransactionstatus\"] = quarentineList && quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\"); //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\n\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'quarantine'\n          }; //console.log(\"inputParam, quarantine:\", inputParam);\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'quarantine'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTPREREGISTERSAMPLES\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSAMPLES\"\n        }));\n      }\n    };\n\n    this.onRegSubTypeChange = (event, fieldName, labelname) => {\n      if (event !== null) {\n        let Map = {};\n        Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = parseInt(event.value);\n        Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\n        Map['userinfo'] = this.props.Login.userInfo;\n        this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      // if (comboData !== null) {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord\n      }); // }\n    };\n\n    this.PrinterChange = (comboData, fieldName) => {\n      const selectedPrinterData = this.state.selectedPrinterData || {};\n      selectedPrinterData[fieldName] = comboData;\n      this.setState({\n        selectedPrinterData\n      });\n    };\n\n    this.closeChildModal = () => {\n      let loadRegSubSample = this.props.Login.loadRegSubSample;\n      let loadFile = this.props.Login.loadFile;\n      let showSaveContinue = this.props.Login.showSaveContinue;\n      let screenName = this.props.Login.screenName;\n      let loadChildTest = this.props.Login.loadChildTest;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.state.selectedRecord;\n\n      if (this.props.Login.loadFile) {\n        loadFile = false;\n        screenName = this.props.Login.PopUpLabel;\n      } else if (this.props.Login.loadChildTest) {\n        loadChildTest = false;\n        openModal = false;\n        selectedRecord = {};\n      } else if (this.props.Login.loadRegSubSample) {\n        loadRegSubSample = false;\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadRegSubSample,\n          screenName,\n          showSaveContinue,\n          loadFile,\n          loadChildTest,\n          openModal,\n          parentPopUpSize: \"xl\",\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let loadPreregister = this.props.Login.loadPreregister;\n      let openChildModal = this.props.Login.openChildModal;\n      let parentPopUpSize = this.props.Login.pare;\n      let screenName = this.props.Login.screenName;\n      let loadPrinter = this.props.Login.loadPrinter;\n      let openPortal = this.props.Login.openPortal;\n      let Component = this.props.Login.Component;\n      let subSampleDataGridList = this.props.Login.subSampleDataGridList;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          loadPreregister = false;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              openModal,\n              openChildModal,\n              loadPreregister\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          loadEsign = false;\n\n          if (loadPreregister) {\n            parentPopUpSize = 'xl';\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign,\n              parentPopUpSize\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else {\n        openModal = false;\n        loadPrinter = false;\n        loadPreregister = false;\n        selectedRecord = {};\n        openPortal = false;\n        subSampleDataGridList = [];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadPreregister,\n            selectedRecord,\n            screenName,\n            insertSourcePreregno: undefined,\n            loadPrinter,\n            openPortal,\n            Component,\n            subSampleDataGridList\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n\n      if (operation === \"update\") {\n        this.onUpdateRegistration(saveType, formRef, operation);\n      }\n    };\n\n    this.onSavePrinterClick = () => {\n      let insertlist = []; //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\n\n      const inputParam = {\n        classUrl: 'barcode',\n        methodUrl: 'Barcode',\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          npreregno: this.props.Login.insertPrinterPreregno,\n          sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\n          insertlist,\n          npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: this.props.Login.ncontrolcode\n        },\n        operation: 'printer',\n        // dataState:this.state.sourceDataState,\n        // activeSampleTab:\"IDS_SOURCE\",\n        action: 'printer'\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: 'printer'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedFile = this.state.selectedFile;\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedFile.sfilename;\n      const formData = new FormData(); // if(nattachmenttypecode === attachmentType.FTP) {\n\n      if (acceptedFiles && acceptedFiles.length > 0) {\n        acceptedFiles.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFiles.length);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\n      formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\n      formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\n      this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\n    };\n\n    this.sampleInfoDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_SOURCE\":\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sourceDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.subSampledataStateChange = event => {\n      switch (this.props.Login.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          this.setState({\n            subSampleCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          this.setState({\n            subSampleAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testdataStateChange = event => {\n      switch (this.props.Login.activeSampleTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testStateChange = event => {\n      this.setState({\n        testDataState: event.dataState\n      });\n    };\n\n    this.sampleTabDetail = () => {\n      let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\n      let {\n        skip,\n        take\n      } = this.state;\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      tabMap.set(\"IDS_ATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSample || []\n        },\n        selectedListName: \"IDS_SAMPLE\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2694,\n          columnNumber: 39\n        }\n      }));\n      tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: selectedSampleList,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLES\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2734,\n          columnNumber: 42\n        }\n      }));\n      return tabMap;\n    };\n\n    this.subsampleTabDetail = () => {\n      let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.selectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || []\n        },\n        selectedListName: \"IDS_SUBSAMPLE\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2790,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        isTestComment: false,\n        masterList: selectedSubSampleList,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SUBSAMPLES\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2830,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.testTabDetail = () => {\n      const testTabMap = new Map();\n      let testList = this.props.Login.masterData.RegistrationGetTest || [];\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\n\n      let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      testTabMap.set(\"IDS_PARAMETERRESULTS\", /*#__PURE__*/React.createElement(RegistrationResultTab, {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.testDataStateChange,\n        screenName: \"IDS_PARAMETERRESULTS\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2886,\n          columnNumber: 48\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"selectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        dataState: this.state.testAttachmentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: this.props.Login.masterData.selectedTest\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2896,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedTest\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RegistrationGetSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2937,\n          columnNumber: 44\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.getCommentsCombo = event => {\n      if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\n        this.props.getCommentsCombo(...event);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOADDCOMMENTS\"\n        }));\n      }\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_PARAMETERRESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TEST\":\n          this.setState({\n            testDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let testList = [];\n\n        if (this.props.Login.masterData.searchedTest !== undefined) {\n          testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n        } else {\n          testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      let acceptList = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedTest !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        acceptList.push(selectedRecord);\n      } else {\n        acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, acceptList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\n      } else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.selectedSubSample);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.cancelSubSampleRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedSubSample || (this.props.Login.masterData.RegistrationGetSubSample ? [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\n          Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n          // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\n          //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3; // Map[\"withoutgetparameter\"] = 3;\n\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.cancelRecord = (controlcode, skip, take) => {\n      let testList = this.props.Login.masterData.searchedTest || (this.props.Login.masterData.RegistrationGetTest ? [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\n      let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\n\n      if (acceptList && acceptList.length > 0) {\n        // console.log(\"Success:\", dataitem);\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\n          let Map = {};\n          Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\"); // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\n\n          Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\"); //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\n          Map[\"npreregno\"] = acceptList && acceptList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = acceptList && acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\n          Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelTest'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelTestAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTTEST\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.addSubSample = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      }\n\n      let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (addSubSampleList && addSubSampleList.length > 0) {\n        const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\n            //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\n            //   if (findApprovalVersion.length === 1) {\n            const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\n            const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\n            const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n            if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n              {\n                let data = [];\n                const regSubSamplewithoutCombocomponent = [];\n                const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n                if (Layout !== undefined) {\n                  Layout.map(row => {\n                    return row.children.map(column => {\n                      return column.children.map(component => {\n                        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                          if (componentrow.inputtype === \"combo\") {\n                            data.push(componentrow);\n                          } else {\n                            regSubSamplewithoutCombocomponent.push(componentrow);\n                          }\n\n                          return null;\n                        }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n                      });\n                    });\n                  });\n                  const regSubSamplecomboComponents = data;\n                  let regchildColumnList = {};\n                  data.map(columnList => {\n                    const val = comboChild(data, columnList, regchildColumnList, true);\n                    data = val.data;\n                    regchildColumnList = val.childColumnList;\n                    return null;\n                  }); //const Map={}\n                  // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\n                  // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\n\n                  Map[\"nallottedspeccode\"] = findSampleSpec[0];\n                  Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\n                  Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n                  Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n                  Map[\"npreregno\"] = addSubSampleList && addSubSampleList.map(sample => sample.npreregno).join(\",\");\n                  Map[\"registrationsample\"] = addSubSampleList;\n                  this.props.addsubSampleRegistration(this.props.Login.masterData, this.props.Login.userInfo, data, this.state.selectedRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, controlcode, findComponentReqSpec[0] === 3 ? true : false);\n                } else {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\"\n                  }));\n                }\n              } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n              }));\n            } // } else {\n            //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\n            // }\n\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOSUBSAMPLE\"\n        }));\n      }\n    };\n\n    this.handleEditDateChange = (dateName, dateValue) => {\n      const selectComponent = this.state.selectedRecord;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectComponent[dateName] = dateValue;\n      this.setState({\n        selectedRecord: selectComponent\n      });\n    };\n\n    this.onNumericInputEditChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (name !== \"nnoofcontainer\" && (value === 0 || value === 0.0)) {\n        selectedRecord[name] = '';\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        selectedRecord[name] = value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.cancelSampleRecords = (controlcode, skip, take) => {\n      let Map = {};\n      let sampleList = [];\n\n      if (this.props.Login.masterData.searchedSample !== undefined) {\n        sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\n      } else {\n        sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\n      } // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\n      // sampleList = sampleList.splice(skip, skip + take);\n\n\n      let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\n\n      if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\n        if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\n          //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\n          Map['ntransactionstatus'] = cancelRejectSamplesList && cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\"); //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\n          //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\n\n          Map[\"userinfo\"] = this.props.Login.userInfo;\n          Map[\"ncontrolcode\"] = controlcode;\n          Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nflag\"] = 2;\n          Map[\"ntype\"] = 3;\n          Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n          Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n          Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n          Map[\"checkBoxOperation\"] = 3;\n          Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\n          Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\n          Map[\"nfilterstatus\"] = -1;\n          Map[\"npreregno\"] = cancelRejectSamplesList && cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\n          Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\n          Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\n          Map[\"registrationsample\"] = cancelRejectSamplesList;\n          Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\n          Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\n          Map[\"withoutgetparameter\"] = 3;\n          Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n          Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n          Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n          let inputParam = {\n            inputData: Map,\n            postParamList: this.postParamList,\n            action: 'cancelSample'\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                parentPopUpSize: 'lg',\n                screenName: this.props.Login.screenName,\n                operation: 'cancel'\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.cancelSampleAction(inputParam, this.props.Login.masterData);\n          }\n        } else {\n          let value = this.props.Login.transactionValidation[controlcode] && this.props.Login.transactionValidation[controlcode].map(sample => this.props.intl.formatMessage({\n            id: sample.stransdisplaystatus\n          })).join(\"/\"); //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\n\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECT\"\n          }) + value + this.props.intl.formatMessage({\n            id: \"IDS_TOCANCELREJECTSAMPLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOCANCELREJECT\"\n        }));\n      }\n    };\n\n    this.transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\n      //  const transList=transactionValidation?Object.keys(transactionValidation):[];\n      //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\n      //let check=true;\n      //  let validate=false;\n      let ntransstatus = [];\n      let translist = transactionValidation[ncontrolcode];\n\n      if (translist) {\n        transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\n          return ntransstatus.push(sam.ntransactionstatus);\n        });\n        const selectdata = selectedSample ? selectedSample : [];\n        let check = selectdata.map(sam1 => {\n          return ntransstatus.includes(sam1.ntransactionstatus);\n        });\n\n        if (check.includes(false)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignforRegistration(inputParam, \"openModal\");\n    };\n\n    this.editRegistration = inputParam => {\n      let data = [];\n      const withoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  withoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n            });\n          });\n        });\n        const comboComponents = data;\n        let childColumnList = {};\n        data.map(columnList => {\n          const val = comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n          return null;\n        });\n        this.props.getEditRegistrationComboService(inputParam, data, this.state.selectedRecord, childColumnList, comboComponents, withoutCombocomponent);\n      } else {\n        toast.info(\"Configure the preregister template for this registrationtype\");\n      }\n    };\n\n    this.editSubSampleRegistration = inputParam => {\n      let data = [];\n      const regSubSamplewithoutCombocomponent = [];\n      const Layout = this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata;\n\n      if (Layout !== undefined) {\n        Layout.map(row => {\n          return row.children.map(column => {\n            return column.children.map(component => {\n              return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data.push(componentrow);\n                } else {\n                  regSubSamplewithoutCombocomponent.push(componentrow);\n                }\n\n                return null;\n              }) : component.inputtype === \"combo\" ? data.push(component) : regSubSamplewithoutCombocomponent.push(component);\n            });\n          });\n        });\n        const regSubSamplecomboComponents = data;\n        let regSubSamplechildColumnList = {};\n        data.map(columnList => {\n          const val = comboChild(data, columnList, regSubSamplechildColumnList, true);\n          data = val.data;\n          regSubSamplechildColumnList = val.childColumnList;\n          return null;\n        });\n        const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\");\n        this.props.getEditSubSampleComboService(inputParam, data, this.state.selectedRecord, regSubSamplechildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, sampleList[0].ncomponentrequired === 3 ? true : false);\n      } else {\n        toast.info(\"Configure the sub sample template for this registrationtype\");\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.PrevoiusLoginData = undefined;\n    this.breadCrumbData = []; //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\n\n    this.state = {\n      layout: 1,\n      openModal: false,\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      screenName: \"Product\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      showAccordian: true,\n      showSaveContinue: false,\n      filterCollection: [],\n      selectedFilter: {},\n      breadCrumb: [],\n      showTest: true,\n      showSample: false,\n      showSubSample: false,\n      sampleSearchFied: [],\n      subsampleSearchFied: [],\n      testSearchFied: [],\n      showConfirmAlert: false,\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      DynamicSampleColumns: [],\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      testDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'npreregno' }] \n\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      testAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      sampleCommentsDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }]\n\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] \n\n      },\n      selectedPrinterData: {},\n      grandparentheight: '150vh',\n      transactionValidation: [],\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\n      testskip: 0,\n      splitChangeWidthPercentage: 28.6,\n      testtake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      subsampleskip: 0,\n      subsampletake: this.props.Login.settings && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      comboComponents: [],\n      withoutCombocomponent: [],\n      childColumnList: [],\n      columnList: [],\n      regSubSamplecomboComponents: [],\n      regSubSamplewithoutCombocomponent: [],\n      regparentSubSampleColumnList: [],\n      DynamicSubSampleColumns: [],\n      DynamicTestColumns: [],\n      DynamicGridItem: [],\n      DynamicGridMoreField: [],\n      SingleItem: [],\n      testMoreField: [],\n      testListColumns: [],\n      SubSampleDynamicGridItem: [],\n      SubSampleDynamicGridMoreField: [],\n      SubSampleSingleItem: [],\n      cancelId: -1,\n      preRegisterId: -1,\n      registerId: -1,\n      editSampleId: -1,\n      quarantineId: -1,\n      addTestId: -1,\n      printBarcodeId: -1,\n      cancelSampleId: -1,\n      addSubSampleId: -1,\n      editSubSampleId: -1,\n      cancelSubSampleId: -1,\n      stateSampleType: [],\n      stateRegistrationType: [],\n      stateRegistrationSubType: [],\n      stateFilterStatus: [],\n      stateDynamicDesign: [],\n      testGetParam: {},\n      testChildGetParam: {},\n      subSampleGetParam: {},\n      filterSampleParam: {},\n      filterTestParam: {},\n      editRegParam: {},\n      editSubSampleRegParam: {},\n      addTestParam: {},\n      sampleSearchField: [],\n      subsampleSearchField: [],\n      testSearchField: [],\n      filterSubSampleParam: {},\n      initialVerticalWidth: \"57vh\",\n      enablePin: false,\n      fixefScrollHeight: window.outerHeight - 300 // specBasedComponent: this.props.Login.settings\n      //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\n\n    }; // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n\n    this.myRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\n      return {\n        showConfirmAlert: props.Login.showConfirmAlert\n      };\n    }\n\n    return null;\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_PARAMETERRESULTS\":\n        //url = \"resultentrybysample/getTestbasedParameter\";\n        url = \"registration/getregistrationparameter\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      default:\n        url = \"registration/getregistrationparameter\"; // url = \"resultentrybysample/getTestbasedParameter\";\n\n        break;\n    }\n\n    return url;\n  }\n\n  render() {\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\n    this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\n    let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample, 'desc', 'npreregno') : [];\n    let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\n    let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\n\n    const testDesign = /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 25\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      paneHeight: this.state.initialVerticalWidth,\n      masterList: this.props.Login.masterData.searchedTest || testList,\n      selectedMaster: this.props.Login.masterData.selectedTest,\n      primaryKeyField: \"ntransactiontestcode\",\n      getMasterDetail: this.props.getTestChildTabDetailRegistration,\n      inputParam: { ...this.state.testChildGetParam,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState\n      },\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"selectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\" // jsonField={'jsondata'}\n      ,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      subFieldsLabel: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      showStatusName: true,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: this.state.filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\" // childTabsKey={[\"RegistrationTestComment\"]}\n      ,\n      childTabsKey: [\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"],\n      handlePageChange: this.handleTestPageChange,\n      buttonCount: 5,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      showMoreResetList: true,\n      showMoreResetListName: \"RegistrationGetSample\",\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\" // selectionList=\n      // actionIcons={\n      //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\n      //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\n      //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\n      // }\n      ,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"adddeputy\",\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1,\n        onClick: () => this.props.addMoreTest({ ...this.state.addTestParam,\n          skip: this.state.skip,\n          take: this.state.skip + this.state.take\n        }, this.state.addTestId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n        ,\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTTEST\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1,\n        onClick: () => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 41\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 21\n      }\n    }))));\n    let mainDesign = \"\";\n\n    if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample) {\n      mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n        borderColor: \"#999\",\n        primaryIndex: 1,\n        percentage: true,\n        secondaryInitialSize: this.state.splitChangeWidthPercentage //onSecondaryPaneSizeChange={this.paneSizeChange}\n        ,\n        primaryMinSize: 40,\n        secondaryMinSize: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          borderBottom: \"0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 29\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SUBSAMPLE\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n        paneHeight: this.state.initialVerticalWidth // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\n        ,\n        masterList: this.props.Login.masterData.searchedSubSample || subSampleList,\n        selectedMaster: this.props.Login.masterData.selectedSubSample,\n        primaryKeyField: \"ntransactionsamplecode\",\n        getMasterDetail: this.props.getRegistrationTestDetail,\n        inputParam: { ...this.state.testGetParam,\n          searchTestRef: this.searchTestRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          testskip: this.state.testskip,\n          subsampleskip: this.state.subsampleskip,\n          resultDataState: this.state.resultDataState\n        },\n        filterColumnData: this.props.filterTransactionList,\n        searchListName: \"searchedSubSample\",\n        searchRef: this.searchSubSampleRef,\n        filterParam: { ...this.state.filterSubSampleParam,\n          childRefs: [{\n            ref: this.searchTestRef,\n            childFilteredListName: \"searchedTest\"\n          }]\n        },\n        additionalParam: ['napprovalversioncode'],\n        showStatusLink: true,\n        showStatusName: true,\n        statusFieldName: \"stransdisplaystatus\",\n        statusField: \"ntransactionstatus\",\n        mainField: \"ssamplearno\",\n        selectedListName: \"selectedSubSample\",\n        objectName: \"subsample\",\n        listName: \"IDS_SUBSAMPLE\" // jsonField={'jsondata'}\n        //jsonDesignFields={true}\n        ,\n        needValidation: true,\n        validationKey: \"napprovalversioncode\",\n        validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n        subFields: this.state.DynamicSubSampleColumns,\n        skip: this.state.subsampleskip,\n        take: this.state.subsampletake,\n        selectionField: \"ntransactionstatus\",\n        selectionFieldName: \"stransdisplaystatus\",\n        needMultiSelect: true,\n        selectionColorField: \"scolorhexcode\",\n        subFieldsLabel: false,\n        handlePageChange: this.handleSubSamplePageChange,\n        selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n        childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetTest\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n        actionIcons: [{\n          title: this.props.intl.formatMessage({\n            id: \"IDS_EDIT\"\n          }),\n          controlname: \"faPencilAlt\",\n          objectName: \"mastertoedit\",\n          hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\n          onClick: this.editSubSampleRegistration,\n          inputData: {\n            primaryKeyName: \"ntransactionsamplecode\",\n            operation: \"update\",\n            masterData: this.props.Login.masterData,\n            userInfo: this.props.Login.userInfo,\n            editSubSampleRegParam: { ...this.state.editSubSampleRegParam,\n              ncontrolCode: this.state.editSampleId\n            }\n          }\n        }],\n        needFilter: false,\n        commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n          className: \"d-flex justify-content-end icon-group-wrap\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(Nav.Link, {\n          name: \"adddeputy\",\n          className: \"btn btn-circle outline-grey ml-2\" //title={\"Add Test\"}\n          ,\n          \"data-for\": \"tooltip-common-wrap\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_ADDSUBSAMPLE\"\n          }),\n          hidden: this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1,\n          onClick: () => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faPlus,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 45\n          }\n        })), /*#__PURE__*/React.createElement(Nav.Link, {\n          className: \"btn btn-circle outline-grey ml-2\" //title={\"Cancel/Reject Test\"}\n          ,\n          \"data-for\": \"tooltip-common-wrap\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_CANCEL\"\n          }),\n          hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1,\n          onClick: () => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Reject, {\n          className: \"custom_icons\",\n          width: \"15\",\n          height: \"15\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 45\n          }\n        })))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 25\n        }\n      }))), testDesign);\n    } else {\n      mainDesign = testDesign;\n    } // let testGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     userinfo: this.props.Login.userInfo,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     npreregno: this.props.Login.masterData.selectedSample &&\n    //         this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     searchTestRef: this.searchTestRef,\n    //     testskip: this.state.testskip,\n    //     subsampleskip: this.state.subsampleskip,\n    //     resultDataState: this.state.resultDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    // }\n    // let testChildGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     userinfo: this.props.Login.userInfo,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n    //     ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\n    //         this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     resultDataState: this.state.resultDataState,\n    //     testCommentDataState: this.state.testCommentDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    // }\n\n\n    this.confirmMessage = new ConfirmMessage(); // let subSampleGetParam = {\n    //     masterData: this.props.Login.masterData,\n    //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     testskip: this.state.testskip,\n    //     subsampleskip: this.state.subsampleskip,\n    //     searchTestRef: this.searchTestRef,\n    //     resultDataState: this.state.resultDataState,\n    //     testCommentDataState: this.state.testCommentDataState,\n    //     sampleGridDataState: this.state.sampleGridDataState,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\n    //     , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\n    //     , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\n    // const filterSampleParam = {\n    //     inputListName: \"RegistrationGetSample\",\n    //     selectedObject: \"selectedSample\",\n    //     primaryKeyField: \"npreregno\",\n    //     fetchUrl: \"registration/getRegistrationSubSample\",\n    //     childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n    //     fecthInputObject: {\n    //         nflag: 2,\n    //         ntype: 2,\n    //         masterData: this.props.Login.masterData,\n    //         ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //         userinfo: this.props.Login.userInfo,\n    //         nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //         nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //         nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //         activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n    //         activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n    //     },\n    //     masterData: this.props.Login.masterData,\n    //     searchFieldList: sampleSearchField,\n    //     changeList: [\n    //         \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\n    //         \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\n    //         \"selectedTest\", \"RegistrationParameter\"\n    //     ]\n    // };\n    // let filterTestParam = {\n    //     inputListName: \"RegistrationGetTest\",\n    //     selectedObject: \"selectedTest\",\n    //     primaryKeyField: \"ntransactiontestcode\",\n    //     fetchUrl: this.getActiveTestURL(),\n    //     fecthInputObject: {\n    //         ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n    //         userinfo: this.props.Login.userInfo\n    //     },\n    //     masterData: this.props.Login.masterData,\n    //     searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\",\n    //         \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\n    //     changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n    // }\n\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"registration/getRegistrationSubSample\",\n      fecthInputObject: { ...this.state.subSampleGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSample\",\n      inputListName: \"AP_SAMPLE\",\n      updatedListname: \"selectedSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"registration/getRegistrationTestSample\",\n      fecthInputObject: { ...this.state.testGetParam,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        searchSubSampleRef: this.searchSubSampleRef,\n        searchTestRef: this.searchTestRef,\n        resultDataState: this.state.resultDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        testAttachmentDataState: this.state.testAttachmentDataState,\n        sampleGridDataState: this.state.sampleGridDataState\n      },\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      selectedObject: \"selectedSubSample\",\n      inputListName: \"AP_SUBSAMPLE\",\n      updatedListname: \"selectedSubSample\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      updatedListname: \"selectedTest\",\n      clearFilter: \"no\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: \"approval/getApprovalTest\",\n      fecthInputObject: { ...this.state.testGetParam,\n        searchTestRef: this.searchTestRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectedObject: \"selectedTest\",\n      inputListName: \"RegistrationGetTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }]; // let editRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // let editSubSampleRegParam = {\n    //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n    //     userinfo: this.props.Login.userInfo,\n    //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n    //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n    //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n    //     sfromdate: this.props.Login.masterData.RealFromDate,\n    //     stodate: this.props.Login.masterData.RealToDate,\n    //     ncontrolCode: this.state.editSampleId,\n    //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\n    //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\n    //     nneedsubsample: this.props.Login.masterData\n    //         && this.props.Login.masterData.nneedsubsample\n    // }\n    // const addTestParam = {\n    //     selectedsample: this.props.Login.masterData.selectedSample,\n    //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\n    //     skip: this.state.skip, take: (this.state.skip + this.state.take),\n    //     userinfo: this.props.Login.userInfo,\n    //     sampleList: this.props.Login.masterData.RegistrationGetSample,\n    //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\n    //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n    // };\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 853,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      className: \"toolbar-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 900,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 901,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage //onSecondaryPaneSizeChange={this.paneSizeChange}\n      ,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar-top-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJson, {\n      listMasterShowIcon: 1 // paneHeight={this.state.firstPane}\n      ,\n      clickIconGroup: true,\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleList,\n      selectedMaster: this.props.Login.masterData.selectedSample,\n      primaryKeyField: \"npreregno\",\n      filterColumnData: this.props.filterTransactionList,\n      getMasterDetail: this.props.getRegistrationsubSampleDetail,\n      inputParam: { ...this.state.subSampleGetParam,\n        searchTestRef: this.searchTestRef,\n        searchSubSampleRef: this.searchSubSampleRef,\n        testskip: this.state.testskip,\n        subsampleskip: this.state.subsampleskip,\n        resultDataState: this.state.resultDataState\n      },\n      selectionList: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : [],\n      selectionColorField: \"scolorhexcode\",\n      mainField: \"sarno\",\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      selectedListName: \"selectedSample\",\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      selectionField: \"ntransactionstatus\",\n      selectionFieldName: \"stransdisplaystatus\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: this.state.DynamicSampleColumns // jsonField={'jsondata'}\n      //jsonDesignFields={true}\n      ,\n      needMultiSelect: true,\n      showStatusBlink: true,\n      filterParam: { ...this.state.filterSampleParam,\n        childRefs: [{\n          ref: this.searchSubSampleRef,\n          childFilteredListName: \"searchedSubSample\"\n        }, {\n          ref: this.searchTestRef,\n          childFilteredListName: \"searchedTest\"\n        }]\n      },\n      subFieldsLabel: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take // splitModeClass={this.state.splitChangeWidthPercentage\n      //     && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\n      //     : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n      ,\n      childTabsKey: [\"RegistrationAttachment\", \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationSampleComment\", \"selectedSubSample\", \"selectedTest\"] //, \"RegistrationParameter\"\"RegistrationTestComment\"\n      ,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\n        onClick: this.editRegistration,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PRINTBARCODE\"\n        }),\n        controlname: \"faPrint\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\n        onClick: this.props.getPrinterComboService,\n        inputData: {\n          primaryKeyName: \"npreregno\",\n          operation: \"print\",\n          ncontrolcode: this.state.printBarcodeId,\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editRegParam: { ...this.state.editRegParam,\n            ncontrolCode: this.state.editSampleId\n          }\n        }\n      }],\n      needFilter: true,\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1011,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue ml-2\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_PREREGISTER\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1,\n        onClick: () => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\", this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1013,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1019,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REGISTER\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.registerId) === -1,\n        onClick: () => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1021,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Register, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1027,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_QUARANTINE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1,\n        onClick: () => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1029,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Quarantine, {\n        className: \"custom_icons\",\n        width: \"15\",\n        height: \"15\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCELREJECTSAMPLE\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1,\n        onClick: () => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1037,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Reject, {\n        className: \"custom_icons\",\n        width: \"20\",\n        height: \"20\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1043,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        onClick: () => this.onReload(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1045,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 53\n        }\n      }))),\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(RegistrationFilter, {\n          SampleType: this.state.stateSampleType || [],\n          RegistrationType: this.state.stateRegistrationType || [],\n          RegistrationSubType: this.state.stateRegistrationSubType || [],\n          userInfo: this.props.Login.userInfo || {},\n          SampleTypeValue: this.props.Login.masterData.SampleTypeValue || {},\n          RegTypeValue: this.props.Login.masterData.RegTypeValue || {},\n          RegSubTypeValue: this.props.Login.masterData.RegSubTypeValue || {},\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          DesignTemplateMapping: this.props.Login.masterData.DesignTemplateMapping,\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          FromDate: this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date(),\n          ToDate: this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date(),\n          onSampleTypeChange: this.onSampleTypeChange,\n          onRegTypeChange: this.onRegTypeChange,\n          onRegSubTypeChange: this.onRegSubTypeChange,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          handleFilterDateChange: this.handleFilterDateChange,\n          onFilterChange: this.onFilterChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1056,\n            columnNumber: 66\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 912,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1084,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: \"detailed-inner no-height pin-scroller\",\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1 //onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\n      //secondaryInitialSize={window.outerHeight - 260}\n      ,\n      secondaryInitialSize: this.state.fixefScrollHeight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1085,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true || this.state.showSubSample === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1096,\n        columnNumber: 49\n      }\n    }, mainDesign), /*#__PURE__*/React.createElement(ContentPanel, {\n      ref: this.myRef,\n      style: this.state.showSample === true ? {\n        display: \"block\"\n      } : {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1100,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      ref: this.myRef,\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1101,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1102,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1103,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1108,\n        columnNumber: 81\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLE\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 81\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1123,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1124,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.myRef,\n      style: {\n        height: this.state.initialVerticalWidth + 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1125,\n        columnNumber: 81\n      }\n    }, this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n      data: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0 ? this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {},\n      SingleItem: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ? this.state.SingleItem : [],\n      screenName: \"IDS_SAMPLEINFO\",\n      userInfo: this.props.Login.userInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1127,\n        columnNumber: 89\n      }\n    }) : /*#__PURE__*/React.createElement(SampleGridTab, {\n      userInfo: this.props.Login.masterData.userInfo || {},\n      GridData: this.props.Login.masterData.selectedSample || [],\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleGridDataState,\n      dataStateChange: this.sampleInfoDataStateChange,\n      extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n      detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n      primaryKeyField: \"npreregno\",\n      expandField: \"expanded\",\n      screenName: \"IDS_SAMPLEINFO\" //jsonField={\"jsondata\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1138,\n        columnNumber: 89\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1164,\n        columnNumber: 45\n      }\n    }, this.state.enablePin ? /*#__PURE__*/React.createElement(\"span\", {\n      className: `pin-icon ${this.state.enableAutoHeight ? \"active\" : \"\"}`,\n      onClick: this.changeSplitterOption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1165,\n        columnNumber: 73\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Card, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1170,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1174,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1175,\n        columnNumber: 65\n      }\n    }, this.props.intl.formatMessage({\n      id: this.state.showSample ? \"IDS_SAMPLEATTACHMENTSCOMMENTS\" : this.state.showSubSample ? \"IDS_SUBSAMPLEATTACHMENTSCOMMENTS\" : \"IDS_PARAMETERRESULTS\"\n    }))), this.state.showSample ? /*#__PURE__*/React.createElement(React.Fragment, null) : this.state.showSubSample ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showTest(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1198,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1201,\n        columnNumber: 77\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))) : /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ? /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary btn-padd-custom\",\n      style: {\n        \"float\": \"right\",\n        \"margin-right\": \"6px\"\n      },\n      onClick: () => this.showSubSample(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1208,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1211,\n        columnNumber: 81\n      }\n    }), \" \", this.props.intl.formatMessage({\n      id: \"IDS_SUBSAMPLE\"\n    })) : \"\")))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 49\n      }\n    }, this.state.showSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS',\n      tabDetail: this.sampleTabDetail(),\n      onTabChange: this.onSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 57\n      }\n    }) : this.state.showSubSample ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeSubSampleTab ? this.props.Login.activeSubSampleTab === 'IDS_SUBSAMPLEATTACHMENTS' ? 'IDS_SUBSAMPLEATTACHMENTS' : this.props.Login.activeSubSampleTab : 'IDS_SUBSAMPLEATTACHMENTS',\n      tabDetail: this.subsampleTabDetail(),\n      onTabChange: this.onSubSampleTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 61\n      }\n    }) : this.state.showTest ? /*#__PURE__*/React.createElement(CustomTabs, {\n      activeKey: this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS',\n      tabDetail: this.testTabDetail(),\n      onTabChange: this.ontestTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231,\n        columnNumber: 65\n      }\n    }) // <Card>\n\n    /* <Card.Header style={{ \"borderBottom\": \"0px\", \"padding-top\": \"1px\" }}>\r\n        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n            <h4 className=\"card-title\">Parameter Results</h4>\r\n        </span>\r\n    </Card.Header> */\n    // </Card>\n    // : this.state.showSubSample ?\n    //     <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\n    //         tabDetail={this.subsampleTabDetail()}\n    //         onTabChange={this.onSubSampleTabChange} />\n    //     : \"\"}\n    : \"\"))))))))), this.props.Login.openPortal ? /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1261,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(PreRegisterSlideOutModal, {\n      postParamList: this.postParamList,\n      PrevoiusLoginData: this.PrevoiusLoginData,\n      closeModal: this.closeModal,\n      operation: \"create\",\n      screenName: \"IDS_REGISTRATION\",\n      onSaveClick: this.onSaveClick,\n      validateEsign: this.validateEsign,\n      updateStore: this.props.updateStore,\n      comboComponents: this.state.comboComponents,\n      withoutCombocomponent: this.state.withoutCombocomponent,\n      userRoleControlRights: this.state.userRoleControlRights,\n      fromDate: this.fromDate,\n      toDate: this.toDate //  specBasedComponent={this.state.specBasedComponent}\n      ,\n      mandatoryFields: [{\n        \"idsName\": \"IDS_PRODUCTCATEGORY\",\n        \"dataField\": \"nproductcatcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCTNAME\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262,\n        columnNumber: 29\n      }\n    })) : \"\", this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal //|| this.props.Login.loadEsign}\n      ,\n      closeModal: this.props.Login.loadRegSubSample || this.props.Login.loadFile || this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal,\n      size: this.props.Login.parentPopUpSize,\n      loginoperation: this.props.Login.loadPrinter ? true : false,\n      buttonLabel: this.props.Login.loadPrinter ? \"print\" : undefined,\n      operation: this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.loadTest || this.props.Login.loadFile ? this.props.Login.ChildscreenName : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.loadComponent,\n      onSaveClick: this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick : this.props.Login.loadPrinter ? this.onSavePrinterClick : this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick,\n      validateEsign: this.validateEsign,\n      showSaveContinue: this.props.Login.showSaveContinue,\n      selectedRecord: !this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord,\n      mandatoryFields: this.mandatoryList(this.props.Login.loadPreregister, this.props.Login.loadPrinter, this.props.Login.loadFile, this.props.Login.loadChildTest, this.props.Login.loadRegSubSample),\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1312,\n          columnNumber: 29\n        }\n      }) : this.props.Login.loadRegSubSample ? /*#__PURE__*/React.createElement(AddSubSample, {\n        editfield: this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value),\n        Component: this.props.Login.lstComponent || [],\n        selectComponent: this.state.selectedRecord,\n        templateData: this.props.Login.masterData.SubSampleTemplate && this.props.Login.masterData.SubSampleTemplate.jsondata,\n        userInfo: this.props.Login.userInfo,\n        timeZoneList: this.props.Login.timeZoneList,\n        defaultTimeZone: this.props.Login.defaultTimeZone,\n        handleDateChange: this.handleDateSubSampleChange,\n        onInputOnChange: this.onInputOnSubSampleChange,\n        onNumericInputChange: this.onNumericInputSubSampleChange,\n        comboData: this.props.Login.regSubSamplecomboData,\n        onComboChange: this.onComboSubSampleChange,\n        onComponentChange: this.onComponentChange,\n        TestCombined: this.props.Login.TestCombined || [],\n        TestChange: this.onComboChange,\n        selectedTestData: this.state.selectedRecord,\n        childoperation: this.props.Login.operation,\n        specBasedComponent: this.props.Login.specBasedComponent,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1318,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadFile ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedFile: this.state.selectedFile || {},\n        onInputOnChange: this.onInputOnChange,\n        onDrop: this.onDropComponentFile,\n        deleteAttachment: this.deleteAttachment,\n        actionType: this.state.actionType,\n        maxSize: 20,\n        maxFiles: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1340,\n          columnNumber: 63\n        }\n      }) : this.props.Login.loadPrinter ? /*#__PURE__*/React.createElement(AddPrinter, {\n        printer: this.props.Login.printer,\n        selectedPrinterData: this.state.selectedPrinterData,\n        PrinterChange: this.PrinterChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1350,\n          columnNumber: 41\n        }\n      }) : this.props.Login.loadChildTest ? /*#__PURE__*/React.createElement(AddTest, {\n        TestCombined: this.props.Login.availableTest,\n        selectedTestData: this.state.selectedRecord,\n        TestChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1354,\n          columnNumber: 79\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286,\n        columnNumber: 21\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  showSampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showSample() {\n    let fixefScrollHeight = this.state.fixefScrollHeight;\n    let disableSplit = false;\n\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      let fixefScrollHeight = this.myRef.current.clientHeight + 20;\n      let disableSplit = true;\n    }\n\n    this.setState({\n      showSample: true,\n      showSubSample: false,\n      showTest: false,\n      fixefScrollHeight: fixefScrollHeight,\n      disableSplit: disableSplit\n    });\n  }\n\n  showTest() {\n    let fixefScrollHeight = this.state.fixefScrollHeight;\n    let disableSplit = false;\n\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      let fixefScrollHeight = this.myRef.current.clientHeight + 20;\n      let disableSplit = true;\n    }\n\n    this.setState({\n      showSample: false,\n      showSubSample: false,\n      showTest: true,\n      fixefScrollHeight: fixefScrollHeight,\n      disableSplit: disableSplit\n    }); // setTimeout(()=>{\n    //     this.setState({\n    //         disableSplit :false\n    //     })  \n    // },100)\n  }\n\n  showSubSample() {\n    this.setState({\n      showSample: false,\n      showTest: false,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  showTestDetails() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        showSample: !this.state.showSample,\n        showTest: !this.state.showTest\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  checkPreregisterAndQuarentine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE;\n  }\n\n  checkPreregisterRecordQuarantine(sample) {\n    return sample.ntransactionstatus === transactionStatus.PREREGISTER;\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode] || \"-\",\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\"\n      };\n    });\n    return temparray;\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.columnList !== previousProps.Login.columnList) {\n      this.setState({\n        columnList: this.props.Login.columnList,\n        childColumnList: this.props.Login.childColumnList,\n        withoutCombocomponent: this.props.Login.withoutCombocomponent,\n        comboComponents: this.props.Login.comboComponents\n      });\n    }\n\n    if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\n      this.setState({\n        regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\n        regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\n        regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\n      });\n    }\n\n    if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\n      this.setState({\n        showSaveContinue: this.props.Login.showSaveContinue\n      });\n    }\n\n    if (this.props.Login !== previousProps.Login) {\n      this.PrevoiusLoginData = previousProps;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\n      this.setState({\n        selectedPrinterData: this.props.Login.selectedPrinterData\n      });\n    } else if (this.props.Login.loadFile !== previousProps.Login.loadFile && this.props.Login.loadFile === false) {\n      this.setState({\n        selectedFile: undefined\n      });\n    } else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\n      this.setState({\n        selectedFilter: this.props.Login.selectedFilter\n      });\n    }\n\n    if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n      this.setState({\n        popUptestDataState: this.props.Login.popUptestDataState\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\n      const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\n      const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\n      const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\n      const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\n      const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\n      const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\n      const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\n      const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\n      const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\n      const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        cancelId,\n        preRegisterId,\n        registerId,\n        editSampleId,\n        quarantineId,\n        addTestId,\n        printBarcodeId,\n        cancelSampleId,\n        addSubSampleId,\n        editSubSampleId,\n        cancelSubSampleId\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      let {\n        skip,\n        take,\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake,\n        testCommentDataState,\n        resultDataState,\n        sampleGridDataState,\n        popUptestDataState,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        SingleItem,\n        testMoreField,\n        testListColumns,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        testAttachmentDataState,\n        sampleCommentDataState,\n        sampledateconstraints,\n        subsampledateconstraints\n      } = this.state;\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n        DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n        DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n        SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\n        SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\n        SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : []; //console.log(\"Subsample\",SubSampleSingleItem)\n\n        testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n        testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n        sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\n        subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\n        testSearchField = dynamicColumn.testsearchfields ? dynamicColumn.testsearchfields : [];\n        sampledateconstraints = dynamicColumn.sampledateconstraints || [];\n        subsampledateconstraints = dynamicColumn.subsampledateconstraints || []; // specBasedComponent = true;\n      }\n\n      let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample;\n      let showTest = showSample ? false : true;\n      let stateSampleType = this.state.stateSampleType;\n      let stateRegistrationType = this.state.stateRegistrationType;\n      let stateRegistrationSubType = this.state.stateRegistrationSubType;\n      let stateFilterStatus = this.state.stateFilterStatus;\n      let stateDynamicDesign = this.state.stateDynamicDesign;\n\n      if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n        const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n        stateSampleType = sampleTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\n        const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationType = registrationTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n        const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", \"ascending\", false);\n        stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\n        const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\", \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\n        stateFilterStatus = filterStatusMap.get(\"OptionList\");\n      }\n\n      if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n        const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n        stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n      } // const stateSampleType = sampleTypeMap.get(\"OptionList\");\n\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip;\n      subsampletake = this.props.Login.subsampletake || subsampletake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\n        testAttachmentDataState = this.props.Login.testAttachmentDataState;\n      }\n\n      if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\n        sampleGridDataState = this.props.Login.sampleGridDataState;\n      }\n\n      if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\n        popUptestDataState = this.props.Login.popUptestDataState;\n      }\n\n      const testGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //searchTestRef: this.searchTestRef,\n        // testskip: testskip,\n        //subsampleskip: subsampleskip,\n        // resultDataState: resultDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\n      };\n      const testChildGetParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\n        ntransactionsamplecode: this.props.Login.masterData.selectedSubSample && this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow\n      };\n      const subSampleGetParam = {\n        masterData: this.props.Login.masterData,\n        ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n        // testskip: testskip,\n        // subsampleskip: subsampleskip,\n        // searchTestRef: this.searchTestRef,\n        //resultDataState: resultDataState,\n        // testCommentDataState: testCommentDataState,\n        //sampleGridDataState: sampleGridDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\n      };\n      const filterSampleParam = {\n        inputListName: \"RegistrationGetSample\",\n        selectedObject: \"selectedSample\",\n        primaryKeyField: \"npreregno\",\n        fetchUrl: \"registration/getRegistrationSubSample\",\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: sampleSearchField,\n        changeList: [\"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterSubSampleParam = {\n        inputListName: \"RegistrationGetSubSample\",\n        selectedObject: \"selectedSubSample\",\n        primaryKeyField: \"ntransactionsamplecode\",\n        fetchUrl: \"registration/getRegistrationTest\",\n        //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n        fecthInputObject: {\n          //nflag: 2,\n          // ntype: 2,\n          masterData: this.props.Login.masterData,\n          //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n          userinfo: this.props.Login.userInfo,\n          nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n          nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n          nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3,\n          npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: subsampleSearchField,\n        changeList: [\"RegistrationGetTest\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"]\n      };\n      const filterTestParam = {\n        inputListName: \"RegistrationGetTest\",\n        selectedObject: \"selectedTest\",\n        primaryKeyField: \"ntransactiontestcode\",\n        fetchUrl: this.getActiveTestURL(),\n        fecthInputObject: {\n          ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n          nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n          nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n          checkBoxOperation: 3,\n          activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n          activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n          activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n        },\n        masterData: this.props.Login.masterData,\n        searchFieldList: testSearchField,\n        changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\n      }; // let postParamList = [\n      //     {\n      //         filteredListName: \"searchedSample\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchSampleRef,\n      //         primaryKeyField: \"npreregno\",\n      //         fetchUrl: \"registration/getRegistrationSubSample\",\n      //         fecthInputObject: subSampleGetParam,\n      //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\n      //         selectedObject: \"selectedSample\",\n      //         inputListName: \"AP_SAMPLE\",\n      //         updatedListname: \"selectedSample\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      //     , {\n      //         filteredListName: \"searchedTest\",\n      //         updatedListname: \"selectedTest\",\n      //         clearFilter: \"no\",\n      //         searchRef: this.searchTestRef,\n      //         primaryKeyField: \"ntransactiontestcode\",\n      //         fetchUrl: \"approval/getApprovalTest\",\n      //         fecthInputObject: testGetParam,\n      //         selectedObject: \"selectedTest\",\n      //         inputListName: \"RegistrationGetTest\",\n      //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\n      //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\n      //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n      //     }\n      // ];\n\n      const editRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        // ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n        activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n        activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n        activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n      };\n      const editSubSampleRegParam = {\n        nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n        sfromdate: this.props.Login.masterData.RealFromDate,\n        stodate: this.props.Login.masterData.RealToDate,\n        //ncontrolCode: this.state.editSampleId,\n        ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n        nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n        nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\n      };\n      const addTestParam = {\n        selectedSample: this.props.Login.masterData.selectedSample,\n        selectedSubSample: this.props.Login.masterData.selectedSubSample,\n        // skip: skip, take: (skip + take),\n        userinfo: this.props.Login.userInfo,\n        sampleList: this.props.Login.masterData.RegistrationGetSample,\n        snspecsampletypecode: this.props.Login.masterData.selectedSubSample && [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\n      };\n      const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\n\n      if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow) {\n        this.breadCrumbData = [{\n          \"label\": \"IDS_FROM\",\n          \"value\": breadCrumbobj.breadCrumbFrom\n        }, {\n          \"label\": \"IDS_TO\",\n          \"value\": breadCrumbobj.breadCrumbto\n        }, {\n          \"label\": \"IDS_SAMPLETYPE\",\n          \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n        }, {\n          \"label\": \"IDS_REGTYPE\",\n          \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n        }, {\n          \"label\": \"IDS_REGSUBTYPE\",\n          \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }, {\n          \"label\": \"IDS_DESIGNTEMPLATE\",\n          \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\n        }, {\n          \"label\": \"IDS_FILTERSTATUS\",\n          \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n        }];\n      } else {\n        this.breadCrumbData = [{\n          \"label\": \"IDS_FROM\",\n          \"value\": breadCrumbobj.breadCrumbFrom\n        }, {\n          \"label\": \"IDS_TO\",\n          \"value\": breadCrumbobj.breadCrumbto\n        }, {\n          \"label\": \"IDS_SAMPLETYPE\",\n          \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\n        }, {\n          \"label\": \"IDS_REGTYPE\",\n          \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\n        }, {\n          \"label\": \"IDS_REGSUBTYPE\",\n          \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\n        }, {\n          \"label\": \"IDS_FILTERSTATUS\",\n          \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\n        }];\n      }\n\n      this.setState({\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        SingleItem,\n        testMoreField,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        testListColumns,\n        stateSampleType,\n        stateRegistrationType,\n        stateRegistrationSubType,\n        stateFilterStatus,\n        stateDynamicDesign,\n        popUptestDataState,\n        showSample,\n        showTest,\n        skip,\n        take,\n        testskip,\n        subsampleskip,\n        subsampletake,\n        testtake,\n        testCommentDataState,\n        testAttachmentDataState,\n        resultDataState,\n        sampleGridDataState,\n        SubSampleDynamicGridItem,\n        SubSampleDynamicGridMoreField,\n        SubSampleSingleItem,\n        testGetParam,\n        testChildGetParam,\n        subSampleGetParam,\n        filterSampleParam,\n        filterTestParam,\n        editRegParam,\n        editSubSampleRegParam,\n        addTestParam,\n        sampleSearchField,\n        subsampleSearchField,\n        testSearchField,\n        filterSubSampleParam,\n        sampledateconstraints,\n        subsampledateconstraints\n      });\n    }\n  }\n\n  onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\n    const inputData = {\n      userinfo: this.props.Login.userInfo\n    };\n    let initialParam = {\n      nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\n      fromdate: \"\",\n      todate: \"\",\n      nflag: 2,\n      ntype: 5,\n      npreregno: String(this.state.selectedRecord.npreregno),\n      ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\n      ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\n      nneedsubsample: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\n      checkBoxOperation: 3,\n      activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\n      activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\n      activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\n    };\n    inputData[\"initialparam\"] = initialParam; // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\n    //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n    const param = getRegistrationSubSample(this.state.selectedRecord, this.props.Login.masterData.SubSampleTemplate.jsondata, this.props.Login.userInfo, this.props.Login.defaulttimezone);\n    inputData[\"registrationsample\"] = param.sampleRegistration;\n    inputData[\"SubSampleDateList\"] = param.dateList;\n    inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\n    inputData[\"flag\"] = flag === undefined ? 1 : flag;\n    inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\n    inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\n    inputData[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\n    inputData[\"checkBoxOperation\"] = 3;\n    inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\n    inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\n    inputData[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\n    const inputParam = {\n      classUrl: this.props.Login.inputParam.classUrl,\n      methodUrl: \"SubSampleRegistration\",\n      displayName: this.props.Login.inputParam.displayName,\n      inputData: inputData,\n      operation: operation,\n      saveType,\n      formRef,\n      action: 'editSubSample',\n      showConfirmAlert: false,\n      resultDataState: this.state.resultDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      testAttachmentDataState: this.state.testAttachmentDataState // dataState:undefined, selectedId\n\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          saveType,\n          parentPopUpSize: \"lg\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      this.props.onUpdateSubSampleRegistration(inputParam, this.props.Login.masterData, \"openModal\");\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSampleTypeChange,\n  getRegTypeChange,\n  getRegSubTypeChange,\n  getAttachmentCombo,\n  viewAttachment,\n  getCommentsCombo,\n  filterTransactionList,\n  validateEsignCredential,\n  getSampleChildTabDetail,\n  getTestChildTabDetailRegistration,\n  ReloadData,\n  showUnderDevelopment,\n  getPreviewTemplate,\n  getChildValues,\n  getRegistrationSample,\n  getRegistrationsubSampleDetail,\n  getRegistrationTestDetail,\n  acceptRegistration,\n  addMoreTest,\n  createRegistrationTest,\n  getEditRegistrationComboService,\n  cancelTestAction,\n  cancelSampleAction,\n  addsubSampleRegistration,\n  saveSubSample,\n  getEditSubSampleComboService,\n  onUpdateSubSampleRegistration,\n  cancelSubSampleAction,\n  preregRecordToQuarantine,\n  componentTest,\n  getSubSampleChildTabDetail\n})(injectIntl(Registration));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/registration/Registration.jsx"],"names":["React","Component","connect","showUnderDevelopment","callService","crudMaster","updateStore","getSampleTypeChange","getRegTypeChange","getRegSubTypeChange","getAttachmentCombo","viewAttachment","getCommentsCombo","filterTransactionList","validateEsignCredential","ReloadData","getSampleChildTabDetail","getTestChildTabDetailRegistration","getPreviewTemplate","getChildValues","getRegistrationSample","getRegistrationsubSampleDetail","getRegistrationTestDetail","acceptRegistration","addMoreTest","createRegistrationTest","getEditRegistrationComboService","cancelTestAction","cancelSampleAction","addsubSampleRegistration","saveSubSample","getEditSubSampleComboService","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","componentTest","getSubSampleChildTabDetail","Button","Card","Col","Nav","Row","toast","SlideOutModal","getControlMap","showEsign","sortData","constructOptionList","onDropAttachFileList","deleteAttachmentDropZone","convertDateTimetoString","comboChild","RegistrationFilter","Esign","injectIntl","MediaHeader","ProductList","DEFAULT_RETURN","SplitterLayout","AddTest","designProperties","RegistrationType","transactionStatus","BreadcrumbComponent","ScrollBar","ListWrapper","TransactionListMasterJson","TransactionListMasterJsonView","FontAwesomeIcon","faEye","faPlus","faSync","ContentPanel","SampleInfoView","CustomTabs","ConfirmMessage","AddPrinter","SampleGridTab","AddFile","Attachments","Comments","onSaveSampleComments","onSaveSubSampleComments","onSaveTestComments","onSaveSampleAttachment","onSaveSubSampleAttachment","onSaveTestAttachment","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","RegistrationResultTab","PortalModal","PreRegisterSlideOutModal","PerfectScrollbar","checkTestPresent","getRegistrationSubSample","AddSubSample","Registration","constructor","props","onReload","obj","Login","masterData","RealFromDate","RealToDate","userInfo","fromDate","toDate","RealSampleTypeValue","RealRegTypeValue","RealRegSubTypeValue","RealFilterStatusValue","RealDesignTemplateMappingValue","activeSampleTab","activeSubSampleTab","activeTestTab","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","DesignTemplateMappingValue","FromDate","ToDate","inputData","npreregno","nsampletypecode","nregtypecode","nregsubtypecode","nfilterstatus","ntransactionstatus","userinfo","flag","nneedtemplatebasedflow","ndesigntemplatemappingcode","nneedsubsample","checkBoxOperation","inputParam","searchSubSampleRef","searchSampleRef","searchTestRef","selectedFilter","state","warn","intl","formatMessage","id","onFilterSubmit","fromdate","todate","paneSizeChange","d","setState","splitChangeWidthPercentage","verticalPaneSizeChange","val","enableAutoHeight","initialVerticalWidth","changeSplitterOption","handleDateSubSampleChange","dateValue","dateName","selectedRecord","onComponentChange","comboData","fieldName","label","item","nspecsampletypecode","specBasedComponent","Conponent","onInputOnSubSampleChange","event","target","type","name","checked","value","onComboSubSampleChange","control","customName","parentList","childComboList","childColumnList","comboName","inputParem","child","source","primarykeyField","valuemember","nameofdefaultcomp","length","regSubSamplecomboComponents","map","columnList","regSubSamplewithoutCombocomponent","regSubSamplecomboData","temp","components","component","temp1","updateInfo","typeName","data","onNumericInputSubSampleChange","onSaveSubSampleClick","saveType","formRef","operation","objSubSample","defaulttimezone","sampleList","searchedSample","undefined","RegistrationGetSample","slice","skip","take","selectedSample","findSampleAlloSpec","Set","nallottedspeccode","findSampleSpec","dateList","SubSampleTemplate","jsondata","row","children","column","hasOwnProperty","componentrow","inputtype","mandatory","Date","loadcurrentdate","timezone","push","selectedTestData","selectedTestArray","subsampledateconstraints","join","postParamList","mandatoryList","prereg","printer","file","childtest","regSubSample","deleteAttachment","selectedFile","actionType","onSaveChildTestClick","selectedSubsample","selectedSubSample","ntransactionsamplecode","x","TestGroupTest","ntestgrouptestcode","RegistrationSample","ntype","sample","classUrl","methodUrl","responseKeyList","controlMap","nformcode","ncontrolCode","loadEsign","screenData","getRegistrationComboService","ScreenName","primaryKeyField","editId","ndesigntemplatemappingcodefilter","withoutCombocomponent","Layout","registrationTemplate","comboComponents","mapOfFilterRegData","parseInt","sregsubtypename","info","retunObj","childList","childData","index","findIndex","y","handlePageChange","e","setTimeout","_scrollBarRef","updateScroll","handleTestPageChange","testskip","testtake","handleSubSamplePageChange","subsampleskip","subsampletake","openFilter","showFilter","onFilterChange","labelname","onSampleTabChange","tabProps","screenName","onSubSampleTabChange","subSampleCommentDataState","subSampleAttachmentDataState","ontestTabChange","selectedTest","ntransactiontestcode","String","resultDataState","testCommentDataState","testAttachmentDataState","onDropComponentFile","attachedFiles","maxSize","handleFilterDateChange","onUpdateRegistrationConfirm","showAlert","onUpdateRegistration","regEditParam","confirmAlert","showConfirmAlert","regDateEditConfirmMessage","confirmMessage","confirm","booleanFlag","insertRegistration","closeFilter","booleanmanuf","PLASMA_POOL","loadFile","ChildscreenName","childoperation","parentPopUpSize","onNumericInputChange","selectComponent","onSampleTypeChange","Map","ConfirmComponent","getComponentfromJava","onRegTypeChange","registerId","acceptList","every","checkPreregisterAndQuarentine","RegistrationGetTest","action","acceptRegistrationConfirm","userRoleControlRights","openModal","selectQuarantine","quarantineId","splice","quarentineList","checkPreregisterRecordQuarantine","onRegSubTypeChange","onDesignTemplateChange","onInputOnChange","onComboChange","PrinterChange","selectedPrinterData","closeChildModal","loadRegSubSample","showSaveContinue","loadChildTest","PopUpLabel","closeModal","loadPreregister","openChildModal","pare","loadPrinter","openPortal","subSampleDataGridList","insertSourcePreregno","onSaveClick","onSavePrinterClick","insertlist","displayName","insertPrinterPreregno","sprintername","npreregno1","ncontrolcode","onSaveFileClick","acceptedFiles","sfilename","formData","FormData","forEach","append","JSON","stringify","ntemplatemanipulationcode","ImportFile","sampleInfoDataStateChange","sampleGridDataState","dataState","dataStateChange","sourceDataState","subSampledataStateChange","popUptestDataState","testdataStateChange","testStateChange","testDataState","sampleTabDetail","tabMap","selectedSampleList","set","onAttachmentSaveClick","RegistrationAttachment","attachmentskip","attachmenttake","settings","esignRights","masterList","onCommentsSaveClick","RegistrationComment","testDataStateChange","has","get","subsampleTabDetail","subsampleList","RegistrationGetSubSample","selectedSubSampleList","RegistrationSampleAttachment","RegistrationSampleComment","testTabDetail","testTabMap","testList","selectedTestList","test","RegistrationTestAttachment","RegistrationTestComment","saveParam","isTestComment","searchedSubSample","searchedTest","selectedMaster","cancelSubSampleRecord","controlcode","transValidation","transactionValidation","stransdisplaystatus","cancelRecord","addSubSample","addSubSampleList","findTransactionStatus","PREREGISTER","findComponentReqSpec","ncomponentrequired","findSampleSpectemplate","regchildColumnList","handleEditDateChange","onNumericInputEditChange","cancelSampleRecords","cancelRejectSamplesList","transactionstatus","ntransstatus","translist","sam","selectdata","check","sam1","includes","validateEsign","sreason","password","validateEsignforRegistration","editRegistration","editSubSampleRegistration","regSubSamplechildColumnList","mastertoedit","createRef","PrevoiusLoginData","breadCrumbData","layout","masterStatus","error","showAccordian","filterCollection","breadCrumb","showTest","showSample","showSubSample","sampleSearchFied","subsampleSearchFied","testSearchFied","DynamicSampleColumns","sampleCommentsDataState","historyDataState","grandparentheight","regparentSubSampleColumnList","DynamicSubSampleColumns","DynamicTestColumns","DynamicGridItem","DynamicGridMoreField","SingleItem","testMoreField","testListColumns","SubSampleDynamicGridItem","SubSampleDynamicGridMoreField","SubSampleSingleItem","cancelId","preRegisterId","editSampleId","addTestId","printBarcodeId","cancelSampleId","addSubSampleId","editSubSampleId","cancelSubSampleId","stateSampleType","stateRegistrationType","stateRegistrationSubType","stateFilterStatus","stateDynamicDesign","testGetParam","testChildGetParam","subSampleGetParam","filterSampleParam","filterTestParam","editRegParam","editSubSampleRegParam","addTestParam","sampleSearchField","subsampleSearchField","testSearchField","filterSubSampleParam","enablePin","fixefScrollHeight","window","outerHeight","myRef","getDerivedStateFromProps","getActiveTestURL","url","activeTestKey","render","subSampleList","testDesign","borderBottom","display","float","split","setting","ALL","FilterStatus","indexOf","mainDesign","marginTop","childRefs","ref","childFilteredListName","title","controlname","objectName","hidden","onClick","primaryKeyName","filteredListName","clearFilter","searchRef","fetchUrl","fecthInputObject","selectedObject","inputListName","updatedListname","unchangeList","getPrinterComboService","DesignTemplateMapping","background","height","gridfillingColumn","loadComponent","loadTest","loadSource","loadPoolSource","selectedSourceData","DynamicDesign","parse","lstComponent","timeZoneList","defaultTimeZone","TestCombined","availableTest","showSampleInfo","disableSplit","current","clientHeight","showTestDetails","QUARANTINE","temparray","option","LABEL","slanguagetypecode","VALUE","componentDidUpdate","previousProps","Object","values","sampleCommentDataState","sampledateconstraints","dynamicColumn","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","subsamplegriditem","subsamplegridmoreitem","subsampledisplayfields","testlistmoreitems","samplesearchfields","subsamplesearchfields","testsearchfields","SampleType","sampleTypeMap","registrationTypeMap","RegistrationSubType","registrationSubTypeMap","filterStatusMap","DesignTemplateMappingMap","sfromdate","stodate","searchFieldList","changeList","snspecsampletypecode","breadCrumbobj","breadCrumbFrom","breadCrumbto","ssampletypename","sregtypename","sregtemplatename","initialParam","nflag","param","sampleRegistration","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    showUnderDevelopment,\r\n    callService, crudMaster, updateStore, getSampleTypeChange, getRegTypeChange,\r\n    getRegSubTypeChange, getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential, ReloadData, getSampleChildTabDetail,\r\n    getTestChildTabDetailRegistration, getPreviewTemplate, getChildValues,\r\n    getRegistrationSample, getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest, getEditRegistrationComboService,\r\n    cancelTestAction, cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration, cancelSubSampleAction,\r\n    preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail\r\n} from '../../actions'\r\nimport { Button, Card, Col, Nav, Row } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    getControlMap, showEsign, sortData, constructOptionList,\r\n    onDropAttachFileList, deleteAttachmentDropZone, convertDateTimetoString, comboChild\r\n} from '../../components/CommonScript';\r\nimport RegistrationFilter from './RegistrationFilter';\r\nimport Esign from '../audittrail/Esign';\r\nimport { injectIntl } from 'react-intl';\r\nimport { MediaHeader, ProductList } from '../product/product.styled';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport AddTest from './AddTest';\r\nimport { designProperties, RegistrationType, transactionStatus } from '../../components/Enumeration';\r\n// import BreadcrumbComponentToolbar from '../../components/ToolbarBreadcrumb.Component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport TransactionListMasterJson from '../../components/TransactionListMasterJson';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddPrinter from './AddPrinter';\r\nimport SampleGridTab from './SampleGridTab';\r\nimport AddFile from './AddFile';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleComments, onSaveSubSampleComments, onSaveTestComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport { onSaveSampleAttachment, onSaveSubSampleAttachment, onSaveTestAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { ReactComponent as Quarantine } from '../../assets/image/Quarantine.svg'\r\nimport { ReactComponent as Register } from '../../assets/image/register.svg'\r\nimport { ReactComponent as Reject } from '../../assets/image/reject.svg'\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\nimport RegistrationResultTab from './RegistrationResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport PreRegisterSlideOutModal from './PreRegisterSlideOutModal';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { checkTestPresent, getRegistrationSubSample } from './RegistrationValidation';\r\nimport AddSubSample from './AddSubSample';\r\n\r\nclass Registration extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef();\r\n        this.PrevoiusLoginData = undefined;\r\n        this.breadCrumbData = [];\r\n        //  this.sampleeditable=this.props.Login.masterData.DynamicDesign&& JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n        this.state = {\r\n            layout: 1,\r\n            openModal: false,\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            screenName: \"Product\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            showSaveContinue: false,\r\n            filterCollection: [],\r\n            selectedFilter: {},\r\n            breadCrumb: [],\r\n            showTest: true,\r\n            showSample: false,\r\n            showSubSample: false,\r\n            sampleSearchFied: [],\r\n            subsampleSearchFied: [],\r\n            testSearchFied: [],\r\n            showConfirmAlert: false,\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            DynamicSampleColumns: [],\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            testDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'npreregno' }] \r\n            },\r\n            testCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            testAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            sampleCommentsDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }]\r\n            },\r\n            resultDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            historyDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: 'sarno' }, { field: 'stestsynonym' }] \r\n            },\r\n            selectedPrinterData: {},\r\n            grandparentheight: '150vh',\r\n            transactionValidation: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3]),\r\n            testskip: 0,\r\n            splitChangeWidthPercentage: 28.6,\r\n            testtake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            subsampleskip: 0,\r\n            subsampletake: this.props.Login.settings\r\n                && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            comboComponents: [],\r\n            withoutCombocomponent: [],\r\n            childColumnList: [],\r\n            columnList: [],\r\n            regSubSamplecomboComponents: [],\r\n            regSubSamplewithoutCombocomponent: [],\r\n            regparentSubSampleColumnList: [],\r\n            DynamicSubSampleColumns: [],\r\n            DynamicTestColumns: [],\r\n            DynamicGridItem: [],\r\n            DynamicGridMoreField: [],\r\n            SingleItem: [],\r\n            testMoreField: [],\r\n            testListColumns: [],\r\n            SubSampleDynamicGridItem: [],\r\n            SubSampleDynamicGridMoreField: [],\r\n            SubSampleSingleItem: [],\r\n            cancelId: -1,\r\n            preRegisterId: -1,\r\n            registerId: -1,\r\n            editSampleId: -1,\r\n            quarantineId: -1,\r\n            addTestId: -1,\r\n            printBarcodeId: -1,\r\n            cancelSampleId: -1,\r\n            addSubSampleId: -1,\r\n            editSubSampleId: -1,\r\n            cancelSubSampleId: -1,\r\n            stateSampleType: [],\r\n            stateRegistrationType: [],\r\n            stateRegistrationSubType: [],\r\n            stateFilterStatus: [],\r\n            stateDynamicDesign: [],\r\n            testGetParam: {},\r\n            testChildGetParam: {},\r\n            subSampleGetParam: {},\r\n            filterSampleParam: {},\r\n            filterTestParam: {},\r\n            editRegParam: {},\r\n            editSubSampleRegParam: {},\r\n            addTestParam: {},\r\n            sampleSearchField: [],\r\n            subsampleSearchField: [],\r\n            testSearchField: [],\r\n            filterSubSampleParam: {},\r\n            initialVerticalWidth: \"57vh\",\r\n            enablePin: false,\r\n            fixefScrollHeight:window.outerHeight - 300,\r\n\r\n            // specBasedComponent: this.props.Login.settings\r\n            //     && this.props.Login.settings[18] ? this.props.Login.settings[18] === \"true\" ? true : false : false,\r\n\r\n        };\r\n        // this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n        this.myRef = React.createRef();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.showConfirmAlert !== state.showConfirmAlert) {\r\n            return {\r\n                showConfirmAlert: props.Login.showConfirmAlert\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onReload = () => {\r\n\r\n        // let RealFromDate = new Date(this.props.Login.masterData.RealFromDate)\r\n        // let RealToDate = new Date(this.props.Login.masterData.RealToDate)\r\n        const obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo);\r\n        const RealFromDate = obj.fromDate;\r\n        const RealToDate = obj.toDate;\r\n        let RealSampleTypeValue = this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue\r\n        let RealDesignTemplateMappingValue = this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n\r\n        let SampleTypeValue = RealSampleTypeValue\r\n        let RegTypeValue = RealRegTypeValue\r\n        let RegSubTypeValue = RealRegSubTypeValue\r\n        let FilterStatusValue = RealFilterStatusValue\r\n        let DesignTemplateMappingValue = RealDesignTemplateMappingValue\r\n        // let FromDate = this.props.Login.masterData.FromDate\r\n        // let ToDate = this.props.Login.masterData.ToDate\r\n        const FromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        const ToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue, FromDate, ToDate,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, SampleTypeValue, RegTypeValue, RegSubTypeValue, FilterStatusValue, DesignTemplateMappingValue, RealDesignTemplateMappingValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab, activeSubSampleTab,\r\n            flag: 1,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n        if (inputData.nsampletypecode) {\r\n            // let obj = this.covertDatetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate)\r\n            inputData['FromDate'] = obj.fromDate;\r\n            inputData['ToDate'] = obj.toDate;\r\n\r\n            let inputParam = { masterData, inputData, searchSubSampleRef: this.searchSubSampleRef, searchSampleRef: this.searchSampleRef, searchTestRef: this.searchTestRef, selectedFilter: this.state.selectedFilter }\r\n            this.props.ReloadData(inputParam);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        const RealFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate);\r\n        const RealToDate = rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter.todate || this.props.Login.masterData.ToDate)\r\n        let RealSampleTypeValue = this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue\r\n        let RealRegTypeValue = this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue\r\n        let RealRegSubTypeValue = this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue\r\n        let RealFilterStatusValue = this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue\r\n        let RealDesignTemplateMappingValue = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue\r\n\r\n        let activeSampleTab = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        let activeSubSampleTab = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n\r\n        let activeTestTab = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        let masterData = {\r\n            ...this.props.Login.masterData, RealSampleTypeValue, RealRegTypeValue, RealRegSubTypeValue,\r\n            RealFilterStatusValue, RealFromDate, RealToDate, RealDesignTemplateMappingValue\r\n        }\r\n        let inputData = {\r\n            npreregno: \"\",\r\n            nsampletypecode: this.props.Login.masterData.SampleTypeValue && this.props.Login.masterData.SampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RegTypeValue && this.props.Login.masterData.RegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nregsubtypecode,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue && this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo, activeSampleTab, activeTestTab, activeSubSampleTab,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue\r\n                && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3\r\n        }\r\n\r\n        if (inputData.nsampletypecode) {\r\n            if (inputData.ndesigntemplatemappingcode) {\r\n                const obj = convertDateValuetoString(this.state.selectedFilter.fromdate || this.props.Login.masterData.FromDate,\r\n                    this.state.selectedFilter.todate || this.props.Login.masterData.ToDate, this.props.Login.userInfo)\r\n                inputData['FromDate'] = obj.fromDate;\r\n                inputData['ToDate'] = obj.toDate;\r\n                const selectedFilter = {};\r\n                selectedFilter[\"fromdate\"] = RealFromDate;\r\n                selectedFilter[\"todate\"] = RealToDate;\r\n                const inputParam = {\r\n                    masterData, inputData, searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchSampleRef: this.searchSampleRef,\r\n                    searchTestRef: this.searchTestRef, selectedFilter\r\n                }\r\n                this.props.getRegistrationSample(inputParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSCONFIGREGISTRATIONTEMPLATE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getActiveTestURL() {\r\n\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                //url = \"resultentrybysample/getTestbasedParameter\";\r\n                url = \"registration/getregistrationparameter\";\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\";\r\n                break;\r\n            default:\r\n                url = \"registration/getregistrationparameter\";\r\n                // url = \"resultentrybysample/getTestbasedParameter\";\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    // gridViewChange(layout) {\r\n    //     this.setState({\r\n    //         layout: layout\r\n    //     })\r\n    // }\r\n    verticalPaneSizeChange = (val) => {\r\n        if (this.state.enableAutoHeight) {\r\n            this.setState({\r\n                initialVerticalWidth: val - 150\r\n            })\r\n        }\r\n    }\r\n    changeSplitterOption = () => {\r\n        this.setState({\r\n            enableAutoHeight: !this.state.enableAutoHeight,\r\n            initialVerticalWidth: \"57vh\"\r\n\r\n        })\r\n    }\r\n\r\n   \r\n\r\n    render() {\r\n\r\n\r\n        this.fromDate = this.state.selectedFilter[\"fromdate\"] !== \"\" && this.state.selectedFilter[\"fromdate\"] !== undefined ? this.state.selectedFilter[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n        this.toDate = this.state.selectedFilter[\"todate\"] !== \"\" && this.state.selectedFilter[\"todate\"] !== undefined ? this.state.selectedFilter[\"todate\"] : this.props.Login.masterData.ToDate;\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample ? sortData(this.props.Login.masterData.RegistrationGetSample, 'desc', 'npreregno') : [];\r\n        let subSampleList = this.props.Login.masterData.RegistrationGetSubSample ? this.props.Login.masterData.RegistrationGetSubSample : [];\r\n        let testList = this.props.Login.masterData.RegistrationGetTest ? this.props.Login.masterData.RegistrationGetTest : []; //\r\n\r\n\r\n\r\n\r\n        const testDesign = <ContentPanel>\r\n            <Card>\r\n                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                    <span style={{ display: \"inline-block\" }}>\r\n                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                    </span>\r\n                    <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                        onClick={() => this.showSample()}\r\n                    >\r\n                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                        {this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}\r\n                    </button>\r\n                    {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                    onClick={() => this.showSubSample()}\r\n                >\r\n                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                    {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                </button> */}\r\n\r\n                    {/* </div> */}\r\n                </Card.Header>\r\n                <Card.Body className='p-0'>\r\n                    <TransactionListMasterJsonView\r\n                        paneHeight={this.state.initialVerticalWidth}\r\n                        masterList={this.props.Login.masterData.searchedTest || testList}\r\n                        selectedMaster={this.props.Login.masterData.selectedTest}\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        getMasterDetail={this.props.getTestChildTabDetailRegistration}\r\n                        inputParam={{\r\n                            ...this.state.testChildGetParam, resultDataState: this.state.resultDataState,\r\n                            testCommentDataState: this.state.testCommentDataState,\r\n                            testAttachmentDataState: this.state.testAttachmentDataState,\r\n                        }}\r\n                        additionalParam={[]}\r\n                        mainField=\"stestsynonym\"\r\n                        selectedListName=\"selectedTest\"\r\n                        objectName=\"test\"\r\n                        listName=\"IDS_TEST\"\r\n                        // jsonField={'jsondata'}\r\n                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                        showStatusLink={true}\r\n                        subFieldsLabel={true}\r\n                        statusFieldName=\"stransdisplaystatus\"\r\n                        statusField=\"ntransactionstatus\"\r\n                        needMultiSelect={true}\r\n                        subFields={this.state.testListColumns || []}\r\n                        moreField={this.state.testMoreField}\r\n                        needValidation={false}\r\n                        showStatusName={true}\r\n                        needFilter={false}\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        searchListName=\"searchedTest\"\r\n                        searchRef={this.searchTestRef}\r\n                        filterParam={this.state.filterTestParam}\r\n                        selectionField=\"ntransactionstatus\"\r\n                        selectionFieldName=\"stransdisplaystatus\"\r\n                        // childTabsKey={[\"RegistrationTestComment\"]}\r\n                        childTabsKey={[\"RegistrationParameter\", \"RegistrationTestComment\", \"RegistrationTestAttachment\"]}\r\n                        handlePageChange={this.handleTestPageChange}\r\n                        buttonCount={5}\r\n                        skip={this.state.testskip}\r\n                        take={this.state.testtake}\r\n                        showMoreResetList={true}\r\n                        showMoreResetListName=\"RegistrationGetSample\"\r\n                        selectionList={this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                        selectionColorField=\"scolorhexcode\"\r\n                        // selectionList=\r\n                        // actionIcons={\r\n                        //     [{ title: \"EditTest\", controlname: \"faPencilAlt\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                        //     { title: \"Add Intrument\", controlname: \"faMicroscope\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedInstrumentId) === -1, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                        //     { title: \"Add Material\", controlname: \"faFlask\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedMaterailId) === -1 },\r\n                        //     { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }]\r\n                        // }\r\n                        commonActions={\r\n                            <>\r\n                                {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                    {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                    <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                        //title={\"Add Test\"}\r\n                                        data-for=\"tooltip-common-wrap\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDTEST\" })}\r\n                                        hidden={this.state.userRoleControlRights.indexOf(this.state.addTestId) === -1}\r\n                                        onClick={() => this.props.addMoreTest({\r\n                                            ...this.state.addTestParam,\r\n                                            skip: this.state.skip, take: (this.state.skip + this.state.take)\r\n                                        }, this.state.addTestId)}\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faPlus} />\r\n                                    </Nav.Link>\r\n\r\n                                    <Nav.Link\r\n                                        className=\"btn btn-circle outline-grey ml-2\"\r\n                                        //title={\"Cancel/Reject Test\"}\r\n                                        data-for=\"tooltip-common-wrap\"\r\n                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTTEST\" })}\r\n                                        hidden={this.state.userRoleControlRights.indexOf(this.state.cancelId) === -1}\r\n                                        onClick={() => this.cancelRecord(this.state.cancelId, this.state.testskip, this.state.testtake)}>\r\n                                        <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                    </Nav.Link>\r\n                                </ProductList>\r\n                                {/* </Tooltip> */}\r\n                            </>\r\n                        }\r\n                    />\r\n                </Card.Body>\r\n            </Card>\r\n        </ContentPanel>\r\n\r\n\r\n        let mainDesign = \"\"\r\n\r\n        if (this.props.Login.masterData.RealRegSubTypeValue &&\r\n            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample) {\r\n\r\n            mainDesign = <SplitterLayout borderColor=\"#999\"\r\n                primaryIndex={1} percentage={true}\r\n                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                //onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                primaryMinSize={40}\r\n                secondaryMinSize={30}\r\n            >\r\n\r\n                <Card >\r\n                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                        </span>\r\n                    </Card.Header>\r\n                    <Card.Body className='p-0'>\r\n                        <TransactionListMasterJson\r\n                            paneHeight={this.state.initialVerticalWidth}\r\n                            // splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                            masterList={this.props.Login.masterData.searchedSubSample || subSampleList}\r\n                            selectedMaster={this.props.Login.masterData.selectedSubSample}\r\n                            primaryKeyField=\"ntransactionsamplecode\"\r\n                            getMasterDetail={this.props.getRegistrationTestDetail}\r\n                            inputParam={{\r\n                                ...this.state.testGetParam,\r\n                                searchTestRef: this.searchTestRef,\r\n                                searchSubSampleRef: this.searchSubSampleRef,\r\n                                testskip: this.state.testskip,\r\n                                subsampleskip: this.state.subsampleskip,\r\n                                resultDataState: this.state.resultDataState\r\n                            }}\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            searchListName=\"searchedSubSample\"\r\n                            searchRef={this.searchSubSampleRef}\r\n                            filterParam={{\r\n                                ...this.state.filterSubSampleParam,\r\n                                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }]\r\n                            }}\r\n                            additionalParam={['napprovalversioncode']}\r\n                            showStatusLink={true}\r\n                            showStatusName={true}\r\n                            statusFieldName=\"stransdisplaystatus\"\r\n                            statusField=\"ntransactionstatus\"\r\n                            mainField=\"ssamplearno\"\r\n                            selectedListName=\"selectedSubSample\"\r\n                            objectName=\"subsample\"\r\n                            listName=\"IDS_SUBSAMPLE\"\r\n                            // jsonField={'jsondata'}\r\n                            //jsonDesignFields={true}\r\n                            needValidation={true}\r\n                            validationKey=\"napprovalversioncode\"\r\n                            validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                            subFields={this.state.DynamicSubSampleColumns}\r\n                            skip={this.state.subsampleskip}\r\n                            take={this.state.subsampletake}\r\n                            selectionField=\"ntransactionstatus\"\r\n                            selectionFieldName=\"stransdisplaystatus\"\r\n                            needMultiSelect={true}\r\n                            selectionColorField=\"scolorhexcode\"\r\n                            subFieldsLabel={false}\r\n                            handlePageChange={this.handleSubSamplePageChange}\r\n                            selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                            childTabsKey={[\"RegistrationAttachment\",\r\n                                \"RegistrationGetTest\",\"RegistrationSampleComment\",\"RegistrationSampleAttachment\"]}\r\n                            actionIcons={\r\n                                [\r\n                                    {\r\n                                        title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                        controlname: \"faPencilAlt\",\r\n                                        objectName: \"mastertoedit\",\r\n                                        hidden: this.state.userRoleControlRights.indexOf(this.state.editSubSampleId) === -1,\r\n                                        onClick: this.editSubSampleRegistration,\r\n                                        inputData: {\r\n                                            primaryKeyName: \"ntransactionsamplecode\",\r\n                                            operation: \"update\",\r\n                                            masterData: this.props.Login.masterData,\r\n                                            userInfo: this.props.Login.userInfo,\r\n                                            editSubSampleRegParam: { ...this.state.editSubSampleRegParam, ncontrolCode: this.state.editSampleId }\r\n                                        },\r\n                                    }\r\n\r\n\r\n                                ]\r\n                            }\r\n                            needFilter={false}\r\n                            commonActions={\r\n                                <>\r\n                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                    <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                        <Nav.Link name=\"adddeputy\" className=\"btn btn-circle outline-grey ml-2\"\r\n                                            //title={\"Add Test\"}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSUBSAMPLE\" })}\r\n                                            hidden={this.state.userRoleControlRights.indexOf(this.state.addSubSampleId) === -1}\r\n                                            onClick={() => this.addSubSample(this.state.addSubSampleId, this.state.subsampleskip, this.state.subsampletake)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            className=\"btn btn-circle outline-grey ml-2\"\r\n                                            //title={\"Cancel/Reject Test\"}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                            hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSubSampleId) === -1}\r\n                                            onClick={() => this.cancelSubSampleRecord(this.state.cancelSubSampleId, this.state.subsampleskip, this.state.subsampletake)}>\r\n                                            <Reject className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                        </Nav.Link>\r\n                                    </ProductList>\r\n                                    {/* </Tooltip> */}\r\n                                </>\r\n                            }\r\n                        />\r\n                    </Card.Body>\r\n                </Card>\r\n                {testDesign}\r\n            </SplitterLayout>\r\n\r\n        } else {\r\n            mainDesign = testDesign\r\n        }\r\n\r\n\r\n        // let testGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     npreregno: this.props.Login.masterData.selectedSample &&\r\n        //         this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     searchTestRef: this.searchTestRef,\r\n        //     testskip: this.state.testskip,\r\n        //     subsampleskip: this.state.subsampleskip,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        // }\r\n        // let testChildGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n        //     ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n        //         this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     testCommentDataState: this.state.testCommentDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        // }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        // let subSampleGetParam = {\r\n        //     masterData: this.props.Login.masterData,\r\n        //     ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //     activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     testskip: this.state.testskip,\r\n        //     subsampleskip: this.state.subsampleskip,\r\n        //     searchTestRef: this.searchTestRef,\r\n        //     resultDataState: this.state.resultDataState,\r\n        //     testCommentDataState: this.state.testCommentDataState,\r\n        //     sampleGridDataState: this.state.sampleGridDataState,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n        // let sampleSearchField = [\"sarno\", \"sproductname\", \"sproductcatname\", \"seprotocolname\", \"stransdisplaystatus\"\r\n        //     , \"sstorageconditionname\", \"sdecisionstatus\", \"scomponentname\", \"splasmafilenumber\", \"sversion\", \"sbulkvolume\", \"sregsubtypename\", \"smanuflotno\"\r\n        //     , \"sregtypename\", \"sspecname\", \"saddress1\", \"sclientname\", \"smanufsitename\", \"sproductcertificatename\", \"smanufname\", \"sstoragelocationname\"];\r\n\r\n\r\n        // const filterSampleParam = {\r\n        //     inputListName: \"RegistrationGetSample\",\r\n        //     selectedObject: \"selectedSample\",\r\n        //     primaryKeyField: \"npreregno\",\r\n        //     fetchUrl: \"registration/getRegistrationSubSample\",\r\n        //     childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n        //     fecthInputObject: {\r\n        //         nflag: 2,\r\n        //         ntype: 2,\r\n        //         masterData: this.props.Login.masterData,\r\n        //         ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //         userinfo: this.props.Login.userInfo,\r\n        //         nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //         nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //         nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //         activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n        //         activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n        //     },\r\n        //     masterData: this.props.Login.masterData,\r\n        //     searchFieldList: sampleSearchField,\r\n        //     changeList: [\r\n        //         \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n        //         \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n        //         \"selectedTest\", \"RegistrationParameter\"\r\n        //     ]\r\n        // };\r\n\r\n        // let filterTestParam = {\r\n        //     inputListName: \"RegistrationGetTest\",\r\n        //     selectedObject: \"selectedTest\",\r\n        //     primaryKeyField: \"ntransactiontestcode\",\r\n        //     fetchUrl: this.getActiveTestURL(),\r\n        //     fecthInputObject: {\r\n        //         ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n        //         userinfo: this.props.Login.userInfo\r\n        //     },\r\n        //     masterData: this.props.Login.masterData,\r\n        //     searchFieldList: [\"sarno\", \"stestsynonym\", \"ssectionname\", \"ssamplearno\",\r\n        //         \"sinstrumentcatname\", \"stransdisplaystatus\", \"smethodname\", \"ssourcename\", \"scomponentname\", \"stestname\"],\r\n        //     changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n        // }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.subSampleGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSample\",\r\n                inputListName: \"AP_SAMPLE\",\r\n                updatedListname: \"selectedSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTestSample\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam, testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    searchSubSampleRef: this.searchSubSampleRef,\r\n                    searchTestRef: this.searchTestRef,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                    sampleGridDataState: this.state.sampleGridDataState\r\n                },\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                selectedObject: \"selectedSubSample\",\r\n                inputListName: \"AP_SUBSAMPLE\",\r\n                updatedListname: \"selectedSubSample\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            },\r\n            {\r\n                filteredListName: \"searchedTest\",\r\n                updatedListname: \"selectedTest\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: \"approval/getApprovalTest\",\r\n                fecthInputObject: {\r\n                    ...this.state.testGetParam,\r\n                    searchTestRef: this.searchTestRef,\r\n                    testskip: this.state.testskip,\r\n                    subsampleskip: this.state.subsampleskip,\r\n                    resultDataState: this.state.resultDataState\r\n                },\r\n                selectedObject: \"selectedTest\",\r\n                inputListName: \"RegistrationGetTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }\r\n        ];\r\n\r\n\r\n        // let editRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // let editSubSampleRegParam = {\r\n        //     nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n        //     nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n        //     nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n        //     sfromdate: this.props.Login.masterData.RealFromDate,\r\n        //     stodate: this.props.Login.masterData.RealToDate,\r\n        //     ncontrolCode: this.state.editSampleId,\r\n        //     ndesigntemplatemappingcode: this.props.Login.masterData.registrationTemplate\r\n        //         && this.props.Login.masterData.registrationTemplate.ndesigntemplatemappingcode,\r\n        //     nneedsubsample: this.props.Login.masterData\r\n        //         && this.props.Login.masterData.nneedsubsample\r\n        // }\r\n\r\n        // const addTestParam = {\r\n        //     selectedsample: this.props.Login.masterData.selectedSample,\r\n        //     selectedsubsample: this.props.Login.masterData.selectedSubSample,\r\n        //     skip: this.state.skip, take: (this.state.skip + this.state.take),\r\n        //     userinfo: this.props.Login.userInfo,\r\n        //     sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n        //     snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n        //         [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n        // };\r\n\r\n        return (\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    {/* <BreadcrumbComponentToolbar\r\n                        filterComponent={[\r\n                            {\r\n                                \"Sample Filter\": <RegistrationFilter\r\n                                    SampleType={this.state.stateSampleType || []}\r\n                                    RegistrationType={this.state.stateRegistrationType || []}\r\n                                    RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                                    userInfo={this.props.Login.userInfo || {}}\r\n                                    SampleTypeValue={this.props.Login.masterData.SampleTypeValue || {}}\r\n                                    RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                                    RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                                    FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                    DesignTemplateMapping={this.props.Login.masterData.DesignTemplateMapping}\r\n                                    DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || {}}\r\n                                    FilterStatus={this.state.stateFilterStatus || []}\r\n                                    FromDate={this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date()}\r\n                                    ToDate={this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date()}\r\n                                    onSampleTypeChange={this.onSampleTypeChange}\r\n                                    onRegTypeChange={this.onRegTypeChange}\r\n                                    onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                    onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                    DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                    handleFilterDateChange={this.handleFilterDateChange}\r\n                                    onFilterChange={this.onFilterChange}\r\n                                />\r\n                            }\r\n                        ]}\r\n                        showFilter={this.props.Login.showFilter}\r\n                        openFilter={this.openFilter}\r\n                        closeFilter={this.closeFilter}\r\n                        onFilterSubmit={this.onFilterSubmit}\r\n                        searchRef={this.searchSampleRef}\r\n                        filterParam={{\r\n                            ...this.state.filterSampleParam,\r\n                            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                            { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                        }}\r\n                        searchListName=\"searchedSample\"\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        breadCrumbItem={this.breadCrumbData} /> */}\r\n                    {/* <div className='btn-list'>\r\n                        <button className={`btn-primary-head ${this.state.layout === 1 ? 'active' : ''} `} onClick={() => this.gridViewChange(1)}>Sample</button>\r\n                        <button className={`btn-primary-head ${this.state.layout === 2 ? 'active' : ''} `} onClick={() => this.gridViewChange(2)}>Sub Sample</button>\r\n                        <button className={`btn-primary-head ${this.state.layout === 3 ? 'active' : ''} `} onClick={() => this.gridViewChange(3)}>Test</button>\r\n                    </div> */}\r\n                    <Row noGutters={true}  className=\"toolbar-top\">\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper >\r\n                                {/* className={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 60 ? 'split-mode' : ''} */}\r\n\r\n                                <SplitterLayout borderColor=\"#999\"\r\n                                    primaryIndex={1} percentage={true}\r\n                                    secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                    //onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                    primaryMinSize={40}\r\n                                    secondaryMinSize={20}\r\n                                >\r\n                                    <div className='toolbar-top-inner'>                                    \r\n                                    <TransactionListMasterJson\r\n                                        listMasterShowIcon={1}\r\n                                        // paneHeight={this.state.firstPane}\r\n                                        clickIconGroup={true}\r\n                                        splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                        masterList={this.props.Login.masterData.searchedSample || sampleList}\r\n                                        selectedMaster={this.props.Login.masterData.selectedSample}\r\n                                        primaryKeyField=\"npreregno\"\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        getMasterDetail={this.props.getRegistrationsubSampleDetail}\r\n                                        inputParam={{\r\n                                            ...this.state.subSampleGetParam,\r\n                                            searchTestRef: this.searchTestRef,\r\n                                            searchSubSampleRef: this.searchSubSampleRef,\r\n                                            testskip: this.state.testskip,\r\n                                            subsampleskip: this.state.subsampleskip,\r\n                                            resultDataState: this.state.resultDataState\r\n                                        }}\r\n                                        selectionList={this.props.Login.masterData.RealFilterStatusValue\r\n                                            && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.FilterStatus : []}\r\n                                        selectionColorField=\"scolorhexcode\"\r\n                                        mainField={\"sarno\"}\r\n                                        showStatusLink={true}\r\n                                        showStatusName={true}\r\n                                        statusFieldName=\"stransdisplaystatus\"\r\n                                        statusField=\"ntransactionstatus\"\r\n                                        selectedListName=\"selectedSample\"\r\n                                        searchListName=\"searchedSample\"\r\n                                        searchRef={this.searchSampleRef}\r\n                                        objectName=\"sample\"\r\n                                        listName=\"IDS_SAMPLE\"\r\n                                        selectionField=\"ntransactionstatus\"\r\n                                        selectionFieldName=\"stransdisplaystatus\"\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        subFields={this.state.DynamicSampleColumns}\r\n                                        // jsonField={'jsondata'}\r\n                                        //jsonDesignFields={true}\r\n                                        needMultiSelect={true}\r\n                                        showStatusBlink={true}\r\n                                        filterParam={{\r\n                                            ...this.state.filterSampleParam,\r\n                                            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" },\r\n                                            { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                                        }}\r\n                                        subFieldsLabel={false}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n                                        // splitModeClass={this.state.splitChangeWidthPercentage\r\n                                        //     && this.state.splitChangeWidthPercentage > 50 ? 'split-mode'\r\n                                        //     : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                        childTabsKey={[\"RegistrationAttachment\", \"RegistrationGetSubSample\",\r\n                                            \"RegistrationGetTest\", \"RegistrationSampleComment\", \"selectedSubSample\", \"selectedTest\"]} //, \"RegistrationParameter\"\"RegistrationTestComment\"\r\n                                        actionIcons={\r\n                                            [\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                    controlname: \"faPencilAlt\",\r\n                                                    objectName: \"mastertoedit\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(this.state.editSampleId) === -1,\r\n                                                    onClick: this.editRegistration,\r\n                                                    inputData: {\r\n                                                        primaryKeyName: \"npreregno\",\r\n                                                        operation: \"update\",\r\n                                                        masterData: this.props.Login.masterData,\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        editRegParam: {\r\n                                                            ...this.state.editRegParam,\r\n                                                            ncontrolCode: this.state.editSampleId\r\n                                                        }\r\n                                                    },\r\n                                                },\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_PRINTBARCODE\" }),\r\n                                                    controlname: \"faPrint\",\r\n                                                    objectName: \"sample\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(this.state.printBarcodeId) === -1,\r\n                                                    onClick: this.props.getPrinterComboService,\r\n                                                    inputData: {\r\n                                                        primaryKeyName: \"npreregno\",\r\n                                                        operation: \"print\",\r\n                                                        ncontrolcode: this.state.printBarcodeId,\r\n                                                        masterData: this.props.Login.masterData,\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        editRegParam: {\r\n                                                            ...this.state.editRegParam,\r\n                                                            ncontrolCode: this.state.editSampleId\r\n                                                        }\r\n                                                    },\r\n                                                },\r\n\r\n                                            ]\r\n                                        }\r\n                                        needFilter={true}\r\n                                        commonActions={\r\n\r\n                                            <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                <Button className=\"btn btn-icon-rounded btn-circle solid-blue ml-2\" role=\"button\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_PREREGISTER\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(this.state.preRegisterId) === -1}\r\n                                                    onClick={() => this.getRegistrationComboService(\"Registration\", \"create\", \"npreregno\",\r\n                                                        this.props.Login.masterData, this.props.Login.userInfo, this.state.preRegisterId)}>\r\n                                                    <FontAwesomeIcon icon={faPlus} />\r\n                                                </Button>\r\n                                                <Nav.Link\r\n                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REGISTER\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(this.state.registerId) === -1}\r\n                                                    onClick={() => this.acceptRegistration(this.state.registerId, this.state.skip, this.state.take)} >\r\n                                                    <Register className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                </Nav.Link>\r\n                                                <Nav.Link\r\n                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_QUARANTINE\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(this.state.quarantineId) === -1}\r\n                                                    onClick={() => this.selectQuarantine(this.state.quarantineId, this.state.skip, this.state.take)} >\r\n                                                    <Quarantine className=\"custom_icons\" width=\"15\" height=\"15\" />\r\n                                                </Nav.Link>\r\n                                                <Nav.Link\r\n                                                    className=\"btn btn-circle outline-grey ml-2\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCELREJECTSAMPLE\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(this.state.cancelSampleId) === -1}\r\n                                                    onClick={() => this.cancelSampleRecords(this.state.cancelSampleId, this.state.skip, this.state.take)}>\r\n                                                    <Reject className=\"custom_icons\" width=\"20\" height=\"20\" />\r\n                                                </Nav.Link>\r\n                                                <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    onClick={() => this.onReload()} >\r\n\r\n                                                    <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                </Button>\r\n                                            </ProductList>\r\n                                        }\r\n                                        filterComponent={[\r\n                                            {\r\n                                                \"Sample Filter\": <RegistrationFilter\r\n                                                    SampleType={this.state.stateSampleType || []}\r\n                                                    RegistrationType={this.state.stateRegistrationType || []}\r\n                                                    RegistrationSubType={this.state.stateRegistrationSubType || []}\r\n                                                    userInfo={this.props.Login.userInfo || {}}\r\n                                                    SampleTypeValue={this.props.Login.masterData.SampleTypeValue || {}}\r\n                                                    RegTypeValue={this.props.Login.masterData.RegTypeValue || {}}\r\n                                                    RegSubTypeValue={this.props.Login.masterData.RegSubTypeValue || {}}\r\n                                                    FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                    DesignTemplateMapping={this.props.Login.masterData.DesignTemplateMapping}\r\n                                                    DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || {}}\r\n                                                    FilterStatus={this.state.stateFilterStatus || []}\r\n                                                    FromDate={this.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.fromDate) : new Date()}\r\n                                                    ToDate={this.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.toDate) : new Date()}\r\n                                                    onSampleTypeChange={this.onSampleTypeChange}\r\n                                                    onRegTypeChange={this.onRegTypeChange}\r\n                                                    onRegSubTypeChange={this.onRegSubTypeChange}\r\n                                                    onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                    DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                    handleFilterDateChange={this.handleFilterDateChange}\r\n                                                    onFilterChange={this.onFilterChange}\r\n                                                />\r\n                                            }\r\n                                        ]}\r\n\r\n                                    />\r\n                                        </div>\r\n\r\n                                    <PerfectScrollbar>\r\n                                        <SplitterLayout\r\n                                            customClassName=\"detailed-inner no-height pin-scroller\"\r\n                                            vertical\r\n                                            borderColor=\"#999\"\r\n                                            primaryIndex={1}\r\n                                            //onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n                                            //secondaryInitialSize={window.outerHeight - 260}\r\n                                             secondaryInitialSize={this.state.fixefScrollHeight}\r\n                                            \r\n                                        >\r\n                                            <div>\r\n                                                <div style={this.state.showTest === true || this.state.showSubSample === true ?\r\n                                                    { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                    {mainDesign}\r\n                                                </div>\r\n                                                <ContentPanel ref={this.myRef} style={this.state.showSample === true ? { display: \"block\" } : { display: \"none\" }}>\r\n                                                    <Card ref={this.myRef} className=\"border-0\">\r\n                                                        <Card.Body className='p-0'>\r\n                                                            <Row>\r\n                                                                <Col md={12}>\r\n                                                                    <Card className='p-0'>\r\n                                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                <h4 >{this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })}</h4>\r\n                                                                            </span>\r\n                                                                            {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ float: \"right\" }}\r\n                                                                                    onClick={() => this.showSubSample()}\r\n                                                                                >\r\n                                                                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                    {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                                </button> */}\r\n                                                                            <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                                onClick={() => this.showTest()}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                            </button>\r\n                                                                        </Card.Header>\r\n                                                                        <Card.Body>\r\n                                                                            <PerfectScrollbar>\r\n                                                                                <div ref={this.myRef} style={{ height: this.state.initialVerticalWidth + 30 }}>\r\n                                                                                    {this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length === 1 ?\r\n                                                                                        <SampleInfoView\r\n                                                                                            data={(this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.length > 0) ?\r\n                                                                                                this.props.Login.masterData.selectedSample[this.props.Login.masterData.selectedSample.length - 1] : {}}\r\n                                                                                            SingleItem={this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample ?\r\n                                                                                                this.state.SingleItem : []}\r\n                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                            userInfo={this.props.Login.userInfo}\r\n\r\n                                                                                        />\r\n\r\n                                                                                        :\r\n                                                                                        <SampleGridTab\r\n                                                                                            userInfo={this.props.Login.masterData.userInfo || {}}\r\n                                                                                            GridData={this.props.Login.masterData.selectedSample || []}\r\n                                                                                            masterData={this.props.Login.masterData}\r\n                                                                                            inputParam={this.props.Login.inputParam}\r\n                                                                                            dataState={this.state.sampleGridDataState}\r\n                                                                                            dataStateChange={this.sampleInfoDataStateChange}\r\n                                                                                            extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                                                            detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                                                            primaryKeyField={\"npreregno\"}\r\n                                                                                            expandField=\"expanded\"\r\n                                                                                            screenName=\"IDS_SAMPLEINFO\"\r\n                                                                                        //jsonField={\"jsondata\"}\r\n                                                                                        />\r\n                                                                                    }\r\n                                                                                </div>\r\n                                                                            </PerfectScrollbar>\r\n                                                                        </Card.Body>\r\n                                                                    </Card>\r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                </ContentPanel>\r\n                                               \r\n                                            </div>\r\n                                            <div>\r\n                                                {this.state.enablePin ? <span className={`pin-icon ${this.state.enableAutoHeight ? \"active\" : \"\"}`} \r\n                                                onClick={this.changeSplitterOption}\r\n                                                ></span>\r\n                                                    : \"\"}\r\n                                                {/* <SearchAdd className=\"d-flex justify-content-between\"> */}\r\n                                                <Card className='p-0'>\r\n                                                    <Card.Body className='p-0'>\r\n                                                        <Card.Header style={{ borderBottom: \"0px\" }}>\r\n\r\n                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                <h4 >{this.props.intl.formatMessage({\r\n                                                                    id: this.state.showSample ? \"IDS_SAMPLEATTACHMENTSCOMMENTS\" :\r\n                                                                        this.state.showSubSample ? \"IDS_SUBSAMPLEATTACHMENTSCOMMENTS\" : \"IDS_PARAMETERRESULTS\"\r\n                                                                })}</h4>\r\n                                                            </span>\r\n\r\n                                                            {this.state.showSample ? <>\r\n                                                                {/* <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                        onClick={() => this.showSubSample()}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                        {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                    </button>\r\n                                                                    <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                        onClick={() => this.showTest()}\r\n                                                                    >\r\n                                                                        <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                        {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                    </button> */}\r\n                                                            </> :\r\n                                                                this.state.showSubSample ?\r\n                                                                    <>\r\n                                                                       \r\n                                                                        <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                            onClick={() => this.showTest()}\r\n                                                                        >\r\n                                                                            <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                            {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                                        </button></> :\r\n                                                                    <>\r\n                                                                       \r\n                                                                        {this.props.Login.masterData.RealRegSubTypeValue &&\r\n                                                                            this.props.Login.masterData.RealRegSubTypeValue.nneedsubsample ?\r\n                                                                            <button className=\"btn btn-primary btn-padd-custom\" style={{ \"float\": \"right\", \"margin-right\": \"6px\" }}\r\n                                                                                onClick={() => this.showSubSample()}\r\n                                                                            >\r\n                                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon> { }\r\n                                                                                {this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}\r\n                                                                            </button> : \"\"\r\n                                                                        }</>\r\n                                                            }\r\n                                                        </Card.Header>\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                {/* </SearchAdd> */}\r\n                                                {/* <PerfectScrollbar> */}\r\n                                                <div>\r\n                                                    {/* xaaaaa-{this._scrollBarRef} */}\r\n                                                    {this.state.showSample ?\r\n\r\n                                                        <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                            tabDetail={this.sampleTabDetail()} onTabChange={this.onSampleTabChange} /> :\r\n                                                        this.state.showSubSample ?\r\n                                                            <CustomTabs activeKey={this.props.Login.activeSubSampleTab ? this.props.Login.activeSubSampleTab === 'IDS_SUBSAMPLEATTACHMENTS' ? 'IDS_SUBSAMPLEATTACHMENTS' : this.props.Login.activeSubSampleTab : 'IDS_SUBSAMPLEATTACHMENTS'}\r\n                                                                tabDetail={this.subsampleTabDetail()} onTabChange={this.onSubSampleTabChange} />\r\n                                                            : this.state.showTest ?\r\n                                                                <CustomTabs activeKey={this.props.Login.activeTestTab ? this.props.Login.activeTestTab === 'IDS_TESTCOMMENTS' ? 'IDS_TESTCOMMENTS' : this.props.Login.activeTestTab : 'IDS_PARAMETERRESULTS'}\r\n                                                                    tabDetail={this.testTabDetail()}\r\n                                                                    onTabChange={this.ontestTabChange} />\r\n                                                                // <Card>\r\n                                                                /* <Card.Header style={{ \"borderBottom\": \"0px\", \"padding-top\": \"1px\" }}>\r\n                                                                    <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                                                                        <h4 className=\"card-title\">Parameter Results</h4>\r\n                                                                    </span>\r\n                                                                </Card.Header> */\r\n\r\n                                                                // </Card>\r\n                                                                // : this.state.showSubSample ?\r\n                                                                //     <CustomTabs activeKey={this.props.Login.activeSampleTab ? this.props.Login.activeSampleTab === 'IDS_SAMPLEATTACHMENTS' ? 'IDS_ATTACHMENTS' : this.props.Login.activeSampleTab : 'IDS_ATTACHMENTS'}\r\n                                                                //         tabDetail={this.subsampleTabDetail()}\r\n                                                                //         onTabChange={this.onSubSampleTabChange} />\r\n\r\n                                                                //     : \"\"}\r\n                                                                : \"\"}\r\n                                                </div>\r\n                                                {/* </PerfectScrollbar> */}\r\n                                            </div>\r\n                                        </SplitterLayout>\r\n                                    </PerfectScrollbar>\r\n                                </SplitterLayout>\r\n                            </ListWrapper>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper >\r\n                {\r\n                    this.props.Login.openPortal ?\r\n                        <PortalModal>\r\n                            <PreRegisterSlideOutModal\r\n                                postParamList={this.postParamList}\r\n                                PrevoiusLoginData={this.PrevoiusLoginData}\r\n                                closeModal={this.closeModal}\r\n                                operation={\"create\"}\r\n                                screenName={\"IDS_REGISTRATION\"}\r\n                                onSaveClick={this.onSaveClick}\r\n                                validateEsign={this.validateEsign}\r\n                                updateStore={this.props.updateStore}\r\n                                comboComponents={this.state.comboComponents}\r\n                                withoutCombocomponent={this.state.withoutCombocomponent}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                fromDate={this.fromDate}\r\n                                toDate={this.toDate}\r\n                                //  specBasedComponent={this.state.specBasedComponent}\r\n                                mandatoryFields={[\r\n                                    { \"idsName\": \"IDS_PRODUCTCATEGORY\", \"dataField\": \"nproductcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                                    { \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]}\r\n                            />\r\n                        </PortalModal>\r\n                        : \"\"\r\n                }\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        //|| this.props.Login.loadEsign}\r\n                        closeModal={this.props.Login.loadRegSubSample ||\r\n                            this.props.Login.loadFile ||\r\n                            this.props.Login.loadChildTest ? this.closeChildModal : this.closeModal}\r\n                        size={this.props.Login.parentPopUpSize}\r\n                        loginoperation={this.props.Login.loadPrinter ? true : false}\r\n                        buttonLabel={this.props.Login.loadPrinter ? \"print\" : undefined}\r\n                        operation={this.props.Login.loadComponent || this.props.Login.loadTest || this.props.Login.loadSource || this.props.Login.loadFile ? this.props.Login.childoperation : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.loadTest || this.props.Login.loadFile ?\r\n                            this.props.Login.ChildscreenName : this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        innerPopup={this.props.Login.loadComponent}\r\n                        onSaveClick={this.props.Login.loadRegSubSample ? this.onSaveSubSampleClick : this.props.Login.loadFile ? this.onSaveFileClick :\r\n                            this.props.Login.loadPrinter ? this.onSavePrinterClick :\r\n                                this.props.Login.loadChildTest ? this.onSaveChildTestClick : this.onSaveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        showSaveContinue={this.props.Login.showSaveContinue}\r\n                        selectedRecord={!this.props.Login.loadEsign ? this.props.Login.loadComponent ? this.state.selectComponent : this.props.Login.loadPrinter ? this.state.selectedPrinterData\r\n                            : this.props.Login.loadTest ? this.state.selectedTestData : this.props.Login.loadFile ? this.state.selectedFile\r\n                                : this.props.Login.loadPoolSource ? this.state.selectedSourceData : this.state.selectedRecord : this.state.selectedRecord}\r\n                        mandatoryFields={this.mandatoryList(this.props.Login.loadPreregister,\r\n                            this.props.Login.loadPrinter, this.props.Login.loadFile,\r\n                            this.props.Login.loadChildTest, this.props.Login.loadRegSubSample)}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.loadRegSubSample ?\r\n                                <AddSubSample\r\n                                    editfield={this.props.Login.masterData.DynamicDesign && JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)}\r\n                                    Component={this.props.Login.lstComponent || []}\r\n                                    selectComponent={this.state.selectedRecord}\r\n                                    templateData={this.props.Login.masterData.SubSampleTemplate &&\r\n                                        this.props.Login.masterData.SubSampleTemplate.jsondata}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    defaultTimeZone={this.props.Login.defaultTimeZone}\r\n                                    handleDateChange={this.handleDateSubSampleChange}\r\n                                    onInputOnChange={this.onInputOnSubSampleChange}\r\n                                    onNumericInputChange={this.onNumericInputSubSampleChange}\r\n                                    comboData={this.props.Login.regSubSamplecomboData}\r\n                                    onComboChange={this.onComboSubSampleChange}\r\n                                    onComponentChange={this.onComponentChange}\r\n                                    TestCombined={this.props.Login.TestCombined || []}\r\n                                    TestChange={this.onComboChange}\r\n                                    selectedTestData={this.state.selectedRecord}\r\n                                    childoperation={this.props.Login.operation}\r\n                                    specBasedComponent={this.props.Login.specBasedComponent}\r\n\r\n                                />\r\n                                : this.props.Login.loadFile ? <AddFile\r\n                                    selectedFile={this.state.selectedFile || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onDrop={this.onDropComponentFile}\r\n                                    deleteAttachment={this.deleteAttachment}\r\n                                    actionType={this.state.actionType}\r\n                                    maxSize={20}\r\n                                    maxFiles={1}\r\n                                /> :\r\n                                    this.props.Login.loadPrinter ?\r\n                                        <AddPrinter\r\n                                            printer={this.props.Login.printer}\r\n                                            selectedPrinterData={this.state.selectedPrinterData}\r\n                                            PrinterChange={this.PrinterChange}\r\n                                        /> : this.props.Login.loadChildTest ? <AddTest\r\n                                            TestCombined={this.props.Login.availableTest}\r\n                                            selectedTestData={this.state.selectedRecord}\r\n                                            TestChange={this.onComboChange}\r\n                                        /> : \"\"\r\n                        }\r\n                    />\r\n                }\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    handleDateSubSampleChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onComponentChange = (comboData, fieldName, nneedsubsample) => {\r\n        if (comboData !== null) {\r\n            //  if (!nneedsubsample) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            if (fieldName === 'ntzdreceivedate') {\r\n                selectedRecord[\"ntzdreceivedate\"] = comboData;\r\n                this.setState({ selectedRecord })\r\n            } else {\r\n                // const oldspecsampletypecode = selectComponent.nspecsampletypecode\r\n                // if (oldspecsampletypecode !== comboData.item.nspecsampletypecode) {\r\n                //     //selectComponent[\"nneedservice\"] = true;\r\n                // }\r\n                selectedRecord[fieldName] = comboData;\r\n                selectedRecord[\"Sample Name\"] = comboData.label;\r\n                selectedRecord[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode;\r\n                selectedRecord[\"ntestgrouptestcode\"] = [];\r\n\r\n                this.props.componentTest(selectedRecord, true, this.props.Login.specBasedComponent,\r\n                    this.props.Login.Conponent)\r\n            }\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         selectComponent\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            // } else {\r\n            //     const selectComponent = this.state.selectComponent || {};\r\n            //     selectComponent[fieldName] = comboData;\r\n            //     // selectComponent[\"nspecsampletypecode\"] = comboData.item.nspecsampletypecode ?  comboData.item.nspecsampletypecode : -1;\r\n            //     this.setState({ selectComponent })\r\n            // }\r\n        }\r\n\r\n    }\r\n    onInputOnSubSampleChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedRecord['timeonly'] = false;\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n\r\n    onComboSubSampleChange = (comboData, control, customName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            let parentList = []\r\n            let childComboList = []\r\n            let childColumnList = {}\r\n\r\n            let comboName = customName || control.label;\r\n\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData ? comboData.value : -1,\r\n                item: comboData ? comboData.item : \"\",\r\n                label: comboName,\r\n                nameofdefaultcomp: control.name\r\n            }\r\n            if (comboData) {\r\n                selectedRecord[comboName] = comboData;\r\n            } else {\r\n                selectedRecord[comboName] = []\r\n            }\r\n            if (control.child && control.child.length > 0) {\r\n                childComboList = getSameRecordFromTwoArrays(this.state.regSubSamplecomboComponents,\r\n                    control.child, \"label\")\r\n                childColumnList = {};\r\n                childColumnList = childComboList.map(columnList => {\r\n                    const val = comboChild(this.state.regSubSamplecomboComponents,\r\n                        columnList, childColumnList, false);\r\n                    //  childColumnList = val.childColumnList\r\n                    return val.childColumnList;\r\n                })\r\n\r\n                parentList = getSameRecordFromTwoArrays(this.state.regSubSamplewithoutCombocomponent,\r\n                    control.child, \"label\")\r\n\r\n                this.props.getChildValues(inputParem,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.regSubSamplecomboData,\r\n                    childComboList, childColumnList, this.state.regSubSamplewithoutCombocomponent,\r\n                    [...childComboList, ...parentList])\r\n            } else {\r\n                this.setState({ selectedRecord })\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: { selectedRecord }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n            }\r\n        } else {\r\n            const regSubSamplecomboData = this.props.Login.regSubSamplecomboData\r\n            selectedRecord[control.label] = \"\";\r\n            if (control.child && control.child.length > 0) {\r\n                control.child.map(temp => {\r\n                    selectedRecord[temp.label] = \"\"\r\n                    delete regSubSamplecomboData[temp.label]\r\n                    const components = [...this.state.regSubSamplecomboComponents, ...this.state.regSubSamplewithoutCombocomponent]\r\n                    components.map(component => {\r\n                        if (component.label === temp.label) {\r\n                            if (component.child && component.child.length > 0) {\r\n                                component.child.map(temp1 => {\r\n                                    selectedRecord[temp1.label] = \"\"\r\n                                    delete regSubSamplecomboData[temp.label]\r\n                                })\r\n                            }\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { selectedRecord, regSubSamplecomboData }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onNumericInputSubSampleChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveSubSampleClick = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        if (operation === 'create') {\r\n            let objSubSample = this.state.selectedRecord;\r\n            const defaulttimezone = this.props.Login.defaulttimezone;\r\n            const userInfo = this.props.Login.userInfo;\r\n\r\n            let saveSubSample = {};\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.selectedSample, sampleList, 'npreregno')\r\n\r\n            const findSampleAlloSpec = [...new Set(sampleList.map(item => item.nallottedspeccode))];\r\n            if (this.props.Login.specBasedComponent) {\r\n                saveSubSample[\"nspecsampletypecode\"] = objSubSample[\"nspecsampletypecode\"] ? objSubSample[\"nspecsampletypecode\"] : -1\r\n                saveSubSample[\"ncomponentcode\"] = objSubSample[\"ncomponentcode\"] ? objSubSample[\"ncomponentcode\"].value : -1\r\n            } else {\r\n                const findSampleSpec = [...new Set(sampleList.map(item => item.nspecsampletypecode))];\r\n                saveSubSample[\"nspecsampletypecode\"] = findSampleSpec[0] ? findSampleSpec[0] : -1;\r\n            }\r\n\r\n            saveSubSample[\"jsondata\"] = {}\r\n            saveSubSample[\"jsonuidata\"] = {}\r\n            const dateList = []\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                //let componentrowlabel = ''\r\n                                // let componentrowvalue = ''\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n                                            { value: objSubSample[componentrow.label].value, label: objSubSample[componentrow.label].label } : -1\r\n\r\n                                        saveSubSample[\"jsonuidata\"][componentrow.label] = objSubSample[componentrow.label] ? objSubSample[componentrow.label].label : \"\"\r\n\r\n                                        // if (componentrow.mandatory || objSubSample[componentrow.label]) {\r\n                                        //     componentrowlabel = componentrowlabel + '&' + componentrow.label\r\n                                        //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label].label\r\n                                        // }\r\n                                    }\r\n                                    else if (componentrow.inputtype === \"date\") {\r\n                                        if (componentrow.mandatory) {\r\n                                            saveSubSample[\"jsondata\"][componentrow.label] = convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                objSubSample[componentrow.label] : new Date(), userInfo);\r\n\r\n                                            saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n                                        } else {\r\n                                            saveSubSample[\"jsondata\"][componentrow.label] = componentrow.loadcurrentdate ?\r\n                                                convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                    objSubSample[componentrow.label] : new Date(), userInfo) :\r\n                                                objSubSample[componentrow.label] ? convertDateTimetoString(objSubSample[componentrow.label] ?\r\n                                                    objSubSample[componentrow.label] : new Date(), userInfo) : \"\";\r\n\r\n                                            saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n                                        }\r\n                                        if (componentrow.timezone) {\r\n                                            saveSubSample[\"jsondata\"][`tz${componentrow.label}`] = objSubSample[`tz${componentrow.label}`] ?\r\n                                                { value: objSubSample[`tz${componentrow.label}`].value, label: objSubSample[`tz${componentrow.label}`].label } :\r\n                                                defaulttimezone ? defaulttimezone : -1\r\n\r\n                                            saveSubSample[\"jsonuidata\"][`tz${componentrow.label}`] = saveSubSample[\"jsondata\"][`tz${componentrow.label}`]\r\n                                        }\r\n                                        dateList.push(componentrow.label)\r\n                                    }\r\n\r\n                                    else {\r\n                                        saveSubSample[\"jsondata\"][componentrow.label] = objSubSample[componentrow.label] ?\r\n                                            objSubSample[componentrow.label] : \"\"\r\n\r\n                                        saveSubSample[\"jsonuidata\"][componentrow.label] = saveSubSample[\"jsondata\"][componentrow.label]\r\n\r\n                                        // if (objSubSample[componentrow.label]) {\r\n                                        //     componentrowlabel = componentrowlabel + '&' + objSubSample.label\r\n                                        //     componentrowvalue = componentrowvalue + ' ' + objSubSample[componentrow.label]\r\n                                        // }\r\n                                    }\r\n                                    return saveSubSample;\r\n                                })\r\n                                //saveSubSample[\"jsondata\"][componentrowlabel.substring(1)] = componentrowvalue\r\n                            }\r\n                            else {\r\n                                if (component.inputtype === \"combo\") {\r\n                                    saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n                                        { value: objSubSample[component.label].value, label: objSubSample[component.label].label } : -1\r\n\r\n                                    saveSubSample[\"jsonuidata\"][component.label] = objSubSample[component.label] ? objSubSample[component.label].label : \"\"\r\n                                }\r\n                                else if (component.inputtype === \"date\") {\r\n                                    if (component.mandatory) {\r\n                                        saveSubSample[\"jsondata\"][component.label] = convertDateTimetoString(objSubSample[component.label] ?\r\n                                            objSubSample[component.label] : new Date(), userInfo);\r\n\r\n                                        saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                    } else {\r\n                                        saveSubSample[\"jsondata\"][component.label] = component.loadcurrentdate ?\r\n                                            convertDateTimetoString(objSubSample[component.label] ?\r\n                                                objSubSample[component.label] : new Date(), userInfo) :\r\n                                            objSubSample[component.label] ? convertDateTimetoString(objSubSample[component.label] ?\r\n                                                objSubSample[component.label] : new Date(), userInfo) : \"\";\r\n                                        saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                    }\r\n                                    if (component.timezone) {\r\n                                        saveSubSample[\"jsondata\"][`tz${component.label}`] = objSubSample[`tz${component.label}`] ?\r\n                                            { value: objSubSample[`tz${component.label}`].value, label: objSubSample[`tz${component.label}`].label } :\r\n                                            defaulttimezone ? defaulttimezone : -1\r\n\r\n                                        saveSubSample[\"jsonuidata\"][`tz${component.label}`] = saveSubSample[\"jsondata\"][`tz${component.label}`]\r\n                                    }\r\n                                    dateList.push(component.label)\r\n                                }\r\n                                else {\r\n                                    saveSubSample[\"jsondata\"][component.label] = objSubSample[component.label] ?\r\n                                        objSubSample[component.label] : \"\"\r\n\r\n                                    saveSubSample[\"jsonuidata\"][component.label] = saveSubSample[\"jsondata\"][component.label]\r\n                                }\r\n                            }\r\n                            return saveSubSample;\r\n                        }\r\n                        )\r\n                        return saveSubSample;\r\n                    })\r\n                    return saveSubSample;\r\n                })\r\n\r\n            saveSubSample[\"nallottedspeccode\"] = findSampleAlloSpec[0] ? findSampleAlloSpec[0] : -1;\r\n            // Component.unshift(saveSubSample);\r\n\r\n            let selectedTestData = objSubSample[\"ntestgrouptestcode\"];\r\n            const selectedTestArray = [];\r\n            selectedTestData && selectedTestData.map((item) => {\r\n                return selectedTestArray.push(item.item);\r\n            });\r\n\r\n            // const Test = this.props.Login.Test || [];\r\n            // const ArrayTest = Test[saveComponent.slno] ? Test[saveComponent.slno] : [];\r\n            //Test[saveComponent.slno] = [...ArrayTest, ...selectedTestArray]\r\n            const map = {}\r\n            map['RegistrationSample'] = saveSubSample\r\n            map['subsampleDateList'] = dateList\r\n            map['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n            map['testgrouptest'] = selectedTestArray\r\n            map['npreregno'] = sampleList.map(item => item.npreregno).join(\",\")\r\n            map['userinfo'] = userInfo\r\n            map['checkBoxOperation'] = 3\r\n            map['ntype'] = 3\r\n            map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n            map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n            map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n            map[\"checkBoxOperation\"] = 3\r\n            map[\"masterData\"] = this.props.Login.masterData\r\n            map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\"\r\n            map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\"\r\n            map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n\r\n            const inputParam = {\r\n                inputData: map,\r\n                postParamList: this.postParamList,\r\n            }\r\n\r\n            this.props.saveSubSample(inputParam);\r\n        } else {\r\n            this.onUpdateSubSampleRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    mandatoryList = (prereg, printer, file, childtest, regSubSample) => {\r\n        let mandatory = [];\r\n        if (file) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_IMPORTFILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" }\r\n            ];\r\n        }\r\n        else if (printer) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_PRINTER\", \"dataField\": \"sprintername\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n        } else if (regSubSample) {\r\n\r\n            this.props.Login.masterData.SubSampleTemplate &&\r\n                this.props.Login.masterData.SubSampleTemplate.jsondata.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.mandatory === true) {\r\n                                        mandatory.push({ \"mandatory\": true, \"idsName\": componentrow.label, \"dataField\": componentrow.label, \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" })\r\n\r\n                                    }\r\n                                    return mandatory;\r\n                                })\r\n                                : component.mandatory === true ?\r\n                                    mandatory.push({ \"mandatory\": true, \"idsName\": component.label, \"dataField\": component.label, \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\", \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\" }) : \"\"\r\n\r\n                        })\r\n                    })\r\n                })\r\n        }\r\n\r\n        else if (childtest) {\r\n            mandatory = [\r\n                { \"mandatory\": true, \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestgrouptestcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ];\r\n        }\r\n        return mandatory;\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n        this.setState({\r\n            selectedFile, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    onSaveChildTestClick = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        const selectedSubsample = getSameRecordFromTwoArrays(masterData.selectedSubSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        const selectedSample = getSameRecordFromTwoArrays(masterData.selectedSample, masterData.RegistrationGetSample.slice(this.state.skip, (this.state.skip + this.state.take)), \"npreregno\");\r\n        //  selectedSubsample =masterData.selectedSubSample.slice(this.state.skip, (this.state.skip + this.state.take));\r\n        const ntransactionsamplecode = selectedSubsample.map(x => x.ntransactionsamplecode).join(\",\");\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.RealFromDate,\r\n            this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n        const inputData = {\r\n            TestGroupTest: this.state.selectedRecord.ntestgrouptestcode.map(value => value.item),\r\n            RegistrationSample: selectedSubsample.map(x => x.ntransactionsamplecode),\r\n            ntransactionsamplecode: ntransactionsamplecode,\r\n            userinfo: this.props.Login.userInfo,\r\n            nregtypecode: masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            nsampletypecode: masterData.RealSampleTypeValue.nsampletypecode,\r\n            ntype: 3,\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            npreregno: selectedSample &&\r\n                selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            // ntransactionsamplecode: selectedSubsample &&\r\n            // selectedSubsample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n            FromDate: obj.fromDate,\r\n            ToDate: obj.toDate,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n        }\r\n\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"registration\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Test\",\r\n            responseKeyList: [\r\n                { \"responseKey\": \"selectedSample\", \"masterDataKey\": \"RegistrationGetSample\", \"primaryKey\": \"npreregno\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedSubSample\", \"masterDataKey\": \"RegistrationGetSubSample\", \"primaryKey\": \"ntransactionsamplecode\", \"dataAction\": \"update\" },\r\n                { \"responseKey\": \"selectedTest\", \"masterDataKey\": \"RegistrationGetTest\", \"primaryKey\": \"ntransactiontestcode\", \"dataAction\": \"add\" }],\r\n            saveType, formRef,\r\n            postParamList: this.postParamList,\r\n\r\n        }\r\n        if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.createRegistrationTest(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    getRegistrationComboService = (ScreenName, operation,\r\n        primaryKeyField, masterData, userInfo, editId) => {\r\n        const ndesigntemplatemappingcodefilter = this.props.Login.masterData.DesignTemplateMappingValue &&\r\n            this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode\r\n        if (ndesigntemplatemappingcodefilter === this.props.Login.masterData.ndesigntemplatemappingcode) {\r\n            let data = [];\r\n            const withoutCombocomponent = []\r\n            const Layout = this.props.Login.masterData.registrationTemplate\r\n                && this.props.Login.masterData.registrationTemplate.jsondata\r\n            if (Layout !== undefined) {\r\n                Layout.map(row => {\r\n                    return row.children.map(column => {\r\n                        return column.children.map(component => {\r\n                            return component.hasOwnProperty(\"children\") ?\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data.push(componentrow)\r\n                                    } else {\r\n                                        withoutCombocomponent.push(componentrow)\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                : component.inputtype === \"combo\" ?\r\n                                    data.push(component) : withoutCombocomponent.push(component)\r\n                        })\r\n                    })\r\n\r\n                })\r\n                const comboComponents = data\r\n                let childColumnList = {};\r\n                data.map(columnList => {\r\n                    const val = comboChild(data, columnList, childColumnList, true);\r\n                    data = val.data;\r\n                    childColumnList = val.childColumnList\r\n                    return null;\r\n                })\r\n                const mapOfFilterRegData = {\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.RealSampleTypeValue.nsampletypecode)\r\n                }\r\n                this.props.getPreviewTemplate(masterData, userInfo, editId,\r\n                    data, this.state.selectedRecord, childColumnList,\r\n                    comboComponents, withoutCombocomponent, true, false,\r\n                    mapOfFilterRegData, false, \"create\", this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename)\r\n            } else {\r\n                toast.info(\"Configure the preregister template for this registrationtype\")\r\n            }\r\n        } else {\r\n            toast.info(\"select the approved design template\")\r\n        }\r\n    }\r\n    comboChild = (data, columnList, childColumnList, slice) => {\r\n        let retunObj = {}\r\n        // if (data.findIndex(x => x.label === columnList.label) !== -1) {\r\n        if (!childColumnList.hasOwnProperty(columnList.label)) {\r\n            if (childColumnList[columnList.label] === undefined) {\r\n                if (columnList.hasOwnProperty(\"child\")) {\r\n                    let childList = []\r\n                    columnList.child.map(childData => {\r\n                        const index = data.findIndex(x => x.label === childData.label)\r\n                        if (index !== -1) {\r\n                            childList.push(data[index])\r\n                            if (slice) {\r\n                                data = [...data.slice(0, index), ...data.slice(index + 1)]\r\n                            }\r\n                        }\r\n                        return data;\r\n                    })\r\n                    childColumnList[columnList.label] = childList;\r\n                    if (childList.length > 0) {\r\n                        childList.map(y => {\r\n                            if (y.hasOwnProperty(\"child\")) {\r\n                                const val = comboChild(data, y, childColumnList, slice)\r\n                                retunObj[\"data\"] = val.data;\r\n                                retunObj[\"childColumnList\"] = val.childColumnList;\r\n                            } else {\r\n                                retunObj[\"data\"] = data;\r\n                                retunObj[\"childColumnList\"] = childColumnList;\r\n                            }\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        retunObj[\"data\"] = data;\r\n                        retunObj[\"childColumnList\"] = childColumnList;\r\n                    }\r\n                } else {\r\n                    retunObj[\"data\"] = data;\r\n                    retunObj[\"childColumnList\"] = childColumnList;\r\n                }\r\n            } else {\r\n                retunObj[\"data\"] = data;\r\n                retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n            }\r\n        } else {\r\n            retunObj[\"data\"] = data;\r\n            retunObj[\"childColumnList\"] = childColumnList;\r\n\r\n        }\r\n        return retunObj;\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    };\r\n\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take\r\n        });\r\n    };\r\n\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subsampleskip: e.skip,\r\n            subsampletake: e.take\r\n        });\r\n    };\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterChange = (event, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab,\r\n                subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    ontestTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        if (activeTestTab !== this.props.Login.activeTestTab) {\r\n            if (this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedTest: this.props.Login.masterData.selectedTest,\r\n                    ntransactiontestcode: this.props.Login.masterData.selectedTest ?\r\n                        String(this.props.Login.masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                    npreregno: this.props.Login.masterData.selectedSample ?\r\n                        this.props.Login.masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    testAttachmentDataState: this.state.testAttachmentDataState,\r\n                }\r\n                this.props.getTestChildTabDetailRegistration(inputData, true)\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }))\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropComponentFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedFile = this.state.selectedFile || {};\r\n        selectedFile[fieldName] = onDropAttachFileList(selectedFile[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedFile, actionType: \"new\" });\r\n    }\r\n\r\n    handleFilterDateChange = (dateName, dateValue) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n    }\r\n\r\n\r\n    onUpdateRegistrationConfirm = () => {\r\n        this.showAlert();\r\n        this.onUpdateRegistration(this.props.Login.regEditParam.saveType,\r\n            this.props.Login.regEditParam.formRef,\r\n            this.props.Login.regEditParam.operation, 2)\r\n    }\r\n\r\n    confirmAlert = () => {\r\n        if (this.state.showConfirmAlert) {\r\n            if (this.props.Login.regDateEditConfirmMessage) {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.regDateEditConfirmMessage,\r\n                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                    () => this.onUpdateRegistrationConfirm(),\r\n                    undefined,\r\n                    () => this.showAlert());\r\n            }\r\n            else {\r\n                this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n                    this.props.Login.booleanFlag, \"ok\", \"Cancel\",\r\n                    () => this.insertRegistration(false), undefined, () => this.showAlert());\r\n            }\r\n        }\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    showSampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n    showSample() {\r\n        let fixefScrollHeight = this.state.fixefScrollHeight\r\n        let disableSplit  = false;\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight+20 !== this.state.fixefScrollHeight) {\r\n\r\n           \r\n               let fixefScrollHeight = this.myRef.current.clientHeight+20;\r\n               let disableSplit  = true;\r\n        }\r\n        this.setState({\r\n            showSample: true, showSubSample: false,\r\n            showTest: false,\r\n            fixefScrollHeight:fixefScrollHeight,\r\n            disableSplit:disableSplit\r\n        })\r\n    }\r\n\r\n    showTest() {\r\n        let fixefScrollHeight = this.state.fixefScrollHeight\r\n        let disableSplit  = false;\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight+20 !== this.state.fixefScrollHeight) {\r\n\r\n           \r\n               let fixefScrollHeight = this.myRef.current.clientHeight+20;\r\n               let disableSplit  = true;\r\n        }\r\n\r\n        this.setState({\r\n            showSample: false, showSubSample: false,\r\n            showTest: true,\r\n            fixefScrollHeight:fixefScrollHeight,\r\n            disableSplit:disableSplit\r\n        })\r\n\r\n        // setTimeout(()=>{\r\n        //     this.setState({\r\n        //         disableSplit :false\r\n        //     })  \r\n        // },100)\r\n    }\r\n\r\n    showSubSample() {\r\n        this.setState({\r\n            showSample: false, showTest: false,\r\n            showSubSample: !this.state.showSubSample\r\n        })\r\n    }\r\n\r\n    showTestDetails() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showSample: !this.state.showSample, showTest: !this.state.showTest }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    AddFile = () => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let RealRegTypeValue = this.props.Login.masterData.RealRegTypeValue;\r\n        let booleanmanuf = true;\r\n        if (RealRegTypeValue === RegistrationType.PLASMA_POOL) {\r\n            booleanmanuf = selectedRecord[\"nmanufcode\"] > 0 && selectedRecord[\"nmanufcode\"] !== undefined ? true : false\r\n        }\r\n        if (booleanmanuf) {\r\n            if (this.state.selectedRecord.nallottedspeccode !== undefined) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadFile: true,\r\n                        ChildscreenName: \"File\", childoperation: \"Import\",\r\n                        parentPopUpSize: \"lg\", selectedFile: undefined\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTMANUFACTURER\" }));\r\n        }\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectComponent = this.state.selectComponent || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectComponent[name] = '';\r\n            this.setState({ selectComponent });\r\n        } else {\r\n            selectComponent[name] = value;\r\n            this.setState({ selectComponent });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onSampleTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nsampletypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getSampleTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    ConfirmComponent = (props) => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confirmation!\", \"Do You Want to Override the Existing Components ?\",\r\n            \"ok\", \"cancel\", () => this.getComponentfromJava(props));\r\n    }\r\n\r\n    onRegTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map[\"nregtypecode\"] = parseInt(event.value);\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n    acceptRegistration = (registerId, skip, take) => {\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample\r\n                && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        let acceptList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        if (acceptList && acceptList.length > 0) {\r\n            if (acceptList.every(this.checkPreregisterAndQuarentine)) {\r\n                if (this.props.Login.masterData.selectedTest.length > 0) {\r\n                    if (checkTestPresent(this.props.Login.masterData.RegistrationGetTest, acceptList)) {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\r\n                        Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 3;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                        Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_ACCEPTREGISTRATION\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                            () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    } else {\r\n                        let Map = {};\r\n                        Map[\"fromdate\"] = \"\";\r\n                        Map[\"todate\"] = \"\";\r\n                        Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                        Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                        Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                        Map[\"nfilterstatus\"] = -1;\r\n                        Map[\"npreregno\"] = acceptList &&\r\n                            acceptList.map(sample => sample.npreregno).join(\",\");\r\n                        // Map[\"npreregno\"] = this.props.Login.masterData.selectedSample &&\r\n                        //     this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\");\r\n                        Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                        Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                        Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                        Map[\"nflag\"] = 2;\r\n                        Map[\"ntype\"] = 1;\r\n                        Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                        Map[\"activeSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                        Map[\"activeSubSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                        Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                        Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                        Map[\"checkBoxOperation\"] = 3\r\n                        Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                        let inputParam = {\r\n                            inputData: Map,\r\n                            postParamList: this.postParamList,\r\n                            action: 'accept'\r\n                        }\r\n                        this.confirmMessage.confirm(\"Confirmation\", \"Confirmation!\", \"Samples With atleast One Preregister Test Will Only Accept.Do You Want Accept?\",\r\n                            \"OK\", \"Cancel\", () => this.acceptRegistrationConfirm(inputParam, registerId));\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDTESTTOREGISTERSAMPLES\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGQUARANTINESAMPLES\" }));\r\n        }\r\n    }\r\n\r\n    acceptRegistrationConfirm = (inputParam, registerId) => {\r\n        if (showEsign(this.props.Login.userRoleControlRights,\r\n            this.props.Login.userInfo.nformcode, registerId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    parentPopUpSize: 'lg',\r\n                    screenName: this.props.Login.screenName,\r\n                    operation: 'accept'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.acceptRegistration(inputParam, this.props.Login.masterData)\r\n        }\r\n\r\n    }\r\n\r\n    selectQuarantine = (quarantineId, skip, take) => {\r\n        let sampleList = this.props.Login.masterData.searchedSample || (this.props.Login.masterData.RegistrationGetSample ? [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take) : []);\r\n        let quarentineList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (quarentineList && quarentineList.length > 0) {\r\n            if (quarentineList.every(this.checkPreregisterRecordQuarantine)) {\r\n\r\n                // let ntransactionstatus = this.props.Login.masterData.selectedSample &&\r\n                //     this.props.Login.masterData.selectedSample.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //if (ntransactionstatus === transactionStatus.PREREGISTER) {\r\n                let Map = {};\r\n                Map[\"fromdate\"] = \"\";\r\n                Map[\"todate\"] = \"\";\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = quarentineList && quarentineList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 1;\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"stransactiontestcode\"] = this.props.Login.masterData.selectedTest.map(sample => sample.ntransactiontestcode).join(\",\");\r\n                Map[\"ntransactionstatus\"] = quarentineList &&\r\n                    quarentineList.map(transactionStatus => transactionStatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ninsertpreregno\"] = quarantineSample.quarantineSample.npreregno;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'quarantine'\r\n                }\r\n                //console.log(\"inputParam, quarantine:\", inputParam);\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, quarantineId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'quarantine'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.preregRecordToQuarantine(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLES\" }))\r\n        }\r\n\r\n    }\r\n\r\n    checkPreregisterAndQuarentine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER || sample.ntransactionstatus === transactionStatus.QUARANTINE)\r\n    }\r\n\r\n    checkPreregisterRecordQuarantine(sample) {\r\n        return (sample.ntransactionstatus === transactionStatus.PREREGISTER)\r\n    }\r\n\r\n    onRegSubTypeChange = (event, fieldName, labelname) => {\r\n        if (event !== null) {\r\n            let Map = {};\r\n            Map['nregtypecode'] = this.props.Login.masterData.RegTypeValue.nregtypecode;\r\n            Map[\"nregsubtypecode\"] = parseInt(event.value);\r\n            Map[\"nneedtemplatebasedflow\"] = event.item.nneedtemplatebasedflow;\r\n            Map['userinfo'] = this.props.Login.userInfo;\r\n            this.props.getRegSubTypeChange(Map, this.props.Login.masterData, event, labelname);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        // if (comboData !== null) {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        // }\r\n    }\r\n\r\n    PrinterChange = (comboData, fieldName) => {\r\n        const selectedPrinterData = this.state.selectedPrinterData || {};\r\n        selectedPrinterData[fieldName] = comboData;\r\n        this.setState({ selectedPrinterData });\r\n    }\r\n\r\n\r\n\r\n    closeChildModal = () => {\r\n        let loadRegSubSample = this.props.Login.loadRegSubSample;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let showSaveContinue = this.props.Login.showSaveContinue;\r\n        let screenName = this.props.Login.screenName;\r\n        let loadChildTest = this.props.Login.loadChildTest;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.state.selectedRecord;\r\n        if (this.props.Login.loadFile) {\r\n            loadFile = false;\r\n            screenName = this.props.Login.PopUpLabel\r\n        } else if (this.props.Login.loadChildTest) {\r\n            loadChildTest = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        else if (this.props.Login.loadRegSubSample) {\r\n            loadRegSubSample = false;\r\n            openModal = false;\r\n            selectedRecord = {}\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                loadRegSubSample, screenName, showSaveContinue,\r\n                loadFile, loadChildTest,\r\n                openModal,\r\n                parentPopUpSize: \"xl\", selectedRecord\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let loadPreregister = this.props.Login.loadPreregister;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let parentPopUpSize = this.props.Login.pare\r\n        let screenName = this.props.Login.screenName;\r\n        let loadPrinter = this.props.Login.loadPrinter;\r\n        let openPortal = this.props.Login.openPortal;\r\n        let Component = this.props.Login.Component;\r\n        let subSampleDataGridList = this.props.Login.subSampleDataGridList;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"accept\" || this.props.Login.operation === \"cancel\" || this.props.Login.operation === \"quarantine\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal = false\r\n                loadPreregister = false;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, openModal, openChildModal, loadPreregister }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                if (loadPreregister) {\r\n                    parentPopUpSize = 'xl'\r\n                }\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loadEsign, parentPopUpSize }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            loadPrinter = false;\r\n            loadPreregister = false;\r\n            selectedRecord = {};\r\n            openPortal = false;\r\n            subSampleDataGridList = []\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModal, loadPreregister, selectedRecord,\r\n                    screenName, insertSourcePreregno: undefined,\r\n                    loadPrinter, openPortal,\r\n                    Component, subSampleDataGridList\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let operation = this.props.Login.operation;\r\n        if (operation === \"update\") {\r\n            this.onUpdateRegistration(saveType, formRef, operation);\r\n        }\r\n    }\r\n\r\n\r\n    onSavePrinterClick = () => {\r\n        let insertlist = [];\r\n        //this.state.selectedPrinterData.sprintername && this.state.selectedPrinterData.sprintername.map(source=>insertlist.push({npreregno:this.props.Login.insertSourcePreregno,sprintername:source.value}))\r\n        const inputParam = {\r\n            classUrl: 'barcode',\r\n            methodUrl: 'Barcode',\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                npreregno: this.props.Login.insertPrinterPreregno,\r\n                sprintername: this.state.selectedPrinterData.sprintername ? this.state.selectedPrinterData.sprintername.value : '',\r\n                insertlist,\r\n                npreregno1: this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\"),\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.props.Login.ncontrolcode\r\n            },\r\n            operation: 'printer',\r\n            // dataState:this.state.sourceDataState,\r\n            // activeSampleTab:\"IDS_SOURCE\",\r\n            action: 'printer'\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: 'printer'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedFile = this.state.selectedFile;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedFile.sfilename;\r\n        const formData = new FormData();\r\n        // if(nattachmenttypecode === attachmentType.FTP) {\r\n        if (acceptedFiles && acceptedFiles.length > 0) {\r\n            acceptedFiles.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFiles.length);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }));\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nstudyplan\", JSON.stringify(selectedRecord.nallottedspeccode.value));\r\n        formData.append(\"testrequired\", JSON.stringify(selectedRecord.ntransactionstatus === 3 ? true : false));\r\n        formData.append(\"ntemplatemanipulationcode\", JSON.stringify(selectedRecord.ntemplatemanipulationcode));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.RealRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode));\r\n        this.props.ImportFile(formData, this.confirmMessage, this.props.Login);\r\n    }\r\n\r\n\r\n    sampleInfoDataStateChange = (event) => {\r\n        this.setState({\r\n            sampleGridDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_SOURCE\":\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sourceDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    subSampledataStateChange = (event) => {\r\n        switch (this.props.Login.activeSubSampleTab) {\r\n            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                this.setState({\r\n                    subSampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                this.setState({\r\n                    subSampleAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    testdataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    testStateChange = (event) => {\r\n        this.setState({\r\n            testDataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n\r\n    sampleTabDetail = () => {\r\n        let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n\r\n\r\n        let sampleList = this.props.Login.masterData.RegistrationGetSample || [];\r\n        let { skip, take } = this.state\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        tabMap.set(\"IDS_ATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSample}\r\n            masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSampleAttachment\"}\r\n            editName={\"EditSampleAttachment\"}\r\n            deleteName={\"DeleteSampleAttachment\"}\r\n            viewName={\"ViewSampleAttachment\"}\r\n            methodUrl={\"SampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleAttachment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLE\"\r\n            displayName=\"sarno\"\r\n        />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLES\"\r\n            displayName=\"sarno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    subsampleTabDetail = () => {\r\n        let ntransactionsamplecode = this.props.Login.masterData.selectedSubSample ?\r\n            this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RegistrationGetSubSample || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.selectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLE\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedSubSampleList}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSubSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SUBSAMPLES\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    testTabDetail = () => {\r\n\r\n        const testTabMap = new Map();\r\n        let testList = this.props.Login.masterData.RegistrationGetTest || [];\r\n        let { testskip, testtake } = this.state\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n        // const cancelId = this.state.controlMap.has(\"CancelTest\") && this.state.controlMap.get(\"CancelTest\").ncontrolcode;\r\n        let ntransactiontestcode = this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        testTabMap.set(\"IDS_PARAMETERRESULTS\", <RegistrationResultTab\r\n            userInfo={this.props.Login.userInfo}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            screenName=\"IDS_PARAMETERRESULTS\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n        />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"selectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            dataState={this.state.testAttachmentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: this.props.Login.masterData.selectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"selectedTest\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus=\"IDS_SELECTTESTTOADDCOMMENTS\"\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RegistrationGetSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        return testTabMap;\r\n    }\r\n\r\n    getCommentsCombo = (event) => {\r\n\r\n        if (this.props.Login.selectedTest && this.props.Login.selectedTest.length > 0) {\r\n            this.props.getCommentsCombo(...event);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOADDCOMMENTS\" }))\r\n        }\r\n    }\r\n\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_PARAMETERRESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    testDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RegistrationGetSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSubSample, \"ntransactionsamplecode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let testList = [];\r\n            if (this.props.Login.masterData.searchedTest !== undefined) {\r\n                testList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n            } else {\r\n                testList = this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, acceptList);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        let acceptList = []\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedTest !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample.slice(this.state.skip, this.state.skip + this.state.take);\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            acceptList.push(selectedRecord);\r\n        }\r\n        else {\r\n            acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.selectedSample, \"npreregno\");\r\n        }\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, acceptList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactiontestcode: this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, this.props.Login.masterData.selectedTest);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample ? this.props.Login.masterData.selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.selectedSubSample);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode] || \"-\", \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\" };\r\n        });\r\n        return temparray;\r\n    }\r\n\r\n\r\n    cancelSubSampleRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedSubSample ||\r\n            (this.props.Login.masterData.RegistrationGetSubSample ?\r\n                [...this.props.Login.masterData.RegistrationGetSubSample].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['npreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                Map['ntransactiontestcode'] = this.props.Login.masterData.selectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                // Map[\"ntransactionsamplecode\"] = acceptList.map(x => x.ntransactionsamplecode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                // Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSubSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n    cancelRecord = (controlcode, skip, take) => {\r\n        let testList = this.props.Login.masterData.searchedTest ||\r\n            (this.props.Login.masterData.RegistrationGetTest ?\r\n                [...this.props.Login.masterData.RegistrationGetTest].splice(skip, skip + take) : []);\r\n        let acceptList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.selectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptList && acceptList.length > 0) {\r\n            // console.log(\"Success:\", dataitem);\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, acceptList)) {\r\n                let Map = {};\r\n                Map['ninsertpreregno'] = acceptList.map(x => x.npreregno).join(\",\");\r\n                // Map['ntransactionstatus'] = dataitem.ntransactionstatus;\r\n                Map[\"ntransactiontestcode\"] = acceptList.map(x => x.ntransactiontestcode).join(\",\");\r\n                //  Map[\"ninserttransactionsamplecode\"] = dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"withoutgetparameter\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = this.props.Login.masterData.FilterStatusValue.ntransactionstatus;\r\n                Map[\"npreregno\"] = acceptList &&\r\n                    acceptList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = acceptList &&\r\n                    acceptList.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"registrationsample\"] = this.props.Login.masterData.selectedSample;\r\n                Map[\"registrationSubSample\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"registrationTest\"] = this.props.Login.masterData.selectedTest;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelTest'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelTestAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Test\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTTEST\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCANCELREJECT\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    addSubSample = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n\r\n        let addSubSampleList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (addSubSampleList && addSubSampleList.length > 0) {\r\n            const findTransactionStatus = [...new Set(addSubSampleList.map(item => item.ntransactionstatus))];\r\n\r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus[0] === transactionStatus.PREREGISTER) {\r\n                    //   const findApprovalVersion = [...new Set(addSubSampleList.map(item => item.napprovalversioncode))];\r\n                    //   if (findApprovalVersion.length === 1) {\r\n                    const findSampleSpec = [...new Set(addSubSampleList.map(item => item.nallottedspeccode))];\r\n                    const findComponentReqSpec = [...new Set(addSubSampleList.map(item => item.ncomponentrequired))];\r\n                    const findSampleSpectemplate = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                    //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                    if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                    {\r\n                        let data = []\r\n                        const regSubSamplewithoutCombocomponent = []\r\n                        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n                            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n                        if (Layout !== undefined) {\r\n                            Layout.map(row => {\r\n                                return row.children.map(column => {\r\n                                    return column.children.map(component => {\r\n                                        return component.hasOwnProperty(\"children\") ?\r\n                                            component.children.map(componentrow => {\r\n                                                if (componentrow.inputtype === \"combo\") {\r\n                                                    data.push(componentrow)\r\n                                                } else {\r\n                                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                                }\r\n                                                return null;\r\n                                            })\r\n                                            : component.inputtype === \"combo\" ? data.push(component) :\r\n                                                regSubSamplewithoutCombocomponent.push(component)\r\n                                    })\r\n                                })\r\n\r\n                            })\r\n                            const regSubSamplecomboComponents = data\r\n                            let regchildColumnList = {};\r\n                            data.map(columnList => {\r\n                                const val = comboChild(data, columnList, regchildColumnList, true);\r\n                                data = val.data;\r\n                                regchildColumnList = val.childColumnList\r\n                                return null;\r\n                            })\r\n                            //const Map={}\r\n                            // const findSamplentemplatemanipulationcode = [...new Set(addSubSampleList.map(item => item.ntemplatemanipulationcode))];\r\n                            // Map[\"ntemplatemanipulationcode\"] = findSamplentemplatemanipulationcode[0];\r\n                            Map[\"nallottedspeccode\"] = findSampleSpec[0];\r\n                            Map[\"ntemplatemanipulationcode\"] = findSampleSpectemplate[0];\r\n                            Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                            Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                            Map[\"npreregno\"] = addSubSampleList &&\r\n                                addSubSampleList.map(sample => sample.npreregno).join(\",\");\r\n                            Map[\"registrationsample\"] = addSubSampleList;\r\n\r\n                            this.props.addsubSampleRegistration(this.props.Login.masterData,\r\n                                this.props.Login.userInfo, data, this.state.selectedRecord,\r\n                                regchildColumnList, regSubSamplecomboComponents,\r\n                                regSubSamplewithoutCombocomponent,\r\n                                Map, controlcode, findComponentReqSpec[0] === 3 ? true : false)\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASECONFIGURETHESUBSAMPLETEMPLATE\" }));\r\n                        }\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                    }\r\n                    // } else {\r\n                    //    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                    // }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSAMPLETOADDSUBSAMPLE\" }));\r\n                }\r\n            }\r\n\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOSUBSAMPLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        if (this.props.Login.columnList !== previousProps.Login.columnList) {\r\n\r\n            this.setState({\r\n                columnList: this.props.Login.columnList,\r\n                childColumnList: this.props.Login.childColumnList,\r\n                withoutCombocomponent: this.props.Login.withoutCombocomponent,\r\n                comboComponents: this.props.Login.comboComponents\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.regparentSubSampleColumnList !== previousProps.Login.regparentSubSampleColumnList) {\r\n            this.setState({\r\n                regparentSubSampleColumnList: this.props.Login.regparentSubSampleColumnList,\r\n                regSubSamplecomboComponents: this.props.Login.regSubSamplecomboComponents,\r\n                regSubSamplewithoutCombocomponent: this.props.Login.regSubSamplewithoutCombocomponent\r\n            });\r\n\r\n        }\r\n\r\n\r\n        if (this.props.Login.showSaveContinue !== previousProps.Login.showSaveContinue) {\r\n            this.setState({ showSaveContinue: this.props.Login.showSaveContinue });\r\n\r\n        }\r\n        if (this.props.Login !== previousProps.Login) {\r\n            this.PrevoiusLoginData = previousProps\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        else if (this.props.Login.selectedPrinterData !== previousProps.Login.selectedPrinterData) {\r\n            this.setState({ selectedPrinterData: this.props.Login.selectedPrinterData });\r\n        }\r\n        else if (this.props.Login.loadFile !== previousProps.Login.loadFile && (this.props.Login.loadFile === false)) {\r\n            this.setState({ selectedFile: undefined })\r\n        }\r\n        else if (this.props.Login.selectedFilter !== previousProps.Login.selectedFilter) {\r\n            this.setState({ selectedFilter: this.props.Login.selectedFilter });\r\n        }\r\n        if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n            this.setState({ popUptestDataState: this.props.Login.popUptestDataState });\r\n        }\r\n\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            const cancelId = controlMap.has(\"CancelTest\") ? controlMap.get(\"CancelTest\").ncontrolcode : -1;\r\n            const preRegisterId = controlMap.has(\"AddPreregister\") ? controlMap.get(\"AddPreregister\").ncontrolcode : -1;\r\n            const registerId = controlMap.has(\"RegisterAccept\") ? controlMap.get(\"RegisterAccept\").ncontrolcode : -1;\r\n            const editSampleId = controlMap.has(\"EditSample\") ? controlMap.get(\"EditSample\").ncontrolcode : -1;\r\n            const quarantineId = controlMap.has(\"RegisterQuarantine\") ? controlMap.get(\"RegisterQuarantine\").ncontrolcode : -1;\r\n            const addTestId = controlMap.has(\"AddNewTest\") ? controlMap.get(\"AddNewTest\").ncontrolcode : -1;\r\n            const printBarcodeId = controlMap.has(\"PrintBarcode\") ? controlMap.get(\"PrintBarcode\").ncontrolcode : -1;\r\n            const cancelSampleId = controlMap.has(\"CancelReject\") ? controlMap.get(\"CancelReject\").ncontrolcode : -1;\r\n            const addSubSampleId = controlMap.has(\"AddSubSample\") ? controlMap.get(\"AddSubSample\").ncontrolcode : -1;\r\n            const editSubSampleId = controlMap.has(\"EditSubSample\") ? controlMap.get(\"EditSubSample\").ncontrolcode : -1;\r\n            const cancelSubSampleId = controlMap.has(\"CancelSubSample\") ? controlMap.get(\"CancelSubSample\").ncontrolcode : -1;\r\n\r\n            this.setState({\r\n                userRoleControlRights, controlMap, cancelId,\r\n                preRegisterId, registerId, editSampleId, quarantineId, addTestId, printBarcodeId,\r\n                cancelSampleId, addSubSampleId, editSubSampleId, cancelSubSampleId\r\n            });\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n\r\n            let { skip, take, testskip, testtake, subsampleskip, subsampletake, testCommentDataState,\r\n                resultDataState, sampleGridDataState, popUptestDataState, DynamicSampleColumns, DynamicSubSampleColumns,\r\n                DynamicTestColumns, DynamicGridItem, DynamicGridMoreField, SingleItem, testMoreField, testListColumns,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField, SubSampleSingleItem, sampleSearchField, subsampleSearchField,\r\n                testSearchField, testAttachmentDataState, sampleCommentDataState, sampledateconstraints, subsampledateconstraints } = this.state\r\n            if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n                DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n                DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n                DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n                DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n\r\n                SubSampleDynamicGridItem = dynamicColumn.subsamplegriditem ? dynamicColumn.subsamplegriditem : [];\r\n                SubSampleDynamicGridMoreField = dynamicColumn.subsamplegridmoreitem ? dynamicColumn.subsamplegridmoreitem : [];\r\n                SubSampleSingleItem = dynamicColumn.subsampledisplayfields ? dynamicColumn.subsampledisplayfields : [];\r\n                //console.log(\"Subsample\",SubSampleSingleItem)\r\n                testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n                testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\r\n\r\n                sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\r\n                subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\r\n                testSearchField = dynamicColumn.testsearchfields ? dynamicColumn.testsearchfields : [];\r\n\r\n                sampledateconstraints = dynamicColumn.sampledateconstraints || [];\r\n                subsampledateconstraints = dynamicColumn.subsampledateconstraints || [];\r\n\r\n                // specBasedComponent = true;\r\n            }\r\n            let showSample = this.props.Login.showSample === this.state.showTest || this.state.showSample\r\n            let showTest = showSample ? false : true\r\n            let stateSampleType = this.state.stateSampleType\r\n            let stateRegistrationType = this.state.stateRegistrationType\r\n            let stateRegistrationSubType = this.state.stateRegistrationSubType\r\n            let stateFilterStatus = this.state.stateFilterStatus\r\n            let stateDynamicDesign = this.state.stateDynamicDesign\r\n            if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n\r\n                const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\",\r\n                    \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n                stateSampleType = sampleTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationType !== previousProps.Login.masterData.RegistrationType) {\r\n\r\n                const registrationTypeMap = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\",\r\n                    \"sregtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationType = registrationTypeMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n                const registrationSubTypeMap = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\",\r\n                    \"sregsubtypename\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateRegistrationSubType = registrationSubTypeMap.get(\"OptionList\")\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.FilterStatus !== previousProps.Login.masterData.FilterStatus) {\r\n\r\n\r\n                const filterStatusMap = constructOptionList(this.props.Login.masterData.FilterStatus || [], \"ntransactionstatus\",\r\n                    \"stransdisplaystatus\", \"nsorter\", \"ascending\", false);\r\n\r\n                stateFilterStatus = filterStatusMap.get(\"OptionList\")\r\n            }\r\n\r\n            if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n\r\n                const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                    \"sregtemplatename\", undefined, undefined, false);\r\n\r\n                stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n            }\r\n\r\n\r\n            // const stateSampleType = sampleTypeMap.get(\"OptionList\");\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            subsampleskip = this.props.Login.subsampleskip === undefined ? subsampleskip : this.props.Login.subsampleskip\r\n            subsampletake = this.props.Login.subsampletake || subsampletake\r\n\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.testAttachmentDataState && this.props.Login.testAttachmentDataState !== previousProps.Login.testAttachmentDataState) {\r\n                testAttachmentDataState = this.props.Login.testAttachmentDataState;\r\n            }\r\n            if (this.props.Login.sampleGridDataState && this.props.Login.sampleGridDataState !== previousProps.Login.sampleGridDataState) {\r\n                sampleGridDataState = this.props.Login.sampleGridDataState;\r\n            }\r\n            if (this.props.Login.popUptestDataState && this.props.Login.popUptestDataState !== previousProps.Login.popUptestDataState) {\r\n                popUptestDataState = this.props.Login.popUptestDataState;\r\n            }\r\n\r\n            const testGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample &&\r\n                    this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //searchTestRef: this.searchTestRef,\r\n                // testskip: testskip,\r\n                //subsampleskip: subsampleskip,\r\n                // resultDataState: resultDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            }\r\n            const testChildGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                npreregno: this.props.Login.masterData.selectedSample && this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                ntransactionsamplecode: this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            }\r\n\r\n            const subSampleGetParam = {\r\n                masterData: this.props.Login.masterData,\r\n                ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                // testskip: testskip,\r\n                // subsampleskip: subsampleskip,\r\n                // searchTestRef: this.searchTestRef,\r\n                //resultDataState: resultDataState,\r\n                // testCommentDataState: testCommentDataState,\r\n                //sampleGridDataState: sampleGridDataState,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample\r\n            }\r\n\r\n\r\n            const filterSampleParam = {\r\n                inputListName: \"RegistrationGetSample\",\r\n                selectedObject: \"selectedSample\",\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"registration/getRegistrationSubSample\",\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: sampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetSubSample\", \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\", \"selectedSample\", \"selectedSubSample\",\r\n                    \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterSubSampleParam = {\r\n                inputListName: \"RegistrationGetSubSample\",\r\n                selectedObject: \"selectedSubSample\",\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"registration/getRegistrationTest\",\r\n                //childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n                fecthInputObject: {\r\n                    //nflag: 2,\r\n                    // ntype: 2,\r\n                    masterData: this.props.Login.masterData,\r\n                    //  ntransactionstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n                    npreregno: this.props.Login.masterData.selectedSample &&\r\n                        this.props.Login.masterData.selectedSample.map(x => x.npreregno).join(\",\")\r\n\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: subsampleSearchField,\r\n                changeList: [\r\n                    \"RegistrationGetTest\", \"RegistrationTestAttachment\",\r\n                    \"RegistrationTestComment\", \"RegistrationAttachment\",\r\n                    \"selectedSubSample\", \"selectedTest\", \"RegistrationParameter\"\r\n                ]\r\n            };\r\n\r\n            const filterTestParam = {\r\n                inputListName: \"RegistrationGetTest\",\r\n                selectedObject: \"selectedTest\",\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                fecthInputObject: {\r\n                    ntransactiontestcode: this.props.Login.masterData && this.props.Login.masterData.selectedTest && this.props.Login.masterData.selectedTest ? this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                        && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                    nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                    nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                        && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                    activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                    activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n                },\r\n                masterData: this.props.Login.masterData,\r\n                searchFieldList: testSearchField,\r\n                changeList: [\"RegistrationTestComment\", \"RegistrationParameter\"]\r\n\r\n            }\r\n\r\n            // let postParamList = [\r\n            //     {\r\n            //         filteredListName: \"searchedSample\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchSampleRef,\r\n            //         primaryKeyField: \"npreregno\",\r\n            //         fetchUrl: \"registration/getRegistrationSubSample\",\r\n            //         fecthInputObject: subSampleGetParam,\r\n            //        // childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedSubSample\" }],\r\n            //         selectedObject: \"selectedSample\",\r\n            //         inputListName: \"AP_SAMPLE\",\r\n            //         updatedListname: \"selectedSample\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            //     , {\r\n            //         filteredListName: \"searchedTest\",\r\n            //         updatedListname: \"selectedTest\",\r\n            //         clearFilter: \"no\",\r\n            //         searchRef: this.searchTestRef,\r\n            //         primaryKeyField: \"ntransactiontestcode\",\r\n            //         fetchUrl: \"approval/getApprovalTest\",\r\n            //         fecthInputObject: testGetParam,\r\n            //         selectedObject: \"selectedTest\",\r\n            //         inputListName: \"RegistrationGetTest\",\r\n            //         unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n            //             \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n            //             \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            //     }\r\n            // ];\r\n\r\n\r\n            const editRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                // ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n                activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n                activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n                activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n            }\r\n\r\n            const editSubSampleRegParam = {\r\n                nfilterstatus: String(this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.ntransactionstatus),\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n                sfromdate: this.props.Login.masterData.RealFromDate,\r\n                stodate: this.props.Login.masterData.RealToDate,\r\n                //ncontrolCode: this.state.editSampleId,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n                nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n                nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            }\r\n\r\n            const addTestParam = {\r\n                selectedSample: this.props.Login.masterData.selectedSample,\r\n                selectedSubSample: this.props.Login.masterData.selectedSubSample,\r\n                // skip: skip, take: (skip + take),\r\n                userinfo: this.props.Login.userInfo,\r\n                sampleList: this.props.Login.masterData.RegistrationGetSample,\r\n                snspecsampletypecode: this.props.Login.masterData.selectedSubSample &&\r\n                    [...new Set(this.props.Login.masterData.selectedSubSample.map(x => x.nspecsampletypecode))].join(\",\")\r\n            };\r\n\r\n            const breadCrumbobj = convertDateValuetoString(this.props.Login.masterData.RealFromDate, this.props.Login.masterData.RealToDate, this.props.Login.userInfo)\r\n            if (this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.nneedtemplatebasedflow) {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_FROM\",\r\n                        \"value\": breadCrumbobj.breadCrumbFrom\r\n                    }, {\r\n                        \"label\": \"IDS_TO\",\r\n                        \"value\": breadCrumbobj.breadCrumbto\r\n                    }, {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n                    }, {\r\n                        \"label\": \"IDS_REGTYPE\",\r\n                        \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n                    }, {\r\n                        \"label\": \"IDS_REGSUBTYPE\",\r\n                        \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_DESIGNTEMPLATE\",\r\n                        \"value\": this.props.Login.masterData.RealDesignTemplateMappingValue && this.props.Login.masterData.RealDesignTemplateMappingValue.sregtemplatename\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_FILTERSTATUS\",\r\n                        \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n                    }\r\n                ]\r\n            } else {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_FROM\",\r\n                        \"value\": breadCrumbobj.breadCrumbFrom\r\n                    }, {\r\n                        \"label\": \"IDS_TO\",\r\n                        \"value\": breadCrumbobj.breadCrumbto\r\n                    }, {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": this.props.Login.masterData.RealSampleTypeValue && this.props.Login.masterData.RealSampleTypeValue.ssampletypename\r\n                    }, {\r\n                        \"label\": \"IDS_REGTYPE\",\r\n                        \"value\": this.props.Login.masterData.RealRegTypeValue && this.props.Login.masterData.RealRegTypeValue.sregtypename\r\n                    }, {\r\n                        \"label\": \"IDS_REGSUBTYPE\",\r\n                        \"value\": this.props.Login.masterData.RealRegSubTypeValue && this.props.Login.masterData.RealRegSubTypeValue.sregsubtypename\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_FILTERSTATUS\",\r\n                        \"value\": this.props.Login.masterData.RealFilterStatusValue && this.props.Login.masterData.RealFilterStatusValue.stransdisplaystatus\r\n                    }\r\n                ]\r\n            }\r\n\r\n            this.setState({\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                SingleItem, testMoreField,\r\n                DynamicGridItem, DynamicGridMoreField,\r\n                testListColumns, stateSampleType,\r\n                stateRegistrationType,\r\n                stateRegistrationSubType,\r\n                stateFilterStatus,\r\n                stateDynamicDesign,\r\n                popUptestDataState,\r\n                showSample, showTest, skip, take, testskip,\r\n                subsampleskip, subsampletake,\r\n                testtake, testCommentDataState, testAttachmentDataState,\r\n                resultDataState, sampleGridDataState,\r\n                SubSampleDynamicGridItem, SubSampleDynamicGridMoreField,\r\n                SubSampleSingleItem,\r\n                testGetParam, testChildGetParam, subSampleGetParam,\r\n                filterSampleParam, filterTestParam,\r\n                editRegParam, editSubSampleRegParam,\r\n                addTestParam, sampleSearchField, subsampleSearchField,\r\n                testSearchField, filterSubSampleParam, sampledateconstraints, subsampledateconstraints\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEditDateChange = (dateName, dateValue) => {\r\n        const selectComponent = this.state.selectedRecord;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectComponent[dateName] = dateValue;\r\n        this.setState({ selectedRecord: selectComponent });\r\n    }\r\n\r\n    onNumericInputEditChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if ((name !== \"nnoofcontainer\") && (value === 0 || value === 0.0)) {\r\n            selectedRecord[name] = '';\r\n            this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[name] = value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n\r\n\r\n    cancelSampleRecords = (controlcode, skip, take) => {\r\n        let Map = {};\r\n        let sampleList = [];\r\n        if (this.props.Login.masterData.searchedSample !== undefined) {\r\n            sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take), \"npreregno\");\r\n        } else {\r\n            sampleList = this.props.Login.masterData.RegistrationGetSample && this.props.Login.masterData.RegistrationGetSample.slice(skip, skip + take);\r\n        }\r\n        // let sampleList = this.props.Login.masterData.searchedSample || [...this.props.Login.masterData.RegistrationGetSample].splice(skip, skip + take);\r\n        // sampleList = sampleList.splice(skip, skip + take);\r\n        let cancelRejectSamplesList = getSameRecordFromTwoArrays(sampleList || [], this.props.Login.masterData.selectedSample, \"npreregno\");\r\n\r\n        if (cancelRejectSamplesList && cancelRejectSamplesList.length > 0) {\r\n            if (this.transValidation(this.props.Login.transactionValidation, controlcode, cancelRejectSamplesList)) {\r\n                //Map['ninsertpreregno']=dataitem.cancelSample.npreregno;\r\n                Map['ntransactionstatus'] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(transactionstatus => transactionstatus.ntransactionstatus).join(\",\");\r\n                //Map[\"ntransactiontestcode\"]=dataitem.ntransactiontestcode;\r\n                //Map[\"ninserttransactionsamplecode\"]=dataitem.ntransactionsamplecode\r\n                Map[\"userinfo\"] = this.props.Login.userInfo;\r\n                Map[\"ncontrolcode\"] = controlcode;\r\n                Map[\"nsampletypecode\"] = this.props.Login.masterData.RealSampleTypeValue.nsampletypecode;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nflag\"] = 2;\r\n                Map[\"ntype\"] = 3;\r\n                Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                    && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n                Map[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n                Map[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n                    && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n                Map[\"checkBoxOperation\"] = 3;\r\n                Map[\"nregtypecode\"] = this.props.Login.masterData.RealRegTypeValue.nregtypecode;\r\n                Map[\"nregsubtypecode\"] = this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode;\r\n                Map[\"nfilterstatus\"] = -1;\r\n                Map[\"npreregno\"] = cancelRejectSamplesList &&\r\n                    cancelRejectSamplesList.map(sample => sample.npreregno).join(\",\");\r\n                Map[\"ntransactionsamplecode\"] = this.props.Login.masterData.selectedSubSample &&\r\n                    this.props.Login.masterData.selectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\");\r\n                Map[\"ntransactiontestcode\"] = this.props.Login.masterData.selectedTest &&\r\n                    this.props.Login.masterData.selectedTest.map(test => test.ntransactiontestcode).join(\",\");\r\n                Map[\"registrationsample\"] = cancelRejectSamplesList;\r\n                Map[\"registrationtest\"] = this.props.Login.masterData.selectedSubSample;\r\n                Map[\"transactionValidation\"] = this.props.Login.transactionValidation;\r\n                Map[\"withoutgetparameter\"] = 3\r\n                Map[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n                Map[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n                Map[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\";\r\n\r\n\r\n                let inputParam = {\r\n                    inputData: Map,\r\n                    postParamList: this.postParamList,\r\n                    action: 'cancelSample'\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, controlcode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true,\r\n                            screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true,\r\n                            parentPopUpSize: 'lg',\r\n                            screenName: this.props.Login.screenName,\r\n                            operation: 'cancel'\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.cancelSampleAction(inputParam, this.props.Login.masterData)\r\n                }\r\n            } else {\r\n                let value = this.props.Login.transactionValidation[controlcode] &&\r\n                    this.props.Login.transactionValidation[controlcode].map(sample =>\r\n                        this.props.intl.formatMessage({ id: sample.stransdisplaystatus })).join(\"/\")\r\n\r\n                //toast.warn(\"Select\" + \" \" + value + \" to Cancel/Reject Sample\");\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECT\" }) + value + this.props.intl.formatMessage({ id: \"IDS_TOCANCELREJECTSAMPLE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOCANCELREJECT\" }));\r\n        }\r\n\r\n    }\r\n\r\n    transValidation = (transactionValidation, ncontrolcode, selectedSample) => {\r\n        //  const transList=transactionValidation?Object.keys(transactionValidation):[];\r\n        //  const index=transList.findIndex(x=>x.ncontrolcode===ncontrolcode);\r\n        //let check=true;\r\n        //  let validate=false;\r\n        let ntransstatus = [];\r\n\r\n        let translist = transactionValidation[ncontrolcode];\r\n        if (translist) {\r\n            transactionValidation[ncontrolcode] && transactionValidation[ncontrolcode].map(sam => {\r\n                return ntransstatus.push(sam.ntransactionstatus)\r\n            });\r\n            const selectdata = selectedSample ? selectedSample : [];\r\n            let check = selectdata.map(sam1 => {\r\n                return ntransstatus.includes(sam1.ntransactionstatus)\r\n            })\r\n            if (check.includes(false)) {\r\n                return false;\r\n            } else {\r\n                return true;\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    onUpdateSubSampleRegistration(saveType, formRef, operation, flag) {\r\n        const inputData = { userinfo: this.props.Login.userInfo };\r\n\r\n        let initialParam = {\r\n            nfilterstatus: this.props.Login.masterData.FilterStatusValue.ntransactionstatus,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.RealSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.RealRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.RealRegSubTypeValue.nregsubtypecode,\r\n            fromdate: \"\",\r\n            todate: \"\",\r\n            nflag: 2,\r\n            ntype: 5,\r\n            npreregno: String(this.state.selectedRecord.npreregno),\r\n            ntransactionsamplecode: String(this.state.selectedRecord.ntransactionsamplecode),\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.RealDesignTemplateMappingValue\r\n                && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow,\r\n            nneedsubsample: this.props.Login.masterData.RegSubTypeValue\r\n                && this.props.Login.masterData.RegSubTypeValue.nneedsubsample,\r\n            checkBoxOperation: 3,\r\n            activeTestTab: this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\",\r\n            activeSampleTab: this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\",\r\n            activeSubSampleTab: this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n        }\r\n\r\n        inputData[\"initialparam\"] = initialParam;\r\n        // inputData[\"samplebeforeedit\"] = JSON.parse(JSON.stringify(this.props.Login.regRecordToEdit));\r\n        //inputData[\"registration\"] = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        const param = getRegistrationSubSample(\r\n            this.state.selectedRecord,\r\n            this.props.Login.masterData.SubSampleTemplate.jsondata,\r\n            this.props.Login.userInfo, this.props.Login.defaulttimezone);\r\n\r\n        inputData[\"registrationsample\"] = param.sampleRegistration\r\n        inputData[\"SubSampleDateList\"] = param.dateList\r\n        inputData['subsampledateconstraints'] = this.state.subsampledateconstraints;\r\n        inputData[\"flag\"] = flag === undefined ? 1 : flag;\r\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.RealDesignTemplateMappingValue\r\n            && this.props.Login.masterData.RealDesignTemplateMappingValue.ndesigntemplatemappingcode;\r\n        inputData[\"nneedtemplatebasedflow\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedtemplatebasedflow;\r\n        inputData[\"nneedsubsample\"] = this.props.Login.masterData.RegSubTypeValue\r\n            && this.props.Login.masterData.RegSubTypeValue.nneedsubsample;\r\n        inputData[\"checkBoxOperation\"] = 3;\r\n        inputData[\"activeTestTab\"] = this.props.Login.activeTestTab || \"IDS_PARAMETERRESULTS\";\r\n        inputData[\"activeSampleTab\"] = this.props.Login.activeSampleTab || \"IDS_SAMPLEATTACHMENTS\";\r\n        inputData[\"activeSubSampleTab\"] = this.props.Login.activeSubSampleTab || \"IDS_SUBSAMPLEATTACHMENTS\"\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SubSampleRegistration\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef,\r\n            action: 'editSubSample',\r\n            showConfirmAlert: false,\r\n            resultDataState: this.state.resultDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            testAttachmentDataState: this.state.testAttachmentDataState,\r\n            // dataState:undefined, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType, parentPopUpSize: \"lg\",\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            //this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            this.props.onUpdateSubSampleRegistration(inputParam,\r\n                this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\r\n        this.props.validateEsignforRegistration(inputParam, \"openModal\");\r\n\r\n    }\r\n\r\n\r\n    editRegistration = (inputParam) => {\r\n        let data = [];\r\n        const withoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.registrationTemplate\r\n            && this.props.Login.masterData.registrationTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    withoutCombocomponent.push(componentrow)\r\n                                }\r\n\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : withoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let childColumnList = {};\r\n            data.map(columnList => {\r\n                const val = comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n            this.props.getEditRegistrationComboService(inputParam,\r\n                data, this.state.selectedRecord, childColumnList,\r\n                comboComponents, withoutCombocomponent)\r\n        } else {\r\n            toast.info(\"Configure the preregister template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    editSubSampleRegistration = (inputParam) => {\r\n        let data = [];\r\n        const regSubSamplewithoutCombocomponent = []\r\n        const Layout = this.props.Login.masterData.SubSampleTemplate\r\n            && this.props.Login.masterData.SubSampleTemplate.jsondata\r\n        if (Layout !== undefined) {\r\n            Layout.map(row => {\r\n                return row.children.map(column => {\r\n                    return column.children.map(component => {\r\n                        return component.hasOwnProperty(\"children\") ?\r\n                            component.children.map(componentrow => {\r\n                                if (componentrow.inputtype === \"combo\") {\r\n                                    data.push(componentrow)\r\n                                } else {\r\n                                    regSubSamplewithoutCombocomponent.push(componentrow)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            : component.inputtype === \"combo\" ?\r\n                                data.push(component) : regSubSamplewithoutCombocomponent.push(component)\r\n                    })\r\n                })\r\n            })\r\n            const regSubSamplecomboComponents = data\r\n            let regSubSamplechildColumnList = {};\r\n            data.map(columnList => {\r\n                const val = comboChild(data, columnList, regSubSamplechildColumnList, true);\r\n                data = val.data;\r\n                regSubSamplechildColumnList = val.childColumnList\r\n                return null;\r\n            })\r\n\r\n\r\n            const sampleList = getSameRecordFromTwoArrays(inputParam.masterData.selectedSample, [inputParam.mastertoedit], \"npreregno\")\r\n\r\n            this.props.getEditSubSampleComboService(inputParam,\r\n                data, this.state.selectedRecord, regSubSamplechildColumnList,\r\n                regSubSamplecomboComponents, regSubSamplewithoutCombocomponent,\r\n                sampleList[0].ncomponentrequired === 3 ? true : false)\r\n        } else {\r\n            toast.info(\"Configure the sub sample template for this registrationtype\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getSampleTypeChange, getRegTypeChange, getRegSubTypeChange,\r\n    getAttachmentCombo, viewAttachment, getCommentsCombo,\r\n    filterTransactionList, validateEsignCredential,\r\n    getSampleChildTabDetail, getTestChildTabDetailRegistration,\r\n    ReloadData, showUnderDevelopment, getPreviewTemplate,\r\n    getChildValues, getRegistrationSample,\r\n    getRegistrationsubSampleDetail, getRegistrationTestDetail,\r\n    acceptRegistration, addMoreTest, createRegistrationTest,\r\n    getEditRegistrationComboService, cancelTestAction,\r\n    cancelSampleAction, addsubSampleRegistration, saveSubSample,\r\n    getEditSubSampleComboService, onUpdateSubSampleRegistration,\r\n    cancelSubSampleAction, preregRecordToQuarantine, componentTest, getSubSampleChildTabDetail\r\n})(injectIntl(Registration));"]},"metadata":{},"sourceType":"module"}