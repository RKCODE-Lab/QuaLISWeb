{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\edqmmaster\\\\SafetyMarker.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../pages/audittrail/Esign';\nimport AddSafetyMarker from '../edqmmaster/AddSafetyMarker';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { callService, crudMaster, fetchRecordSafetyMarker, getTestMasterDataService, updateStore, validateEsignCredential } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SafetyMarker extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleChange = (value, valueParam, isTestCategory) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value;\n\n        if (isTestCategory === \"TestCategory\") {\n          this.props.getTestMasterDataService(value.value, selectedRecord, this.props.Login.userInfo); // selectedRecord.ntestcode = \"\";\n\n          selectedRecord[\"ntestcode\"] = undefined; // {\n          //     label: \"\",\n          //     value: -1\n          // }\n\n          this.setState({\n            selectedRecord\n          });\n        } else {\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (deleteParam.selectedRecord.expanded !== undefined) {\n        delete deleteParam.selectedRecord.expanded;\n      }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation,\n        dataState: this.state.dataState\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } //this.props.crudMaster(inputParam);\n\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          //\"nsitecode\": this.props.Login.userInfo.nmastersitecode \n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      //add / edit  \n      let dataState = undefined;\n      let operation = \"\";\n      let inputData = [];\n      let selectedId = null; // let fieldList = [\"nsafetymarkercode\", \"ntestcategorycode\", \"ntestcode\", \"ntransactionstatus\",\n      //     \"ssafetymarkername\", \"ssafetymarkerdesc\"];\n\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n      if (this.props.Login.operation === \"update\") {\n        // edit    \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord)); // fieldList.map(item => {\n        //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        // })\n\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nsafetymarkercode\"] = this.state.selectedRecord[\"nsafetymarkercode\"] ? this.state.selectedRecord[\"nsafetymarkercode\"] : -1; //inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntestcategorycode\"] = this.state.selectedRecord[\"ntestcategorycode\"] ? this.state.selectedRecord[\"ntestcategorycode\"].value : -1;\n\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"] ? this.state.selectedRecord[\"ntestcode\"].value : -1;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.NO;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ssafetymarkername\"] = this.state.selectedRecord[\"ssafetymarkername\"] ? this.state.selectedRecord[\"ssafetymarkername\"] : \"\";\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ssafetymarkerdesc\"] = this.state.selectedRecord[\"ssafetymarkerdesc\"] ? this.state.selectedRecord[\"ssafetymarkerdesc\"] : \"\";\n        operation = \"update\";\n        dataState = this.state.dataState;\n        selectedId = this.props.Login.selectedId;\n      } else {\n        //add             \n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        }; // fieldList.map(item => {\n        //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\n        // })\n\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nsafetymarkercode\"] = this.state.selectedRecord[\"nsafetymarkercode\"] ? this.state.selectedRecord[\"nsafetymarkercode\"] : -1; //inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntestcategorycode\"] = this.state.selectedRecord[\"ntestcategorycode\"] ? this.state.selectedRecord[\"ntestcategorycode\"].value : -1;\n\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"] ? this.state.selectedRecord[\"ntestcode\"].value : -1;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.NO;\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ssafetymarkername\"] = this.state.selectedRecord[\"ssafetymarkername\"] ? this.state.selectedRecord[\"ssafetymarkername\"] : \"\";\n        inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ssafetymarkerdesc\"] = this.state.selectedRecord[\"ssafetymarkerdesc\"] ? this.state.selectedRecord[\"ssafetymarkerdesc\"] : \"\";\n        operation = \"create\";\n      }\n\n      inputData[\"edqmsafetymarker\"][\"ntestcategorycode\"] = this.state.selectedRecord[\"ntestcategorycode\"] ? this.state.selectedRecord[\"ntestcategorycode\"].value ? this.state.selectedRecord[\"ntestcategorycode\"].value : this.state.selectedRecord[\"ntestcategorycode\"] : -1; //inputData[\"edqmsafetymarker\"][\"ntestcode\"] =  this.props.Login[\"ntestcode\"] ?this.state.selectedRecord[\"ntestcode\"].value  ? \n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        operation: operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      } //this.props.crudMaster(inputParam);\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      // addScreen: false, \n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      testCategory: [],\n      testMaster: [],\n      ntestcode: [],\n      isOpen: false,\n      controlMap: new Map(),\n      userRoleControlRights: []\n    };\n  }\n\n  //    getTestMasterDataService(nTestCategoryCode, selectedRecord) {\n  //         rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", { \"userinfo\": this.props.Login.userInfo, \"ntestcategorycode\": parseInt(nTestCategoryCode) })\n  //             .then(response => {\n  //                 this.setState({\n  //                     testMaster: response.data, selectedRecord\n  //                 });\n  //             }).catch(error => {\n  //                 console.log('error: ', error);\n  //             })\n  //     }\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null; //{ addScreen: props.Login.showScreen }\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    primaryKeyField = \"nsafetymarkercode\";\n    const addParam = {\n      screenName: this.props.Login.screenName,\n      primaryKeyField,\n      undefined,\n      operation: \"create\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      addId,\n      data: this.state.data\n    }; // this.extractedColumnList = [\"nsafetymarkercode\", \"ntestcategorycode\", \"ntestcode\", \"ntransactionstatus\", \"stestcategoryname\",\n    //     \"ssafetymarkername\", \"ssafetymarkerdesc\", \"stestname\", \"suploadtoedqm\"];\n\n    this.mandatoryColumnList = [{\n      \"idsName\": \"IDS_SAFETYMARKERNAME\",\n      \"dataField\": \"ssafetymarkername\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"idsName\": \"IDS_TESTCATEGORY\",\n      \"dataField\": \"ntestcategorycode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"ntestcode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_SAFETYMARKERNAME\",\n      \"dataField\": \"ssafetymarkername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TESTNAME\",\n      \"dataField\": \"stestname\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_UPLOADTOEDQM\",\n      \"dataField\": \"suploadtoedqm\",\n      \"width\": \"200px\",\n      \"isIdsField\": true,\n      \"controlName\": \"ntransactionstatus\"\n    }];\n    this.detailedFieldList = [{\n      \"idsName\": \"IDS_TESTCATEGORY\",\n      \"dataField\": \"stestcategoryname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"ssafetymarkerdesc\",\n      \"width\": \"400px\"\n    }];\n    const editParam = {\n      screenName: this.props.Login.screenName,\n      primaryKeyField: \"nsafetymarkercode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      data: this.state.data\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    }; // const AddParam = {screenName:this.props.Login.inputParam && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"create\",  primaryKeyField, \n    //inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo, data:this.state.data, ncontrolCode:addId};\n    // const editParam = {screenName:this.props.Login.inputParam && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\",  primaryKeyField, \n    // inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo, data:this.state.data, ncontrolCode:editId};\n    // const deleteParam ={operation:\"delete\"};\n\n    const mandatoryFields = [];\n    this.mandatoryColumnList.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      detailedFieldList: this.detailedFieldList,\n      expandField: \"expanded\",\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchRecordSafetyMarker,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      addRecord: () => this.props.fetchRecordSafetyMarker(addParam) // isComponent={true}\n      ,\n      gridHeight: \"600px\",\n      scrollable: \"scrollable\",\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId // pageable={{ buttonCount: 4, pageSizes: true }}\n      ,\n      pageable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation //formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }\n      }) : /*#__PURE__*/React.createElement(AddSafetyMarker, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.handleChange // formatMessage={this.props.intl.formatMessage}\n        ,\n        testCategory: this.props.Login.testCategory || [],\n        testMaster: this.props.Login.testMaster || [],\n        ntestcode: this.props.Login.ntestcode || [],\n        ntestcategorycode: this.props.Login.ntestcategorycode || [],\n        extractedColumnList: this.extractedColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState\n        });\n      }\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  } // fetchRecord = (primaryKeyName, primaryKeyValue, operation) => {\n  //     //  this.props.Login.showScreen = true;\n  //     const testCategory = rsapi.post(\"testcategory/getTestCategory\", { \"userinfo\": this.props.Login.userInfo });\n  //     let urlArray = [];\n  //     let nTestCategoryCode = 0;\n  //     if (operation === \"update\") {\n  //         this.state.data.map(item => {\n  //             if (item.nsafetymarkercode === parseInt(primaryKeyValue)) {\n  //                 return nTestCategoryCode = item.ntestcategorycode;\n  //             }\n  //             return nTestCategoryCode;\n  //         })\n  //         const safetyMarker = rsapi.post(this.props.Login.inputParam.classUrl + \"/getActiveSafetyMarkerById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": this.props.Login.userInfo });\n  //         const testMasterData = rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", { \"userinfo\": this.props.Login.userInfo, \"ntestcategorycode\": parseInt(nTestCategoryCode) });\n  //         urlArray = [testCategory, testMasterData, safetyMarker];\n  //     }\n  //     else {\n  //         urlArray = [testCategory];\n  //     }\n  //     Axios.all(urlArray)\n  //         .then(Axios.spread((...response) => {\n  //             // console.log(\"Edit : \", response[2].data);\n  //             let ntestcategorycode = [];\n  //             let ntestcode = [];\n  //             if (operation === \"update\") {\n  //                 ntestcategorycode.push({\n  //                     label: response[2].data[\"stestcategoryname\"],\n  //                     value: response[2].data[\"ntestcategorycode\"]\n  //                 });\n  //                 ntestcode.push({\n  //                     label: response[2].data[\"stestname\"],\n  //                     value: response[2].data[\"ntestcode\"]\n  //                 });\n  //             }\n  //             // console.log(\" Combo data: \", this.state.ntestcode[0]);\n  //             this.setState({\n  //                 testCategory: response[0].data, testMaster: operation === \"update\" ? response[1].data : [],\n  //                 ntestcategorycode, ntestcode: ntestcode,\n  //                 isOpen: true, selectedRecord: operation === \"update\" ? response[2].data : undefined, operation: operation\n  //             });\n  //         }))\n  //         .catch(error => {\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             }\n  //             else {\n  //                 toast.warn(error.response.data);\n  //             }\n  //         })\n  // }\n\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchRecordSafetyMarker,\n  getTestMasterDataService,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(SafetyMarker));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/edqmmaster/SafetyMarker.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","SlideOutModal","Esign","AddSafetyMarker","DataGrid","ListWrapper","callService","crudMaster","fetchRecordSafetyMarker","getTestMasterDataService","updateStore","validateEsignCredential","DEFAULT_RETURN","showEsign","getControlMap","transactionStatus","mapStateToProps","state","Login","SafetyMarker","Component","constructor","props","dataStateChange","event","setState","dataResult","data","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","selectedId","handleChange","value","valueParam","isTestCategory","userInfo","undefined","onInputOnChange","target","type","name","checked","YES","NO","deleteRecord","deleteParam","expanded","inputParam","classUrl","methodUrl","displayName","inputData","toLowerCase","userRoleControlRights","nformcode","ncontrolCode","screenData","masterData","screenName","intl","formatMessage","id","reloadData","userinfo","onSaveClick","saveType","formRef","JSON","parse","stringify","nmastersitecode","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","testCategory","testMaster","ntestcode","isOpen","controlMap","Map","getDerivedStateFromProps","warn","render","primaryKeyField","addId","has","concat","get","ncontrolcode","editId","addParam","mandatoryColumnList","detailedFieldList","editParam","mandatoryFields","forEach","item","mandatory","push","ntestcategorycode","componentDidUpdate","previousProps","Object","values","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../pages/audittrail/Esign';\r\nimport AddSafetyMarker from '../edqmmaster/AddSafetyMarker';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListWrapper } from '../../components/client-group.styles'\r\nimport { callService, crudMaster, fetchRecordSafetyMarker, getTestMasterDataService, updateStore, validateEsignCredential } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, getControlMap } from '../../components/CommonScript';\r\nimport {transactionStatus} from '../../components/Enumeration';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SafetyMarker extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            // addScreen: false, \r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            testCategory: [], testMaster: [], ntestcode: [],\r\n            isOpen: false, controlMap: new Map(), userRoleControlRights: []\r\n        }\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, selectedId:null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n    //    getTestMasterDataService(nTestCategoryCode, selectedRecord) {\r\n\r\n    //         rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", { \"userinfo\": this.props.Login.userInfo, \"ntestcategorycode\": parseInt(nTestCategoryCode) })\r\n    //             .then(response => {\r\n\r\n    //                 this.setState({\r\n    //                     testMaster: response.data, selectedRecord\r\n    //                 });\r\n\r\n    //             }).catch(error => {\r\n    //                 console.log('error: ', error);\r\n    //             })\r\n\r\n    //     }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;//{ addScreen: props.Login.showScreen }\r\n    }\r\n\r\n    handleChange = (value, valueParam, isTestCategory) => {\r\n\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n\r\n            selectedRecord[valueParam] = value;\r\n\r\n            if (isTestCategory === \"TestCategory\") {\r\n                this.props.getTestMasterDataService(value.value, selectedRecord, this.props.Login.userInfo);\r\n                // selectedRecord.ntestcode = \"\";\r\n                selectedRecord[\"ntestcode\"] = undefined;\r\n                // {\r\n                //     label: \"\",\r\n                //     value: -1\r\n                // }\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else {\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"\";\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n        primaryKeyField = \"nsafetymarkercode\";\r\n        const addParam = {\r\n            screenName: this.props.Login.screenName,\r\n            primaryKeyField, undefined, operation: \"create\", inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, addId, data: this.state.data\r\n        }\r\n\r\n        // this.extractedColumnList = [\"nsafetymarkercode\", \"ntestcategorycode\", \"ntestcode\", \"ntransactionstatus\", \"stestcategoryname\",\r\n        //     \"ssafetymarkername\", \"ssafetymarkerdesc\", \"stestname\", \"suploadtoedqm\"];\r\n        this.mandatoryColumnList = [\r\n            { \"idsName\": \"IDS_SAFETYMARKERNAME\", \"dataField\": \"ssafetymarkername\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},           \r\n            { \"idsName\": \"IDS_TESTCATEGORY\", \"dataField\": \"ntestcategorycode\",\"mandatory\": true  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ntestcode\", \"mandatory\": true  , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n        ];\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_SAFETYMARKERNAME\", \"dataField\": \"ssafetymarkername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestname\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_UPLOADTOEDQM\", \"dataField\": \"suploadtoedqm\", \"width\": \"200px\", \"isIdsField\": true, \"controlName\": \"ntransactionstatus\" }\r\n        ];\r\n        this.detailedFieldList = [\r\n             { \"idsName\": \"IDS_TESTCATEGORY\", \"dataField\": \"stestcategoryname\", \"width\": \"200px\" },\r\n             { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"ssafetymarkerdesc\", \"width\": \"400px\" },\r\n           \r\n        ];\r\n        const editParam = {\r\n            screenName: this.props.Login.screenName, primaryKeyField: \"nsafetymarkercode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editId, data: this.state.data\r\n        };\r\n        const deleteParam = { operation: \"delete\" };\r\n        // const AddParam = {screenName:this.props.Login.inputParam && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"create\",  primaryKeyField, \r\n        //inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo, data:this.state.data, ncontrolCode:addId};\r\n\r\n\r\n        // const editParam = {screenName:this.props.Login.inputParam && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), operation:\"update\",  primaryKeyField, \r\n        // inputParam:this.props.Login.inputParam,   userInfo:this.props.Login.userInfo, data:this.state.data, ncontrolCode:editId};\r\n\r\n        // const deleteParam ={operation:\"delete\"};\r\n        const mandatoryFields=[];\r\n        this.mandatoryColumnList.forEach(item=>item.mandatory === true ? \r\n            mandatoryFields.push(item) :\"\"\r\n        );  \r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                          \r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    expandField=\"expanded\"\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchRecordSafetyMarker}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    deleteRecord={this.deleteRecord}                                   \r\n                                    reloadData={this.reloadData}\r\n                                    addRecord = {() => this.props.fetchRecordSafetyMarker(addParam)}\r\n                                    // isComponent={true}\r\n                                    gridHeight = {\"600px\"}\r\n                                    scrollable = {\"scrollable\"}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                   // pageable={{ buttonCount: 4, pageSizes: true }}\r\n                                    pageable={true}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                <SlideOutModal show={this.props.Login.openModal}\r\n                    closeModal={this.closeModal}\r\n                    operation={this.props.Login.operation}\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName}\r\n                    onSaveClick={this.onSaveClick}\r\n                    esign={this.props.Login.loadEsign}\r\n                    validateEsign={this.validateEsign}\r\n                    masterStatus={this.props.Login.masterStatus}\r\n                    updateStore={this.props.updateStore}\r\n                    selectedRecord={this.state.selectedRecord || {}}\r\n                    mandatoryFields={mandatoryFields}\r\n                    addComponent={this.props.Login.loadEsign ?\r\n                        <Esign operation={this.props.Login.operation}\r\n                            //formatMessage={this.props.intl.formatMessage}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                        />\r\n                        :\r\n                        <AddSafetyMarker\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            onInputOnChange={this.onInputOnChange}\r\n                            handleChange={this.handleChange}\r\n                           // formatMessage={this.props.intl.formatMessage}\r\n\r\n                            testCategory={this.props.Login.testCategory||[]}\r\n                            testMaster={this.props.Login.testMaster||[]}\r\n\r\n                            ntestcode={this.props.Login.ntestcode || []}\r\n                            ntestcategorycode={this.props.Login.ntestcategorycode || []}\r\n\r\n                            extractedColumnList={this.extractedColumnList}\r\n                        />\r\n                    }\r\n                />\r\n    }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n                let { dataState }=this.state;\r\n                if(this.props.Login.dataState===undefined){\r\n                    dataState={skip:0,take:this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                }   \r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState\r\n                });\r\n            }\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    // fetchRecord = (primaryKeyName, primaryKeyValue, operation) => {\r\n    //     //  this.props.Login.showScreen = true;\r\n\r\n    //     const testCategory = rsapi.post(\"testcategory/getTestCategory\", { \"userinfo\": this.props.Login.userInfo });\r\n\r\n    //     let urlArray = [];\r\n    //     let nTestCategoryCode = 0;\r\n    //     if (operation === \"update\") {\r\n\r\n    //         this.state.data.map(item => {\r\n    //             if (item.nsafetymarkercode === parseInt(primaryKeyValue)) {\r\n    //                 return nTestCategoryCode = item.ntestcategorycode;\r\n    //             }\r\n    //             return nTestCategoryCode;\r\n    //         })\r\n    //         const safetyMarker = rsapi.post(this.props.Login.inputParam.classUrl + \"/getActiveSafetyMarkerById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": this.props.Login.userInfo });\r\n    //         const testMasterData = rsapi.post(\"testmaster/getTestMasterBasedOnTestCategory\", { \"userinfo\": this.props.Login.userInfo, \"ntestcategorycode\": parseInt(nTestCategoryCode) });\r\n\r\n    //         urlArray = [testCategory, testMasterData, safetyMarker];\r\n    //     }\r\n    //     else {\r\n    //         urlArray = [testCategory];\r\n    //     }\r\n\r\n    //     Axios.all(urlArray)\r\n    //         .then(Axios.spread((...response) => {\r\n\r\n    //             // console.log(\"Edit : \", response[2].data);\r\n    //             let ntestcategorycode = [];\r\n    //             let ntestcode = [];\r\n\r\n    //             if (operation === \"update\") {\r\n    //                 ntestcategorycode.push({\r\n    //                     label: response[2].data[\"stestcategoryname\"],\r\n    //                     value: response[2].data[\"ntestcategorycode\"]\r\n    //                 });\r\n\r\n    //                 ntestcode.push({\r\n    //                     label: response[2].data[\"stestname\"],\r\n    //                     value: response[2].data[\"ntestcode\"]\r\n    //                 });\r\n    //             }\r\n    //             // console.log(\" Combo data: \", this.state.ntestcode[0]);\r\n    //             this.setState({\r\n    //                 testCategory: response[0].data, testMaster: operation === \"update\" ? response[1].data : [],\r\n    //                 ntestcategorycode, ntestcode: ntestcode,\r\n    //                 isOpen: true, selectedRecord: operation === \"update\" ? response[2].data : undefined, operation: operation\r\n\r\n    //             });\r\n    //         }))\r\n\r\n    //         .catch(error => {\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             }\r\n    //             else {\r\n    //                 toast.warn(error.response.data);\r\n    //             }\r\n    //         })\r\n    // }\r\n\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        if(deleteParam.selectedRecord.expanded !== undefined)           \r\n        {\r\n           delete deleteParam.selectedRecord.expanded;\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation,\r\n            dataState: this.state.dataState\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n        //this.props.crudMaster(inputParam);\r\n    }  \r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { //\"nsitecode\": this.props.Login.userInfo.nmastersitecode \r\n            userinfo:this.props.Login.userInfo\r\n        },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        //add / edit  \r\n        let dataState = undefined;\r\n        let operation = \"\";\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        // let fieldList = [\"nsafetymarkercode\", \"ntestcategorycode\", \"ntestcode\", \"ntransactionstatus\",\r\n        //     \"ssafetymarkername\", \"ssafetymarkerdesc\"];\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit    \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = JSON.parse(JSON.stringify(this.state.selectedRecord)); \r\n            // fieldList.map(item => {\r\n            //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            // })\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nsafetymarkercode\"] = this.state.selectedRecord[\"nsafetymarkercode\"] ? this.state.selectedRecord[\"nsafetymarkercode\"] : -1;\r\n            //inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntestcategorycode\"] = this.state.selectedRecord[\"ntestcategorycode\"] ? this.state.selectedRecord[\"ntestcategorycode\"].value : -1;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"] ? this.state.selectedRecord[\"ntestcode\"].value : -1;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.NO;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ssafetymarkername\"] = this.state.selectedRecord[\"ssafetymarkername\"] ? this.state.selectedRecord[\"ssafetymarkername\"] : \"\";\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ssafetymarkerdesc\"] = this.state.selectedRecord[\"ssafetymarkerdesc\"] ? this.state.selectedRecord[\"ssafetymarkerdesc\"] : \"\";\r\n\r\n\r\n            operation = \"update\";\r\n            dataState = this.state.dataState;\r\n            selectedId = this.props.Login.selectedId; \r\n        }\r\n        else {\r\n            //add             \r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n\r\n            // fieldList.map(item => {\r\n            //     return inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][item] = this.state.selectedRecord[item]\r\n            // })\r\n\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"nsafetymarkercode\"] = this.state.selectedRecord[\"nsafetymarkercode\"] ? this.state.selectedRecord[\"nsafetymarkercode\"] : -1;\r\n            //inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntestcategorycode\"] = this.state.selectedRecord[\"ntestcategorycode\"] ? this.state.selectedRecord[\"ntestcategorycode\"].value : -1;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntestcode\"] = this.state.selectedRecord[\"ntestcode\"] ? this.state.selectedRecord[\"ntestcode\"].value : -1;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.NO;\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ssafetymarkername\"] = this.state.selectedRecord[\"ssafetymarkername\"] ? this.state.selectedRecord[\"ssafetymarkername\"] : \"\";\r\n            inputData[this.props.Login.inputParam.methodUrl.toLowerCase()][\"ssafetymarkerdesc\"] = this.state.selectedRecord[\"ssafetymarkerdesc\"] ? this.state.selectedRecord[\"ssafetymarkerdesc\"] : \"\";\r\n\r\n\r\n         \r\n            operation = \"create\";\r\n        }\r\n        inputData[\"edqmsafetymarker\"][\"ntestcategorycode\"] = this.state.selectedRecord[\"ntestcategorycode\"]?this.state.selectedRecord[\"ntestcategorycode\"].value ? this.state.selectedRecord[\"ntestcategorycode\"].value:this.state.selectedRecord[\"ntestcategorycode\"] : -1;\r\n        //inputData[\"edqmsafetymarker\"][\"ntestcode\"] =  this.props.Login[\"ntestcode\"] ?this.state.selectedRecord[\"ntestcode\"].value  ? \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData,\r\n            operation: operation, saveType, formRef, dataState, selectedId\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n        //this.props.crudMaster(inputParam);\r\n\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, fetchRecordSafetyMarker, getTestMasterDataService, updateStore, validateEsignCredential })(injectIntl(SafetyMarker));"]},"metadata":{},"sourceType":"module"}