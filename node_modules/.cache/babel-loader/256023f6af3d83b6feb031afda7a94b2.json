{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\data-grid.component.jsx\";\nimport { faCheck, faCloudDownloadAlt, faCopy, faEye, faFileCsv, faFileExcel, faFileImport, faFilePdf, faLanguage, faPencilAlt, faPlus, faRedo, faSync, faThumbsUp, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\nimport { Grid, GridColumn, GridColumnMenuFilter, GridNoRecords, GridToolbar } from '@progress/kendo-react-grid';\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\nimport React from 'react';\nimport { Button, Card, Col, FormGroup, FormLabel, Image, Nav, Row } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { AtTableWrap, FontIconWrap, FormControlStatic } from '../data-grid/data-grid.styles';\nimport ColumnMenu from './ColumnMenu';\nimport SimpleGrid from './SimpleGrid'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport { process } from '@progress/kendo-data-query';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport parse from 'html-react-parser';\nimport { CSVLink } from \"react-csv\";\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport ReactTooltip from 'react-tooltip';\nimport reject from \"../../assets/image/reject.svg\";\nimport { ttfFont } from '../../assets/styles/ttfFont';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { getActionIcon } from '../HoverIcons';\nimport CustomSwitch from '../custom-switch/custom-switch.component'; // import '../../assets/styles/unicode-font.css';\n\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\nimport { dynamicFileDownload } from '../../actions/ServiceAction';\n\nclass DataGrid extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.detailBand = props => {\n      return /*#__PURE__*/React.createElement(Row, {\n        bsPrefix: \"margin_class\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, this.props.hasDynamicColSize ? /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }\n      }, this.props.detailedFieldList.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOREINFO\",\n        message: \"More Info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 54\n        }\n      })), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"form-static-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        style: {\n          marginLeft: -18\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 45\n        }\n      }, this.props.detailedFieldList.map(item => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: item.columnSize,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 57\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 61\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: item.idsName,\n          message: item.idsName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 76\n          }\n        })), /*#__PURE__*/React.createElement(FormControlStatic, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 65\n          }\n        }, props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' : item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: props.dataItem[item.dataField],\n          message: props.dataItem[item.dataField],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 95\n          }\n        }) : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField], item.dataType && item.dataType[0] === 'files' ? /*#__PURE__*/React.createElement(FontIconWrap, {\n          icon: faCloudDownloadAlt,\n          className: \"ml-2 className action-icons-wrap\",\n          size: \"lg\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_DOWNLOAD\"\n          }),\n          \"data-place\": \"left\",\n          onClick: () => this.props.dynamicFileDownload({ ...props.dataItem,\n            ...this.props.inputParam,\n            ...item,\n            userInfo: this.props.Login.userInfo,\n            ...this.props.viewFileURL\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 81\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faCloudDownloadAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 85\n          }\n        })) : \"\")));\n      })))))) : this.props.hasChild ? /*#__PURE__*/React.createElement(SimpleGrid, {\n        childList: this.props.childList.get(parseInt(props.dataItem[this.props.childMappingField])) || [],\n        extractedColumnList: this.props.childColumnList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 29\n        }\n      }, this.props.detailedFieldList.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"row\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_MOREINFO\",\n        message: \"More Info\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 62\n        }\n      })), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"form-static-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 49\n        }\n      }, this.props.detailedFieldList.map(item => {\n        return /*#__PURE__*/React.createElement(Col, {\n          md: 6,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 65\n          }\n        }, /*#__PURE__*/React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 69\n          }\n        }, /*#__PURE__*/React.createElement(FormLabel, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 73\n          }\n        }, /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: item.idsName,\n          message: item.idsName,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 84\n          }\n        })), /*#__PURE__*/React.createElement(FormControlStatic, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 73\n          }\n        }, props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' : item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: props.dataItem[item.dataField],\n          message: props.dataItem[item.dataField],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 99\n          }\n        }) : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField], item.dataType && item.dataType[0] === 'files' ? /*#__PURE__*/React.createElement(FontIconWrap, {\n          icon: faCloudDownloadAlt,\n          className: \"ml-2 className action-icons-wrap\",\n          size: \"lg\",\n          \"data-tip\": this.props.intl.formatMessage({\n            id: \"IDS_DOWNLOAD\"\n          }),\n          \"data-place\": \"left\",\n          onClick: () => this.props.dynamicFileDownload({ ...props.dataItem,\n            ...this.props.inputParam,\n            ...item,\n            userInfo: this.props.Login.userInfo,\n            ...this.props.viewFileURL\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 81\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faCloudDownloadAlt,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 85\n          }\n        })) : \"\")));\n      }))))))), \" \");\n    };\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n\n      if (this.props.hasChild && event.value === true) {\n        event.dataItem.expanded = !isExpanded;\n        this.props.handleExpandChange(event, this.props.dataState);\n      } else {\n        event.dataItem.expanded = !isExpanded;\n        this.setState({\n          isExpanded\n        });\n      }\n    };\n\n    this.exportExcel = () => {\n      if (this.props.dataResult.data.length > 0) {\n        this._excelExport.save();\n      } else toast.info(this.props.intl.formatMessage({\n        id: \"IDS_NODATATOEXPORT\"\n      }));\n    };\n\n    this.exportExcelHeader = () => {\n      //  if (this.props.dataResult.data.length > 0) {\n      this._excelExportHeader.save(); // }\n      // else\n      //     toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\n\n    };\n\n    this.exportPDF = () => {\n      if (this.props.dataResult.data.length > 0) this._pdfExport.save();else toast.info(this.props.intl.formatMessage({\n        id: \"IDS_NODATATOEXPORT\"\n      }));\n    };\n\n    this.handleClickDelete = (deleteParam, row) => {\n      //this.props.deleteRecord(deleteParam);\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.props.deleteRecord(deleteParam, row));\n    };\n\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  columnProps(field) {\n    if (!this.props.hideColumnFilter) {\n      const returntype = {\n        field: field,\n        columnMenu: ColumnMenu,\n        headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\n      };\n      return returntype;\n    }\n  }\n\n  isColumnActive(field, dataState) {\n    return GridColumnMenuFilter.active(field, dataState.filter);\n  }\n\n  render() {\n    //console.log(\"controlMap:\", this.props);\n    //  loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\n    const methodUrl = this.props.methodUrl ? this.props.methodUrl : this.props.inputParam && this.props.inputParam.methodUrl;\n    const addId = this.props.controlMap && this.props.controlMap.has(\"Add\".concat(methodUrl)) && this.props.controlMap.get(\"Add\".concat(methodUrl)).ncontrolcode;\n    const editId = this.props.controlMap && this.props.controlMap.has(\"Edit\".concat(methodUrl)) && this.props.controlMap.get(\"Edit\".concat(methodUrl)).ncontrolcode;\n    {\n      /* Add by Neeraj kumar for Language screen -RMTP-101*/\n    }\n    const languagesId = this.props.controlMap && this.props.controlMap.has(\"Update\".concat(methodUrl)) && this.props.controlMap.get(\"Update\".concat(methodUrl)).ncontrolcode; // const viewId = this.props.controlMap.has(\"View\".concat(methodUrl))\n    //     && this.props.controlMap.get(\"View\".concat(methodUrl)).ncontrolcode;\n\n    const deleteId = this.props.controlMap && this.props.controlMap.has(\"Delete\".concat(methodUrl)) && this.props.controlMap.get(\"Delete\".concat(methodUrl)).ncontrolcode; // const defaultId = this.props.controlMap && this.props.controlMap.has(\"Default\".concat(methodUrl))\n    //     && this.props.controlMap.get(\"Default\".concat(methodUrl)).ncontrolcode;\n\n    const approveId = this.props.controlMap && this.props.controlMap.has(\"Approve\".concat(methodUrl)) && this.props.controlMap.get(\"Approve\".concat(methodUrl)).ncontrolcode;\n    const copyId = this.props.controlMap && this.props.inputParam && this.props.controlMap.has(\"Copy\".concat(methodUrl)) && this.props.controlMap.get(\"Copy\".concat(methodUrl)).ncontrolcode;\n    const completeId = this.props.controlMap && this.props.controlMap.has(\"Complete\".concat(methodUrl)) && this.props.controlMap.get(\"Complete\".concat(methodUrl)).ncontrolcode;\n    const switchId = this.props.controlMap && this.props.switchParam && this.props.controlMap.has(this.props.switchParam.operation.concat(methodUrl)) && this.props.controlMap.get(this.props.switchParam.operation.concat(methodUrl)).ncontrolcode;\n    const cancelId = this.props.controlMap && this.props.controlMap.has(\"Cancel\".concat(methodUrl)) && this.props.controlMap.get(\"Cancel\".concat(methodUrl)).ncontrolcode; // const receiveGoodsId = this.props.controlMap.has(\"Receive\".concat(methodUrl))\n    //     && this.props.controlMap.get(\"Receive\".concat(methodUrl)).ncontrolcode;\n\n    const downloadId = this.props.controlMap && this.props.controlMap.has(\"Download\".concat(methodUrl)) && this.props.controlMap.get(\"Download\".concat(methodUrl)).ncontrolcode;\n    const resentId = this.props.controlMap && this.props.controlMap.has(\"Resent\") && this.props.controlMap.get(\"Resent\").ncontrolcode;\n    const selectedId = this.props.selectedId; // const confirmMessage = new ConfirmMessage();\n    //console.log(\"props:\",this.props);\n\n    const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: this.props.Login.userInfo.slanguagetypecode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }\n    }, this.props.iscsv ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CSVLink, {\n      data: this.props.ELNTest ? this.props.ELNTest : this.props.data,\n      filename: this.props.selectedfilename + \".csv\",\n      headers: this.props.batchCSViewList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 45\n      }\n    }, this.props.ELNTest ? this.props.intl.formatMessage({\n      id: \"IDS_EXPORTTOELN\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_EXPORTCSV\"\n    })))), /*#__PURE__*/React.createElement(\"style\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 33\n      }\n    }, ttfFont)) : \"\", /*#__PURE__*/React.createElement(ExcelExport, {\n      data: process(this.props.data || [], {\n        sort: this.props.dataState.sort,\n        filter: this.props.dataState.filter,\n        group: this.props.dataState.group\n      }).data,\n      filterable: true // fileName={this.props.inputParam && this.props.intl.formatMessage({ id: this.props.inputParam.displayName })}\n      ,\n      group: this.props.dataState.group,\n      ref: exporter => {\n        // console.log(exporter);\n        this._excelExport = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: this.props.dataResult && this.props.dataResult.length > 0 || this.props.extractedColumnList && this.props.extractedColumnList.length > 0 ? \"active-paging\" : \"no-paging\",\n      style: {\n        height: this.props.gridHeight,\n        width: this.props.gridWidth\n      },\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: this.props.scrollable,\n      pageable: this.props.pageable && this.props.data && this.props.data.length > 0 ? {\n        buttonCount: 5,\n        pageSizes: pageSizes,\n        previousNext: false\n      } : false // pageable={this.props.pageable ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : \"\"}\n      ,\n      groupable: this.props.groupable ? true : false,\n      detail: this.props.hideDetailBand ? false : this.detailBand,\n      expandField: (this.props.detailedFieldList && this.props.detailedFieldList.length > 0 || this.props.childColumnList && this.props.childColumnList.length > 0) && this.props.expandField ? this.props.expandField : false,\n      onExpandChange: this.expandChange,\n      data: this.props.dataResult,\n      total: this.props.total\n    }, this.props.dataState, {\n      selectedField: \"selected\",\n      onRowClick: this.props.handleRowClick,\n      onDataStateChange: this.props.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(GridNoRecords, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })), this.props.isToolBarRequired ? /*#__PURE__*/React.createElement(GridToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 37\n      }\n    }, this.props.isAddRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(addId) === -1,\n      onClick: () => this.props.addRecord(addId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 49\n      }\n    })), this.props.isRefreshRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: () => this.props.reloadData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 49\n      }\n    })), this.props.isImportRequired === true ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EXPORTTEMPLATE\"\n      }) //data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: this.exportExcelHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_IMPORTDATA\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: () => this.props.import(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileImport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 53\n      }\n    }))) : \"\", this.props.isDownloadPDFRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADPDF\"\n      }) // data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: this.exportPDF,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFilePdf,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 49\n      }\n    })), this.props.isDownloadExcelRequired === false ? \"\" : /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADEXCEL\"\n      }) //data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: this.exportExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileExcel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 49\n      }\n    })), this.props.isExportExcelRequired === true ? /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey\",\n      variant: \"link\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DOWNLOADCSV\"\n      }) //data-for=\"tooltip-grid-wrap\"\n      ,\n      onClick: () => this.props.exportExcelNew(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileCsv,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 49\n      }\n    })) : \"\") : \"\", this.props.extractedColumnList.map((item, index) => item.idsName && /*#__PURE__*/React.createElement(GridColumn, Object.assign({\n      key: index // data-tip={this.props.intl.formatMessage({ id: item.idsName })}\n      ,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      })\n    }, this.columnProps(item.dataField), {\n      width: item.width,\n      cell: row => row.rowType === \"groupHeader\" ? null : item.componentName === \"switch\" ? /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        disabled: item.needRights ? this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(this.props.controlMap.has(item.controlName) && this.props.controlMap.get(item.controlName).ncontrolcode) === -1 : false,\n        onChange: event => this.props.onSwitchChange({ ...this.props.switchParam,\n          selectedRecord: row[\"dataItem\"],\n          ncontrolCode: switchId\n        }, event),\n        checked: row[\"dataItem\"][item.switchFieldName] === item.switchStatus ? true : false,\n        name: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 61\n        }\n      })) : item.componentName === \"checkbox\" ? /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FormCheckbox, {\n        name: row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        type: \"checkbox\",\n        value: row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false,\n        isMandatory: false,\n        required: false //checked={row[\"dataItem\"][item.checkBoxField] === item.switchStatus ? true : false}\n        ,\n        checked: row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false,\n        onChange: event => this.props.onInputOnChange(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 65\n        }\n      })) : item.fieldType === \"gradeColumn\" ? row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] // data-for=\"tooltip_grid_wrap\"\n        ,\n        className: `${selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}`,\n        style: {\n          color: [row[\"dataItem\"]['scolorhexcode']]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 57\n        }\n      }, row[\"dataItem\"][item.dataField]) : /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField] //data-for=\"tooltip-grid-wrap\"\n        ,\n        className: selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 61\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 84\n        }\n      }) : row[\"dataItem\"][item.dataField] // : row[\"dataItem\"][item.dataField] ? row[\"dataItem\"][item.dataField] :\n      //     this.props.jsonField ? row[\"dataItem\"][this.props.jsonField] &&\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField]&&\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField]['label'] ||\n      //         row[\"dataItem\"][this.props.jsonField][item.dataField]\n      , \"       \", item.dataType && item.dataType[0] === 'files' ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        icon: faCloudDownloadAlt,\n        className: \"ml-2 className action-icons-wrap\",\n        size: \"lg\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DOWNLOAD\"\n        }),\n        \"data-place\": \"left\",\n        onClick: () => this.props.dynamicFileDownload({ ...item,\n          ...row.dataItem,\n          userInfo: this.props.Login.userInfo,\n          ...this.props.viewFileURL\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCloudDownloadAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 77\n        }\n      })) : \"\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 41\n      }\n    }))), this.props.isActionRequired ? /*#__PURE__*/React.createElement(GridColumn, {\n      locked: true,\n      headerClassName: \"text-center\",\n      title: this.props.intl.formatMessage({\n        id: 'IDS_ACTION'\n      }),\n      sort: false,\n      cell: row => row.rowType === \"groupHeader\" ? null : /*#__PURE__*/React.createElement(\"td\", {\n        className: `k-grid-content-sticky k-command-cell selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`,\n        style: {\n          left: '0',\n          right: '0',\n          borderRightWidth: '1px',\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Nav.Link, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }) // data-for=\"tooltip-grid-wrap\"\n        ,\n        \"data-place\": \"left\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1,\n        onClick: () => this.props.fetchRecord({ ...this.props.editParam,\n          primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField],\n          editRow: row[\"dataItem\"],\n          ncontrolCode: editId\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSYNONYMN\"\n        }) //  data-for=\"tooltip-grid-wrap\"\n        ,\n        \"data-place\": \"left\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(languagesId) === -1,\n        onClick: () => this.props.languagesRecord({ ...this.props.languagesParam,\n          primaryKeyValue: row[\"dataItem\"][this.props.languagesParam.primaryKeyField],\n          languagesRow: row[\"dataItem\"],\n          ncontrolCode: languagesId\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faLanguage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 65\n        }\n      })), \"        \", /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        \"data-place\": \"top\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1,\n        onClick: () => this.handleClickDelete({ ...this.props.deleteParam,\n          selectedRecord: row[\"dataItem\"],\n          ncontrolCode: deleteId\n        }, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(downloadId) === -1,\n        onClick: () => this.props.viewDownloadFile({ ...this.props.masterdata,\n          ...this.props.downloadParam,\n          inputData: { ...row[\"dataItem\"],\n            userinfo: this.props.Login.userInfo\n          },\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: downloadId\n        }, row),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DOWNLOADFILE\"\n        }),\n        \"data-place\": \"left\" //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCloudDownloadAlt //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 65\n        }\n      })), this.props.isreportview ? /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\" //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewreport) === -1}\n        ,\n        onClick: () => this.props.viewReportFile({ ...this.props.masterdata,\n          ...this.props.downloadParam,\n          inputData: { ...row[\"dataItem\"],\n            userinfo: this.props.Login.userInfo\n          },\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: downloadId\n        }, row),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_VIEWREPORT\"\n        }),\n        \"data-place\": \"left\" //  data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faEye //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 69\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_APPROVE\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(approveId) === -1,\n        onClick: () => this.props.approveRecord(row, \"Approve\", approveId),\n        \"data-place\": \"left\" //data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faThumbsUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COPY\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(copyId) === -1,\n        onClick: () => this.props.copyRecord(row, \"Copy\", copyId),\n        \"data-place\": \"left\" // data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCopy,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(completeId) === -1,\n        onClick: () => this.props.completeRecord(row[\"dataItem\"], \"Complete\", completeId),\n        \"data-place\": \"left\" // data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheck,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_RESENT\"\n        }),\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(resentId) === -1,\n        onClick: () => this.props.reSent(row[\"dataItem\"], \"Resent\", resentId),\n        \"data-place\": \"left\" //data-for=\"tooltip-grid-wrap\"\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faRedo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 65\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }),\n        \"data-place\": \"left\" //data-for=\"tooltip-grid-wrap\"\n        ,\n        hidden: this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(cancelId) === -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 591,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Image, {\n        src: reject,\n        alt: \"filer-icon action-icons-wrap\",\n        width: \"20\",\n        height: \"20\",\n        className: \"ActionIconColor img-normalize\",\n        onClick: () => this.props.cancelRecord(row[\"dataItem\"], \"Cancel\", cancelId),\n        \"data-place\": \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593,\n          columnNumber: 65\n        }\n      })), this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map(action => /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": action.title,\n        hidden: action.hidden === undefined ? true : action.hidden,\n        onClick: () => action.onClick(row[\"dataItem\"], action, row),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 65\n        }\n      }, getActionIcon(action.controlname))), this.props.hasControlWithOutRights && /*#__PURE__*/React.createElement(React.Fragment, null, this.props.showeditRecordWORights && /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }) //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \n        ,\n        \"data-place\": \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilAlt //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\n        ,\n        name: \"deleteworights\",\n        onClick: () => this.props.editRecordWORights(row[\"dataItem\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 77\n        }\n      })), this.props.showeditRecordWORights && /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_LANGUAGESCONVERTER\"\n        }) //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \n        ,\n        \"data-place\": \"left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faLanguage //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\n        ,\n        name: \"deleteworights\",\n        onClick: () => this.props.editRecordWORights(row[\"dataItem\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 77\n        }\n      })), this.props.showdeleteRecordWORights && /*#__PURE__*/React.createElement(FontIconWrap, {\n        className: \"d-font-icon action-icons-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }) // data-for=\"tooltip-grid-wrap\"\n        ,\n        onClick: () => this.props.deleteRecordWORights(row[\"dataItem\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faTrashAlt //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\n        ,\n        name: \"deleteworights\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 77\n        }\n      })))))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 37\n      }\n    }) : \"\"), [...this.props.extractedColumnList].map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }) + (item.dateField ? '(dd-mm-yyy)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 33\n      }\n    })), this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }) + (item.dateField ? '(dd-mm-yyy)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(ExcelExport, {\n      data: [] //group={group}\n      ,\n      collapsible: true,\n      fileName: this.props.screenName && this.props.screenName,\n      ref: exporter => {\n        // console.log(exporter);\n        this._excelExportHeader = exporter;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 25\n      }\n    }, [...this.props.extractedColumnList].map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.dataField\n      }) + '(' + this.props.intl.formatMessage({\n        id: item.idsName\n      }) + ')' + (item.dateField ? '(dd-mm-yyy)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 33\n      }\n    })), this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) => /*#__PURE__*/React.createElement(ExcelExportColumn, {\n      field: item.dataField,\n      title: this.props.intl.formatMessage({\n        id: item.dataField\n      }) + '(' + this.props.intl.formatMessage({\n        id: item.idsName\n      }) + ')' + (item.dateField ? '(dd-mm-yyy)' : \"\"),\n      width: 200,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 37\n      }\n    })))), this.props.isToolBarRequired ? /*#__PURE__*/React.createElement(\"ttfStyle\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(GridPDFExport, {\n      ref: element => {\n        this._pdfExport = element;\n      },\n      margin: \"1cm\" // paperSize= \"A4\"\n      ,\n      scale: 0.75,\n      fileName: \"Export.pdf\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      data: process(this.props.data || [], {\n        sort: this.props.dataState.sort,\n        filter: this.props.dataState.filter,\n        group: this.props.dataState.group\n      }),\n      group: this.props.dataState.group,\n      groupable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701,\n        columnNumber: 41\n      }\n    }, this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(GridColumn, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      field: item.dataField,\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 57\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 80\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 49\n      }\n    })), this.props.detailedFieldList && this.props.detailedFieldList.map((item, index) => /*#__PURE__*/React.createElement(GridColumn, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }),\n      field: item.dataField,\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 61\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 722,\n          columnNumber: 84\n        }\n      }) : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 53\n      }\n    })))), /*#__PURE__*/React.createElement(\"style\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 33\n      }\n    }, ttfFont)) : \"\"));\n  }\n\n  componentDidUpdate() {\n    ReactTooltip.rebuild();\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  dynamicFileDownload,\n  undefined\n})(injectIntl(DataGrid));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/data-grid/data-grid.component.jsx"],"names":["faCheck","faCloudDownloadAlt","faCopy","faEye","faFileCsv","faFileExcel","faFileImport","faFilePdf","faLanguage","faPencilAlt","faPlus","faRedo","faSync","faThumbsUp","faTrashAlt","FontAwesomeIcon","ExcelExport","ExcelExportColumn","Grid","GridColumn","GridColumnMenuFilter","GridNoRecords","GridToolbar","GridPDFExport","React","Button","Card","Col","FormGroup","FormLabel","Image","Nav","Row","FormattedMessage","injectIntl","AtTableWrap","FontIconWrap","FormControlStatic","ColumnMenu","SimpleGrid","process","LocalizationProvider","parse","CSVLink","connect","toast","ReactTooltip","ttfFont","ConfirmMessage","getActionIcon","CustomSwitch","FormCheckbox","dynamicFileDownload","DataGrid","Component","constructor","props","detailBand","hasDynamicColSize","detailedFieldList","length","marginLeft","map","item","columnSize","idsName","dataItem","dataField","undefined","isIdsField","isHTML","dataType","intl","formatMessage","id","inputParam","userInfo","Login","viewFileURL","hasChild","childList","get","parseInt","childMappingField","childColumnList","expandChange","event","isExpanded","expanded","aggregates","value","handleExpandChange","dataState","setState","exportExcel","dataResult","data","_excelExport","save","info","exportExcelHeader","_excelExportHeader","exportPDF","_pdfExport","handleClickDelete","deleteParam","row","confirmMessage","confirm","deleteRecord","columnProps","field","hideColumnFilter","returntype","columnMenu","headerClassName","isColumnActive","active","filter","render","methodUrl","addId","controlMap","has","concat","ncontrolcode","editId","languagesId","deleteId","approveId","copyId","completeId","switchId","switchParam","operation","cancelId","downloadId","resentId","selectedId","pageSizes","settings","split","setting","actionColWidth","slanguagetypecode","iscsv","ELNTest","selectedfilename","batchCSViewList","sort","group","exporter","extractedColumnList","height","gridHeight","width","gridWidth","scrollable","pageable","buttonCount","previousNext","groupable","hideDetailBand","expandField","total","handleRowClick","dataStateChange","isToolBarRequired","isAddRequired","userRoleControlRights","indexOf","addRecord","isRefreshRequired","reloadData","isImportRequired","import","isDownloadPDFRequired","isDownloadExcelRequired","isExportExcelRequired","exportExcelNew","index","rowType","componentName","textAlign","primaryKeyField","dataIndex","columnIndex","needRights","controlName","onSwitchChange","selectedRecord","ncontrolCode","switchFieldName","switchStatus","checkBoxField","onInputOnChange","fieldType","color","isActionRequired","left","right","borderRightWidth","fetchRecord","editParam","primaryKeyValue","editRow","languagesRecord","languagesParam","languagesRow","viewDownloadFile","masterdata","downloadParam","inputData","userinfo","isreportview","viewReportFile","approveRecord","copyRecord","completeRecord","reSent","reject","cancelRecord","actionIcons","action","title","hidden","onClick","controlname","hasControlWithOutRights","showeditRecordWORights","editRecordWORights","showdeleteRecordWORights","deleteRecordWORights","dateField","screenName","element","componentDidUpdate","rebuild","mapStateToProps","state"],"mappings":"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","sourcesContent":["import {\r\n    faCheck,\r\n    faCloudDownloadAlt,\r\n    faCopy,\r\n    faEye,\r\n    faFileCsv,\r\n    faFileExcel,\r\n    faFileImport,\r\n    faFilePdf,\r\n    faLanguage,\r\n    faPencilAlt,\r\n    faPlus,\r\n    faRedo,\r\n    faSync,\r\n    faThumbsUp,\r\n    faTrashAlt\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { ExcelExport, ExcelExportColumn } from '@progress/kendo-react-excel-export';\r\nimport { Grid, GridColumn, GridColumnMenuFilter, GridNoRecords, GridToolbar } from '@progress/kendo-react-grid';\r\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\r\nimport React from 'react';\r\nimport { Button, Card, Col, FormGroup, FormLabel, Image, Nav, Row } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { AtTableWrap, FontIconWrap, FormControlStatic } from '../data-grid/data-grid.styles';\r\nimport ColumnMenu from './ColumnMenu';\r\nimport SimpleGrid from './SimpleGrid';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport parse from 'html-react-parser';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport reject from '../../assets/image/reject.svg';\r\nimport { ttfFont } from '../../assets/styles/ttfFont';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { getActionIcon } from '../HoverIcons';\r\nimport CustomSwitch from '../custom-switch/custom-switch.component'; // import '../../assets/styles/unicode-font.css';\r\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\r\nimport { dynamicFileDownload } from '../../actions/ServiceAction';\r\n\r\n\r\nclass DataGrid extends React.Component {\r\n\r\n    _pdfExport;\r\n    _excelExport;\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n    }\r\n\r\n\r\n    detailBand = (props) => {\r\n\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                    {this.props.hasDynamicColSize ?\r\n                        <div>\r\n                            {this.props.detailedFieldList.length > 0 &&\r\n                                <div>\r\n                                    <Card>\r\n                                        <Card.Header><FormattedMessage id=\"IDS_MOREINFO\" message=\"More Info\" /></Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row style={{ marginLeft: -18 }}>\r\n                                                {this.props.detailedFieldList.map((item) => {\r\n                                                    return (\r\n\r\n                                                        <Col md={item.columnSize}>\r\n                                                            <FormGroup>\r\n                                                                <FormLabel><FormattedMessage id={item.idsName} message={item.idsName} /></FormLabel>\r\n                                                                <FormControlStatic>\r\n                                                                    {\r\n                                                                        props.dataItem[item.dataField] === undefined ||\r\n                                                                            props.dataItem[item.dataField] === null ||\r\n                                                                            props.dataItem[item.dataField].length === 0 ? '-' :\r\n                                                                            item.isIdsField ? <FormattedMessage id={props.dataItem[item.dataField]} message={props.dataItem[item.dataField]} /> :\r\n                                                                                item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField]}\r\n                                                                              {item.dataType && item.dataType[0] === 'files' ?\r\n                                                                                <FontIconWrap icon={faCloudDownloadAlt} className=\"ml-2 className action-icons-wrap\" size=\"lg\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOAD\" })}\r\n                                                                                    data-place=\"left\"\r\n                                                                                    onClick={() => this.props.dynamicFileDownload({ ...props.dataItem, ...this.props.inputParam, ...item,userInfo:this.props.Login.userInfo,...this.props.viewFileURL })}>\r\n                                                                                    <FontAwesomeIcon icon={faCloudDownloadAlt} />\r\n                                                                                </FontIconWrap> : \"\"\r\n                                                                            }\r\n                                                                </FormControlStatic>\r\n                                                            </FormGroup>\r\n                                                        </Col>\r\n                                                    )\r\n                                                })}\r\n                                            </Row>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n\r\n                        : this.props.hasChild ?\r\n                            <SimpleGrid childList={this.props.childList.get(parseInt(props.dataItem[this.props.childMappingField])) || []}\r\n                                extractedColumnList={this.props.childColumnList} />\r\n                            :\r\n                            <div>\r\n\r\n                                {this.props.detailedFieldList.length > 0 &&\r\n                                    <div>\r\n                                        <row>\r\n                                            <Card>\r\n                                                <Card.Header><FormattedMessage id=\"IDS_MOREINFO\" message=\"More Info\" /></Card.Header>\r\n                                                <Card.Body className=\"form-static-wrap\">\r\n                                                    {\r\n                                                        this.props.detailedFieldList.map((item) => {\r\n                                                            return (\r\n\r\n                                                                <Col md={6}>\r\n                                                                    <FormGroup>\r\n                                                                        <FormLabel><FormattedMessage id={item.idsName} message={item.idsName} /></FormLabel>\r\n                                                                        <FormControlStatic>\r\n                                                                            {props.dataItem[item.dataField] === undefined || props.dataItem[item.dataField] === null || props.dataItem[item.dataField].length === 0 ? '-' :\r\n                                                                                item.isIdsField ? <FormattedMessage id={props.dataItem[item.dataField]} message={props.dataItem[item.dataField]} /> : item.isHTML ? parse(props.dataItem[item.dataField]) : props.dataItem[item.dataField]}\r\n\r\n                                                                            {item.dataType && item.dataType[0] === 'files' ?\r\n                                                                                <FontIconWrap icon={faCloudDownloadAlt} className=\"ml-2 className action-icons-wrap\" size=\"lg\"\r\n                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOAD\" })}\r\n                                                                                    data-place=\"left\"\r\n                                                                                    onClick={() => this.props.dynamicFileDownload({ ...props.dataItem, ...this.props.inputParam, ...item ,userInfo:this.props.Login.userInfo,...this.props.viewFileURL})}>\r\n                                                                                    <FontAwesomeIcon icon={faCloudDownloadAlt} />\r\n                                                                                </FontIconWrap> : \"\"\r\n                                                                            }\r\n                                                                        </FormControlStatic>\r\n                                                                    </FormGroup>\r\n\r\n                                                                </Col>\r\n                                                            )\r\n                                                        })}\r\n\r\n                                                </Card.Body>\r\n                                            </Card>\r\n                                        </row>\r\n                                    </div>\r\n                                }\r\n\r\n                            </div>}\r\n                </Col> </Row>\r\n        )\r\n    }\r\n\r\n    expandChange = (event) => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined ?\r\n                event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        if (this.props.hasChild && event.value === true) {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.props.handleExpandChange(event, this.props.dataState)\r\n        }\r\n        else {\r\n            event.dataItem.expanded = !isExpanded;\r\n            this.setState({ isExpanded });\r\n        }\r\n    }\r\n\r\n\r\n    exportExcel = () => {\r\n        if (this.props.dataResult.data.length > 0) {\r\n            this._excelExport.save();\r\n        }\r\n        else\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    exportExcelHeader = () => {\r\n        //  if (this.props.dataResult.data.length > 0) {\r\n        this._excelExportHeader.save();\r\n        // }\r\n        // else\r\n        //     toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    exportPDF = () => {\r\n        if (this.props.dataResult.data.length > 0)\r\n            this._pdfExport.save();\r\n        else\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n\r\n    columnProps(field) {\r\n        if (!this.props.hideColumnFilter) {\r\n\r\n            const returntype = {\r\n                field: field,\r\n                columnMenu: ColumnMenu,\r\n                headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\r\n            }\r\n            return returntype;\r\n        }\r\n    }\r\n\r\n    isColumnActive(field, dataState) {\r\n        return GridColumnMenuFilter.active(field, dataState.filter)\r\n    }\r\n\r\n    handleClickDelete = (deleteParam, row) => {\r\n        //this.props.deleteRecord(deleteParam);\r\n\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.props.deleteRecord(deleteParam, row));\r\n    }\r\n\r\n    render() {\r\n\r\n        //console.log(\"controlMap:\", this.props);\r\n        //  loadMessages(messages[this.props.Login.userInfo.slanguagetypecode], \"lang\");\r\n        const methodUrl = this.props.methodUrl ? this.props.methodUrl : (this.props.inputParam && this.props.inputParam.methodUrl);\r\n\r\n        const addId = this.props.controlMap && this.props.controlMap.has(\"Add\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Add\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const editId = this.props.controlMap && this.props.controlMap.has(\"Edit\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Edit\".concat(methodUrl)).ncontrolcode;\r\n\r\n        {/* Add by Neeraj kumar for Language screen -RMTP-101*/ }\r\n        const languagesId = this.props.controlMap && this.props.controlMap.has(\"Update\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Update\".concat(methodUrl)).ncontrolcode;\r\n\r\n        // const viewId = this.props.controlMap.has(\"View\".concat(methodUrl))\r\n        //     && this.props.controlMap.get(\"View\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const deleteId = this.props.controlMap && this.props.controlMap.has(\"Delete\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Delete\".concat(methodUrl)).ncontrolcode;\r\n\r\n        // const defaultId = this.props.controlMap && this.props.controlMap.has(\"Default\".concat(methodUrl))\r\n        //     && this.props.controlMap.get(\"Default\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const approveId = this.props.controlMap && this.props.controlMap.has(\"Approve\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Approve\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const copyId = this.props.controlMap && this.props.inputParam && this.props.controlMap.has(\"Copy\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Copy\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const completeId = this.props.controlMap && this.props.controlMap.has(\"Complete\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Complete\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const switchId = this.props.controlMap && this.props.switchParam && this.props.controlMap.has(this.props.switchParam.operation.concat(methodUrl))\r\n            && this.props.controlMap.get(this.props.switchParam.operation.concat(methodUrl)).ncontrolcode;\r\n\r\n        const cancelId = this.props.controlMap && this.props.controlMap.has(\"Cancel\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Cancel\".concat(methodUrl)).ncontrolcode;\r\n\r\n        // const receiveGoodsId = this.props.controlMap.has(\"Receive\".concat(methodUrl))\r\n        //     && this.props.controlMap.get(\"Receive\".concat(methodUrl)).ncontrolcode;\r\n        const downloadId = this.props.controlMap && this.props.controlMap.has(\"Download\".concat(methodUrl))\r\n            && this.props.controlMap.get(\"Download\".concat(methodUrl)).ncontrolcode;\r\n\r\n        const resentId = this.props.controlMap && this.props.controlMap.has(\"Resent\")\r\n            && this.props.controlMap.get(\"Resent\").ncontrolcode;\r\n\r\n        const selectedId = this.props.selectedId;\r\n        // const confirmMessage = new ConfirmMessage();\r\n        //console.log(\"props:\",this.props);\r\n        const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                    {/* <Tooltip openDelay={100} position=\"bottom\" tooltipClassName=\"ad-tooltip\" anchorElement=\"element\" parentTitle={true}> */}\r\n                    <LocalizationProvider language={this.props.Login.userInfo.slanguagetypecode}>\r\n                        {this.props.iscsv ?\r\n                            <>\r\n                                {\r\n                                    <>\r\n                                        <div className=\"d-flex justify-content-end\">\r\n                                            <CSVLink data={this.props.ELNTest ? this.props.ELNTest : this.props.data} filename={this.props.selectedfilename + \".csv\"}\r\n                                                headers={this.props.batchCSViewList}\r\n                                            >{this.props.ELNTest ? this.props.intl.formatMessage({ id: \"IDS_EXPORTTOELN\" }) : this.props.intl.formatMessage({ id: \"IDS_EXPORTCSV\" })}</CSVLink>\r\n                                        </div>\r\n\r\n                                    </>\r\n                                }\r\n                                <style>{ttfFont}</style>\r\n\r\n                            </> : \"\"}\r\n                        <ExcelExport\r\n                            data={process(this.props.data || [], { sort: this.props.dataState.sort, filter: this.props.dataState.filter, group: this.props.dataState.group }).data}\r\n                            filterable={true}\r\n                            // fileName={this.props.inputParam && this.props.intl.formatMessage({ id: this.props.inputParam.displayName })}\r\n                            group={this.props.dataState.group}\r\n                            ref={(exporter) => {\r\n                                // console.log(exporter);\r\n                                this._excelExport = exporter;\r\n                            }}>\r\n                            <Grid\r\n                                className={((this.props.dataResult && this.props.dataResult.length > 0) || (this.props.extractedColumnList && this.props.extractedColumnList.length > 0)) ? \"active-paging\" : \"no-paging\"}\r\n                                style={{ height: this.props.gridHeight, width: this.props.gridWidth }}\r\n                                sortable\r\n                                resizable\r\n                                reorderable={false}\r\n                                scrollable={this.props.scrollable}\r\n                                pageable={this.props.pageable && this.props.data && this.props.data.length > 0 ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : false}\r\n                                // pageable={this.props.pageable ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : \"\"}\r\n                                groupable={this.props.groupable ? true : false}\r\n                                detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                                expandField={(this.props.detailedFieldList && this.props.detailedFieldList.length > 0 || this.props.childColumnList && this.props.childColumnList.length > 0) && this.props.expandField ? this.props.expandField : false}\r\n                                onExpandChange={this.expandChange}\r\n                                data={this.props.dataResult}\r\n                                total={this.props.total}\r\n                                {...this.props.dataState}\r\n                                selectedField=\"selected\"\r\n                                onRowClick={this.props.handleRowClick}\r\n                                onDataStateChange={this.props.dataStateChange}>\r\n                                <GridNoRecords>\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                                </GridNoRecords>\r\n                                {this.props.isToolBarRequired ?\r\n                                    <GridToolbar>\r\n                                        {this.props.isAddRequired === false ? \"\" :\r\n                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(addId) === -1}\r\n                                                onClick={() => this.props.addRecord(addId)}>\r\n                                                <FontAwesomeIcon icon={faPlus} />\r\n                                            </Button>\r\n                                        }\r\n                                        {this.props.isRefreshRequired === false ? \"\" :\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={() => this.props.reloadData()}>\r\n                                                <FontAwesomeIcon icon={faSync} />\r\n                                            </Button>\r\n                                        }\r\n                                        {this.props.isImportRequired === true ?\r\n                                            <>\r\n                                                <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EXPORTTEMPLATE\" })}\r\n                                                    //data-for=\"tooltip-grid-wrap\"\r\n                                                    onClick={this.exportExcelHeader}>\r\n                                                    <FontAwesomeIcon icon={faFileExcel} />\r\n                                                </Button>\r\n                                                <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTDATA\" })}\r\n                                                    // data-for=\"tooltip-grid-wrap\"\r\n                                                    onClick={() => this.props.import()}>\r\n                                                    <FontAwesomeIcon icon={faFileImport} />\r\n                                                </Button>\r\n                                            </> : \"\"\r\n                                        }\r\n\r\n                                        {this.props.isDownloadPDFRequired === false ? \"\" :\r\n\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADPDF\" })}\r\n                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={this.exportPDF}>\r\n                                                <FontAwesomeIcon icon={faFilePdf} />\r\n                                            </Button>\r\n                                        }\r\n                                        {/* : \"\"\r\n                                        } */}\r\n                                        {this.props.isDownloadExcelRequired === false ? \"\" :\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADEXCEL\" })}\r\n                                                //data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={this.exportExcel}>\r\n                                                <FontAwesomeIcon icon={faFileExcel} />\r\n                                            </Button>\r\n                                        }\r\n\r\n\r\n\r\n                                        {this.props.isExportExcelRequired === true ?\r\n                                            <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADCSV\" })}\r\n                                                //data-for=\"tooltip-grid-wrap\"\r\n                                                onClick={() => this.props.exportExcelNew()}>\r\n                                                <FontAwesomeIcon icon={faFileCsv} />\r\n                                            </Button>\r\n                                            : \"\"\r\n                                        }\r\n                                        {/* <Button className=\"btn btn-circle outline-grey\" variant=\"link\"\r\n                                            title=\"Download Excel\"\r\n                                            onClick={this.exportExcel}>\r\n                                            <FontAwesomeIcon icon={faFileExcel} />\r\n                                        </Button> */}\r\n\r\n                                    </GridToolbar>\r\n                                    : \"\"}\r\n                                {\r\n                                    this.props.extractedColumnList.map((item, index) =>\r\n                                        item.idsName &&\r\n                                        <GridColumn key={index}\r\n                                            // data-tip={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                            title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                            {...this.columnProps(item.dataField)}\r\n                                            width={item.width}\r\n                                            cell={(row) => (\r\n                                                row.rowType === \"groupHeader\" ? null :\r\n                                                    item.componentName === \"switch\" ?\r\n                                                        <td style={{ textAlign: \"center\" }}>\r\n                                                            <CustomSwitch type=\"switch\" id={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                disabled={item.needRights ? this.props.userRoleControlRights\r\n                                                                    && this.props.userRoleControlRights.indexOf(\r\n                                                                        this.props.controlMap.has(item.controlName) && this.props.controlMap.get(item.controlName).ncontrolcode\r\n                                                                    ) === -1 : false}\r\n                                                                onChange={(event) => this.props.onSwitchChange({ ...this.props.switchParam, selectedRecord: row[\"dataItem\"], ncontrolCode: switchId }, event)}\r\n                                                                checked={row[\"dataItem\"][item.switchFieldName] === item.switchStatus ? true : false}\r\n                                                                name={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                        </td> :\r\n                                                        item.componentName === \"checkbox\" ?\r\n                                                            <td>\r\n                                                                <FormCheckbox\r\n                                                                    name={row[\"dataItem\"][this.props.primaryKeyField] + \"_\" + row.dataIndex + \"_\" + row.columnIndex}\r\n                                                                    type=\"checkbox\"\r\n                                                                    value={row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false}\r\n                                                                    isMandatory={false}\r\n                                                                    required={false}\r\n                                                                    //checked={row[\"dataItem\"][item.checkBoxField] === item.switchStatus ? true : false}\r\n                                                                    checked={row[\"dataItem\"][item.checkBoxField] !== 0 ? true : false}\r\n                                                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                                                />\r\n                                                            </td> :\r\n                                                        item.fieldType === \"gradeColumn\" ?\r\n                                                        row.rowType === \"groupHeader\" ? null :\r\n                                                        <td\r\n                                                         data-tip={row[\"dataItem\"][item.dataField]}\r\n                                                        // data-for=\"tooltip_grid_wrap\"\r\n                                                        className={`${selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}`}\r\n                                                        style={{ color: [row[\"dataItem\"]['scolorhexcode']] }}\r\n                                                        >\r\n                                                        {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_grid_wrap\" /> */}\r\n                                                        {row[\"dataItem\"][item.dataField]}\r\n                                                        </td>:\r\n                                                            <td data-tip={row[\"dataItem\"][item.dataField]}\r\n                                                                //data-for=\"tooltip-grid-wrap\"\r\n                                                                className={selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''}>\r\n\r\n                                                                {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]}\r\n                                                                    defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                                    : row[\"dataItem\"][item.dataField]\r\n\r\n                                                                    // : row[\"dataItem\"][item.dataField] ? row[\"dataItem\"][item.dataField] :\r\n                                                                    //     this.props.jsonField ? row[\"dataItem\"][this.props.jsonField] &&\r\n                                                                    //         row[\"dataItem\"][this.props.jsonField][item.dataField]&&\r\n                                                                    //         row[\"dataItem\"][this.props.jsonField][item.dataField]['label'] ||\r\n                                                                    //         row[\"dataItem\"][this.props.jsonField][item.dataField]\r\n\r\n                                                                }       {\r\n                                                                    item.dataType && item.dataType[0] === 'files' ?\r\n                                                                        <FontIconWrap icon={faCloudDownloadAlt} className=\"ml-2 className action-icons-wrap\" size=\"lg\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOAD\" })}\r\n                                                                            data-place=\"left\"\r\n                                                                            onClick={() => this.props.dynamicFileDownload({ ...item, ...row.dataItem,userInfo:this.props.Login.userInfo,...this.props.viewFileURL })}>\r\n                                                                            <FontAwesomeIcon icon={faCloudDownloadAlt} />\r\n                                                                        </FontIconWrap> : \"\"\r\n                                                                }\r\n                                                            </td>\r\n                                            )}\r\n                                        />\r\n                                    )}\r\n\r\n                                {this.props.isActionRequired ?\r\n\r\n                                    <GridColumn\r\n                                        locked\r\n                                        headerClassName=\"text-center\"\r\n                                        title={this.props.intl.formatMessage({ id: 'IDS_ACTION' })}\r\n                                        sort={false}\r\n                                        cell={(row) => (\r\n\r\n                                            row.rowType === \"groupHeader\" ? null :\r\n                                                <td className={`k-grid-content-sticky k-command-cell selectedId === row[\"dataItem\"][this.props.primaryKeyField] ? 'active' : ''`} style={{ left: '0', right: '0', borderRightWidth: '1px', textAlign: 'center' }}>\r\n                                                    <>\r\n                                                        <Nav.Link>\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                // data-for=\"tooltip-grid-wrap\"\r\n                                                                data-place=\"left\"\r\n                                                                hidden={this.props.\r\n                                                                    userRoleControlRights && this.props.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                onClick={() => this.props.fetchRecord({ ...this.props.editParam, primaryKeyValue: row[\"dataItem\"][this.props.editParam.primaryKeyField], editRow: row[\"dataItem\"], ncontrolCode: editId })}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                            </FontIconWrap>\r\n                                                            {/* Add by Neeraj kumar for Language screen -RMTP-101*/}\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSYNONYMN\" })}\r\n                                                                //  data-for=\"tooltip-grid-wrap\"\r\n                                                                data-place=\"left\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(languagesId) === -1}\r\n                                                                onClick={() => this.props.languagesRecord({ ...this.props.languagesParam, primaryKeyValue: row[\"dataItem\"][this.props.languagesParam.primaryKeyField], languagesRow: row[\"dataItem\"], ncontrolCode: languagesId })}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faLanguage} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            {/* <FontAwesomeIcon icon={faEye}\r\n                                                    title={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewId) === -1}\r\n                                                    onClick={() => this.props.viewRecord({...this.props.viewParam, primaryKeyValue:row[\"dataItem\"][this.props.viewParam.primaryKeyField], viewRow:row[\"dataItem\"]})}/>\r\n                                                 */}        <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })} data-place=\"top\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                onClick={() => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                                {/* <ConfirmDialog\r\n                                                                    name=\"deleteMessage\"\r\n                                                                    cardTitle={this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" })}\r\n                                                                    title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    message={this.props.intl.formatMessage({ id: \"IDS_DELETECONFIRMMSG\" })}\r\n                                                                    doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                                    doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                                    icon={faTrashAlt}\r\n                                                                    handleClickDelete={() => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)}\r\n                                                                /> */}\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(downloadId) === -1}\r\n                                                                onClick={() => this.props.viewDownloadFile({ ...this.props.masterdata, ...this.props.downloadParam, inputData: { ...row[\"dataItem\"], userinfo: this.props.Login.userInfo }, userinfo: this.props.Login.userInfo, ncontrolCode: downloadId }, row)}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} data-place=\"left\"\r\n                                                            //  data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCloudDownloadAlt} //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })}\r\n                                                                />\r\n                                                            </FontIconWrap>\r\n                                                            {this.props.isreportview ?\r\n                                                                <FontIconWrap className=\"d-font-icon action-icons-wrap\"\r\n                                                                    //hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(viewreport) === -1}\r\n                                                                    onClick={() => this.props.viewReportFile({ ...this.props.masterdata, ...this.props.downloadParam, inputData: { ...row[\"dataItem\"], userinfo: this.props.Login.userInfo }, userinfo: this.props.Login.userInfo, ncontrolCode: downloadId }, row)}\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWREPORT\" })} data-place=\"left\"\r\n                                                                //  data-for=\"tooltip-grid-wrap\"\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faEye} //title={this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" })} \r\n                                                                    />\r\n                                                                </FontIconWrap>\r\n                                                                : \"\"}\r\n                                                            {/* <FontAwesomeIcon icon={faTrashAlt}\r\n                                                    title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                    onClick = {() => confirmMessage.confirm(\r\n                                                        \"deleteMessage\",\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                        () => this.handleClickDelete({ ...this.props.deleteParam, selectedRecord: row[\"dataItem\"], ncontrolCode: deleteId }, row)\r\n                                                    )}\r\n                                                /> */}\r\n\r\n                                                            {/* <FontAwesomeIcon icon={faThumbtack}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_SETDEFAULT\" })}\r\n                                                            hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(defaultId) === -1}\r\n                                                            onClick={() => this.props.defaultRecord({ ...this.props.defaultParam, selectedRecord: row[\"dataItem\"], ncontrolCode: defaultId }, row)} /> */}\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(approveId) === -1}\r\n                                                                onClick={() => this.props.approveRecord(row, \"Approve\", approveId)} data-place=\"left\"\r\n                                                            //data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faThumbsUp} />\r\n                                                            </FontIconWrap>\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COPY\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(copyId) === -1}\r\n                                                                onClick={() => this.props.copyRecord(row, \"Copy\", copyId)} data-place=\"left\"\r\n                                                            // data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCopy} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                onClick={() => this.props.completeRecord(row[\"dataItem\"], \"Complete\", completeId)} data-place=\"left\"\r\n                                                            // data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCheck} />\r\n                                                            </FontIconWrap>\r\n\r\n                                                            <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_RESENT\" })}\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(resentId) === -1}\r\n                                                                onClick={() => this.props.reSent(row[\"dataItem\"], \"Resent\", resentId)}\r\n                                                                data-place=\"left\" //data-for=\"tooltip-grid-wrap\"\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faRedo} />\r\n                                                            </FontIconWrap>\r\n\r\n\r\n                                                            <Nav.Link className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })} data-place=\"left\" //data-for=\"tooltip-grid-wrap\"\r\n                                                                hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(cancelId) === -1} >\r\n                                                                <Image src={reject} alt=\"filer-icon action-icons-wrap\" width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                    onClick={() => this.props.cancelRecord(row[\"dataItem\"], \"Cancel\", cancelId)} data-place=\"left\"\r\n                                                                />\r\n                                                            </Nav.Link>\r\n                                                            {/* <Button variant=\"link\" title={this.props.intl.formatMessage({ id: \"IDS_RECEIVE\" })}\r\n                                                    className=\"mr-2 action-icons-wrap\"\r\n                                                    hidden={this.props.userRoleControlRights && this.props.userRoleControlRights.indexOf(receiveGoodsId) === -1}\r\n                                                    onClick={() => this.props.receiveRecord({ ...this.props.receiveParam, selectedRecord: row[\"dataItem\"], ncontrolCode: receiveGoodsId })}>\r\n                                                    <Image src={checkedIcon} alt=\"filer-icon\" width=\"20\" height=\"20\" />\r\n                                                </Button> */}\r\n                                                            {this.props.actionIcons && this.props.actionIcons.length > 0 && this.props.actionIcons.map(action =>\r\n                                                                <FontIconWrap\r\n                                                                    className=\"d-font-icon action-icons-wrap\"\r\n                                                                    data-tip={action.title}\r\n                                                                    hidden={action.hidden === undefined ? true : action.hidden}\r\n                                                                    onClick={() => action.onClick(row[\"dataItem\"], action, row)}>\r\n                                                                    {getActionIcon(action.controlname)}\r\n                                                                </FontIconWrap>\r\n                                                            )}\r\n                                                            {this.props.hasControlWithOutRights &&\r\n                                                                <>\r\n                                                                    {this.props.showeditRecordWORights &&\r\n                                                                        <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                            //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \r\n                                                                            data-place=\"left\">\r\n                                                                            <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                                //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                name={\"deleteworights\"}\r\n                                                                                onClick={() => this.props.editRecordWORights(row[\"dataItem\"])}\r\n                                                                            />\r\n                                                                        </FontIconWrap>\r\n                                                                    }\r\n                                                                    {/* Add by Neeraj kumar for Language screen -RMTP-101*/}\r\n                                                                    {this.props.showeditRecordWORights &&\r\n                                                                        <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_LANGUAGESCONVERTER\" })}\r\n                                                                            //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} \r\n                                                                            data-place=\"left\">\r\n                                                                            <FontAwesomeIcon icon={faLanguage}\r\n                                                                                //title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                                name={\"deleteworights\"}\r\n                                                                                onClick={() => this.props.editRecordWORights(row[\"dataItem\"])}\r\n                                                                            />\r\n                                                                        </FontIconWrap>\r\n                                                                    }\r\n                                                                    {\r\n                                                                        this.props.showdeleteRecordWORights &&\r\n                                                                        <FontIconWrap className=\"d-font-icon action-icons-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                            // data-for=\"tooltip-grid-wrap\"\r\n                                                                            onClick={() => this.props.deleteRecordWORights(row[\"dataItem\"])}>\r\n                                                                            <FontAwesomeIcon icon={faTrashAlt}\r\n                                                                                //title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                                name={\"deleteworights\"}\r\n\r\n                                                                            />\r\n                                                                        </FontIconWrap>\r\n                                                                    }\r\n\r\n                                                                </>\r\n                                                            }\r\n                                                        </Nav.Link>\r\n                                                    </>\r\n\r\n                                                </td>\r\n                                        )}\r\n                                    /> : \"\"}\r\n                            </Grid>\r\n                            {[...this.props.extractedColumnList].map((item, index) =>\r\n                                <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.idsName }) + (item.dateField ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                            )}\r\n                            {this.props.detailedFieldList &&\r\n                                this.props.detailedFieldList.map((item, index) =>\r\n                                    <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.idsName }) + (item.dateField ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                                )}\r\n                        </ExcelExport>\r\n                        <ExcelExport\r\n                            data={[]}\r\n                            //group={group}\r\n                            collapsible={true}\r\n                            fileName={this.props.screenName && this.props.screenName}\r\n                            ref={(exporter) => {\r\n                                // console.log(exporter);\r\n                                this._excelExportHeader = exporter;\r\n                            }}>\r\n                            {//console.log(this.props.extractedColumnList)\r\n                            }\r\n                            {[...this.props.extractedColumnList].map((item, index) =>\r\n                                <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dateField ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                            )}\r\n                            {this.props.detailedFieldList &&\r\n                                this.props.detailedFieldList.map((item, index) =>\r\n                                    <ExcelExportColumn field={item.dataField} title={this.props.intl.formatMessage({ id: item.dataField }) + '(' + this.props.intl.formatMessage({ id: item.idsName }) + ')' + (item.dateField ? '(dd-mm-yyy)' : \"\")} width={200} />\r\n                                )}\r\n                        </ExcelExport>\r\n                    </LocalizationProvider >\r\n                    {/* </Tooltip> */}\r\n                    {\r\n                        this.props.isToolBarRequired ?\r\n                            <ttfStyle>\r\n                                <GridPDFExport\r\n                                    ref={(element) => { this._pdfExport = element; }}\r\n                                    margin=\"1cm\"\r\n                                    // paperSize= \"A4\"\r\n                                    scale={0.75}\r\n                                    fileName=\"Export.pdf\"\r\n\r\n                                >\r\n\r\n                                    {\r\n                                        <Grid data={process(this.props.data || [], { sort: this.props.dataState.sort, filter: this.props.dataState.filter, group: this.props.dataState.group })} group={this.props.dataState.group} groupable={true}>\r\n                                            {this.props.extractedColumnList.map((item, index) =>\r\n                                                <GridColumn key={index} title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                                    field={item.dataField}\r\n                                                    width={item.width}\r\n\r\n                                                    cell={(row) => (\r\n                                                        <td>\r\n                                                            {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                                : row[\"dataItem\"][item.dataField]}\r\n                                                        </td>)}\r\n                                                />\r\n                                            )}\r\n                                            {this.props.detailedFieldList &&\r\n                                                this.props.detailedFieldList.map((item, index) =>\r\n                                                    <GridColumn key={index} title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                                        field={item.dataField}\r\n                                                        width={item.width}\r\n\r\n                                                        cell={(row) => (\r\n                                                            <td>\r\n                                                                {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                                    : row[\"dataItem\"][item.dataField]}\r\n                                                            </td>)}\r\n                                                    />\r\n                                                )}\r\n\r\n\r\n                                        </Grid>}\r\n                                </GridPDFExport>\r\n\r\n                                <style>{ttfFont}</style>\r\n                            </ttfStyle>\r\n                            : \"\"\r\n                    }\r\n\r\n\r\n                </AtTableWrap >\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, {dynamicFileDownload,undefined})(injectIntl(DataGrid));"]},"metadata":{},"sourceType":"module"}