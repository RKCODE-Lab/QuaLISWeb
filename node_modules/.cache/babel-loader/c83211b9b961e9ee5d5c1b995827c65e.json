{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\reports\\\\reportsconfig\\\\ReportConfig.jsx\";\nimport React, { Component } from 'react';\nimport { faThumbsUp, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Col, Row, Button, FormGroup, FormLabel, Nav } from 'react-bootstrap';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport TransactionListMaster from '../../../components/TransactionListMaster';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport { designProperties } from '../../../components/Enumeration';\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\nimport { ProductList } from '../../testmanagement/testmaster-styled';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport SplitterLayout from \"react-splitter-layout\";\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\nimport '../../registration/registration.css';\nimport { callService, getReportMasterComboService, updateStore, getSelectedReportMasterDetail, getReportDetailComboService, getSelectedReportDetail, getConfigReportComboService, getParameterMappingComboService, //getActionMappingComboService, \nfilterTransactionList, getReportSubType, getregtype, crudMaster, getReportRegSubType, validateEsignCredential, getControlButton } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap, create_UUID, constructOptionList } from '../../../components/CommonScript';\nimport AddDesign from '../../../components/add-design/add-design.component';\nimport ParameterMapping from '../../../components/add-design/parameter-mapping.component';\nimport { reportTypeEnum, transactionStatus, RegistrationType } from '../../../components/Enumeration';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\nimport { designComponents } from '../../../components/Enumeration';\nimport Esign from '../../audittrail/Esign';\nimport AddReportMaster from './AddReportMaster';\nimport AddReportDetail from './AddReportDetail';\nimport AddAttachment from './AddAttachment';\nimport ReportConfigFilter from './ReportConfigFilter';\nimport { ReactComponent as ParameterConfigurationIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/parameter-configuration.svg\";\nimport { ReactComponent as ParameterMappingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../../assets/image/parameter-mapping.svg\";\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ReportConfig extends Component {\n  constructor(props) {\n    super(props); // const dataState = {\n    //     skip: 0,\n    //     take: 10,\n    // }; \n\n    this.onSecondaryPaneSizeChange = (e, val) => {\n      this.setState({\n        firstPane: e - val,\n        tabPane: e - 80,\n        childPane: this.state.parentHeight - e - 80\n      });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleMasterPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          nreporttypecode: this.state.selectedRecord[\"filterreporttypecode\"] ? String(this.state.selectedRecord[\"filterreporttypecode\"].value) : 0\n        },\n        classUrl: \"reportconfig\",\n        methodUrl: \"ReportDesigner\",\n        userInfo: this.props.Login.userInfo,\n        displayName: \"IDS_REPORTDESIGNER\"\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      const addSubReportId = this.state.controlMap.has(\"AddSubReportDetails\") && this.state.controlMap.get(\"AddSubReportDetails\").ncontrolcode;\n      const deleteSubReportId = this.state.controlMap.has(\"DeleteSubReportDetails\") && this.state.controlMap.get(\"DeleteSubReportDetails\").ncontrolcode;\n      const addImageId = this.state.controlMap.has(\"AddReportImages\") && this.state.controlMap.get(\"AddReportImages\").ncontrolcode;\n      const deleteImageId = this.state.controlMap.has(\"DeleteReportImages\") && this.state.controlMap.get(\"DeleteReportImages\").ncontrolcode;\n      tabMap.set(\"IDS_PARAMETERS\", /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nreportparametercode\",\n        data: this.props.Login.masterData[\"ReportParameter\"] || [],\n        dataResult: this.props.Login.masterData[\"ReportParameter\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData[\"ReportParameter\"] ? this.props.Login.masterData[\"ReportParameter\"].length : 0\n        },\n        extractedColumnList: this.parameterColumnList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        pageable: false,\n        scrollable: \"scrollable\",\n        isActionRequired: false,\n        isToolBarRequired: false,\n        selectedId: null,\n        hideColumnFilter: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1135,\n          columnNumber: 38\n        }\n      }));\n      tabMap.set(\"IDS_DESIGNPARAMETERS\", /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nreportdesignconfigcode\",\n        data: this.props.Login.masterData[\"ReportDesignConfig\"] || [],\n        dataResult: this.props.Login.masterData[\"ReportDesignConfig\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData[\"ReportDesignConfig\"] ? this.props.Login.masterData[\"ReportDesignConfig\"].length : 0\n        } //dataState={this.state.dataState}\n        //dataStateChange={(event)=> this.setState({dataState: event.dataState})}                                                           \n        ,\n        extractedColumnList: this.tabGridColumnList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        pageable: false,\n        scrollable: \"scrollable\",\n        isActionRequired: false,\n        isToolBarRequired: false,\n        selectedId: null,\n        hideColumnFilter: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1152,\n          columnNumber: 44\n        }\n      }));\n      tabMap.set(\"IDS_PARAMETERMAPPING\", /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nreportparametermappingcode\",\n        data: this.props.Login.masterData[\"ReportParameterMapping\"] || [],\n        dataResult: this.props.Login.masterData[\"ReportParameterMapping\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData[\"ReportParameterMapping\"] ? this.props.Login.masterData[\"ReportParameterMapping\"].length : 0\n        },\n        extractedColumnList: this.mappingGridFieldList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        pageable: false,\n        scrollable: \"scrollable\",\n        isActionRequired: false,\n        isToolBarRequired: false,\n        selectedId: null,\n        hideColumnFilter: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1171,\n          columnNumber: 44\n        }\n      })); // tabMap.set(\"IDS_ACTIONMAPPING\",  <DataGrid  primaryKeyField={\"nreportparameteractioncode\"}\n      //                                         data={this.props.Login.masterData[\"ReportParameterAction\"] || []}\n      //                                         dataResult={this.props.Login.masterData[\"ReportParameterAction\"] || []}\n      //                                         extractedColumnList={this.actionGridFieldList}\n      //                                         controlMap={this.state.controlMap}\n      //                                         userRoleControlRights={this.state.userRoleControlRights}\n      //                                         inputParam={this.props.Login.inputParam}\n      //                                         userInfo={this.props.Login.userInfo}\n      //                                         pageable={false}\n      //                                         scrollable={\"scrollable\"}                                            \n      //                                         isActionRequired={false}\n      //                                         isToolBarRequired={false}\n      //                                         selectedId={this.props.Login.selectedId}\n      //                                         hideColumnFilter={true}\n      //                                     />)\n\n      tabMap.set(\"IDS_SUBREPORTS\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1206,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1207,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1208,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addsubreport\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(addSubReportId) === -1,\n        onClick: () => this.openModal(\"IDS_SUBREPORTS\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1209,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1212,\n          columnNumber: 29\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_SUBREPORT\",\n        defaultMessage: \"Sub Report\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1213,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nsubreportdetailcode\",\n        data: this.props.Login.masterData[\"SubReportDetails\"] || [],\n        dataResult: this.props.Login.masterData[\"SubReportDetails\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData[\"SubReportDetails\"] ? this.props.Login.masterData[\"SubReportDetails\"].length : 0\n        },\n        extractedColumnList: this.subReportGridFieldList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        pageable: false,\n        deleteRecord: this.deleteAttachment,\n        deleteParam: {\n          screenName: \"IDS_SUBREPORTS\",\n          methodUrl: \"SubReportDetails\",\n          operation: \"delete\",\n          //masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\n          ncontrolcode: deleteSubReportId\n        },\n        methodUrl: \"SubReportDetails\",\n        scrollable: \"scrollable\",\n        isActionRequired: true,\n        isToolBarRequired: false,\n        selectedId: this.props.Login.selectedId,\n        hideColumnFilter: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1216,\n          columnNumber: 21\n        }\n      })))));\n      tabMap.set(\"IDS_IMAGES\", /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        noGutters: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1244,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1245,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"actions-stripe d-flex justify-content-end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1246,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addimages\",\n        className: \"add-txt-btn\",\n        hidden: this.state.userRoleControlRights.indexOf(addImageId) === -1,\n        onClick: () => this.openModal(\"IDS_IMAGES\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1247,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1250,\n          columnNumber: 29\n        }\n      }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"IDS_IMAGES\",\n        defaultMessage: \"Images\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1251,\n          columnNumber: 29\n        }\n      }))), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"nreportimagecode\",\n        data: this.props.Login.masterData[\"ReportImages\"] || [],\n        dataResult: this.props.Login.masterData[\"ReportImages\"] || [],\n        dataState: {\n          skip: 0,\n          take: this.props.Login.masterData[\"ReportImages\"] ? this.props.Login.masterData[\"ReportImages\"].length : 0\n        },\n        extractedColumnList: this.imageGridFieldList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        pageable: false,\n        scrollable: \"scrollable\",\n        deleteRecord: this.deleteAttachment,\n        deleteParam: {\n          screenName: \"IDS_IMAGES\",\n          methodUrl: \"ReportImages\",\n          operation: \"delete\",\n          //masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\n          ncontrolcode: deleteImageId\n        },\n        methodUrl: \"ReportImages\",\n        isActionRequired: true,\n        isToolBarRequired: false,\n        selectedId: this.props.Login.selectedId,\n        hideColumnFilter: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1254,\n          columnNumber: 21\n        }\n      })))));\n      return tabMap;\n    };\n\n    this.openModal = (screenName, ncontrolCode) => {\n      if (this.props.Login.masterData.SelectedReportDetail == null) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTVERSIONNOTFOUND\"\n        }));\n      } else {\n        if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord: {\n                sreportname: this.props.Login.masterData.SelectedReportMaster.sreportname\n              },\n              operation: \"create\",\n              ncontrolCode,\n              selectedId: null,\n              openModal: true,\n              screenName\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CANNOTADDFORAPPROVEDREPORT\"\n          }));\n        } else if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CANNOTADDFORRETIREDREPORT\"\n          }));\n        }\n      }\n    };\n\n    this.removeParametersInDataGrid = selectedItem => {\n      const addDesignParamNew = this.state.addDesignParam.filter(item => {\n        if (typeof item.nreportparametercode === \"number\") {\n          return item.nreportparametercode !== selectedItem.nreportparametercode;\n        } else {\n          return item.nreportparametercode.value !== selectedItem.nreportparametercode;\n        }\n      });\n      const gridDataNew = this.state.gridData.filter(item => {\n        if (typeof item.nreportparametercode === \"number\") {\n          return item.nreportparametercode !== selectedItem.nreportparametercode;\n        } else {\n          return item.nreportparametercode.value !== selectedItem.nreportparametercode;\n        }\n      }); //gridData.filter\n      // (item => item.sfieldname !== selectedItem.sfieldname);\n\n      this.setState({\n        addDesignParam: addDesignParamNew,\n        gridData: gridDataNew\n      });\n    };\n\n    this.addParametersInDataGrid = selectedRecord => {\n      if (this.state.addDesignParam.length === this.props.Login.masterData.ReportParameter.length) {\n        toast.warn(\"You cannot add more than Report Parameters count\");\n      } else {\n        let validData = false;\n\n        if (selectedRecord[\"sdisplayname\"] && selectedRecord[\"sdisplayname\"].trim().length !== 0 && selectedRecord[\"nreportparametercode\"] && selectedRecord[\"ndesigncomponentcode\"]) {\n          validData = true;\n\n          if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\n            if (selectedRecord[\"nsqlquerycode\"] && selectedRecord[\"nsqlquerycode\"].length !== 0) {\n              validData = true;\n            } else {\n              validData = false;\n            }\n          }\n\n          if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\n            if (selectedRecord[\"ndays\"] && selectedRecord[\"ndays\"].length !== 0) {\n              validData = true;\n            } else {\n              validData = false;\n            }\n          }\n        }\n\n        if (validData) {\n          if (selectedRecord && selectedRecord.nreportparametercode !== undefined) {\n            let copySelected = { ...selectedRecord\n            };\n            const addDesignParam = this.state.addDesignParam;\n            const index = addDesignParam.findIndex(item => {\n              if (typeof item.nreportparametercode === \"number\") {\n                return item.nreportparametercode === copySelected.nreportparametercode.value;\n              } else {\n                return item.nreportparametercode.value === copySelected.nreportparametercode.value;\n              }\n            });\n\n            if (index === -1) {\n              addDesignParam.push(copySelected);\n              const gridData = this.state.gridData;\n              ;\n              gridData.push({\n                nreportparametercode: copySelected.nreportparametercode.value,\n                sreportparametername: copySelected.nreportparametercode.label,\n                sdisplayname: copySelected.sdisplayname,\n                ndesigncomponentcode: copySelected.ndesigncomponentcode.value,\n                sdesigncomponentname: copySelected.ndesigncomponentcode.label\n              });\n              this.setState({\n                addDesignParam,\n                selectedRecord: {\n                  ndays: \"\",\n                  sdisplayname: \"\"\n                },\n                gridData\n              });\n            } else toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_DUPLICATEMAPPING\"\n            }));\n\n            this.setState({\n              selectedRecord: {\n                ndays: \"\",\n                sdisplayname: \"\"\n              }\n            });\n          }\n        } else {\n          //toast.info(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\n          if (selectedRecord[\"nreportparametercode\"] === undefined || selectedRecord[\"nreportparametercode\"].length === 0) {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_ENTER\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_PARAMETERS\"\n            })}`);\n          } else if (selectedRecord[\"sdisplayname\"] === undefined || selectedRecord[\"sdisplayname\"] === \"\") {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_ENTER\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_DISPLAYNAME\"\n            })}`);\n          } else if (selectedRecord[\"ndesigncomponentcode\"] === undefined || selectedRecord[\"ndesigncomponentcode\"].length === 0) {\n            toast.info(`${this.props.intl.formatMessage({\n              id: \"IDS_ENTER\"\n            })} ${this.props.intl.formatMessage({\n              id: \"IDS_INPUTTYPE\"\n            })}`);\n          } else {\n            if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\n              if (selectedRecord[\"nsqlquerycode\"] === undefined || selectedRecord[\"nsqlquerycode\"].length === 0) {\n                toast.info(`${this.props.intl.formatMessage({\n                  id: \"IDS_ENTER\"\n                })} ${this.props.intl.formatMessage({\n                  id: \"IDS_EXISTINGLINKTABLE\"\n                })}`);\n              }\n            } else if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\n              if (selectedRecord[\"ndays\"] === undefined || selectedRecord[\"ndays\"].length === 0) {\n                toast.info(`${this.props.intl.formatMessage({\n                  id: \"IDS_ENTER\"\n                })} ${this.props.intl.formatMessage({\n                  id: \"IDS_DAYS\"\n                })}`);\n              }\n            }\n          }\n        }\n      }\n    };\n\n    this.unbindMappingParametersFromDataGrid = selectedItem => {\n      const addMappingParamNew = this.state.addMappingParam.filter(item => {\n        if (typeof item.nchildreportdesigncode === \"number\") {\n          if (item.nchildreportdesigncode === selectedItem.nchildreportdesigncode) {\n            return item.nparentreportdesigncode !== selectedItem.nparentreportdesigncode;\n          } else return item;\n        } else {\n          if (item.nchildreportdesigncode.value === selectedItem.nchildreportdesigncode) {\n            return item.nparentreportdesigncode.value !== selectedItem.nparentreportdesigncode;\n          } else return item;\n        }\n      });\n      const mappingGridDataNew = this.state.mappingGridData.filter(item => {\n        if (typeof item.nchildreportdesigncode === \"number\") {\n          if (item.nchildreportdesigncode === selectedItem.nchildreportdesigncode) {\n            return item.nparentreportdesigncode !== selectedItem.nparentreportdesigncode;\n          } else return item;\n        } else {\n          if (item.nchildreportdesigncode.value === selectedItem.nchildreportdesigncode) {\n            return item.nparentreportdesigncode.value !== selectedItem.nparentreportdesigncode;\n          } else return item;\n        }\n      });\n      this.setState({\n        addMappingParam: addMappingParamNew,\n        mappingGridData: mappingGridDataNew\n      });\n    };\n\n    this.bindMappingParametersToDataGrid = selectedRecord => {\n      if (selectedRecord[\"sfieldname\"] && selectedRecord[\"nparentreportdesigncode\"] && selectedRecord[\"nchildreportdesigncode\"]) {\n        if (selectedRecord && selectedRecord.nparentreportdesigncode !== undefined) {\n          let copySelected = { ...selectedRecord\n          };\n          const addMappingParam = this.state.addMappingParam;\n          const index = addMappingParam.findIndex(item => {\n            if (typeof item.nparentreportdesigncode === \"number\") {\n              return item.nparentreportdesigncode === copySelected.nparentreportdesigncode.value && item.nchildreportdesigncode === copySelected.nchildreportdesigncode.value && item.sfieldname === copySelected.sfieldname.value;\n            } else {\n              return item.nparentreportdesigncode.value === copySelected.nparentreportdesigncode.value && item.nchildreportdesigncode.value === copySelected.nchildreportdesigncode.value && item.sfieldname.value === copySelected.sfieldname.value;\n            }\n          });\n\n          if (index === -1) {\n            addMappingParam.push(copySelected);\n            const mappingGridData = this.state.mappingGridData;\n            ;\n            mappingGridData.push({\n              nparentreportdesigncode: copySelected.nparentreportdesigncode.value,\n              nchildreportdesigncode: copySelected.nchildreportdesigncode.value,\n              sparentparametername: copySelected.nparentreportdesigncode.label,\n              schildparametername: copySelected.nchildreportdesigncode.label,\n              sfieldname: copySelected.sfieldname.value,\n              nactionparameter: transactionStatus.NO\n            });\n            this.setState({\n              addMappingParam,\n              selectedRecord: {\n                nactionreportdesigncode: \"\",\n                nparentreportdesigncode: \"\",\n                sfieldname: \"\",\n                nchildreportdesigncode: \"\"\n              },\n              //selectedRecord:{},\n              mappingGridData\n            });\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_DUPLICATEMAPPING\"\n            }));\n            this.setState({\n              selectedRecord: {\n                nparentreportdesigncode: {\n                  label: \"\",\n                  value: -1\n                },\n                sfieldname: {\n                  label: \"\",\n                  value: -1\n                },\n                nchildreportdesigncode: {\n                  label: \"\",\n                  value: -1\n                }\n              }\n            });\n          }\n        }\n      } else {\n        //toast.warn(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\n        if (selectedRecord[\"nchildreportdesigncode\"] === undefined || selectedRecord[\"nchildreportdesigncode\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_PARAMETER\"\n          })}`);\n        } else if (selectedRecord[\"sfieldname\"] === undefined || selectedRecord[\"sfieldname\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_FIELDNAME\"\n          })}`);\n        } else if (selectedRecord[\"nparentreportdesigncode\"] === undefined || selectedRecord[\"nparentreportdesigncode\"].length === 0) {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${this.props.intl.formatMessage({\n            id: \"IDS_PARENTPARAMETER\"\n          })}`);\n        }\n      }\n    };\n\n    this.bindActionParameter = (rowItem, event) => {\n      const gridMappingParam = this.state.mappingGridData;\n      const addMappingParam = this.state.addMappingParam;\n\n      if (event.target.checked) {\n        gridMappingParam.forEach(item => {\n          if (item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode) {\n            if (item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode) {\n              const index = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\n              addMappingParam[index] = { ...addMappingParam[index],\n                \"nisactionparent\": transactionStatus.YES\n              };\n              return item.nisactionparent = transactionStatus.YES;\n            } else {\n              const index = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\n              addMappingParam[index] = { ...addMappingParam[index],\n                \"nisactionparent\": transactionStatus.NO\n              };\n              return item.nisactionparent = transactionStatus.NO;\n            }\n          }\n        });\n      } else {\n        const index = gridMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\n        gridMappingParam[index][\"nisactionparent\"] = transactionStatus.NO;\n        const index1 = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\n        addMappingParam[index1] = { ...addMappingParam[index1],\n          \"nisactionparent\": transactionStatus.NO\n        };\n      }\n\n      this.setState({\n        mappingGridData: gridMappingParam,\n        addMappingParam: addMappingParam\n      });\n    };\n\n    this.handleChangeDesign = (value, valueParam) => {\n      if (value !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[valueParam] = value.value;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"toggle\" || this.props.Login.operation === \"approve\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === \"nreporttypecode\") {\n        selectedRecord[fieldName] = comboData;\n\n        if (comboData.value !== reportTypeEnum.MIS && comboData.value !== reportTypeEnum.SCREENWISE && comboData.value !== reportTypeEnum.SAMPLE) {\n          this.props.getReportSubType({\n            selectedRecord,\n            reportType: comboData.item,\n            userInfo: this.props.Login.userInfo\n          });\n        } else if (comboData.value === reportTypeEnum.SAMPLE) {\n          this.props.getregtype({\n            selectedRecord,\n            reportType: comboData.item,\n            nregtypecode: RegistrationType.PLASMA_POOL,\n            userInfo: this.props.Login.userInfo\n          });\n        } else {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord: selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      } else if (fieldName === \"nchildreportdesigncode\") {\n        //parameter mapping\n        selectedRecord[fieldName] = comboData;\n        const sqlquery = comboData.item.ssqlquery;\n        const param = [];\n        const param1 = []; // let firstIndex = sqlquery.indexOf(\"P$\");\n        // const lastIndex = sqlquery.lastIndexOf(\"P$\");            \n        // let first = sqlquery.indexOf(\"P$\");\n        // let endFirst = sqlquery.indexOf(\"$P\");\n        // do {\n        //     let second = sqlquery.indexOf(\"P$\", first + 1);\n        //     let endSecond = sqlquery.indexOf(\"$P\", endFirst + 1);\n        //     const parameter = sqlquery.substring(first + 2, endFirst);\n        //     param.push({ label: parameter, value: parameter });\n        //     first = second;\n        //     endFirst = endSecond;\n        //     firstIndex = second;\n        // }\n        // while (firstIndex === lastIndex)\n\n        let query = sqlquery;\n\n        while (query.indexOf(\"P$\") !== -1) {\n          let index1 = query.indexOf(\"P$\");\n          let index2 = query.indexOf(\"$P\");\n          const parameter = query.substring(index1 + 2, index2);\n\n          if (!param1.includes(parameter)) {\n            param.push({\n              label: parameter,\n              value: parameter\n            });\n            param1.push(parameter);\n          }\n\n          query = query.replace(\"P$\", \"\").replace(\"$P\", \"\");\n        }\n\n        this.setState({\n          selectedRecord,\n          optionalParameterList: param\n        }); //}\n      } else if (fieldName === \"nregtypecode\") {\n        selectedRecord[fieldName] = comboData;\n        this.props.getReportRegSubType({\n          selectedRecord,\n          registrationType: comboData.item,\n          userInfo: this.props.Login.userInfo\n        });\n      } else if (fieldName === \"ncertificatetypecode\") {\n        selectedRecord[fieldName] = comboData;\n        selectedRecord[\"sbatchdisplayname\"] = comboData.item.sbatchdisplayname;\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"nformcode\") {\n        selectedRecord[fieldName] = comboData;\n        selectedRecord[\"ncontrolcode\"] = undefined;\n        this.props.getControlButton({\n          selectedRecord,\n          ControlScreen: comboData.item,\n          userInfo: this.props.Login.userInfo\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDropImage = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = attachedFiles;\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.screenName === \"IDS_REPORTVERSION\") {\n        this.onSaveVersion(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_REPORTMASTER\") {\n        this.onSaveMaster(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_REPORTDESIGN\") {\n        this.onSaveReportConfig(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_PARAMETERMAPPING\") {\n        this.onSaveParameterMapping(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_ACTIONMAPPING\") {\n        this.onSaveParameterAction(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SUBREPORTS\") {\n        this.onSaveSubReport(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_IMAGES\") {\n        this.onSaveReportImage(saveType, formRef);\n      }\n    };\n\n    this.onSaveMaster = (saveType, formRef) => {\n      const reportFile = this.state.selectedRecord.sfilename;\n      let isFileEdited = transactionStatus.NO;\n      const formData = new FormData();\n      let methodUrl = \"ReportDesigner\";\n      let postParam = undefined;\n      let reportmaster = {\n        \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n      };\n      let inputParam = {};\n\n      if (this.props.Login.operation === \"update\") {\n        // edit           \n        postParam = {\n          inputListName: \"ReportMaster\",\n          selectedObject: \"SelectedReportMaster\",\n          primaryKeyField: \"nreportcode\"\n        };\n\n        if (this.props.Login.reportVersionStatus === transactionStatus.APPROVED) {\n          reportmaster = JSON.parse(JSON.stringify(this.props.Login.ApprovedReportMaster));\n          reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.ACTIVE;\n        } else {\n          const data = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n          reportmaster[\"nreporttypecode\"] = data[\"nreporttypecode\"].value;\n          reportmaster[\"nreportcode\"] = data[\"nreportcode\"];\n          reportmaster[\"nregtypecode\"] = transactionStatus.NA;\n          reportmaster[\"nregsubtypecode\"] = transactionStatus.NA;\n          reportmaster[\"nsectioncode\"] = transactionStatus.NA;\n          reportmaster[\"nreportmodulecode\"] = transactionStatus.NA;\n          reportmaster[\"nreportdecisiontypecode\"] = transactionStatus.NA;\n          reportmaster[\"ncertificatetypecode\"] = transactionStatus.NA;\n          reportmaster[\"ncoareporttypecode\"] = transactionStatus.NA;\n          reportmaster[\"sreportname\"] = this.state.selectedRecord[\"sreportname\"];\n          reportmaster[\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] || \"\";\n          reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.ACTIVE;\n\n          if ( //data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE || \n          data[\"nreporttypecode\"].value === reportTypeEnum.COA) {\n            reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\n            reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n            reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n            reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ? this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA; // if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE)\n            // {\n            //      reportmaster[\"nreportdecisiontypecode\"] = this.state.selectedRecord[\"nreportdecisiontypecode\"] \n            //                  ? this.state.selectedRecord[\"nreportdecisiontypecode\"].value : data[\"nreportdecisiontypecode\"];\n            // }\n          } else if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE || data[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\n            reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ? this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\n            reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"] ? this.state.selectedRecord[\"ncertificatetypecode\"].value : data[\"ncertificatetypecode\"];\n\n            if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE && this.props.Login.masterData.SelectedReportDetail.isneedregtype === transactionStatus.YES) {\n              reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\n              reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n              reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n            }\n          } else if (data[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE) {\n            reportmaster[\"ncontrolcode\"] = this.state.selectedRecord[\"ncontrolcode\"] ? this.state.selectedRecord[\"ncontrolcode\"].value : data[\"ncontrolcode\"];\n          } else {\n            if (data[\"nreporttypecode\"].value === reportTypeEnum.MIS) {\n              if (typeof this.state.selectedRecord[\"nreportmodulecode\"].value === \"string\") {\n                reportmaster[\"nreportmodulecode\"] = 0;\n                reportmaster[\"smoduledisplayname\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\n              } else {\n                reportmaster[\"nreportmodulecode\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\n              }\n            } else {\n              reportmaster[\"nreportmodulecode\"] = data[\"nreportmodulecode\"];\n            }\n          }\n        }\n\n        inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"ReportMaster\",\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            reportmaster\n          },\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n      } else {\n        //add               \n        reportmaster[\"nreporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value;\n        reportmaster[\"nreportdecisiontypecode\"] = transactionStatus.NA;\n        reportmaster[\"ncertificatetypecode\"] = transactionStatus.NA;\n        reportmaster[\"nregtypecode\"] = transactionStatus.NA;\n        reportmaster[\"nregsubtypecode\"] = transactionStatus.NA;\n        reportmaster[\"nreportmodulecode\"] = transactionStatus.NA;\n        reportmaster[\"ncontrolcode\"] = transactionStatus.NA;\n        reportmaster[\"sreportname\"] = this.state.selectedRecord[\"sreportname\"];\n        reportmaster[\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] || \"\";\n        reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\n        reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE ? this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\n\n        if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) {\n          reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n          reportmaster[\"nreportdecisiontypecode\"] = this.state.selectedRecord[\"nreportdecisiontypecode\"] ? this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA;\n          reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"].value;\n        } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\n          reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"].value;\n        } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE) {\n          reportmaster[\"ncontrolcode\"] = this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE ? this.state.selectedRecord[\"ncontrolcode\"].value : transactionStatus.NA;\n        } else if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA) {\n          reportmaster[\"nregtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\n          reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\n        } else {\n          if (typeof this.state.selectedRecord[\"nreportmodulecode\"].value === \"string\") {\n            reportmaster[\"nreportmodulecode\"] = 0;\n            reportmaster[\"smoduledisplayname\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\n          } else {\n            reportmaster[\"nreportmodulecode\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\n          }\n        }\n\n        let reportdetails = {\n          // ncoareporttypecode: this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE  ?\n          //     this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA,\n          // nsectioncode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ?\n          // this.state.selectedRecord[\"nsectioncode\"]? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA: transactionStatus.NA,\n          // nreportdecisiontypecode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ?\n          //                 this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA,\n          // ncertificatetypecode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH ?\n          //                 this.state.selectedRecord[\"ncertificatetypecode\"].value : transactionStatus.NA,\n          ntransactionstatus: transactionStatus.DRAFT,\n          nversionno: -1,\n          nisplsqlquery: this.state.selectedRecord[\"nisplsqlquery\"] ? this.state.selectedRecord[\"nisplsqlquery\"] : transactionStatus.NO\n        }; // if(this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA){\n        //     reportdetails={\n        //         ncoareporttypecode : this.state.selectedRecord ? this.state.selectedRecord.ncoareporttypecode.value : transactionStatus.NA,\n        //         nreportdecisiontypecode : transactionStatus.NA,\n        //         ncertificatetypecode : transactionStatus.NA,\n        //         nsectioncode : this.state.selectedRecord && this.state.selectedRecord.nsectioncode ? this.state.selectedRecord.nsectioncode.value : transactionStatus.NA ,\n        //         ntransactionstatus: transactionStatus.DRAFT,\n        //         nisplsqlquery: this.state.selectedRecord ? this.state.selectedRecord[\"nisplsqlquery\"] || transactionStatus.NO : transactionStatus.NO,\n        //     }\n        // }\n        //reportdetails[\"nversionno\"] = -1;\n        // reportdetails[\"nisplsqlquery\"] = this.state.selectedRecord ? this.state.selectedRecord[\"nisplsqlquery\"] || transactionStatus.NO : transactionStatus.NO;\n\n        if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\n          const splittedFileName = reportFile[0].name.split('.');\n          const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\n          const uniquefilename = this.state.selectedRecord.sfilename === \"\" ? this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\n          reportdetails[\"sfilename\"] = reportFile[0].name;\n          reportdetails[\"ssystemfilename\"] = uniquefilename;\n          formData.append(\"uploadedFile0\", reportFile[0]);\n          formData.append(\"uniquefilename0\", uniquefilename);\n          isFileEdited = transactionStatus.YES; //reportmaster[\"sfilename\"] = \"\";\n        }\n\n        formData.append(\"isFileEdited\", isFileEdited);\n        formData.append(\"filecount\", 1);\n        formData.append(\"reportdetails\", JSON.stringify(reportdetails)); // formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n\n        formData.append(\"reportmaster\", JSON.stringify(reportmaster));\n        inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: methodUrl,\n          //\"ReportDesigner\",\n          //  inputData: inputData,\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef,\n          postParam,\n          searchRef: this.searchRef\n        };\n      }\n\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveVersion = (saveType, formRef) => {\n      const reportFile = this.state.selectedRecord.sfilename;\n      let isFileEdited = transactionStatus.NO;\n      const formData = new FormData();\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      const reportmaster = this.props.Login.masterData.SelectedReportMaster;\n      let reportdetails = {\n        // ncoareporttypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] !== reportTypeEnum.MIS &&this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] !== reportTypeEnum.SCREENWISE  ?\n        //     this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA,\n        // nsectioncode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?\n        //                 this.state.selectedRecord[\"nsectioncode\"] ? \n        //                 this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA\n        //                 : transactionStatus.NA,\n        // nreportdecisiontypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?\n        //                     this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA,\n        // ncertificatetypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.BATCH ?\n        //                     this.state.selectedRecord[\"ncertificatetypecode\"].value : transactionStatus.NA,\n        ntransactionstatus: transactionStatus.DRAFT,\n        nisplsqlquery: this.state.selectedRecord[\"nisplsqlquery\"] ? this.state.selectedRecord[\"nisplsqlquery\"] : transactionStatus.NO\n      };\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        // postParam =  { inputListName : \"ReportDetails\", selectedObject : \"SelectedReportDetail\", \n        //                 primaryKeyField : \"nreportdetailcode\", isChild:true, };\n        const data = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\n        reportdetails[\"nreportdetailcode\"] = data[\"nreportdetailcode\"];\n        reportdetails[\"nversionno\"] = data[\"nversionno\"];\n        reportdetails[\"sfilename\"] = data[\"sfilename\"];\n        reportdetails[\"ssystemfilename\"] = data[\"ssystemfilename\"];\n      } else {\n        //add               \n        reportdetails[\"nversionno\"] = -1;\n      }\n\n      if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\n        const splittedFileName = reportFile[0].name.split('.');\n        const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\n        const uniquefilename = this.state.selectedRecord.sfilename === \"\" ? this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\n        reportdetails[\"sfilename\"] = reportFile[0].name;\n        reportdetails[\"ssystemfilename\"] = uniquefilename;\n        formData.append(\"uploadedFile0\", reportFile[0]);\n        formData.append(\"uniquefilename0\", uniquefilename);\n        isFileEdited = transactionStatus.YES; //reportmaster[\"sfilename\"] = \"\";\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"filecount\", 1);\n      formData.append(\"reportdetails\", JSON.stringify(reportdetails)); //formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n\n      formData.append(\"reportmaster\", JSON.stringify(reportmaster));\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ReportDetails\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isChild: true\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveReportConfig = (saveType, formRef) => {\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n\n      if (this.state.addDesignParam.length === this.props.Login.masterData.ReportParameter.length) {\n        let operation = this.props.Login.operation;\n        let inputData = [];\n        let selectedId = null;\n        let data = []; //let i = 0;\n\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n\n        if (JSON.stringify(this.state.addDesignParam) !== JSON.stringify(this.props.Login.masterData.ReportDesignConfig)) {\n          this.state.addDesignParam.forEach(item => {\n            data.push({\n              \"nreportdetailcode\": this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n              \"ndesigncomponentcode\": typeof item.ndesigncomponentcode === \"number\" ? item.ndesigncomponentcode : item.ndesigncomponentcode.value,\n              \"nsqlquerycode\": item.nsqlquerycode ? typeof item.nsqlquerycode === \"number\" ? item.nsqlquerycode : item.nsqlquerycode.value : transactionStatus.NA,\n              \"nreportparametercode\": typeof item.nreportparametercode === \"number\" ? item.nreportparametercode : item.nreportparametercode.value,\n              \"sdisplayname\": item.sdisplayname,\n              \"ndays\": item.ndays ? item.ndays : 0\n            });\n          });\n          inputData[\"reportdesignconfig\"] = data;\n          const inputParam = {\n            classUrl: this.props.Login.inputParam.classUrl,\n            methodUrl: \"ReportDesignParameter\",\n            displayName: this.props.Login.inputParam.displayName,\n            inputData: inputData,\n            postParam,\n            operation: operation,\n            saveType,\n            formRef,\n            dataState: undefined,\n            selectedId,\n            isChild: true\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_NODATATOSAVE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_CONFIGUREALLPARAMETERS\"\n        }));\n      }\n    };\n\n    this.onSaveParameterMapping = (saveType, formRef) => {\n      let operation = this.props.Login.operation;\n      let inputData = [];\n      let selectedId = null;\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"reportparametermapping\"] = [];\n      inputData[\"reportdetails\"] = this.props.Login.masterData.SelectedReportDetail; //inputData[\"reportparameteraction\"] = [];\n      // if ((this.props.Login.masterData.ReportParameterMapping.length > 0 && this.state.mappingGridData.length === 0)\n      //     || (this.props.Login.masterData.ReportParameterMapping.length === 0 && this.state.mappingGridData.length > 0))\n      // {\n      // if (JSON.stringify(this.state.addMappingParam) !==JSON.stringify(this.props.Login.masterData.ReportParameterMapping))\n      // {\n\n      let count = 0;\n      this.state.mappingGridData.forEach(item => {\n        if (item.nisactionparent === transactionStatus.YES) count = count + 1;\n        inputData[\"reportparametermapping\"].push({\n          \"nreportdetailcode\": this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n          \"nparentreportdesigncode\": item.nparentreportdesigncode,\n          \"nchildreportdesigncode\": item.nchildreportdesigncode,\n          \"sfieldname\": item.sfieldname,\n          \"nisactionparent\": item.nisactionparent\n        }); // if(item.nactionparameter === transactionStatus.YES)\n        //     inputData[\"reportparameteraction\"].push({\"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n        //                                                 \"nreportdesigncode\": item.nchildreportdesigncode,\n        //                                                 \"nparentreportdesigncode\": item.nparentreportdesigncode,                                                            \n        //                                             });  \n      });\n      let valid = false;\n\n      if (this.state.mappingGridData.length > 0) {\n        if (count === this.props.Login.childComponentList.length) {\n          valid = true;\n        }\n      } else {\n        if (this.props.Login.masterData.ReportParameterMapping.length === 0 && this.state.mappingGridData.length === 0) {\n          valid = false;\n        } else valid = true;\n      }\n\n      if (valid) {\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: \"ReportParameterMapping\",\n          displayName: this.props.Login.inputParam.displayName,\n          inputData: inputData,\n          postParam,\n          operation: operation,\n          saveType,\n          formRef,\n          dataState: undefined,\n          selectedId,\n          isChild: true\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              saveType //openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n              ///operation: this.props.Login.operation\n\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        if (this.state.mappingGridData.length === 0) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_NODATATOSAVE\"\n          }));\n        } else {\n          if (count !== this.props.Login.childComponentList.length) toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSUFFICIENTACTIONPARENT\"\n          }));else toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_NODATATOSAVE\"\n          }));\n        }\n      }\n    };\n\n    this.onSaveSubReport = (saveType, formRef) => {\n      const reportFile = this.state.selectedRecord.sfilename;\n      const formData = new FormData();\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      const reportdetails = this.props.Login.masterData.SelectedReportDetail;\n      const subreportdetails = {\n        nreportdetailcode: reportdetails.nreportdetailcode,\n        nreportcode: reportdetails.nreportcode\n      };\n\n      if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\n        const splittedFileName = reportFile[0].name.split('.');\n        const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\n        const uniquefilename = this.state.selectedRecord.sfilename === \"\" ? this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\n        subreportdetails[\"sfilename\"] = reportFile[0].name;\n        subreportdetails[\"ssystemfilename\"] = uniquefilename;\n        formData.append(\"uploadedFile0\", reportFile[0]);\n        formData.append(\"uniquefilename0\", uniquefilename);\n      }\n\n      formData.append(\"filecount\", 1); //formData.append(\"reportdetails\", JSON.stringify(reportdetails));\n\n      formData.append(\"subreportdetails\", JSON.stringify(subreportdetails)); // formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"SubReportDetails\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isChild: true\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveReportImage = (saveType, formRef) => {\n      const reportFile = this.state.selectedRecord.sfilename;\n      const formData = new FormData();\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      const reportdetails = this.props.Login.masterData.SelectedReportDetail;\n      const reportimages = {\n        nreportdetailcode: reportdetails.nreportdetailcode,\n        nreportcode: reportdetails.nreportcode\n      };\n\n      if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\n        const splittedFileName = reportFile[0].name.split('.');\n        const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\n        const uniquefilename = this.state.selectedRecord.sfilename === \"\" ? this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\n        reportimages[\"sfilename\"] = reportFile[0].name;\n        reportimages[\"ssystemfilename\"] = uniquefilename;\n        formData.append(\"uploadedFile0\", reportFile[0]);\n        formData.append(\"uniquefilename0\", uniquefilename);\n      }\n\n      formData.append(\"filecount\", 1); //formData.append(\"reportdetails\", JSON.stringify(reportdetails));\n\n      formData.append(\"reportimages\", JSON.stringify(reportimages)); //  formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ReportImages\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef,\n        isChild: true\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteFile = fieldName => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = \"\";\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.approveReport = ncontrolCode => {\n      if (this.props.Login.masterData.SelectedReportDetail) {\n        if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_REPORTALREADYAPPROVED\"\n          }));\n        } else {\n          const postParam = {\n            inputListName: \"ReportDetails\",\n            selectedObject: \"SelectedReportDetail\",\n            primaryKeyField: \"nreportdetailcode\",\n            primaryKeyValue: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\n            fetchUrl: \"reportconfig/getReportDetail\",\n            fecthInputObject: {\n              userinfo: this.props.Login.userInfo\n            }\n          };\n          const inputParam = {\n            classUrl: this.props.Login.inputParam.classUrl,\n            methodUrl: \"ReportVersion\",\n            inputData: {\n              \"userinfo\": this.props.Login.userInfo,\n              \"reportdetails\": this.props.Login.masterData.SelectedReportDetail\n            },\n            operation: \"approve\",\n            postParam,\n            isChild: true\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: \"IDS_REPORTMASTER\",\n                operation: \"approve\"\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NOVERSIONTOAPPROVE\"\n        }));\n      }\n    };\n\n    this.deleteAttachment = deleteParam => {\n      if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\n        const message = \"IDS_CANNOTDELETEFORAPPROVEDREPORT\";\n        toast.warn(this.props.intl.formatMessage({\n          id: message\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"ReportMaster\",\n          selectedObject: \"SelectedReportMaster\",\n          primaryKeyField: \"nreportcode\",\n          primaryKeyValue: this.props.Login.masterData.SelectedReportMaster.nreportcode,\n          fetchUrl: \"reportconfig/getReportDesigner\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: this.props.Login.inputParam.classUrl,\n          methodUrl: deleteParam.methodUrl,\n          inputData: {\n            [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\n            \"userinfo\": this.props.Login.userInfo\n          },\n          operation: deleteParam.operation,\n          isChild: true,\n          postParam\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.deleteReport = deleteParam => {\n      const postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\",\n        primaryKeyValue: this.props.Login.masterData.SelectedReportMaster.nreportcode,\n        fetchUrl: \"reportconfig/getReportDesigner\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: deleteParam.methodUrl,\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          [deleteParam.listName]: deleteParam.mastertodelete\n        },\n        operation: deleteParam.operation,\n        postParam,\n        isChild: deleteParam.methodUrl === \"ReportDetails\" ? true : undefined\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: deleteParam.screenName,\n            operation: deleteParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.updateReportStatus = methodParam => {\n      const reportmaster = methodParam.mastertoupdate;\n      let status = reportmaster.ntransactionstatus;\n\n      if (status === transactionStatus.ACTIVE) {\n        status = transactionStatus.DEACTIVE;\n      } else {\n        status = transactionStatus.ACTIVE;\n      }\n\n      reportmaster[\"ntransactionstatus\"] = status;\n      let postParam = {\n        inputListName: \"ReportMaster\",\n        selectedObject: \"SelectedReportMaster\",\n        primaryKeyField: \"nreportcode\"\n      };\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"ReportStatus\",\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          reportmaster\n        },\n        operation: methodParam.operation,\n        postParam\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, methodParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: methodParam.screenName,\n            operation: methodParam.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo,\n          nreporttypecode: String(this.props.Login.masterData.SelectedFilterReportType.nreporttypecode)\n        },\n        classUrl: \"reportconfig\",\n        methodUrl: \"ReportDesigner\",\n        userInfo: this.props.Login.userInfo,\n        displayName: \"IDS_REPORTDESIGNER\"\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.searchRef = React.createRef();\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      //dataState, dataResult:[],\n      screenName: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      // actionMappingParentList:[],\n      addMappingParam: [],\n      firstPane: 0,\n      paneHeight: 0,\n      secondPaneHeight: 0,\n      tabPane: 0,\n      //masterSkip:0,\n      //masterTake:25,\n      detailSkip: 0,\n      detailTake: 10,\n      splitChangeWidthPercentage: 22,\n      skip: 0,\n      take: this.props.Login.settings && parseInt(this.props.Login.settings[3])\n    };\n    this.parameterColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sreportparametername\",\n      \"width\": \"250px\"\n    }, {\n      \"idsName\": \"IDS_DATATYPE\",\n      \"dataField\": \"sdatatype\",\n      \"width\": \"400px\"\n    }];\n    this.designInputFieldList = [{\n      \"idsName\": \"IDS_REPORTNAME\",\n      \"dataField\": \"sreportname\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"ndesigncomponentcode\",\n      \"listName\": \"designComponentList\",\n      \"optionId\": \"ndesigncomponentcode\",\n      \"optionValue\": \"sdesigncomponentname\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"nreportparametercode\",\n      \"listName\": \"reportParameterList\",\n      \"optionId\": \"nreportparametercode\",\n      \"optionValue\": \"sreportparametername\"\n    }, {\n      \"idsName\": \"IDS_EXISTINGLINKTABLE\",\n      \"dataField\": \"nsqlquerycode\",\n      \"listName\": \"sqlQueryList\",\n      \"optionId\": \"nsqlquerycode\",\n      \"optionValue\": \"ssqlqueryname\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\"\n    }, {\n      \"idsName\": \"IDS_DAYS\",\n      \"dataField\": \"ndays\"\n    } //{ \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"nmandatory\"}\n    ];\n    this.designGridColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sreportparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"sdesigncomponentname\",\n      \"width\": \"200px\"\n    } // { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\" },\n    //  { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"150px\" },\n    // { \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"smandatory\", \"width\": \"150px\" },\n    ];\n    this.tabGridColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sreportparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"sdesigncomponentname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SQLQUERY\",\n      \"dataField\": \"ssqlqueryname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DAYS\",\n      \"dataField\": \"ndays\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_MANDATORY\",\n      \"dataField\": \"smandatory\",\n      \"width\": \"150px\"\n    }];\n    this.mappingGridFieldList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"schildparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"sparentparametername\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONPARAMETER\",\n      \"dataField\": \"sisactionparent\",\n      \"width\": \"200px\"\n    }];\n    this.detailedGridFieldList = [{\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"sparentparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ACTIONPARAMETER\",\n      \"dataField\": \"nisactionparent\",\n      \"width\": \"200px\",\n      \"componentName\": \"switch\",\n      \"switchFieldName\": \"nisactionparent\",\n      \"switchStatus\": transactionStatus.YES,\n      \"needRights\": false //\"controlName\": \"DefaultTestSection\"\n\n    }];\n    this.mappingInputFieldList = [{\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"nchildreportdesigncode\",\n      \"listName\": \"childComponentList\",\n      \"optionId\": \"nreportdesigncode\",\n      \"optionValue\": \"sdisplayname\"\n    }, {\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"listName\": \"optionalParameterList\",\n      \"optionId\": \"value\",\n      \"optionValue\": \"label\"\n    }, {\n      \"idsName\": \"IDS_PARENTPARAMETER\",\n      \"dataField\": \"nparentreportdesigncode\",\n      \"listName\": \"parentComponentList\",\n      \"optionId\": \"nreportdesigncode\",\n      \"optionValue\": \"sdisplayname\"\n    } // { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"nactionreportdesigncode\",\"listName\":\"actionMappingParentList\",\n    //        \"optionId\":\"nreportdesigncode\",  \"optionValue\":\"sdisplayname\"},\n    ]; // this.actionGridFieldList = [\n    //                    { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"sparentparametername\", \"width\":\"300px\"},\n    //                    { \"idsName\": \"IDS_CHILDPARAMETER\", \"dataField\": \"schildparametername\", \"width\":\"300px\"},\n    //                     ];\n\n    this.subReportGridFieldList = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_FTPFILE\",\n      \"dataField\": \"ssystemfilename\",\n      \"width\": \"400px\"\n    }];\n    this.imageGridFieldList = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_FTPFILE\",\n      \"dataField\": \"ssystemfilename\",\n      \"width\": \"400px\"\n    }]; //  this.formRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  render() {\n    const addMasterId = this.state.controlMap.has(\"AddReportMaster\") && this.state.controlMap.get(\"AddReportMaster\").ncontrolcode;\n    const editMasterId = this.state.controlMap.has(\"EditReportMaster\") && this.state.controlMap.get(\"EditReportMaster\").ncontrolcode;\n    const deleteMasterId = this.state.controlMap.has(\"DeleteReportMaster\") && this.state.controlMap.get(\"DeleteReportMaster\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"ReportMaster\",\n      selectedObject: \"SelectedReportMaster\",\n      primaryKeyField: \"nreportcode\",\n      fetchUrl: \"reportconfig/getReportDesigner\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      childRefs: [],\n      searchFieldList: [\"sreportname\", \"sreportdisplayname\", \"sregtypename\", \"sregsubtypename\", \"sreportmodulename\", \"sactivestatus\", \"scontrolids\", \"sdisplayname\"],\n      changeList: [\"ReportDetails\", \"SelectedReportDetail\", \"ReportParameter\", \"ReportDesignConfig\", \"ReportParameterMapping\", \"ReportParameterAction\", \"SubReportDetails\", \"ReportImages\"],\n      isSingleSelect: true\n    };\n    const addMasterParam = {\n      screenName: \"IDS_REPORTMASTER\",\n      operation: \"create\",\n      primaryKeyName: \"nreportcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addMasterId,\n      filterReportType: this.props.Login.masterData.SelectedFilterReportType\n    };\n    const addDetailId = this.state.controlMap.has(\"AddReportDetails\") && this.state.controlMap.get(\"AddReportDetails\").ncontrolcode;\n    const editDetailId = this.state.controlMap.has(\"EditReportDetails\") && this.state.controlMap.get(\"EditReportDetails\").ncontrolcode;\n    const deleteDetailId = this.state.controlMap.has(\"DeleteReportDetails\") && this.state.controlMap.get(\"DeleteReportDetails\").ncontrolcode;\n    const addDetailParam = {\n      screenName: \"IDS_REPORTVERSION\",\n      operation: \"create\",\n      primaryKeyName: \"nreportdetailcode\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolcode: addDetailId\n    };\n    const configReportId = this.state.controlMap.has(\"AddReportDesignParameter\") && this.state.controlMap.get(\"AddReportDesignParameter\").ncontrolcode;\n    const parameterMapId = this.state.controlMap.has(\"AddReportParameterMapping\") && this.state.controlMap.get(\"AddReportParameterMapping\").ncontrolcode;\n    const approveReportId = this.state.controlMap.has(\"ApproveReportVersion\") && this.state.controlMap.get(\"ApproveReportVersion\").ncontrolcode;\n    const confirmMessage = new ConfirmMessage();\n    let mandatoryFields = [];\n\n    if (this.props.Login.screenName === \"IDS_REPORTMASTER\") {\n      if (this.props.Login.operation === \"create\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_REPORTTYPE\",\n          \"dataField\": \"nreporttypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n\n        if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA) {\n          mandatoryFields.push({\n            \"idsName\": \"IDS_REGISTRATIONTYPE\",\n            \"dataField\": \"nregtypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_REGISTRATIONSUBTYPE\",\n            \"dataField\": \"nregsubtypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_REPORTSUBTYPE\",\n            \"dataField\": \"ncoareporttypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        } else if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.MIS) {\n          mandatoryFields.push({\n            \"idsName\": \"IDS_MODULENAME\",\n            \"dataField\": \"nreportmodulecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        } else if (this.state.selectedRecord[\"nreporttypecode\"] && (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH || this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE)) {\n          ;\n          mandatoryFields.push({\n            \"idsName\": \"IDS_COAREPORTTYPE\",\n            \"dataField\": \"ncoareporttypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n          mandatoryFields.push({\n            \"idsName\": \"IDS_CERTIFICATETYPE\",\n            \"dataField\": \"ncertificatetypecode\",\n            \"mandatoryLabel\": \"IDS_SELECT\",\n            \"controlType\": \"selectbox\"\n          });\n        }\n\n        mandatoryFields.push({\n          \"idsName\": \"IDS_REPORTNAME\",\n          \"dataField\": \"sreportname\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        });\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      }\n    } else if (this.props.Login.screenName === \"IDS_REPORTVERSION\") {\n      if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_COAREPORTTYPE\",\n          \"dataField\": \"ncoareporttypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, // { \"idsName\": \"IDS_LAB\", \"dataField\": \"nsectioncode\" },\n        {\n          \"idsName\": \"IDS_DECISIONTYPE\",\n          \"dataField\": \"nreportdecisiontypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      } else if (this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_COAREPORTTYPE\",\n          \"dataField\": \"ncoareporttypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      } else {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      }\n    } else {\n      if (this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\") {\n        mandatoryFields.push({\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        });\n      }\n    }\n\n    const breadCrumbData = this.state.filterData || []; ///console.log(\"masterdata:\", this.props.Login.masterData);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 17\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      secondaryInitialSize: 25,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      paneHeight: this.state.parentHeight,\n      needMultiSelect: false,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.ReportMaster || [],\n      selectedMaster: [this.props.Login.masterData.SelectedReportMaster],\n      primaryKeyField: \"nreportcode\",\n      getMasterDetail: this.props.getSelectedReportMasterDetail,\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"sreportname\",\n      selectedListName: \"SelectedReportMaster\",\n      objectName: \"ReportMaster\",\n      listName: \"IDS_REPORT\",\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      subFields: [{\n        [designProperties.VALUE]: \"sreportdisplayname\"\n      }, {\n        [designProperties.VALUE]: \"sactivestatus\",\n        [designProperties.COLOUR]: \"Color\"\n      }],\n      needFilter: true //skip={this.state.masterSkip}\n      //take={this.state.masterTake}\n      ,\n      hidePaging: false,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"mastertoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(editMasterId) === -1,\n        onClick: this.props.getReportMasterComboService,\n        inputData: {\n          primaryKeyName: \"nreportcode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          screenName: \"IDS_REPORTMASTER\",\n          ncontrolcode: editMasterId,\n          filterReportType: this.props.Login.masterData.SelectedFilterReportType\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"mastertodelete\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteMasterId) === -1,\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteReport(props)),\n        inputData: {\n          primaryKeyName: \"nreportcode\",\n          operation: \"delete\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          screenName: \"IDS_REPORTMASTER\",\n          listName: \"reportmaster\",\n          ncontrolCode: deleteMasterId,\n          methodUrl: \"ReportMaster\"\n        }\n      }],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(addMasterId) === -1,\n        onClick: () => this.props.getReportMasterComboService(addMasterParam),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 53\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.reloadData(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 53\n        }\n      }))),\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(ReportConfigFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          reportTypeList: this.state.reportTypeList || [],\n          onComboChange: this.onComboChange,\n          filterReportType: this.props.Login.masterData.SelectedFilterReportType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 56\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1 //secondaryInitialSize={400}\n      ,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      style: {\n        paddingRight: '0'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      masterList: this.props.Login.masterData.ReportDetails || [],\n      needMultiSelect: false,\n      selectedMaster: [this.props.Login.masterData.SelectedReportDetail],\n      primaryKeyField: \"nreportdetailcode\",\n      getMasterDetail: this.props.getSelectedReportDetail,\n      inputParam: {\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData\n      },\n      mainField: \"sversionno\",\n      mainFieldLabel: this.props.intl.formatMessage({\n        id: \"IDS_VERSION\"\n      }),\n      selectedListName: \"SelectedReportDetail\",\n      objectName: \"ReportMaster\",\n      listName: \"IDS_REPORTDETAILS\",\n      hideSearch: true,\n      subFields: [{\n        [designProperties.VALUE]: \"sdisplaystatus\",\n        [designProperties.COLOUR]: \"Color\"\n      }],\n      needValidation: false,\n      needFilter: false,\n      moreField: [],\n      skip: this.state.detailSkip,\n      take: this.state.detailTake,\n      hidePaging: true,\n      handlePageChange: this.handleDetailPageChange,\n      splitModeClass: this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : '',\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"detailtoedit\",\n        hidden: this.state.userRoleControlRights.indexOf(editDetailId) === -1,\n        inputData: {\n          primaryKeyName: \"nreportdetailcode\",\n          operation: \"update\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          screenName: \"IDS_REPORTVERSION\",\n          ncontrolcode: editDetailId\n        },\n        onClick: props => confirmMessage.confirm(\"editDetailMessage\", this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_EDITDETAILCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.props.getReportDetailComboService(props))\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"mastertodelete\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteDetailId) === -1,\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteReport(props)),\n        inputData: {\n          primaryKeyName: \"nreportdetailcode\",\n          operation: \"delete\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          screenName: \"IDS_REPORTVERSION\",\n          listName: \"reportdetails\",\n          ncontrolCode: deleteDetailId,\n          methodUrl: \"ReportDetails\"\n        }\n      }],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addDetailId) === -1,\n        onClick: () => this.props.getReportDetailComboService(addDetailParam),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 69\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 73\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: `panel-main-content`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 65\n      }\n    }, this.props.Login.masterData.SelectedReportMaster && /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 77\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 81\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 93\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_REPORTDETAILS\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap p-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 85\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      style: {\n        float: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 97\n      }\n    }, this.props.Login.masterData.ReportParameter && this.props.Login.masterData.ReportParameter.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"d-flex justify-content-end dropdown badget_menu icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"configreportlink\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REPORTDESIGN\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(configReportId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 \",\n      onClick: () => this.props.getConfigReportComboService({\n        reportMaster: this.props.Login.masterData.SelectedReportMaster,\n        reportDetail: this.props.Login.masterData.SelectedReportDetail,\n        operation: \"config\",\n        ncontrolCode: configReportId,\n        screenName: \"IDS_REPORTDESIGN\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 113\n      }\n    }, /*#__PURE__*/React.createElement(ParameterConfigurationIcon, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"configreporticon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 117\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"parametermappinglink\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_PARAMETERMAPPING\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(parameterMapId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 \",\n      onClick: () => this.props.getParameterMappingComboService({\n        reportMaster: this.props.Login.masterData.SelectedReportMaster,\n        reportDetail: this.props.Login.masterData.SelectedReportDetail,\n        operation: \"create\",\n        ncontrolCode: parameterMapId,\n        userInfo: this.props.Login.userInfo,\n        screenName: \"IDS_PARAMETERMAPPING\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 113\n      }\n    }, /*#__PURE__*/React.createElement(ParameterMappingIcon, {\n      className: \"custom_icons\",\n      width: \"20\",\n      height: \"20\",\n      name: \"mappingreporticon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 117\n      }\n    })))) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"approvereportlink\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_APPROVEREPORT\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(approveReportId) === -1,\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      onClick: () => this.approveReport(approveReportId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faThumbsUp,\n      name: \"approvereporticon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 105\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTNAME\",\n      message: \"Report Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sreportname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTTYPE\",\n      message: \"Report Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sreportdisplayname))), //this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE\n    //   || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.COA ?\n    this.props.Login.masterData.SelectedReportMaster.isneedregtype === transactionStatus.YES ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REGTYPE\",\n      message: \"Registration Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 120\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 109\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sregtypename))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REGSUBTYPE\",\n      message: \"Registration Sub Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 120\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 109\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.nregsubtypecode === -1 ? '-' : this.props.Login.masterData.SelectedReportMaster.sregsubtypename)))) : \"\", this.props.Login.masterData.SelectedReportMaster.isneedsection === transactionStatus.YES ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 642,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_LAB\",\n      message: \"Section\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 120\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 109\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.nsectioncode === -1 ? '-' : this.props.Login.masterData.SelectedReportMaster.ssectionname)))) : \"\", this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.MIS && this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.SCREENWISE ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 113\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTSUBTYPE\",\n      message: \"Report Sub Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 124\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 113\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.scoareporttypename))) : \"\", this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.MIS ? /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_MODULENAME\",\n      message: \"Module Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sreportmodulename))) : \"\", this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.BATCH || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 103\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CERTIFICATETYPE\",\n      message: \"Certificate Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 120\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 109\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.scertificatetype))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_REPORTBATCHTYPE\",\n      message: \"Report Batch Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 116\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 105\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sbatchdisplayname))), \" \") : \"\", this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SCREENWISE ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 111\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 113\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 117\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SCREENNAME\",\n      message: \"Screen Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 128\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 117\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sdisplayname))), /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 109\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 113\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CONTROLNAME\",\n      message: \"Control Name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 124\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 113\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.scontrolids))), \" \") : \"\"), this.props.Login.masterData.SelectedReportDetail && /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 781,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_ISPLSQLQUERY\",\n      message: \"Is PLSQL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 782,\n        columnNumber: 116\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 783,\n        columnNumber: 105\n      }\n    }, this.props.Login.masterData.SelectedReportDetail.splsqlquery))), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 787,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 105\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FILE\",\n      message: \"File\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 788,\n        columnNumber: 116\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 105\n      }\n    }, this.props.Login.masterData.SelectedReportDetail.sfilename)))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 800,\n        columnNumber: 89\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 93\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 802,\n        columnNumber: 97\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 101\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_DESCRIPTION\",\n      message: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 112\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 804,\n        columnNumber: 101\n      }\n    }, this.props.Login.masterData.SelectedReportMaster.sdescription))))))))))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 827,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 828,\n        columnNumber: 77\n      }\n    }, this.props.Login.masterData[\"ReportMaster\"] && /*#__PURE__*/React.createElement(CustomTabs, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 830,\n        columnNumber: 85\n      }\n    })))))))))))))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal //size={'xl'}\n      ,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      ignoreFormValidation: this.props.Login.screenName === \"IDS_REPORTDESIGN\" || this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\",\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation //formatMessage={this.props.intl.formatMessage}\n        ,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 871,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_REPORTMASTER\" ? /*#__PURE__*/React.createElement(AddReportMaster, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        reportTypeList: this.props.Login.reportTypeList || [],\n        coaReportTypeList: this.props.Login.reportSubTypeList || [],\n        certificateTypeList: this.props.Login.certificateTypeList || [],\n        regTypeList: this.props.Login.regTypeList || [],\n        regSubTypeList: this.props.Login.regSubTypeList || [] //regType={this.props.Login.regType || []}\n        ,\n        controlButton: this.props.Login.controlButton || [],\n        sectionList: this.props.Login.sectionList || [],\n        decisionTypeList: this.props.Login.reportDecisionTypeList || [],\n        controlScreen: this.props.Login.controlScreen || [],\n        reportModuleList: this.props.Login.reportModuleList || [],\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        onDropImage: this.onDropImage,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        reportVersionStatus: this.props.Login.reportVersionStatus || transactionStatus.DRAFT,\n        filterReportType: this.props.Login.masterData.SelectedFilterReportType || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === \"IDS_REPORTVERSION\" ? /*#__PURE__*/React.createElement(AddReportDetail, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange //coaReportTypeList={this.props.Login.reportSubTypeList || []}\n        // certificateTypeList={this.props.Login.certificateTypeList || []}\n        // sectionList={this.props.Login.sectionList || []}\n        // decisionTypeList={this.props.Login.reportDecisionTypeList || []}\n        ,\n        reportMaster: this.props.Login.masterData.SelectedReportMaster || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        onDropImage: this.onDropImage,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 902,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_REPORTDESIGN\" ? /*#__PURE__*/React.createElement(AddDesign, {\n        operation: this.props.Login.operation,\n        selectedReportMaster: this.props.Login.masterData.SelectedReportMaster || {},\n        reportParameterList: this.props.Login.reportParameterList || [],\n        designComponentList: this.props.Login.designComponentList || [],\n        sqlQueryList: this.props.Login.sqlQueryList || [],\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {} //handleChange={this.handleChangeDesign}\n        ,\n        gridPrimaryKey: \"nreportdesigncode\",\n        designName: this.props.Login.masterData.SelectedReportMaster.sreportname || \"\",\n        addDesignParam: this.state.addDesignParam || this.props.Login.masterData.ReportDesignConfig,\n        gridData: this.state.gridData || this.props.Login.masterData.ReportDesignConfig,\n        addParametersInDataGrid: this.addParametersInDataGrid,\n        deleteRecordWORights: this.removeParametersInDataGrid,\n        inputColumnList: this.designInputFieldList,\n        gridColumnList: this.designGridColumnList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 918,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === \"IDS_PARAMETERMAPPING\" ? /*#__PURE__*/React.createElement(ParameterMapping, {\n        operation: this.props.Login.operation,\n        parentComponentList: this.props.Login.parentComponentList || [],\n        childComponentList: this.props.Login.childComponentList || [],\n        optionalParameterList: this.state.optionalParameterList || [],\n        onInputOnChange: this.onInputOnChange,\n        handleChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        addMappingParam: this.state.addMappingParam || this.props.Login.masterData.ReportParameterMapping,\n        mappingGridData: this.state.mappingGridData || this.props.Login.masterData.ReportParameterMapping,\n        addParametersInDataGrid: this.bindMappingParametersToDataGrid,\n        deleteRecordWORights: this.unbindMappingParametersFromDataGrid,\n        inputColumnList: this.mappingInputFieldList,\n        mappingGridColumnList: this.mappingGridFieldList,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        detailedFieldList: this.detailedGridFieldList,\n        bindActionParameter: this.bindActionParameter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 940,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\" ? /*#__PURE__*/React.createElement(AddAttachment, {\n        operation: this.props.Login.operation,\n        selectedRecord: this.state.selectedRecord || {},\n        onDropImage: this.onDropImage,\n        deleteFile: this.deleteFile,\n        actionType: this.state.actionType,\n        attachmentType: this.props.Login.screenName === \"IDS_SUBREPORTS\" ? \".jrxml\" : \"image/*\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 960,\n          columnNumber: 49\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 855,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      const addDesignParam = [];\n      const gridData = [];\n      this.props.Login.masterData.ReportDesignConfig && this.props.Login.masterData.ReportDesignConfig.forEach(item => {\n        addDesignParam.push({ ...item\n        });\n        gridData.push({ ...item\n        });\n      });\n      const addMappingParam = [];\n      const mappingGridData = [];\n      this.props.Login.masterData.ReportParameterMapping && this.props.Login.masterData.ReportParameterMapping.forEach(item => {\n        addMappingParam.push({ ...item\n        });\n        mappingGridData.push({ ...item\n        });\n      });\n      const reportTypeMap = constructOptionList(this.props.Login.masterData.ReportTypeList || [], \"nreporttypecode\", \"sdisplayname\", undefined, undefined, true);\n      const reportTypeList = reportTypeMap.get(\"OptionList\");\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        reportTypeList,\n        filterData,\n        userRoleControlRights,\n        controlMap,\n        addDesignParam,\n        gridData,\n        addMappingParam,\n        mappingGridData // addActionParam, \n        // actionGridData\n\n      });\n    } else {\n      if (this.props.Login.masterData !== previousProps.Login.masterData) {\n        const filterData = this.generateBreadCrumData();\n        const reportTypeMap = constructOptionList(this.props.Login.masterData.ReportTypeList || [], \"nreporttypecode\", \"sdisplayname\", undefined, undefined, true);\n        const reportTypeList = reportTypeMap.get(\"OptionList\");\n        const addDesignParam = [];\n        const gridData = [];\n        this.props.Login.masterData.ReportDesignConfig && this.props.Login.masterData.ReportDesignConfig.forEach(item => {\n          addDesignParam.push({ ...item\n          });\n          gridData.push({ ...item\n          });\n        });\n        const addMappingParam = [];\n        const mappingGridData = [];\n        this.props.Login.masterData.ReportParameterMapping && this.props.Login.masterData.ReportParameterMapping.forEach(item => {\n          addMappingParam.push({ ...item\n          });\n          mappingGridData.push({ ...item\n          });\n        });\n        this.setState({\n          reportTypeList,\n          filterData,\n          addDesignParam,\n          gridData,\n          addMappingParam,\n          mappingGridData\n        });\n      }\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType) {\n      breadCrumbData.push({\n        \"label\": \"IDS_REPORTTYPE\",\n        \"value\": this.props.Login.masterData.SelectedFilterReportType ? this.props.intl.formatMessage({\n          id: this.props.Login.masterData.SelectedFilterReportType.sdisplayname\n        }) : \"\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStatetoProps, {\n  callService,\n  getReportMasterComboService,\n  updateStore,\n  crudMaster,\n  getReportDetailComboService,\n  getSelectedReportMasterDetail,\n  getSelectedReportDetail,\n  getConfigReportComboService,\n  getParameterMappingComboService,\n  //getActionMappingComboService, \n  getReportRegSubType,\n  validateEsignCredential,\n  filterTransactionList,\n  getReportSubType,\n  getControlButton,\n  getregtype\n})(injectIntl(ReportConfig));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/reports/reportsconfig/ReportConfig.jsx"],"names":["React","Component","faThumbsUp","faPlus","faSync","Card","Col","Row","Button","FormGroup","FormLabel","Nav","injectIntl","FormattedMessage","connect","toast","TransactionListMaster","DataGrid","designProperties","CustomTabs","ProductList","ListWrapper","FontAwesomeIcon","SplitterLayout","PerfectScrollbar","ReadOnlyText","ContentPanel","callService","getReportMasterComboService","updateStore","getSelectedReportMasterDetail","getReportDetailComboService","getSelectedReportDetail","getConfigReportComboService","getParameterMappingComboService","filterTransactionList","getReportSubType","getregtype","crudMaster","getReportRegSubType","validateEsignCredential","getControlButton","DEFAULT_RETURN","SlideOutModal","showEsign","getControlMap","create_UUID","constructOptionList","AddDesign","ParameterMapping","reportTypeEnum","transactionStatus","RegistrationType","ConfirmMessage","designComponents","Esign","AddReportMaster","AddReportDetail","AddAttachment","ReportConfigFilter","BreadcrumbComponent","mapStatetoProps","state","Login","ReportConfig","constructor","props","onSecondaryPaneSizeChange","e","val","setState","firstPane","tabPane","childPane","parentHeight","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","skip","take","handleMasterPageChange","handleDetailPageChange","openFilter","showFilter","updateInfo","typeName","data","closeFilter","onFilterSubmit","searchRef","current","value","inputParam","inputData","userInfo","nreporttypecode","selectedRecord","String","classUrl","methodUrl","displayName","onTabChange","tabProps","screenName","tabDetail","tabMap","Map","addSubReportId","controlMap","has","get","ncontrolcode","deleteSubReportId","addImageId","deleteImageId","set","masterData","length","parameterColumnList","userRoleControlRights","tabGridColumnList","mappingGridFieldList","indexOf","openModal","subReportGridFieldList","deleteAttachment","operation","selectedId","imageGridFieldList","ncontrolCode","SelectedReportDetail","warn","intl","formatMessage","id","ntransactionstatus","DRAFT","sreportname","SelectedReportMaster","APPROVED","RETIRED","removeParametersInDataGrid","selectedItem","addDesignParamNew","addDesignParam","filter","item","nreportparametercode","gridDataNew","gridData","addParametersInDataGrid","ReportParameter","validData","trim","COMBOBOX","DATEPICKER","undefined","copySelected","index","findIndex","push","sreportparametername","label","sdisplayname","ndesigncomponentcode","sdesigncomponentname","ndays","info","unbindMappingParametersFromDataGrid","addMappingParamNew","addMappingParam","nchildreportdesigncode","nparentreportdesigncode","mappingGridDataNew","mappingGridData","bindMappingParametersToDataGrid","sfieldname","sparentparametername","schildparametername","nactionparameter","NO","nactionreportdesigncode","bindActionParameter","rowItem","event","gridMappingParam","target","checked","forEach","YES","nisactionparent","index1","handleChangeDesign","valueParam","closeModal","loadEsign","onComboChange","comboData","fieldName","MIS","SCREENWISE","SAMPLE","reportType","nregtypecode","PLASMA_POOL","sqlquery","ssqlquery","param","param1","query","index2","parameter","substring","includes","replace","optionalParameterList","registrationType","sbatchdisplayname","ControlScreen","onInputOnChange","type","name","ACTIVE","DEACTIVE","onDropImage","attachedFiles","actionType","onSaveClick","saveType","formRef","onSaveVersion","onSaveMaster","onSaveReportConfig","onSaveParameterMapping","onSaveParameterAction","onSaveSubReport","onSaveReportImage","reportFile","sfilename","isFileEdited","formData","FormData","postParam","reportmaster","nmastersitecode","inputListName","selectedObject","primaryKeyField","reportVersionStatus","JSON","parse","stringify","ApprovedReportMaster","NA","COA","BATCH","isneedregtype","userinfo","reportdetails","nversionno","nisplsqlquery","Array","isArray","splittedFileName","split","fileExtension","uniquefilename","append","isFileupload","nformcode","screenData","isChild","ReportDesignConfig","nreportdetailcode","nsqlquerycode","dataState","count","valid","childComponentList","ReportParameterMapping","subreportdetails","nreportcode","reportimages","deleteFile","approveReport","primaryKeyValue","fetchUrl","fecthInputObject","deleteParam","message","toLowerCase","deleteReport","listName","mastertodelete","updateReportStatus","methodParam","mastertoupdate","status","validateEsign","sreason","password","reloadData","SelectedFilterReportType","createRef","masterStatus","error","paneHeight","secondPaneHeight","detailSkip","detailTake","settings","parseInt","designInputFieldList","designGridColumnList","detailedGridFieldList","mappingInputFieldList","getDerivedStateFromProps","componentDidMount","height","clientHeight","render","addMasterId","editMasterId","deleteMasterId","filterParam","childRefs","searchFieldList","changeList","isSingleSelect","addMasterParam","primaryKeyName","filterReportType","addDetailId","editDetailId","deleteDetailId","addDetailParam","configReportId","parameterMapId","approveReportId","confirmMessage","mandatoryFields","breadCrumbData","filterData","searchedData","ReportMaster","VALUE","COLOUR","title","controlname","objectName","hidden","onClick","confirm","reportTypeList","paddingRight","ReportDetails","borderBottom","display","marginTop","float","reportMaster","reportDetail","sreportdisplayname","sregtypename","nregsubtypecode","sregsubtypename","isneedsection","nsectioncode","ssectionname","scoareporttypename","sreportmodulename","scertificatetype","scontrolids","splsqlquery","sdescription","reportSubTypeList","certificateTypeList","regTypeList","regSubTypeList","controlButton","sectionList","reportDecisionTypeList","controlScreen","reportModuleList","reportParameterList","designComponentList","sqlQueryList","parentComponentList","componentDidUpdate","previousProps","Object","values","map","reportTypeMap","ReportTypeList","generateBreadCrumData","componentWillUnmount","modalName"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { faThumbsUp, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport { Card, Col, Row, Button, FormGroup, FormLabel, Nav } from 'react-bootstrap';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport TransactionListMaster from '../../../components/TransactionListMaster';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport { designProperties } from '../../../components/Enumeration';\r\nimport CustomTabs from '../../../components/custom-tabs/custom-tabs.component';\r\nimport { ProductList } from '../../testmanagement/testmaster-styled';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { ReadOnlyText, ContentPanel } from '../../../components/App.styles';\r\nimport '../../registration/registration.css';\r\nimport {\r\n    callService, getReportMasterComboService, updateStore, getSelectedReportMasterDetail,\r\n    getReportDetailComboService, getSelectedReportDetail, getConfigReportComboService,\r\n    getParameterMappingComboService, //getActionMappingComboService, \r\n    filterTransactionList, getReportSubType,getregtype,\r\n    crudMaster, getReportRegSubType, validateEsignCredential,getControlButton\r\n} from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap, create_UUID , constructOptionList} from '../../../components/CommonScript';\r\nimport AddDesign from '../../../components/add-design/add-design.component';\r\nimport ParameterMapping from '../../../components/add-design/parameter-mapping.component';\r\nimport { reportTypeEnum, transactionStatus,RegistrationType } from '../../../components/Enumeration';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\nimport { designComponents } from '../../../components/Enumeration';\r\n\r\nimport Esign from '../../audittrail/Esign';\r\nimport AddReportMaster from './AddReportMaster';\r\nimport AddReportDetail from './AddReportDetail';\r\nimport AddAttachment from './AddAttachment';\r\nimport ReportConfigFilter from './ReportConfigFilter';\r\n\r\nimport { ReactComponent as ParameterConfigurationIcon } from '../../../assets/image/parameter-configuration.svg';\r\nimport { ReactComponent as ParameterMappingIcon } from '../../../assets/image/parameter-mapping.svg';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nclass ReportConfig extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        // const dataState = {\r\n        //     skip: 0,\r\n        //     take: 10,\r\n        // }; \r\n        this.searchRef = React.createRef();\r\n        this.state = {\r\n\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\", //dataState, dataResult:[],\r\n            screenName: undefined,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            // actionMappingParentList:[],\r\n            addMappingParam: [],\r\n            firstPane: 0,\r\n            paneHeight: 0,\r\n            secondPaneHeight: 0,\r\n            tabPane: 0,\r\n            //masterSkip:0,\r\n            //masterTake:25,\r\n            detailSkip:0,\r\n            detailTake:10,\r\n            splitChangeWidthPercentage: 22,\r\n            skip: 0,\r\n            take: this.props.Login.settings && parseInt(this.props.Login.settings[3])\r\n\r\n        }\r\n\r\n        this.parameterColumnList = [{ \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sreportparametername\", \"width\": \"250px\" },\r\n        { \"idsName\": \"IDS_DATATYPE\", \"dataField\": \"sdatatype\", \"width\": \"400px\" },\r\n        ];\r\n\r\n        this.designInputFieldList = [\r\n            { \"idsName\": \"IDS_REPORTNAME\", \"dataField\": \"sreportname\" },\r\n            {\r\n                \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"ndesigncomponentcode\", \"listName\": \"designComponentList\",\r\n                \"optionId\": \"ndesigncomponentcode\", \"optionValue\": \"sdesigncomponentname\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"nreportparametercode\", \"listName\": \"reportParameterList\",\r\n                \"optionId\": \"nreportparametercode\", \"optionValue\": \"sreportparametername\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_EXISTINGLINKTABLE\", \"dataField\": \"nsqlquerycode\", \"listName\": \"sqlQueryList\",\r\n                \"optionId\": \"nsqlquerycode\", \"optionValue\": \"ssqlqueryname\"\r\n            },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\" },\r\n            { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\" },\r\n            //{ \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"nmandatory\"}\r\n        ];\r\n        this.designGridColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sreportparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"sdesigncomponentname\", \"width\": \"200px\" },\r\n            // { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\" },\r\n            //  { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"150px\" },\r\n            // { \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"smandatory\", \"width\": \"150px\" },\r\n        ];\r\n\r\n        this.tabGridColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sreportparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"sdesigncomponentname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SQLQUERY\", \"dataField\": \"ssqlqueryname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"150px\" },\r\n            { \"idsName\": \"IDS_MANDATORY\", \"dataField\": \"smandatory\", \"width\": \"150px\" },\r\n        ];\r\n\r\n        this.mappingGridFieldList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"schildparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"sparentparametername\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"sisactionparent\", \"width\": \"200px\" }\r\n        ];\r\n        this.detailedGridFieldList = [\r\n            { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"sparentparametername\", \"width\": \"200px\" },\r\n            {\r\n                \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"nisactionparent\", \"width\": \"200px\",\r\n                \"componentName\": \"switch\", \"switchFieldName\": \"nisactionparent\",\r\n                \"switchStatus\": transactionStatus.YES, \"needRights\": false, //\"controlName\": \"DefaultTestSection\"\r\n            },\r\n\r\n        ];\r\n\r\n        this.mappingInputFieldList = [\r\n            {\r\n                \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"nchildreportdesigncode\", \"listName\": \"childComponentList\",\r\n                \"optionId\": \"nreportdesigncode\", \"optionValue\": \"sdisplayname\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"listName\": \"optionalParameterList\",\r\n                \"optionId\": \"value\", \"optionValue\": \"label\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PARENTPARAMETER\", \"dataField\": \"nparentreportdesigncode\", \"listName\": \"parentComponentList\",\r\n                \"optionId\": \"nreportdesigncode\", \"optionValue\": \"sdisplayname\"\r\n            },\r\n            // { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"nactionreportdesigncode\",\"listName\":\"actionMappingParentList\",\r\n            //        \"optionId\":\"nreportdesigncode\",  \"optionValue\":\"sdisplayname\"},\r\n\r\n        ];\r\n\r\n        // this.actionGridFieldList = [\r\n        //                    { \"idsName\": \"IDS_ACTIONPARAMETER\", \"dataField\": \"sparentparametername\", \"width\":\"300px\"},\r\n        //                    { \"idsName\": \"IDS_CHILDPARAMETER\", \"dataField\": \"schildparametername\", \"width\":\"300px\"},\r\n        //                     ];\r\n\r\n        this.subReportGridFieldList = [\r\n            { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_FTPFILE\", \"dataField\": \"ssystemfilename\", \"width\": \"400px\" },\r\n        ];\r\n\r\n        this.imageGridFieldList = [\r\n            { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_FTPFILE\", \"dataField\": \"ssystemfilename\", \"width\": \"400px\" },\r\n        ];\r\n\r\n\r\n        //  this.formRef = React.createRef();\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    onSecondaryPaneSizeChange = (e, val) => {\r\n        this.setState({\r\n            firstPane: e - val,\r\n            tabPane: e - 80,\r\n            childPane: this.state.parentHeight - e - 80\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n\r\n    render() {\r\n      \r\n        const addMasterId = this.state.controlMap.has(\"AddReportMaster\") && this.state.controlMap.get(\"AddReportMaster\").ncontrolcode;\r\n        const editMasterId = this.state.controlMap.has(\"EditReportMaster\") && this.state.controlMap.get(\"EditReportMaster\").ncontrolcode;\r\n        const deleteMasterId = this.state.controlMap.has(\"DeleteReportMaster\") && this.state.controlMap.get(\"DeleteReportMaster\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\", primaryKeyField: \"nreportcode\",\r\n            fetchUrl: \"reportconfig/getReportDesigner\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, childRefs: [],\r\n            searchFieldList: [\"sreportname\", \"sreportdisplayname\", \"sregtypename\",\r\n                \"sregsubtypename\", \"sreportmodulename\", \"sactivestatus\", \"scontrolids\", \"sdisplayname\"],\r\n            changeList: [\"ReportDetails\",\"SelectedReportDetail\", \"ReportParameter\", \"ReportDesignConfig\",\r\n                            \"ReportParameterMapping\",\"ReportParameterAction\", \"SubReportDetails\",\"ReportImages\"], isSingleSelect: true\r\n\r\n        };\r\n\r\n        const addMasterParam = {\r\n            screenName: \"IDS_REPORTMASTER\", operation: \"create\", primaryKeyName: \"nreportcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addMasterId,\r\n            filterReportType:this.props.Login.masterData.SelectedFilterReportType\r\n        }\r\n\r\n        const addDetailId = this.state.controlMap.has(\"AddReportDetails\") && this.state.controlMap.get(\"AddReportDetails\").ncontrolcode;\r\n        const editDetailId = this.state.controlMap.has(\"EditReportDetails\") && this.state.controlMap.get(\"EditReportDetails\").ncontrolcode;\r\n        const deleteDetailId = this.state.controlMap.has(\"DeleteReportDetails\") && this.state.controlMap.get(\"DeleteReportDetails\").ncontrolcode;\r\n\r\n        const addDetailParam = {\r\n            screenName: \"IDS_REPORTVERSION\", operation: \"create\", primaryKeyName: \"nreportdetailcode\",\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n            ncontrolcode: addDetailId\r\n        }\r\n\r\n        const configReportId = this.state.controlMap.has(\"AddReportDesignParameter\") && this.state.controlMap.get(\"AddReportDesignParameter\").ncontrolcode;\r\n        const parameterMapId = this.state.controlMap.has(\"AddReportParameterMapping\") && this.state.controlMap.get(\"AddReportParameterMapping\").ncontrolcode;\r\n        const approveReportId = this.state.controlMap.has(\"ApproveReportVersion\") && this.state.controlMap.get(\"ApproveReportVersion\").ncontrolcode;\r\n\r\n        const confirmMessage = new ConfirmMessage();\r\n\r\n        let mandatoryFields = [];\r\n        if (this.props.Login.screenName === \"IDS_REPORTMASTER\") {\r\n            if (this.props.Login.operation === \"create\"){\r\n                mandatoryFields.push({ \"idsName\": \"IDS_REPORTTYPE\", \"dataField\": \"nreporttypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n                if(this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value===reportTypeEnum.COA){\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_REGISTRATIONTYPE\", \"dataField\": \"nregtypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_REGISTRATIONSUBTYPE\", \"dataField\": \"nregsubtypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_REPORTSUBTYPE\", \"dataField\": \"ncoareporttypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n                }else if(this.state.selectedRecord[\"nreporttypecode\"] && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.MIS){\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_MODULENAME\", \"dataField\": \"nreportmodulecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n\r\n                }else if(this.state.selectedRecord[\"nreporttypecode\"] && (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH\r\n                              || this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE)){;\r\n                    mandatoryFields.push({ \"idsName\": \"IDS_COAREPORTTYPE\", \"dataField\": \"ncoareporttypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});       \r\n                    mandatoryFields.push({ \"idsName\": \"IDS_CERTIFICATETYPE\", \"dataField\": \"ncertificatetypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"});\r\n            \r\n                }\r\n                mandatoryFields.push({ \"idsName\": \"IDS_REPORTNAME\", \"dataField\": \"sreportname\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"});\r\n                mandatoryFields.push({ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\" , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"});\r\n            } \r\n         \r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_REPORTVERSION\") {\r\n            if (this.state.selectedRecord[\"nreporttypecode\"]\r\n                && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) {\r\n                mandatoryFields.push(\r\n                    { \"idsName\": \"IDS_COAREPORTTYPE\", \"dataField\": \"ncoareporttypecode\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                   // { \"idsName\": \"IDS_LAB\", \"dataField\": \"nsectioncode\" },\r\n                    { \"idsName\": \"IDS_DECISIONTYPE\", \"dataField\": \"nreportdecisiontypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\" , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"});\r\n            }\r\n            else  if (this.state.selectedRecord[\"nreporttypecode\"]\r\n                && this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH) {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_COAREPORTTYPE\", \"dataField\": \"ncoareporttypecode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\" });\r\n            }\r\n            else {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\" , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"});\r\n            }\r\n\r\n        }\r\n        else {\r\n            if (this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\") {\r\n                mandatoryFields.push({ \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\" , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"});\r\n            }\r\n        }\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n        ///console.log(\"masterdata:\", this.props.Login.masterData);\r\n        return (\r\n\r\n            <>\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                {breadCrumbData.length > 0 ? \r\n                <BreadcrumbComponent breadCrumbItem={breadCrumbData}/> \r\n                :\"\"}\r\n                    <Row noGutters={true}>\r\n                    <Col md={12} className=\"parent-port-height\">\r\n                        {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <ListWrapper> */}\r\n                                <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n                                    {/* First column */}\r\n                                    <TransactionListMaster\r\n                                        paneHeight={this.state.parentHeight}\r\n                                        needMultiSelect={false}\r\n                                        masterList={this.props.Login.masterData.searchedData || (this.props.Login.masterData.ReportMaster || [])}\r\n                                        selectedMaster={[this.props.Login.masterData.SelectedReportMaster]}\r\n                                        primaryKeyField=\"nreportcode\"\r\n                                        getMasterDetail={this.props.getSelectedReportMasterDetail}\r\n                                        inputParam={{\r\n                                            userInfo: this.props.Login.userInfo,\r\n                                            masterData: this.props.Login.masterData\r\n                                        }}\r\n                                        mainField={\"sreportname\"}\r\n                                        selectedListName=\"SelectedReportMaster\"\r\n                                        objectName=\"ReportMaster\"\r\n                                        listName=\"IDS_REPORT\"\r\n                                        filterColumnData={this.props.filterTransactionList}\r\n                                        searchListName=\"searchedData\"\r\n                                        searchRef={this.searchRef}\r\n                                        filterParam={filterParam}\r\n\r\n                                        showFilter={this.props.Login.showFilter}\r\n                                        openFilter={this.openFilter}\r\n                                        closeFilter={this.closeFilter}\r\n                                        onFilterSubmit={this.onFilterSubmit}\r\n                                        subFields={[\r\n                                            { [designProperties.VALUE]: \"sreportdisplayname\" },\r\n                                            { [designProperties.VALUE]: \"sactivestatus\",[designProperties.COLOUR]:\"Color\" }\r\n                                        ]}\r\n                                        needFilter={true}\r\n                                        //skip={this.state.masterSkip}\r\n                                        //take={this.state.masterTake}\r\n                                        hidePaging={false}\r\n                                        handlePageChange={this.handlePageChange}\r\n                                        skip={this.state.skip}\r\n                                        take={this.state.take}\r\n\r\n                                        actionIcons={\r\n                                            [\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                    controlname: \"faPencilAlt\",\r\n                                                    objectName: \"mastertoedit\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(editMasterId) === -1,\r\n                                                    onClick: this.props.getReportMasterComboService,\r\n                                                    inputData: {\r\n                                                        primaryKeyName: \"nreportcode\",\r\n                                                        operation: \"update\",\r\n                                                        masterData: this.props.Login.masterData,\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        screenName: \"IDS_REPORTMASTER\",\r\n                                                        ncontrolcode: editMasterId,\r\n                                                        filterReportType:this.props.Login.masterData.SelectedFilterReportType\r\n                                                    },\r\n\r\n                                                },\r\n                                                {\r\n                                                    title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                    controlname: \"faTrashAlt\",\r\n                                                    objectName: \"mastertodelete\",\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(deleteMasterId) === -1,\r\n                                                    onClick: (props) => confirmMessage.confirm(\r\n                                                        \"deleteMessage\",\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                        () => this.deleteReport(props)\r\n                                                    ),\r\n                                                    inputData: {\r\n                                                        primaryKeyName: \"nreportcode\",\r\n                                                        operation: \"delete\",\r\n                                                        masterData: this.props.Login.masterData,\r\n                                                        userInfo: this.props.Login.userInfo,\r\n                                                        screenName: \"IDS_REPORTMASTER\",\r\n                                                        listName: \"reportmaster\",\r\n                                                        ncontrolCode: deleteMasterId, methodUrl: \"ReportMaster\"\r\n                                                    }\r\n                                                },\r\n\r\n                                            ]\r\n                                        }\r\n                                        commonActions={\r\n                                            <ProductList className=\"d-flex product-category float-right\">\r\n                                                <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    hidden={this.state.userRoleControlRights.indexOf(addMasterId) === -1}\r\n                                                    onClick={() => this.props.getReportMasterComboService(addMasterParam)}>\r\n                                                    <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                                </Button>\r\n                                                <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                    onClick={() => this.reloadData()} \r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                    <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                </Button>\r\n                                            </ProductList>\r\n                                        }\r\n                                        filterComponent={[ \r\n                                            { \"IDS_FILTER\":\r\n                                                       <ReportConfigFilter\r\n                                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                                reportTypeList={this.state.reportTypeList || []}\r\n                                                                onComboChange={this.onComboChange}\r\n                                                                filterReportType={this.props.Login.masterData.SelectedFilterReportType}\r\n                                                       />\r\n                                            }\r\n                                        ]}\r\n                                    />\r\n\r\n                                    {/* End of first column */}\r\n                                    <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\r\n                                        customClassName=\"fixed_list_height\">\r\n                                        <PerfectScrollbar>\r\n                                            {/* Start of second column */}\r\n                                            <div className=\"card_group\">\r\n                                                <Row>\r\n                                                    <Col md={3} style={{ paddingRight: '0' }}>\r\n                                                        {/* Start of version column */}\r\n                                                        <TransactionListMaster\r\n                                                            masterList={this.props.Login.masterData.ReportDetails || []}\r\n                                                            needMultiSelect={false}\r\n                                                            selectedMaster={[this.props.Login.masterData.SelectedReportDetail]}\r\n                                                            primaryKeyField=\"nreportdetailcode\"\r\n                                                            getMasterDetail={this.props.getSelectedReportDetail}\r\n                                                            inputParam={{\r\n                                                                userInfo: this.props.Login.userInfo,\r\n                                                                masterData: this.props.Login.masterData\r\n                                                            }}\r\n                                                            mainField={\"sversionno\"}\r\n                                                            mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n                                                            selectedListName=\"SelectedReportDetail\"\r\n                                                            objectName=\"ReportMaster\"\r\n                                                            listName=\"IDS_REPORTDETAILS\"\r\n                                                            hideSearch={true}                                                           \r\n                                                            subFields={[\r\n                                                                { [designProperties.VALUE]: \"sdisplaystatus\",[designProperties.COLOUR]:\"Color\"  }\r\n                                                            ]}\r\n                                                            needValidation={false}\r\n                                                            needFilter={false}\r\n                                                            moreField={[]}\r\n                                                            skip={this.state.detailSkip}\r\n                                                            take={this.state.detailTake}\r\n                                                            hidePaging={true}\r\n                                                            handlePageChange={this.handleDetailPageChange}\r\n                                                            splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                            actionIcons={\r\n                                                                [\r\n                                                                    {\r\n                                                                        title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                        controlname: \"faPencilAlt\",\r\n                                                                        objectName: \"detailtoedit\",\r\n                                                                        hidden: this.state.userRoleControlRights.indexOf(editDetailId) === -1,\r\n                                                                        inputData: {\r\n                                                                            primaryKeyName: \"nreportdetailcode\",\r\n                                                                            operation: \"update\",\r\n                                                                            masterData: this.props.Login.masterData,\r\n                                                                            userInfo: this.props.Login.userInfo,\r\n                                                                            screenName: \"IDS_REPORTVERSION\",\r\n                                                                            ncontrolcode: editDetailId,\r\n                                                                        },\r\n                                                                        onClick: (props) => confirmMessage.confirm(\r\n                                                                            \"editDetailMessage\",\r\n                                                                            this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                            this.props.intl.formatMessage({ id: \"IDS_EDITDETAILCONFIRMMSG\" }),\r\n                                                                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                            () => this.props.getReportDetailComboService(props)\r\n                                                                        ),\r\n                                                                    },\r\n                                                                    {\r\n                                                                        title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                        controlname: \"faTrashAlt\",\r\n                                                                        objectName: \"mastertodelete\",\r\n                                                                        hidden: this.state.userRoleControlRights.indexOf(deleteDetailId) === -1,\r\n                                                                        onClick: (props) => confirmMessage.confirm(\r\n                                                                            \"deleteMessage\",\r\n                                                                            this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                            this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                            () => this.deleteReport(props)\r\n                                                                        ),\r\n                                                                        inputData: {\r\n                                                                            primaryKeyName: \"nreportdetailcode\",\r\n                                                                            operation: \"delete\",\r\n                                                                            masterData: this.props.Login.masterData,\r\n                                                                            userInfo: this.props.Login.userInfo,\r\n                                                                            screenName: \"IDS_REPORTVERSION\",\r\n                                                                            listName: \"reportdetails\",\r\n                                                                            ncontrolCode: deleteDetailId, methodUrl: \"ReportDetails\"\r\n                                                                        }\r\n                                                                    }\r\n                                                                ]\r\n                                                            }\r\n                                                            commonActions={\r\n                                                                <ProductList className=\"d-flex product-category float-right\">\r\n                                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                                        hidden={this.state.userRoleControlRights.indexOf(addDetailId) === -1}\r\n                                                                        onClick={() => this.props.getReportDetailComboService(addDetailParam)}>\r\n                                                                        <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                                                    </Button>\r\n                                                                   \r\n                                                                </ProductList>\r\n                                                            }\r\n                                                        />\r\n                                                        {/* End of version column */}\r\n                                                    </Col>\r\n                                                    <Col md={9}>\r\n                                                        {/* Start of detailed content */}\r\n                                                        <ContentPanel className={`panel-main-content`}>\r\n                                                            <Card className=\"border-0\">\r\n                                                                <Card.Body className='p-0'>\r\n                                                                    {this.props.Login.masterData.SelectedReportMaster &&\r\n                                                                        <Row noGutters>\r\n                                                                            <Col md={12}>\r\n                                                                                <Card>\r\n                                                                                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                                                                                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                                            <h4 >{this.props.intl.formatMessage({ id: \"IDS_REPORTDETAILS\" })}</h4>\r\n                                                                                        </span>\r\n                                                                                    </Card.Header>\r\n                                                                                    <Card.Body className='form-static-wrap p-2'>\r\n                                                                                        <Row>\r\n                                                                                            <Col md={12}>\r\n                                                                                                <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                                                                                                    {this.props.Login.masterData.ReportParameter &&\r\n                                                                                                        this.props.Login.masterData.ReportParameter.length > 0 ? <>\r\n                                                                                                            <ContentPanel className=\"d-flex justify-content-end dropdown badget_menu icon-group-wrap\">\r\n                                                                                                                <Nav.Link name=\"configreportlink\"\r\n                                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_REPORTDESIGN\" })}\r\n                                                                                                                    hidden={this.state.userRoleControlRights.indexOf(configReportId) === -1}\r\n                                                                                                                    className=\"btn btn-circle outline-grey mr-2 \"\r\n                                                                                                                    onClick={() => this.props.getConfigReportComboService({\r\n                                                                                                                        reportMaster :this.props.Login.masterData.SelectedReportMaster,\r\n                                                                                                                        reportDetail: this.props.Login.masterData.SelectedReportDetail,\r\n                                                                                                                        operation: \"config\", ncontrolCode: configReportId,\r\n                                                                                                                        screenName: \"IDS_REPORTDESIGN\"\r\n                                                                                                                    })}>\r\n                                                                                                                    {/* <FontAwesomeIcon icon={faCog} name=\"configreporticon\"\r\n                                                                                                                    title={this.props.intl.formatMessage({id:\"IDS_CONFIGREPORT\"})}/> */}\r\n\r\n                                                                                                                    <ParameterConfigurationIcon className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                                                                        name=\"configreporticon\"/> \r\n                                                                                                                        { }\r\n                                                                                                                </Nav.Link>\r\n                                                                                                                <Nav.Link name=\"parametermappinglink\"\r\n                                                                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_PARAMETERMAPPING\" })}\r\n                                                                                                                    hidden={this.state.userRoleControlRights.indexOf(parameterMapId) === -1}\r\n                                                                                                                    className=\"btn btn-circle outline-grey mr-2 \"\r\n                                                                                                                    onClick={() => this.props.getParameterMappingComboService({\r\n                                                                                                                        reportMaster :this.props.Login.masterData.SelectedReportMaster,\r\n                                                                                                                        reportDetail: this.props.Login.masterData.SelectedReportDetail,\r\n                                                                                                                        operation: \"create\", ncontrolCode: parameterMapId,\r\n                                                                                                                        userInfo: this.props.Login.userInfo,\r\n                                                                                                                        screenName: \"IDS_PARAMETERMAPPING\"\r\n                                                                                                                    })}>\r\n                                                                                                                    {/* <FontAwesomeIcon icon={faLink} name=\"mappingreporticon\"\r\n                                                                                                                    title={this.props.intl.formatMessage({id:\"IDS_PARAMETERMAPPING\"})}/> */}\r\n\r\n                                                                                                                    <ParameterMappingIcon className=\"custom_icons\" width=\"20\" height=\"20\"\r\n                                                                                                                        name=\"mappingreporticon\"/> \r\n                                                                                                                        { }\r\n                                                                                                                </Nav.Link>\r\n                                                                                                            </ContentPanel>\r\n\r\n                                                                                                        </>\r\n\r\n                                                                                                        : \"\"}\r\n                                                                                                    <Nav.Link name=\"approvereportlink\"\r\n                                                                                                     data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVEREPORT\" })}\r\n                                                                                                        hidden={this.state.userRoleControlRights.indexOf(approveReportId) === -1}\r\n                                                                                                        className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                                                        onClick={() => this.approveReport(approveReportId)}>\r\n                                                                                                        <FontAwesomeIcon icon={faThumbsUp} name=\"approvereporticon\"/>\r\n                                                                                                    </Nav.Link>\r\n                                                                                                </div>\r\n                                                                                            </Col>\r\n                                                                                        </Row>\r\n                                                                                        <Row>\r\n                                                                                            <Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_REPORTNAME\" message=\"Report Name\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sreportname}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                            <Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_REPORTTYPE\" message=\"Report Type\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sreportdisplayname}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                            {//this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE\r\n                                                                                          //   || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.COA ?\r\n                                                                                                this.props.Login.masterData.SelectedReportMaster.isneedregtype === transactionStatus.YES ?\r\n                                                                                                <>\r\n                                                                                                    <Col md={4}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel><FormattedMessage id=\"IDS_REGTYPE\" message=\"Registration Type\" /></FormLabel>\r\n                                                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sregtypename}</ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col>\r\n                                                                                                    <Col md={4}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel><FormattedMessage id=\"IDS_REGSUBTYPE\" message=\"Registration Sub Type\" /></FormLabel>\r\n                                                                                                            <ReadOnlyText>{}\r\n                                                                                                             {this.props.Login.masterData.SelectedReportMaster.nregsubtypecode === -1 ?\r\n                                                                                                                        '-': this.props.Login.masterData.SelectedReportMaster.sregsubtypename }\r\n                                                                                                            </ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col>\r\n                                                                                                </> :\"\"}\r\n                                                                                                 {this.props.Login.masterData.SelectedReportMaster.isneedsection === transactionStatus.YES ?\r\n                                                                                                <>\r\n                                                                                                    <Col md={4}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel><FormattedMessage id=\"IDS_LAB\" message=\"Section\" /></FormLabel>\r\n                                                                                                            <ReadOnlyText>\r\n                                                                                                                    {this.props.Login.masterData.SelectedReportMaster.nsectioncode === -1 ?\r\n                                                                                                                        '-' : this.props.Login.masterData.SelectedReportMaster.ssectionname}\r\n                                                                                                            </ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col>                                                                                                  \r\n                                                                                                </>\r\n                                                                                                : \"\"}\r\n                                                                                                {this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.MIS \r\n                                                                                                            && this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.SCREENWISE ?\r\n                                                                                                        <Col md={4}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel><FormattedMessage id=\"IDS_REPORTSUBTYPE\" message=\"Report Sub Type\" /></FormLabel>\r\n                                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.scoareporttypename}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col>\r\n                                                                                                     \r\n                                                                                                    : \"\"}\r\n                                                                                                 {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE ?\r\n                                                                                                        <Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_DECISIONTYPE\" message=\"Decision Type\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sdecisiontypename}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col>\r\n                                                                                                    :\"\"} */}\r\n                                                                                            {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.MIS ?\r\n                                                                                            <Col md={4}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_MODULENAME\" message=\"Module Name\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sreportmodulename}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col> :\"\"}\r\n\r\n                                                                                            {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.BATCH\r\n                                                                                            || this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE ?\r\n                                                                                                    <><Col md={4}>\r\n                                                                                                        <FormGroup>\r\n                                                                                                            <FormLabel><FormattedMessage id=\"IDS_CERTIFICATETYPE\" message=\"Certificate Type\" /></FormLabel>\r\n                                                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.scertificatetype}</ReadOnlyText>\r\n                                                                                                        </FormGroup>\r\n                                                                                                    </Col> \r\n                                                                                                    <Col md={4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel><FormattedMessage id=\"IDS_REPORTBATCHTYPE\" message=\"Report Batch Type\" /></FormLabel>\r\n                                                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sbatchdisplayname}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col> </>\r\n                                                                                            : \"\"}\r\n\r\n                                                                                            {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SCREENWISE ?\r\n                                                                                                            <><Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_SCREENNAME\" message=\"Screen Name\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sdisplayname}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col> \r\n                                                                                                            <Col md={4}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel><FormattedMessage id=\"IDS_CONTROLNAME\" message=\"Control Name\" /></FormLabel>\r\n                                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.scontrolids}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col> </>\r\n                                                                                                    : \"\"}\r\n\r\n                                                                                            {/* <Col md={4}>\r\n                                                                                        <FormGroup>\r\n                                                                                            <FormLabel><FormattedMessage id=\"IDS_STATUS\" message=\"Status\"/></FormLabel>\r\n                                                                                            <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sactivestatus}</ReadOnlyText>\r\n                                                                                        </FormGroup>\r\n                                                                                    </Col>                                                                                     */}\r\n\r\n                                                                                        </Row>\r\n                                                                                        {this.props.Login.masterData.SelectedReportDetail &&\r\n                                                                                            <Row>\r\n                                                                                                {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.MIS && this.props.Login.masterData.SelectedReportMaster.nreporttypecode !== reportTypeEnum.SCREENWISE ?\r\n                                                                                                        <Col md={4}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel><FormattedMessage id=\"IDS_REPORTSUBTYPE\" message=\"Report Sub Type\" /></FormLabel>\r\n                                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.scoareporttypename}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col>\r\n                                                                                                     \r\n                                                                                                    : \"\"} */}\r\n                                                                                                       \r\n                                                                                                    {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SAMPLE ?\r\n                                                                                                        <>\r\n                                                                                                        <Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_DECISIONTYPE\" message=\"Decision Type\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sdecisiontypename}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col>\r\n                                                                                                            <Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_LAB\" message=\"Section\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>\r\n                                                                                                                            {this.props.Login.masterData.SelectedReportDetail.nsectioncode === -1 ?\r\n                                                                                                                             '-' : this.props.Login.masterData.SelectedReportDetail.ssectionname}\r\n                                                                                                                    </ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col>\r\n                                                                                                         </>\r\n                                                                                                    : \"\"} */}\r\n                                                                                                    {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.BATCH ?\r\n                                                                                                            <><Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_CERTIFICATETYPE\" message=\"Certificate Type\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.scertificatetype}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col> \r\n                                                                                                            <Col md={4}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel><FormattedMessage id=\"IDS_REPORTBATCHTYPE\" message=\"Report Batch Type\" /></FormLabel>\r\n                                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sbatchdisplayname}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col> </>\r\n                                                                                                    : \"\"} */}\r\n\r\n                                                                                                     {/* {this.props.Login.masterData.SelectedReportMaster.nreporttypecode === reportTypeEnum.SCREENWISE ?\r\n                                                                                                            <><Col md={4}>\r\n                                                                                                                <FormGroup>\r\n                                                                                                                    <FormLabel><FormattedMessage id=\"IDS_SCREENNAME\" message=\"Screen Name\" /></FormLabel>\r\n                                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sdisplayname}</ReadOnlyText>\r\n                                                                                                                </FormGroup>\r\n                                                                                                            </Col> \r\n                                                                                                            <Col md={4}>\r\n                                                                                                            <FormGroup>\r\n                                                                                                                <FormLabel><FormattedMessage id=\"IDS_CONTROLNAME\" message=\"Control Name\" /></FormLabel>\r\n                                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.scontrolids}</ReadOnlyText>\r\n                                                                                                            </FormGroup>\r\n                                                                                                        </Col> </>\r\n                                                                                                    : \"\"} */}\r\n                                                                                                    \r\n\r\n                                                                                                <Col md={4}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel><FormattedMessage id=\"IDS_ISPLSQLQUERY\" message=\"Is PLSQL\" /></FormLabel>\r\n                                                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.splsqlquery}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col>\r\n                                                                                                <Col md={8}>\r\n                                                                                                    <FormGroup>\r\n                                                                                                        <FormLabel><FormattedMessage id=\"IDS_FILE\" message=\"File\" /></FormLabel>\r\n                                                                                                        <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sfilename}</ReadOnlyText>\r\n                                                                                                    </FormGroup>\r\n                                                                                                </Col>\r\n                                                                                                {/* <Col md={4}>\r\n                                                                                            <FormGroup>\r\n                                                                                                <FormLabel><FormattedMessage id=\"IDS_VERSIONSTATUS\" message=\"Version Status\"/></FormLabel>\r\n                                                                                                <ReadOnlyText>{this.props.Login.masterData.SelectedReportDetail.sdisplaystatus}</ReadOnlyText>\r\n                                                                                            </FormGroup>\r\n                                                                                        </Col> */}\r\n                                                                                            </Row>\r\n                                                                                        }\r\n                                                                                        <Row>\r\n                                                                                            <Col md={12}>\r\n                                                                                                <FormGroup>\r\n                                                                                                    <FormLabel><FormattedMessage id=\"IDS_DESCRIPTION\" message=\"Description\" /></FormLabel>\r\n                                                                                                    <ReadOnlyText>{this.props.Login.masterData.SelectedReportMaster.sdescription}</ReadOnlyText>\r\n                                                                                                </FormGroup>\r\n                                                                                            </Col>\r\n                                                                                        </Row>\r\n                                                                                    </Card.Body>\r\n                                                                                </Card>\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    }\r\n\r\n                                                                </Card.Body>\r\n                                                            </Card>\r\n                                                        </ContentPanel>\r\n                                                        {/* End of detailed content */}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        {/* Start of tabs */}\r\n                                                        <ListWrapper>\r\n                                                            <ContentPanel className=\"panel-main-content\">\r\n                                                                <Card className=\"border-0\">\r\n                                                                    <Card.Body className='p-1'>\r\n                                                                        <Row noGutters>\r\n                                                                            <Col md={12}>\r\n                                                                                {this.props.Login.masterData[\"ReportMaster\"] &&\r\n                                                                                    <CustomTabs tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                                                                                }\r\n                                                                            </Col>\r\n                                                                        </Row>\r\n                                                                    </Card.Body>\r\n                                                                </Card>\r\n                                                            </ContentPanel>\r\n                                                        </ListWrapper>\r\n                                                        {/* End of tabs */}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n                                            {/* End of second column */}\r\n                                        </PerfectScrollbar>\r\n\r\n                                    </SplitterLayout>\r\n\r\n                                </SplitterLayout>\r\n                            {/* </ListWrapper > */}\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {/* Start of Modal Sideout for Creation */}\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        //size={'xl'}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        ignoreFormValidation={this.props.Login.screenName === \"IDS_REPORTDESIGN\" || this.props.Login.screenName === \"IDS_SUBREPORTS\"\r\n                            || this.props.Login.screenName === \"IDS_IMAGES\"}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                //formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.props.Login.screenName === \"IDS_REPORTMASTER\" ?\r\n                                <AddReportMaster\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    reportTypeList={this.props.Login.reportTypeList || []}\r\n                                    coaReportTypeList={this.props.Login.reportSubTypeList || []}\r\n                                    certificateTypeList={this.props.Login.certificateTypeList || []}\r\n                                    regTypeList={this.props.Login.regTypeList || []}\r\n                                    regSubTypeList={this.props.Login.regSubTypeList || []}\r\n                                    //regType={this.props.Login.regType || []}\r\n                                    controlButton={this.props.Login.controlButton || []}\r\n                                    sectionList={this.props.Login.sectionList || []}\r\n                                    decisionTypeList={this.props.Login.reportDecisionTypeList || []}\r\n                                    controlScreen={this.props.Login.controlScreen || []}\r\n                                    reportModuleList={this.props.Login.reportModuleList || []}\r\n                                    operation={this.props.Login.operation}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    onDropImage={this.onDropImage}\r\n                                    deleteFile={this.deleteFile}\r\n                                    actionType={this.state.actionType}\r\n                                    reportVersionStatus={this.props.Login.reportVersionStatus || transactionStatus.DRAFT}\r\n                                    filterReportType={this.props.Login.masterData.SelectedFilterReportType || {}}\r\n                                />\r\n                                : this.props.Login.screenName === \"IDS_REPORTVERSION\" ?\r\n                                    <AddReportDetail\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        //coaReportTypeList={this.props.Login.reportSubTypeList || []}\r\n                                       // certificateTypeList={this.props.Login.certificateTypeList || []}\r\n                                       // sectionList={this.props.Login.sectionList || []}\r\n                                       // decisionTypeList={this.props.Login.reportDecisionTypeList || []}\r\n                                        reportMaster={this.props.Login.masterData.SelectedReportMaster || {}}\r\n                                        operation={this.props.Login.operation}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        onDropImage={this.onDropImage}\r\n                                        deleteFile={this.deleteFile}\r\n                                        actionType={this.state.actionType}\r\n                                    />\r\n                                    : this.props.Login.screenName === \"IDS_REPORTDESIGN\" ?\r\n                                        <AddDesign\r\n                                            operation={this.props.Login.operation}\r\n                                            selectedReportMaster={this.props.Login.masterData.SelectedReportMaster || {}}\r\n                                            reportParameterList={this.props.Login.reportParameterList || []}\r\n                                            designComponentList={this.props.Login.designComponentList || []}\r\n                                            sqlQueryList={this.props.Login.sqlQueryList || []}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            handleChange={this.onComboChange}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            //handleChange={this.handleChangeDesign}\r\n                                            gridPrimaryKey={\"nreportdesigncode\"}\r\n                                            designName={this.props.Login.masterData.SelectedReportMaster.sreportname || \"\"}\r\n                                            addDesignParam={this.state.addDesignParam || this.props.Login.masterData.ReportDesignConfig}\r\n                                            gridData={this.state.gridData || this.props.Login.masterData.ReportDesignConfig}\r\n                                            addParametersInDataGrid={this.addParametersInDataGrid}\r\n                                            deleteRecordWORights={this.removeParametersInDataGrid}\r\n                                            inputColumnList={this.designInputFieldList}\r\n                                            gridColumnList={this.designGridColumnList}\r\n                                            controlMap={this.state.controlMap}\r\n                                            userRoleControlRights={this.state.userRoleControlRights}\r\n                                        />\r\n                                        : this.props.Login.screenName === \"IDS_PARAMETERMAPPING\" ?\r\n                                            <ParameterMapping\r\n                                                operation={this.props.Login.operation}\r\n                                                parentComponentList={this.props.Login.parentComponentList || []}\r\n                                                childComponentList={this.props.Login.childComponentList || []}\r\n                                                optionalParameterList={this.state.optionalParameterList || []}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                handleChange={this.onComboChange}\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                addMappingParam={this.state.addMappingParam || this.props.Login.masterData.ReportParameterMapping}\r\n                                                mappingGridData={this.state.mappingGridData || this.props.Login.masterData.ReportParameterMapping}\r\n                                                addParametersInDataGrid={this.bindMappingParametersToDataGrid}\r\n                                                deleteRecordWORights={this.unbindMappingParametersFromDataGrid}\r\n                                                inputColumnList={this.mappingInputFieldList}\r\n                                                mappingGridColumnList={this.mappingGridFieldList}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                detailedFieldList={this.detailedGridFieldList}\r\n                                                bindActionParameter={this.bindActionParameter}\r\n                                            />\r\n                                            : this.props.Login.screenName === \"IDS_SUBREPORTS\" || this.props.Login.screenName === \"IDS_IMAGES\" ?\r\n                                                <AddAttachment\r\n                                                    operation={this.props.Login.operation}\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    onDropImage={this.onDropImage}\r\n                                                    deleteFile={this.deleteFile}\r\n                                                    actionType={this.state.actionType}\r\n                                                    attachmentType={this.props.Login.screenName === \"IDS_SUBREPORTS\" ? \".jrxml\" : \"image/*\"}\r\n                                                /> : \"\"\r\n                        }\r\n                    /> : \"\"}\r\n                {/* End of Modal Sideout for Creation */}\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    handleMasterPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n            const addDesignParam = [];\r\n            const gridData = [];\r\n\r\n            this.props.Login.masterData.ReportDesignConfig &&\r\n                this.props.Login.masterData.ReportDesignConfig.forEach(item => {\r\n                    addDesignParam.push({ ...item });\r\n                    gridData.push({ ...item });\r\n                });\r\n\r\n            const addMappingParam = [];\r\n            const mappingGridData = [];\r\n\r\n            this.props.Login.masterData.ReportParameterMapping &&\r\n                this.props.Login.masterData.ReportParameterMapping.forEach(item => {\r\n                    addMappingParam.push({ ...item });\r\n                    mappingGridData.push({ ...item });\r\n                });\r\n\r\n            const reportTypeMap = constructOptionList(this.props.Login.masterData.ReportTypeList || [], \"nreporttypecode\",\r\n                        \"sdisplayname\", undefined, undefined, true);\r\n            const reportTypeList = reportTypeMap.get(\"OptionList\");\r\n            const filterData = this.generateBreadCrumData();\r\n\r\n            this.setState({reportTypeList, filterData,\r\n                userRoleControlRights, controlMap, addDesignParam, gridData,\r\n                addMappingParam, mappingGridData,// addActionParam, \r\n                // actionGridData\r\n            });\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n                const filterData = this.generateBreadCrumData();\r\n                const reportTypeMap = constructOptionList(this.props.Login.masterData.ReportTypeList || [], \"nreporttypecode\",\r\n                        \"sdisplayname\", undefined, undefined, true);\r\n                const reportTypeList = reportTypeMap.get(\"OptionList\");\r\n\r\n                const addDesignParam = [];\r\n                const gridData = [];\r\n\r\n                this.props.Login.masterData.ReportDesignConfig &&\r\n                    this.props.Login.masterData.ReportDesignConfig.forEach(item => {\r\n                        addDesignParam.push({ ...item });\r\n                        gridData.push({ ...item });\r\n                    });\r\n\r\n                const addMappingParam = [];\r\n                const mappingGridData = [];\r\n\r\n                this.props.Login.masterData.ReportParameterMapping &&\r\n                    this.props.Login.masterData.ReportParameterMapping.forEach(item => {\r\n                        addMappingParam.push({ ...item });\r\n                        mappingGridData.push({ ...item });\r\n                    });\r\n\r\n\r\n                this.setState({reportTypeList, filterData,\r\n                    addDesignParam, gridData, addMappingParam, mappingGridData\r\n                });\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.SelectedFilterReportType) {\r\n       \r\n           breadCrumbData.push(\r\n              \r\n                {\r\n                    \"label\": \"IDS_REPORTTYPE\",\r\n                    \"value\": this.props.Login.masterData.SelectedFilterReportType ?\r\n                        this.props.intl.formatMessage({ id: this.props.Login.masterData.SelectedFilterReportType.sdisplayname}) : \"\"\r\n                }\r\n           );\r\n        }\r\n        return breadCrumbData; \r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit =()=>{\r\n      \r\n       this.searchRef.current.value = \"\";\r\n       const inputParam = {\r\n           inputData: { \"userinfo\": this.props.Login.userInfo, \r\n                         nreporttypecode:this.state.selectedRecord[\"filterreporttypecode\"] ? \r\n                            String(this.state.selectedRecord[\"filterreporttypecode\"].value) : 0\r\n                    },\r\n           classUrl: \"reportconfig\",\r\n           methodUrl: \"ReportDesigner\",\r\n           userInfo: this.props.Login.userInfo,\r\n           displayName:\"IDS_REPORTDESIGNER\"\r\n       };\r\n\r\n       this.props.callService(inputParam);\r\n\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        const addSubReportId = this.state.controlMap.has(\"AddSubReportDetails\") && this.state.controlMap.get(\"AddSubReportDetails\").ncontrolcode;\r\n        const deleteSubReportId = this.state.controlMap.has(\"DeleteSubReportDetails\") && this.state.controlMap.get(\"DeleteSubReportDetails\").ncontrolcode;\r\n\r\n        const addImageId = this.state.controlMap.has(\"AddReportImages\") && this.state.controlMap.get(\"AddReportImages\").ncontrolcode;\r\n        const deleteImageId = this.state.controlMap.has(\"DeleteReportImages\") && this.state.controlMap.get(\"DeleteReportImages\").ncontrolcode;\r\n\r\n        tabMap.set(\"IDS_PARAMETERS\", <DataGrid primaryKeyField={\"nreportparametercode\"}\r\n                                                data={this.props.Login.masterData[\"ReportParameter\"] || []}\r\n                                                dataResult={this.props.Login.masterData[\"ReportParameter\"] || []}\r\n                                                dataState={{skip:0, take: this.props.Login.masterData[\"ReportParameter\"] ? this.props.Login.masterData[\"ReportParameter\"].length:0}}\r\n                                                extractedColumnList={this.parameterColumnList}\r\n                                                controlMap={this.state.controlMap}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                pageable={false}\r\n                                                scrollable={\"scrollable\"}\r\n                                                isActionRequired={false}\r\n                                                isToolBarRequired={false}\r\n                                                selectedId={null}\r\n                                                hideColumnFilter={true}\r\n                                            />)\r\n\r\n        tabMap.set(\"IDS_DESIGNPARAMETERS\", <DataGrid primaryKeyField={\"nreportdesignconfigcode\"}\r\n                                                    data={this.props.Login.masterData[\"ReportDesignConfig\"] || []}\r\n                                                    dataResult={this.props.Login.masterData[\"ReportDesignConfig\"] || []}\r\n                                                    dataState={{skip:0, take: this.props.Login.masterData[\"ReportDesignConfig\"] ? this.props.Login.masterData[\"ReportDesignConfig\"].length:0}}\r\n                                                   //dataState={this.state.dataState}\r\n                                                    //dataStateChange={(event)=> this.setState({dataState: event.dataState})}                                                           \r\n                                                    extractedColumnList={this.tabGridColumnList}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    pageable={false}\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    isActionRequired={false}\r\n                                                    isToolBarRequired={false}\r\n                                                    selectedId={null}\r\n                                                    hideColumnFilter={true}\r\n                                                />);\r\n\r\n        tabMap.set(\"IDS_PARAMETERMAPPING\", <DataGrid primaryKeyField={\"nreportparametermappingcode\"}\r\n                                                    data={this.props.Login.masterData[\"ReportParameterMapping\"] || []}\r\n                                                    dataResult={this.props.Login.masterData[\"ReportParameterMapping\"] || []}\r\n                                                    dataState={{skip:0, take: this.props.Login.masterData[\"ReportParameterMapping\"] ? this.props.Login.masterData[\"ReportParameterMapping\"].length:0}}\r\n                                                  \r\n                                                    extractedColumnList={this.mappingGridFieldList}\r\n                                                    controlMap={this.state.controlMap}\r\n                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                    inputParam={this.props.Login.inputParam}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    pageable={false}\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    isActionRequired={false}\r\n                                                    isToolBarRequired={false}\r\n                                                    selectedId={null}\r\n                                                    hideColumnFilter={true}\r\n                                                />);\r\n\r\n        // tabMap.set(\"IDS_ACTIONMAPPING\",  <DataGrid  primaryKeyField={\"nreportparameteractioncode\"}\r\n        //                                         data={this.props.Login.masterData[\"ReportParameterAction\"] || []}\r\n        //                                         dataResult={this.props.Login.masterData[\"ReportParameterAction\"] || []}\r\n        //                                         extractedColumnList={this.actionGridFieldList}\r\n        //                                         controlMap={this.state.controlMap}\r\n        //                                         userRoleControlRights={this.state.userRoleControlRights}\r\n        //                                         inputParam={this.props.Login.inputParam}\r\n        //                                         userInfo={this.props.Login.userInfo}\r\n        //                                         pageable={false}\r\n        //                                         scrollable={\"scrollable\"}                                            \r\n        //                                         isActionRequired={false}\r\n        //                                         isToolBarRequired={false}\r\n        //                                         selectedId={this.props.Login.selectedId}\r\n        //                                         hideColumnFilter={true}\r\n        //                                     />)\r\n\r\n        tabMap.set(\"IDS_SUBREPORTS\", <>\r\n            <Row noGutters={true}>\r\n                <Col md={12}>\r\n                    <div className=\"actions-stripe d-flex justify-content-end\">\r\n                        <Nav.Link name=\"addsubreport\" className=\"add-txt-btn\"\r\n                            hidden={this.state.userRoleControlRights.indexOf(addSubReportId) === -1}\r\n                            onClick={() => this.openModal(\"IDS_SUBREPORTS\")}>\r\n                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                            <FormattedMessage id='IDS_SUBREPORT' defaultMessage='Sub Report' />\r\n                        </Nav.Link>\r\n                    </div>\r\n                    <DataGrid primaryKeyField={\"nsubreportdetailcode\"}\r\n                        data={this.props.Login.masterData[\"SubReportDetails\"] || []}\r\n                        dataResult={this.props.Login.masterData[\"SubReportDetails\"] || []}\r\n                        dataState={{skip:0, take: this.props.Login.masterData[\"SubReportDetails\"] ? this.props.Login.masterData[\"SubReportDetails\"].length:0}}\r\n                                                  \r\n                        extractedColumnList={this.subReportGridFieldList}\r\n                        controlMap={this.state.controlMap}\r\n                        userRoleControlRights={this.state.userRoleControlRights}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        userInfo={this.props.Login.userInfo}\r\n                        pageable={false}\r\n                        deleteRecord={this.deleteAttachment}\r\n                        deleteParam={{\r\n                            screenName: \"IDS_SUBREPORTS\", methodUrl: \"SubReportDetails\", operation: \"delete\",\r\n                            //masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                            ncontrolcode: deleteSubReportId\r\n                        }}\r\n                        methodUrl={\"SubReportDetails\"}\r\n                        scrollable={\"scrollable\"}\r\n                        isActionRequired={true}\r\n                        isToolBarRequired={false}\r\n                        selectedId={this.props.Login.selectedId}\r\n                        hideColumnFilter={true}\r\n                    />\r\n                </Col>\r\n            </Row></>)\r\n\r\n        tabMap.set(\"IDS_IMAGES\", <>\r\n            <Row noGutters={true}>\r\n                <Col md={12}>\r\n                    <div className=\"actions-stripe d-flex justify-content-end\">\r\n                        <Nav.Link name=\"addimages\" className=\"add-txt-btn\"\r\n                            hidden={this.state.userRoleControlRights.indexOf(addImageId) === -1}\r\n                            onClick={() => this.openModal(\"IDS_IMAGES\")}>\r\n                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                            <FormattedMessage id='IDS_IMAGES' defaultMessage='Images' />\r\n                        </Nav.Link>\r\n                    </div>\r\n                    <DataGrid primaryKeyField={\"nreportimagecode\"}\r\n                        data={this.props.Login.masterData[\"ReportImages\"] || []}\r\n                        dataResult={this.props.Login.masterData[\"ReportImages\"] || []}\r\n                        dataState={{skip:0, take: this.props.Login.masterData[\"ReportImages\"] ? this.props.Login.masterData[\"ReportImages\"].length:0}}\r\n                                                  \r\n                        extractedColumnList={this.imageGridFieldList}\r\n                        controlMap={this.state.controlMap}\r\n                        userRoleControlRights={this.state.userRoleControlRights}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        userInfo={this.props.Login.userInfo}\r\n                        pageable={false}\r\n                        scrollable={\"scrollable\"}\r\n                        deleteRecord={this.deleteAttachment}\r\n                        deleteParam={{\r\n                            screenName: \"IDS_IMAGES\", methodUrl: \"ReportImages\", operation: \"delete\",\r\n                            //masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                            ncontrolcode: deleteImageId\r\n                        }}\r\n                        methodUrl={\"ReportImages\"}\r\n                        isActionRequired={true}\r\n                        isToolBarRequired={false}\r\n                        selectedId={this.props.Login.selectedId}\r\n                        hideColumnFilter={true}\r\n                    />\r\n                </Col></Row></>)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    openModal = (screenName, ncontrolCode) => {\r\n\r\n        if (this.props.Login.masterData.SelectedReportDetail == null){\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTVERSIONNOTFOUND\" }))\r\n        }\r\n        else\r\n        {\r\n            if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.DRAFT) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        selectedRecord: { sreportname: this.props.Login.masterData.SelectedReportMaster.sreportname }, operation: \"create\", ncontrolCode, selectedId: null,\r\n                        openModal: true, screenName\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else if(this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORAPPROVEDREPORT\" }))\r\n            }else if(this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.RETIRED){\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CANNOTADDFORRETIREDREPORT\" }))\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    removeParametersInDataGrid = (selectedItem) => {\r\n\r\n        const addDesignParamNew = this.state.addDesignParam.filter(item => {\r\n            if (typeof item.nreportparametercode === \"number\") {\r\n                return item.nreportparametercode !== selectedItem.nreportparametercode\r\n            }\r\n            else {\r\n                return item.nreportparametercode.value !== selectedItem.nreportparametercode\r\n            }\r\n        });\r\n        const gridDataNew = this.state.gridData.filter(item => {\r\n            if (typeof item.nreportparametercode === \"number\") {\r\n                return item.nreportparametercode !== selectedItem.nreportparametercode\r\n            }\r\n            else {\r\n                return item.nreportparametercode.value !== selectedItem.nreportparametercode\r\n            }\r\n        });\r\n\r\n\r\n        //gridData.filter\r\n        // (item => item.sfieldname !== selectedItem.sfieldname);\r\n        this.setState({ addDesignParam: addDesignParamNew, gridData: gridDataNew });\r\n\r\n    }\r\n\r\n    addParametersInDataGrid = (selectedRecord) => {\r\n        if (this.state.addDesignParam.length === this.props.Login.masterData.ReportParameter.length) {\r\n            toast.warn(\"You cannot add more than Report Parameters count\");\r\n        }\r\n        else {\r\n            let validData = false;\r\n            if (selectedRecord[\"sdisplayname\"] && selectedRecord[\"sdisplayname\"].trim().length !== 0\r\n                && selectedRecord[\"nreportparametercode\"] && selectedRecord[\"ndesigncomponentcode\"]) {\r\n                validData = true;\r\n                if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\r\n                    if (selectedRecord[\"nsqlquerycode\"] && selectedRecord[\"nsqlquerycode\"].length !== 0) {\r\n                        validData = true;\r\n                    }\r\n                    else {\r\n                        validData = false;\r\n                    }\r\n                }\r\n                if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\r\n                    if (selectedRecord[\"ndays\"] && selectedRecord[\"ndays\"].length !== 0) {\r\n                        validData = true;\r\n                    } else {\r\n                        validData = false;\r\n                    }\r\n                }\r\n            }\r\n            if (validData) {\r\n                if (selectedRecord && selectedRecord.nreportparametercode !== undefined) {\r\n                    let copySelected = { ...selectedRecord };\r\n\r\n                    const addDesignParam = this.state.addDesignParam;\r\n                    const index = addDesignParam.findIndex(item => {\r\n                        if (typeof item.nreportparametercode === \"number\") {\r\n                            return item.nreportparametercode === copySelected.nreportparametercode.value;\r\n                        } else {\r\n                            return item.nreportparametercode.value === copySelected.nreportparametercode.value;\r\n                        }\r\n                    });\r\n\r\n                    if (index === -1) {\r\n                        addDesignParam.push(copySelected);\r\n                        const gridData = this.state.gridData;;\r\n                        gridData.push({\r\n                            nreportparametercode: copySelected.nreportparametercode.value,\r\n                            sreportparametername: copySelected.nreportparametercode.label,\r\n                            sdisplayname: copySelected.sdisplayname,\r\n                            ndesigncomponentcode: copySelected.ndesigncomponentcode.value,\r\n                            sdesigncomponentname: copySelected.ndesigncomponentcode.label,\r\n                        })\r\n                        this.setState({\r\n                            addDesignParam, selectedRecord: { ndays: \"\", sdisplayname: \"\" },\r\n                            gridData\r\n                        });\r\n                    }\r\n                    else\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_DUPLICATEMAPPING\" }));\r\n                    this.setState({ selectedRecord: { ndays: \"\", sdisplayname: \"\" } });\r\n                }\r\n            }\r\n            else {\r\n                //toast.info(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\r\n                if (selectedRecord[\"nreportparametercode\"] === undefined\r\n                    || selectedRecord[\"nreportparametercode\"].length === 0) {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARAMETERS\" })}`);\r\n                }\r\n                else if (selectedRecord[\"sdisplayname\"] === undefined\r\n                    || selectedRecord[\"sdisplayname\"] === \"\") {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_DISPLAYNAME\" })}`);\r\n                }\r\n                else if (selectedRecord[\"ndesigncomponentcode\"] === undefined\r\n                    || selectedRecord[\"ndesigncomponentcode\"].length === 0) {\r\n                    toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_INPUTTYPE\" })}`);\r\n                }\r\n                else {\r\n                    if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.COMBOBOX) {\r\n                        if (selectedRecord[\"nsqlquerycode\"] === undefined || selectedRecord[\"nsqlquerycode\"].length === 0) {\r\n                            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_EXISTINGLINKTABLE\" })}`);\r\n                        }\r\n                    }\r\n                    else if (selectedRecord[\"ndesigncomponentcode\"].value === designComponents.DATEPICKER) {\r\n                        if (selectedRecord[\"ndays\"] === undefined || selectedRecord[\"ndays\"].length === 0) {\r\n                            toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_DAYS\" })}`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n   \r\n    unbindMappingParametersFromDataGrid = (selectedItem) => {\r\n\r\n        const addMappingParamNew = this.state.addMappingParam.filter(item => {\r\n            if (typeof item.nchildreportdesigncode === \"number\") {\r\n                if (item.nchildreportdesigncode === selectedItem.nchildreportdesigncode) {\r\n                    return (item.nparentreportdesigncode !== selectedItem.nparentreportdesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n            else {\r\n                if (item.nchildreportdesigncode.value === selectedItem.nchildreportdesigncode) {\r\n                    return (item.nparentreportdesigncode.value !== selectedItem.nparentreportdesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n        });\r\n        const mappingGridDataNew = this.state.mappingGridData.filter(item => {\r\n            if (typeof item.nchildreportdesigncode === \"number\") {\r\n                if (item.nchildreportdesigncode === selectedItem.nchildreportdesigncode) {\r\n                    return (item.nparentreportdesigncode !== selectedItem.nparentreportdesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n            else {\r\n                if (item.nchildreportdesigncode.value === selectedItem.nchildreportdesigncode) {\r\n                    return (item.nparentreportdesigncode.value !== selectedItem.nparentreportdesigncode)\r\n                }\r\n                else\r\n                    return item;\r\n            }\r\n        });\r\n\r\n        this.setState({ addMappingParam: addMappingParamNew, mappingGridData: mappingGridDataNew });\r\n\r\n    }\r\n\r\n    bindMappingParametersToDataGrid = (selectedRecord) => {\r\n\r\n        if (selectedRecord[\"sfieldname\"] && selectedRecord[\"nparentreportdesigncode\"]\r\n            && selectedRecord[\"nchildreportdesigncode\"]) {\r\n            if (selectedRecord && selectedRecord.nparentreportdesigncode !== undefined) {\r\n                let copySelected = { ...selectedRecord };\r\n\r\n                const addMappingParam = this.state.addMappingParam;\r\n                const index = addMappingParam.findIndex(item => {\r\n                    if (typeof item.nparentreportdesigncode === \"number\") {\r\n                        return item.nparentreportdesigncode === copySelected.nparentreportdesigncode.value\r\n                            && item.nchildreportdesigncode === copySelected.nchildreportdesigncode.value\r\n                            && item.sfieldname === copySelected.sfieldname.value;\r\n                    }\r\n                    else {\r\n                        return item.nparentreportdesigncode.value === copySelected.nparentreportdesigncode.value\r\n                            && item.nchildreportdesigncode.value === copySelected.nchildreportdesigncode.value\r\n                            && item.sfieldname.value === copySelected.sfieldname.value;\r\n                    }\r\n                });\r\n                if (index === -1) {\r\n                    addMappingParam.push(copySelected);\r\n                    const mappingGridData = this.state.mappingGridData;;\r\n                    mappingGridData.push({\r\n                        nparentreportdesigncode: copySelected.nparentreportdesigncode.value,\r\n                        nchildreportdesigncode: copySelected.nchildreportdesigncode.value,\r\n                        sparentparametername: copySelected.nparentreportdesigncode.label,\r\n                        schildparametername: copySelected.nchildreportdesigncode.label,\r\n                        sfieldname: copySelected.sfieldname.value,\r\n                        nactionparameter: transactionStatus.NO\r\n                    })\r\n\r\n\r\n                    this.setState({\r\n                        addMappingParam,\r\n                         selectedRecord: {\r\n                              nactionreportdesigncode:\"\",\r\n                             nparentreportdesigncode: \"\",\r\n                             sfieldname: \"\",\r\n                             nchildreportdesigncode: \"\"\r\n                         },\r\n                        //selectedRecord:{},\r\n                        mappingGridData\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_DUPLICATEMAPPING\" }));\r\n                    this.setState({\r\n                        selectedRecord: {\r\n                            nparentreportdesigncode: { label: \"\", value: -1 },\r\n                            sfieldname: { label: \"\", value: -1 },\r\n                            nchildreportdesigncode: { label: \"\", value: -1 }\r\n                        },\r\n                    });\r\n\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //toast.warn(this.props.intl.formatMessage({id:\"IDS_FILLMANDATORY\"}));\r\n\r\n            if (selectedRecord[\"nchildreportdesigncode\"] === undefined\r\n                || selectedRecord[\"nchildreportdesigncode\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARAMETER\" })}`);\r\n            }\r\n            else if (selectedRecord[\"sfieldname\"] === undefined\r\n                || selectedRecord[\"sfieldname\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_FIELDNAME\" })}`);\r\n            }\r\n            else if (selectedRecord[\"nparentreportdesigncode\"] === undefined\r\n                || selectedRecord[\"nparentreportdesigncode\"].length === 0) {\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${this.props.intl.formatMessage({ id: \"IDS_PARENTPARAMETER\" })}`);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    bindActionParameter = (rowItem, event) => {\r\n\r\n        const gridMappingParam = this.state.mappingGridData;\r\n        const addMappingParam = this.state.addMappingParam;\r\n        if (event.target.checked) {\r\n            gridMappingParam.forEach(item => {\r\n                if (item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode) {\r\n                    if (item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode) {\r\n                        const index = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode\r\n                            && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode)\r\n\r\n                        addMappingParam[index] = {\r\n                            ...addMappingParam[index],\r\n                            \"nisactionparent\": transactionStatus.YES\r\n                        };\r\n                        return item.nisactionparent = transactionStatus.YES;\r\n                    }\r\n                    else {\r\n                        const index = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode\r\n                            && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode)\r\n\r\n                        addMappingParam[index] = {\r\n                            ...addMappingParam[index],\r\n                            \"nisactionparent\": transactionStatus.NO\r\n                        };\r\n                        return item.nisactionparent = transactionStatus.NO;\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            const index = gridMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode\r\n                && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode);\r\n            gridMappingParam[index][\"nisactionparent\"] = transactionStatus.NO;\r\n\r\n            const index1 = addMappingParam.findIndex(item => item.nchildreportdesigncode === rowItem.selectedRecord.nchildreportdesigncode\r\n                && item.nparentreportdesigncode === rowItem.selectedRecord.nparentreportdesigncode)\r\n\r\n            addMappingParam[index1] = {\r\n                ...addMappingParam[index1],\r\n                \"nisactionparent\": transactionStatus.NO\r\n            };\r\n        }\r\n\r\n        this.setState({ mappingGridData: gridMappingParam, addMappingParam: addMappingParam });\r\n    }\r\n\r\n    handleChangeDesign = (value, valueParam) => {\r\n        if (value !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[valueParam] = value.value;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }  \r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"toggle\"\r\n                || this.props.Login.operation === \"approve\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal, loadEsign, selectedRecord, selectedId: null\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (fieldName === \"nreporttypecode\") {\r\n           selectedRecord[fieldName] = comboData;\r\n            if (comboData.value !== reportTypeEnum.MIS && comboData.value !== reportTypeEnum.SCREENWISE && comboData.value !== reportTypeEnum.SAMPLE){\r\n                this.props.getReportSubType({ selectedRecord, reportType: comboData.item,userInfo:this.props.Login.userInfo});\r\n            }\r\n            else if(comboData.value === reportTypeEnum.SAMPLE){\r\n                this.props.getregtype({ selectedRecord, reportType: comboData.item,nregtypecode:RegistrationType.PLASMA_POOL,userInfo:this.props.Login.userInfo});\r\n            }\r\n            else{\r\n                   const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { selectedRecord: selectedRecord }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n            }\r\n     \r\n        }\r\n        else if (fieldName === \"nchildreportdesigncode\") {\r\n            //parameter mapping\r\n            selectedRecord[fieldName] = comboData;\r\n\r\n            const sqlquery = comboData.item.ssqlquery;\r\n            const param = [];\r\n            const param1 = [];\r\n            // let firstIndex = sqlquery.indexOf(\"P$\");\r\n            // const lastIndex = sqlquery.lastIndexOf(\"P$\");            \r\n            // let first = sqlquery.indexOf(\"P$\");\r\n            // let endFirst = sqlquery.indexOf(\"$P\");\r\n            // do {\r\n\r\n            //     let second = sqlquery.indexOf(\"P$\", first + 1);\r\n            //     let endSecond = sqlquery.indexOf(\"$P\", endFirst + 1);\r\n            //     const parameter = sqlquery.substring(first + 2, endFirst);\r\n            //     param.push({ label: parameter, value: parameter });\r\n\r\n            //     first = second;\r\n            //     endFirst = endSecond;\r\n            //     firstIndex = second;\r\n            // }\r\n            // while (firstIndex === lastIndex)\r\n            let query = sqlquery;\r\n            while(query.indexOf(\"P$\") !== -1){\r\n                let index1 = query.indexOf(\"P$\");\r\n                let index2 = query.indexOf(\"$P\");\r\n                const parameter = query.substring(index1 + 2, index2);\r\n                if(!param1.includes(parameter)){\r\n                param.push({ label: parameter, value: parameter });\r\n                param1.push(parameter);\r\n                 }\r\n                query = query.replace(\"P$\",\"\").replace(\"$P\",\"\");\r\n            }\r\n\r\n            this.setState({ selectedRecord, optionalParameterList: param });\r\n            //}\r\n        }        \r\n        else if (fieldName === \"nregtypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getReportRegSubType({ selectedRecord, registrationType: comboData.item, userInfo: this.props.Login.userInfo })\r\n        }\r\n        else if (fieldName === \"ncertificatetypecode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"sbatchdisplayname\"] = comboData.item.sbatchdisplayname;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (fieldName === \"nformcode\") {\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"ncontrolcode\"] =undefined;\r\n            this.props.getControlButton({ selectedRecord, ControlScreen: comboData.item, userInfo: this.props.Login.userInfo })\r\n        }\r\n        else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDropImage = (attachedFiles, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = attachedFiles;\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.screenName === \"IDS_REPORTVERSION\") {\r\n            this.onSaveVersion(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_REPORTMASTER\") {\r\n            this.onSaveMaster(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_REPORTDESIGN\") {\r\n            this.onSaveReportConfig(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_PARAMETERMAPPING\") {\r\n            this.onSaveParameterMapping(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_ACTIONMAPPING\") {\r\n            this.onSaveParameterAction(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_SUBREPORTS\") {\r\n            this.onSaveSubReport(saveType, formRef);\r\n        }\r\n        else if (this.props.Login.screenName === \"IDS_IMAGES\") {\r\n            this.onSaveReportImage(saveType, formRef);\r\n        }\r\n    }\r\n\r\n    onSaveMaster = (saveType, formRef) => {\r\n        const reportFile = this.state.selectedRecord.sfilename;\r\n\r\n        let isFileEdited = transactionStatus.NO;\r\n        const formData = new FormData();\r\n        let methodUrl = \"ReportDesigner\";\r\n\r\n        let postParam = undefined;\r\n        let reportmaster = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n        let inputParam = {};\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit           \r\n            postParam = {\r\n                inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n                primaryKeyField: \"nreportcode\"\r\n            };\r\n            if (this.props.Login.reportVersionStatus === transactionStatus.APPROVED) {\r\n                reportmaster = JSON.parse(JSON.stringify(this.props.Login.ApprovedReportMaster));\r\n                reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.ACTIVE;\r\n            }\r\n            else {\r\n                const data = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\r\n\r\n                reportmaster[\"nreporttypecode\"] = data[\"nreporttypecode\"].value;\r\n                reportmaster[\"nreportcode\"] = data[\"nreportcode\"];\r\n                reportmaster[\"nregtypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"nregsubtypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"nsectioncode\"] = transactionStatus.NA;                \r\n                reportmaster[\"nreportmodulecode\"] = transactionStatus.NA;\r\n                reportmaster[\"nreportdecisiontypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"ncertificatetypecode\"] = transactionStatus.NA;\r\n                reportmaster[\"ncoareporttypecode\"] = transactionStatus.NA;\r\n              \r\n                reportmaster[\"sreportname\"] = this.state.selectedRecord[\"sreportname\"];\r\n                reportmaster[\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] || \"\";\r\n                reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"] ? this.state.selectedRecord[\"ntransactionstatus\"] : transactionStatus.ACTIVE;\r\n            \r\n\r\n                if (//data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE || \r\n                    data[\"nreporttypecode\"].value === reportTypeEnum.COA) {\r\n                    reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ?\r\n                                this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\r\n                    reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ?\r\n                                this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n                    reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ?\r\n                                this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\r\n                    reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ?\r\n                                this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\r\n                   \r\n                    // if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE)\r\n                    // {\r\n                    //      reportmaster[\"nreportdecisiontypecode\"] = this.state.selectedRecord[\"nreportdecisiontypecode\"] \r\n                    //                  ? this.state.selectedRecord[\"nreportdecisiontypecode\"].value : data[\"nreportdecisiontypecode\"];\r\n                    // }\r\n                }\r\n                else if(data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ||  data[\"nreporttypecode\"].value === reportTypeEnum.BATCH){\r\n                    reportmaster[\"ncoareporttypecode\"] = this.state.selectedRecord[\"ncoareporttypecode\"] ?\r\n                                    this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\r\n                    reportmaster[\"ncertificatetypecode\"] =this.state.selectedRecord[\"ncertificatetypecode\"] \r\n                                    ? this.state.selectedRecord[\"ncertificatetypecode\"].value : data[\"ncertificatetypecode\"];\r\n              \r\n                    if (data[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE\r\n                        && this.props.Login.masterData.SelectedReportDetail.isneedregtype === transactionStatus.YES){\r\n                        reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ?\r\n                                    this.state.selectedRecord[\"nregtypecode\"].value : data[\"nregtypecode\"].value;\r\n                        reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ?\r\n                                    this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n                        reportmaster[\"nsectioncode\"] = this.state.selectedRecord[\"nsectioncode\"] ?\r\n                                    this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA;\r\n        \r\n                    }\r\n                }\r\n                else if(data[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE){\r\n                    reportmaster[\"ncontrolcode\"] =this.state.selectedRecord[\"ncontrolcode\"] \r\n                                    ? this.state.selectedRecord[\"ncontrolcode\"].value : data[\"ncontrolcode\"];\r\n              \r\n                }\r\n                else {\r\n                     \r\n                    if (data[\"nreporttypecode\"].value === reportTypeEnum.MIS)\r\n                    {                    \r\n                        if (typeof this.state.selectedRecord[\"nreportmodulecode\"].value === \"string\" )\r\n                        {\r\n                            reportmaster[\"nreportmodulecode\"] = 0;\r\n                            reportmaster[\"smoduledisplayname\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\r\n                        }\r\n                        else{\r\n                            reportmaster[\"nreportmodulecode\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\r\n                        }\r\n                    }\r\n                    else{\r\n                        reportmaster[\"nreportmodulecode\"] = data[\"nreportmodulecode\"];\r\n                    }\r\n                }\r\n            }\r\n            inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"ReportMaster\",\r\n                inputData: { userinfo: this.props.Login.userInfo, reportmaster },\r\n                operation: this.props.Login.operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef\r\n            }\r\n        }\r\n        else {\r\n            //add               \r\n            reportmaster[\"nreporttypecode\"] = this.state.selectedRecord[\"nreporttypecode\"].value;\r\n            reportmaster[\"nreportdecisiontypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"ncertificatetypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"nregtypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"nregsubtypecode\"] = transactionStatus.NA;\r\n            reportmaster[\"nreportmodulecode\"] = transactionStatus.NA;\r\n            reportmaster[\"ncontrolcode\"] = transactionStatus.NA;\r\n            reportmaster[\"sreportname\"] = this.state.selectedRecord[\"sreportname\"];\r\n            reportmaster[\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] || \"\";\r\n            reportmaster[\"ntransactionstatus\"] = this.state.selectedRecord[\"ntransactionstatus\"];\r\n            reportmaster[\"ncoareporttypecode\"]= this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE  ?\r\n                                                this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA;\r\n           \r\n\r\n            if (this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE) {\r\n                reportmaster[\"nregtypecode\"] = this.state.selectedRecord[\"nregtypecode\"] ? \r\n                                                this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord[\"nregsubtypecode\"] ? \r\n                                                this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;                 \r\n                reportmaster[\"nsectioncode\"]= this.state.selectedRecord[\"nsectioncode\"] \r\n                                                ? this.state.selectedRecord[\"nsectioncode\"].value \r\n                                                : transactionStatus.NA;\r\n                reportmaster[\"nreportdecisiontypecode\"] = this.state.selectedRecord[\"nreportdecisiontypecode\"] \r\n                                                            ? this.state.selectedRecord[\"nreportdecisiontypecode\"].value \r\n                                                            : transactionStatus.NA;\r\n                reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"].value;\r\n          \r\n            }\r\n            else if(this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH){\r\n                reportmaster[\"ncertificatetypecode\"] = this.state.selectedRecord[\"ncertificatetypecode\"].value;\r\n            }\r\n            else if(this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE){\r\n                reportmaster[\"ncontrolcode\"] = this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SCREENWISE ?\r\n                                              this.state.selectedRecord[\"ncontrolcode\"].value : transactionStatus.NA;\r\n\r\n            }\r\n            else if(this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA){\r\n                reportmaster[\"nregtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregtypecode\"] ? this.state.selectedRecord[\"nregtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nregsubtypecode\"] = this.state.selectedRecord && this.state.selectedRecord[\"nregsubtypecode\"] ? this.state.selectedRecord[\"nregsubtypecode\"].value : transactionStatus.NA;\r\n                reportmaster[\"nsectioncode\"]= this.state.selectedRecord[\"nsectioncode\"] \r\n                                                    ? this.state.selectedRecord[\"nsectioncode\"].value \r\n                                                    : transactionStatus.NA; \r\n            }\r\n            else {\r\n                if (typeof this.state.selectedRecord[\"nreportmodulecode\"].value === \"string\" )\r\n                {\r\n                    reportmaster[\"nreportmodulecode\"] = 0;\r\n                    reportmaster[\"smoduledisplayname\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\r\n                }\r\n                else{\r\n                    reportmaster[\"nreportmodulecode\"] = this.state.selectedRecord[\"nreportmodulecode\"].value;\r\n                }               \r\n\r\n            }          \r\n\r\n            let reportdetails = {\r\n                // ncoareporttypecode: this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.MIS && this.state.selectedRecord[\"nreporttypecode\"].value !== reportTypeEnum.SCREENWISE  ?\r\n                //     this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA,\r\n                // nsectioncode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ?\r\n                // this.state.selectedRecord[\"nsectioncode\"]? this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA: transactionStatus.NA,\r\n                // nreportdecisiontypecode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.SAMPLE ?\r\n                //                 this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA,\r\n                // ncertificatetypecode: this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.BATCH ?\r\n                //                 this.state.selectedRecord[\"ncertificatetypecode\"].value : transactionStatus.NA,\r\n                ntransactionstatus: transactionStatus.DRAFT,\r\n                nversionno: -1,\r\n                nisplsqlquery: this.state.selectedRecord[\"nisplsqlquery\"] ? this.state.selectedRecord[\"nisplsqlquery\"] : transactionStatus.NO,\r\n            };\r\n\r\n            // if(this.state.selectedRecord[\"nreporttypecode\"].value === reportTypeEnum.COA){\r\n\r\n            //     reportdetails={\r\n            //         ncoareporttypecode : this.state.selectedRecord ? this.state.selectedRecord.ncoareporttypecode.value : transactionStatus.NA,\r\n            //         nreportdecisiontypecode : transactionStatus.NA,\r\n            //         ncertificatetypecode : transactionStatus.NA,\r\n            //         nsectioncode : this.state.selectedRecord && this.state.selectedRecord.nsectioncode ? this.state.selectedRecord.nsectioncode.value : transactionStatus.NA ,\r\n            //         ntransactionstatus: transactionStatus.DRAFT,\r\n            //         nisplsqlquery: this.state.selectedRecord ? this.state.selectedRecord[\"nisplsqlquery\"] || transactionStatus.NO : transactionStatus.NO,\r\n            //     }\r\n            // }\r\n\r\n            //reportdetails[\"nversionno\"] = -1;\r\n           // reportdetails[\"nisplsqlquery\"] = this.state.selectedRecord ? this.state.selectedRecord[\"nisplsqlquery\"] || transactionStatus.NO : transactionStatus.NO;\r\n\r\n            if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\r\n\r\n                const splittedFileName = reportFile[0].name.split('.');\r\n                const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\r\n                const uniquefilename = this.state.selectedRecord.sfilename === \"\" ?\r\n                    this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\r\n\r\n                reportdetails[\"sfilename\"] = reportFile[0].name;\r\n                reportdetails[\"ssystemfilename\"] = uniquefilename;\r\n\r\n                formData.append(\"uploadedFile0\", reportFile[0]);\r\n                formData.append(\"uniquefilename0\", uniquefilename);\r\n                isFileEdited = transactionStatus.YES;\r\n                //reportmaster[\"sfilename\"] = \"\";\r\n            }\r\n\r\n            formData.append(\"isFileEdited\", isFileEdited);\r\n            formData.append(\"filecount\", 1);\r\n            formData.append(\"reportdetails\", JSON.stringify(reportdetails));\r\n\r\n           // formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n            formData.append(\"reportmaster\", JSON.stringify(reportmaster));\r\n          \r\n            inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: methodUrl,//\"ReportDesigner\",\r\n                //  inputData: inputData,\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: this.props.Login.operation,\r\n                saveType, formRef, postParam, searchRef: this.searchRef\r\n            }\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n\r\n    onSaveVersion = (saveType, formRef) => {\r\n        const reportFile = this.state.selectedRecord.sfilename;\r\n\r\n        let isFileEdited = transactionStatus.NO;\r\n        const formData = new FormData();\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n        const reportmaster = this.props.Login.masterData.SelectedReportMaster;\r\n\r\n        let reportdetails = {\r\n            // ncoareporttypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] !== reportTypeEnum.MIS &&this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] !== reportTypeEnum.SCREENWISE  ?\r\n            //     this.state.selectedRecord[\"ncoareporttypecode\"].value : transactionStatus.NA,\r\n            // nsectioncode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?\r\n            //                 this.state.selectedRecord[\"nsectioncode\"] ? \r\n            //                 this.state.selectedRecord[\"nsectioncode\"].value : transactionStatus.NA\r\n            //                 : transactionStatus.NA,\r\n            // nreportdecisiontypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.SAMPLE ?\r\n            //                     this.state.selectedRecord[\"nreportdecisiontypecode\"].value : transactionStatus.NA,\r\n            // ncertificatetypecode: this.props.Login.masterData.SelectedReportMaster[\"nreporttypecode\"] === reportTypeEnum.BATCH ?\r\n            //                     this.state.selectedRecord[\"ncertificatetypecode\"].value : transactionStatus.NA,\r\n\r\n            ntransactionstatus: transactionStatus.DRAFT,\r\n            nisplsqlquery: this.state.selectedRecord[\"nisplsqlquery\"] ? this.state.selectedRecord[\"nisplsqlquery\"] : transactionStatus.NO,\r\n        };\r\n\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            // postParam =  { inputListName : \"ReportDetails\", selectedObject : \"SelectedReportDetail\", \r\n            //                 primaryKeyField : \"nreportdetailcode\", isChild:true, };\r\n            const data = JSON.parse(JSON.stringify(this.props.Login.selectedRecord));\r\n\r\n            reportdetails[\"nreportdetailcode\"] = data[\"nreportdetailcode\"];\r\n            reportdetails[\"nversionno\"] = data[\"nversionno\"];\r\n            reportdetails[\"sfilename\"] = data[\"sfilename\"];\r\n            reportdetails[\"ssystemfilename\"] = data[\"ssystemfilename\"];\r\n        }\r\n        else {\r\n            //add               \r\n            reportdetails[\"nversionno\"] = -1;\r\n\r\n        }\r\n\r\n        if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\r\n\r\n            const splittedFileName = reportFile[0].name.split('.');\r\n            const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\r\n            const uniquefilename = this.state.selectedRecord.sfilename === \"\" ?\r\n                this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\r\n\r\n            reportdetails[\"sfilename\"] = reportFile[0].name;\r\n            reportdetails[\"ssystemfilename\"] = uniquefilename;\r\n\r\n            formData.append(\"uploadedFile0\", reportFile[0]);\r\n            formData.append(\"uniquefilename0\", uniquefilename);\r\n            isFileEdited = transactionStatus.YES;\r\n            //reportmaster[\"sfilename\"] = \"\";\r\n        }\r\n\r\n\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"filecount\", 1);\r\n        formData.append(\"reportdetails\", JSON.stringify(reportdetails));\r\n        //formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"reportmaster\", JSON.stringify(reportmaster));\r\n      \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ReportDetails\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, isChild: true\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveReportConfig = (saveType, formRef) => {\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n        if (this.state.addDesignParam.length === this.props.Login.masterData.ReportParameter.length) {\r\n            let operation = this.props.Login.operation;\r\n            let inputData = [];\r\n            let selectedId = null;\r\n            let data = [];\r\n            //let i = 0;\r\n\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n            if (JSON.stringify(this.state.addDesignParam) !== JSON.stringify(this.props.Login.masterData.ReportDesignConfig)) {\r\n                this.state.addDesignParam.forEach(item => {\r\n                    data.push({\r\n                        \"nreportdetailcode\": this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                        \"ndesigncomponentcode\": typeof item.ndesigncomponentcode === \"number\" ? item.ndesigncomponentcode :\r\n                            item.ndesigncomponentcode.value,\r\n                        \"nsqlquerycode\": item.nsqlquerycode ? (typeof item.nsqlquerycode === \"number\" ?\r\n                            item.nsqlquerycode : item.nsqlquerycode.value) : transactionStatus.NA,\r\n                        \"nreportparametercode\": typeof item.nreportparametercode === \"number\" ?\r\n                            item.nreportparametercode : item.nreportparametercode.value,\r\n                        \"sdisplayname\": item.sdisplayname,\r\n                        \"ndays\": item.ndays ? item.ndays : 0\r\n                    });\r\n\r\n                })\r\n                inputData[\"reportdesignconfig\"] = data;\r\n\r\n                const inputParam = {\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    methodUrl: \"ReportDesignParameter\",\r\n                    displayName: this.props.Login.inputParam.displayName,\r\n                    inputData: inputData, postParam,\r\n                    operation: operation, saveType, formRef, dataState: undefined, selectedId, isChild: true\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_NODATATOSAVE\" }))\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_CONFIGUREALLPARAMETERS\" }))\r\n        }\r\n    }\r\n\r\n    onSaveParameterMapping = (saveType, formRef) => {\r\n\r\n        let operation = this.props.Login.operation;\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"reportparametermapping\"] = [];\r\n        inputData[\"reportdetails\"] = this.props.Login.masterData.SelectedReportDetail;\r\n        //inputData[\"reportparameteraction\"] = [];\r\n\r\n        // if ((this.props.Login.masterData.ReportParameterMapping.length > 0 && this.state.mappingGridData.length === 0)\r\n        //     || (this.props.Login.masterData.ReportParameterMapping.length === 0 && this.state.mappingGridData.length > 0))\r\n        // {\r\n        // if (JSON.stringify(this.state.addMappingParam) !==JSON.stringify(this.props.Login.masterData.ReportParameterMapping))\r\n        // {\r\n        let count = 0;\r\n        this.state.mappingGridData.forEach(item => {\r\n            if (item.nisactionparent === transactionStatus.YES)\r\n                count = count + 1;\r\n            inputData[\"reportparametermapping\"].push({\r\n                \"nreportdetailcode\": this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                \"nparentreportdesigncode\": item.nparentreportdesigncode,\r\n                \"nchildreportdesigncode\": item.nchildreportdesigncode,\r\n                \"sfieldname\": item.sfieldname,\r\n                \"nisactionparent\": item.nisactionparent\r\n            });\r\n            // if(item.nactionparameter === transactionStatus.YES)\r\n            //     inputData[\"reportparameteraction\"].push({\"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n            //                                                 \"nreportdesigncode\": item.nchildreportdesigncode,\r\n            //                                                 \"nparentreportdesigncode\": item.nparentreportdesigncode,                                                            \r\n            //                                             });  \r\n        })\r\n        let valid = false;\r\n        if (this.state.mappingGridData.length > 0) {\r\n            if (count === this.props.Login.childComponentList.length) {\r\n                valid = true;\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.ReportParameterMapping.length === 0 && this.state.mappingGridData.length === 0) {\r\n                valid = false;\r\n            }\r\n            else\r\n                valid = true;\r\n        }\r\n\r\n        if (valid) {\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: \"ReportParameterMapping\",\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                inputData: inputData, postParam,\r\n                operation: operation, saveType, formRef, dataState: undefined, selectedId, isChild: true\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData }, saveType\r\n                        //openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        ///operation: this.props.Login.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n        else {\r\n            if (this.state.mappingGridData.length === 0) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_NODATATOSAVE\" }));\r\n            }\r\n            else {\r\n                if (count !== this.props.Login.childComponentList.length)\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSUFFICIENTACTIONPARENT\" }));\r\n                else\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_NODATATOSAVE\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    // onSaveParameterMapping = (saveType, formRef) =>{\r\n\r\n    //         let operation = this.props.Login.operation;\r\n    //         let inputData = [];\r\n    //         let selectedId = null;\r\n    //         let data = [];\r\n    //         //let i = 0;\r\n\r\n    //         inputData[\"userinfo\"] = this.props.Login.userInfo;     \r\n\r\n    //         this.state.addMappingParam.forEach(item => {          \r\n    //             data.push({\r\n    //                 \"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n    //                 \"nparentreportdesigncode\": typeof item.nparentreportdesigncode === \"number\"? item.nparentreportdesigncode:\r\n    //                                         item.nparentreportdesigncode.value,\r\n    //                 \"nchildreportdesigncode\": typeof item.nchildreportdesigncode === \"number\"? item.nchildreportdesigncode:\r\n    //                                         item.nchildreportdesigncode.value,\r\n\r\n    //                 \"sfieldname\": typeof item.sfieldname === \"string\"? item.sfieldname:\r\n    //                                         item.sfieldname.value\r\n    //             });         \r\n\r\n    //         })\r\n    //         inputData[\"reportparametermapping\"] = data;\r\n\r\n    //         inputData[\"reportparameteraction\"] = [];\r\n\r\n    //         this.state.actionGridData.forEach(item => {          \r\n    //             inputData[\"reportparameteraction\"].push({\r\n    //                 \"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n    //                 \"nreportdesigncode\": typeof item.nchildreportdesigncode === \"number\"? item.nchildreportdesigncode:\r\n    //                                         item.nchildreportdesigncode.value,\r\n    //                 \"nparentreportdesigncode\": typeof item.nactionreportdesigncode === \"number\"? item.nactionreportdesigncode:\r\n    //                                         item.nactionreportdesigncode.value,\r\n\r\n    //             });  \r\n    //         })         \r\n\r\n    //         const inputParam = {\r\n    //             classUrl: this.props.Login.inputParam.classUrl,\r\n    //             methodUrl: \"ReportParameterMapping\",\r\n    //             displayName: this.props.Login.inputParam.displayName,\r\n    //             inputData: inputData,\r\n    //             operation: operation, saveType, formRef, dataState:undefined, selectedId\r\n    //         }\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData }, saveType\r\n    //                     //openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n    //                     ///operation: this.props.Login.operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    //         }\r\n    // }\r\n\r\n    // onSaveParameterAction = (saveType, formRef) =>{\r\n\r\n    //          let operation = this.props.Login.operation;\r\n    //         let inputData = [];\r\n    //         let selectedId = null;\r\n    //         let data = [];\r\n\r\n    //         inputData[\"userinfo\"] = this.props.Login.userInfo;     \r\n\r\n    //         this.state.addActionParam.forEach(item => {          \r\n    //             data.push({\r\n    //                 \"nreportdetailcode\":this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n    //                 \"nreportdesigncode\": typeof item.nreportdesigncode === \"number\"? item.nreportdesigncode:\r\n    //                                         item.nreportdesigncode.value,\r\n    //                 \"nparentreportdesigncode\": typeof item.nparentreportdesigncode === \"number\"? item.nparentreportdesigncode:\r\n    //                                         item.nparentreportdesigncode.value,\r\n\r\n    //             });         \r\n\r\n    //         })\r\n    //         inputData[\"reportparameteraction\"] = data;\r\n\r\n    //         const inputParam = {\r\n    //             classUrl: this.props.Login.inputParam.classUrl,\r\n    //             methodUrl: \"ReportParameterAction\",\r\n    //             displayName: this.props.Login.inputParam.displayName,\r\n    //             inputData: inputData,\r\n    //             operation: operation, saveType, formRef, dataState:undefined, selectedId\r\n    //         }\r\n    //         if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n    //             const updateInfo = {\r\n    //                 typeName: DEFAULT_RETURN,\r\n    //                 data: {\r\n    //                     loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData }, saveType\r\n    //                     // openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n    //                     // operation: this.props.Login.operation\r\n    //                 }\r\n    //             }\r\n    //             this.props.updateStore(updateInfo);\r\n    //         }\r\n    //         else {\r\n    //             this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n    //         }\r\n    // }\r\n\r\n    onSaveSubReport = (saveType, formRef) => {\r\n        const reportFile = this.state.selectedRecord.sfilename;\r\n\r\n        const formData = new FormData();\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n        const reportdetails = this.props.Login.masterData.SelectedReportDetail;\r\n        const subreportdetails = {\r\n            nreportdetailcode: reportdetails.nreportdetailcode,\r\n            nreportcode: reportdetails.nreportcode\r\n        };\r\n\r\n        if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\r\n\r\n            const splittedFileName = reportFile[0].name.split('.');\r\n            const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\r\n            const uniquefilename = this.state.selectedRecord.sfilename === \"\" ?\r\n                this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\r\n\r\n            subreportdetails[\"sfilename\"] = reportFile[0].name;\r\n            subreportdetails[\"ssystemfilename\"] = uniquefilename;\r\n\r\n            formData.append(\"uploadedFile0\", reportFile[0]);\r\n            formData.append(\"uniquefilename0\", uniquefilename);\r\n        }\r\n\r\n        formData.append(\"filecount\", 1);\r\n        //formData.append(\"reportdetails\", JSON.stringify(reportdetails));\r\n        formData.append(\"subreportdetails\", JSON.stringify(subreportdetails));\r\n       // formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"SubReportDetails\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, isChild: true\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onSaveReportImage = (saveType, formRef) => {\r\n        const reportFile = this.state.selectedRecord.sfilename;\r\n\r\n        const formData = new FormData();\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\"\r\n        };\r\n        const reportdetails = this.props.Login.masterData.SelectedReportDetail;\r\n        const reportimages = {\r\n            nreportdetailcode: reportdetails.nreportdetailcode,\r\n            nreportcode: reportdetails.nreportcode\r\n        };\r\n\r\n        if (reportFile && Array.isArray(reportFile) && reportFile.length > 0) {\r\n\r\n            const splittedFileName = reportFile[0].name.split('.');\r\n            const fileExtension = reportFile[0].name.split('.')[splittedFileName.length - 1];\r\n            const uniquefilename = this.state.selectedRecord.sfilename === \"\" ?\r\n                this.state.selectedRecord.sfilename : create_UUID() + '.' + fileExtension;\r\n\r\n            reportimages[\"sfilename\"] = reportFile[0].name;\r\n            reportimages[\"ssystemfilename\"] = uniquefilename;\r\n\r\n            formData.append(\"uploadedFile0\", reportFile[0]);\r\n            formData.append(\"uniquefilename0\", uniquefilename);\r\n        }\r\n\r\n        formData.append(\"filecount\", 1);\r\n        //formData.append(\"reportdetails\", JSON.stringify(reportdetails));\r\n        formData.append(\"reportimages\", JSON.stringify(reportimages));\r\n      //  formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ReportImages\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef, isChild: true\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    deleteFile = (fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = \"\";\r\n        this.setState({ selectedRecord, actionType: \"delete\" });\r\n    }\r\n\r\n    approveReport = (ncontrolCode) => {\r\n        if (this.props.Login.masterData.SelectedReportDetail) {\r\n            if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTALREADYAPPROVED\" }));\r\n            }\r\n            else {\r\n\r\n                const postParam = {\r\n                    inputListName: \"ReportDetails\", selectedObject: \"SelectedReportDetail\",\r\n                    primaryKeyField: \"nreportdetailcode\",\r\n                    primaryKeyValue: this.props.Login.masterData.SelectedReportDetail.nreportdetailcode,\r\n                    fetchUrl: \"reportconfig/getReportDetail\",\r\n                    fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                };\r\n\r\n                const inputParam = {\r\n                    classUrl: this.props.Login.inputParam.classUrl,\r\n                    methodUrl: \"ReportVersion\",\r\n                    inputData: {\r\n                        \"userinfo\": this.props.Login.userInfo,\r\n                        \"reportdetails\": this.props.Login.masterData.SelectedReportDetail\r\n                    },\r\n                    operation: \"approve\", postParam, isChild: true\r\n                }\r\n\r\n                const masterData = this.props.Login.masterData;\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName: \"IDS_REPORTMASTER\", operation: \"approve\"\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOVERSIONTOAPPROVE\" }));\r\n        }\r\n    }\r\n\r\n    deleteAttachment = (deleteParam) => {\r\n\r\n        if (this.props.Login.masterData.SelectedReportDetail.ntransactionstatus === transactionStatus.APPROVED) {\r\n            const message = \"IDS_CANNOTDELETEFORAPPROVEDREPORT\";\r\n            toast.warn(this.props.intl.formatMessage({ id: message }));\r\n        }\r\n        else {\r\n            const postParam = {\r\n                inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n                primaryKeyField: \"nreportcode\",\r\n                primaryKeyValue: this.props.Login.masterData.SelectedReportMaster.nreportcode,\r\n                fetchUrl: \"reportconfig/getReportDesigner\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            const inputParam = {\r\n                classUrl: this.props.Login.inputParam.classUrl,\r\n                methodUrl: deleteParam.methodUrl,\r\n                inputData: {\r\n                    [deleteParam.methodUrl.toLowerCase()]: deleteParam.selectedRecord,\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                },\r\n                operation: deleteParam.operation, isChild: true, postParam\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,\r\n                deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteReport = (deleteParam) => {\r\n\r\n        const postParam = {\r\n            inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\",\r\n            primaryKeyField: \"nreportcode\",\r\n            primaryKeyValue: this.props.Login.masterData.SelectedReportMaster.nreportcode,\r\n            fetchUrl: \"reportconfig/getReportDesigner\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        };\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: deleteParam.methodUrl,\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                [deleteParam.listName]: deleteParam.mastertodelete\r\n            },\r\n            operation: deleteParam.operation, postParam,\r\n            isChild: deleteParam.methodUrl === \"ReportDetails\" ? true : undefined\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,\r\n            deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    updateReportStatus = (methodParam) => {\r\n        const reportmaster = methodParam.mastertoupdate;\r\n        let status = reportmaster.ntransactionstatus;\r\n        if (status === transactionStatus.ACTIVE) {\r\n            status = transactionStatus.DEACTIVE;\r\n        }\r\n        else {\r\n            status = transactionStatus.ACTIVE;\r\n        }\r\n        reportmaster[\"ntransactionstatus\"] = status;\r\n        let postParam = { inputListName: \"ReportMaster\", selectedObject: \"SelectedReportMaster\", primaryKeyField: \"nreportcode\" };\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"ReportStatus\",\r\n            inputData: {\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                reportmaster\r\n            },\r\n            operation: methodParam.operation, postParam\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode,\r\n            methodParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: methodParam.screenName, operation: methodParam.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo, \r\n                          nreporttypecode:String(this.props.Login.masterData.SelectedFilterReportType.nreporttypecode)\r\n                     },\r\n            classUrl: \"reportconfig\",\r\n            methodUrl: \"ReportDesigner\",\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName:\"IDS_REPORTDESIGNER\"\r\n        };\r\n \r\n        this.props.callService(inputParam);\r\n \r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n    callService, getReportMasterComboService,\r\n    updateStore, crudMaster, getReportDetailComboService, getSelectedReportMasterDetail,\r\n    getSelectedReportDetail, getConfigReportComboService, getParameterMappingComboService,\r\n    //getActionMappingComboService, \r\n    getReportRegSubType, validateEsignCredential,\r\n    filterTransactionList, getReportSubType,getControlButton,getregtype\r\n})(injectIntl(ReportConfig));"]},"metadata":{},"sourceType":"module"}