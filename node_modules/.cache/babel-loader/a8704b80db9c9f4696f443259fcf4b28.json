{"ast":null,"code":"import rsapi from \"../rsapi\";\nimport { toast } from \"react-toastify\";\nimport { constructOptionList, sortData } from \"../components/CommonScript\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { initRequest } from \"./LoginAction\";\nimport Axios from 'axios';\nimport { transactionStatus, attachmentType } from \"../components/Enumeration\";\nexport const getTrainingUpdate = (trainingupdate, userInfo, masterData) => {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingupdate/getTrainingUpdateById\", {\n      ntrainingcode: trainingupdate.ntrainingcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.error(error.message);\n    });\n  };\n};\nexport const changeTechniqueFilter = (inputParam, filterTechnique, selectedTechinque) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/trainingupdate/get\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterData: { ...masterData,\n            filterTechnique,\n            nfilterTechnique: inputParam.inputData.nfilterTechnique,\n            selectedTechinque: selectedTechinque.item\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport function getParticipantsAccordion(versionObject) {\n  let {\n    version,\n    masterData,\n    userInfo\n  } = versionObject;\n  return function (dispatch) {\n    if (!(masterData.selectedParticipants.nparticipantcode === version.nparticipantcode)) {\n      const inputData = {\n        nparticipantcode: version.nparticipantcode,\n        userinfo: userInfo\n      };\n      rsapi.post('trainingupdate/getParticipantsAccordion', inputData).then(response => {\n        sortData(masterData);\n        masterData = { ...masterData,\n          selectedParticipants: response.data.selectedParticipants,\n          TraineeDocuments: response.data.TraineeDocuments\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function getTrainingParticipantsAttended(trainingUpdate, selectedRecord, userInfo, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingupdate/getInvitedParticipants\", {\n      \"userinfo\": userInfo,\n      \"ntrainingcode\": parseInt(trainingUpdate.ntrainingcode)\n    }).then(response => {\n      let nusercode = []; // const attendUsersMap = constructOptionList(response.data.InvitedParticipant || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n\n      const attendUsersList = response.data.InvitedParticipant;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: attendUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openModal: true,\n          screenName: \"IDS_ATTENDPARTICIPANTSDETAILS\",\n          nFlag: 2,\n          selectedRecord: selectedRecord,\n          operation: operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTrainingParticipantsCertified(trainingUpdate, selectedRecord, userInfo, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingupdate/getAttendedParticipants\", {\n      \"userinfo\": userInfo,\n      \"ntrainingcode\": parseInt(trainingUpdate.ntrainingcode)\n    }).then(response => {\n      let nusercode = [];\n      const certifyUsersMap = constructOptionList(response.data.AttendedParticipant || [], \"nusercode\", \"sfullname\", undefined, undefined, true);\n      const certifyUsersList = response.data.AttendedParticipant;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: certifyUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openModal: true,\n          screenName: \"IDS_CERTIFYPARTICIPANTSDETAILS\",\n          nFlag: 3,\n          selectedRecord: selectedRecord,\n          operation: operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTrainingParticipantsCompetent(trainingUpdate, selectedRecord, userInfo, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingupdate/getCertifiedParticipants\", {\n      \"userinfo\": userInfo,\n      \"ntrainingcode\": parseInt(trainingUpdate.ntrainingcode)\n    }).then(response => {\n      let nusercode = []; // const competentUsersMap = constructOptionList(response.data.CompetentParticipant || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n\n      const competentUsersList = response.data.CompetentParticipant;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: competentUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openModal: true,\n          screenName: \"IDS_COMPETENTPARTICIPANTSDETAILS\",\n          nFlag: 4,\n          selectedRecord: selectedRecord,\n          operation: operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport const addtrainingdocfile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n      userinfo: inputParam.userInfo\n    })];\n    Axios.all(urlArray).then(response => {\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\"); // let selectedRecord = {};\n\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n      let selectedRecord = {\n        nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n        //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n        disabled\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const addtraineedocfile = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n      userinfo: inputParam.userInfo\n    })];\n    Axios.all(urlArray).then(response => {\n      const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\n      const linkmaster = linkMap.get(\"OptionList\"); // let selectedRecord = {};\n\n      const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\n      let disabled = false;\n      let editObject = {};\n      let selectedRecord = {\n        nattachmenttypecode: response[0].data.AttachmentType.length > 0 ? response[0].data.AttachmentType[0].nattachmenttypecode : attachmentType.FTP,\n        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\",\n        //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\n        disabled\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: inputParam.operation,\n          screenName: inputParam.screenName,\n          ncontrolCode: inputParam.ncontrolCode,\n          selectedRecord,\n          loading: false,\n          linkMaster: linkmaster,\n          showSaveContinue: false,\n          editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TrainingUpdateAction.js"],"names":["rsapi","toast","constructOptionList","sortData","DEFAULT_RETURN","initRequest","Axios","transactionStatus","attachmentType","getTrainingUpdate","trainingupdate","userInfo","masterData","dispatch","post","ntrainingcode","userinfo","then","response","data","type","payload","loading","dataState","undefined","catch","error","message","changeTechniqueFilter","inputParam","filterTechnique","selectedTechinque","methodUrl","inputData","responseData","searchRef","current","value","nfilterTechnique","item","status","warn","getParticipantsAccordion","versionObject","version","selectedParticipants","nparticipantcode","TraineeDocuments","getTrainingParticipantsAttended","trainingUpdate","selectedRecord","operation","parseInt","nusercode","attendUsersList","InvitedParticipant","usersStatus","openModal","screenName","nFlag","getTrainingParticipantsCertified","certifyUsersMap","AttendedParticipant","certifyUsersList","getTrainingParticipantsCompetent","competentUsersList","CompetentParticipant","addtrainingdocfile","urlArray","all","linkMap","LinkMaster","linkmaster","get","defaultLink","filter","items","ndefaultlink","YES","disabled","editObject","nattachmenttypecode","AttachmentType","length","FTP","nlinkcode","ncontrolCode","linkMaster","showSaveContinue","editFiles","addtraineedocfile"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SACIC,KADJ,QAEO,gBAFP;AAGA,SACIC,mBADJ,EAEIC,QAFJ,QAGO,4BAHP;AAIA,SACIC,cADJ,QAEO,cAFP;AAGA,SACIC,WADJ,QAEO,eAFP;AAGA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,iBADJ,EAEIC,cAFJ,QAGO,2BAHP;AAOA,OAAO,MAAMC,iBAAiB,GAAG,CAACC,cAAD,EAAiBC,QAAjB,EAA2BC,UAA3B,KAA0C;AACvE,SAAO,UAAUC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAL,IAAAA,KAAK,CAACc,IAAN,CAAW,sCAAX,EAAmD;AAC/CC,MAAAA,aAAa,EAAEL,cAAc,CAACK,aADiB;AAE3CC,MAAAA,QAAQ,EAAEL;AAFiC,KAAnD,EAIKM,IAJL,CAIUC,QAAQ,IAAI;AACdN,MAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET,WAAGM,QAAQ,CAACC;AAFH,OAAb;AAIAhB,MAAAA,QAAQ,CAACS,UAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLT,UAAAA,UADK;AAELU,UAAAA,OAAO,EAAE,KAFJ;AAGLC,UAAAA,SAAS,EAAEC;AAHN;AAFJ,OAAD,CAAR;AAQH,KAlBL,EAmBKC,KAnBL,CAmBWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;AAMArB,MAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,KA3BL;AA4BH,GA9BD;AA+BH,CAhCM;AAmCP,OAAO,MAAMC,qBAAqB,GAAG,CAACC,UAAD,EAAaC,eAAb,EAA6BC,iBAA7B,KAAmD;AACpF,SAAQlB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAL,IAAAA,KAAK,CAACc,IAAN,CAAW,wBAAwBe,UAAU,CAACG,SAA9C,EAAyDH,UAAU,CAACI,SAApE,EACKhB,IADL,CACUC,QAAQ,IAAI;AACd,UAAIgB,YAAY,GAAG,EAAE,GAAGhB,QAAQ,CAACC;AAAd,OAAnB;AACAe,MAAAA,YAAY,GAAG/B,QAAQ,CAAC+B,YAAD,CAAvB;AACA,UAAItB,UAAU,GAAG,EACb,GAAGiB,UAAU,CAACjB,UADD;AAEb,WAAGsB;AAFU,OAAjB;;AAIA,UAAIL,UAAU,CAACM,SAAX,KAAyBX,SAAzB,IAAsCK,UAAU,CAACM,SAAX,CAAqBC,OAArB,KAAiC,IAA3E,EAAiF;AAC7EP,QAAAA,UAAU,CAACM,SAAX,CAAqBC,OAArB,CAA6BC,KAA7B,GAAqC,EAArC;AACAzB,QAAAA,UAAU,CAAC,cAAD,CAAV,GAA6BY,SAA7B;AACH;;AACDX,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE,KADJ;AAELV,UAAAA,UAAU,EAAE,EACR,GAAGA,UADK;AAERkB,YAAAA,eAFQ;AAGRQ,YAAAA,gBAAgB,EAAET,UAAU,CAACI,SAAX,CAAqBK,gBAH/B;AAIRP,YAAAA,iBAAiB,EAACA,iBAAiB,CAACQ;AAJ5B;AAFP;AAFJ,OAAD,CAAR;AAaH,KAzBL,EA0BKd,KA1BL,CA0BWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEhB,cAAR;AAAwBiB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAII,KAAK,CAACR,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAGK;AACD1B,QAAAA,KAAK,CAACwC,IAAN,CAAWf,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KAlCL;AAmCH,GArCD;AAsCH,CAvCM;AAyCP,OAAO,SAASuB,wBAAT,CAAkCC,aAAlC,EAAiD;AACpD,MAAI;AAAEC,IAAAA,OAAF;AAAWhC,IAAAA,UAAX;AAAuBD,IAAAA;AAAvB,MAAoCgC,aAAxC;AACA,SAAO,UAAU9B,QAAV,EAAoB;AACvB,QAAI,EAAED,UAAU,CAACiC,oBAAX,CAAgCC,gBAAhC,KAAqDF,OAAO,CAACE,gBAA/D,CAAJ,EAAsF;AAClF,YAAMb,SAAS,GAAG;AAAEa,QAAAA,gBAAgB,EAAEF,OAAO,CAACE,gBAA5B;AAA8C9B,QAAAA,QAAQ,EAAEL;AAAxD,OAAlB;AACAX,MAAAA,KAAK,CAACc,IAAN,CAAW,yCAAX,EAAsDmB,SAAtD,EAEKhB,IAFL,CAEUC,QAAQ,IAAI;AACdf,QAAAA,QAAQ,CAACS,UAAD,CAAR;AACAA,QAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETiC,UAAAA,oBAAoB,EAAE3B,QAAQ,CAACC,IAAT,CAAc0B,oBAF3B;AAGTE,UAAAA,gBAAgB,EAAE7B,QAAQ,CAACC,IAAT,CAAc4B;AAHvB,SAAb;AAKA5C,QAAAA,QAAQ,CAACS,UAAD,CAAR;AACAC,QAAAA,QAAQ,CAAC;AACLO,UAAAA,IAAI,EAAEhB,cADD;AACiBiB,UAAAA,OAAO,EAAE;AAC3BT,YAAAA,UAD2B;AAE3BU,YAAAA,OAAO,EAAE;AAFkB;AAD1B,SAAD,CAAR;AAMH,OAhBL,EAiBKG,KAjBL,CAiBWC,KAAK,IAAI;AACZb,QAAAA,QAAQ,CAAC;AAAEO,UAAAA,IAAI,EAAEhB,cAAR;AAAwBiB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAII,KAAK,CAACR,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvC,UAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,SAFD,MAGK;AACD1B,UAAAA,KAAK,CAACwC,IAAN,CAAWf,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,OAzBL;AA0BH,KA5BD,MA4BO;AACHN,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AACiBiB,QAAAA,OAAO,EAAE;AAAET,UAAAA,UAAF;AAAcU,UAAAA,OAAO,EAAE;AAAvB;AAD1B,OAAD,CAAR;AAGH;AACJ,GAlCD;AAmCH;AAED,OAAO,SAAS0B,+BAAT,CAAyCC,cAAzC,EAAwDC,cAAxD,EAAuEvC,QAAvE,EAAgFwC,SAAhF,EAA2F;AAC9F,SAAO,UAAUtC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAL,IAAAA,KAAK,CAACc,IAAN,CAAW,uCAAX,EAAoD;AAAE,kBAAYH,QAAd;AAAyB,uBAAiByC,QAAQ,CAACH,cAAc,CAAClC,aAAhB;AAAlD,KAApD,EACKE,IADL,CACUC,QAAQ,IAAI;AAEd,UAAImC,SAAS,GAAG,EAAhB,CAFc,CAId;AACA;;AAEA,YAAMC,eAAe,GAAEpC,QAAQ,CAACC,IAAT,CAAcoC,kBAArC;AAEA1C,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLmC,UAAAA,WAAW,EAAEF,eADR;AACyBD,UAAAA,SAAS,EAAEA,SADpC;AAC+C/B,UAAAA,OAAO,EAAE,KADxD;AAC8DmC,UAAAA,SAAS,EAAE,IADzE;AAELC,UAAAA,UAAU,EAAC,+BAFN;AAEsCC,UAAAA,KAAK,EAAC,CAF5C;AAE8CT,UAAAA,cAAc,EAACA,cAF7D;AAE4EC,UAAAA,SAAS,EAACA;AAFtF;AAFJ,OAAD,CAAR;AAQH,KAlBL,EAkBO1B,KAlBP,CAkBaC,KAAK,IAAI;AACdb,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEhB,cAAR;AAAwBiB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAII,KAAK,CAACR,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH1B,QAAAA,KAAK,CAACwC,IAAN,CAAWf,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KAzBL;AA0BH,GA5BD;AA6BH;AACD,OAAO,SAASyC,gCAAT,CAA0CX,cAA1C,EAAyDC,cAAzD,EAAwEvC,QAAxE,EAAiFwC,SAAjF,EAA4F;AAC/F,SAAO,UAAUtC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAL,IAAAA,KAAK,CAACc,IAAN,CAAW,wCAAX,EAAqD;AAAE,kBAAYH,QAAd;AAAyB,uBAAiByC,QAAQ,CAACH,cAAc,CAAClC,aAAhB;AAAlD,KAArD,EACKE,IADL,CACUC,QAAQ,IAAI;AAEd,UAAImC,SAAS,GAAG,EAAhB;AAEA,YAAMQ,eAAe,GAAG3D,mBAAmB,CAACgB,QAAQ,CAACC,IAAT,CAAc2C,mBAAd,IAAqC,EAAtC,EAA0C,WAA1C,EACvC,WADuC,EAC1BtC,SAD0B,EACfA,SADe,EACJ,IADI,CAA3C;AAGA,YAAMuC,gBAAgB,GAAG7C,QAAQ,CAACC,IAAT,CAAc2C,mBAAvC;AAEAjD,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLmC,UAAAA,WAAW,EAAEO,gBADR;AAC0BV,UAAAA,SAAS,EAAEA,SADrC;AACgD/B,UAAAA,OAAO,EAAE,KADzD;AAC+DmC,UAAAA,SAAS,EAAE,IAD1E;AAELC,UAAAA,UAAU,EAAC,gCAFN;AAEuCC,UAAAA,KAAK,EAAC,CAF7C;AAE+CT,UAAAA,cAAc,EAACA,cAF9D;AAE6EC,UAAAA,SAAS,EAACA;AAFvF;AAFJ,OAAD,CAAR;AAQH,KAlBL,EAkBO1B,KAlBP,CAkBaC,KAAK,IAAI;AACdb,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEhB,cAAR;AAAwBiB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAII,KAAK,CAACR,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH1B,QAAAA,KAAK,CAACwC,IAAN,CAAWf,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KAzBL;AA0BH,GA5BD;AA6BH;AACD,OAAO,SAAS6C,gCAAT,CAA0Cf,cAA1C,EAAyDC,cAAzD,EAAwEvC,QAAxE,EAAiFwC,SAAjF,EAA4F;AAC/F,SAAO,UAAUtC,QAAV,EAAoB;AACvBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAL,IAAAA,KAAK,CAACc,IAAN,CAAW,yCAAX,EAAsD;AAAE,kBAAYH,QAAd;AAAyB,uBAAiByC,QAAQ,CAACH,cAAc,CAAClC,aAAhB;AAAlD,KAAtD,EACKE,IADL,CACUC,QAAQ,IAAI;AAEd,UAAImC,SAAS,GAAG,EAAhB,CAFc,CAId;AACA;;AAEA,YAAMY,kBAAkB,GAAG/C,QAAQ,CAACC,IAAT,CAAc+C,oBAAzC;AAEArD,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLmC,UAAAA,WAAW,EAAES,kBADR;AAC4BZ,UAAAA,SAAS,EAAEA,SADvC;AACkD/B,UAAAA,OAAO,EAAE,KAD3D;AACiEmC,UAAAA,SAAS,EAAE,IAD5E;AAELC,UAAAA,UAAU,EAAC,kCAFN;AAEyCC,UAAAA,KAAK,EAAC,CAF/C;AAEiDT,UAAAA,cAAc,EAACA,cAFhE;AAE+EC,UAAAA,SAAS,EAACA;AAFzF;AAFJ,OAAD,CAAR;AAQH,KAlBL,EAkBO1B,KAlBP,CAkBaC,KAAK,IAAI;AACdb,MAAAA,QAAQ,CAAC;AAAEO,QAAAA,IAAI,EAAEhB,cAAR;AAAwBiB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAII,KAAK,CAACR,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH1B,QAAAA,KAAK,CAACwC,IAAN,CAAWf,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KAzBL;AA0BH,GA5BD;AA6BH;AAED,OAAO,MAAMgD,kBAAkB,GAAItC,UAAD,IAAgB;AAC9C,SAAQhB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,QAAI+D,QAAQ,GAAG,CAACpE,KAAK,CAACc,IAAN,CAAW,2BAAX,EAAwC;AACpDE,MAAAA,QAAQ,EAAEa,UAAU,CAAClB;AAD+B,KAAxC,CAAD,CAAf;AAGAL,IAAAA,KAAK,CAAC+D,GAAN,CAAUD,QAAV,EACKnD,IADL,CACUC,QAAQ,IAAI;AAEd,YAAMoD,OAAO,GAAGpE,mBAAmB,CAACgB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBoD,UAAlB,EAA8B,WAA9B,EAA2C,WAA3C,EAAwD,KAAxD,EAA+D,KAA/D,EAAsE,IAAtE,CAAnC;AACA,YAAMC,UAAU,GAAGF,OAAO,CAACG,GAAR,CAAY,YAAZ,CAAnB,CAHc,CAId;;AACA,YAAMC,WAAW,GAAGF,UAAU,CAACG,MAAX,CAAkBC,KAAK,IAAIA,KAAK,CAACrC,IAAN,CAAWsC,YAAX,KAA4BtE,iBAAiB,CAACuE,GAAzE,CAApB;AACA,UAAIC,QAAQ,GAAG,KAAf;AACA,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAI9B,cAAc,GAAG;AACb+B,QAAAA,mBAAmB,EAAC/D,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB+D,cAAjB,CAAgCC,MAAhC,GAAuC,CAAvC,GACpBjE,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB+D,cAAjB,CAAgC,CAAhC,EAAmCD,mBADf,GACmCzE,cAAc,CAAC4E,GAFzD;AAGbC,QAAAA,SAAS,EAAEX,WAAW,CAACS,MAAZ,GAAqB,CAArB,GAAyBT,WAAW,CAAC,CAAD,CAApC,GAA0C,EAHxC;AAG4C;AACzDK,QAAAA;AAJa,OAArB;AAOAlE,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLoC,UAAAA,SAAS,EAAE,IADN;AAELN,UAAAA,SAAS,EAAEtB,UAAU,CAACsB,SAFjB;AAGLO,UAAAA,UAAU,EAAE7B,UAAU,CAAC6B,UAHlB;AAIL4B,UAAAA,YAAY,EAAEzD,UAAU,CAACyD,YAJpB;AAKLpC,UAAAA,cALK;AAML5B,UAAAA,OAAO,EAAE,KANJ;AAOLiE,UAAAA,UAAU,EAAEf,UAPP;AAQLgB,UAAAA,gBAAgB,EAAE,KARb;AASLC,UAAAA,SAAS,EAAET,UAAU,CAACC,mBAAX,KAAmC,GAAnC,GAAyCD,UAAzC,GAAsD;AAT5D;AAFJ,OAAD,CAAR;AAeH,KAhCL,EAiCKvD,KAjCL,CAiCWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH1B,QAAAA,KAAK,CAACwC,IAAN,CAAWf,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7CL;AA8CH,GAnDD;AAoDH,CArDM;AAuDP,OAAO,MAAMuE,iBAAiB,GAAI7D,UAAD,IAAgB;AAC7C,SAAQhB,QAAD,IAAc;AACjBA,IAAAA,QAAQ,CAACR,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,QAAI+D,QAAQ,GAAG,CAACpE,KAAK,CAACc,IAAN,CAAW,2BAAX,EAAwC;AACpDE,MAAAA,QAAQ,EAAEa,UAAU,CAAClB;AAD+B,KAAxC,CAAD,CAAf;AAIAL,IAAAA,KAAK,CAAC+D,GAAN,CAAUD,QAAV,EACKnD,IADL,CACUC,QAAQ,IAAI;AAEd,YAAMoD,OAAO,GAAGpE,mBAAmB,CAACgB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBoD,UAAlB,EAA8B,WAA9B,EAA2C,WAA3C,EAAwD,KAAxD,EAA+D,KAA/D,EAAsE,IAAtE,CAAnC;AACA,YAAMC,UAAU,GAAGF,OAAO,CAACG,GAAR,CAAY,YAAZ,CAAnB,CAHc,CAId;;AACA,YAAMC,WAAW,GAAGF,UAAU,CAACG,MAAX,CAAkBC,KAAK,IAAIA,KAAK,CAACrC,IAAN,CAAWsC,YAAX,KAA4BtE,iBAAiB,CAACuE,GAAzE,CAApB;AACA,UAAIC,QAAQ,GAAG,KAAf;AACA,UAAIC,UAAU,GAAG,EAAjB;AAEA,UAAI9B,cAAc,GAAG;AACb+B,QAAAA,mBAAmB,EAAC/D,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB+D,cAAjB,CAAgCC,MAAhC,GAAuC,CAAvC,GACpBjE,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB+D,cAAjB,CAAgC,CAAhC,EAAmCD,mBADf,GACmCzE,cAAc,CAAC4E,GAFzD;AAGbC,QAAAA,SAAS,EAAEX,WAAW,CAACS,MAAZ,GAAqB,CAArB,GAAyBT,WAAW,CAAC,CAAD,CAApC,GAA0C,EAHxC;AAG4C;AACzDK,QAAAA;AAJa,OAArB;AAOAlE,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLoC,UAAAA,SAAS,EAAE,IADN;AAELN,UAAAA,SAAS,EAAEtB,UAAU,CAACsB,SAFjB;AAGLO,UAAAA,UAAU,EAAE7B,UAAU,CAAC6B,UAHlB;AAIL4B,UAAAA,YAAY,EAAEzD,UAAU,CAACyD,YAJpB;AAKLpC,UAAAA,cALK;AAML5B,UAAAA,OAAO,EAAE,KANJ;AAOLiE,UAAAA,UAAU,EAAEf,UAPP;AAQLgB,UAAAA,gBAAgB,EAAE,KARb;AASLC,UAAAA,SAAS,EAAET,UAAU,CAACC,mBAAX,KAAmC,GAAnC,GAAyCD,UAAzC,GAAsD;AAT5D;AAFJ,OAAD,CAAR;AAeH,KAhCL,EAiCKvD,KAjCL,CAiCWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEhB,cADD;AAELiB,QAAAA,OAAO,EAAE;AACLC,UAAAA,OAAO,EAAE;AADJ;AAFJ,OAAD,CAAR;;AAMA,UAAII,KAAK,CAACR,QAAN,CAAesB,MAAf,KAA0B,GAA9B,EAAmC;AAC/BvC,QAAAA,KAAK,CAACyB,KAAN,CAAYA,KAAK,CAACC,OAAlB;AACH,OAFD,MAEO;AACH1B,QAAAA,KAAK,CAACwC,IAAN,CAAWf,KAAK,CAACR,QAAN,CAAeC,IAA1B;AACH;AACJ,KA7CL;AA8CH,GApDD;AAqDH,CAtDM","sourcesContent":["import rsapi from \"../rsapi\";\r\nimport {\r\n    toast\r\n} from \"react-toastify\";\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from \"../components/CommonScript\";\r\nimport {\r\n    DEFAULT_RETURN\r\n} from \"./LoginTypes\";\r\nimport {\r\n    initRequest\r\n} from \"./LoginAction\";\r\nimport Axios from 'axios';\r\nimport {\r\n    transactionStatus,\r\n    attachmentType\r\n} from \"../components/Enumeration\";\r\n\r\n\r\n\r\nexport const getTrainingUpdate = (trainingupdate, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingupdate/getTrainingUpdateById\", {\r\n            ntrainingcode: trainingupdate.ntrainingcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const changeTechniqueFilter = (inputParam, filterTechnique,selectedTechinque) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/trainingupdate/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterTechnique,\r\n                            nfilterTechnique: inputParam.inputData.nfilterTechnique,\r\n                            selectedTechinque:selectedTechinque.item\r\n\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getParticipantsAccordion(versionObject) {\r\n    let { version, masterData, userInfo } = versionObject\r\n    return function (dispatch) {\r\n        if (!(masterData.selectedParticipants.nparticipantcode === version.nparticipantcode)) {\r\n            const inputData = { nparticipantcode: version.nparticipantcode, userinfo: userInfo }\r\n            rsapi.post('trainingupdate/getParticipantsAccordion', inputData)\r\n            \r\n                .then(response => {\r\n                    sortData(masterData)\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedParticipants: response.data.selectedParticipants,\r\n                        TraineeDocuments: response.data.TraineeDocuments\r\n                    }\r\n                    sortData(masterData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: { masterData, loading: false }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTrainingParticipantsAttended(trainingUpdate,selectedRecord,userInfo,operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingupdate/getInvitedParticipants\", { \"userinfo\": userInfo,  \"ntrainingcode\": parseInt(trainingUpdate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const attendUsersMap = constructOptionList(response.data.InvitedParticipant || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                const attendUsersList =response.data.InvitedParticipant;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: attendUsersList, nusercode: nusercode, loading: false,openModal: true,\r\n                        screenName:\"IDS_ATTENDPARTICIPANTSDETAILS\",nFlag:2,selectedRecord:selectedRecord,operation:operation\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTrainingParticipantsCertified(trainingUpdate,selectedRecord,userInfo,operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingupdate/getAttendedParticipants\", { \"userinfo\": userInfo,  \"ntrainingcode\": parseInt(trainingUpdate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                const certifyUsersMap = constructOptionList(response.data.AttendedParticipant || [], \"nusercode\",\r\n                    \"sfullname\", undefined, undefined, true);\r\n\r\n                const certifyUsersList = response.data.AttendedParticipant;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: certifyUsersList, nusercode: nusercode, loading: false,openModal: true,\r\n                        screenName:\"IDS_CERTIFYPARTICIPANTSDETAILS\",nFlag:3,selectedRecord:selectedRecord,operation:operation\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTrainingParticipantsCompetent(trainingUpdate,selectedRecord,userInfo,operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingupdate/getCertifiedParticipants\", { \"userinfo\": userInfo,  \"ntrainingcode\": parseInt(trainingUpdate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const competentUsersMap = constructOptionList(response.data.CompetentParticipant || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                const competentUsersList = response.data.CompetentParticipant;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: competentUsersList, nusercode: nusercode, loading: false,openModal: true,\r\n                        screenName:\"IDS_COMPETENTPARTICIPANTSDETAILS\",nFlag:4,selectedRecord:selectedRecord,operation:operation\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const addtrainingdocfile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n            \r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                // let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                \r\n                let selectedRecord = {\r\n                        nattachmenttypecode:response[0].data.AttachmentType.length>0?\r\n                        response[0].data.AttachmentType[0].nattachmenttypecode:attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                        disabled\r\n                    };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModal: true,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const addtraineedocfile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                // let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                \r\n                let selectedRecord = {\r\n                        nattachmenttypecode:response[0].data.AttachmentType.length>0?\r\n                        response[0].data.AttachmentType[0].nattachmenttypecode:attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                        disabled\r\n                    };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openModal: true,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === \"1\" ? editObject : {}\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n                             \r\n       \r\n"]},"metadata":{},"sourceType":"module"}