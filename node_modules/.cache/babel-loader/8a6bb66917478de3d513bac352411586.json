{"ast":null,"code":"import _classCallCheck from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import{LocalizationProvider}from'@progress/kendo-react-intl';import React from'react';import{injectIntl,FormattedMessage}from'react-intl';// import ReactTooltip from 'react-tooltip';\nimport{AtTabs}from'../../components/custom-tabs/custom-tabs.styles';import{ReadOnlyText}from'../../components/App.styles';import PerfectScrollbar from'react-perfect-scrollbar';import Tabs,{TabPane}from\"rc-tabs\";import{AtTableWrap}from'../../components/data-grid/data-grid.styles';import{formCode,SampleType}from'../../components/Enumeration';import'rc-tabs/assets/index.css';import{Col,Row,Card}from'react-bootstrap';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';var ConfigureSendToStoreFields=/*#__PURE__*/function(_React$Component){_inherits(ConfigureSendToStoreFields,_React$Component);var _super=_createSuper(ConfigureSendToStoreFields);function ConfigureSendToStoreFields(props){var _this;_classCallCheck(this,ConfigureSendToStoreFields);_this=_super.call(this,props);_this.onTabChange=function(tab){_this.setState({selectedScreen:_this.state.screens.find(function(screen){return screen.eventKey===tab;})});};var screens=[{eventKey:'Sample',name:\"Sample\"}];// if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\n//     screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\n// }\n// if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\n//     screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\n// }\nif(_this.props.needSubSample===true){screens.push({eventKey:'SubSample',name:\"IDS_SUBSAMPLE\"});}// let extractedColumnList = [];\n// if (this.props.selectedTemplateType === SampleType.Masters) {\n//     extractedColumnList.push(\n//         { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\n//         { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\n//     );\n// }\n// else {\n//     extractedColumnList.push(\n//         { \"title\": \"IDS_EDITABLESTATUS\", \"field\": \"editablestatus\", \"width\": \"600px\" },\n//     );\n// }\n_this.state={screens:screens,// extractedColumnList,\nselectedScreen:{eventKey:'Sample',name:\"Sample\"}};return _this;}_createClass(ConfigureSendToStoreFields,[{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(React.Fragment,null,this.props.selectedTemplateType===SampleType.Masters?/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(AtTableWrap,{className:\"at-list-table\"},/*#__PURE__*/React.createElement(LocalizationProvider,{language:\"lang\"},/*#__PURE__*/React.createElement(React.Fragment,null)))):/*#__PURE__*/React.createElement(AtTabs,null,/*#__PURE__*/React.createElement(Tabs,{activeKey:this.state.selectedScreen.eventKey,moreIcon:\"...\",onChange:this.onTabChange},this.state.screens.map(function(screen){return/*#__PURE__*/React.createElement(TabPane,{name:screen.eventKey,tab:_this2.props.intl.formatMessage({id:screen.name}),key:screen.eventKey},/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(AtTableWrap,{className:\"at-list-table\"},/*#__PURE__*/React.createElement(LocalizationProvider,{language:\"lang\"},/*#__PURE__*/React.createElement(Card,{className:\"border-0\"},/*#__PURE__*/React.createElement(Card.Header,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(ReadOnlyText,null,/*#__PURE__*/React.createElement(FormattedMessage,{id:\"IDS_FIELDS\",message:\"Fields\"}))),/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(ReadOnlyText,null,/*#__PURE__*/React.createElement(FormattedMessage,{id:\"IDS_MAPPINGFIELD\",message:\"Mapping Field\"}))))),/*#__PURE__*/React.createElement(Card.Body,{style:{height:\"350px\"}},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(ReadOnlyText,null,_this2.props.intl.formatMessage({id:'IDS_QUANTITY'}))),/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(FormSelectSearch// name={this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}\n,{placeholder:_this2.props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),options:_this2.state.selectedScreen.eventKey===\"SubSample\"?_this2.props.SampleList||[]:_this2.props.MainSampleList||[],optionId:\"value\",optionValue:\"label\",value:_this2.state.selectedScreen.eventKey===\"SubSample\"?_this2.props.selectedRecord.SubQuantity===undefined?_this2.props.selectedValue&&_this2.props.selectedValue.SubQuantity||[]:_this2.props.selectedRecord.SubQuantity||[]:_this2.props.selectedRecord.Quantity===undefined?_this2.props.selectedValue&&_this2.props.selectedValue.Quantity||[]:_this2.props.selectedRecord.Quantity||[],isSearchable:false,isMandatory:false,isClearable:true,isDisabled:false,onChange:function onChange(event){return _this2.props.onComboChange(event,'Quantity',_this2.state.selectedScreen.eventKey);},closeMenuOnSelect:true,alphabeticalSort:true})),/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(ReadOnlyText,null,\" \",_this2.props.intl.formatMessage({id:'IDS_UNIT'}))),/*#__PURE__*/React.createElement(Col,{md:6},/*#__PURE__*/React.createElement(FormSelectSearch//  name={this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}\n,{placeholder:_this2.props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),options:_this2.state.selectedScreen.eventKey===\"SubSample\"?_this2.props.SubSampleList||[]:_this2.props.MainSubSampleList||[],optionId:\"value\",optionValue:\"label\",value:_this2.state.selectedScreen.eventKey===\"SubSample\"?_this2.props.selectedRecord.SubUnit===undefined?_this2.props.selectedValue&&_this2.props.selectedValue.SubUnit||[]:_this2.props.selectedRecord.SubUnit||[]:_this2.props.selectedRecord.Unit===undefined?_this2.props.selectedValue&&_this2.props.selectedValue.Unit||[]:_this2.props.selectedRecord.Unit||[],isMandatory:false,isClearable:true,disableSearch:false,isSearchable:false,isDisabled:false,onChange:function onChange(event){return _this2.props.onComboChange(event,'Unit',_this2.state.selectedScreen.eventKey);},closeMenuOnSelect:true,alphabeticalSort:true})))))))));}))));}}]);return ConfigureSendToStoreFields;}(React.Component);export default injectIntl(ConfigureSendToStoreFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/designtemplatemapping/configureSendToStoreFields.jsx"],"names":["LocalizationProvider","React","injectIntl","FormattedMessage","AtTabs","ReadOnlyText","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","SampleType","Col","Row","Card","FormSelectSearch","ConfigureSendToStoreFields","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","name","needSubSample","push","selectedTemplateType","Masters","map","intl","formatMessage","id","height","SampleList","MainSampleList","selectedRecord","SubQuantity","undefined","selectedValue","Quantity","event","onComboChange","SubSampleList","MainSubSampleList","SubUnit","Unit","Component"],"mappings":"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","sourcesContent":["import { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl, FormattedMessage } from 'react-intl'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, SampleType } from '../../components/Enumeration';\r\nimport 'rc-tabs/assets/index.css';\r\nimport { Col, Row, Card } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nclass ConfigureSendToStoreFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const screens = [{ eventKey: 'Sample', name: \"Sample\" }];\r\n        // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedjoballocation === true)  {\r\n        //     screens.push({ eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION });\r\n        // }\r\n\r\n        // if (this.props.approvedRegSubTypeVersion && this.props.approvedRegSubTypeVersion.jsondata.nneedmyjob === true) {\r\n        //     screens.push({ eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS });\r\n        // }\r\n        if (this.props.needSubSample === true) {\r\n            screens.push({ eventKey: 'SubSample', name: \"IDS_SUBSAMPLE\" });\r\n        }\r\n        // let extractedColumnList = [];\r\n        // if (this.props.selectedTemplateType === SampleType.Masters) {\r\n        //     extractedColumnList.push(\r\n        //         { \"title\": \"IDS_GRIDITEM\", \"field\": \"griditem\", \"width\": \"600px\" },\r\n        //         { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"gridmoreitem\", \"width\": \"600px\" }\r\n        //     );\r\n        // }\r\n        // else {\r\n        //     extractedColumnList.push(\r\n        //         { \"title\": \"IDS_EDITABLESTATUS\", \"field\": \"editablestatus\", \"width\": \"600px\" },\r\n\r\n        //     );\r\n        // }\r\n        this.state = {\r\n            screens,\r\n            // extractedColumnList,\r\n            selectedScreen: { eventKey: 'Sample', name: \"Sample\" }\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {this.props.selectedTemplateType === SampleType.Masters ?\r\n                    <PerfectScrollbar>\r\n                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                        <AtTableWrap className=\"at-list-table\">\r\n                            <LocalizationProvider language=\"lang\">\r\n                                <>\r\n\r\n                                </>\r\n                            </LocalizationProvider>\r\n                        </AtTableWrap>\r\n                        {/* <ReactTooltip /> */}\r\n                    </PerfectScrollbar>\r\n\r\n                    :\r\n                    <AtTabs>\r\n                        <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                            {this.state.screens.map(screen =>\r\n                                <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                    <PerfectScrollbar>\r\n                                        {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                        <AtTableWrap className=\"at-list-table\">\r\n                                            <LocalizationProvider language=\"lang\">\r\n                                                <Card className=\"border-0\">\r\n\r\n                                                    <Card.Header>\r\n                                                        <Row>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText>\r\n                                                                    <FormattedMessage id=\"IDS_FIELDS\" message=\"Fields\" />\r\n                                                                </ReadOnlyText>\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText>\r\n                                                                    <FormattedMessage id=\"IDS_MAPPINGFIELD\" message=\"Mapping Field\" />\r\n                                                                </ReadOnlyText>\r\n                                                            </Col>\r\n                                                        </Row>\r\n                                                    </Card.Header>\r\n                                                    <Card.Body style={{height:\"350px\"}} >\r\n                                                        <Row>\r\n                                                            <Col md={6}>\r\n\r\n                                                                <ReadOnlyText>{this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}</ReadOnlyText>\r\n\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n\r\n                                                                <FormSelectSearch\r\n                                                                    // name={this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                    options={this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.SampleList || [] : this.props.MainSampleList || []}\r\n                                                                    optionId=\"value\"\r\n                                                                    optionValue=\"label\"\r\n                                                                    value={this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.selectedRecord.SubQuantity === undefined ? this.props.selectedValue && this.props.selectedValue.SubQuantity || [] :\r\n                                                                        this.props.selectedRecord.SubQuantity || [] : this.props.selectedRecord.Quantity === undefined ?\r\n                                                                        this.props.selectedValue && this.props.selectedValue.Quantity || [] : this.props.selectedRecord.Quantity || []}\r\n                                                                    isSearchable={false}\r\n                                                                    isMandatory={false}\r\n                                                                    isClearable={true}\r\n                                                                    isDisabled={false}\r\n                                                                    onChange={(event) => this.props.onComboChange(event, 'Quantity', this.state.selectedScreen.eventKey)}\r\n                                                                    closeMenuOnSelect={true}\r\n                                                                    alphabeticalSort={true}\r\n                                                                />\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <ReadOnlyText> {this.props.intl.formatMessage({ id: 'IDS_UNIT' })}</ReadOnlyText>\r\n                                                            </Col>\r\n                                                            <Col md={6}>\r\n                                                                <FormSelectSearch\r\n\r\n                                                                    //  name={this.props.intl.formatMessage({ id: 'IDS_QUANTITY' })}\r\n                                                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                                                    options={this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.SubSampleList || [] : this.props.MainSubSampleList || []}\r\n                                                                    optionId=\"value\"\r\n                                                                    optionValue=\"label\"\r\n                                                                    value={this.state.selectedScreen.eventKey === \"SubSample\" ? this.props.selectedRecord.SubUnit === undefined ? this.props.selectedValue && this.props.selectedValue.SubUnit || [] : this.props.selectedRecord.SubUnit || [] : this.props.selectedRecord.Unit === undefined ? this.props.selectedValue && this.props.selectedValue.Unit || [] : this.props.selectedRecord.Unit || []}\r\n                                                                    isMandatory={false}\r\n                                                                    isClearable={true}\r\n                                                                    disableSearch={false}\r\n                                                                    isSearchable={false}\r\n                                                                    isDisabled={false}\r\n                                                                    onChange={(event) => this.props.onComboChange(event, 'Unit', this.state.selectedScreen.eventKey)}\r\n                                                                    closeMenuOnSelect={true}\r\n                                                                    alphabeticalSort={true}\r\n                                                                />\r\n                                                                {/* </FormGroup> */}\r\n                                                            </Col>\r\n                                                        </Row>\r\n\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n\r\n\r\n                                            </LocalizationProvider>\r\n                                        </AtTableWrap>\r\n                                        {/* <ReactTooltip /> */}\r\n                                    </PerfectScrollbar>\r\n                                </TabPane>\r\n                            )}\r\n                        </Tabs>\r\n                    </AtTabs>\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureSendToStoreFields)"]},"metadata":{},"sourceType":"module"}