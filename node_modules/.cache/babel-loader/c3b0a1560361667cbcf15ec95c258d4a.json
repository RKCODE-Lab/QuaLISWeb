{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\PreRegDesignPopUp.jsx\";\nimport React from 'react';\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport device from 'current-device'; // import MoreOptions from '../../components/configureui/MoreOptions';\n\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\nimport { connect } from 'react-redux';\nimport { updateStore, crudMaster, getTableColumns } from '../../actions/index';\nimport { SampleType, transactionStatus } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign } from '../../components/CommonScript';\nimport AlertModal from './AlertModal';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\nimport { InstrumentDefaultTemplate, productDefaultTemplate } from './DefaultTemplates';\nimport { ReactComponents } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { toast } from 'react-toastify';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegDesignPopUp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setLayout = (design, splitDropZonePath, remove, removeChild) => {\n      let selectedFieldRecord = {};\n\n      if (remove === undefined) {\n        selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"));\n      } else if (removeChild) {\n        let childRecord = {};\n        this.state.toBeDeleted.deleteComponent.child.map(myChild => {\n          childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n          childRecord['childValue'] = undefined;\n          childRecord['parentPath'] = undefined;\n          childRecord['valuecolumn'] = undefined;\n          design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n          return null;\n        });\n      }\n\n      design = this.updatePath(design); // if (selectedFieldRecord.child) {\n      //     let childRecord = {}\n      //     selectedFieldRecord.child.map(myChild => {\n      //         childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\n      //         childRecord['parentPath'] = splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0';\n      //         design = replaceChildFromChildren(design, splitDropZonePath.split(\"-\"), childRecord)\n      //         return null;\n      //     })\n      // }\n      // if (selectedFieldRecord.childValue) {\n      //     let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n      //     let newChildData = []\n      //     parentData.child.map(child => child.label === selectedFieldRecord.label ?\n      //         newChildData.push({ ...child, childPath: splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0' }) :\n      //         newChildData.push(child))\n      //     parentData = { ...parentData, child: newChildData };\n      //     design = replaceChildFromChildren(design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\n      // }\n\n      const components = this.getComponents(design);\n      let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n      this.setState({\n        showConfirmAlert: false,\n        toBeDeleted: {},\n        design,\n        selectedFieldRecord: selectedFieldRecord,\n        components,\n        validComponents,\n        selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath\n      });\n    };\n\n    this.updatePath = design => {\n      design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n        if (componnetrow.hasOwnProperty('children')) {\n          componnetrow.children.map((component, compIndex) => {\n            if (component.child) {\n              let newChild = [];\n              component.child.map(childComp => {\n                const obj = this.getIndexByLabel(design, childComp.label);\n                newChild.push({ ...childComp,\n                  childPath: obj.path\n                });\n                const newObj = { ...obj.object,\n                  parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n                };\n                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n              });\n              component = { ...component,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n            }\n          });\n        } else {\n          if (componnetrow.child) {\n            let newChild = [];\n            componnetrow.child.map(childComp => {\n              const obj = this.getIndexByLabel(design, childComp.label);\n              newChild.push({ ...childComp,\n                childPath: obj.path\n              });\n              const newObj = { ...obj.object,\n                parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n              };\n              design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n            });\n            componnetrow = { ...componnetrow,\n              child: newChild\n            };\n            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n          }\n        }\n      })));\n      return design;\n    };\n\n    this.validateDelete = (design, splitDropZonePath) => {\n      const path = splitDropZonePath.split(\"-\");\n      let showAlert = false;\n      let toBeDeleted = {}; // let component = {}\n      // let row = this.state.design[path[0]]\n      // let column = row.children[path[1]]\n      // let compRow = column.children[path[2]]\n      // if (compRow.type === 'componentrow')\n      //     component = compRow.children[path[3]]\n      // else\n      //     component = compRow\n\n      let component = getcomponentdata(this.state.design, path);\n\n      if (component.child && component.child.length > 0) {\n        let childRecord = {};\n        component.child.map(myChild => {\n          childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n          childRecord['childValue'] = undefined;\n          childRecord['parentPath'] = undefined;\n          childRecord['valuecolumn'] = undefined;\n\n          if (myChild.componentcode !== ReactComponents.COMBO) {\n            childRecord['column'] = undefined;\n          }\n\n          design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n          return null;\n        });\n        showAlert = true;\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        }; // this.showAlert(true, toBeDeleted);\n      }\n\n      if (component.childValue) {\n        let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\n        let newChildData = parentData.child.filter(child => child.label !== component.label);\n        parentData = { ...parentData,\n          child: newChildData\n        };\n        design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData);\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (showAlert) {\n        this.showAlert(true, toBeDeleted);\n      } else {\n        this.setLayout(design, splitDropZonePath, true);\n      }\n    };\n\n    this.confirmAlert = () => {\n      this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.intl.formatMessage({\n        id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true), undefined, () => this.showAlert(false));\n    };\n\n    this.showAlert = (bool, toBeDeleted) => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { showConfirmAlert: bool, toBeDeleted }\n      // }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        showConfirmAlert: bool,\n        toBeDeleted\n      });\n    };\n\n    this.onclickcomponent = (event, data, path) => {\n      const selectedFieldRecord = { ...data\n      };\n      const components = this.getComponents(this.state.design);\n      let componentData = {\n        components,\n        selectedComponentpath: path\n      };\n\n      if (selectedFieldRecord.componentcode === ReactComponents.COMBO && selectedFieldRecord.source && (this.props.Login.columnInfo === undefined || this.props.Login.columnInfo[selectedFieldRecord.source] === undefined)) {\n        this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.source, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData);\n      } else {\n        const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n        let tableColumn = selectedFieldRecord.source ? this.props.Login.columnInfo[selectedFieldRecord.source].tableColumn : [];\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          if (this.props.Login.columnInfo && selectedFieldRecord.childValue && this.props.Login.columnInfo[selectedFieldRecord.childValue.source]) {\n            tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.source].tableColumn;\n            this.setState({\n              selectedComponentpath: path,\n              selectedFieldRecord: selectedFieldRecord,\n              components,\n              tableColumn,\n              validComponents\n            });\n          } else {\n            if (selectedFieldRecord.childValue) {\n              this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.childValue.source, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData);\n            } else {\n              this.setState({\n                selectedComponentpath: path,\n                selectedFieldRecord: selectedFieldRecord,\n                components,\n                tableColumn,\n                validComponents\n              });\n            }\n          }\n        } else {\n          this.setState({\n            selectedComponentpath: path,\n            selectedFieldRecord: selectedFieldRecord,\n            components,\n            tableColumn,\n            validComponents\n          });\n        }\n      }\n    };\n\n    this.getComponents = design => {\n      let components = [];\n      design.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          column.children.map((componnet, compindex) => componnet.hasOwnProperty(\"children\") ? componnet.children.map((componnetrow, compRowIndex) => componnetrow.label && components.push({\n            label: componnetrow.label,\n            value: componnetrow.label,\n            // item: componnetrow,\n            source: componnetrow.source,\n            child: componnetrow.child,\n            valuemember: componnetrow.valuemember,\n            path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\n          })) : componnet.label && components.push({\n            label: componnet.label,\n            value: componnet.label,\n            // item: componnet,\n            source: componnet.source,\n            child: componnet.child,\n            valuemember: componnet.valuemember,\n            path: `${rowIndex}-${columnIndex}-${compindex}-0`\n          }));\n          return null;\n        });\n        return null;\n      });\n      return components;\n    };\n\n    this.getValueMembers = selectedFieldRecord => {\n      if (selectedFieldRecord.childValue) {\n        let valueColumn = [];\n        this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.source] && this.props.Login.columnInfo[selectedFieldRecord.source].numericColumns.map(x => {\n          if (x.foriegntablename === selectedFieldRecord.childValue.source) valueColumn.push({\n            label: x.label[this.props.Login.userInfo.slanguagetypecode],\n            value: x.tablecolumnname\n          });\n          return null;\n        });\n\n        if (valueColumn.length) {\n          return valueColumn;\n        } else {\n          this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.childValue.source] && this.props.Login.columnInfo[selectedFieldRecord.childValue.source].numericColumns.map(x => {\n            if (x.foriegntablename === selectedFieldRecord.source) valueColumn.push({\n              label: x.label[this.props.Login.userInfo.slanguagetypecode],\n              value: x.tablecolumnname\n            });\n            return null;\n          });\n          return valueColumn;\n        }\n      } else {\n        return null;\n      }\n    };\n\n    this.onInputOnChange = event => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'timeonly') {\n          selectedFieldRecord['dateonly'] = false;\n        }\n\n        if (event.target.name === 'dateonly') {\n          selectedFieldRecord['timeonly'] = false;\n        }\n\n        selectedFieldRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedFieldRecord[event.target.name] = event.target.value;\n      } // this.setState({ selectedFieldRecord });\n\n\n      this.saveComponentProperties(selectedFieldRecord);\n    };\n\n    this.onNumericInputChange = event => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      let value = event.target.value;\n\n      if (!isNaN(value)) {\n        // if (parseInt(value) < 10) {\n        selectedFieldRecord[event.target.name] = value;\n        this.saveComponentProperties(selectedFieldRecord); // }\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n\n      if (selectedFieldRecord.label) {\n        if (comboName === 'table') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['source'] = comboData.value;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo);\n        } else if (comboName === 'column') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['displaymember'] = comboData.value;\n\n          if (comboData.item.multilungual) {\n            selectedFieldRecord['ismultilungual'] = true;\n          }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'childValue') {\n          if (comboData) {\n            // selectedFieldRecord[comboName] = comboData;\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let design = this.state.design;\n\n            if (selectedFieldRecord.parentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData);\n              }\n            }\n\n            let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\n            selectedFieldRecord['childValue'] = comboData;\n            selectedFieldRecord['parentPath'] = comboData.path;\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n            let newChildData = parentData.child || [];\n            let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label);\n\n            if (validateChild.length === 0) {\n              let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\n\n              if (valueMemberOptions.length === 1) {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  tablecolumnname: valueMemberOptions[0].value,\n                  childPath: this.state.selectedComponentpath\n                });\n              } else {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  childPath: this.state.selectedComponentpath\n                });\n              }\n            }\n\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.props.getTableColumns(design, selectedFieldRecord, selectedFieldRecord.childValue.source, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n                components: this.state.components,\n                selectedComponentpath: this.state.selectedComponentpath\n              }, true);\n            }\n          } else {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n            let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n            selectedFieldRecord['childValue'] = comboData;\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) selectedFieldRecord['column'] = comboData;\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.setState({\n                design,\n                selectedFieldRecord,\n                tableColumn: []\n              });\n            }\n          }\n        } else if (comboName === 'valuecolumn') {\n          selectedFieldRecord['valuecolumn'] = comboData;\n          let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n          let newChildData = [];\n          parentData.child.map(child => {\n            if (child.label === selectedFieldRecord.label) {\n              newChildData.push({ ...child,\n                tablecolumnname: comboData.value\n              });\n            } else {\n              newChildData.push(child);\n            }\n\n            return null;\n          });\n          parentData = { ...parentData,\n            child: newChildData\n          };\n          let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERLABEL\"\n        }));\n      }\n    };\n\n    this.addTag = tags => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      selectedFieldRecord['radioOptions'] = tags;\n      this.saveComponentProperties(selectedFieldRecord);\n    };\n\n    this.saveComponentProperties = selectedFieldRecord => {\n      const splititemarray = this.state.selectedComponentpath.split(\"-\"); // const selectedFieldRecord = this.state.selectedFieldRecord;\n\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.handleSaveClick = saveType => {\n      if (this.state.selectedRecord.templateName && this.state.selectedRecord.templateName !== \"\") {\n        let inputData = [];\n        let selectedId = null;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let dataState = undefined;\n\n        if (this.props.Login.operation === \"update\") {\n          // edit\n          selectedId = this.state.selectedRecord.nchecklistqbcode;\n          dataState = this.state.dataState;\n          inputData[\"registrationtemplate\"] = {\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templateName,\n            jsonString: JSON.stringify(this.state.design),\n            ntransactionstatus: transactionStatus.DRAFT\n          };\n        } else {\n          //add               \n          inputData[\"registrationtemplate\"] = {\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templateName,\n            jsonString: JSON.stringify(this.state.design),\n            ntransactionstatus: transactionStatus.DRAFT\n          };\n        }\n\n        const inputParam = {\n          methodUrl: 'RegistrationTemplate',\n          classUrl: 'dynamicpreregdesign',\n          displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n          inputData: inputData,\n          operation: this.props.Login.operation,\n          saveType,\n          dataState,\n          selectedId\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openPortal\");\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERTEMPLATENAME\"\n        }));\n      }\n    };\n\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      nflag: 1,\n      design: this.props.Login.operation === 'update' ? this.props.Login.design : this.props.nsampletypecode === SampleType.PRODUCT ? productDefaultTemplate : this.props.nsampletypecode === SampleType.INSTRUMENT ? InstrumentDefaultTemplate : [],\n      selectedRecord: this.props.Login.selectedRecord || {},\n      selectedFieldRecord: {},\n      selectedComponentpath: \"\",\n      components: [],\n      validComponents: [],\n      showConfirmAlert: false,\n      toBeDeleted: {}\n    };\n  }\n\n  render() {\n    // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      dialogClassName: `${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    }, `${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({\n      id: \"IDS_EDIT\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_ADD\"\n    })} ${this.props.intl.formatMessage({\n      id: \"IDS_DESIGNTEMPLATE\"\n    })}`), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\",\n      onClick: () => this.setState({\n        openAlertModal: true,\n        templateName: \"\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DndProvider, {\n      backend: device.os !== 'android' ? HTML5Backend : TouchBackend,\n      options: {\n        enableMouseEvents: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Dynamicinput, {\n      layout: this.state.design,\n      reactInputFields: this.props.Login.ReactInputFields || {},\n      setLayout: this.setLayout,\n      reactComponents: this.props.Login.ReactComponents || {},\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onComboChange: this.onComboChange,\n      selectedFieldRecord: this.state.selectedFieldRecord,\n      onclickcomponent: this.onclickcomponent,\n      ReactTables: this.props.Login.ReactTables,\n      tableColumn: this.state.tableColumn,\n      inputFields: this.state.validComponents,\n      addChildMapping: this.addChildMapping,\n      valueMembers: this.getValueMembers(this.state.selectedFieldRecord),\n      validateDelete: this.validateDelete,\n      addTag: this.addTag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 41\n      }\n    }))))))), /*#__PURE__*/React.createElement(AlertModal, {\n      openAlertModal: this.state.openAlertModal,\n      modalTitle: \"IDS_ENTERTEMPLATENAME\",\n      closeModal: () => this.setState({\n        openAlertModal: false,\n        templateName: \"\"\n      }),\n      onSaveClick: this.handleSaveClick,\n      modalBody: /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"templatename\",\n        type: \"text\",\n        onChange: event => this.setState({\n          selectedRecord: { ...this.state.selectedRecord,\n            templateName: event.target.value\n          }\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        value: this.state.selectedRecord.templateName ? this.state.selectedRecord.templateName : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      openAlertModal,\n      design,\n      selectedRecord,\n      selectedFieldRecord,\n      selectedComponentpath,\n      components,\n      validComponents,\n      tableColumn,\n      showConfirmAlert\n    } = this.state;\n\n    if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\n      updateState = true;\n      openAlertModal = false;\n    }\n\n    if (this.props.Login.design !== previousProps.Login.design) {\n      updateState = true;\n      design = this.props.Login.design;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\n        selectedComponentpath = this.props.Login.selectedComponentpath;\n      }\n\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      components = this.props.Login.components;\n      validComponents = this.props.Login.validComponents;\n      tableColumn = this.props.Login.tableColumn;\n      updateState = true;\n    }\n\n    if (updateState) {\n      this.setState({\n        openAlertModal,\n        design,\n        selectedRecord,\n        selectedFieldRecord,\n        tableColumn,\n        selectedComponentpath,\n        components,\n        validComponents,\n        showConfirmAlert\n      });\n    }\n  }\n\n  getIndexByLabel(design, label) {\n    let obj = {};\n    design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n      if (componnetrow.hasOwnProperty('children')) {\n        componnetrow.children.map((component, compIndex) => {\n          if (component.label === label) {\n            obj = {\n              object: component,\n              path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n            }; // break;\n          }\n\n          return null;\n        });\n      } else {\n        if (componnetrow.label === label) {\n          obj = {\n            object: componnetrow,\n            path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n          }; // return obj;\n          // break;\n        }\n      }\n\n      return null;\n    })));\n    return obj;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getTableColumns\n})(injectIntl(PreRegDesignPopUp));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/dynamicpreregdesign/PreRegDesignPopUp.jsx"],"names":["React","Button","Col","Modal","Row","FontAwesomeIcon","faSave","FormattedMessage","injectIntl","TouchBackend","HTML5Backend","DndProvider","device","Dynamicinput","connect","updateStore","crudMaster","getTableColumns","SampleType","transactionStatus","DEFAULT_RETURN","showEsign","AlertModal","FormInput","getcomponentdata","getValidComponent","replaceChildFromChildren","InstrumentDefaultTemplate","productDefaultTemplate","ReactComponents","ConfirmMessage","toast","mapStateToProps","state","Login","PreRegDesignPopUp","Component","constructor","props","setLayout","design","splitDropZonePath","remove","removeChild","selectedFieldRecord","undefined","split","childRecord","toBeDeleted","deleteComponent","child","map","myChild","childPath","updatePath","components","getComponents","validComponents","columnInfo","setState","showConfirmAlert","selectedComponentpath","length","row","rowIndex","children","column","columnIndex","componnetrow","compRowIndex","hasOwnProperty","component","compIndex","newChild","childComp","obj","getIndexByLabel","label","push","path","newObj","object","parentPath","validateDelete","showAlert","componentcode","COMBO","childValue","parentData","newChildData","filter","confirmAlert","confirmMessage","confirm","intl","formatMessage","id","bool","onclickcomponent","event","data","componentData","source","userInfo","tableColumn","componnet","compindex","value","valuemember","getValueMembers","valueColumn","numericColumns","x","foriegntablename","slanguagetypecode","tablecolumnname","onInputOnChange","target","type","name","checked","saveComponentProperties","onNumericInputChange","isNaN","onComboChange","comboData","comboName","splititemarray","newdata","item","multilungual","oldParentData","newChildData1","validateChild","valueMemberOptions","warn","addTag","tags","handleSaveClick","saveType","selectedRecord","templateName","inputData","selectedId","dataState","operation","nchecklistqbcode","nreactregtemplatecode","masterData","selectedTemplate","nsampletypecode","sregtemplatename","jsonString","JSON","stringify","ntransactionstatus","DRAFT","inputParam","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","ncontrolcode","updateInfo","typeName","loadEsign","screenData","info","nflag","PRODUCT","INSTRUMENT","render","openPortal","closeModal","openAlertModal","os","enableMouseEvents","ReactInputFields","ReactTables","addChildMapping","componentDidUpdate","previousProps","updateState"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { TouchBackend } from 'react-dnd-touch-backend'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport device from 'current-device';\r\n// import MoreOptions from '../../components/configureui/MoreOptions';\r\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\r\nimport { connect } from 'react-redux';\r\nimport { updateStore, crudMaster, getTableColumns } from '../../actions/index'\r\nimport { SampleType, transactionStatus } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign } from '../../components/CommonScript';\r\nimport AlertModal from './AlertModal'\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\r\nimport { InstrumentDefaultTemplate, productDefaultTemplate } from './DefaultTemplates';\r\nimport { ReactComponents } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { toast } from 'react-toastify';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass PreRegDesignPopUp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            nflag: 1,\r\n            design: this.props.Login.operation === 'update' ? this.props.Login.design :\r\n                this.props.nsampletypecode === SampleType.PRODUCT ? productDefaultTemplate :\r\n                    this.props.nsampletypecode === SampleType.INSTRUMENT ? InstrumentDefaultTemplate : [],\r\n            selectedRecord: this.props.Login.selectedRecord || {},\r\n            selectedFieldRecord: {},\r\n            selectedComponentpath: \"\",\r\n            components: [],\r\n            validComponents: [],\r\n            showConfirmAlert: false,\r\n            toBeDeleted: {}\r\n\r\n\r\n        }\r\n    }\r\n    render() {\r\n        // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\r\n        return (\r\n            <>\r\n                <Modal\r\n                    centered\r\n                    scrollable\r\n                    bsPrefix=\"model model_zindex\"\r\n                    show={this.props.Login.openPortal}\r\n                    onHide={this.props.closeModal}\r\n                    dialogClassName={`${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    enforceFocus={false}\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                >\r\n                    <Modal.Header className=\"d-flex align-items-center\">\r\n                        <Modal.Title id=\"add\" className=\"header-primary flex-grow-1\">\r\n                            {`${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({ id: \"IDS_EDIT\" }) : this.props.intl.formatMessage({ id: \"IDS_ADD\" })} ${this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATE\" })}`}\r\n                        </Modal.Title>\r\n                        <>\r\n                            <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.closeModal}>\r\n                                <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                            </Button>\r\n                            <Button className=\" btn-user btn-primary-blue\" onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}>\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id={\"IDS_SAVE\"} defaultMessage={\"Save\"} />\r\n                            </Button>\r\n                        </>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"modal-inner-content\">\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <DndProvider backend={device.os !== 'android' ? HTML5Backend : TouchBackend} options={{ enableMouseEvents: true }} >\r\n                                        <Dynamicinput\r\n                                            layout={this.state.design}\r\n                                            reactInputFields={this.props.Login.ReactInputFields || {}}\r\n                                            setLayout={this.setLayout}\r\n                                            reactComponents={this.props.Login.ReactComponents || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            selectedFieldRecord={this.state.selectedFieldRecord}\r\n                                            onclickcomponent={this.onclickcomponent}\r\n                                            ReactTables={this.props.Login.ReactTables}\r\n                                            tableColumn={this.state.tableColumn}\r\n                                            inputFields={this.state.validComponents}\r\n                                            addChildMapping={this.addChildMapping}\r\n                                            valueMembers={this.getValueMembers(this.state.selectedFieldRecord)}\r\n                                            validateDelete={this.validateDelete}\r\n                                            addTag={this.addTag}\r\n                                        />\r\n                                    </DndProvider>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                <AlertModal\r\n                    openAlertModal={this.state.openAlertModal}\r\n                    modalTitle={\"IDS_ENTERTEMPLATENAME\"}\r\n                    closeModal={() => this.setState({ openAlertModal: false, templateName: \"\" })}\r\n                    onSaveClick={this.handleSaveClick}\r\n                    modalBody={\r\n                        <Row>\r\n                            <Col>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                    name={\"templatename\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.setState({ selectedRecord: { ...this.state.selectedRecord, templateName: event.target.value } })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                    value={this.state.selectedRecord.templateName ? this.state.selectedRecord.templateName : \"\"}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={\"30\"}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    }\r\n                />\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n            selectedComponentpath, components, validComponents, tableColumn,\r\n            showConfirmAlert } = this.state\r\n        if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\r\n            updateState = true;\r\n            openAlertModal = false;\r\n        }\r\n        if (this.props.Login.design !== previousProps.Login.design) {\r\n            updateState = true;\r\n            design = this.props.Login.design;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\r\n                selectedComponentpath = this.props.Login.selectedComponentpath\r\n            }\r\n\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord\r\n            components = this.props.Login.components\r\n            validComponents = this.props.Login.validComponents\r\n            tableColumn = this.props.Login.tableColumn\r\n            updateState = true;\r\n\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n                tableColumn, selectedComponentpath, components, validComponents,\r\n                showConfirmAlert\r\n            })\r\n        }\r\n    }\r\n    setLayout = (design, splitDropZonePath, remove, removeChild) => {\r\n        let selectedFieldRecord = {}\r\n        if (remove === undefined) {\r\n            selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"))\r\n        }\r\n        else if (removeChild) {\r\n            let childRecord = {}\r\n            this.state.toBeDeleted.deleteComponent.child.map(myChild => {\r\n                childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                childRecord['childValue'] = undefined;\r\n                childRecord['parentPath'] = undefined;\r\n                childRecord['valuecolumn'] = undefined;\r\n\r\n                design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                return null;\r\n            })\r\n        }\r\n        design = this.updatePath(design)\r\n        // if (selectedFieldRecord.child) {\r\n        //     let childRecord = {}\r\n        //     selectedFieldRecord.child.map(myChild => {\r\n        //         childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n        //         childRecord['parentPath'] = splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0';\r\n        //         design = replaceChildFromChildren(design, splitDropZonePath.split(\"-\"), childRecord)\r\n        //         return null;\r\n        //     })\r\n        // }\r\n        // if (selectedFieldRecord.childValue) {\r\n        //     let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n        //     let newChildData = []\r\n        //     parentData.child.map(child => child.label === selectedFieldRecord.label ?\r\n        //         newChildData.push({ ...child, childPath: splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0' }) :\r\n        //         newChildData.push(child))\r\n        //     parentData = { ...parentData, child: newChildData };\r\n        //     design = replaceChildFromChildren(design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n\r\n        // }\r\n        const components = this.getComponents(design)\r\n        let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n        this.setState({ showConfirmAlert: false, toBeDeleted: {}, design, selectedFieldRecord: selectedFieldRecord, components, validComponents, selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath })\r\n    }\r\n    updatePath = (design) => {\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.child) {\r\n                                let newChild = [];\r\n                                component.child.map(childComp => {\r\n                                    const obj = this.getIndexByLabel(design, childComp.label);\r\n                                    newChild.push({ ...childComp, childPath: obj.path });\r\n                                    const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}` };\r\n                                    design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                })\r\n                                component = { ...component, child: newChild }\r\n                                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                            }\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.child) {\r\n                            let newChild = [];\r\n                            componnetrow.child.map(childComp => {\r\n                                const obj = this.getIndexByLabel(design, childComp.label);\r\n                                newChild.push({ ...childComp, childPath: obj.path });\r\n                                const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0` };\r\n                                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                            })\r\n                            componnetrow = { ...componnetrow, child: newChild }\r\n                            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                        }\r\n                    }\r\n                })\r\n            )\r\n        )\r\n        return design;\r\n    }\r\n    getIndexByLabel(design, label) {\r\n        let obj = {};\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.label === label) {\r\n                                obj = {\r\n                                    object: component,\r\n                                    path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\r\n                                }\r\n                                // break;\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.label === label) {\r\n                            obj = {\r\n                                object: componnetrow,\r\n                                path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\r\n                            }\r\n                            // return obj;\r\n                            // break;\r\n                        }\r\n                    }\r\n                    return null;\r\n                })\r\n            )\r\n        )\r\n        return obj;\r\n    }\r\n    validateDelete = (design, splitDropZonePath) => {\r\n        const path = splitDropZonePath.split(\"-\")\r\n        let showAlert = false;\r\n        let toBeDeleted = {};\r\n        // let component = {}\r\n        // let row = this.state.design[path[0]]\r\n        // let column = row.children[path[1]]\r\n        // let compRow = column.children[path[2]]\r\n        // if (compRow.type === 'componentrow')\r\n        //     component = compRow.children[path[3]]\r\n        // else\r\n        //     component = compRow\r\n        let component = getcomponentdata(this.state.design, path)\r\n        if (component.child && component.child.length > 0) {\r\n\r\n            let childRecord = {}\r\n            component.child.map(myChild => {\r\n                childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                childRecord['childValue'] = undefined;\r\n                childRecord['parentPath'] = undefined;\r\n                childRecord['valuecolumn'] = undefined;\r\n                if (myChild.componentcode !== ReactComponents.COMBO) {\r\n                    childRecord['column'] = undefined;\r\n                }\r\n                design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                return null;\r\n            })\r\n            showAlert = true;\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n            // this.showAlert(true, toBeDeleted);\r\n        }\r\n        if (component.childValue) {\r\n            let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\r\n            let newChildData = parentData.child.filter(child => child.label !== component.label)\r\n            parentData = { ...parentData, child: newChildData };\r\n            design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData)\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n\r\n        }\r\n        if (showAlert) {\r\n            this.showAlert(true, toBeDeleted);\r\n        }\r\n        else {\r\n            this.setLayout(design, splitDropZonePath, true)\r\n        }\r\n    }\r\n    confirmAlert = () => {\r\n        this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n            this.props.intl.formatMessage({ id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true),\r\n            undefined,\r\n            () => this.showAlert(false));\r\n    }\r\n    showAlert = (bool, toBeDeleted) => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { showConfirmAlert: bool, toBeDeleted }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ showConfirmAlert: bool, toBeDeleted })\r\n    }\r\n    onclickcomponent = (event, data, path) => {\r\n        const selectedFieldRecord = { ...data }\r\n        const components = this.getComponents(this.state.design)\r\n        let componentData = { components, selectedComponentpath: path }\r\n\r\n        if (selectedFieldRecord.componentcode === ReactComponents.COMBO &&\r\n            selectedFieldRecord.source &&\r\n            (this.props.Login.columnInfo === undefined ||\r\n                this.props.Login.columnInfo[selectedFieldRecord.source] === undefined)) {\r\n            this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                selectedFieldRecord.source, this.props.Login.userInfo,\r\n                \"\", this.props.Login.columnInfo, componentData)\r\n        } else {\r\n            const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n            let tableColumn = selectedFieldRecord.source ? this.props.Login.columnInfo[selectedFieldRecord.source].tableColumn : [];\r\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                if (this.props.Login.columnInfo && selectedFieldRecord.childValue && this.props.Login.columnInfo[selectedFieldRecord.childValue.source]) {\r\n                    tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.source].tableColumn;\r\n                    this.setState({\r\n                        selectedComponentpath: path,\r\n                        selectedFieldRecord: selectedFieldRecord,\r\n                        components,\r\n                        tableColumn,\r\n                        validComponents\r\n                    })\r\n                } else {\r\n                    if (selectedFieldRecord.childValue) {\r\n                        this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.source, this.props.Login.userInfo,\r\n                            \"\", this.props.Login.columnInfo, componentData);\r\n                    } else {\r\n                        this.setState({\r\n                            selectedComponentpath: path,\r\n                            selectedFieldRecord: selectedFieldRecord,\r\n                            components,\r\n                            tableColumn,\r\n                            validComponents\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    selectedComponentpath: path,\r\n                    selectedFieldRecord: selectedFieldRecord,\r\n                    components,\r\n                    tableColumn,\r\n                    validComponents\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    getComponents = (design) => {\r\n        let components = [];\r\n        design.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                column.children.map((componnet, compindex) =>\r\n                    componnet.hasOwnProperty(\"children\") ?\r\n                        componnet.children.map((componnetrow, compRowIndex) =>\r\n                            componnetrow.label && components.push({\r\n                                label: componnetrow.label,\r\n                                value: componnetrow.label,\r\n                                // item: componnetrow,\r\n                                source: componnetrow.source,\r\n                                child: componnetrow.child,\r\n                                valuemember: componnetrow.valuemember,\r\n                                path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\r\n                            })\r\n                        )\r\n                        :\r\n                        componnet.label && components.push({\r\n                            label: componnet.label,\r\n                            value: componnet.label,\r\n                            // item: componnet,\r\n                            source: componnet.source,\r\n                            child: componnet.child,\r\n                            valuemember: componnet.valuemember,\r\n                            path: `${rowIndex}-${columnIndex}-${compindex}-0`\r\n                        })\r\n                )\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        return components;\r\n    }\r\n    getValueMembers = (selectedFieldRecord) => {\r\n        if (selectedFieldRecord.childValue) {\r\n            let valueColumn = [];\r\n            this.props.Login.columnInfo &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.source] &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.source].numericColumns.map(x => {\r\n                    if (x.foriegntablename === selectedFieldRecord.childValue.source)\r\n                        valueColumn.push(\r\n                            {\r\n                                label: x.label[this.props.Login.userInfo.slanguagetypecode],\r\n                                value: x.tablecolumnname\r\n                            }\r\n                        )\r\n                    return null;\r\n                })\r\n            if (valueColumn.length) {\r\n\r\n                return valueColumn;\r\n\r\n            } else {\r\n                this.props.Login.columnInfo &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.source] &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.source].numericColumns.map(x => {\r\n                        if (x.foriegntablename === selectedFieldRecord.source)\r\n                            valueColumn.push(\r\n                                {\r\n                                    label: x.label[this.props.Login.userInfo.slanguagetypecode],\r\n                                    value: x.tablecolumnname\r\n                                }\r\n                            )\r\n                        return null;\r\n                    })\r\n                return valueColumn;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'timeonly') {\r\n                selectedFieldRecord['dateonly'] = false;\r\n            }\r\n            if (event.target.name === 'dateonly') {\r\n                selectedFieldRecord['timeonly'] = false;\r\n            }\r\n            selectedFieldRecord[event.target.name] = event.target.checked;\r\n        }\r\n        else {\r\n            selectedFieldRecord[event.target.name] = event.target.value;\r\n        }\r\n        // this.setState({ selectedFieldRecord });\r\n        this.saveComponentProperties(selectedFieldRecord)\r\n    }\r\n    onNumericInputChange = (event) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        let value = event.target.value;\r\n        if (!isNaN(value)) {\r\n            // if (parseInt(value) < 10) {\r\n            selectedFieldRecord[event.target.name] = value;\r\n            this.saveComponentProperties(selectedFieldRecord);\r\n            // }\r\n        }\r\n    }\r\n    onComboChange = (comboData, comboName) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        if (selectedFieldRecord.label) {\r\n            if (comboName === 'table') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['source'] = comboData.value;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo)\r\n            } else if (comboName === 'column') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['displaymember'] = comboData.value;\r\n                if (comboData.item.multilungual) {\r\n                    selectedFieldRecord['ismultilungual'] = true;\r\n                }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (comboName === 'childValue') {\r\n                if (comboData) {\r\n                    // selectedFieldRecord[comboName] = comboData;\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    let design = this.state.design\r\n                    if (selectedFieldRecord.parentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData)\r\n                        }\r\n\r\n                    }\r\n                    let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    selectedFieldRecord['parentPath'] = comboData.path\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    let newChildData = parentData.child || [];\r\n                    let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label)\r\n                    if (validateChild.length === 0) {\r\n                        let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\r\n                        if (valueMemberOptions.length === 1) {\r\n                            newChildData.push({ label: selectedFieldRecord.label, tablecolumnname: valueMemberOptions[0].value, childPath: this.state.selectedComponentpath })\r\n                        } else {\r\n                            newChildData.push({ label: selectedFieldRecord.label, childPath: this.state.selectedComponentpath })\r\n                        }\r\n\r\n                    }\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.props.getTableColumns(design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.source, this.props.Login.userInfo,\r\n                            splititemarray, this.props.Login.columnInfo,\r\n                            { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                            true)\r\n                    }\r\n\r\n                } else {\r\n\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n                    let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                    let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label)\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO)\r\n                        selectedFieldRecord['column'] = comboData\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.setState({ design, selectedFieldRecord, tableColumn: [] })\r\n                    }\r\n                }\r\n\r\n            } else if (comboName === 'valuecolumn') {\r\n                selectedFieldRecord['valuecolumn'] = comboData;\r\n                let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                let newChildData = []\r\n                parentData.child.map(child => {\r\n                    if (child.label === selectedFieldRecord.label) {\r\n                        newChildData.push({\r\n                            ...child, tablecolumnname: comboData.value\r\n                        })\r\n                    } else {\r\n                        newChildData.push(child)\r\n                    }\r\n                    return null;\r\n                })\r\n                parentData = { ...parentData, child: newChildData };\r\n                let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({id:\"IDS_ENTERLABEL\"}))\r\n        }\r\n\r\n    }\r\n    addTag = (tags) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n\r\n        selectedFieldRecord['radioOptions'] = tags;\r\n        this.saveComponentProperties(selectedFieldRecord);\r\n\r\n    }\r\n    saveComponentProperties = (selectedFieldRecord) => {\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        // const selectedFieldRecord = this.state.selectedFieldRecord;\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord })\r\n    }\r\n    handleSaveClick = (saveType) => {\r\n        if (this.state.selectedRecord.templateName && this.state.selectedRecord.templateName !== \"\") {\r\n            let inputData = [];\r\n            let selectedId = null;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            if (this.props.Login.operation === \"update\") {\r\n                // edit\r\n                selectedId = this.state.selectedRecord.nchecklistqbcode\r\n                dataState = this.state.dataState\r\n                inputData[\"registrationtemplate\"] = {\r\n                    nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templateName,\r\n                    jsonString: JSON.stringify(this.state.design),\r\n                    ntransactionstatus: transactionStatus.DRAFT\r\n                }\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"registrationtemplate\"] =\r\n                {\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templateName,\r\n                    jsonString: JSON.stringify(this.state.design),\r\n                    ntransactionstatus: transactionStatus.DRAFT\r\n                };\r\n            }\r\n\r\n            const inputParam = {\r\n                methodUrl: 'RegistrationTemplate',\r\n                classUrl: 'dynamicpreregdesign',\r\n                displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n                inputData: inputData,\r\n                operation: this.props.Login.operation,\r\n                saveType, dataState, selectedId\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openPortal\");\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({id:\"IDS_ENTERTEMPLATENAME\"}))\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { updateStore, crudMaster, getTableColumns })(injectIntl(PreRegDesignPopUp))"]},"metadata":{},"sourceType":"module"}