{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, ageCalculate, comboChild, validateEmail, getSameRecordFromTwoArrays, removeIndex, childSpecLoadCheck, constructjsonOptionList, constructjsonOptionDefault, rearrangeDateFormatforUI, childComboLoadForEdit } from '../components/CommonScript';\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\nimport { ReactComponents, SampleType, transactionStatus, formCode } from '../components/Enumeration';\nimport Axios from 'axios';\nimport { getTreeByProduct } from './RegistrationAction';\nimport { intl } from '../components/App';\nexport function getReactInputFields(userinfo, operation, respObj, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true)); // console.log(\"respObj:\", respObj);\n\n    const listURL = [];\n    listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", {\n      userinfo\n    });\n    listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", {\n      userinfo\n    });\n    listURL[2] = rsapi.post(\"registrationsubtype/getPeriods\", {\n      userinfo\n    });\n    listURL[3] = rsapi.post(\"dynamicpreregdesign/getReactStaticFilterTables\", {\n      userinfo\n    });\n    Axios.all(listURL).then(response => {\n      respObj = respObj ? { ...respObj\n      } : {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          ReactInputFields: response[1].data,\n          ReactComponents: response[0].data.components,\n          Period: constructOptionList(response[2].data, 'nperiodcode', 'speriodname').get(\"OptionList\"),\n          ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'sdisplayname').get(\"OptionList\"),\n          staticfiltertables: constructOptionList(response[3].data, 'nquerybuilderstaticfiltercode', 'displayname').get(\"OptionList\"),\n          selectedFieldRecord: {},\n          openModal: false,\n          loading: false,\n          openPortal: true,\n          operation,\n          showFilter: false,\n          ncontrolcode: ncontrolCode,\n          ...respObj\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: template.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedTemplate: response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getDefaultTemplate(ComboData, sampleType, userInfo, masterData) {\n  return function (dispatch) {\n    // dispatch(initRequest(true));\n    // rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\n    //     nsampletypecode: sampleType.value,\n    //     userinfo: userInfo,\n    //     SubSample:false\n    // })\n    let url = [];\n\n    if (ComboData.value === SampleType.SUBSAMPLE) {\n      const str = rsapi.post(\"dynamicpreregdesign/getDefaultSampleType\", {\n        userinfo: userInfo,\n        nsampletypecode: sampleType.SampleType && sampleType.SampleType.value\n      });\n      url = [str];\n    } else {\n      const str = rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\n        nsubsampletypecode: sampleType.SubSampleType && sampleType.SubSampleType.value,\n        userinfo: userInfo,\n        nsampletypecode: sampleType.SampleType && sampleType.SampleType.value || masterData.selectedSampleType.nsampletypecode,\n        SubSample: String(sampleType.SampleType && sampleType.SampleType.value || masterData.selectedSampleType.nsampletypecode) === '-1' ? true : false\n      });\n      url = [str];\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(url).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: ComboData.value === SampleType.SUBSAMPLE ? { ...masterData,\n            DefaultTemplateList: response[0].data[\"DefaultTemplateList\"],\n            selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\n            selectedSampleType: sampleType.SampleType.item,\n            DefaultSampleTypeList: response[0].data[\"SampleTypeList\"],\n            selectedSampleTypeList: response[0].data[\"selectedSampleTypeList\"] // selectedSampleTypeList:sampleType.item,\n\n          } : { ...masterData,\n            DefaultTemplateList: response[0].data[\"DefaultTemplateList\"],\n            selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\n            selectedSampleTypeList: sampleType.SubSampleType && sampleType.SubSampleType.item,\n            selectedSampleType: sampleType.SampleType && sampleType.SampleType.item || masterData.selectedSampleType\n          },\n          // realSampleType: [{\n          //     \"label\": \"IDS_SAMPLETYPE\",\n          //     \"value\": sampleType.label,\n          //     \"item\": sampleType\n          // }],\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function getDefaultSampleType(sampleType, userInfo, masterData,SampleTypeName,selectedSampleType) {\n//     return function (dispatch) {\n//     let url=[];\n//         if(sampleType.label===\"Sub Sample\"){\n//       const str=  rsapi.post(\"dynamicpreregdesign/getDefaultSampleType\", {\n//             userinfo: userInfo,\n//             nsampletypecode: sampleType.value\n//         })\n//         url=[str];\n//     }else{\n//         const str=  rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\n//             nsubsampletypecode: sampleType.value,\n//             userinfo: userInfo,SubSample:true,nsampletypecode:selectedSampleType.value\n//         })\n//         url=[str];\n//     }\n//     dispatch(initRequest(true));\n//     Axios.all(url)\n//          .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: { masterData: sampleType.label===\"Sub Sample\"?{ ...masterData, \n//                                             DefaultSampleTypeList :response[0].data[\"SampleTypeList\"],\n//                                             selectedSampleTypeList: response[0].data[\"selectedSampleTypeList\"],SampleTypeName,\n//                                             selectedSampleType:sampleType.item,\n//                                             DefaultTemplateList :response[0].data[\"DefaultTemplateList\"],\n//                                             selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\n//                                             //defaultTemplateOptions:[],selectedDefaultTemplate:[],DefaultTemplateList:[]\n//                                             }:{ ...masterData, \n//                                                 DefaultTemplateList :response[0].data[\"DefaultTemplateList\"],\n//                                                 selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\n//                                                 selectedSampleTypeList:sampleType.item,\n//                                                 }, \n//                                 loading: false }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function getRegistrationTemplate(selectedSampleType, selectedDefaultTemplate, masterData, userinfo, selectedDefaultSampleType) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\n      nsampletypecode: selectedSampleType.value,\n      SampleType: selectedSampleType.label,\n      ndefaulttemplatecode: selectedDefaultTemplate.value,\n      userinfo,\n      SubSample: selectedSampleType.label === \"Sub Sample\" ? true : false,\n      nsubsampletypecode: selectedDefaultSampleType.value\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        searchedData: undefined,\n        selectedDefaultTemplate: selectedDefaultTemplate.item\n      };\n      sortData(masterData);\n      let realSampleTypes = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": selectedSampleType.label,\n        \"item\": selectedSampleType\n      }, // realDefaultTemplate: [\n      selectedSampleType.value === SampleType.SUBSAMPLE ? {\n        \"label\": \"IDS_SUBSAMPLEBASEDSAMPLETYPE\",\n        \"value\": selectedDefaultSampleType.label,\n        \"item\": selectedDefaultSampleType\n      } : \"\", {\n        \"label\": \"IDS_TEMPLATETYPE\",\n        \"value\": selectedDefaultTemplate.label,\n        \"item\": selectedDefaultTemplate\n      }];\n      let realSampleType = [];\n      realSampleTypes.map((item, index) => {\n        if (item === \"\") {\n          delete realSampleTypes[index];\n        } else {\n          realSampleType.push(item);\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          realSampleType,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditRegTemplate(masterData, userinfo, editId) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\n      nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\n      userinfo\n    }).then(response => {\n      let jsonData = response.data.jsondata;\n      sortData(masterData);\n      const respObj = {\n        masterData,\n        ncontrolcode: editId,\n        openPortal: true,\n        loading: false,\n        openModal: false,\n        design: jsonData,\n        selectedRecord: {\n          templatename: response.data.sregtemplatename\n        }\n      };\n\n      if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\n        // let jsonData = response.data.jsondata;\n        // sortData(masterData)\n        // const respObj = {\n        //     masterData,\n        //     ncontrolcode: editId,\n        //     openPortal: true,\n        //     loading: false,\n        //     openModal: false,\n        //     design: jsonData,\n        //     selectedRecord: { templateName: response.data.sregtemplatename }\n        // }                \n        dispatch(getReactInputFields(userinfo, \"update\", respObj));\n      } else {\n        dispatch(getReactInputFields(userinfo, \"viewdesign\", respObj)); // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJsonValue(PGjsonData) {\n  if (Array.isArray(PGjsonData)) {\n    let JSONData = [];\n    PGjsonData.map(data => {\n      return JSONData.push(JSON.parse(data.jsondata));\n    });\n    return JSONData;\n  } else {\n    return JSON.parse(PGjsonData);\n  }\n}\nexport function getTableColumns(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"dynamicpreregdesign/getTableColumns\", {\n      \"nquerybuildertablecode\": stablename || 0,\n      userinfo\n    }).then(response => {\n      columnInfo = columnInfo || {};\n      const staicColumns = response.data.jstaticcolumns || [];\n      const dynamicColumns = response.data.jdynamiccolumns || [];\n      const multilingualColumns = response.data.jmultilingualcolumn || [];\n      const numericColumns = response.data.jnumericcolumns || [];\n      const primaryKeyName = response.data.sprimarykeyname;\n      columnInfo = { ...columnInfo,\n        [stablename]: {\n          staicColumns,\n          dynamicColumns,\n          multilingualColumns,\n          numericColumns,\n          primaryKeyName\n        }\n      };\n      let defaultColumn = {};\n      let comboData = [];\n      let filterColumns = []; //  let selectedComponentpath=componentData.selectedComponentpath\n\n      staicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      dynamicColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"dynamic\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"dynamic\",\n            item\n          };\n        }\n      });\n      multilingualColumns.map(item => {\n        comboData.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.columnname,\n          type: \"static\",\n          item\n        });\n\n        if (item.default) {\n          defaultColumn = {\n            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n            value: item.columnname,\n            type: \"static\",\n            item\n          };\n        }\n      });\n      filterColumns = [...comboData];\n      numericColumns.map(item => {\n        filterColumns.push({\n          label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\n          value: item.tablecolumnname,\n          type: \"numeric\",\n          item\n        });\n      });\n\n      if (defaultColumn.item && defaultColumn.item.ismultilingual) {\n        selectedFieldRecord['isMultiLingual'] = true;\n      }\n\n      if (updateComponents) {\n        componentData = componentData || {};\n        selectedFieldRecord = { ...selectedFieldRecord,\n          column: defaultColumn,\n          displaymember: defaultColumn.value,\n          valuemember: primaryKeyName\n        };\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else if (componentData === undefined || componentData.components === undefined) {\n        componentData = componentData || {};\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          let isdefaultColumn = Object.keys(defaultColumn).length > 0 ? true : false;\n          selectedFieldRecord = { ...selectedFieldRecord,\n            filterfields: isdefaultColumn ? [{\n              type: defaultColumn.type,\n              ...defaultColumn.item\n            }] : [],\n            customsearchfilter: isdefaultColumn ? [defaultColumn] : undefined,\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName,\n            kendoFilter: {\n              logic: \"and\",\n              filters: []\n            }\n          };\n        } else {\n          selectedFieldRecord = { ...selectedFieldRecord,\n            column: defaultColumn,\n            displaymember: defaultColumn.value,\n            valuemember: primaryKeyName\n          };\n        }\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      } else {\n        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n        let parentRadioValue = [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.parentPath) {\n            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        }\n\n        componentData = { ...componentData,\n          validComponents,\n          parentRadioValue\n        };\n      }\n\n      columnInfo = { ...columnInfo,\n        [stablename]: { ...columnInfo[stablename],\n          tableColumn: comboData,\n          filterColumns\n        }\n      };\n      let optionalPayload = {\n        selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          // selectedComponentpath,\n          selectedFieldRecord,\n          ...optionalPayload,\n          tableColumn: comboData,\n          filterColumns,\n          columnInfo,\n          primaryKeyName,\n          selectedComponentpath: componentData.path,\n          ...componentData,\n          showFilter: showFilter\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\n  return function (dispatch) {\n    let parentcolumnlist = [{\n      source: selectedFieldRecord.filtercolumn.item.foriegntablename,\n      valuemember: selectedFieldRecord.filtercolumn.item.foriegntablePK,\n      displaymember: selectedFieldRecord.filtercolumn.item.columnname,\n      conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\n      label: \"filterData\",\n      inputtype: \"combo\",\n      isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\n    }];\n    rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist,\n      userinfo\n    }).then(response => {\n      let comboData = [];\n      let selectedRecord = {};\n      const newcomboData = parentChildComboLoad(parentcolumnlist, response.data, selectedRecord, [], [], undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n\n      if (updateComponents) {\n        componentData = componentData || {}; // selectedFieldRecord = { ...selectedFieldRecord };\n\n        design = replaceChildFromChildren(design, path, selectedFieldRecord);\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\n          let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\n          componentData = { ...componentData,\n            validComponents\n          };\n        }\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          design,\n          selectedFieldRecord,\n          masterDataValue: comboData,\n          columnInfo,\n          ...componentData,\n          ...comboData1\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPreviewTemplate(masterData, userinfo, editId, columnList, selectedRecord, childColumnList, comboComponents, withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName, importData) {\n  return function (dispatch) {\n    if (mapOfFilterRegData[\"userInfo\"] === undefined) {\n      mapOfFilterRegData[\"userInfo\"] = userinfo;\n    }\n\n    dispatch(initRequest(true));\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList ? columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true) : [],\n      childcolumnlist: childColumnList ? childColumnList : [],\n      userinfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\n      userinfo\n    });\n    const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo\n    });\n    let siteService = {};\n    let schedulerMasterService = {};\n\n    if (userinfo.nformcode === formCode.SCHEDULERCONFIGURATION) {\n      siteService = rsapi.post(\"schedulerconfiguration/getSiteByUser\", {\n        userinfo\n      });\n      schedulerMasterService = rsapi.post(\"schedulerconfiguration/getSchedulerMaster\", {\n        userinfo\n      });\n    }\n\n    Axios.all([timeZoneService, actualService, dateService, currentDate, siteService, schedulerMasterService]).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(columnList.filter(x => x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter' && x.readonly !== true), response[1].data, selectedRecord, childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo); // sortData(masterData)\n\n      let siteMap = [];\n      let siteList = [];\n      let schedulerMap = [];\n      let schedulerList = [];\n      const comboData1 = newcomboData.comboData;\n      let selectedRecord1 = newcomboData.selectedRecord;\n\n      if (userinfo.nformcode === formCode.SCHEDULERCONFIGURATION) {\n        siteMap = constructOptionList(response[4].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\n        siteList = siteMap.get(\"OptionList\");\n        let SchedulerSite = siteList.filter(item => item.value === userinfo.nsitecode);\n\n        if (SchedulerSite.length > 0) {\n          selectedRecord1 = { ...selectedRecord1,\n            \"SchedulerSite\": SchedulerSite[0]\n          };\n        }\n\n        schedulerMap = constructOptionList(response[5].data.ScheduleMaster || [], \"nschedulecode\", \"sschedulename\", undefined, undefined, true);\n        schedulerList = schedulerMap.get(\"OptionList\");\n      }\n\n      withoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          //  if (componentrow.mandatory) {\n          if (componentrow.loadcurrentdate) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\n\n            if (masterData.selectedTemplate && masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\n              const Age = withoutCombocomponent.filter(item => item.name === \"Age\");\n              selectedRecord[Age[0].label] = ageCalculate(selectedRecord1[componentrow.label]);\n            }\n\n            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\n          } else if (componentrow.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n\n            if (componentrow.loadselecteddate) {\n              selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n            } //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\n            //    new Date(response[2].data[componentrow.label]):null;\n\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          } // }else{\n          //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          // }\n          // if (componentrow.timezone) {\n          //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n          //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n          //         defaulttimezone ? defaulttimezone : -1\n          // }\n\n        } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n          if (componentrow['radiodefaultvalue']) {\n            if (componentrow.inputtype === \"checkbox\") {\n              let val = '';\n              componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n              });\n              selectedRecord1[componentrow.label] = val;\n            } else if (componentrow.inputtype === \"predefineddropdown\") {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n            } else {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n            }\n          } else {\n            if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }\n        }\n      }); //console.log(\"selectedRecord1 action1:\", selectedRecord1);\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            timeZoneList,\n            defaultTimeZone,\n            masterData,\n            ncontrolcode: editId,\n            openModal,\n            loading: false,\n            comboData: comboData1,\n            selectedRecord: selectedRecord1,\n            comboComponents,\n            withoutCombocomponent,\n            openPortal,\n            columnList,\n            childColumnList,\n            screenName,\n            operation: \"preview\",\n            importData,\n            siteList,\n            schedulerList // childOperation:true\n\n          }\n        });\n      } else {\n        if (mapOfFilterRegData.nsampletypecode === SampleType.PRODUCT) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item'] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName,\n                  importData,\n                  siteList,\n                  schedulerList // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName,\n                importData,\n                siteList,\n                schedulerList //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName,\n              importData //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.INSTRUMENT) {\n          const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\n\n          if (InstrumentCategory.length > 0) {\n            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label] && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName,\n                  importData,\n                  siteList,\n                  schedulerList // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Instrument = comboComponents.filter(x => x.name === 'Instrument');\n\n                if (Instrument.length > 0) {\n                  const ninstrumentcode = selectedRecord1[Instrument[0].label] && selectedRecord1[Instrument[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData,\n                    siteList,\n                    schedulerList //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName,\n                importData,\n                siteList,\n                schedulerList // loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName,\n              importData,\n              siteList,\n              schedulerList // loadPreregister:true\n\n            };\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.MATERIAL) {\n          const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\n\n          if (MaterialType.length > 0) {\n            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] && selectedRecord1[MaterialType[0].label].value;\n\n            if (nmaterialtypecode !== undefined) {\n              const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\n\n              if (MaterialCategory.length > 0) {\n                const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label].value;\n                let ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label] && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n                if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n                  ncategorybasedFlow = transactionStatus.YES;\n                }\n\n                if (ncategorybasedFlow !== undefined) {\n                  if (ncategorybasedFlow === transactionStatus.YES) {\n                    mapOfFilterRegData['nproductcode'] = -1;\n                    mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                    const inputParam = {\n                      timeZoneList,\n                      defaultTimeZone,\n                      masterData,\n                      ncontrolcode: editId,\n                      openModal,\n                      comboComponents,\n                      withoutCombocomponent,\n                      openPortal,\n                      columnList,\n                      childColumnList,\n                      operation,\n                      screenName,\n                      importData // loadPreregister:true\n\n                    };\n                    dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                  } else {\n                    const Material = comboComponents.filter(x => x.name === 'Material');\n\n                    if (Material.length > 0) {\n                      const nmaterialcode = selectedRecord1[Material[0].label] && selectedRecord1[Material[0].label].value;\n                      mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\n                      mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName,\n                        importData // loadPreregister:true\n\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    } else {\n                      mapOfFilterRegData['nproductcode'] = -1;\n                      mapOfFilterRegData['nproductcatcode'] = -1;\n                      const inputParam = {\n                        timeZoneList,\n                        defaultTimeZone,\n                        masterData,\n                        ncontrolcode: editId,\n                        openModal,\n                        comboComponents,\n                        withoutCombocomponent,\n                        openPortal,\n                        columnList,\n                        childColumnList,\n                        operation,\n                        screenName,\n                        importData //loadPreregister:true\n\n                      };\n                      dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                    }\n                  }\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              } else {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = -1;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName,\n                  importData //loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              }\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName,\n              importData // loadPreregister:true\n\n            };\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.CLINICALTYPE) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n          const dateComp = withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\n\n          if (dateComp[0].label !== undefined) {\n            const ageComp = withoutCombocomponent.filter(item => item.name === \"Age\");\n            const age = ageCalculate(selectedRecord1[dateComp[0].label]);\n            selectedRecord1[ageComp[0].label] = age;\n          }\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] ? selectedRecord1[ProductCategory[0].label].value : -1;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] ? selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'] : undefined;\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName,\n                  importData // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName,\n                importData //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName,\n              importData //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n          const project = comboComponents.filter(x => x.name === 'Project Code');\n          let nprojectMasterCode = -1;\n\n          if (project && project.length > 0 && mapOfFilterRegData['nprojectSpecReqd'] == transactionStatus.YES) {\n            nprojectMasterCode = selectedRecord1[project[0].label] && selectedRecord1[project[0].label].value;\n          }\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === 3) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName,\n                  importData // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName,\n                importData //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName,\n              importData //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.GOODSIN) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              loading: false,\n              comboData: comboData1,\n              selectedRecord: selectedRecord1,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              screenName,\n              operation,\n              importData\n            }\n          }); //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.PROTOCOL) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              loading: false,\n              comboData: comboData1,\n              selectedRecord: selectedRecord1,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              screenName,\n              operation,\n              importData\n            }\n          });\n        } else if (mapOfFilterRegData.nsampletypecode === SampleType.STABILITY) {\n          const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\n\n          if (ProductCategory.length > 0) {\n            const nproductcatcode = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label].value;\n            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label] && selectedRecord1[ProductCategory[0].label]['item'] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\n\n            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\n              ncategorybasedFlow = transactionStatus.YES;\n            }\n\n            if (ncategorybasedFlow !== undefined) {\n              if (ncategorybasedFlow === transactionStatus.YES) {\n                mapOfFilterRegData['nproductcode'] = -1;\n                mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                mapOfFilterRegData['nsampletypecode'] = SampleType.PRODUCT;\n                const inputParam = {\n                  timeZoneList,\n                  defaultTimeZone,\n                  masterData,\n                  ncontrolcode: editId,\n                  openModal,\n                  comboComponents,\n                  withoutCombocomponent,\n                  openPortal,\n                  columnList,\n                  childColumnList,\n                  operation,\n                  screenName,\n                  importData,\n                  siteList,\n                  schedulerList // loadPreregister:true\n\n                };\n                dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n              } else {\n                const Product = comboComponents.filter(x => x.name === 'Product');\n\n                if (Product.length > 0) {\n                  const nproductcode = selectedRecord1[Product[0].label] && selectedRecord1[Product[0].label].value;\n                  mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\n                  mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData // loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                } else {\n                  mapOfFilterRegData['nproductcode'] = -1;\n                  mapOfFilterRegData['nproductcatcode'] = -1;\n                  const inputParam = {\n                    timeZoneList,\n                    defaultTimeZone,\n                    masterData,\n                    ncontrolcode: editId,\n                    openModal,\n                    comboComponents,\n                    withoutCombocomponent,\n                    openPortal,\n                    columnList,\n                    childColumnList,\n                    operation,\n                    screenName,\n                    importData //loadPreregister:true\n\n                  };\n                  dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n                }\n              }\n            } else {\n              mapOfFilterRegData['nproductcode'] = -1;\n              mapOfFilterRegData['nproductcatcode'] = -1;\n              const inputParam = {\n                timeZoneList,\n                defaultTimeZone,\n                masterData,\n                ncontrolcode: editId,\n                openModal,\n                comboComponents,\n                withoutCombocomponent,\n                openPortal,\n                columnList,\n                childColumnList,\n                operation,\n                screenName,\n                importData,\n                siteList,\n                schedulerList //loadPreregister:true\n\n              };\n              dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n            }\n          } else {\n            mapOfFilterRegData['nproductcode'] = -1;\n            mapOfFilterRegData['nproductcatcode'] = -1;\n            const inputParam = {\n              timeZoneList,\n              defaultTimeZone,\n              masterData,\n              ncontrolcode: editId,\n              openModal,\n              comboComponents,\n              withoutCombocomponent,\n              openPortal,\n              columnList,\n              childColumnList,\n              operation,\n              screenName,\n              importData //loadPreregister:true\n\n            }; //console.log(\"selectedRecord1 action2:\", selectedRecord1);\n\n            dispatch(getTreeByProduct(mapOfFilterRegData, selectedRecord1, newcomboData.comboData, inputParam));\n          }\n        }\n      }\n    }).catch(error => {\n      //console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValues(inputParem, userinfo, selectedRecord, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, productCategory, product, mapOfRegFilterData, instrumentCategory, instrument, materialCategory, material, materialType, subsample, project, comboComponents) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist,\n      isInstrumentScheduler: userinfo.nformcode === formCode.SCHEDULERCONFIGURATION && mapOfRegFilterData.nsampletypecode === 2 && inputParem.primarykeyField === 'ninstrumentcatcode' ? true : false,\n      nregionalsitecode: userinfo.nformcode === formCode.SCHEDULERCONFIGURATION && mapOfRegFilterData.nsampletypecode === 2 && inputParem.primarykeyField === 'ninstrumentcatcode' ? selectedRecord.SchedulerSite.value : -1 // dependedMemberValue:inputParem.parentDataValue\n\n    }).then(response => {\n      let returnObj = { ...comboData,\n        ...response.data\n      }; // ALPD-3793 \n\n      if (mapOfRegFilterData == undefined) {\n        mapOfRegFilterData = {};\n      } // ALPD-3673 VISHAKH\n\n\n      mapOfRegFilterData[\"userInfo\"] = userinfo;\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedRecord, childcolumnlist, withoutCombocomponent, inputParem, userinfo.slanguagetypecode, userinfo, comboComponents);\n      selectedRecord = { ...selectedRecord,\n        ...returnObj.selectedRecord\n      };\n\n      if (subsample) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            SubSamplecomboData: { ...returnObj.comboData\n            },\n            selectComponent: selectedRecord,\n            screenName: inputParem.screenName,\n            selectedMaster: [],\n            addMaster: false,\n            selectedControl: [],\n            masterComboColumnFiled: [],\n            masterDesign: [],\n            masterextractedColumnList: [],\n            masterfieldList: [],\n            masterdataList: [],\n            mastercomboComponents: [],\n            masterwithoutCombocomponent: [],\n            masterIndex: undefined,\n            loadCustomSearchFilter: false\n          }\n        });\n      } // else if (childSpec) {\n      //     if (mapOfRegFilterData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && mapOfRegFilterData.nprojectSpecReqd === 3) {\n      //     }\n      //     else if (mapOfRegFilterData.nsampletypecode === SampleType.CLINICALTYPE) {\n      //         if (mapOfRegFilterData.childSpecBasedAddMaster\n      //             && mapOfRegFilterData.childSpecBasedAddMaster) {\n      //             if (mapOfRegFilterData.ProductCategory[0]\n      //                 && selectedRecord[mapOfRegFilterData.ProductCategory[0].label]===undefined) {\n      //                 selectedRecord[mapOfRegFilterData.ProductCategory[0].label]=returnObj[mapOfRegFilterData.ProductCategory[0].label]&&returnObj[mapOfRegFilterData.ProductCategory[0].label][0]\n      //             }\n      //             const label = mapOfRegFilterData.ProductCategory[0].label\n      //             let ncategorybasedflow = selectedRecord[label] &&\n      //                 selectedRecord[label]['item']['jsondata']['ncategorybasedflow'];\n      //             if (ncategorybasedflow === transactionStatus.YES) {\n      //                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[label].value\n      //                 mapOfRegFilterData['nproductcode'] = -1\n      //                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //             }\n      //         }\n      //         else if (mapOfRegFilterData.ProductCategory && mapOfRegFilterData.ProductCategory[0]\n      //             && selectedRecord[mapOfRegFilterData.ProductCategory[0].label]) {\n      //             const label = mapOfRegFilterData.ProductCategory[0].label\n      //             let ncategorybasedflow = selectedRecord[label] &&\n      //                 selectedRecord[label]['item']['jsondata']['ncategorybasedflow'];\n      //             if (ncategorybasedflow === transactionStatus.YES) {\n      //                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[label].value\n      //                 mapOfRegFilterData['nproductcode'] = -1\n      //                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //             }\n      //             else {\n      //                 if (mapOfRegFilterData.ProductCategory[0].child && mapOfRegFilterData.ProductCategory[0].child) {\n      //                     let pt = []\n      //                     mapOfRegFilterData.ProductCategory[0].child.map(x =>\n      //                         pt = comboComponents1.filter(y => y.label === x.label && y.name === 'Product')\n      //                     )\n      //                     if (pt.length > 0) {\n      //                         if (pt && pt[0]) {\n      //                             const pclabel = mapOfRegFilterData.ProductCategory[0].label\n      //                             const label = pt[0].label\n      //                             if (selectedRecord[pclabel] && selectedRecord[pclabel].value &&\n      //                                 selectedRecord[label] && selectedRecord[label].value) {\n      //                                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[pclabel].value\n      //                                 mapOfRegFilterData['nproductcode'] = selectedRecord[label].value\n      //                                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //                             }\n      //                         }\n      //                     }\n      //                 }\n      //             }\n      //         } else if (mapOfRegFilterData.childSpec && mapOfRegFilterData.childSpec) {\n      //             if (selectedRecord[inputParem.label] && selectedRecord[inputParem.label]) {\n      //                 const TemplateChild = parentcolumnlist && parentcolumnlist.filter(x => x.child && x.child.length > 0)\n      //                 if (TemplateChild && TemplateChild.length > 0) {\n      //                     let pc = {}\n      //                     TemplateChild.map(x => {\n      //                         x.child && x.child.map(y => {\n      //                             const data = comboComponents1.filter(x => x.label === y.label)\n      //                             if (data && data[0].templatemandatory) {\n      //                                 const name = data[0].name\n      //                                 if (name === \"Product Category\") {\n      //                                     pc = data[0]\n      //                                 }\n      //                             }\n      //                         })\n      //                     })\n      //                     if (pc && pc.label) {\n      //                         if (selectedRecord[pc.label]\n      //                             && selectedRecord[pc.label].value) {\n      //                             let ncategorybasedflow = selectedRecord[pc.label] &&\n      //                                 selectedRecord[pc.label]['item']['jsondata']['ncategorybasedflow'];\n      //                             if (ncategorybasedflow === transactionStatus.YES) {\n      //                                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[pc.label].value\n      //                                 mapOfRegFilterData['nproductcode'] = -1\n      //                                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //                             } else {\n      //                                 if (pc.child && pc.child > 0) {\n      //                                     let pt = []\n      //                                     pc.child.map(x =>\n      //                                         pt = comboComponents1.filter(y => y.label === x.label && y.name === 'Product')\n      //                                     )\n      //                                     if (pt.length > 0) {\n      //                                         if (selectedRecord[pt[0].label] && selectedRecord[pt[0].label].value) {\n      //                                             mapOfRegFilterData['nproductcatcode'] = selectedRecord[pc.label].value\n      //                                             mapOfRegFilterData['nproductcode'] = selectedRecord[pt[0].label].value\n      //                                             dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\n      //                                         }\n      //                                     }\n      //                                 }\n      //                             }\n      //                         }\n      //                     }\n      //                 } else {\n      //                     selectedRecord[\"nallottedspeccode\"] = \"\"\n      //                     selectedRecord[\"sversion\"] = \"\"\n      //                     dispatch({\n      //                         type: DEFAULT_RETURN,\n      //                         payload: {\n      //                             loading: false,\n      //                             comboData: { ...returnObj.comboData },\n      //                             selectedRecord,\n      //                             AgaramTree: [],\n      //                             ActiveKey: [],\n      //                             FocusKey: [],\n      //                             OpenNodes: [],\n      //                             Test: [],\n      //                             SelectedTest: [],\n      //                             selectedSpec: {},\n      //                             Component: [],\n      //                             selectComponent: {},\n      //                             selectedComponent: {},\n      //                             Specification: [],\n      //                             selectedMaster: [],\n      //                             subSampleDataGridList: []\n      //                         }\n      //                     })\n      //                 }\n      //             } else {\n      //                 selectedRecord[\"nallottedspeccode\"] = \"\"\n      //                 selectedRecord[\"sversion\"] = \"\"\n      //                 dispatch({\n      //                     type: DEFAULT_RETURN,\n      //                     payload: {\n      //                         loading: false,\n      //                         comboData: { ...returnObj.comboData },\n      //                         selectedRecord,\n      //                         AgaramTree: [],\n      //                         ActiveKey: [],\n      //                         FocusKey: [],\n      //                         OpenNodes: [],\n      //                         Test: [],\n      //                         SelectedTest: [],\n      //                         selectedSpec: {},\n      //                         Component: [],\n      //                         selectComponent: {},\n      //                         selectedComponent: {},\n      //                         Specification: [],\n      //                         selectedMaster: [],\n      //                         subSampleDataGridList: []\n      //                     }\n      //                 })\n      //             }\n      //         }\n      //         else {\n      //             selectedRecord[\"nallottedspeccode\"] = \"\"\n      //             selectedRecord[\"sversion\"] = \"\"\n      //             dispatch({\n      //                 type: DEFAULT_RETURN,\n      //                 payload: {\n      //                     loading: false,\n      //                     comboData: { ...returnObj.comboData },\n      //                     selectedRecord,\n      //                     AgaramTree: [],\n      //                     ActiveKey: [],\n      //                     FocusKey: [],\n      //                     OpenNodes: [],\n      //                     Test: [],\n      //                     SelectedTest: [],\n      //                     selectedSpec: {},\n      //                     Component: [],\n      //                     selectComponent: {},\n      //                     selectedComponent: {},\n      //                     Specification: [],\n      //                     selectedMaster: [],\n      //                     subSampleDataGridList: []\n      //                 }\n      //             })\n      //         }\n      //     }\n      // }\n      else if (project) {\n        //console.log(\"data:\", mapOfRegFilterData, selectedRecord );\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (productCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (product) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              subSampleDataGridList: []\n            }\n          });\n        }\n      } else if (instrumentCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (materialCategory) {\n        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n        }));\n      } else if (instrument) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument Name\" ? inputParem.label : inputParem.InstrumentName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument Name\" ? inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument Name\" ? inputParem.label : inputParem.InstrumentName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else if (material) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\n          mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1;\n          dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n          }));\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else if (materialType) {\n        if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\n          const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label] : undefined; //  mapOfRegFilterData[\"nproductcatcode\"]\n\n          if (productCategory !== undefined) {\n            if (productCategory.item.ncategorybasedflow === 3 || productCategory.item.jsondata && productCategory.item.jsondata.ncategorybasedflow === 3) {\n              mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n              mapOfRegFilterData[\"nproductcode\"] = -1;\n              dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n              }));\n            } else {\n              const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n              if (product !== undefined) {\n                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                mapOfRegFilterData[\"nproductcode\"] = product.value;\n                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                }));\n              } else {\n                const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ? inputParem.MaterialName : inputParem.label] : undefined;\n\n                if (product !== undefined) {\n                  mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value;\n                  mapOfRegFilterData[\"nproductcode\"] = product.value;\n                  dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n                  }));\n                } else {\n                  selectedRecord[\"nallottedspeccode\"] = \"\";\n                  selectedRecord[\"sversion\"] = \"\";\n                  dispatch({\n                    type: DEFAULT_RETURN,\n                    payload: {\n                      loading: false,\n                      comboData: { ...returnObj.comboData\n                      },\n                      selectedRecord,\n                      AgaramTree: [],\n                      ActiveKey: [],\n                      FocusKey: [],\n                      OpenNodes: [],\n                      Test: [],\n                      SelectedTest: [],\n                      selectedSpec: {},\n                      Component: [],\n                      selectComponent: {},\n                      selectedComponent: {},\n                      Specification: [],\n                      selectedMaster: [],\n                      addMaster: false\n                    }\n                  });\n                }\n              }\n            }\n          } else {\n            selectedRecord[\"nallottedspeccode\"] = \"\";\n            selectedRecord[\"sversion\"] = \"\";\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                comboData: { ...returnObj.comboData\n                },\n                selectedRecord,\n                AgaramTree: [],\n                ActiveKey: [],\n                FocusKey: [],\n                OpenNodes: [],\n                Test: [],\n                SelectedTest: [],\n                selectedSpec: {},\n                Component: [],\n                selectComponent: {},\n                selectedComponent: {},\n                Specification: [],\n                selectedMaster: [],\n                addMaster: false\n              }\n            });\n          }\n        } else {\n          selectedRecord[\"nallottedspeccode\"] = \"\";\n          selectedRecord[\"sversion\"] = \"\";\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              AgaramTree: [],\n              ActiveKey: [],\n              FocusKey: [],\n              OpenNodes: [],\n              Test: [],\n              SelectedTest: [],\n              selectedSpec: {},\n              Component: [],\n              selectComponent: {},\n              selectedComponent: {},\n              Specification: [],\n              selectedMaster: [],\n              addMaster: false\n            }\n          });\n        }\n      } else {\n        let productCategory = false;\n        let map = {};\n\n        if (userinfo.nformcode === 43) {\n          if (mapOfRegFilterData.nsampletypecode === SampleType.CLINICALTYPE || mapOfRegFilterData.nsampletypecode === SampleType.PRODUCT) {\n            if (inputParem.child && inputParem.child.length > 0) {\n              inputParem.child.map(y => {\n                const indexTemplateMandatory = parentcolumnlist.findIndex(z => z.label === y.label && z.templatemandatory && (z.name === 'Product Category' || z.name === 'Product'));\n\n                if (indexTemplateMandatory !== -1) {\n                  const templateManRecord = parentcolumnlist[indexTemplateMandatory]; //  if (inputParem.nsampletypecode === SampleType.CLINICALTYPE) {\n\n                  if (templateManRecord.name === 'Product Category') {\n                    productCategory = true;\n\n                    if (selectedRecord[templateManRecord.label]) {\n                      map = {\n                        nproductcatcode: selectedRecord[templateManRecord.label].value,\n                        nproductcode: map.nproductcode || -1\n                      };\n                    }\n                  } else if (templateManRecord.name === 'Product') {\n                    productCategory = true;\n\n                    if (selectedRecord[templateManRecord.label]) {\n                      map = {\n                        nproductcatcode: map.nproductcatcode || -1,\n                        nproductcode: selectedRecord[templateManRecord.label].value\n                      };\n                    }\n                  } else {\n                    map = {\n                      nproductcatcode: -1,\n                      nproductcode: -1\n                    };\n                  } //  }\n\n                } else {\n                  const indexTemplateMandatory = parentcolumnlist.findIndex(z => z.label === y.label);\n\n                  if (indexTemplateMandatory !== -1) {\n                    const templateManRecord = parentcolumnlist[indexTemplateMandatory];\n\n                    if (templateManRecord.child && templateManRecord.child.length > 0) {\n                      const val = childSpecLoadCheck(templateManRecord, childcolumnlist, productCategory, map, y.label, selectedRecord);\n\n                      if (val.productCategory) {\n                        productCategory = val.productCategory;\n                        map = { ...map,\n                          ...val.map\n                        };\n                      }\n                    }\n                  }\n                }\n              });\n            }\n\n            if (productCategory) {\n              //ALPD-5678--Added by Vignesh R(10-04-2025)-->Sample Registration --> In Etica clinical type --> default spec is loaded.\n              mapOfRegFilterData = { ...mapOfRegFilterData,\n                nproductcatcode: map.nproductcatcode,\n                nproductcode: map.nproductcode\n              };\n              dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData\n              }, inputParem));\n            } else {\n              dispatch({\n                type: DEFAULT_RETURN,\n                payload: {\n                  loading: false,\n                  comboData: { ...returnObj.comboData\n                  },\n                  selectedRecord,\n                  selectedMaster: [],\n                  addMaster: false,\n                  selectedControl: [],\n                  masterComboColumnFiled: [],\n                  masterDesign: [],\n                  masterextractedColumnList: [],\n                  masterfieldList: [],\n                  masterdataList: [],\n                  mastercomboComponents: [],\n                  masterwithoutCombocomponent: [],\n                  masterIndex: undefined,\n                  screenName: inputParem.screenName,\n                  loadCustomSearchFilter: false\n                }\n              });\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                comboData: { ...returnObj.comboData\n                },\n                selectedRecord,\n                selectedMaster: [],\n                addMaster: false,\n                selectedControl: [],\n                masterComboColumnFiled: [],\n                masterDesign: [],\n                masterextractedColumnList: [],\n                masterfieldList: [],\n                masterdataList: [],\n                mastercomboComponents: [],\n                masterwithoutCombocomponent: [],\n                masterIndex: undefined,\n                screenName: inputParem.screenName,\n                loadCustomSearchFilter: false\n              }\n            });\n          }\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false,\n              comboData: { ...returnObj.comboData\n              },\n              selectedRecord,\n              selectedMaster: [],\n              addMaster: false,\n              selectedControl: [],\n              masterComboColumnFiled: [],\n              masterDesign: [],\n              masterextractedColumnList: [],\n              masterfieldList: [],\n              masterdataList: [],\n              mastercomboComponents: [],\n              masterwithoutCombocomponent: [],\n              masterIndex: undefined,\n              screenName: inputParem.screenName,\n              loadCustomSearchFilter: false\n            }\n          });\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validatePreview(inputParam) {\n  return function (dispatch) {\n    rsapi.post(\"dynamicpreregdesign/validatePreview\", { ...inputParam\n    }).then(response => {\n      if (response.data.rtn === \"Success\") {\n        toast.info(intl.formatMessage({\n          id: \"IDS_SUCCESSFULLYVALIDATE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        toast.warn(response.data.rtn);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showConfirmAlert: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addMasterRecord(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      const formData = inputParam.formData;\n      formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\n    } else {\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n      });\n    }\n\n    return requestUrl.then(response => {\n      if (response.status === 202) {\n        //HttpStatus:Accepted\n        //Use this block when u need to display any success message\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.success(response.data);\n      } else if (response.status === 208) {\n        //HttpStatus:Accepted\n        //208-Already Reported\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(response.data);\n      } else {\n        let masterIndex = inputParam.masterIndex;\n        let data = [];\n        const data1 = sortData(response.data);\n\n        if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\n          data = constructOptionList(data1.DynamicMasterData, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n        } else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n          if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter' || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\n            data = [{\n              label: data1.SelectedPatient[inputParam.selectedControl[masterIndex].displaymember],\n              value: data1.SelectedPatient[inputParam.selectedControl[masterIndex].valuemember],\n              item: data1.SelectedPatient\n            }];\n          } else {\n            data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n          }\n        } else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\n          if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter' || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\n            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\n            data = [{\n              label: data1.ExternalOrder[inputParam.selectedControl[masterIndex].displaymember],\n              value: data1.ExternalOrder[inputParam.selectedControl[masterIndex].valuemember],\n              item: data1.ExternalOrder\n            }];\n          } else {\n            data = constructOptionList(data1.ExternalOrder, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n          }\n        } else {\n          data = constructOptionList(data1, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\");\n        }\n\n        const newdata = data.map((item1, index) => {\n          item1 = { ...item1,\n            item: {\n              jsondata: { ...item1.item,\n                jsondata: { ...item1.item\n                }\n              }\n            }\n          };\n          return item1;\n        });\n\n        if (masterIndex === 0) {\n          const selectedRecord = inputParam.selectedRecord || {};\n          const selectedControl = inputParam.selectedControl || {};\n          let comboData1 = {};\n\n          if (inputParam.operation === 'create') {\n            comboData1 = { ...newdata[0],\n              item: { ...newdata[0].item,\n                \"pkey\": selectedControl[masterIndex].valuemember,\n                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n                \"source\": selectedControl[masterIndex].source\n              }\n            };\n          } else {\n            const value = inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic' ? inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode : inputParam.masterEditObject[masterIndex].value;\n            let combodata = [];\n\n            if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\n              combodata = newdata.filter(x => x.item.jsondata.ndynamicmastercode === value);\n            } else {\n              combodata = newdata.filter(x => x.value === value);\n            }\n\n            comboData1 = { ...combodata[0],\n              item: { ...combodata[0].item,\n                \"pkey\": selectedControl[masterIndex].valuemember,\n                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n                \"source\": selectedControl[masterIndex].source\n              }\n            };\n          }\n\n          selectedRecord[selectedControl[masterIndex].label] = comboData1;\n\n          if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n            selectedRecord['spatientid'] = comboData1.item['jsondata']['spatientid'];\n          }\n\n          if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\n            selectedRecord['nexternalordercode'] = comboData1.item['nexternalordercode'];\n          }\n\n          const comboData = inputParam.comboData;\n          comboData[selectedControl[masterIndex].label] = newdata;\n\n          if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\n            const childComboList = getSameRecordFromTwoArrays(inputParam.comboComponents, selectedControl[masterIndex].child, \"label\");\n            let childColumnList = {};\n            childComboList.map(columnList => {\n              const val = comboChild(inputParam.comboComponents, columnList, childColumnList, false);\n              childColumnList = val.childColumnList;\n            });\n            const parentList = getSameRecordFromTwoArrays(inputParam.withoutCombocomponent, selectedControl[masterIndex].child, \"label\");\n            const inputParem = {\n              child: selectedControl[masterIndex].child,\n              source: selectedControl[masterIndex].source,\n              primarykeyField: selectedControl[masterIndex].valuemember,\n              value: comboData1.value,\n              item: comboData1.item,\n              screenName: inputParam.screenName,\n              nsampletypecode: inputParam.nsampletypecode ? inputParam.nsampletypecode : -1,\n              loginProps: inputParam.loginProps,\n              //ALPD-5678--Added by Vignesh R(10-04-2025)-->Sample Registration --> In Etica clinical type --> default spec is loaded.\n              ntestgroupspecrequired: inputParam.ntestgroupspecrequired\n            };\n\n            if (inputParam.loadSubSample) {\n              dispatch(getChildValues(inputParem, inputParam.inputData.userinfo, selectedRecord, comboData, childComboList, childColumnList, inputParam.withoutCombocomponent, [...childComboList, ...parentList], false, false, {\n                ntestgroupspecrequired: inputParem.ntestgroupspecrequired\n              }, false, false, false, false, false, true, false));\n            } else {\n              dispatch(getChildValues(inputParem, inputParam.inputData.userinfo, selectedRecord, comboData, childComboList, childColumnList, inputParam.withoutCombocomponent, [...childComboList, ...parentList], false, false, inputParam.nsampletypecode === 5 ? {\n                nportalrequired: inputParam.nportalrequired && inputParam.nportalrequired,\n                nsampletypecode: inputParam.nsampletypecode,\n                nneedsubsample: inputParam.nneedsubsample,\n                ntestgroupspecrequired: inputParem.ntestgroupspecrequired\n              } : {}, false, false, false, false, false, false, false, inputParam.comboComponents));\n            }\n          } else {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false,\n                addMaster: false,\n                [inputParam.comboName]: comboData,\n                selectedMaster: [],\n                [inputParam.selectedRecordName]: selectedRecord,\n                screenName: inputParam.screenName,\n                masterIndex: undefined,\n                mastercomboComponents: [],\n                masterwithoutCombocomponent: [],\n                masterComboColumnFiled: [],\n                masterextractedColumnList: [],\n                masterdataList: [],\n                masterDesign: [],\n                masterfieldList: [],\n                masterOperation: [],\n                masterEditObject: []\n              }\n            });\n          }\n        } else {\n          let selectedMaster = inputParam.selectedMaster || [];\n          let selectedControl = inputParam.selectedControl || [];\n          let comboData1 = {};\n\n          if (inputParam.operation === 'create') {\n            comboData1 = { ...newdata[0],\n              item: { ...newdata[0].item,\n                \"pkey\": selectedControl[masterIndex].valuemember,\n                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n                \"source\": selectedControl[masterIndex].source\n              }\n            };\n          } else {\n            const value = inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic' ? inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode : inputParam.masterEditObject[masterIndex].value;\n            let combodata = [];\n\n            if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\n              combodata = newdata.filter(x => x.item.jsondata.ndynamicmastercode === value);\n            } else {\n              combodata = newdata.filter(x => x.value === value);\n            }\n\n            comboData1 = { ...combodata[0],\n              item: { ...combodata[0].item,\n                \"pkey\": selectedControl[masterIndex].valuemember,\n                \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\n                \"source\": selectedControl[masterIndex].source\n              }\n            };\n          }\n\n          selectedMaster[masterIndex - 1][selectedControl[masterIndex].label] = comboData1; // const comboData = inputParam.comboData\n          // comboData[selectedControl[masterIndex].label] = newdata\n\n          let masterdataList = inputParam.masterdataList || [];\n          masterdataList[masterIndex - 1] = { ...masterdataList[masterIndex - 1],\n            [selectedControl[masterIndex].label]: newdata\n          };\n\n          if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\n            const childComboList = getSameRecordFromTwoArrays(inputParam.mastercomboComponents[masterIndex - 1], selectedControl[masterIndex].child, \"label\");\n            let childColumnList = {};\n            childComboList.map(columnList => {\n              const val = comboChild(inputParam.mastercomboComponents[masterIndex - 1], columnList, childColumnList, false);\n              childColumnList = val.childColumnList;\n            });\n            const parentList = getSameRecordFromTwoArrays(inputParam.masterwithoutCombocomponent[masterIndex - 1], selectedControl[masterIndex].child, \"label\");\n            const inputParem = {\n              child: selectedControl[masterIndex].child,\n              source: selectedControl[masterIndex].source,\n              primarykeyField: selectedControl[masterIndex].valuemember,\n              value: comboData1.value,\n              item: comboData1.item,\n              screenName: inputParam.screenName\n            };\n            dispatch(getChildValuesForMasterAdd(inputParem, inputParam.inputData.userinfo, selectedMaster, inputParam.masterdataList, childComboList, childColumnList, inputParam.masterwithoutCombocomponent, [...childComboList, ...parentList], masterIndex, inputParam));\n          } else {\n            selectedControl = selectedControl && removeIndex(selectedControl, masterIndex);\n            selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex);\n            const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex);\n            const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex);\n            const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex);\n            const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex);\n            masterdataList = masterdataList && removeIndex(masterdataList, masterIndex);\n            const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex);\n            const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex);\n            const masterOperation = inputParam.masterOperation && removeIndex(inputParam.masterOperation, masterIndex);\n            const masterEditObject = inputParam.masterEditObject && removeIndex(inputParam.masterEditObject, masterIndex);\n            const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode];\n            masterIndex = parseInt(masterIndex) - 1;\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                selectedControl,\n                selectedMaster,\n                mastercomboComponents,\n                masterwithoutCombocomponent,\n                masterComboColumnFiled,\n                masterextractedColumnList,\n                masterdataList,\n                masterDesign,\n                masterfieldList,\n                masterOperation,\n                masterEditObject,\n                loading: false,\n                // addMaster: false,\n                // masterdataList,\n                // selectedMaster: {},\n                //  selectedMaster: selectedMaster,\n                screenName,\n                masterIndex\n              }\n            });\n          }\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function removeIndex(data, removeIndex) {\n//     const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\n//     return data1\n// }\n\nexport function getAddMasterCombo(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let masterIndex = inputParam.masterIndex;\n    inputParam.masterComboColumnFiled[masterIndex].map(item => {\n      if (item.needService === undefined) {\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          userinfo: inputParam.userinfo\n        }));\n        item[\"fetchIndex\"] = urlArray.length - 1;\n      }\n    });\n\n    if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n      urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: inputParam.userinfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      let ComboFieldData = [];\n      let masterdataList = inputParam.masterdataList;\n      inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\n        if (item.needService === undefined) {\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\"); //selectedMaster[masterIndex][item.dataField] = ComboFieldData.get(\"DefaultValue\");\n        } else {\n          if (item.child !== undefined) {\n            masterdataList[masterIndex][item.dataField] = [];\n          } else if (item.useService !== undefined) {\n            masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField];\n          }\n        }\n      });\n      let currentTime = '';\n      let selectedMaster = inputParam.selectedMaster || [];\n\n      if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n        //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\n        currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n        selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n        selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"]);\n        selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\n        selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterIndex,\n          selectedMaster,\n          masterdataList,\n          addMaster: true,\n          loading: false,\n          selectedControl: inputParam.selectedControl,\n          masterfieldList: inputParam.masterfieldList,\n          masterextractedColumnList: inputParam.masterextractedColumnList,\n          masterprimaryKeyField: inputParam.masterprimaryKeyField,\n          masterComboColumnFiled: inputParam.masterComboColumnFiled,\n          screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n          mastercomboComponents: inputParam.mastercomboComponents,\n          masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n          masterDesign: inputParam.masterDesign,\n          masterOperation: inputParam.masterOperation\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDynamicMasterTempalte(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const masterIndex = inputParam.masterIndex;\n    rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getMasterDesign\", {\n      userinfo: { ...inputParam.userinfo,\n        nformcode: inputParam.selectedControl[inputParam.masterIndex].table.item.nformcode\n      }\n    }).then(response => {\n      const design = response.data;\n      const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent || [];\n      let data = inputParam.masterdesignData || [];\n      const masterextractedColumnList = inputParam.masterextractedColumnList || []; //masterwithoutCombocomponent[masterIndex] = []\n      // masterextractedColumnList[masterIndex] = []\n\n      data[masterIndex] = [];\n      design.slideoutdesign.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.hasOwnProperty(\"children\")) {\n              component.children.map(componentrow => {\n                if (componentrow.inputtype === \"combo\") {\n                  data[masterIndex].push(componentrow);\n                } else {\n                  masterwithoutCombocomponent[masterIndex].push(componentrow);\n                }\n\n                if (componentrow.mandatory === true) {\n                  if (componentrow.inputtype === \"email\") {\n                    masterextractedColumnList[masterIndex].push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"alertPreFix\": this.props.intl.formatMessage({\n                        id: \"IDS_VALID\"\n                      }),\n                      \"validateFunction\": validateEmail,\n                      \"mandatoryLabel\": \"IDS_ENTER\",\n                      \"controlType\": \"textbox\"\n                    });\n                  } else {\n                    masterextractedColumnList[masterIndex].push({\n                      \"mandatory\": true,\n                      \"idsName\": componentrow.label,\n                      \"dataField\": componentrow.label,\n                      \"mandatoryLabel\": componentrow.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                      \"controlType\": componentrow.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                    });\n                  }\n                }\n              });\n            } else {\n              component.inputtype === \"combo\" ? data[masterIndex].push(component) : masterwithoutCombocomponent[masterIndex].push(component);\n\n              if (component.mandatory === true) {\n                if (component.inputtype === \"email\") {\n                  masterextractedColumnList[masterIndex].push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"alertPreFix\": this.props.intl.formatMessage({\n                      id: \"IDS_VALID\"\n                    }),\n                    \"validateFunction\": validateEmail,\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"textbox\"\n                  });\n                } else {\n                  masterextractedColumnList[masterIndex].push({\n                    \"mandatory\": true,\n                    \"idsName\": component.label,\n                    \"dataField\": component.label,\n                    \"mandatoryLabel\": component.inputtype === \"combo\" ? \"IDS_SELECT\" : \"IDS_ENTER\",\n                    \"controlType\": component.inputtype === \"combo\" ? \"selectbox\" : \"textbox\"\n                  });\n                }\n              }\n            }\n          });\n        });\n      });\n      const comboComponents = inputParam.mastercomboComponents || [];\n      comboComponents[masterIndex] = data[masterIndex];\n      let childColumnList = {};\n      data[masterIndex].map(columnList => {\n        const val = comboChild(data[masterIndex], columnList, childColumnList, true);\n        data[masterIndex] = val.data;\n        childColumnList = val.childColumnList;\n      });\n      const masterdesignData = inputParam.masterdesignData || [];\n      masterdesignData[masterIndex] = [...data[masterIndex]];\n      const masterDesign = inputParam.masterDesign || [];\n      masterDesign[masterIndex] = design;\n      inputParam = { ...inputParam,\n        masterchildColumnList: childColumnList,\n        mastercomboComponents: comboComponents,\n        masterextractedColumnList,\n        masterwithoutCombocomponent,\n        masterDesign,\n        masterdesignData,\n        masterOperation: inputParam.masterOperation\n      };\n\n      if (inputParam.masterOperation[masterIndex] === 'create') {\n        dispatch(getDynamicMasterComboForAdd(inputParam, true));\n      } else {\n        dispatch(getEditMasterCombo(inputParam));\n      }\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getDynamicMasterComboForAdd(inputParam, preview) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const masterIndex = inputParam.masterIndex;\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: inputParam.masterdesignData[masterIndex],\n      childcolumnlist: inputParam.masterchildColumnList,\n      userinfo: inputParam.userinfo\n    });\n    const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\n      datecolumnlist: inputParam.masterwithoutCombocomponent[masterIndex].filter(x => x.inputtype === \"date\"),\n      userinfo: inputParam.userinfo\n    });\n    let urlArray = [timeZoneService, actualService, dateService];\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: inputParam.userinfo.stimezoneid,\n        value: inputParam.userinfo.ntimezonecode\n      };\n      let selectedMaster = inputParam.selectedMaster || [];\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      const newcomboData = parentChildComboLoad(inputParam.masterdesignData[masterIndex], response[1].data, selectedMaster[masterIndex], inputParam.masterchildColumnList, inputParam.masterwithoutCombocomponent[masterIndex], undefined, inputParam.userinfo.slanguagetypecode, inputParam.userinfo);\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      inputParam.masterwithoutCombocomponent[masterIndex].map(componentrow => {\n        if (componentrow.inputtype === 'date') {\n          selectedRecord1[selectedRecord1.label] = selectedRecord1[selectedRecord1.label] && selectedRecord1[componentrow.label] !== '-' ? rearrangeDateFormat(inputParam.userinfo, selectedRecord1[componentrow.label]) : \"\";\n\n          if (selectedRecord1.nperiodcode) {\n            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ? new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\n          } else {\n            selectedRecord1[componentrow.label + \"value\"] = new Date();\n          }\n\n          if (componentrow.hidebeforedate) {\n            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n\n          if (componentrow.hideafterdate) {\n            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"];\n          }\n        } else if (componentrow.inputtype === \"radio\" || componentrow.inputtype === \"checkbox\" || componentrow.inputtype === \"predefineddropdown\") {\n          if (componentrow['radiodefaultvalue']) {\n            if (componentrow.inputtype === \"checkbox\") {\n              let val = '';\n              componentrow.radiodefaultvalue && componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\n                val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',');\n              });\n              selectedRecord1[componentrow.label] = val;\n            } else if (componentrow.inputtype === \"predefineddropdown\") {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue : \"\";\n            } else {\n              selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ? componentrow.radiodefaultvalue.label : \"\";\n            }\n          } else {\n            if (componentrow.inputtype === \"radio\") {\n              selectedRecord1[componentrow.label] = componentrow.radioOptions ? componentrow.radioOptions.tags[0].text : \"\";\n            }\n          }\n        }\n      }); //const masterchildColumnList=inputParam.masterchildColumnList || []\n      // masterchildColumnList[masterIndex] = comboData1\n\n      const masterdataList = inputParam.masterdataList || [];\n      masterdataList[masterIndex] = comboData1;\n      selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n        selectedRecord1\n      };\n\n      if (preview) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...inputParam,\n            mastertimeZoneList: timeZoneList,\n            masterdefaultTimeZone: defaultTimeZone,\n            loading: false,\n            addMaster: true,\n            masterdataList,\n            selectedMaster,\n            mastercomboComponents: inputParam.mastercomboComponents,\n            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n            masterdesignData: inputParam.masterdesignData,\n            masterIndex,\n            // masterchildColumnList: inputParam.masterchildColumnList,\n            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode] // operation: inputParam.masterOperation[masterIndex],\n\n          }\n        });\n      }\n    }).catch(error => {\n      // console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildValuesForAddMaster(inputParam, userinfo, selectedMaster, comboData, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParam.child,\n      parentdata: inputParam.item.jsondata,\n      parentsource: inputParam.source,\n      [inputParam.primarykeyField]: inputParam.value,\n      valuemember: inputParam.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...comboData[masterIndex],\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex], childcolumnlist, withoutCombocomponent[masterIndex], inputParam, userinfo.slanguagetypecode, userinfo);\n      selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n        ...returnObj.selectedRecord\n      };\n      const masterdataList = comboData || [];\n      masterdataList[masterIndex] = returnObj.comboData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          masterdataList,\n          selectedMaster\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getChildComboMaster(selectedMaster, filedName, item, selectedControl, masterComboColumnFiled, masterdataList, userInfo, masterIndex) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const obj = masterComboColumnFiled[masterIndex][item.childIndex];\n\n    if (obj.ismutipleparent) {\n      let inputData = {\n        [item.foreignDataField]: selectedMaster[masterIndex][item.tableDataField],\n        [obj.parentMutipleTableDataField]: selectedMaster[masterIndex][obj.parentMutipleTableDataField]\n      };\n      urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, { ...inputData,\n        userinfo: userInfo\n      }));\n    } else {\n      urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, {\n        [item.foreignDataField]: selectedMaster[masterIndex][item.tableDataField],\n        userinfo: userInfo\n      }));\n    }\n\n    Axios.all(urlArray).then(response => {\n      selectedMaster[masterIndex][obj.dataField] = undefined;\n      const ComboFieldData = constructOptionList(obj.objectValue === null ? response[0].data || [] : response[0].data[obj.objectValue], obj.foreignDataField, obj.foreignDisplayMember, undefined, undefined, undefined);\n      masterdataList[masterIndex][obj.dataField] = ComboFieldData.get(\"OptionList\");\n\n      if (item.childFieldToClear) {\n        item.childFieldToClear.forEach(item1 => (selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n          [item1.label]: undefined,\n          [item1.tablecolumnname]: undefined\n        }, masterdataList[masterIndex] = { ...masterdataList[masterIndex],\n          [item1.label]: []\n        }));\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedMaster,\n          masterdataList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch(initRequest(false));\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getChildValuesForMasterAdd(inputParem, userinfo, selectedMaster, masterdataList, parentcolumnlist, childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('dynamicpreregdesign/getChildValues', {\n      child: inputParem.child,\n      parentdata: inputParem.item.jsondata,\n      parentsource: inputParem.source,\n      [inputParem.primarykeyField]: inputParem.value,\n      valuemember: inputParem.primarykeyField,\n      childcolumnlist,\n      userinfo,\n      parentcolumnlist\n    }).then(response => {\n      let returnObj = { ...masterdataList[masterIndex - 1],\n        ...response.data\n      };\n      returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex - 1], childcolumnlist, withoutCombocomponent[masterIndex - 1], inputParem, userinfo.slanguagetypecode, userinfo);\n      selectedMaster[masterIndex - 1] = { ...selectedMaster[masterIndex - 1],\n        ...returnObj.selectedRecord\n      };\n      masterdataList[masterIndex - 1] = returnObj.comboData; // const dataList = {\n      // }\n\n      const selectedControl = inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex);\n      selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex);\n      const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex);\n      const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex);\n      const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex);\n      const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex);\n      masterdataList = masterdataList && removeIndex(masterdataList, masterIndex);\n      const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex);\n      const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex);\n      const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode];\n      masterIndex = parseInt(masterIndex) - 1;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          // selectedControl: inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex),\n          // selectedMaster: selectedMaster && removeIndex(selectedMaster, masterIndex),\n          // mastercomboComponents: inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex),\n          // masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex),\n          // masterComboColumnFiled: inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex),\n          // masterextractedColumnList: inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex),\n          // masterdataList: masterdataList && removeIndex(masterdataList, masterIndex),\n          // masterDesign: inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex),\n          // masterfieldList: inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex),\n          // screenName: inputParam.selectedControl[masterIndex - 1].displayname[userinfo.slanguagetypecode],\n          // loading: false,\n          //masterdataList,\n          //selectedMaster,\n          // ...dataList,\n          //   masterIndex: (parseInt(masterIndex) - 1),\n          // screenName: inputParem.screenName\n          selectedControl,\n          selectedMaster,\n          mastercomboComponents,\n          masterwithoutCombocomponent,\n          masterComboColumnFiled,\n          masterextractedColumnList,\n          masterdataList,\n          masterDesign,\n          masterfieldList,\n          loading: false,\n          // addMaster: false,\n          // masterdataList,\n          // selectedMaster: {},\n          //  selectedMaster: selectedMaster,\n          screenName,\n          masterIndex\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function viewExternalportalDetail(selectedControl, comboData, userinfo) {\n  return function (dispatch) {\n    if (selectedControl.table.item.nquerybuildertablecode === 222) {\n      dispatch(initRequest(true));\n      rsapi.post('dynamicpreregdesign/getExternalportalDetail', {\n        nexternalordercode: comboData.value,\n        nquerybuildertablecode: selectedControl.table.item.nquerybuildertablecode,\n        userinfo\n      }).then(response => {\n        let Map1 = new Map();\n        response.data.Sample.map(item => {\n          const newData = response.data.Test.filter(x => x.nexternalordersamplecode === item.nexternalordersamplecode);\n          Map1.set(item.nexternalordersamplecode, Object.values(newData));\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            isDynamicViewSlideOut: true,\n            dynamicExternalSample: response.data.Sample,\n            dynamicExternalTestChild: Map1,\n            dynamicGridSelectedId: response.data.Sample.length > 0 ? Object.keys(response.data.Sample[0].nexternalordersamplecode) : null,\n            loading: false,\n            selectedDynamicViewControl: selectedControl // dynamicExternalSubSample:[],\n            // dynamicExternalTest:[]\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}\nexport function getEditMaster(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let masterIndex = inputParam.masterIndex;\n    const componentName = inputParam.selectedControl[masterIndex].table.item.component;\n    const valueMember = inputParam.selectedControl[masterIndex].valuemember;\n\n    if (componentName === 'Type1Component' || componentName === 'Type2Component') {\n      rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getActive\" + inputParam.selectedControl[masterIndex].table.item.methodUrl + \"ById\", {\n        userinfo: inputParam.userinfo,\n        [valueMember]: inputParam.masterEditObject[masterIndex]['value']\n      }).then(response => {\n        if (response.status === 202) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n          toast.success(response.data);\n        } else if (response.status === 208) {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n          toast.warn(response.data);\n        } else {\n          let masterIndex = inputParam.masterIndex;\n          const data = response.data;\n          let selectedMaster = inputParam.selectedMaster || [];\n          inputParam.masterextractedColumnList[masterIndex].map(item => {\n            let fieldName = item.dataField;\n\n            if (item.controlType === \"checkbox\") {\n              selectedMaster[masterIndex][item.controlName] = data[item.controlName] ? data[item.controlName] : transactionStatus.NO;\n            } else {\n              selectedMaster[masterIndex][fieldName] = data[fieldName] ? data[fieldName] : \"\";\n            }\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterIndex,\n              selectedMaster,\n              masterdataList: inputParam.masterdataList,\n              addMaster: true,\n              loading: false,\n              selectedControl: inputParam.selectedControl,\n              masterfieldList: inputParam.masterfieldList,\n              masterextractedColumnList: inputParam.masterextractedColumnList,\n              masterprimaryKeyField: inputParam.masterprimaryKeyField,\n              masterComboColumnFiled: inputParam.masterComboColumnFiled,\n              screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n              mastercomboComponents: inputParam.mastercomboComponents,\n              masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n              masterDesign: inputParam.masterDesign,\n              masterEditObject: inputParam.masterEditObject,\n              masterOperation: inputParam.masterOperation\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else if (componentName === 'Type3Component') {\n      let urlArray = [];\n      urlArray.push(rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getActive\" + inputParam.selectedControl[masterIndex].table.item.methodUrl + \"ById\", {\n        userinfo: inputParam.userinfo,\n        [valueMember]: inputParam.masterEditObject[masterIndex]['value']\n      }));\n      inputParam.masterComboColumnFiled[masterIndex].map(item => {\n        // if (item.needService === undefined) {\n        let input = {};\n\n        if (item.needService === false) {\n          if (item.ismutipleparent) {\n            input = {\n              [item[\"parenttableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parenttableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parenttableDataField\"]],\n              [item[\"parentMutipleTableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parentMutipleTableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parentMutipleTableDataField\"]]\n            };\n          } else {\n            input = {\n              [item[\"parenttableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parenttableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parenttableDataField\"]]\n            };\n          } // input = { [item[\"parenttableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parenttableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parenttableDataField\"]] }\n\n        }\n\n        urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, {\n          userinfo: inputParam.userinfo,\n          ...input\n        }));\n        item[\"fetchIndex\"] = urlArray.length - 1; // }\n      });\n\n      if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n        urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", {\n          userinfo: inputParam.userinfo\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let ComboFieldData = [];\n        let masterdataList = inputParam.masterdataList;\n        const data = response[0].data;\n        let selectedMaster = inputParam.selectedMaster || [];\n        inputParam.masterextractedColumnList[masterIndex].map(item => {\n          let fieldName = item.dataField;\n          let fieldNamePK = item.tableDataField; // if (item.controlType === \"selectbox\") {\n          //     // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\n          //     selectedMaster[masterIndex][fieldName]= {lable:data[item.dataField],value:data[item.tableDataField]};\n          // }\n\n          if (item.controlType === \"datepicker\") {\n            selectedMaster[masterIndex][fieldName] = rearrangeDateFormat(inputParam.userinfo, data[item.dateField] ? data[item.dateField] : \"\");\n          } else if (item.controlType === \"checkbox\") {\n            selectedMaster[masterIndex][item.controlName] = data[item.controlName] ? data[item.controlName] : transactionStatus.NO;\n          } else {\n            selectedMaster[masterIndex][fieldName] = data[fieldName] ? data[fieldName] : \"\";\n            selectedMaster[masterIndex][fieldNamePK] = data[fieldNamePK] ? data[fieldNamePK] : -1;\n          }\n        });\n        inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\n          //  if (item.needService === undefined) {\n          let fieldName = item.dataField;\n          ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue], item.foreignDataField, item.dataField, undefined, undefined, undefined);\n          masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\");\n\n          if (masterdataList[masterIndex][item.dataField].length > 0) {\n            selectedMaster[masterIndex][fieldName] = { ...masterdataList[masterIndex][item.dataField].filter(x => x.item[item.foreignDataField] === data[item.tableDataField])[0]\n            };\n          } // } else {\n          //     if (item.child !== undefined) {\n          //         masterdataList[masterIndex][item.dataField] = []\n          //     } else if (item.useService !== undefined) {\n          //         masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField]\n          //     }\n          // }\n\n        });\n        let currentTime = '';\n\n        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\n          //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\n          currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n          selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\n          selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"]);\n          selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\n          selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterIndex,\n            selectedMaster,\n            masterdataList,\n            addMaster: true,\n            loading: false,\n            selectedControl: inputParam.selectedControl,\n            masterfieldList: inputParam.masterfieldList,\n            masterextractedColumnList: inputParam.masterextractedColumnList,\n            masterprimaryKeyField: inputParam.masterprimaryKeyField,\n            masterComboColumnFiled: inputParam.masterComboColumnFiled,\n            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n            mastercomboComponents: inputParam.mastercomboComponents,\n            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n            masterDesign: inputParam.masterDesign,\n            masterOperation: inputParam.masterOperation,\n            masterEditObject: inputParam.masterEditObject\n          }\n        });\n      }).catch(error => {\n        dispatch(initRequest(false));\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else if (componentName === 'Dynamic') {\n      dispatch(getDynamicMasterTempalte(inputParam));\n    }\n  };\n}\nexport function getEditMasterCombo(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let masterIndex = inputParam.masterIndex;\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const selectedMaster1 = rsapi.post(\"/dynamicmaster/getActiveDynamicMasterById\", {\n      ndynamicmastercode: inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode,\n      parentcolumnlist: inputParam.masterdesignData[masterIndex],\n      childcolumnlist: inputParam.masterchildColumnList,\n      userinfo: inputParam.userinfo\n    });\n    urlArray = [timeZoneService, selectedMaster1];\n    Axios.all(urlArray).then(response => {\n      let data = { ...response[1].data[\"EditData\"]\n      };\n      let selectedMaster = inputParam.selectedMaster || [];\n      selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex]\n      } || {};\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: inputParam.userinfo.stimezoneid,\n        value: inputParam.userinfo.ntimezonecode\n      };\n      const selectedRecord1 = { ...data\n      };\n      const languagetypeCode = undefined;\n      const comboData = response[1].data;\n      delete comboData['EditData'];\n      let comboValues = {};\n\n      if (inputParam.masterdesignData[masterIndex].length > 0) {\n        inputParam.masterdesignData[masterIndex].map(x => {\n          if (x.inputtype === 'combo') {\n            if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n              {\n                if (comboData[x.label].length > 0) {\n                  if (comboData[x.label][0].label === undefined) {\n                    const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                    comboData[x.label] = optionList.get(\"OptionList\");\n                  } else {\n                    comboData[x.label] = comboData[x.label];\n                    const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x);\n                  }\n                } else {\n                  comboData[x.label] = [];\n                }\n\n                comboValues = childComboLoadForEdit(x, comboData, selectedRecord1, inputParam.masterchildColumnList, inputParam.masterwithoutCombocomponent[masterIndex]);\n              } else {\n              comboValues = {\n                \"comboData\": comboData\n              };\n            }\n          } else {\n            comboValues = {\n              comboData: comboData,\n              ...comboValues\n            };\n          }\n        });\n      } else {\n        comboValues = {\n          \"comboData\": comboData\n        };\n      }\n\n      if (inputParam.masterwithoutCombocomponent[masterIndex].length > 0) {\n        inputParam.masterwithoutCombocomponent[masterIndex].map(item => {\n          if (item.inputtype === \"date\") {\n            if (selectedRecord1[item.label]) {\n              selectedRecord1 = { ...selectedRecord1,\n                [item.label]: rearrangeDateFormatforUI(inputParam.userinfo, selectedRecord1[item.label])\n              };\n            }\n          }\n        });\n      }\n\n      const masterdataList = inputParam.masterdataList || [];\n      masterdataList[masterIndex] = comboValues.comboData;\n      selectedMaster[masterIndex] = { ...selectedMaster[masterIndex],\n        ...selectedRecord1\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...inputParam,\n          mastertimeZoneList: timeZoneList,\n          masterdefaultTimeZone: defaultTimeZone,\n          loading: false,\n          addMaster: true,\n          masterdataList,\n          selectedMaster,\n          mastercomboComponents: inputParam.mastercomboComponents,\n          masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\n          masterdesignData: inputParam.masterdesignData,\n          masterIndex,\n          screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\n          masterOperation: inputParam.masterOperation,\n          masterEditObject: inputParam.masterEditObject\n        }\n      });\n    }).catch(error => {\n      console.log(\"error:\", error);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/DynamicPreRegDesignAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","sortData","constructOptionList","parentChildComboLoad","rearrangeDateFormat","ageCalculate","comboChild","validateEmail","getSameRecordFromTwoArrays","removeIndex","childSpecLoadCheck","constructjsonOptionList","constructjsonOptionDefault","rearrangeDateFormatforUI","childComboLoadForEdit","getcomponentdata","getValidComponent","replaceChildFromChildren","ReactComponents","SampleType","transactionStatus","formCode","Axios","getTreeByProduct","intl","getReactInputFields","userinfo","operation","respObj","ncontrolCode","dispatch","listURL","post","all","then","response","type","payload","ReactInputFields","data","components","Period","get","ReactTables","tables","staticfiltertables","selectedFieldRecord","openModal","loading","openPortal","showFilter","ncontrolcode","catch","error","status","message","warn","selectRegistrationTemplate","template","masterData","nreactregtemplatecode","selectedTemplate","getDefaultTemplate","ComboData","sampleType","userInfo","url","value","SUBSAMPLE","str","nsampletypecode","nsubsampletypecode","SubSampleType","selectedSampleType","SubSample","String","DefaultTemplateList","selectedDefaultTemplate","item","DefaultSampleTypeList","selectedSampleTypeList","getRegistrationTemplate","selectedDefaultSampleType","label","ndefaulttemplatecode","searchedData","undefined","realSampleTypes","realSampleType","map","index","push","getEditRegTemplate","editId","jsonData","jsondata","design","selectedRecord","templatename","sregtemplatename","ntransactionstatus","DRAFT","getJsonValue","PGjsonData","Array","isArray","JSONData","JSON","parse","getTableColumns","stablename","path","columnInfo","componentData","updateComponents","staicColumns","jstaticcolumns","dynamicColumns","jdynamiccolumns","multilingualColumns","jmultilingualcolumn","numericColumns","jnumericcolumns","primaryKeyName","sprimarykeyname","defaultColumn","comboData","filterColumns","displayname","slanguagetypecode","columnname","default","tablecolumnname","ismultilingual","column","displaymember","valuemember","componentcode","COMBO","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","validComponents","isdefaultColumn","Object","keys","length","filterfields","customsearchfilter","kendoFilter","logic","filters","parentRadioValue","parentPath","oldParentData","split","hasOwnProperty","child","radioOptions","tags","id","text","tableColumn","optionalPayload","selectedComponentpath","join","getForeignTableData","parentcolumnlist","source","filtercolumn","foriegntablename","foriegntablePK","conditionstring","inputtype","isMultiLingual","newcomboData","comboData1","selectedRecord1","masterDataValue","getPreviewTemplate","columnList","childColumnList","comboComponents","withoutCombocomponent","mapOfFilterRegData","preview","screenName","importData","timeZoneService","actualService","filter","x","readonly","childcolumnlist","dateService","datecolumnlist","currentDate","siteService","schedulerMasterService","nformcode","SCHEDULERCONFIGURATION","timeZoneMap","timeZoneList","defaultTimeZone","stimezoneid","ntimezonecode","siteMap","siteList","schedulerMap","schedulerList","userSite","SchedulerSite","nsitecode","ScheduleMaster","componentrow","loadcurrentdate","CLINICALTYPE","Age","name","nperiodcode","Date","loadselecteddate","hidebeforedate","hideafterdate","val","radiodefaultvalue","i","PRODUCT","ProductCategory","nproductcatcode","ncategorybasedFlow","sampletypecategorybasedflow","YES","inputParam","Product","nproductcode","INSTRUMENT","InstrumentCategory","ninstrumentcatcode","Instrument","ninstrumentcode","MATERIAL","MaterialType","nmaterialtypecode","MaterialCategory","nmaterialcatcode","Material","nmaterialcode","dateComp","ageComp","age","PROJECTSAMPLETYPE","project","nprojectMasterCode","GOODSIN","PROTOCOL","STABILITY","getChildValues","inputParem","parentListWithReadonly","productCategory","product","mapOfRegFilterData","instrumentCategory","instrument","materialCategory","material","materialType","subsample","parentdata","parentsource","primarykeyField","isInstrumentScheduler","nregionalsitecode","returnObj","SubSamplecomboData","selectComponent","selectedMaster","addMaster","selectedControl","masterComboColumnFiled","masterDesign","masterextractedColumnList","masterfieldList","masterdataList","mastercomboComponents","masterwithoutCombocomponent","masterIndex","loadCustomSearchFilter","nameofdefaultcomp","ProductName","AgaramTree","ActiveKey","FocusKey","OpenNodes","Test","SelectedTest","selectedSpec","Component","selectedComponent","Specification","subSampleDataGridList","InstrumentName","MaterialName","MaterialCategoryName","ncategorybasedflow","y","indexTemplateMandatory","findIndex","z","templatemandatory","templateManRecord","validatePreview","rtn","info","formatMessage","showConfirmAlert","addMasterRecord","requestUrl","isFileupload","formData","append","stringify","inputData","classUrl","methodUrl","success","data1","table","component","DynamicMasterData","SelectedPatient","PatientList","ExternalOrder","newdata","item1","nquerybuildertablecode","masterEditObject","ndynamicmastercode","combodata","childComboList","parentList","loginProps","ntestgroupspecrequired","loadSubSample","nportalrequired","nneedsubsample","comboName","selectedRecordName","masterOperation","getChildValuesForMasterAdd","parseInt","getAddMasterCombo","urlArray","needService","ComboFieldData","objectValue","fetchIndex","foreignDataField","dataField","useService","currentTime","NO","masterprimaryKeyField","getDynamicMasterTempalte","masterdesignData","slideoutdesign","row","children","mandatory","props","masterchildColumnList","getDynamicMasterComboForAdd","getEditMasterCombo","mastertimeZoneList","masterdefaultTimeZone","getChildValuesForAddMaster","getChildComboMaster","filedName","obj","childIndex","ismutipleparent","tableDataField","parentMutipleTableDataField","foreignDisplayMember","childFieldToClear","forEach","viewExternalportalDetail","nexternalordercode","Map1","Map","Sample","newData","nexternalordersamplecode","set","values","isDynamicViewSlideOut","dynamicExternalSample","dynamicExternalTestChild","dynamicGridSelectedId","selectedDynamicViewControl","getEditMaster","componentName","valueMember","fieldName","controlType","controlName","input","fieldNamePK","dateField","selectedMaster1","languagetypeCode","comboValues","optionList","console","log"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { sortData, constructOptionList, parentChildComboLoad, rearrangeDateFormat, ageCalculate, comboChild, validateEmail, getSameRecordFromTwoArrays, removeIndex, childSpecLoadCheck, constructjsonOptionList, constructjsonOptionDefault, rearrangeDateFormatforUI, childComboLoadForEdit } from '../components/CommonScript';\r\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../components/droparea/helpers';\r\nimport { ReactComponents, SampleType, transactionStatus,formCode } from '../components/Enumeration';\r\nimport Axios from 'axios';\r\nimport { getTreeByProduct } from './RegistrationAction';\r\nimport { intl } from '../components/App';\r\n\r\nexport function getReactInputFields(userinfo, operation, respObj, ncontrolCode) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        // console.log(\"respObj:\", respObj);\r\n        const listURL = [];\r\n        listURL[0] = rsapi.post(\"dynamicpreregdesign/getReactComponents\", { userinfo })\r\n        listURL[1] = rsapi.post(\"dynamicpreregdesign/getReactInputFields\", { userinfo })\r\n        listURL[2] = rsapi.post(\"registrationsubtype/getPeriods\", { userinfo })\r\n        listURL[3] = rsapi.post(\"dynamicpreregdesign/getReactStaticFilterTables\", { userinfo })\r\n        Axios.all(listURL)\r\n            .then(response => {\r\n                respObj = respObj ? { ...respObj } : {}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ReactInputFields: response[1].data,\r\n                        ReactComponents: response[0].data.components,\r\n                        Period: constructOptionList(response[2].data, 'nperiodcode', 'speriodname').get(\"OptionList\"),\r\n                        ReactTables: constructOptionList(response[0].data.tables, 'nquerybuildertablecode', 'sdisplayname').get(\"OptionList\"),\r\n                        staticfiltertables: constructOptionList(response[3].data, 'nquerybuilderstaticfiltercode', 'displayname').get(\"OptionList\"),\r\n                        selectedFieldRecord: {},\r\n                        openModal: false,\r\n                        loading: false,\r\n                        openPortal: true,\r\n                        operation,\r\n                        showFilter: false,\r\n                        ncontrolcode: ncontrolCode,\r\n                        ...respObj\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function selectRegistrationTemplate(template, masterData, userinfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: template.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { masterData: { ...masterData, selectedTemplate: response.data }, loading: false }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDefaultTemplate(ComboData, sampleType, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\r\n        //     nsampletypecode: sampleType.value,\r\n        //     userinfo: userInfo,\r\n        //     SubSample:false\r\n        // })\r\n        let url = [];\r\n        if (ComboData.value === SampleType.SUBSAMPLE) {\r\n            const str = rsapi.post(\"dynamicpreregdesign/getDefaultSampleType\", {\r\n                userinfo: userInfo,\r\n                nsampletypecode: sampleType.SampleType && sampleType.SampleType.value\r\n            })\r\n            url = [str];\r\n        } else {\r\n            const str = rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\r\n                nsubsampletypecode: sampleType.SubSampleType && sampleType.SubSampleType.value,\r\n                userinfo: userInfo,\r\n                nsampletypecode: sampleType.SampleType && sampleType.SampleType.value || masterData.selectedSampleType.nsampletypecode,\r\n                SubSample: String(sampleType.SampleType && sampleType.SampleType.value || masterData.selectedSampleType.nsampletypecode) === '-1' ? true : false\r\n\r\n            })\r\n            url = [str];\r\n        }\r\n        dispatch(initRequest(true));\r\n        Axios.all(url)\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: ComboData.value === SampleType.SUBSAMPLE ? {\r\n                            ...masterData,\r\n                            DefaultTemplateList: response[0].data[\"DefaultTemplateList\"],\r\n                            selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\r\n                            selectedSampleType: sampleType.SampleType.item,\r\n                            DefaultSampleTypeList: response[0].data[\"SampleTypeList\"],\r\n                            selectedSampleTypeList: response[0].data[\"selectedSampleTypeList\"],\r\n                            // selectedSampleTypeList:sampleType.item,\r\n                        } : {\r\n                            ...masterData,\r\n                            DefaultTemplateList: response[0].data[\"DefaultTemplateList\"],\r\n                            selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\r\n                            selectedSampleTypeList: sampleType.SubSampleType && sampleType.SubSampleType.item,\r\n                            selectedSampleType: sampleType.SampleType && sampleType.SampleType.item || masterData.selectedSampleType,\r\n                        },\r\n                        // realSampleType: [{\r\n                        //     \"label\": \"IDS_SAMPLETYPE\",\r\n                        //     \"value\": sampleType.label,\r\n                        //     \"item\": sampleType\r\n                        // }],\r\n\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n// export function getDefaultSampleType(sampleType, userInfo, masterData,SampleTypeName,selectedSampleType) {\r\n//     return function (dispatch) {\r\n//     let url=[];\r\n//         if(sampleType.label===\"Sub Sample\"){\r\n//       const str=  rsapi.post(\"dynamicpreregdesign/getDefaultSampleType\", {\r\n//             userinfo: userInfo,\r\n//             nsampletypecode: sampleType.value\r\n//         })\r\n//         url=[str];\r\n//     }else{\r\n//         const str=  rsapi.post(\"dynamicpreregdesign/getDefaultTemplate\", {\r\n//             nsubsampletypecode: sampleType.value,\r\n//             userinfo: userInfo,SubSample:true,nsampletypecode:selectedSampleType.value\r\n//         })\r\n//         url=[str];\r\n//     }\r\n//     dispatch(initRequest(true));\r\n//     Axios.all(url)\r\n//          .then(response => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: { masterData: sampleType.label===\"Sub Sample\"?{ ...masterData, \r\n//                                             DefaultSampleTypeList :response[0].data[\"SampleTypeList\"],\r\n//                                             selectedSampleTypeList: response[0].data[\"selectedSampleTypeList\"],SampleTypeName,\r\n//                                             selectedSampleType:sampleType.item,\r\n//                                             DefaultTemplateList :response[0].data[\"DefaultTemplateList\"],\r\n//                                             selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\r\n//                                             //defaultTemplateOptions:[],selectedDefaultTemplate:[],DefaultTemplateList:[]\r\n//                                             }:{ ...masterData, \r\n//                                                 DefaultTemplateList :response[0].data[\"DefaultTemplateList\"],\r\n//                                                 selectedDefaultTemplate: response[0].data[\"selectedDefaultTemplate\"],\r\n//                                                 selectedSampleTypeList:sampleType.item,\r\n//                                                 }, \r\n\r\n//                                 loading: false }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\nexport function getRegistrationTemplate(selectedSampleType, selectedDefaultTemplate, masterData, userinfo, selectedDefaultSampleType) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getDynamicPreRegDesign\", {\r\n            nsampletypecode: selectedSampleType.value,\r\n            SampleType: selectedSampleType.label,\r\n            ndefaulttemplatecode: selectedDefaultTemplate.value,\r\n            userinfo, SubSample: selectedSampleType.label === \"Sub Sample\" ? true : false,\r\n            nsubsampletypecode: selectedDefaultSampleType.value\r\n        })\r\n            .then(response => {\r\n                masterData = { ...masterData, ...response.data, searchedData: undefined,selectedDefaultTemplate:selectedDefaultTemplate.item }\r\n                sortData(masterData)\r\n                let realSampleTypes = [{\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": selectedSampleType.label,\r\n                    \"item\": selectedSampleType\r\n                },\r\n                // realDefaultTemplate: [\r\n                selectedSampleType.value === SampleType.SUBSAMPLE ? {\r\n                    \"label\": \"IDS_SUBSAMPLEBASEDSAMPLETYPE\",\r\n                    \"value\": selectedDefaultSampleType.label,\r\n                    \"item\": selectedDefaultSampleType\r\n                } : \"\", {\r\n                    \"label\": \"IDS_TEMPLATETYPE\",\r\n                    \"value\": selectedDefaultTemplate.label,\r\n                    \"item\": selectedDefaultTemplate\r\n                }]\r\n                let realSampleType = [];\r\n                realSampleTypes.map((item, index) => {\r\n                    if (item === \"\") {\r\n                        delete (realSampleTypes[index])\r\n                    } else {\r\n                        realSampleType.push(item)\r\n                    }\r\n                })\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        realSampleType,\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getEditRegTemplate(masterData, userinfo, editId) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getRegistrationTemplateById\", {\r\n            nreactregtemplatecode: masterData.selectedTemplate.nreactregtemplatecode,\r\n            userinfo\r\n        })\r\n            .then(response => {\r\n                let jsonData = response.data.jsondata;\r\n                sortData(masterData)\r\n\r\n                const respObj = {\r\n                    masterData,\r\n                    ncontrolcode: editId,\r\n                    openPortal: true,\r\n                    loading: false,\r\n                    openModal: false,\r\n                    design: jsonData,\r\n                    selectedRecord: { templatename: response.data.sregtemplatename }\r\n                }\r\n                if (response.data.ntransactionstatus === transactionStatus.DRAFT) {\r\n                    // let jsonData = response.data.jsondata;\r\n                    // sortData(masterData)\r\n\r\n                    // const respObj = {\r\n                    //     masterData,\r\n                    //     ncontrolcode: editId,\r\n                    //     openPortal: true,\r\n                    //     loading: false,\r\n                    //     openModal: false,\r\n                    //     design: jsonData,\r\n                    //     selectedRecord: { templateName: response.data.sregtemplatename }\r\n                    // }                \r\n                    dispatch(getReactInputFields(userinfo, \"update\", respObj))\r\n                }\r\n                else {\r\n                    dispatch(getReactInputFields(userinfo, \"viewdesign\", respObj))\r\n                    // dispatch({ type: DEFAULT_RETURN, payload: { loading: false, masterStatus: \"IDS_SELECTDRAFTRECORD\" } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJsonValue(PGjsonData) {\r\n\r\n    if (Array.isArray(PGjsonData)) {\r\n        let JSONData = [];\r\n        PGjsonData.map(data => {\r\n            return JSONData.push(JSON.parse(data.jsondata))\r\n        })\r\n        return JSONData;\r\n    } else {\r\n        return JSON.parse(PGjsonData);\r\n    }\r\n\r\n}\r\n\r\nexport function getTableColumns(design, selectedFieldRecord, stablename,\r\n    userinfo, path, columnInfo, componentData, updateComponents, showFilter) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"dynamicpreregdesign/getTableColumns\", { \"nquerybuildertablecode\": stablename || 0, userinfo })\r\n            .then(response => {\r\n                columnInfo = columnInfo || {}\r\n                const staicColumns = response.data.jstaticcolumns || []\r\n                const dynamicColumns = response.data.jdynamiccolumns || []\r\n                const multilingualColumns = response.data.jmultilingualcolumn || []\r\n                const numericColumns = response.data.jnumericcolumns || []\r\n                const primaryKeyName = response.data.sprimarykeyname\r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: {\r\n                        staicColumns,\r\n                        dynamicColumns,\r\n                        multilingualColumns,\r\n                        numericColumns,\r\n                        primaryKeyName\r\n                    }\r\n                }\r\n                let defaultColumn = {};\r\n                let comboData = []\r\n                let filterColumns = [];\r\n               \r\n                //  let selectedComponentpath=componentData.selectedComponentpath\r\n                staicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                dynamicColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"dynamic\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"dynamic\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                multilingualColumns.map(item => {\r\n                    comboData.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.columnname,\r\n                        type: \"static\",\r\n                        item\r\n                    })\r\n                    if (item.default) {\r\n                        defaultColumn = {\r\n                            label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                            value: item.columnname,\r\n                            type: \"static\",\r\n                            item\r\n                        }\r\n                    }\r\n                })\r\n                filterColumns = [...comboData];\r\n                numericColumns.map(item => {\r\n                    filterColumns.push({\r\n                        label: item.displayname[userinfo.slanguagetypecode] || item.displayname['en-US'],\r\n                        value: item.tablecolumnname,\r\n                        type: \"numeric\",\r\n                        item\r\n                    })\r\n                })\r\n                if (defaultColumn.item && defaultColumn.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else if (componentData === undefined || componentData.components === undefined) {\r\n                    componentData = componentData || {}\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER\r\n                        || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                         let  isdefaultColumn= Object.keys(defaultColumn).length>0 ? true : false;  \r\n                        selectedFieldRecord = { ...selectedFieldRecord, filterfields:isdefaultColumn ? [{ type: defaultColumn.type, ...defaultColumn.item }] :[], customsearchfilter:isdefaultColumn?  [defaultColumn] : undefined, displaymember: defaultColumn.value, valuemember: primaryKeyName,kendoFilter:{\r\n                            logic: \"and\",\r\n                            filters: []\r\n                        }};\r\n                    } else {\r\n                        selectedFieldRecord = { ...selectedFieldRecord, column: defaultColumn, displaymember: defaultColumn.value, valuemember: primaryKeyName };\r\n                    }\r\n\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER\r\n                        && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                } else {\r\n                    let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                    let parentRadioValue = []\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        if (selectedFieldRecord.parentPath) {\r\n                            let oldParentData = getcomponentdata(design, selectedFieldRecord.parentPath.split(\"-\"))\r\n                            if (oldParentData.hasOwnProperty('child')) {\r\n                                oldParentData.child.map(item => {\r\n                                    if (item.label === selectedFieldRecord.label) {\r\n                                        parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                            return { value: item.id, label: item.text, item }\r\n                                        })\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                    componentData = { ...componentData, validComponents, parentRadioValue }\r\n                }\r\n\r\n                \r\n                columnInfo = {\r\n                    ...columnInfo,\r\n                    [stablename]: { ...columnInfo[stablename], tableColumn: comboData, filterColumns }\r\n                }\r\n                let optionalPayload = {\r\n                    selectedComponentpath: Array.isArray(path) ? path.join(\"-\") : undefined,\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        // selectedComponentpath,\r\n                        selectedFieldRecord,\r\n                        ...optionalPayload,\r\n                        tableColumn: comboData,\r\n                        filterColumns,\r\n                        columnInfo,\r\n                        primaryKeyName,\r\n                        selectedComponentpath: componentData.path,\r\n                        ...componentData,\r\n                        showFilter: showFilter,\r\n                        \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getForeignTableData(design, selectedFieldRecord, stablename, userinfo, path, columnInfo, componentData, updateComponents) {\r\n    return function (dispatch) {\r\n        let parentcolumnlist = [{\r\n            source: selectedFieldRecord.filtercolumn.item.foriegntablename,\r\n            valuemember: selectedFieldRecord.filtercolumn.item.foriegntablePK,\r\n            displaymember: selectedFieldRecord.filtercolumn.item.columnname,\r\n            conditionstring: selectedFieldRecord.filtercolumn.item.conditionstring,\r\n            label: \"filterData\",\r\n            inputtype: \"combo\",\r\n            isMultiLingual: selectedFieldRecord.filtercolumn.item.ismultilingual\r\n        }]\r\n        rsapi.post(\"dynamicpreregdesign/getComboValues\", { parentcolumnlist, userinfo })\r\n            .then(response => {\r\n                let comboData = [];\r\n                let selectedRecord = {};\r\n                const newcomboData = parentChildComboLoad(parentcolumnlist, response.data,\r\n                    selectedRecord, [], [], undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                if (updateComponents) {\r\n                    componentData = componentData || {}\r\n                    // selectedFieldRecord = { ...selectedFieldRecord };\r\n                    design = replaceChildFromChildren(design, path, selectedFieldRecord)\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) {\r\n                        let validComponents = getValidComponent(selectedFieldRecord, componentData.components, columnInfo);\r\n                        componentData = { ...componentData, validComponents }\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        design,\r\n                        selectedFieldRecord,\r\n                        masterDataValue: comboData,\r\n                        columnInfo,\r\n                        ...componentData,\r\n                        ...comboData1\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPreviewTemplate(masterData, userinfo,\r\n    editId, columnList, selectedRecord, childColumnList, comboComponents,\r\n    withoutCombocomponent, openPortal, openModal, mapOfFilterRegData, preview, operation, screenName,importData) {\r\n    return function (dispatch) {\r\n        if(mapOfFilterRegData[\"userInfo\"]===undefined){\r\n        mapOfFilterRegData[\"userInfo\"]=userinfo;\r\n        }\r\n        dispatch(initRequest(true));\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList ? columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)) : [],\r\n            childcolumnlist: childColumnList ? childColumnList : [],\r\n            userinfo\r\n        })\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: withoutCombocomponent.filter(x => x.inputtype === \"date\"),\r\n            userinfo\r\n        })\r\n\r\n        const currentDate = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo\r\n        })\r\n        let siteService={};\r\n        let schedulerMasterService={};\r\n        if(userinfo.nformcode===formCode.SCHEDULERCONFIGURATION){\r\n             siteService = rsapi.post(\"schedulerconfiguration/getSiteByUser\", {\r\n                userinfo\r\n            })\r\n\r\n            schedulerMasterService = rsapi.post(\"schedulerconfiguration/getSchedulerMaster\", {\r\n                userinfo\r\n            })\r\n        }\r\n        \r\n        Axios.all([timeZoneService, actualService, dateService, currentDate,siteService,schedulerMasterService])\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList.filter(x => (x.inputtype !== 'backendsearchfilter' && x.inputtype !== 'frontendsearchfilter') && (x.readonly !== true)), response[1].data, selectedRecord,\r\n                    childColumnList, withoutCombocomponent, undefined, userinfo.slanguagetypecode, userinfo)\r\n                // sortData(masterData)\r\n                let siteMap=[];\r\n                let siteList=[];\r\n                let schedulerMap=[];\r\n                let schedulerList=[];\r\n                const comboData1 = newcomboData.comboData\r\n                let selectedRecord1 = newcomboData.selectedRecord\r\n\r\n                if(userinfo.nformcode===formCode.SCHEDULERCONFIGURATION){\r\n                    siteMap = constructOptionList(response[4].data.userSite || [], \"nsitecode\", \"ssitename\", undefined, undefined, true);\r\n                     siteList = siteMap.get(\"OptionList\");\r\n\r\n\r\n                    let SchedulerSite= siteList.filter(item=>item.value===userinfo.nsitecode);\r\n\r\n                    if(SchedulerSite.length>0){\r\n                        selectedRecord1={...selectedRecord1,\"SchedulerSite\":SchedulerSite[0]}\r\n                    }\r\n                    schedulerMap = constructOptionList(response[5].data.ScheduleMaster || [], \"nschedulecode\", \"sschedulename\", undefined, undefined, true);\r\n                    schedulerList = schedulerMap.get(\"OptionList\");\r\n\r\n\r\n                }\r\n                withoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        //  if (componentrow.mandatory) {\r\n                        if (componentrow.loadcurrentdate) {\r\n                            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? rearrangeDateFormat(userinfo, response[3].data) : \"\";\r\n                            if (masterData.selectedTemplate && masterData.selectedTemplate.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                                const Age = withoutCombocomponent.filter(item =>\r\n                                    item.name === \"Age\");\r\n                                selectedRecord[Age[0].label] = ageCalculate(selectedRecord1[componentrow.label])\r\n                            }\r\n                            selectedRecord1[componentrow.label + \"value\"] = selectedRecord1[componentrow.label];\r\n                        } else if (componentrow.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                            if (componentrow.loadselecteddate) {\r\n                                selectedRecord1[componentrow.label] = response[2].data[componentrow.label] ?\r\n                                    new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                            }\r\n                            //    selectedRecord1[componentrow.label]=response[2].data[componentrow.label]?\r\n                            //    new Date(response[2].data[componentrow.label]):null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n\r\n                        // }else{\r\n                        //     selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\r\n                        // }\r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n                })\r\n                //console.log(\"selectedRecord1 action1:\", selectedRecord1);\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName,\r\n                            operation: \"preview\",\r\n                            importData,\r\n                            siteList,\r\n                            schedulerList\r\n\r\n                            // childOperation:true\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    if (mapOfFilterRegData.nsampletypecode === SampleType.PRODUCT) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item'] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        importData,\r\n                                        siteList,\r\n                                        schedulerList\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    importData,\r\n                                    siteList,\r\n                                    schedulerList\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                importData\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === SampleType.INSTRUMENT) {\r\n                        const InstrumentCategory = comboComponents.filter(x => x.name === 'Instrument Category');\r\n                        if (InstrumentCategory.length > 0) {\r\n                            const ninstrumentcatcode = selectedRecord1[InstrumentCategory[0].label] &&\r\n                                selectedRecord1[InstrumentCategory[0].label].value\r\n                            let ncategorybasedFlow = selectedRecord1[InstrumentCategory[0].label]\r\n                                && selectedRecord1[InstrumentCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        importData,siteList,\r\n                                        schedulerList\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Instrument = comboComponents.filter(x => x.name === 'Instrument');\r\n                                    if (Instrument.length > 0) {\r\n                                        const ninstrumentcode = selectedRecord1[Instrument[0].label]\r\n                                            && selectedRecord1[Instrument[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = ninstrumentcode !== undefined ? ninstrumentcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = ninstrumentcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData,\r\n                                            siteList,\r\n                                            schedulerList\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    importData,\r\n                                    siteList,\r\n                                    schedulerList\r\n                                    // loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                importData,\r\n                                siteList,\r\n                                schedulerList\r\n                                // loadPreregister:true\r\n                            }\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    } else if (mapOfFilterRegData.nsampletypecode === SampleType.MATERIAL) {\r\n                        const MaterialType = comboComponents.filter(x => x.name === 'Material Type');\r\n                        if (MaterialType.length > 0) {\r\n                            const nmaterialtypecode = selectedRecord1[MaterialType[0].label] &&\r\n                                selectedRecord1[MaterialType[0].label].value\r\n                            if (nmaterialtypecode !== undefined) {\r\n                                const MaterialCategory = comboComponents.filter(x => x.name === 'Material Category');\r\n                                if (MaterialCategory.length > 0) {\r\n                                    const nmaterialcatcode = selectedRecord1[MaterialCategory[0].label] &&\r\n                                        selectedRecord1[MaterialCategory[0].label].value\r\n                                    let ncategorybasedFlow = selectedRecord1[MaterialCategory[0].label]\r\n                                        && selectedRecord1[MaterialCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                                    if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                        ncategorybasedFlow = transactionStatus.YES;\r\n                                    }\r\n                                    if (ncategorybasedFlow !== undefined) {\r\n                                        if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                            mapOfFilterRegData['nproductcode'] = -1;\r\n                                            mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n                                            const inputParam = {\r\n                                                timeZoneList,\r\n                                                defaultTimeZone,\r\n                                                masterData,\r\n                                                ncontrolcode: editId,\r\n                                                openModal,\r\n                                                comboComponents,\r\n                                                withoutCombocomponent,\r\n                                                openPortal,\r\n                                                columnList,\r\n                                                childColumnList,\r\n                                                operation,\r\n                                                screenName,\r\n                                                importData\r\n                                                // loadPreregister:true\r\n                                            }\r\n                                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                selectedRecord1,\r\n                                                newcomboData.comboData, inputParam))\r\n                                        }\r\n                                        else {\r\n                                            const Material = comboComponents.filter(x => x.name === 'Material');\r\n                                            if (Material.length > 0) {\r\n                                                const nmaterialcode = selectedRecord1[Material[0].label]\r\n                                                    && selectedRecord1[Material[0].label].value;\r\n\r\n                                                mapOfFilterRegData['nproductcode'] = nmaterialcode !== undefined ? nmaterialcode : -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = nmaterialcatcode\r\n\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName,\r\n                                                    importData\r\n                                                    // loadPreregister:true\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            } else {\r\n                                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                                const inputParam = {\r\n                                                    timeZoneList,\r\n                                                    defaultTimeZone,\r\n                                                    masterData,\r\n                                                    ncontrolcode: editId,\r\n                                                    openModal,\r\n                                                    comboComponents,\r\n                                                    withoutCombocomponent,\r\n                                                    openPortal,\r\n                                                    columnList,\r\n                                                    childColumnList,\r\n                                                    operation,\r\n                                                    screenName,\r\n                                                    importData\r\n                                                    //loadPreregister:true\r\n                                                }\r\n                                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                                    selectedRecord1,\r\n                                                    newcomboData.comboData, inputParam))\r\n                                            }\r\n                                        }\r\n\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                } else {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = -1\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        importData\r\n                                        //loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n\r\n                            }\r\n\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                importData\r\n                                // loadPreregister:true\r\n                            }\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n\r\n                    }\r\n                    else if (mapOfFilterRegData.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        const dateComp = withoutCombocomponent.filter(item => item.name === \"Date Of Birth\");\r\n                        if (dateComp[0].label !== undefined) {\r\n                            const ageComp = withoutCombocomponent.filter(item => item.name === \"Age\");\r\n                            const age = ageCalculate(selectedRecord1[dateComp[0].label]);\r\n                            selectedRecord1[ageComp[0].label] = age;\r\n                        }\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] ?\r\n                                selectedRecord1[ProductCategory[0].label].value : -1;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                ? selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow']\r\n                                : undefined;\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        importData\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    importData\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                importData\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    }\r\n                    else if (mapOfFilterRegData.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        const project = comboComponents.filter(x => x.name === 'Project Code');\r\n                        let nprojectMasterCode = -1;\r\n                        if (project && project.length > 0 && mapOfFilterRegData['nprojectSpecReqd'] == transactionStatus.YES) {\r\n                            nprojectMasterCode = selectedRecord1[project[0].label] &&\r\n                                selectedRecord1[project[0].label].value;\r\n                        }\r\n\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === 3) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        importData\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                        mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            // loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1;\r\n                                        mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1;\r\n                                mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    importData\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        }\r\n                        else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1;\r\n                            mapOfFilterRegData['nprojectmastercode'] = nprojectMasterCode || -1;\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                importData\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    }else if(mapOfFilterRegData.nsampletypecode === SampleType.GOODSIN){\r\n\r\n                        \r\n\r\n                        dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName,\r\n                            operation,\r\n                            importData\r\n\r\n                        }\r\n                        })\r\n                    //Added by sonia on 11th NOV 2024 for jira id:ALPD-5025    \r\n                    }else if(mapOfFilterRegData.nsampletypecode === SampleType.PROTOCOL){                         \r\n\r\n                        dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            masterData,\r\n                            ncontrolcode: editId,\r\n                            openModal,\r\n                            loading: false,\r\n                            comboData: comboData1,\r\n                            selectedRecord: selectedRecord1,\r\n                            comboComponents,\r\n                            withoutCombocomponent,\r\n                            openPortal,\r\n                            columnList,\r\n                            childColumnList,\r\n                            screenName,\r\n                            operation,\r\n                            importData\r\n\r\n                    }\r\n                        })\r\n                    }\r\n                    else if(mapOfFilterRegData.nsampletypecode === SampleType.STABILITY){   \r\n                        const ProductCategory = comboComponents.filter(x => x.name === 'Product Category');\r\n                        if (ProductCategory.length > 0) {\r\n                            const nproductcatcode = selectedRecord1[ProductCategory[0].label] &&\r\n                                selectedRecord1[ProductCategory[0].label].value;\r\n                            let ncategorybasedFlow = selectedRecord1[ProductCategory[0].label]\r\n                                && selectedRecord1[ProductCategory[0].label]['item'] && selectedRecord1[ProductCategory[0].label]['item']['jsondata']['ncategorybasedflow'];\r\n                            if (mapOfFilterRegData.sampletypecategorybasedflow === transactionStatus.YES) {\r\n                                ncategorybasedFlow = transactionStatus.YES;\r\n                            }\r\n                            if (ncategorybasedFlow !== undefined) {\r\n                                if (ncategorybasedFlow === transactionStatus.YES) {\r\n                                    mapOfFilterRegData['nproductcode'] = -1;\r\n                                    mapOfFilterRegData['nproductcatcode'] = nproductcatcode;\r\n                                    mapOfFilterRegData['nsampletypecode']=SampleType.PRODUCT;\r\n                                    const inputParam = {\r\n                                        timeZoneList,\r\n                                        defaultTimeZone,\r\n                                        masterData,\r\n                                        ncontrolcode: editId,\r\n                                        openModal,\r\n                                        comboComponents,\r\n                                        withoutCombocomponent,\r\n                                        openPortal,\r\n                                        columnList,\r\n                                        childColumnList,\r\n                                        operation,\r\n                                        screenName,\r\n                                        importData,\r\n                                        siteList,\r\n                                        schedulerList\r\n                                        // loadPreregister:true\r\n                                    }\r\n                                    dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                        selectedRecord1,\r\n                                        newcomboData.comboData, inputParam))\r\n                                }\r\n                                else {\r\n                                    const Product = comboComponents.filter(x => x.name === 'Product');\r\n                                    if (Product.length > 0) {\r\n                                        const nproductcode = selectedRecord1[Product[0].label]\r\n                                            && selectedRecord1[Product[0].label].value;\r\n\r\n                                        mapOfFilterRegData['nproductcode'] = nproductcode !== undefined ? nproductcode : -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = nproductcatcode\r\n\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            // loadPreregister:true\r\n                }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    } else {\r\n                                        mapOfFilterRegData['nproductcode'] = -1;\r\n                                        mapOfFilterRegData['nproductcatcode'] = -1\r\n                                        const inputParam = {\r\n                                            timeZoneList,\r\n                                            defaultTimeZone,\r\n                                            masterData,\r\n                                            ncontrolcode: editId,\r\n                                            openModal,\r\n                                            comboComponents,\r\n                                            withoutCombocomponent,\r\n                                            openPortal,\r\n                                            columnList,\r\n                                            childColumnList,\r\n                                            operation,\r\n                                            screenName,\r\n                                            importData\r\n                                            //loadPreregister:true\r\n                                        }\r\n                                        dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                            selectedRecord1,\r\n                                            newcomboData.comboData, inputParam))\r\n                                    }\r\n                                }\r\n\r\n                            } else {\r\n                                mapOfFilterRegData['nproductcode'] = -1;\r\n                                mapOfFilterRegData['nproductcatcode'] = -1\r\n                                const inputParam = {\r\n                                    timeZoneList,\r\n                                    defaultTimeZone,\r\n                                    masterData,\r\n                                    ncontrolcode: editId,\r\n                                    openModal,\r\n                                    comboComponents,\r\n                                    withoutCombocomponent,\r\n                                    openPortal,\r\n                                    columnList,\r\n                                    childColumnList,\r\n                                    operation,\r\n                                    screenName,\r\n                                    importData,\r\n                                    siteList,\r\n                                    schedulerList\r\n                                    //loadPreregister:true\r\n                                }\r\n                                dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                    selectedRecord1,\r\n                                    newcomboData.comboData, inputParam))\r\n                            }\r\n                        } else {\r\n                            mapOfFilterRegData['nproductcode'] = -1;\r\n                            mapOfFilterRegData['nproductcatcode'] = -1\r\n                            const inputParam = {\r\n                                timeZoneList,\r\n                                defaultTimeZone,\r\n                                masterData,\r\n                                ncontrolcode: editId,\r\n                                openModal,\r\n                                comboComponents,\r\n                                withoutCombocomponent,\r\n                                openPortal,\r\n                                columnList,\r\n                                childColumnList,\r\n                                operation,\r\n                                screenName,\r\n                                importData\r\n                                //loadPreregister:true\r\n                            }\r\n                            //console.log(\"selectedRecord1 action2:\", selectedRecord1);\r\n                            dispatch(getTreeByProduct(mapOfFilterRegData,\r\n                                selectedRecord1,\r\n                                newcomboData.comboData, inputParam))\r\n                        }\r\n                    }\r\n\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                //console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValues(inputParem,\r\n    userinfo, selectedRecord, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    productCategory, product, mapOfRegFilterData,\r\n    instrumentCategory, instrument, materialCategory,\r\n    material, materialType, subsample, project, comboComponents) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist,\r\n            isInstrumentScheduler:(userinfo.nformcode===formCode.SCHEDULERCONFIGURATION && mapOfRegFilterData.nsampletypecode===2 &&inputParem.primarykeyField==='ninstrumentcatcode' )\r\n            ?true:false,\r\n            nregionalsitecode:(userinfo.nformcode===formCode.SCHEDULERCONFIGURATION && mapOfRegFilterData.nsampletypecode===2&&inputParem.primarykeyField==='ninstrumentcatcode')?selectedRecord.SchedulerSite.value:-1\r\n           // dependedMemberValue:inputParem.parentDataValue\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData, ...response.data }\r\n                // ALPD-3793 \r\n                if(mapOfRegFilterData == undefined){\r\n                 mapOfRegFilterData = {}\r\n                }\r\n                // ALPD-3673 VISHAKH\r\n                mapOfRegFilterData[\"userInfo\"] = userinfo; \r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj,\r\n                    selectedRecord, childcolumnlist,\r\n                    withoutCombocomponent, inputParem,\r\n                    userinfo.slanguagetypecode, userinfo, comboComponents)\r\n                selectedRecord = { ...selectedRecord, ...returnObj.selectedRecord }\r\n                if (subsample) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            SubSamplecomboData: { ...returnObj.comboData },\r\n                            selectComponent: selectedRecord,\r\n                            screenName: inputParem.screenName,\r\n                            selectedMaster: [],\r\n                            addMaster: false,\r\n                            selectedControl: [],\r\n                            masterComboColumnFiled: [],\r\n                            masterDesign: [],\r\n                            masterextractedColumnList: [],\r\n                            masterfieldList: [],\r\n                            masterdataList: [],\r\n                            mastercomboComponents: [],\r\n                            masterwithoutCombocomponent: [],\r\n                            masterIndex: undefined,\r\n                            loadCustomSearchFilter: false,\r\n                        }\r\n                    })\r\n                }\r\n                // else if (childSpec) {\r\n\r\n                //     if (mapOfRegFilterData.nsampletypecode === SampleType.PROJECTSAMPLETYPE && mapOfRegFilterData.nprojectSpecReqd === 3) {\r\n\r\n                //     }\r\n                //     else if (mapOfRegFilterData.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                //         if (mapOfRegFilterData.childSpecBasedAddMaster\r\n                //             && mapOfRegFilterData.childSpecBasedAddMaster) {\r\n                //             if (mapOfRegFilterData.ProductCategory[0]\r\n                //                 && selectedRecord[mapOfRegFilterData.ProductCategory[0].label]===undefined) {\r\n\r\n                //                 selectedRecord[mapOfRegFilterData.ProductCategory[0].label]=returnObj[mapOfRegFilterData.ProductCategory[0].label]&&returnObj[mapOfRegFilterData.ProductCategory[0].label][0]\r\n\r\n                //             }\r\n                //             const label = mapOfRegFilterData.ProductCategory[0].label\r\n\r\n                //             let ncategorybasedflow = selectedRecord[label] &&\r\n                //                 selectedRecord[label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //             if (ncategorybasedflow === transactionStatus.YES) {\r\n                //                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[label].value\r\n                //                 mapOfRegFilterData['nproductcode'] = -1\r\n                //                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //             }\r\n\r\n                //         }\r\n                //         else if (mapOfRegFilterData.ProductCategory && mapOfRegFilterData.ProductCategory[0]\r\n                //             && selectedRecord[mapOfRegFilterData.ProductCategory[0].label]) {\r\n                //             const label = mapOfRegFilterData.ProductCategory[0].label\r\n\r\n                //             let ncategorybasedflow = selectedRecord[label] &&\r\n                //                 selectedRecord[label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //             if (ncategorybasedflow === transactionStatus.YES) {\r\n                //                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[label].value\r\n                //                 mapOfRegFilterData['nproductcode'] = -1\r\n                //                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //             }\r\n                //             else {\r\n                //                 if (mapOfRegFilterData.ProductCategory[0].child && mapOfRegFilterData.ProductCategory[0].child) {\r\n                //                     let pt = []\r\n                //                     mapOfRegFilterData.ProductCategory[0].child.map(x =>\r\n                //                         pt = comboComponents1.filter(y => y.label === x.label && y.name === 'Product')\r\n                //                     )\r\n                //                     if (pt.length > 0) {\r\n                //                         if (pt && pt[0]) {\r\n                //                             const pclabel = mapOfRegFilterData.ProductCategory[0].label\r\n                //                             const label = pt[0].label\r\n                //                             if (selectedRecord[pclabel] && selectedRecord[pclabel].value &&\r\n                //                                 selectedRecord[label] && selectedRecord[label].value) {\r\n                //                                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[pclabel].value\r\n                //                                 mapOfRegFilterData['nproductcode'] = selectedRecord[label].value\r\n                //                                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //                             }\r\n                //                         }\r\n                //                     }\r\n\r\n                //                 }\r\n\r\n                //             }\r\n                //         } else if (mapOfRegFilterData.childSpec && mapOfRegFilterData.childSpec) {\r\n                //             if (selectedRecord[inputParem.label] && selectedRecord[inputParem.label]) {\r\n                //                 const TemplateChild = parentcolumnlist && parentcolumnlist.filter(x => x.child && x.child.length > 0)\r\n                //                 if (TemplateChild && TemplateChild.length > 0) {\r\n                //                     let pc = {}\r\n                //                     TemplateChild.map(x => {\r\n                //                         x.child && x.child.map(y => {\r\n                //                             const data = comboComponents1.filter(x => x.label === y.label)\r\n                //                             if (data && data[0].templatemandatory) {\r\n                //                                 const name = data[0].name\r\n                //                                 if (name === \"Product Category\") {\r\n                //                                     pc = data[0]\r\n                //                                 }\r\n                //                             }\r\n                //                         })\r\n                //                     })\r\n\r\n                //                     if (pc && pc.label) {\r\n                //                         if (selectedRecord[pc.label]\r\n                //                             && selectedRecord[pc.label].value) {\r\n\r\n                //                             let ncategorybasedflow = selectedRecord[pc.label] &&\r\n                //                                 selectedRecord[pc.label]['item']['jsondata']['ncategorybasedflow'];\r\n\r\n                //                             if (ncategorybasedflow === transactionStatus.YES) {\r\n                //                                 mapOfRegFilterData['nproductcatcode'] = selectedRecord[pc.label].value\r\n                //                                 mapOfRegFilterData['nproductcode'] = -1\r\n                //                                 dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //                             } else {\r\n                //                                 if (pc.child && pc.child > 0) {\r\n                //                                     let pt = []\r\n                //                                     pc.child.map(x =>\r\n                //                                         pt = comboComponents1.filter(y => y.label === x.label && y.name === 'Product')\r\n                //                                     )\r\n                //                                     if (pt.length > 0) {\r\n                //                                         if (selectedRecord[pt[0].label] && selectedRecord[pt[0].label].value) {\r\n                //                                             mapOfRegFilterData['nproductcatcode'] = selectedRecord[pc.label].value\r\n                //                                             mapOfRegFilterData['nproductcode'] = selectedRecord[pt[0].label].value\r\n                //                                             dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                //                                         }\r\n                //                                     }\r\n                //                                 }\r\n\r\n                //                             }\r\n\r\n                //                         }\r\n                //                     }\r\n                //                 } else {\r\n                //                     selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                //                     selectedRecord[\"sversion\"] = \"\"\r\n                //                     dispatch({\r\n                //                         type: DEFAULT_RETURN,\r\n                //                         payload: {\r\n                //                             loading: false,\r\n                //                             comboData: { ...returnObj.comboData },\r\n                //                             selectedRecord,\r\n                //                             AgaramTree: [],\r\n                //                             ActiveKey: [],\r\n                //                             FocusKey: [],\r\n                //                             OpenNodes: [],\r\n                //                             Test: [],\r\n                //                             SelectedTest: [],\r\n                //                             selectedSpec: {},\r\n                //                             Component: [],\r\n                //                             selectComponent: {},\r\n                //                             selectedComponent: {},\r\n                //                             Specification: [],\r\n                //                             selectedMaster: [],\r\n                //                             subSampleDataGridList: []\r\n                //                         }\r\n                //                     })\r\n                //                 }\r\n                //             } else {\r\n                //                 selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                //                 selectedRecord[\"sversion\"] = \"\"\r\n                //                 dispatch({\r\n                //                     type: DEFAULT_RETURN,\r\n                //                     payload: {\r\n                //                         loading: false,\r\n                //                         comboData: { ...returnObj.comboData },\r\n                //                         selectedRecord,\r\n                //                         AgaramTree: [],\r\n                //                         ActiveKey: [],\r\n                //                         FocusKey: [],\r\n                //                         OpenNodes: [],\r\n                //                         Test: [],\r\n                //                         SelectedTest: [],\r\n                //                         selectedSpec: {},\r\n                //                         Component: [],\r\n                //                         selectComponent: {},\r\n                //                         selectedComponent: {},\r\n                //                         Specification: [],\r\n                //                         selectedMaster: [],\r\n                //                         subSampleDataGridList: []\r\n                //                     }\r\n                //                 })\r\n                //             }\r\n\r\n\r\n                //         }\r\n                //         else {\r\n                //             selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                //             selectedRecord[\"sversion\"] = \"\"\r\n                //             dispatch({\r\n                //                 type: DEFAULT_RETURN,\r\n                //                 payload: {\r\n                //                     loading: false,\r\n                //                     comboData: { ...returnObj.comboData },\r\n                //                     selectedRecord,\r\n                //                     AgaramTree: [],\r\n                //                     ActiveKey: [],\r\n                //                     FocusKey: [],\r\n                //                     OpenNodes: [],\r\n                //                     Test: [],\r\n                //                     SelectedTest: [],\r\n                //                     selectedSpec: {},\r\n                //                     Component: [],\r\n                //                     selectComponent: {},\r\n                //                     selectedComponent: {},\r\n                //                     Specification: [],\r\n                //                     selectedMaster: [],\r\n                //                     subSampleDataGridList: []\r\n                //                 }\r\n                //             })\r\n                //         }\r\n                //     }\r\n                // }\r\n                else if (project) {\r\n                    //console.log(\"data:\", mapOfRegFilterData, selectedRecord );\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                }\r\n                else if (productCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }));\r\n                }\r\n                else if (product) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Product\" ? inputParem.label : inputParem.ProductName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                subSampleDataGridList: []\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (instrumentCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (materialCategory) {\r\n                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                }\r\n                else if (instrument) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Instrument Name\" ? inputParem.label : inputParem.InstrumentName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Instrument Name\" ?\r\n                            inputParem.label : inputParem.InstrumentName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Instrument Name\" ? inputParem.label : inputParem.InstrumentName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (material) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName]) {\r\n                        mapOfRegFilterData[\"nproductcode\"] = selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ?\r\n                            inputParem.label : inputParem.MaterialName] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material\" ? inputParem.label : inputParem.MaterialName].value : -1\r\n                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else if (materialType) {\r\n                    if (selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ? inputParem.MaterialCategoryName : inputParem.label]) {\r\n                        const productCategory = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                            inputParem.MaterialCategoryName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                inputParem.MaterialCategoryName : inputParem.label] : undefined\r\n\r\n                        //  mapOfRegFilterData[\"nproductcatcode\"]\r\n                        if (productCategory !== undefined) {\r\n                            if (productCategory.item.ncategorybasedflow === 3||\r\n                               // ALPD-5474 added the condition by neeraj \r\n                                //Sample Registration and Schedular Configuration --> In spefic scenario spec is not loading.\r\n                                (productCategory.item.jsondata &&productCategory.item.jsondata.ncategorybasedflow === 3)) {\r\n                                mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                mapOfRegFilterData[\"nproductcode\"] = -1\r\n                                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                            } else {\r\n\r\n                                const product = selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                    inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"Material Type\" ?\r\n                                        inputParem.MaterialName : inputParem.label] : undefined\r\n                                if (product !== undefined) {\r\n                                    mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                    mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                    dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                } else {\r\n\r\n                                    const product = selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                        inputParem.MaterialName : inputParem.label] ? selectedRecord[inputParem.nameofdefaultcomp === \"MaterialType\" ?\r\n                                            inputParem.MaterialName : inputParem.label] : undefined\r\n                                    if (product !== undefined) {\r\n                                        mapOfRegFilterData[\"nproductcatcode\"] = productCategory.value\r\n                                        mapOfRegFilterData[\"nproductcode\"] = product.value\r\n                                        dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData }))\r\n                                    } else {\r\n                                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                                        selectedRecord[\"sversion\"] = \"\"\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                loading: false,\r\n                                                comboData: { ...returnObj.comboData },\r\n                                                selectedRecord,\r\n                                                AgaramTree: [],\r\n                                                ActiveKey: [],\r\n                                                FocusKey: [],\r\n                                                OpenNodes: [],\r\n                                                Test: [],\r\n                                                SelectedTest: [],\r\n                                                selectedSpec: {},\r\n                                                Component: [],\r\n                                                selectComponent: {},\r\n                                                selectedComponent: {},\r\n                                                Specification: [],\r\n                                                selectedMaster: [],\r\n                                                addMaster: false\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                            selectedRecord[\"sversion\"] = \"\"\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    comboData: { ...returnObj.comboData },\r\n                                    selectedRecord,\r\n                                    AgaramTree: [],\r\n                                    ActiveKey: [],\r\n                                    FocusKey: [],\r\n                                    OpenNodes: [],\r\n                                    Test: [],\r\n                                    SelectedTest: [],\r\n                                    selectedSpec: {},\r\n                                    Component: [],\r\n                                    selectComponent: {},\r\n                                    selectedComponent: {},\r\n                                    Specification: [],\r\n                                    selectedMaster: [],\r\n                                    addMaster: false\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        selectedRecord[\"nallottedspeccode\"] = \"\"\r\n                        selectedRecord[\"sversion\"] = \"\"\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                AgaramTree: [],\r\n                                ActiveKey: [],\r\n                                FocusKey: [],\r\n                                OpenNodes: [],\r\n                                Test: [],\r\n                                SelectedTest: [],\r\n                                selectedSpec: {},\r\n                                Component: [],\r\n                                selectComponent: {},\r\n                                selectedComponent: {},\r\n                                Specification: [],\r\n                                selectedMaster: [],\r\n                                addMaster: false\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n                else {\r\n\r\n                    let productCategory = false\r\n                    let map = {}\r\n                    if (userinfo.nformcode === 43) {\r\n                        if (mapOfRegFilterData.nsampletypecode === SampleType.CLINICALTYPE || mapOfRegFilterData.nsampletypecode === SampleType.PRODUCT ) {\r\n                            if (inputParem.child && inputParem.child.length > 0) {\r\n                                inputParem.child.map(y => {\r\n                                    const indexTemplateMandatory = parentcolumnlist.findIndex(z => z.label === y.label && z.templatemandatory && (z.name === 'Product Category' || z.name === 'Product'))\r\n                                    if (indexTemplateMandatory !== -1) {\r\n                                        const templateManRecord = parentcolumnlist[indexTemplateMandatory]\r\n                                        //  if (inputParem.nsampletypecode === SampleType.CLINICALTYPE) {\r\n                                        if (templateManRecord.name === 'Product Category') {\r\n                                            productCategory = true\r\n                                            if (selectedRecord[templateManRecord.label]) {\r\n                                                map = {\r\n                                                    nproductcatcode: selectedRecord[templateManRecord.label].value,\r\n                                                    nproductcode: map.nproductcode ||-1\r\n                                                }\r\n                                            } \r\n                                        }\r\n                                            else if (templateManRecord.name === 'Product') {\r\n                                                productCategory = true\r\n                                                if (selectedRecord[templateManRecord.label]) {\r\n                                                    map = {\r\n                                                        nproductcatcode: map.nproductcatcode || -1,\r\n                                                        nproductcode: selectedRecord[templateManRecord.label].value,\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                                else {\r\n                                                map = {\r\n                                                    nproductcatcode: -1,\r\n                                                    nproductcode: -1\r\n                                                }\r\n                                            }\r\n                                            //  }\r\n                                        \r\n\r\n                                    } else {\r\n                                        const indexTemplateMandatory = parentcolumnlist.findIndex(z => z.label === y.label)\r\n                                        if (indexTemplateMandatory !== -1) {\r\n                                            const templateManRecord = parentcolumnlist[indexTemplateMandatory]\r\n                                            if (templateManRecord.child && templateManRecord.child.length > 0) {\r\n                                                const val = childSpecLoadCheck(templateManRecord, childcolumnlist, productCategory, map, y.label, selectedRecord)\r\n                                                if (val.productCategory) {\r\n                                                    productCategory = val.productCategory\r\n                                                    map = { ...map, ...val.map }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n\r\n                                })\r\n                            }\r\n\r\n                            if (productCategory) {\r\n\t\t\t\t\t\t\t\t//ALPD-5678--Added by Vignesh R(10-04-2025)-->Sample Registration --> In Etica clinical type --> default spec is loaded.\r\n                                mapOfRegFilterData = { ...mapOfRegFilterData, nproductcatcode: map.nproductcatcode, nproductcode: map.nproductcode }\r\n                                dispatch(getTreeByProduct(mapOfRegFilterData, selectedRecord, { ...returnObj.comboData },inputParem));\r\n                            } else {\r\n                                dispatch({\r\n                                    type: DEFAULT_RETURN,\r\n                                    payload: {\r\n                                        loading: false,\r\n                                        comboData: { ...returnObj.comboData },\r\n                                        selectedRecord,\r\n                                        selectedMaster: [],\r\n                                        addMaster: false,\r\n                                        selectedControl: [],\r\n                                        masterComboColumnFiled: [],\r\n                                        masterDesign: [],\r\n                                        masterextractedColumnList: [],\r\n                                        masterfieldList: [],\r\n                                        masterdataList: [],\r\n                                        mastercomboComponents: [],\r\n                                        masterwithoutCombocomponent: [],\r\n                                        masterIndex: undefined,\r\n                                        screenName: inputParem.screenName,\r\n                                        loadCustomSearchFilter: false,\r\n                                       \r\n                                    }\r\n                                })\r\n                            }\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    comboData: { ...returnObj.comboData },\r\n                                    selectedRecord,\r\n                                    selectedMaster: [],\r\n                                    addMaster: false,\r\n                                    selectedControl: [],\r\n                                    masterComboColumnFiled: [],\r\n                                    masterDesign: [],\r\n                                    masterextractedColumnList: [],\r\n                                    masterfieldList: [],\r\n                                    masterdataList: [],\r\n                                    mastercomboComponents: [],\r\n                                    masterwithoutCombocomponent: [],\r\n                                    masterIndex: undefined,\r\n                                    screenName: inputParem.screenName,\r\n                                    loadCustomSearchFilter: false,\r\n                                  \r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    } else {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                comboData: { ...returnObj.comboData },\r\n                                selectedRecord,\r\n                                selectedMaster: [],\r\n                                addMaster: false,\r\n                                selectedControl: [],\r\n                                masterComboColumnFiled: [],\r\n                                masterDesign: [],\r\n                                masterextractedColumnList: [],\r\n                                masterfieldList: [],\r\n                                masterdataList: [],\r\n                                mastercomboComponents: [],\r\n                                masterwithoutCombocomponent: [],\r\n                                masterIndex: undefined,\r\n                                screenName: inputParem.screenName,\r\n                                loadCustomSearchFilter: false,\r\n                               \r\n                            }\r\n                        })\r\n                    }\r\n\r\n\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function validatePreview(inputParam) {\r\n    return function (dispatch) {\r\n\r\n        rsapi.post(\"dynamicpreregdesign/validatePreview\", { ...inputParam })\r\n            .then(response => {\r\n                if (response.data.rtn === \"Success\") {\r\n                    toast.info(intl.formatMessage({\r\n                        id: \"IDS_SUCCESSFULLYVALIDATE\"\r\n                    }));\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                        }\r\n                    })\r\n                } else {\r\n                    toast.warn(response.data.rtn);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addMasterRecord(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let requestUrl = '';\r\n        if (inputParam.isFileupload) {\r\n          const formData = inputParam.formData;\r\n          formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n          requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\r\n        } else {\r\n          requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData });\r\n        }\r\n       return requestUrl\r\n            .then(response => {\r\n                if (response.status === 202) {\r\n                    //HttpStatus:Accepted\r\n                    //Use this block when u need to display any success message\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    toast.success(response.data);\r\n                }\r\n                else if (response.status === 208) {\r\n                    //HttpStatus:Accepted\r\n                    //208-Already Reported\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    toast.warn(response.data);\r\n                } else {\r\n                    let masterIndex = inputParam.masterIndex\r\n                    let data = []\r\n                    const data1 = sortData(response.data);\r\n                    if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                        data = constructOptionList(data1.DynamicMasterData, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                    }\r\n                    else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                        if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter'\r\n                            || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                            data = [{ label: data1.SelectedPatient[inputParam.selectedControl[masterIndex].displaymember], value: data1.SelectedPatient[inputParam.selectedControl[masterIndex].valuemember], item: data1.SelectedPatient }]\r\n                        } else {\r\n                            data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                        }\r\n\r\n                    }\r\n                    else if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\r\n                        if (inputParam.selectedControl[masterIndex].inputtype === 'backendsearchfilter'\r\n                            || inputParam.selectedControl[masterIndex].inputtype === 'frontendsearchfilter') {\r\n                            //   data = constructOptionList(data1.PatientList, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                            data = [{ label: data1.ExternalOrder[inputParam.selectedControl[masterIndex].displaymember], value: data1.ExternalOrder[inputParam.selectedControl[masterIndex].valuemember], item: data1.ExternalOrder }]\r\n                        } else {\r\n                            data = constructOptionList(data1.ExternalOrder, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                        }\r\n                        \r\n                    }\r\n                    else {\r\n                        data = constructOptionList(data1, inputParam.selectedControl[masterIndex].valuemember, inputParam.selectedControl[masterIndex].displaymember).get(\"OptionList\")\r\n                    }\r\n\r\n                    const newdata = data.map((item1, index) => {\r\n                        item1 = { ...item1, item: { jsondata: { ...item1.item, jsondata: { ...item1.item } } } }\r\n                        return item1;\r\n                    })\r\n                    if (masterIndex === 0) {\r\n                        const selectedRecord = inputParam.selectedRecord || {}\r\n                        const selectedControl = inputParam.selectedControl || {}\r\n                        let comboData1 = {}\r\n                        if (inputParam.operation === 'create') {\r\n                            comboData1 = {\r\n                                ...newdata[0], item: {\r\n                                    ...newdata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                    \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                    \"source\": selectedControl[masterIndex].source\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const value = inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic' ?\r\n                                inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode : inputParam.masterEditObject[masterIndex].value\r\n                            let combodata = []\r\n                            if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                                combodata = newdata.filter(x => x.item.jsondata.ndynamicmastercode === value)\r\n                            } else {\r\n                                combodata = newdata.filter(x => x.value === value)\r\n                            }\r\n\r\n\r\n                            comboData1 = {\r\n                                ...combodata[0], item: {\r\n                                    ...combodata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                    \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                    \"source\": selectedControl[masterIndex].source\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                        selectedRecord[selectedControl[masterIndex].label] = comboData1\r\n                        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                            selectedRecord['spatientid'] = comboData1.item['jsondata']['spatientid']\r\n                        }\r\n                        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 43) {\r\n                            selectedRecord['nexternalordercode'] = comboData1.item['nexternalordercode']\r\n                        }\r\n                        const comboData = inputParam.comboData\r\n                        comboData[selectedControl[masterIndex].label] = newdata\r\n\r\n                        if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\r\n                            const childComboList = getSameRecordFromTwoArrays(inputParam.comboComponents, selectedControl[masterIndex].child, \"label\")\r\n                            let childColumnList = {};\r\n                            childComboList.map(columnList => {\r\n                                const val = comboChild(inputParam.comboComponents, columnList, childColumnList, false);\r\n                                childColumnList = val.childColumnList\r\n                            })\r\n\r\n                            const parentList = getSameRecordFromTwoArrays(inputParam.withoutCombocomponent, selectedControl[masterIndex].child, \"label\")\r\n\r\n\r\n                            const inputParem = {\r\n                                child: selectedControl[masterIndex].child,\r\n                                source: selectedControl[masterIndex].source,\r\n                                primarykeyField: selectedControl[masterIndex].valuemember,\r\n                                value: comboData1.value,\r\n                                item: comboData1.item,\r\n                                screenName: inputParam.screenName,\r\n                                nsampletypecode: inputParam.nsampletypecode ? inputParam.nsampletypecode : -1,\r\n                                loginProps: inputParam.loginProps,\r\n\t\t\t\t\t\t\t\t//ALPD-5678--Added by Vignesh R(10-04-2025)-->Sample Registration --> In Etica clinical type --> default spec is loaded.\r\n                                ntestgroupspecrequired:inputParam.ntestgroupspecrequired\r\n                            }\r\n\r\n                            \r\n                            if (inputParam.loadSubSample) {\r\n                                dispatch(getChildValues(inputParem,\r\n                                    inputParam.inputData.userinfo, selectedRecord, comboData,\r\n                                    childComboList, childColumnList,\r\n                                    inputParam.withoutCombocomponent,\r\n                                    [...childComboList, ...parentList], false, false, {ntestgroupspecrequired:inputParem.ntestgroupspecrequired},\r\n                                    false, false, false,\r\n                                    false, false, true, false))\r\n                            } else {\r\n                                dispatch(getChildValues(inputParem,\r\n                                    inputParam.inputData.userinfo, selectedRecord, comboData,\r\n                                    childComboList, childColumnList,\r\n                                    inputParam.withoutCombocomponent,\r\n                                    [...childComboList, ...parentList], false, false, inputParam.nsampletypecode === 5 ? { nportalrequired: inputParam.nportalrequired && inputParam.nportalrequired, nsampletypecode: inputParam.nsampletypecode, nneedsubsample: inputParam.nneedsubsample,ntestgroupspecrequired:inputParem.ntestgroupspecrequired } : {},\r\n                                    false, false, false,\r\n                                    false, false, false, false, inputParam.comboComponents))\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false,\r\n                                    addMaster: false,\r\n                                    [inputParam.comboName]: comboData,\r\n                                    selectedMaster: [],\r\n                                    [inputParam.selectedRecordName]: selectedRecord,\r\n                                    screenName: inputParam.screenName,\r\n                                    masterIndex: undefined,\r\n                                    mastercomboComponents: [],\r\n                                    masterwithoutCombocomponent: [],\r\n                                    masterComboColumnFiled: [],\r\n                                    masterextractedColumnList: [],\r\n                                    masterdataList: [],\r\n                                    masterDesign: [],\r\n                                    masterfieldList: [],\r\n                                    masterOperation: [],\r\n                                    masterEditObject: [],\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                    else {\r\n\r\n                        let selectedMaster = inputParam.selectedMaster || []\r\n                        let selectedControl = inputParam.selectedControl || []\r\n                        let comboData1 = {}\r\n\r\n                        if (inputParam.operation === 'create') {\r\n                            comboData1 = {\r\n                                ...newdata[0], item: {\r\n                                    ...newdata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                    \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                    \"source\": selectedControl[masterIndex].source\r\n                                }\r\n                            }\r\n                        } else {\r\n                            const value = inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic' ?\r\n                                inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode : inputParam.masterEditObject[masterIndex].value\r\n                            let combodata = []\r\n                            if (inputParam.selectedControl[masterIndex].table.item.component === 'Dynamic') {\r\n                                combodata = newdata.filter(x => x.item.jsondata.ndynamicmastercode === value)\r\n                            } else {\r\n                                combodata = newdata.filter(x => x.value === value)\r\n                            }\r\n\r\n                            comboData1 = {\r\n                                ...combodata[0], item: {\r\n                                    ...combodata[0].item, \"pkey\": selectedControl[masterIndex].valuemember,\r\n                                    \"nquerybuildertablecode\": selectedControl[masterIndex].nquerybuildertablecode,\r\n                                    \"source\": selectedControl[masterIndex].source\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        selectedMaster[masterIndex - 1][selectedControl[masterIndex].label] = comboData1\r\n\r\n                        // const comboData = inputParam.comboData\r\n                        // comboData[selectedControl[masterIndex].label] = newdata\r\n\r\n                        let masterdataList = inputParam.masterdataList || []\r\n                        masterdataList[masterIndex - 1] = { ...masterdataList[masterIndex - 1], [selectedControl[masterIndex].label]: newdata }\r\n\r\n                        if (selectedControl[masterIndex].child && selectedControl[masterIndex].child.length > 0) {\r\n                            const childComboList = getSameRecordFromTwoArrays(inputParam.mastercomboComponents[masterIndex - 1], selectedControl[masterIndex].child, \"label\")\r\n                            let childColumnList = {};\r\n                            childComboList.map(columnList => {\r\n                                const val = comboChild(inputParam.mastercomboComponents[masterIndex - 1], columnList, childColumnList, false);\r\n                                childColumnList = val.childColumnList\r\n                            })\r\n\r\n                            const parentList = getSameRecordFromTwoArrays(inputParam.masterwithoutCombocomponent[masterIndex - 1], selectedControl[masterIndex].child, \"label\")\r\n\r\n                            const inputParem = {\r\n                                child: selectedControl[masterIndex].child,\r\n                                source: selectedControl[masterIndex].source,\r\n                                primarykeyField: selectedControl[masterIndex].valuemember,\r\n                                value: comboData1.value,\r\n                                item: comboData1.item,\r\n                                screenName: inputParam.screenName\r\n                            }\r\n\r\n                            dispatch(getChildValuesForMasterAdd(inputParem,\r\n                                inputParam.inputData.userinfo, selectedMaster, inputParam.masterdataList,\r\n                                childComboList, childColumnList,\r\n                                inputParam.masterwithoutCombocomponent,\r\n                                [...childComboList, ...parentList], masterIndex, inputParam))\r\n\r\n\r\n\r\n                        } else {\r\n\r\n                            selectedControl = selectedControl && removeIndex(selectedControl, masterIndex)\r\n                            selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex)\r\n\r\n                            const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex)\r\n                            const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex)\r\n                            const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex)\r\n                            const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex)\r\n                            masterdataList = masterdataList && removeIndex(masterdataList, masterIndex)\r\n                            const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex)\r\n                            const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex)\r\n                            const masterOperation = inputParam.masterOperation && removeIndex(inputParam.masterOperation, masterIndex)\r\n                            const masterEditObject = inputParam.masterEditObject && removeIndex(inputParam.masterEditObject, masterIndex)\r\n                            const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode]\r\n                            masterIndex = (parseInt(masterIndex) - 1)\r\n\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    selectedControl,\r\n                                    selectedMaster,\r\n                                    mastercomboComponents,\r\n                                    masterwithoutCombocomponent,\r\n                                    masterComboColumnFiled,\r\n                                    masterextractedColumnList,\r\n                                    masterdataList,\r\n                                    masterDesign,\r\n                                    masterfieldList,\r\n                                    masterOperation,\r\n                                    masterEditObject,\r\n                                    loading: false,\r\n                                    // addMaster: false,\r\n                                    // masterdataList,\r\n                                    // selectedMaster: {},\r\n                                    //  selectedMaster: selectedMaster,\r\n\r\n                                    screenName,\r\n                                    masterIndex,\r\n\r\n                                }\r\n                            })\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n// export function removeIndex(data, removeIndex) {\r\n//     const data1 = [...data.splice(0, removeIndex), ...data.splice(removeIndex + 1)]\r\n//     return data1\r\n// }\r\n\r\nexport function getAddMasterCombo(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        let masterIndex = inputParam.masterIndex\r\n        inputParam.masterComboColumnFiled[masterIndex].map(item => {\r\n            if (item.needService === undefined) {\r\n                urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: inputParam.userinfo }));\r\n                item[\"fetchIndex\"] = urlArray.length - 1;\r\n            }\r\n        }\r\n        )\r\n        if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n            urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userinfo }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let ComboFieldData = [];\r\n                let masterdataList = inputParam.masterdataList;\r\n\r\n                inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\r\n                    if (item.needService === undefined) {\r\n\r\n                        ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue],\r\n                            item.foreignDataField, item.dataField, undefined, undefined, undefined,);\r\n                        masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\");\r\n                        //selectedMaster[masterIndex][item.dataField] = ComboFieldData.get(\"DefaultValue\");\r\n\r\n                    } else {\r\n                        if (item.child !== undefined) {\r\n                            masterdataList[masterIndex][item.dataField] = []\r\n                        } else if (item.useService !== undefined) {\r\n                            masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField]\r\n                        }\r\n\r\n                    }\r\n                });\r\n                let currentTime = ''\r\n                let selectedMaster = inputParam.selectedMaster || []\r\n                if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                    //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\r\n                    currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                    selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                    selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"])\r\n                    selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\r\n                    selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterIndex,\r\n                        selectedMaster,\r\n                        masterdataList,\r\n                        addMaster: true,\r\n                        loading: false,\r\n                        selectedControl: inputParam.selectedControl,\r\n                        masterfieldList: inputParam.masterfieldList,\r\n                        masterextractedColumnList: inputParam.masterextractedColumnList,\r\n                        masterprimaryKeyField: inputParam.masterprimaryKeyField,\r\n                        masterComboColumnFiled: inputParam.masterComboColumnFiled,\r\n                        screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                        mastercomboComponents: inputParam.mastercomboComponents,\r\n                        masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                        masterDesign: inputParam.masterDesign,\r\n                        masterOperation: inputParam.masterOperation,\r\n                       \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getDynamicMasterTempalte(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const masterIndex = inputParam.masterIndex\r\n        rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getMasterDesign\",\r\n            { userinfo: { ...inputParam.userinfo, nformcode: inputParam.selectedControl[inputParam.masterIndex].table.item.nformcode } })\r\n            .then(response => {\r\n                const design = response.data\r\n                const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent || []\r\n                let data = inputParam.masterdesignData || []\r\n                const masterextractedColumnList = inputParam.masterextractedColumnList || []\r\n\r\n                //masterwithoutCombocomponent[masterIndex] = []\r\n                // masterextractedColumnList[masterIndex] = []\r\n                data[masterIndex] = []\r\n                design.slideoutdesign.map(row => {\r\n                    row.children.map(column => {\r\n                        column.children.map(component => {\r\n                            if (component.hasOwnProperty(\"children\")) {\r\n                                component.children.map(componentrow => {\r\n                                    if (componentrow.inputtype === \"combo\") {\r\n                                        data[masterIndex].push(componentrow)\r\n                                    } else {\r\n                                        masterwithoutCombocomponent[masterIndex].push(componentrow)\r\n                                    }\r\n                                    if (componentrow.mandatory === true) {\r\n                                        if (componentrow.inputtype === \"email\") {\r\n                                            masterextractedColumnList[masterIndex].push({\r\n                                                \"mandatory\": true, \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                                \"validateFunction\": validateEmail,\r\n                                                \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                                \"controlType\": \"textbox\"\r\n                                            })\r\n                                        }\r\n                                        else {\r\n                                            masterextractedColumnList[masterIndex].push({\r\n                                                \"mandatory\": true,\r\n                                                \"idsName\": componentrow.label,\r\n                                                \"dataField\": componentrow.label,\r\n                                                \"mandatoryLabel\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                                \"controlType\": componentrow.inputtype === \"combo\" ?\r\n                                                    \"selectbox\" : \"textbox\"\r\n                                            })\r\n                                        }\r\n                                    }\r\n                                })\r\n                            }\r\n                            else {\r\n                                component.inputtype === \"combo\" ?\r\n                                    data[masterIndex].push(component)\r\n                                    : masterwithoutCombocomponent[masterIndex].push(component)\r\n\r\n                                if (component.mandatory === true) {\r\n                                    if (component.inputtype === \"email\") {\r\n                                        masterextractedColumnList[masterIndex].push({\r\n                                            \"mandatory\": true, \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"alertPreFix\": this.props.intl.formatMessage({ id: \"IDS_VALID\" }),\r\n                                            \"validateFunction\": validateEmail,\r\n                                            \"mandatoryLabel\": \"IDS_ENTER\",\r\n                                            \"controlType\": \"textbox\"\r\n                                        })\r\n                                    }\r\n                                    else {\r\n                                        masterextractedColumnList[masterIndex].push({\r\n                                            \"mandatory\": true,\r\n                                            \"idsName\": component.label,\r\n                                            \"dataField\": component.label,\r\n                                            \"mandatoryLabel\": component.inputtype === \"combo\" ?\r\n                                                \"IDS_SELECT\" : \"IDS_ENTER\",\r\n                                            \"controlType\": component.inputtype === \"combo\" ?\r\n                                                \"selectbox\" : \"textbox\"\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n                const comboComponents = inputParam.mastercomboComponents || []\r\n                comboComponents[masterIndex] = data[masterIndex];\r\n                let childColumnList = {};\r\n                data[masterIndex].map(columnList => {\r\n                    const val = comboChild(data[masterIndex], columnList, childColumnList, true);\r\n                    data[masterIndex] = val.data;\r\n                    childColumnList = val.childColumnList\r\n                })\r\n\r\n                const masterdesignData = inputParam.masterdesignData || []\r\n                masterdesignData[masterIndex] = [...data[masterIndex]]\r\n                const masterDesign = inputParam.masterDesign || []\r\n                masterDesign[masterIndex] = design\r\n                inputParam = {\r\n                    ...inputParam,\r\n                    masterchildColumnList: childColumnList,\r\n                    mastercomboComponents: comboComponents,\r\n                    masterextractedColumnList,\r\n                    masterwithoutCombocomponent,\r\n                    masterDesign,\r\n                    masterdesignData,\r\n                    masterOperation: inputParam.masterOperation\r\n                }\r\n\r\n\r\n                if (inputParam.masterOperation[masterIndex] === 'create') {\r\n\r\n                    dispatch(getDynamicMasterComboForAdd(inputParam, true))\r\n                } else {\r\n                    dispatch(getEditMasterCombo(inputParam))\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getDynamicMasterComboForAdd(inputParam, preview) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const masterIndex = inputParam.masterIndex\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: inputParam.masterdesignData[masterIndex],\r\n            childcolumnlist: inputParam.masterchildColumnList,\r\n            userinfo: inputParam.userinfo\r\n        })\r\n        const dateService = rsapi.post(\"dynamicpreregdesign/dateValidation\", {\r\n            datecolumnlist: inputParam.masterwithoutCombocomponent[masterIndex].filter(x => x.inputtype === \"date\"),\r\n            userinfo: inputParam.userinfo\r\n        })\r\n        let urlArray = [timeZoneService, actualService, dateService];\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: inputParam.userinfo.stimezoneid, value: inputParam.userinfo.ntimezonecode }\r\n                let selectedMaster = inputParam.selectedMaster || []\r\n                selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n                const newcomboData = parentChildComboLoad(inputParam.masterdesignData[masterIndex], response[1].data, selectedMaster[masterIndex], inputParam.masterchildColumnList,\r\n                    inputParam.masterwithoutCombocomponent[masterIndex], undefined, inputParam.userinfo.slanguagetypecode, inputParam.userinfo)\r\n\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                inputParam.masterwithoutCombocomponent[masterIndex].map(componentrow => {\r\n                    if (componentrow.inputtype === 'date') {\r\n                        selectedRecord1[selectedRecord1.label] = selectedRecord1[selectedRecord1.label] && selectedRecord1[componentrow.label] !== '-' ?\r\n                            rearrangeDateFormat(inputParam.userinfo, selectedRecord1[componentrow.label]) : \"\"\r\n\r\n                        if (selectedRecord1.nperiodcode) {\r\n                            selectedRecord1[componentrow.label + \"value\"] = response[2].data[componentrow.label] ?\r\n                                new Date(response[2].data[componentrow.label][\"datevalue\"]) : null;\r\n                        } else {\r\n                            selectedRecord1[componentrow.label + \"value\"] = new Date();\r\n                        }\r\n\r\n                        if (componentrow.hidebeforedate) {\r\n                            selectedRecord1[componentrow.label + \"min\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                        if (componentrow.hideafterdate) {\r\n                            selectedRecord1[componentrow.label + \"max\"] = selectedRecord1[componentrow.label + \"value\"]\r\n                        }\r\n                    }\r\n                    else if (componentrow.inputtype === \"radio\"\r\n                        || componentrow.inputtype === \"checkbox\"\r\n                        || componentrow.inputtype === \"predefineddropdown\") {\r\n\r\n                        if (componentrow['radiodefaultvalue']) {\r\n                            if (componentrow.inputtype === \"checkbox\") {\r\n\r\n                                let val = ''\r\n                                componentrow.radiodefaultvalue &&\r\n                                    componentrow.radiodefaultvalue.length > 0 && componentrow.radiodefaultvalue.map((x, i) => {\r\n                                        val = val + (i === componentrow.radiodefaultvalue.length - 1 ? x.label : x.label + ',')\r\n                                    })\r\n\r\n                                selectedRecord1[componentrow.label] = val\r\n\r\n                            } else if (componentrow.inputtype === \"predefineddropdown\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue : \"\";\r\n                            } else {\r\n                                selectedRecord1[componentrow.label] = componentrow.radiodefaultvalue ?\r\n                                    componentrow.radiodefaultvalue.label : \"\";\r\n                            }\r\n\r\n                        } else {\r\n                            if (componentrow.inputtype === \"radio\") {\r\n                                selectedRecord1[componentrow.label] = componentrow.radioOptions ?\r\n                                    componentrow.radioOptions.tags[0].text : \"\";\r\n                            }\r\n                        }\r\n\r\n                    }\r\n\r\n                })\r\n                //const masterchildColumnList=inputParam.masterchildColumnList || []\r\n                // masterchildColumnList[masterIndex] = comboData1\r\n                const masterdataList = inputParam.masterdataList || []\r\n                masterdataList[masterIndex] = comboData1\r\n                selectedMaster[masterIndex] = { ...selectedMaster[masterIndex], selectedRecord1 }\r\n                if (preview) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ...inputParam,\r\n                            mastertimeZoneList: timeZoneList,\r\n                            masterdefaultTimeZone: defaultTimeZone,\r\n                            loading: false,\r\n                            addMaster: true,\r\n                            masterdataList,\r\n                            selectedMaster,\r\n                            mastercomboComponents: inputParam.mastercomboComponents,\r\n                            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                            masterdesignData: inputParam.masterdesignData,\r\n                            masterIndex,\r\n                            // masterchildColumnList: inputParam.masterchildColumnList,\r\n                            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                            // operation: inputParam.masterOperation[masterIndex],\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                // console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getChildValuesForAddMaster(inputParam,\r\n    userinfo, selectedMaster, comboData, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly, masterIndex\r\n) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParam.child,\r\n            parentdata: inputParam.item.jsondata,\r\n            parentsource: inputParam.source,\r\n            [inputParam.primarykeyField]: inputParam.value,\r\n            valuemember: inputParam.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...comboData[masterIndex], ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj, selectedMaster[masterIndex], childcolumnlist, withoutCombocomponent[masterIndex], inputParam, userinfo.slanguagetypecode, userinfo)\r\n                selectedMaster[masterIndex] = { ...selectedMaster[masterIndex], ...returnObj.selectedRecord }\r\n                const masterdataList = comboData || []\r\n                masterdataList[masterIndex] = returnObj.comboData\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterdataList,\r\n                        selectedMaster\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getChildComboMaster(selectedMaster, filedName,\r\n    item, selectedControl, masterComboColumnFiled, masterdataList, userInfo, masterIndex) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const obj = masterComboColumnFiled[masterIndex][item.childIndex]\r\n        if(obj.ismutipleparent){\r\n            let inputData={\r\n                [item.foreignDataField]: selectedMaster[masterIndex][item.tableDataField], \r\n                [obj.parentMutipleTableDataField]: selectedMaster[masterIndex][obj.parentMutipleTableDataField], \r\n            }\r\n        urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, { ...inputData, userinfo: userInfo }))\r\n        }else{\r\n            urlArray.push(rsapi.post(obj.classUrl + \"/\" + obj.methodUrl, { [item.foreignDataField]: selectedMaster[masterIndex][item.tableDataField], userinfo: userInfo }))\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                selectedMaster[masterIndex][obj.dataField] = undefined\r\n                const ComboFieldData = constructOptionList(obj.objectValue === null ? response[0].data || [] : response[0].data[obj.objectValue], obj.foreignDataField,\r\n                    obj.foreignDisplayMember, undefined, undefined, undefined);\r\n                masterdataList[masterIndex][obj.dataField] = ComboFieldData.get(\"OptionList\");\r\n\r\n\r\n                if (item.childFieldToClear) {\r\n                    item.childFieldToClear.forEach(item1 => (\r\n\r\n                        selectedMaster[masterIndex] = {\r\n                            ...selectedMaster[masterIndex],\r\n                            [item1.label]: undefined,\r\n                            [item1.tablecolumnname]: undefined\r\n                        },\r\n                        masterdataList[masterIndex] = {\r\n                            ...masterdataList[masterIndex],\r\n                            [item1.label]: []\r\n                        }\r\n                    )\r\n                    );\r\n\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedMaster,\r\n                        masterdataList,\r\n                        loading: false,\r\n\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch(initRequest(false));\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getChildValuesForMasterAdd(inputParem,\r\n    userinfo, selectedMaster, masterdataList, parentcolumnlist,\r\n    childcolumnlist, withoutCombocomponent, parentListWithReadonly,\r\n    masterIndex, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('dynamicpreregdesign/getChildValues', {\r\n            child: inputParem.child,\r\n            parentdata: inputParem.item.jsondata,\r\n            parentsource: inputParem.source,\r\n            [inputParem.primarykeyField]: inputParem.value,\r\n            valuemember: inputParem.primarykeyField,\r\n            childcolumnlist,\r\n            userinfo,\r\n            parentcolumnlist\r\n        })\r\n            .then(response => {\r\n                let returnObj = { ...masterdataList[masterIndex - 1], ...response.data }\r\n                returnObj = parentChildComboLoad(parentListWithReadonly, returnObj,\r\n                    selectedMaster[masterIndex - 1],\r\n                    childcolumnlist, withoutCombocomponent[masterIndex - 1], inputParem,\r\n                    userinfo.slanguagetypecode, userinfo)\r\n                selectedMaster[masterIndex - 1] = { ...selectedMaster[masterIndex - 1], ...returnObj.selectedRecord }\r\n                masterdataList[masterIndex - 1] = returnObj.comboData\r\n\r\n\r\n                // const dataList = {\r\n\r\n                // }\r\n                const selectedControl = inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex)\r\n                selectedMaster = selectedMaster && removeIndex(selectedMaster, masterIndex)\r\n\r\n                const mastercomboComponents = inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex)\r\n                const masterwithoutCombocomponent = inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex)\r\n                const masterComboColumnFiled = inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex)\r\n                const masterextractedColumnList = inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex)\r\n                masterdataList = masterdataList && removeIndex(masterdataList, masterIndex)\r\n                const masterDesign = inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex)\r\n                const masterfieldList = inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex)\r\n                const screenName = selectedControl[masterIndex - 1].displayname[inputParam.userinfo.slanguagetypecode]\r\n                masterIndex = (parseInt(masterIndex) - 1)\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        // selectedControl: inputParam.selectedControl && removeIndex(inputParam.selectedControl, masterIndex),\r\n                        // selectedMaster: selectedMaster && removeIndex(selectedMaster, masterIndex),\r\n                        // mastercomboComponents: inputParam.mastercomboComponents && removeIndex(inputParam.mastercomboComponents, masterIndex),\r\n                        // masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent && removeIndex(inputParam.masterwithoutCombocomponent, masterIndex),\r\n                        // masterComboColumnFiled: inputParam.masterComboColumnFiled && removeIndex(inputParam.masterComboColumnFiled, masterIndex),\r\n                        // masterextractedColumnList: inputParam.masterextractedColumnList && removeIndex(inputParam.masterextractedColumnList, masterIndex),\r\n                        // masterdataList: masterdataList && removeIndex(masterdataList, masterIndex),\r\n                        // masterDesign: inputParam.masterDesign && removeIndex(inputParam.masterDesign, masterIndex),\r\n                        // masterfieldList: inputParam.masterfieldList && removeIndex(inputParam.masterfieldList, masterIndex),\r\n                        // screenName: inputParam.selectedControl[masterIndex - 1].displayname[userinfo.slanguagetypecode],\r\n                        // loading: false,\r\n                        //masterdataList,\r\n                        //selectedMaster,\r\n                        // ...dataList,\r\n                        //   masterIndex: (parseInt(masterIndex) - 1),\r\n                        // screenName: inputParem.screenName\r\n\r\n\r\n                        selectedControl,\r\n                        selectedMaster,\r\n                        mastercomboComponents,\r\n                        masterwithoutCombocomponent,\r\n                        masterComboColumnFiled,\r\n                        masterextractedColumnList,\r\n                        masterdataList,\r\n                        masterDesign,\r\n                        masterfieldList,\r\n                        loading: false,\r\n                        // addMaster: false,\r\n                        // masterdataList,\r\n                        // selectedMaster: {},\r\n                        //  selectedMaster: selectedMaster,\r\n\r\n                        screenName,\r\n                        masterIndex,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function viewExternalportalDetail(selectedControl, comboData, userinfo) {\r\n    return function (dispatch) {\r\n        if (selectedControl.table.item.nquerybuildertablecode === 222) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post('dynamicpreregdesign/getExternalportalDetail', {\r\n                nexternalordercode: comboData.value,\r\n                nquerybuildertablecode: selectedControl.table.item.nquerybuildertablecode,\r\n                userinfo,\r\n            })\r\n                .then(response => {\r\n                    let Map1 = new Map();\r\n                    response.data.Sample.map((item) => {\r\n                        const newData = response.data.Test.filter(x => x.nexternalordersamplecode === item.nexternalordersamplecode)\r\n                        Map1.set(item.nexternalordersamplecode, Object.values(newData))\r\n                    })\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            isDynamicViewSlideOut: true,\r\n                            dynamicExternalSample: response.data.Sample,\r\n                            dynamicExternalTestChild: Map1,\r\n                            dynamicGridSelectedId: response.data.Sample.length > 0 ? Object.keys(response.data.Sample[0].nexternalordersamplecode) : null,\r\n                            loading: false,\r\n                            selectedDynamicViewControl: selectedControl\r\n                            // dynamicExternalSubSample:[],\r\n                            // dynamicExternalTest:[]\r\n\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getEditMaster(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let masterIndex = inputParam.masterIndex\r\n        const componentName = inputParam.selectedControl[masterIndex].table.item.component;\r\n        const valueMember = inputParam.selectedControl[masterIndex].valuemember;\r\n\r\n        if (componentName === 'Type1Component' || componentName === 'Type2Component') {\r\n            rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getActive\" + inputParam.selectedControl[masterIndex].table.item.methodUrl + \"ById\", { userinfo: inputParam.userinfo, [valueMember]: inputParam.masterEditObject[masterIndex]['value'] })\r\n                .then(response => {\r\n                    if (response.status === 202) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        toast.success(response.data);\r\n                    }\r\n                    else if (response.status === 208) {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        toast.warn(response.data);\r\n                    } else {\r\n                        let masterIndex = inputParam.masterIndex\r\n                        const data = response.data;\r\n                        let selectedMaster = inputParam.selectedMaster || []\r\n\r\n                        inputParam.masterextractedColumnList[masterIndex].map(item => {\r\n                            let fieldName = item.dataField;\r\n                            if (item.controlType === \"checkbox\") {\r\n                                selectedMaster[masterIndex][item.controlName] = data[item.controlName] ? data[item.controlName] : transactionStatus.NO;\r\n                            }\r\n                            else {\r\n                                selectedMaster[masterIndex][fieldName] = data[fieldName] ? data[fieldName] : \"\";\r\n                            }\r\n                        });\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterIndex,\r\n                                selectedMaster,\r\n                                masterdataList: inputParam.masterdataList,\r\n                                addMaster: true,\r\n                                loading: false,\r\n                                selectedControl: inputParam.selectedControl,\r\n                                masterfieldList: inputParam.masterfieldList,\r\n                                masterextractedColumnList: inputParam.masterextractedColumnList,\r\n                                masterprimaryKeyField: inputParam.masterprimaryKeyField,\r\n                                masterComboColumnFiled: inputParam.masterComboColumnFiled,\r\n                                screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                                mastercomboComponents: inputParam.mastercomboComponents,\r\n                                masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                                masterDesign: inputParam.masterDesign, masterEditObject: inputParam.masterEditObject, masterOperation: inputParam.masterOperation\r\n                            }\r\n                        })\r\n                    }\r\n\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n\r\n\r\n        } else if (componentName === 'Type3Component') {\r\n            let urlArray = [];\r\n            urlArray.push(rsapi.post(inputParam.selectedControl[masterIndex].table.item.classUrl + \"/getActive\" + inputParam.selectedControl[masterIndex].table.item.methodUrl + \"ById\", { userinfo: inputParam.userinfo, [valueMember]: inputParam.masterEditObject[masterIndex]['value'] }))\r\n\r\n\r\n            inputParam.masterComboColumnFiled[masterIndex].map(item => {\r\n                // if (item.needService === undefined) {\r\n                let input = {}\r\n                if (item.needService === false) {\r\n                    if(item.ismutipleparent){\r\n                        input = { [item[\"parenttableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parenttableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parenttableDataField\"]],\r\n                        [item[\"parentMutipleTableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parentMutipleTableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parentMutipleTableDataField\"]]\r\n                    }\r\n    \r\n                            }else{\r\n                       input = { [item[\"parenttableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parenttableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parenttableDataField\"]] }\r\n     \r\n                            }\r\n                    // input = { [item[\"parenttableDataField\"]]: inputParam.masterEditObject[masterIndex].item.jsondata ? inputParam.masterEditObject[masterIndex].item.jsondata[item[\"parenttableDataField\"]] : inputParam.masterEditObject[masterIndex].item[item[\"parenttableDataField\"]] }\r\n                }\r\n                urlArray.push(rsapi.post(item.classUrl + \"/\" + item.methodUrl, { userinfo: inputParam.userinfo, ...input }));\r\n                item[\"fetchIndex\"] = urlArray.length - 1;\r\n                // }\r\n            }\r\n            )\r\n            if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                urlArray.push(rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputParam.userinfo }));\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let ComboFieldData = [];\r\n                    let masterdataList = inputParam.masterdataList;\r\n                    const data = response[0].data;\r\n                    let selectedMaster = inputParam.selectedMaster || []\r\n\r\n\r\n                    inputParam.masterextractedColumnList[masterIndex].map(item => {\r\n                        let fieldName = item.dataField;\r\n                        let fieldNamePK = item.tableDataField;\r\n\r\n                        // if (item.controlType === \"selectbox\") {\r\n                        //     // inputData[methodUrl][fieldName] = this.state.selectedMaster[fieldName] ? this.state.selectedMaster[fieldName].label ? this.state.selectedMaster[fieldName].label : \"\" : -1;\r\n                        //     selectedMaster[masterIndex][fieldName]= {lable:data[item.dataField],value:data[item.tableDataField]};\r\n\r\n                        // }\r\n                        if (item.controlType === \"datepicker\") {\r\n                            selectedMaster[masterIndex][fieldName] = rearrangeDateFormat(inputParam.userinfo, data[item.dateField] ? data[item.dateField] : \"\");\r\n                        }\r\n                        else if (item.controlType === \"checkbox\") {\r\n                            selectedMaster[masterIndex][item.controlName] = data[item.controlName] ? data[item.controlName] : transactionStatus.NO;\r\n                        }\r\n                        else {\r\n                            selectedMaster[masterIndex][fieldName] = data[fieldName] ? data[fieldName] : \"\";\r\n                            selectedMaster[masterIndex][fieldNamePK] = data[fieldNamePK] ? data[fieldNamePK] : -1;\r\n                        }\r\n\r\n\r\n                    })\r\n\r\n\r\n                    inputParam.masterComboColumnFiled[masterIndex].map((item, index) => {\r\n                        //  if (item.needService === undefined) {\r\n                        let fieldName = item.dataField;\r\n                        ComboFieldData = constructOptionList(item.objectValue === null ? response[item.fetchIndex].data || [] : response[item.fetchIndex].data[item.objectValue], item.foreignDataField,\r\n                            item.dataField, undefined, undefined, undefined);\r\n                        masterdataList[masterIndex][item.dataField] = ComboFieldData.get(\"OptionList\");\r\n\r\n                        if (masterdataList[masterIndex][item.dataField].length > 0) {\r\n                            selectedMaster[masterIndex][fieldName] = { ...masterdataList[masterIndex][item.dataField].filter(x => x.item[item.foreignDataField] === data[item.tableDataField])[0] }\r\n                        }\r\n\r\n\r\n\r\n\r\n                        // } else {\r\n                        //     if (item.child !== undefined) {\r\n                        //         masterdataList[masterIndex][item.dataField] = []\r\n                        //     } else if (item.useService !== undefined) {\r\n                        //         masterdataList[masterIndex][item.dataField] = masterdataList[masterIndex][inputParam.masterComboColumnFiled[masterIndex][item.useService].dataField]\r\n                        //     }\r\n\r\n                        // }\r\n                    });\r\n                    let currentTime = ''\r\n\r\n                    if (inputParam.selectedControl[masterIndex].table.item.nformcode === 137) {\r\n                        //const data=inputParam.masterComboColumnFiled.filter(x=>x.needService===undefined)\r\n                        currentTime = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                        selectedMaster[masterIndex][\"ddob\"] = rearrangeDateFormat(inputParam.userinfo, response[urlArray.length - 1].data);\r\n                        selectedMaster[masterIndex][\"sage\"] = ageCalculate(selectedMaster[\"ddob\"])\r\n                        selectedMaster[masterIndex][\"nneedcurrentaddress\"] = transactionStatus.NO;\r\n                        selectedMaster[masterIndex][\"today\"] = inputParam.userinfo;\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterIndex,\r\n                            selectedMaster,\r\n                            masterdataList,\r\n                            addMaster: true,\r\n                            loading: false,\r\n                            selectedControl: inputParam.selectedControl,\r\n                            masterfieldList: inputParam.masterfieldList,\r\n                            masterextractedColumnList: inputParam.masterextractedColumnList,\r\n                            masterprimaryKeyField: inputParam.masterprimaryKeyField,\r\n                            masterComboColumnFiled: inputParam.masterComboColumnFiled,\r\n                            screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                            mastercomboComponents: inputParam.mastercomboComponents,\r\n                            masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                            masterDesign: inputParam.masterDesign, masterOperation: inputParam.masterOperation, masterEditObject: inputParam.masterEditObject\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch(initRequest(false));\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n\r\n\r\n        }\r\n        else if (componentName === 'Dynamic') {\r\n\r\n            dispatch(getDynamicMasterTempalte(inputParam))\r\n\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport function getEditMasterCombo(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        let masterIndex = inputParam.masterIndex\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const selectedMaster1 = rsapi.post(\"/dynamicmaster/getActiveDynamicMasterById\", {\r\n            ndynamicmastercode: inputParam.masterEditObject[masterIndex].item ? inputParam.masterEditObject[masterIndex].item.jsondata.ndynamicmastercode : inputParam.masterEditObject[masterIndex].ndynamicmastercode,\r\n            parentcolumnlist: inputParam.masterdesignData[masterIndex],\r\n            childcolumnlist: inputParam.masterchildColumnList,\r\n            userinfo: inputParam.userinfo\r\n        })\r\n        urlArray = [timeZoneService, selectedMaster1]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let data = { ...response[1].data[\"EditData\"] };\r\n                let selectedMaster = inputParam.selectedMaster || []\r\n                selectedMaster[masterIndex] = selectedMaster[masterIndex] && { ...selectedMaster[masterIndex] } || {}\r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: inputParam.userinfo.stimezoneid, value: inputParam.userinfo.ntimezonecode };\r\n                const selectedRecord1 = { ...data }\r\n                const languagetypeCode = undefined;\r\n                const comboData = response[1].data;\r\n                delete comboData['EditData']\r\n                let comboValues = {}\r\n                if (inputParam.masterdesignData[masterIndex].length > 0) {\r\n                    inputParam.masterdesignData[masterIndex].map(x => {\r\n                        if (x.inputtype === 'combo') {\r\n                            if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                            {\r\n                                if (comboData[x.label].length > 0) {\r\n                                    if (comboData[x.label][0].label === undefined) {\r\n                                        const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                            x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                        comboData[x.label] = optionList.get(\"OptionList\");\r\n                                    } else {\r\n                                        comboData[x.label] = comboData[x.label]\r\n                                        const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                            x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode, x)\r\n                                    }\r\n                                } else {\r\n                                    comboData[x.label] = []\r\n                                }\r\n\r\n                                comboValues = childComboLoadForEdit(x, comboData, selectedRecord1,\r\n                                    inputParam.masterchildColumnList, inputParam.masterwithoutCombocomponent[masterIndex])\r\n                            } else {\r\n                                comboValues = {\r\n                                    \"comboData\": comboData,\r\n                                }\r\n                            }\r\n                        } else {\r\n                            comboValues = {\r\n                                comboData: comboData,\r\n                                ...comboValues\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    comboValues = {\r\n                        \"comboData\": comboData,\r\n                    }\r\n                }\r\n\r\n                if (inputParam.masterwithoutCombocomponent[masterIndex].length > 0) {\r\n                    inputParam.masterwithoutCombocomponent[masterIndex].map(item => {\r\n                        if (item.inputtype === \"date\") {\r\n                            if (selectedRecord1[item.label]) {\r\n                                selectedRecord1 = { ...selectedRecord1, [item.label]: rearrangeDateFormatforUI(inputParam.userinfo, selectedRecord1[item.label]) }\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                const masterdataList = inputParam.masterdataList || []\r\n                masterdataList[masterIndex] = comboValues.comboData\r\n                selectedMaster[masterIndex] = { ...selectedMaster[masterIndex], ...selectedRecord1 }\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...inputParam,\r\n                        mastertimeZoneList: timeZoneList,\r\n                        masterdefaultTimeZone: defaultTimeZone,\r\n                        loading: false,\r\n                        addMaster: true,\r\n                        masterdataList,\r\n                        selectedMaster,\r\n                        mastercomboComponents: inputParam.mastercomboComponents,\r\n                        masterwithoutCombocomponent: inputParam.masterwithoutCombocomponent,\r\n                        masterdesignData: inputParam.masterdesignData,\r\n                        masterIndex,\r\n                        screenName: inputParam.selectedControl[masterIndex].displayname[inputParam.userinfo.slanguagetypecode],\r\n                        masterOperation: inputParam.masterOperation,\r\n                        masterEditObject: inputParam.masterEditObject,\r\n\r\n                    }\r\n                })\r\n\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error:\", error);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}