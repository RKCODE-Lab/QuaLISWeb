{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\release\\\\AddReleaseTestComment.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { viewAttachment } from '../../actions';\nimport { connect } from 'react-redux';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { constructOptionList } from \"../../components/CommonScript\";\n\nclass AddReleaseTestAttachment extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let lstRegistrationSampleArno = this.props.masterData.RegistrationSampleArno;\n      let lstRegistrationTest = this.props.masterData.RegistrationTest;\n      let RegistrationSampleArno = [];\n      let RegistrationTest = [];\n      let ntransactionsamplecode = \"\";\n      let ntransactiontestcode = \"\";\n      let ssamplearno = null;\n      let stestsynonym = null;\n      const needSubSample = this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample;\n\n      if (fieldName === \"npreregno\") {\n        lstRegistrationSampleArno.map(item => {\n          if (item.item.npreregno === comboData.value) {\n            RegistrationSampleArno.push(item);\n          }\n        });\n\n        if (!needSubSample) {\n          lstRegistrationTest.map(item => {\n            if (item.item.ntransactionsamplecode === RegistrationSampleArno[0].item.ntransactionsamplecode) {\n              RegistrationTest.push(item);\n            }\n          });\n          ntransactionsamplecode = {\n            item: RegistrationSampleArno[0],\n            label: RegistrationSampleArno[0].label,\n            value: RegistrationSampleArno[0].value\n          };\n          ssamplearno = RegistrationSampleArno[0].item.ssamplearno;\n        }\n\n        let npreregno = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        let sarno = comboData.item.sarno;\n        selectedRecord = { ...selectedRecord,\n          RegistrationSampleArno,\n          RegistrationTest,\n          npreregno,\n          sarno,\n          ntransactionsamplecode,\n          ntransactiontestcode,\n          ssamplearno,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntransactionsamplecode\") {\n        lstRegistrationTest.map(item => {\n          if (item.item.ntransactionsamplecode === comboData.value) {\n            RegistrationTest.push(item);\n          }\n        });\n        ntransactionsamplecode = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        ssamplearno = comboData.item.ssamplearno;\n        selectedRecord = { ...selectedRecord,\n          RegistrationTest,\n          ntransactionsamplecode,\n          ssamplearno,\n          ntransactiontestcode,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ntransactiontestcode\") {\n        ntransactiontestcode = {\n          item: comboData.item,\n          label: comboData.label,\n          value: comboData.value\n        };\n        stestsynonym = comboData.item.stestsynonym;\n        selectedRecord = { ...selectedRecord,\n          ntransactiontestcode,\n          stestsynonym\n        };\n        this.setState({\n          selectedRecord\n        });\n      } else if (fieldName === \"ncommentsubtypecode\") {\n        rsapi.post(\"/comments/getSampleTestCommentsListById\", {\n          userinfo: this.props.userInfo,\n          ncommentsubtypecode: comboData.value\n        }).then(response => {\n          let listSampleTestComments = response.data.SampleTestComments;\n          const lstSampleTestComments = constructOptionList(listSampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\n          const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\n          selectedRecord[\"scommentsubtype\"] = comboData.label;\n          selectedRecord[\"ncommentsubtypecode\"] = comboData;\n          selectedRecord[\"nsampletestcommentscode\"] = \"\";\n          selectedRecord[\"scomments\"] = \"\";\n          selectedRecord[\"spredefinedname\"] = \"\";\n          this.setState({\n            SampleTestComments,\n            selectedRecord\n          });\n          this.props.childDataChange(selectedRecord);\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n\n          this.setState({\n            loading: false\n          });\n        });\n      } else if (fieldName === \"nsampletestcommentscode\") {\n        selectedRecord[\"nsampletestcommentscode\"] = comboData;\n        selectedRecord[\"spredefinedname\"] = comboData.label;\n        selectedRecord[\"scomments\"] = comboData.item && comboData.item.sdescription ? comboData.item.sdescription : \"\";\n        this.setState({\n          selectedRecord\n        });\n      }\n\n      this.props.childDataChange(selectedRecord);\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[event.target.name] = event.target.value;\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"nneedreport\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      if (selectedRecord[\"nneedreport\"] && selectedRecord[\"nneedreport\"] === transactionStatus.YES && selectedRecord[\"sfilename\"] !== undefined && selectedRecord[\"sfilename\"].length > 0) {\n        let fileFormat = false;\n        let requiredFileFormat = this.props.settings && this.props.settings[32] && this.props.settings[32].split(\",\");\n        let fileNameSplit = selectedRecord[\"sfilename\"] && Array.isArray(selectedRecord[\"sfilename\"]) ? selectedRecord[\"sfilename\"][0].name.split(\".\") : selectedRecord[\"sfilename\"].split(\".\");\n        requiredFileFormat.map(item => {\n          if (item.slice(1) === fileNameSplit[fileNameSplit.length - 1]) {\n            fileFormat = true;\n          }\n        });\n        selectedRecord[\"nneedreport\"] = fileFormat ? selectedRecord[\"nneedreport\"] : transactionStatus.NO;\n        !fileFormat && toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTSUPPORTSONLYFILEFORMATS\"\n        }));\n      }\n\n      this.setState({\n        selectedRecord\n      });\n      this.props.childDataChange(selectedRecord);\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      loading: false,\n      ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails,\n      dataState: dataState,\n      openModal: false,\n      inputParam: this.props.inputParam,\n      loadEsign: false,\n      operation: this.props.operation ? this.props.operation : \"\",\n      selectedRecord: this.props.selectedRecord,\n      isneedReport: this.props.isneedReport,\n      SampleTestComments: this.props.SampleTestComments\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.ReleaseTestCommentDetails !== prevProps.ReleaseTestCommentDetails) {\n      this.setState({\n        ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails\n      });\n    }\n\n    if (this.props.inputParam !== prevProps.inputParam) {\n      this.setState({\n        inputParam: this.props.inputParam\n      });\n    }\n\n    if (this.props.selectedRecord !== prevProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n\n    if (this.props.operation !== prevProps.operation) {\n      this.setState({\n        operation: this.props.operation\n      });\n    }\n\n    if (this.props.SampleTestComments !== prevProps.SampleTestComments) {\n      this.setState({\n        SampleTestComments: this.props.SampleTestComments\n      });\n    }\n  }\n\n  render() {\n    // const addReleaseTestComment =\n    //     this.props.controlMap.has(\"AddReleaseTestComment\") &&\n    //     this.props.controlMap.get(\"AddReleaseTestComment\").ncontrolcode;\n    const editReleaseTestComment = this.props.controlMap.has(\"EditReleaseTestComment\") && this.props.controlMap.get(\"EditReleaseTestComment\").ncontrolcode; // const editReleaseTestCommentParam = {\n    //     screenName: this.props.intl.formatMessage({ id: \"IDS_RELEASETESTCOMMENT\" }),\n    //     operation: \"update\", primaryKeyField: \"nreleasetestcommentcode\",\n    //     inputParam: this.state.inputParam,\n    //     userInfo: this.props.userInfo,\n    //     ncontrolCode: editReleaseTestComment\n    // };\n\n    this.fieldsForReleasedTestCommentGrid = [{\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }];\n    {\n      this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample && this.fieldsForReleasedTestCommentGrid.push({\n        \"idsName\": \"IDS_SAMPLEARNO\",\n        \"dataField\": \"ssamplearno\",\n        \"width\": \"200px\"\n      });\n    }\n    this.fieldsForReleasedTestCommentGrid.push({\n      \"idsName\": \"IDS_TESTSYNONYM\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SCREENNAME\",\n      \"dataField\": \"sformname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTNAME\",\n      \"dataField\": \"scommentsubtype\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ABBREVIATIONNAME\",\n      \"dataField\": \"spredefinedname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"scomments\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INCULDEINREPORT\",\n      \"dataField\": \"sneedreport\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERNAME\",\n      \"dataField\": \"susername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_USERROLENAME\",\n      \"dataField\": \"suserrolename\",\n      \"width\": \"200px\"\n    });\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_COMMENTNAME\"\n      }),\n      isSearchable: true,\n      name: \"ncommentsubtypecode\",\n      showOption: true,\n      options: this.props.CommentSubType || [],\n      optionId: \"ncommentsubtypecode\",\n      optionValue: \"scommentsubtype\",\n      value: this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"] || \"\",\n      onChange: value => this.onComboChange(value, 'ncommentsubtypecode'),\n      isMandatory: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 29\n      }\n    }), this.state.selectedRecord && this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3 ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_ABBREVIATIONNAME\"\n      }),\n      isSearchable: true,\n      name: \"nsampletestcommentscode\",\n      showOption: true,\n      options: this.state.SampleTestComments || [],\n      optionId: \"nsampletestcommentscode\",\n      optionValue: \"spredefinedname\",\n      value: this.state.selectedRecord[\"nsampletestcommentscode\"] && this.state.selectedRecord[\"nsampletestcommentscode\"] || \"\",\n      onChange: value => this.onComboChange(value, 'nsampletestcommentscode'),\n      isMandatory: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 33\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(FormTextarea, {\n      formGroupClassName: \"remove-floating-label-margin\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_COMMENT\"\n      }),\n      name: \"scomments\",\n      type: \"text\",\n      required: false,\n      isMandatory: true,\n      value: this.state.selectedRecord[\"scomments\"] && this.state.selectedRecord[\"scomments\"] || \"\",\n      onChange: event => this.onInputOnChange(event),\n      maxLength: 1500,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_ARNUMBER\"\n      }),\n      isSearchable: true,\n      name: \"npreregno\",\n      isDisabled: this.state.operation === \"create\" ? false : true,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationArno : [],\n      optionId: \"npreregno\",\n      optionValue: \"sarno\",\n      value: this.state.selectedRecord ? this.state.selectedRecord.npreregno : \"\",\n      onChange: event => this.onComboChange(event, 'npreregno'),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    })), this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample && /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLEARNO\"\n      }),\n      isSearchable: true,\n      name: \"ntransactionsamplecode\",\n      isDisabled: this.state.operation === \"create\" ? false : true,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationSampleArno : [],\n      optionId: \"ntransactionsamplecode\",\n      optionValue: \"ssamplearno\",\n      value: this.state.selectedRecord ? this.state.selectedRecord.ntransactionsamplecode : \"\",\n      onChange: event => this.onComboChange(event, 'ntransactionsamplecode'),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TESTSYNONYM\"\n      }),\n      isSearchable: true,\n      name: \"ntransactiontestcode\",\n      isDisabled: this.state.operation === \"create\" ? false : true,\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SELECTRECORD\"\n      }),\n      isMandatory: true,\n      options: this.state.selectedRecord ? this.state.selectedRecord.RegistrationTest : [],\n      optionId: \"ntransactiontestcode\",\n      optionValue: \"stestsynonym\",\n      value: this.state.selectedRecord ? this.state.selectedRecord.ntransactiontestcode : \"\",\n      onChange: event => this.onComboChange(event, 'ntransactiontestcode'),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"12\",\n      className: \"mt-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_INCULDEINREPORT\"\n      }),\n      type: \"switch\",\n      name: \"nneedreport\",\n      onChange: event => this.onInputOnChange(event, 1),\n      defaultValue: false,\n      isMandatory: false,\n      required: true,\n      checked: this.state.selectedRecord ? this.state.selectedRecord.nneedreport === transactionStatus.YES ? true : false : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default connect(null, {\n  viewAttachment\n})(injectIntl(AddReleaseTestAttachment));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/release/AddReleaseTestComment.jsx"],"names":["React","Col","Row","injectIntl","transactionStatus","viewAttachment","connect","CustomSwitch","FormTextarea","FormSelectSearch","rsapi","toast","constructOptionList","AddReleaseTestAttachment","Component","constructor","props","onComboChange","comboData","fieldName","selectedRecord","state","lstRegistrationSampleArno","masterData","RegistrationSampleArno","lstRegistrationTest","RegistrationTest","ntransactionsamplecode","ntransactiontestcode","ssamplearno","stestsynonym","needSubSample","realRegSubTypeValue","nneedsubsample","map","item","npreregno","value","push","label","sarno","setState","post","userinfo","userInfo","ncommentsubtypecode","then","response","listSampleTestComments","data","SampleTestComments","lstSampleTestComments","get","childDataChange","catch","error","status","message","warn","loading","sdescription","onInputOnChange","event","target","name","type","checked","YES","NO","undefined","length","fileFormat","requiredFileFormat","settings","split","fileNameSplit","Array","isArray","slice","intl","formatMessage","id","dataState","skip","take","parseInt","ReleaseTestCommentDetails","openModal","inputParam","loadEsign","operation","isneedReport","componentDidUpdate","prevProps","render","editReleaseTestComment","controlMap","has","ncontrolcode","fieldsForReleasedTestCommentGrid","CommentSubType","RegistrationArno","nneedreport"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { viewAttachment } from '../../actions';\r\nimport { connect } from 'react-redux';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { constructOptionList } from \"../../components/CommonScript\";\r\n\r\nclass AddReleaseTestAttachment extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            loading: false,\r\n            ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails,\r\n            dataState: dataState,\r\n            openModal: false,\r\n            inputParam: this.props.inputParam,\r\n            loadEsign: false,\r\n            operation: this.props.operation ? this.props.operation : \"\",\r\n            selectedRecord: this.props.selectedRecord,\r\n            isneedReport: this.props.isneedReport,\r\n            SampleTestComments: this.props.SampleTestComments\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.ReleaseTestCommentDetails !== prevProps.ReleaseTestCommentDetails) {\r\n            this.setState({ ReleaseTestCommentDetails: this.props.ReleaseTestCommentDetails })\r\n        }\r\n        if (this.props.inputParam !== prevProps.inputParam) {\r\n            this.setState({ inputParam: this.props.inputParam })\r\n        }\r\n        if (this.props.selectedRecord !== prevProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord })\r\n        }\r\n        if (this.props.operation !== prevProps.operation) {\r\n            this.setState({ operation: this.props.operation })\r\n        }\r\n        if (this.props.SampleTestComments !== prevProps.SampleTestComments) {\r\n            this.setState({ SampleTestComments: this.props.SampleTestComments })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // const addReleaseTestComment =\r\n        //     this.props.controlMap.has(\"AddReleaseTestComment\") &&\r\n        //     this.props.controlMap.get(\"AddReleaseTestComment\").ncontrolcode;\r\n\r\n        const editReleaseTestComment =\r\n            this.props.controlMap.has(\"EditReleaseTestComment\") &&\r\n            this.props.controlMap.get(\"EditReleaseTestComment\").ncontrolcode;\r\n\r\n        // const editReleaseTestCommentParam = {\r\n        //     screenName: this.props.intl.formatMessage({ id: \"IDS_RELEASETESTCOMMENT\" }),\r\n        //     operation: \"update\", primaryKeyField: \"nreleasetestcommentcode\",\r\n        //     inputParam: this.state.inputParam,\r\n        //     userInfo: this.props.userInfo,\r\n        //     ncontrolCode: editReleaseTestComment\r\n        // };\r\n\r\n        this.fieldsForReleasedTestCommentGrid =\r\n            [\r\n                { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" }\r\n            ]\r\n        {\r\n            this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample &&\r\n                this.fieldsForReleasedTestCommentGrid.push(\r\n                    { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" }\r\n                )\r\n        }\r\n        this.fieldsForReleasedTestCommentGrid.push(\r\n            { \"idsName\": \"IDS_TESTSYNONYM\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sformname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_ABBREVIATIONNAME\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_USERROLENAME\", \"dataField\": \"suserrolename\", \"width\": \"200px\" }\r\n        )\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n\r\n                    {\r\n                        <Col md=\"12\" className=\"mt-4\">\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_COMMENTNAME\" })}\r\n                                isSearchable={true}\r\n                                name={\"ncommentsubtypecode\"}\r\n                                showOption={true}\r\n                                options={this.props.CommentSubType || []}\r\n                                optionId='ncommentsubtypecode'\r\n                                optionValue='scommentsubtype'\r\n                                value={this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"] || \"\"}\r\n                                onChange={value => this.onComboChange(value, 'ncommentsubtypecode')}\r\n                                isMandatory={true}\r\n                            />\r\n                            {this.state.selectedRecord && this.state.selectedRecord[\"ncommentsubtypecode\"] && this.state.selectedRecord[\"ncommentsubtypecode\"].value === 3 ?\r\n                                <FormSelectSearch\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_ABBREVIATIONNAME\" })}\r\n                                    isSearchable={true}\r\n                                    name={\"nsampletestcommentscode\"}\r\n                                    showOption={true}\r\n                                    options={this.state.SampleTestComments || []}\r\n                                    optionId='nsampletestcommentscode'\r\n                                    optionValue='spredefinedname'\r\n                                    value={this.state.selectedRecord[\"nsampletestcommentscode\"] && this.state.selectedRecord[\"nsampletestcommentscode\"] || \"\"}\r\n                                    onChange={value => this.onComboChange(value, 'nsampletestcommentscode')}\r\n                                    isMandatory={true}\r\n                                /> : \"\"}\r\n                            <FormTextarea\r\n                                formGroupClassName=\"remove-floating-label-margin\"\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_COMMENT\" })}\r\n                                name={\"scomments\"}\r\n                                type=\"text\"\r\n                                required={false}\r\n                                isMandatory={true}\r\n                                value={this.state.selectedRecord[\"scomments\"] && this.state.selectedRecord[\"scomments\"] || \"\"}\r\n                                onChange={(event) => this.onInputOnChange(event)}\r\n                                maxLength={1500}\r\n                            />\r\n                        </Col>\r\n                    }\r\n\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_ARNUMBER\" })}\r\n                            isSearchable={true}\r\n                            name={\"npreregno\"}\r\n                            isDisabled={this.state.operation === \"create\" ? false : true}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationArno : []}\r\n                            optionId='npreregno'\r\n                            optionValue='sarno'\r\n                            value={this.state.selectedRecord ? this.state.selectedRecord.npreregno : \"\"}\r\n                            onChange={(event) => this.onComboChange(event, 'npreregno')}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    {this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample &&\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLEARNO\" })}\r\n                                isSearchable={true}\r\n                                name={\"ntransactionsamplecode\"}\r\n                                isDisabled={this.state.operation === \"create\" ? false : true}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={true}\r\n                                options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationSampleArno : []}\r\n                                optionId='ntransactionsamplecode'\r\n                                optionValue='ssamplearno'\r\n                                value={this.state.selectedRecord ? this.state.selectedRecord.ntransactionsamplecode : \"\"}\r\n                                onChange={(event) => this.onComboChange(event, 'ntransactionsamplecode')}\r\n                                closeMenuOnSelect={true}\r\n                                alphabeticalSort={true}\r\n                            />\r\n                        </Col>\r\n                    }\r\n\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_TESTSYNONYM\" })}\r\n                            isSearchable={true}\r\n                            name={\"ntransactiontestcode\"}\r\n                            isDisabled={this.state.operation === \"create\" ? false : true}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            options={this.state.selectedRecord ? this.state.selectedRecord.RegistrationTest : []}\r\n                            optionId='ntransactiontestcode'\r\n                            optionValue='stestsynonym'\r\n                            value={this.state.selectedRecord ? this.state.selectedRecord.ntransactiontestcode : \"\"}\r\n                            onChange={(event) => this.onComboChange(event, 'ntransactiontestcode')}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                        />\r\n                    </Col>\r\n\r\n                    <Col md=\"12\" className=\"mt-4\">\r\n                        <CustomSwitch\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_INCULDEINREPORT\" })}\r\n                            type=\"switch\"\r\n                            name={\"nneedreport\"}\r\n                            onChange={(event) => this.onInputOnChange(event, 1)}\r\n                            defaultValue={false}\r\n                            isMandatory={false}\r\n                            required={true}\r\n                            checked={this.state.selectedRecord ? this.state.selectedRecord.nneedreport === transactionStatus.YES ? true : false : false}\r\n                        />\r\n                    </Col>\r\n                    {/* : \"\"} */}\r\n\r\n                </Row>\r\n            </>\r\n        );\r\n    };\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let lstRegistrationSampleArno = this.props.masterData.RegistrationSampleArno;\r\n        let lstRegistrationTest = this.props.masterData.RegistrationTest;\r\n        let RegistrationSampleArno = [];\r\n        let RegistrationTest = [];\r\n        let ntransactionsamplecode = \"\";\r\n        let ntransactiontestcode = \"\";\r\n        let ssamplearno = null;\r\n        let stestsynonym = null;\r\n        const needSubSample = this.props.masterData.realRegSubTypeValue && this.props.masterData.realRegSubTypeValue.nneedsubsample;\r\n        if (fieldName === \"npreregno\") {\r\n            lstRegistrationSampleArno.map(item => {\r\n                if (item.item.npreregno === comboData.value) {\r\n                    RegistrationSampleArno.push(item);\r\n                }\r\n            });\r\n            if (!needSubSample) {\r\n                lstRegistrationTest.map(item => {\r\n                    if (item.item.ntransactionsamplecode === RegistrationSampleArno[0].item.ntransactionsamplecode) {\r\n                        RegistrationTest.push(item);\r\n                    }\r\n                });\r\n                ntransactionsamplecode = {\r\n                    item: RegistrationSampleArno[0],\r\n                    label: RegistrationSampleArno[0].label,\r\n                    value: RegistrationSampleArno[0].value\r\n                }\r\n                ssamplearno = RegistrationSampleArno[0].item.ssamplearno\r\n            }\r\n            let npreregno = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            };\r\n            let sarno = comboData.item.sarno;\r\n            selectedRecord = {\r\n                ...selectedRecord, RegistrationSampleArno, RegistrationTest, npreregno\r\n                , sarno, ntransactionsamplecode, ntransactiontestcode, ssamplearno, stestsynonym\r\n            };\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ntransactionsamplecode\") {\r\n            lstRegistrationTest.map(item => {\r\n                if (item.item.ntransactionsamplecode === comboData.value) {\r\n                    RegistrationTest.push(item);\r\n                }\r\n            });\r\n            ntransactionsamplecode = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            }\r\n            ssamplearno = comboData.item.ssamplearno;\r\n            selectedRecord = {\r\n                ...selectedRecord, RegistrationTest, ntransactionsamplecode\r\n                , ssamplearno, ntransactiontestcode, stestsynonym\r\n            };\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ntransactiontestcode\") {\r\n            ntransactiontestcode = {\r\n                item: comboData.item,\r\n                label: comboData.label,\r\n                value: comboData.value\r\n            }\r\n            stestsynonym = comboData.item.stestsynonym;\r\n            selectedRecord = {\r\n                ...selectedRecord, ntransactiontestcode\r\n                , stestsynonym\r\n            }\r\n            this.setState({ selectedRecord });\r\n        } else if (fieldName === \"ncommentsubtypecode\") {\r\n            rsapi.post(\"/comments/getSampleTestCommentsListById\", {\r\n                userinfo: this.props.userInfo,\r\n                ncommentsubtypecode: comboData.value\r\n            })\r\n                .then(response => {\r\n                    let listSampleTestComments = response.data.SampleTestComments;\r\n                    const lstSampleTestComments = constructOptionList(listSampleTestComments || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, true);\r\n                    const SampleTestComments = lstSampleTestComments.get(\"OptionList\");\r\n                    selectedRecord[\"scommentsubtype\"] = comboData.label;\r\n                    selectedRecord[\"ncommentsubtypecode\"] = comboData;\r\n                    selectedRecord[\"nsampletestcommentscode\"] = \"\";\r\n                    selectedRecord[\"scomments\"] = \"\";\r\n                    selectedRecord[\"spredefinedname\"] = \"\";\r\n                    this.setState({\r\n                        SampleTestComments, selectedRecord,\r\n                    });\r\n                    this.props.childDataChange(selectedRecord);\r\n                }).catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                });\r\n        } else if (fieldName === \"nsampletestcommentscode\") {\r\n            selectedRecord[\"nsampletestcommentscode\"] = comboData;\r\n            selectedRecord[\"spredefinedname\"] = comboData.label;\r\n            selectedRecord[\"scomments\"] = comboData.item && comboData.item.sdescription ? comboData.item.sdescription : \"\";\r\n            this.setState({ selectedRecord });\r\n        }\r\n        this.props.childDataChange(selectedRecord);\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[event.target.name] = event.target.value;\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"nneedreport\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        if (selectedRecord[\"nneedreport\"] && selectedRecord[\"nneedreport\"] === transactionStatus.YES && selectedRecord[\"sfilename\"] !== undefined && selectedRecord[\"sfilename\"].length > 0) {\r\n            let fileFormat = false;\r\n            let requiredFileFormat = this.props.settings && this.props.settings[32] && this.props.settings[32].split(\",\");\r\n            let fileNameSplit = selectedRecord[\"sfilename\"] && Array.isArray(selectedRecord[\"sfilename\"]) ? selectedRecord[\"sfilename\"][0].name.split(\".\") : selectedRecord[\"sfilename\"].split(\".\");\r\n            requiredFileFormat.map(item => {\r\n                if (item.slice(1) === fileNameSplit[fileNameSplit.length - 1]) {\r\n                    fileFormat = true;\r\n                }\r\n            });\r\n            selectedRecord[\"nneedreport\"] = fileFormat ? selectedRecord[\"nneedreport\"] : transactionStatus.NO;\r\n            !fileFormat && toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTSUPPORTSONLYFILEFORMATS\" }));\r\n        }\r\n        this.setState({ selectedRecord })\r\n        this.props.childDataChange(selectedRecord);\r\n    }\r\n\r\n}\r\n\r\nexport default connect(null, { viewAttachment })(injectIntl(AddReleaseTestAttachment));"]},"metadata":{},"sourceType":"module"}