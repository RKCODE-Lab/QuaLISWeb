{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { filterRecordBasedOnTwoArrays, sortData, rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList, constructjsonOptionDefault, childComboLoad } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { intl } from '../components/App';\nimport { initRequest } from './LoginAction';\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'; //import { getTestChildTabDetail } from './index.js'\n\nimport { constructOptionList } from '../components/CommonScript';\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegTypeBySampleType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getSubSampleChildTabDetail(inputData) {\n  return function (dispatch) {\n    if (inputData.npreregno.length > 0) {\n      let inputParamData = {\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n\n      switch (inputData.activeSampleTab) {\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          url = \"attachment/getSubSampleAttachment\";\n          break;\n\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          break;\n\n        default:\n          url = null;\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n        rsapi.post(url, inputParamData).then(response => {\n          let responseData = { ...response.data\n          };\n          responseData = sortData(responseData);\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData.masterData,\n                ...responseData,\n                selectedSample: inputData.selectedSample,\n                selectedTestCode: inputData.ntransactiontestcode\n              },\n              loading: false,\n              showFilter: false,\n              activeSampleTab: inputData.activeSampleTab,\n              screenName: inputData.screenName\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              selectedSample: inputData.selectedSample\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      toast.warn(\"Please Select a Sample\");\n    }\n  };\n}\nexport function getRegTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      // const RegistrationSubType = response.data[\"RegistrationSubType\"];\n      //  console.log(response.data);\n      // RegistrationSubType.length > 0 ?\n      //     selectedRecord[\"nregsubtypecode\"] = {\n      //         \"value\": RegistrationSubType[0].nregsubtypecode,\n      //         \"label\": RegistrationSubType[0].sregsubtypename\n      //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\n      // const [labelname] = event.item;\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getRegSubTypeByRegType\", Map).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        [labelname]: { ...event.item\n        }\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getComponentTestBySpec\", Map).then(response => {\n      const {\n        Component,\n        Test\n      } = response.data;\n      let slno = Component.length > 0 ? Component[0].slno : -1;\n      let selectedComponent = Component.length > 0 ? Component[0] : undefined;\n      let SelectedTest = [];\n\n      if (Object.keys(Test).length > 0) {\n        SelectedTest = Test[slno];\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectedComponent,\n          loading: false,\n          selectedRecord,\n          popUptestDataState: {\n            skip: 0,\n            take: 10\n          }\n        }\n      });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let component = { ...objComponent\n    };\n    component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\n    component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\n    component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\n    component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\n    component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\n    component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\n    component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\n    component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\n    component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\n    component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\n    component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\n    component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\n    const dreceiveddate = objComponent[\"dreceiveddate\"];\n    component[\"dreceiveddate\"] = dreceiveddate; //formatInputDate(objComponent[\"dreceiveddate\"], false);\n\n    component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo); //formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\n    // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\n\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: component.nspecsampletypecode,\n      slno: component.slno\n    }).then(response => {\n      let TestData = response.data;\n      let slno = component.slno;\n      let SelectedTest = [];\n      let loadComponent = true;\n      let selectComponent = {};\n      let showSaveContinue = true;\n      let SelectedSource = []; // let openChildModal = true;\n\n      let selectedComponent = undefined;\n      let parentPopUpSize = \"lg\"; // selectComponent = objComponent\n\n      if (nflag === 1) {\n        loadComponent = true;\n        objComponent[\"smanuflotno\"] = \"\";\n        objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime); //new Date(LoginProps.CurrentTime);\n\n        selectComponent = objComponent;\n      } else {\n        loadComponent = false;\n        parentPopUpSize = \"xl\"; // openChildModal = false;\n\n        showSaveContinue = false;\n        selectComponent = undefined;\n      }\n\n      let Test = LoginProps.Test || [];\n      let Component = LoginProps.Component || [];\n      Component.unshift(component);\n      selectedComponent = component;\n      Test[slno] = response.data;\n      SelectedTest = TestData;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Component,\n          Test,\n          SelectedTest,\n          selectComponent,\n          selectedComponent,\n          loadComponent,\n          showSaveContinue,\n          parentPopUpSize,\n          loading: false,\n          SelectedSource\n        }\n      }); // console.log(response.data);\n    }).catch(error => {\n      //   console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function EditComponent(Map, component, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const TimeZoneField = response[1].data;\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      component[\"ncomponentcode\"] = {\n        label: component.scomponentname,\n        value: component.ncomponentcode\n      };\n      component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\n      component[\"scomments\"] = component[\"scomments\"];\n      let ntzdreceivedate = component.ntzdreceivedate;\n\n      if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\n        ntzdreceivedate = component.ntzdreceivedate.value;\n      }\n\n      component[\"ntzdreceivedate\"] = component.ntzdreceivedate ? {\n        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid,\n        \"value\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\n      } : \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          childoperation: \"update\",\n          lstComponent,\n          ChildscreenName: \"Component\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          timeZoneList,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function ReloadData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\"; //masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      } // let selectedFilter = inputData.selectedFilter;\n      // selectedFilter[\"fromdate\"] = \"\";\n      // selectedFilter[\"todate\"] = \"\";\n\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampletake: undefined,\n          subsampleskip: 0,\n          showSample: undefined //selectedFilter\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/getTreeByProduct\", Map).then(response => {\n      let {\n        Specification,\n        AgaramTree,\n        ActiveKey,\n        FocusKey,\n        OpenNodes\n      } = [];\n      const selectedSpec = {};\n\n      if (response.data[\"rtn\"] === true) {\n        Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response.data[\"AgaramTree\"];\n        ActiveKey = response.data[\"ActiveKey\"];\n        FocusKey = response.data[\"FocusKey\"];\n        OpenNodes = response.data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n      }\n\n      selectedRecord = { ...selectedRecord,\n        ...selectedSpec\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Specification,\n          selectedRecord,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes,\n          Test: [],\n          SelectedTest: [],\n          loading: false,\n          comboData,\n          ...inputParam,\n          selectedSpec,\n          Component: [],\n          selectComponent: {},\n          selectedComponent: {}\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport const getNewRegSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    if (inputParam.selectedNode !== null) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode\n      }).then(response => {\n        sortData(response.data);\n        let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\n        let selectedComponent = undefined;\n        inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          value: Specification[0].value,\n          label: Specification[0].label,\n          item: Specification[0].item\n        } : \"\";\n        inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            primaryKey: inputParam.primaryKey,\n            Specification: Specification,\n            selectedNode: inputParam.selectedNode,\n            selectedRecord: inputParam.selectedRecord,\n            Test: [],\n            selectedComponent,\n            SelectedTest: [],\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    }\n  };\n};\nexport function AddComponents(Map) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", Map);\n    const timezone = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [ComponentTestBySpec, timezone];\n    Axios.all(urlArray).then(response => {\n      const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      const timeZoneList = timeZoneListMap.get(\"OptionList\");\n      let dreceiveddate = null;\n      if (lstComponent[0].item.sreceiveddate) dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate); //new Date(lstComponent[0].item.sreceiveddate);//|| [];\n\n      let selectComponent = {\n        sreceiveddate: dreceiveddate,\n        dreceiveddate,\n        ntzdreceivedate: {\n          \"label\": Map[\"userinfo\"].stimezoneid,\n          \"value\": Map[\"userinfo\"].ntimezonecode\n        },\n        stzdreceivedate: Map[\"userinfo\"].stimezoneid,\n        scomments: \"\",\n        nallottedspeccode: lstComponent[0].item.nallottedspeccode\n      };\n      let CurrentTime = dreceiveddate;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadComponent: true,\n          lstComponent,\n          dreceiveddate,\n          ChildscreenName: \"Component\",\n          showSaveContinue: true,\n          openChildModal: false,\n          childoperation: \"create\",\n          selectComponent,\n          parentPopUpSize: \"lg\",\n          CurrentTime,\n          timeZoneList,\n          loading: false,\n          openPortal: true,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent) {\n  return function (dispatch) {\n    if (Object.keys(objComponent).length > 0) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nspecsampletypecode: objComponent.nspecsampletypecode,\n        slno: objComponent.slno,\n        nneedsubsample: nneedsubsample,\n        nallottedspeccode: objComponent.nallottedspeccode,\n        specBasedComponent: specBasedComponent\n      }).then(response => {\n        let TestData = response.data;\n        let Test = LoginProps.Test || [];\n        let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\n        const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\"); // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\n        //\"stestsynonym\", undefined, undefined, true);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            TestCombined,\n            loadTest: true,\n            openChildModal: false,\n            ChildscreenName: \"Test\",\n            screenName: \"Test\",\n            operation: \"create\",\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTCOMPONENTTOADDTEST\"\n      }));\n    }\n  };\n}\nexport function addsubSample(masterData, userinfo, columnList, selectComponent, childColumnList, SubSamplecomboComponents, SubSamplewithoutCombocomponent, specBasedComponent, Map, Component, isServiceRequired, SubSamplecomboData) {\n  if (isServiceRequired) {\n    return function (dispatch) {\n      dispatch(initRequest(true));\n      const urlArray = [];\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      urlArray[0] = timeZoneService;\n      const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n        parentcolumnlist: columnList,\n        childcolumnlist: childColumnList,\n        userinfo\n      });\n      urlArray[1] = actualService;\n\n      if (specBasedComponent) {\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[2] = ComponentTestBySpec;\n      } else {\n        Component = Component ? Component : [];\n        const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          //nneedsubsample: nneedsubsample,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent\n        });\n        urlArray[2] = TestGet;\n      }\n\n      Axios.all(urlArray).then(response => {\n        const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n        const timeZoneList = timeZoneMap.get(\"OptionList\");\n        const defaultTimeZone = {\n          label: userinfo.stimezoneid,\n          value: userinfo.ntimezonecode\n        };\n        const newcomboData = parentChildComboLoad(columnList, response[1].data, selectComponent, childColumnList, SubSamplewithoutCombocomponent);\n        let TestCombined = [];\n        let lstComponent = [];\n\n        if (specBasedComponent) {\n          const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n        } else {\n          TestCombined = response[2].data;\n        }\n\n        const comboData1 = newcomboData.comboData;\n        const selectedRecord1 = newcomboData.selectedRecord;\n        SubSamplewithoutCombocomponent.map(componentrow => {\n          if (componentrow.inputtype === \"date\") {\n            if (componentrow.mandatory) {\n              selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n            } // if (componentrow.timezone) {\n            //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n            //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n            //         defaulttimezone ? defaulttimezone : -1\n            // }\n\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            ChildscreenName: \"SubSample\",\n            screenName: \"SubSample\",\n            showSaveContinue: true,\n            openChildModal: false,\n            childoperation: \"create\",\n            parentPopUpSize: \"lg\",\n            loading: false,\n            lstComponent,\n            openPortal: true,\n            openModal: false,\n            operation: \"create\",\n            loadSubSample: true,\n            selectComponent: selectedRecord1,\n            SubSamplecomboData: comboData1,\n            SubSamplecomboComponents,\n            SubSamplewithoutCombocomponent,\n            TestCombined,\n            parentSubSampleColumnList: columnList,\n            timeZoneList,\n            defaultTimeZone,\n            masterData\n          }\n        });\n      }).catch(error => {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      });\n    };\n  } else {\n    const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData, selectComponent, childColumnList, SubSamplewithoutCombocomponent);\n    return dispatch => {\n      if (!specBasedComponent) {\n        rsapi.post(\"/registration/getTestfromDB\", {\n          nallottedspeccode: Map[\"nallottedspeccode\"],\n          slno: Component ? Object.keys(Component).length + 1 : 1,\n          //nneedsubsample: nneedsubsample,\n          ...Map,\n          // nallottedspeccode: objComponent.nallottedspeccode,\n          specBasedComponent: specBasedComponent\n        }).then(response => {\n          const TestCombined = response.data;\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: \"SubSample\",\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent: [],\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: newcomboData.selectedRecord,\n              TestCombined: TestCombined\n            }\n          });\n        });\n      } else {\n        // Component = Component ? Component : []\n        rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n          specBasedComponent: specBasedComponent\n        }).then(response => {\n          // const lstComponent =  response.data.lstComponent\n          let lstComponent = filterRecordBasedOnTwoArrays(response.data.lstComponent, Component, \"ncomponentcode\");\n          const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n          lstComponent = lstComponentMap.get(\"OptionList\");\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              ChildscreenName: \"SubSample\",\n              showSaveContinue: true,\n              openChildModal: false,\n              childoperation: \"create\",\n              parentPopUpSize: \"lg\",\n              loading: false,\n              lstComponent,\n              openPortal: true,\n              openModal: false,\n              operation: \"create\",\n              loadSubSample: true,\n              selectComponent: newcomboData.selectedRecord,\n              TestCombined: [],\n              selectedTestData: []\n            }\n          });\n        });\n      }\n    };\n  }\n}\nexport function componentTest(selectedobject, Reg, specBasedComponent, Component) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    Component = Component ? Component : [];\n    rsapi.post(\"/registration/getTestfromDB\", {\n      nspecsampletypecode: selectedobject.nspecsampletypecode,\n      slno: Component ? Object.keys(Component).length + 1 : 1,\n      specBasedComponent: specBasedComponent\n    }).then(response => {\n      let TestData = response.data; //let Test = [];\n      // Test[selectedobject.slno] = TestData;\n\n      const Map = {};\n\n      if (Reg) {\n        Map[\"selectedRecord\"] = selectedobject;\n      } else {\n        Map[\"selectComponent\"] = selectedobject;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          TestCombined: TestData,\n          ...Map,\n          loading: false,\n          selectedTestData: []\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function addSubSampleSaveContinue(Map1, Map, specBasedComponent, Component) {\n  //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\n  //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\n  return dispatch => {\n    if (!specBasedComponent) {\n      rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\n        specBasedComponent: specBasedComponent\n      }).then(response => {\n        const TestCombined = response.data;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: { ...Map1,\n            loading: false,\n            TestCombined: TestCombined\n          }\n        });\n      });\n    }\n  };\n}\nexport function editSubSample(Map, component, userInfo, specBasedComponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    let Componnet = {};\n\n    if (specBasedComponent) {\n      Componnet = rsapi.post(\"/registration/getComponentBySpec\", { ...Map\n      });\n    }\n\n    urlArray = [Componnet];\n    Axios.all(urlArray).then(response => {\n      let comp = [];\n\n      if (specBasedComponent) {\n        comp = response[0].data.lstComponent;\n      }\n\n      const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n      const lstComponent = lstComponentMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loadSubSample: true,\n          childoperation: \"update\",\n          ChildscreenName: \"SubSample\",\n          openChildModal: false,\n          selectComponent: component,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function insertRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createRegistration\", inputParam.inputData).then(response => {\n      let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      let selectedSample = response.data[\"selectedSample\"];\n      let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      let selectedSubSample = RegistrationGetSubSample;\n      RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n\n      if (inputParam.inputData.nneedsubsample) {\n        RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"], 'npreregno', 'desc');\n        selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n        RegistrationGetTest = RegistrationGetTest.filter(x => x.ntransactionsamplecode === selectedSubSample[0].ntransactionsamplecode);\n        selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\n      } // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\n\n\n      if (inputParam.multipleselectionFlag) {\n        selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\n        updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\n        updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\n        RegistrationGetSubSample = masterData.RegistrationGetSubSample;\n        RegistrationGetTest = masterData.RegistrationGetTest;\n      }\n\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSample,\n        selectedSubSample,\n        selectedTest,\n        RegistrationGetSubSample,\n        RegistrationGetTest,\n        RegistrationGetSample\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: undefined,\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined,\n        openPortal: false,\n        selectedSpec: {},\n        selectComponent: {},\n        SelectedTest: {},\n        selectedComponent: {},\n        Component: [],\n        selectedRecord: {},\n        SelectedTest: [],\n        Test: [],\n        selectedComponent: {}\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getRegistrationSample(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData\n    }).then(response => {\n      let masterData = { ...inputData.masterData,\n        ...response.data\n      };\n\n      if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        inputData.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n        inputData.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n        inputData.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined;\n      }\n\n      let respObject = {};\n\n      if (inputData.selectedFilter) {\n        respObject = {\n          selectedFilter: { ...inputData.selectedFilter\n          }\n        };\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          skip: 0,\n          testskip: 0,\n          take: undefined,\n          testtake: undefined,\n          subsampleskip: 0,\n          subsampletake: undefined,\n          showSample: undefined,\n          ...respObject,\n          activeSampleTab: inputData.inputData.activeSampleTab\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedsubsample: inputData.nneedsubsample,\n      checkBoxOperation: inputData.nneedsubsample === true ? inputData.checkBoxOperation === 5 ? 3 : inputData.checkBoxOperation : inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    const subSample = inputData.nneedsubsample;\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationSubSample\", inputParamData).then(response => {\n        sortData(response.data);\n        let masterData = {};\n        let skipInfo = {};\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n\n        if (subSample) {\n          let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ? [inputData.masterData.RegistrationGetSubSample[0]] : []\n          };\n          let RegistrationTestComment = [];\n          let RegistrationTestAttachment = [];\n          let RegistrationParameter = [];\n\n          if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {\n            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((subsample, index) => {\n              if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n            });\n\n            if (oldSelectedSubSample.length > 0) {\n              masterData = { ...masterData,\n                selectedSubSample: oldSelectedSubSample\n              };\n            }\n\n            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest, masterData.selectedSubSample, 'npreregno');\n            masterData = { ...masterData,\n              selectedTest\n            };\n          }\n\n          if (inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 5) {\n            masterData = { ...masterData,\n              selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\n            };\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n\n            masterData['RegistrationTestComment'] = RegistrationTestComment;\n            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n            masterData[\"RegistrationParameter\"] = RegistrationParameter;\n          }\n\n          let {\n            testskip,\n            testtake,\n            subsampleskip,\n            subsampletake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\n            testskip = 0;\n            subsampleskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake,\n              subsampleskip,\n              subsampletake\n            };\n          }\n        } else {\n          //let oldSelectedTest = inputData.masterData.selectedTest\n          //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n          masterData = { ...inputData.masterData,\n            selectedSample: inputData.selectedSample,\n            selectedPreregno: inputData.npreregno,\n            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n            selectedSubSample: inputData.masterData.RegistrationGetSubSample\n          };\n          let RegistrationTestComment = [];\n          let RegistrationParameter = [];\n          let RegistrationTestAttachment = [];\n\n          if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\n            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n            oldSelectedTest.forEach((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                selectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n            }\n\n            switch (inputData.activeTestTab) {\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ? inputData.masterData.RegistrationTestAttachment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              default:\n                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          } else if (inputData.checkBoxOperation === 5) {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment1 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                  let RegistrationTestAttachment1 = [];\n\n                  if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                    RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                  }\n\n                  let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                  RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n                let RegistrationTestComment2 = [];\n\n                if (inputData.masterData.RegistrationTestComment !== undefined) {\n                  RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n                }\n\n                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n          } else {\n            switch (inputData.activeTestTab) {\n              case \"IDS_TESTCOMMENTS\":\n                RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n                activeName = \"RegistrationTestComment\";\n                dataStateName = \"testCommentDataState\";\n                break;\n\n              case \"IDS_TESTATTACHMENTS\":\n                {\n                  RegistrationTestAttachment = response.data.RegistrationTestAttachment ? [...response.data.RegistrationTestAttachment] : [];\n                  activeName = \"RegistrationTestAttachment\";\n                  dataStateName = \"testCommentDataState\";\n                }\n                break;\n\n              case \"IDS_PARAMETERRESULTS\":\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n\n              default:\n                RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n                activeName = \"RegistrationParameter\";\n                dataStateName = \"resultDataState\";\n                break;\n            }\n          }\n\n          masterData['RegistrationTestComment'] = RegistrationTestComment;\n          masterData[\"RegistrationParameter\"] = RegistrationParameter;\n          masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n          let {\n            testskip,\n            testtake\n          } = inputData;\n          let bool = false;\n\n          if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n            testskip = 0;\n            bool = true;\n          }\n\n          if (bool) {\n            skipInfo = {\n              testskip,\n              testtake\n            };\n          }\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let bool = false;\n      let skipInfo = {};\n      let {\n        testskip,\n        testtake,\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let oldSelectedSubSample = inputData.masterData.selectedSubSample;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let selectedSample = inputData.selectedSample;\n        let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\n        let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest : inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\n        let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\n        let selectedSubSample = inputData.masterData.RegistrationGetSubSample;\n\n        if (subSample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n          selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let masterData = { ...inputData.masterData,\n          selectedSample,\n          selectedSubSample,\n          selectedTest\n        };\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3,\n          skipInfo\n        };\n\n        if (subSample) {\n          if (selectedTest.length === 0) {\n            inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\");\n            inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\");\n            inputData[\"checkBoxOperation\"] = 3;\n            inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n            dispatch(getRegistrationTestDetail(inputData, true));\n          } else {\n            dispatch(getTestChildTabDetailRegistration(inputData, true));\n          }\n        } else {\n          dispatch(getTestChildTabDetailRegistration(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSample: inputData.selectedSample,\n          selectedPreregno: inputData.npreregno,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\n          // RegistrationTestComment,\n          selectedSubSample: inputData.masterData.RegistrationGetSubSample\n        };\n        let subsamplecheck = true;\n\n        if (subSample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\n                masterData = { ...masterData,\n                  selectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"];\n                subsamplecheck = false;\n                dispatch(getRegistrationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              selectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = { ...skipInfo,\n            testskip,\n            testtake\n          };\n        }\n\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      ntransactionstatus: inputData.ntransactionstatus,\n      napprovalconfigcode: inputData.napprovalconfigcode,\n      activeTestTab: inputData.activeTestTab,\n      activeSampleTab: inputData.activeSampleTab,\n      userinfo: inputData.userinfo,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"registration/getRegistrationTest\", inputParamData).then(response => {\n        sortData(response.data);\n        let oldSelectedTest = inputData.masterData.selectedTest || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactionsamplecode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [] // RegistrationTestComment,\n\n        }; //let wholeRegistrationTestComments = [];\n\n        let RegistrationTestComment = [];\n        let RegistrationTestAttachment = [];\n        let RegistrationParameter = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n          oldSelectedTest.forEach((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              selectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\";\n          }\n\n          switch (inputData.activeTestTab) {\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ? inputData.masterData.RegistrationTestAttachment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment1 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\n              }\n\n              let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              {\n                let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\n                let RegistrationTestAttachment1 = [];\n\n                if (inputData.masterData.RegistrationTestAttachment !== undefined) {\n                  RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\n                }\n\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\n                activeName = \"RegistrationTestAttachment\";\n                dataStateName = \"testCommentDataState\";\n              }\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\n              let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\n              let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\n              let RegistrationTestComment2 = [];\n\n              if (inputData.masterData.RegistrationTestComment !== undefined) {\n                RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\n              }\n\n              let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1;\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          } // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n\n        } else {\n          switch (inputData.activeTestTab) {\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = response.data.RegistrationTestAttachment ? [...response.data.RegistrationTestAttachment] : [];\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_PARAMETERRESULTS\":\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            default:\n              RegistrationParameter = response.data.RegistrationParameter ? [...response.data.RegistrationParameter] : [];\n              activeName = \"RegistrationParameter\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData['RegistrationTestComment'] = RegistrationTestComment;\n        masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\n        masterData[\"RegistrationParameter\"] = RegistrationParameter;\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        if (inputData.masterData.selectedSample && inputData.sampleGridDataState && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            sampleGridDataState: { ...inputData.sampleGridDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let inputParam = {\n          attachmentskip: undefined\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo,\n            inputParam\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.selectedTest;\n      let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = true;\n      } else {\n        isGrandChildGetRequired = false;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\n        let selectedSubSample = inputData.selectedSubSample; // let selectedPreregno = inputData.npreregno;\n\n        let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []; // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\n\n        let masterData = { ...inputData.masterData,\n          selectedSubSample,\n          selectedTest\n        };\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"],\n          ntransactiontestcode,\n          masterData,\n          selectedTest,\n          selectedSubSample,\n          checkBoxOperation: 3\n        };\n        dispatch(getTestChildTabDetailRegistration(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          selectedSubSample: inputData.selectedSubSample,\n          selectedTransactioncode: inputData.ntransactionsamplecode,\n          selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : []\n        };\n        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode);\n        oldSelectedTest.forEach((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            selectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\";\n        }\n\n        masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ? inputData.masterData.RegistrationTestComment : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n        masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ? inputData.masterData.RegistrationParameter : [] : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\");\n        let skipInfo = {};\n        let dataStateArray = [{\n          activeName: 'selectedSample',\n          dataStateName: 'sampleGridDataState'\n        }, {\n          activeName: 'RegistrationSourceCountry',\n          dataStateName: 'sourceDataState'\n        }, {\n          activeName: 'RegistrationTestComment',\n          dataStateName: 'testCommentDataState'\n        }, {\n          activeName: 'RegistrationParameter',\n          dataStateName: 'resultDataState'\n        }];\n        dataStateArray.map(arr => {\n          if (inputData[arr.dataStateName] && masterData[arr.activeName] && masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [arr.dataStateName]: { ...inputData[arr.dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestTab: inputData.activeTestTab,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function acceptRegistration(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\" || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n        replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n        replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n        delete response.data[\"RegistrationGetSample\"];\n        delete response.data[\"RegistrationGetSubSample\"];\n        delete response.data[\"RegistrationGetTest\"];\n        let masterData = { ...LoginProps,\n          ...response.data,\n          selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n          selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n          selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n\n        if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\" || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\n          toast.warn(intl.formatMessage({\n            id: response.data.rtn\n          }));\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      toast.error(error.message);\n    });\n  };\n}\nexport const addMoreTest = (inputParam, ncontrolCode) => {\n  return dispatch => {\n    let {\n      sampleList\n    } = inputParam;\n    let value = false;\n\n    if (inputParam.selectedsubsample && inputParam.selectedsubsample.length > 0) {\n      value = inputParam.selectedsubsample.some(obj => obj.nspecsampletypecode !== inputParam.selectedsubsample[0].nspecsampletypecode);\n\n      if (value) {\n        return toast.warn(intl.formatMessage({\n          id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n        }));\n      }\n\n      sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\n      const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsample, \"npreregno\");\n      const selectsubsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsubsample, \"npreregno\");\n\n      if (selectedsample && selectedsample.length > 0) {\n        const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\n\n        if (findTransactionStatus.length === 1) {\n          if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\n            if (findTransactionStatus[0] !== transactionStatus.CERTIFIED && findTransactionStatus[0] !== transactionStatus.SENT) {\n              const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\n\n              if (findApprovalVersion.length === 1) {\n                const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))]; //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\n\n                if (findSampleSpec.length === 1) //&& findComponent.length === 1 \n                  {\n                    dispatch(initRequest(true));\n                    rsapi.post(\"/registration/getMoreTest\", { ...inputParam\n                    }).then(response => {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          availableTest: response.data,\n                          loadChildTest: true,\n                          loading: false,\n                          ncontrolCode,\n                          screenName: \"IDS_TEST\",\n                          operation: \"create\",\n                          openModal: true,\n                          parentPopUpSize: \"lg\",\n                          selectedRecord: {},\n                          showSample: undefined\n                        }\n                      });\n                    }).catch(error => {\n                      dispatch({\n                        type: DEFAULT_RETURN,\n                        payload: {\n                          loading: false\n                        }\n                      });\n\n                      if (error.response.status === 500) {\n                        toast.error(error.message);\n                      } else {\n                        toast.warn(this.props.formatMessage({\n                          id: error.response.data\n                        }));\n                      }\n                    });\n                  } else {\n                  toast.warn(intl.formatMessage({\n                    id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\"\n                  }));\n                }\n              } else {\n                toast.warn(intl.formatMessage({\n                  id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\"\n                }));\n              }\n            } else {\n              toast.warn(intl.formatMessage({\n                id: \"IDS_TESTCANNOTBEFORCERTIFIEDSAMPLES\"\n              }));\n            }\n          } else {\n            ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\n            toast.warn(intl.formatMessage({\n              id: \"IDS_SAMPLEISREJECTEDORCANCELLED\"\n            }));\n          }\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\"\n          }));\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTSAMPLE\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSUBSAMPLE\"\n      }));\n    }\n  };\n};\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\n      masterData = { ...masterData,\n        RegistrationGetTest,\n        selectedTest: response.data[\"RegistrationGetTest\"],\n        RegistrationParameter: response.data.RegistrationParameter // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        [modalName]: false,\n        loading: false,\n        loadChildTest: false,\n        showSample: undefined,\n        openModal: false,\n        selectedRecord: {}\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         [modalName]: false,\n      //         loading: false,\n      //         loadChildTest: false,\n      //         showSample: undefined,\n      //         openModal: false,\n      //         selectedRecord: {}\n      //     }\n      // });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n};\nexport function getEditRegistrationComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      userInfo,\n      operation\n    } = { ...inputParam\n    };\n    const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo: userInfo\n    });\n    const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam,\n      npreregno\n    });\n    urlArray = [timeZoneService, actualService, selectedRegistration];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[2].data[\"SelectedRegistration\"][0]\n      };\n      selectedRecord = { ...selectedRecord,\n        ...selectedRecord['jsondata']\n      }; // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\n      //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\n\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      }; //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\n      // selectedRecord, childColumnList, withoutCombocomponent)\n\n      if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoad(x, comboData, selectedRecord1, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        let {\n          Specification,\n          AgaramTree,\n          ActiveKey,\n          FocusKey,\n          OpenNodes\n        } = [];\n        const selectedSpec = {};\n        Specification = constructOptionList(response[2].data[\"Specification\"] || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, true).get(\"OptionList\");\n        AgaramTree = response[2].data[\"AgaramTree\"];\n        ActiveKey = response[2].data[\"FocusKey\"];\n        FocusKey = response[2].data[\"ActiveKey\"];\n        OpenNodes = response[2].data[\"OpenNodes\"]; //Manufacturer = response.data[\"Manufacturer\"];\n\n        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\n          \"value\": Specification[0].value,\n          \"label\": Specification[0].label,\n          \"item\": Specification[0].item\n        } : \"\";\n        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\n        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\n        selectedRecord = { ...selectedRecord,\n          ...selectedSpec\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            AgaramTree,\n            FocusKey,\n            ActiveKey,\n            OpenNodes,\n            selectedSpec,\n            Specification,\n            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\n            // currentTime,\n            operation,\n            //  screenName: popUpLabel,\n            // PopUpLabel: popUpLabel,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openPortal: true,\n            ncontrolCode: inputParam.editRegParam.ncontrolCode,\n            loadPreregister: true,\n            parentPopUpSize: \"xl\",\n            loading: false,\n            showSample: undefined,\n            comboData: comboValues.comboData //  regRecordToEdit:recordToEdit\n\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function updateRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistration\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\"); //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\n\n      let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      masterData = { ...masterData,\n        selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        RegistrationGetTest,\n        RegistrationGetSubSample,\n        RegistrationParameter: response.data[\"RegistrationParameter\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openPortal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadPreregister: false,\n          selectedRecord: {},\n          showSample: undefined\n        }\n      }); // let inputData = {\n      //     masterData,\n      //     selectedTest: masterData.selectedTest,\n      //     ntransactiontestcode: masterData.selectedTest ?\n      //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n      //     npreregno: masterData.selectedSample ?\n      //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n      //     userinfo: inputParam.inputData.userinfo,\n      //     activeTestTab : masterData.activeTestTab,\n      //     screenName: masterData.activeTestTab,\n      //     resultDataState: inputParam.resultDataState,\n      //     testCommentDataState: inputParam.testCommentDataState,\n      // }\n      // dispatch(getTestChildTabDetail(inputData, true))\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelTestAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelTest\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedTest: response.data[\"selectedTest\"],\n        // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\n        RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\") //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\n\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        openModal: false,\n        loadEsign: false,\n        showConfirmAlert: false,\n        selectedRecord: {},\n        loading: false,\n        loadPreregister: false,\n        showSample: undefined\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'no';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function cancelSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSample\", inputParam.inputData).then(response => {\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList, selectRecord, regchildColumnList, regSubSamplecomboComponents, regSubSamplewithoutCombocomponent, Map, ncontrolcode, specBasedComponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    urlArray[0] = timeZoneService;\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: regcolumnList,\n      childcolumnlist: regchildColumnList,\n      userinfo\n    });\n    urlArray[1] = actualService;\n\n    if (specBasedComponent) {\n      const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", { ...Map,\n        specBasedComponent: specBasedComponent,\n        userinfo\n      });\n      urlArray[2] = ComponentTestBySpec;\n    } else {\n      const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\n        nallottedspeccode: Map[\"nallottedspeccode\"],\n        slno: 1,\n        specBasedComponent: specBasedComponent\n      });\n      urlArray[2] = TestGet;\n    }\n\n    Axios.all(urlArray).then(response => {\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userinfo.stimezoneid,\n        value: userinfo.ntimezonecode\n      };\n      const newcomboData = parentChildComboLoad(regcolumnList, response[1].data, selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent);\n      let TestCombined = [];\n      let lstComponent = [];\n\n      if (specBasedComponent) {\n        const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, true);\n        lstComponent = lstComponentMap.get(\"OptionList\");\n      } else {\n        TestCombined = response[2].data;\n      }\n\n      const comboData1 = newcomboData.comboData;\n      const selectedRecord1 = newcomboData.selectedRecord;\n      regSubSamplewithoutCombocomponent.map(componentrow => {\n        if (componentrow.inputtype === \"date\") {\n          if (componentrow.mandatory) {\n            selectedRecord1[componentrow.label] = componentrow.loadcurrentdate ? new Date() : \"\";\n          } // if (componentrow.timezone) {\n          //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\n          //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\n          //         defaulttimezone ? defaulttimezone : -1\n          // }\n\n        }\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          screenName: \"SubSample\",\n          showSaveContinue: false,\n          parentPopUpSize: \"lg\",\n          loading: false,\n          lstComponent,\n          openModal: true,\n          operation: \"create\",\n          loadRegSubSample: true,\n          selectedRecord: selectedRecord1,\n          regSubSamplecomboData: comboData1,\n          regSubSamplecomboComponents,\n          regSubSamplewithoutCombocomponent,\n          TestCombined,\n          regparentSubSampleColumnList: regcolumnList,\n          ncontrolCode: ncontrolcode,\n          timeZoneList,\n          defaultTimeZone,\n          masterData\n        }\n      });\n    }).catch(error => {\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function saveSubSample(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/createSubSample\", inputParam.inputData).then(response => {\n      // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\n      // let selectedSample = response.data[\"selectedSample\"];\n      let RegistrationGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.RegistrationGetSubSample, response.data[\"selectedSubSample\"]);\n      let RegistrationGetTest = response.data[\"selectedTest\"];\n      let selectedSubSample = RegistrationGetSubSample.length > 0 ? [RegistrationGetSubSample[0]] : [];\n      RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\n      let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\n      let RegistrationParameter = response.data[\"RegistrationParameter\"];\n      RegistrationParameter = getSameRecordFromTwoArrays(RegistrationParameter, selectedTest, 'ntransactiontestcode');\n      let masterData = { ...inputParam.inputData.masterData\n      };\n      masterData = { ...masterData,\n        ...response.data,\n        selectedSubSample,\n        selectedTest,\n        RegistrationGetSubSample,\n        RegistrationGetTest,\n        RegistrationParameter\n      };\n      let respObject = {\n        masterData,\n        openModal: false,\n        loadEsign: false,\n        loading: false,\n        showSample: undefined,\n        selectedRecord: {},\n        loadRegSubSample: false\n      };\n      inputParam.postParamList[0]['clearFilter'] = 'yes';\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject)); //    dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         masterData,\n      //         openModal: false,\n      //         loadEsign: false,\n      //         loading: false,\n      //         showSample: undefined,\n      //         selectedRecord: {},\n      //         loadRegSubSample:false\n      //     }\n      // });\n    }).catch(error => {\n      // console.log(error);\n      toast.error(error.message);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          showConfirmAlert: false\n        }\n      });\n    });\n  };\n}\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents, withoutCombocomponent, specBasedComponent) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    const {\n      userInfo,\n      operation\n    } = { ...inputParam\n    };\n    const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\n    let urlArray = [];\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\n      parentcolumnlist: columnList,\n      childcolumnlist: childColumnList,\n      userinfo: userInfo\n    });\n    const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", { ...inputParam.editRegParam,\n      ntransactionsamplecode\n    });\n    urlArray = [timeZoneService, actualService, selectedRegistration];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = { ...response[2].data[\"SelectedRegistrationSubSample\"][0]\n      };\n      selectedRecord = { ...selectedRecord,\n        ...selectedRecord['jsondata']\n      };\n      const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n      const timeZoneList = timeZoneMap.get(\"OptionList\");\n      const defaultTimeZone = {\n        label: userInfo.stimezoneid,\n        value: userInfo.ntimezonecode\n      };\n\n      if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\"\n        }));\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else {\n        const languagetypeCode = undefined;\n        const comboData = response[1].data;\n        let comboValues = {};\n\n        if (columnList.length > 0) {\n          columnList.map(x => {\n            if (x.inputtype === 'combo') {\n              if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \n                {\n                  if (comboData[x.label].length > 0) {\n                    if (comboData[x.label][0].label === undefined) {\n                      const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                      comboData[x.label] = optionList.get(\"OptionList\");\n                    } else {\n                      comboData[x.label] = comboData[x.label];\n                      const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember, x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode);\n                    }\n                  } else {\n                    comboData[x.label] = [];\n                  } //comboValues = childComboLoad(x, comboData, selectedRecord, \n                  //   childColumnList, withoutCombocomponent)\\\n\n\n                  comboValues = childComboLoad(x, comboData, selectedRecord1, childColumnList, withoutCombocomponent);\n                } else {\n                comboValues = {\n                  \"comboData\": comboData\n                };\n              }\n            } else {\n              comboValues = {\n                comboData: comboData,\n                ...comboValues\n              };\n            }\n          });\n        } else {\n          comboValues = {\n            \"comboData\": comboData\n          };\n        }\n\n        selectedRecord = { ...selectedRecord\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            timeZoneList,\n            defaultTimeZone,\n            selectedRecord,\n            openModal: true,\n            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\n            parentPopUpSize: \"lg\",\n            loading: false,\n            showSample: undefined,\n            regSubSamplecomboData: comboValues.comboData,\n            loadRegSubSample: true,\n            screenName: \"IDS_SUBSAMPLE\",\n            operation: \"update\" //  regRecordToEdit:recordToEdit\n\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\"); //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\n      //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\n\n      let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\n      masterData = { ...masterData,\n        // selectedSample: response.data[\"selectedSample\"],\n        selectedSubSample: response.data[\"selectedSubSample\"],\n        selectedTest: response.data[\"selectedTest\"],\n        RegistrationGetTest,\n        // RegistrationGetSubSample,\n        RegistrationParameter: response.data[\"RegistrationParameter\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          openModal: false,\n          loading: false,\n          showConfirmAlert: false,\n          regDateEditConfirmMessage: undefined,\n          loadEsign: false,\n          loadRegSubSample: false,\n          selectedRecord: {},\n          showSample: undefined,\n          screenName: \"SubSample\"\n        }\n      }); // let inputData = {\n      //     masterData,\n      //     selectedTest: masterData.selectedTest,\n      //     ntransactiontestcode: masterData.selectedTest ?\n      //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\n      //     npreregno: masterData.selectedSample ?\n      //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n      //     userinfo: inputParam.inputData.userinfo,\n      //     activeTestTab : masterData.activeTestTab,\n      //     screenName: masterData.activeTestTab,\n      //     resultDataState: inputParam.resultDataState,\n      //     testCommentDataState: inputParam.testCommentDataState,\n      // }\n      // dispatch(getTestChildTabDetail(inputData, true))\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n      } else if (error.response.status === 302) {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            regEditParam: inputParam,\n            showConfirmAlert: true,\n            parentPopUpSize: \"xl\",\n            regDateEditConfirmMessage: error.response.data,\n            showSample: undefined\n          }\n        });\n      } else {\n        toast.warn(error.response.data);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            showSample: undefined\n          }\n        });\n      }\n    });\n  };\n}\nexport function cancelSubSampleAction(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      let masterData = { ...LoginProps,\n        // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        ...inputParam.inputData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData).then(response => {\n      // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\n      replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\n      replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\n      delete response.data[\"RegistrationGetSample\"];\n      delete response.data[\"RegistrationGetSubSample\"];\n      delete response.data[\"RegistrationGetTest\"];\n      let masterData = { ...LoginProps,\n        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\n        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\n        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\")\n      };\n      let respObject = {\n        masterData,\n        loading: false,\n        loadEsign: false,\n        openModal: false,\n        showSample: undefined\n      };\n      dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data.rtn);\n      }\n    });\n  };\n}\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\n  return function (dispatch) {\n    if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\n      let inputParamData = {\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        npreregno: inputData.npreregno,\n        userinfo: inputData.userinfo\n      };\n      let url = null;\n      let {\n        testtake\n      } = inputData;\n      let activeName = \"\";\n      let dataStateName = \"\";\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_PARAMETERRESULTS\":\n          url = \"registration/getregistrationparameter\";\n          activeName = \"RegistrationParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          url = \"resultentrybysample/getResultUsedInstrument\";\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          url = \"resultentrybysample/getResultUsedMaterial\";\n          break;\n\n        case \"IDS_TASK\":\n          url = \"resultentrybysample/getResultUsedTask\";\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          url = \"attachment/getTestAttachment\";\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          url = \"comments/getTestComment\";\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          url = \"approval/getapprovalparameter\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          url = \"approval/getApprovalResultChangeHistory\";\n          activeName = \"ApprovalResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_TESTAPPROVALHISTORY\":\n          url = \"approval/getApprovalHistory\";\n          activeName = \"ApprovalHistory\";\n          dataStateName = \"historyDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          url = \"attachment/getSampleAttachment\";\n          break;\n\n        default:\n          url = \"approval/getapprovalparameter\";\n          activeName = \"ApprovalParameter\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      if (url !== null) {\n        dispatch(initRequest(true));\n\n        if (isServiceRequired) {\n          rsapi.post(url, inputParamData).then(response => {\n            let skipInfo = {};\n            let responseData = { ...response.data,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest\n            }; //responseData = sortData(responseData)\n            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\n\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n            let masterData = { ...inputData.masterData,\n              selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\n              selectedTest: inputData.selectedTest,\n              selectedPreregno: inputData.npreregno,\n              selectedSampleCode: inputData.ntransactionsamplecode,\n              selectedTestCode: inputData.ntransactiontestcode\n            };\n\n            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n              skipInfo = {\n                [dataStateName]: { ...inputData[dataStateName],\n                  skip: 0,\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            } else {\n              skipInfo = { ...skipInfo,\n                [dataStateName]: { ...inputData[dataStateName],\n                  sort: undefined,\n                  filter: undefined\n                }\n              };\n            }\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                masterData,\n                loading: false,\n                showFilter: false,\n                activeTestTab: inputData.activeTestTab,\n                screenName: inputData.screenName,\n                testtake,\n                testskip: undefined,\n                ...skipInfo\n              }\n            });\n          }).catch(error => {\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                loading: false\n              }\n            });\n\n            if (error.response.status === 500) {\n              toast.error(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        } else {\n          fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n          let skipInfo = {};\n          let masterData = { ...inputData.masterData,\n            selectedTest: inputData.selectedTest,\n            selectedPreregno: inputData.npreregno,\n            selectedSampleCode: inputData.ntransactionsamplecode,\n            selectedTestCode: inputData.ntransactiontestcode\n          };\n\n          if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n            skipInfo = {\n              [dataStateName]: { ...inputData[dataStateName],\n                skip: 0,\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          } else {\n            skipInfo = { ...skipInfo,\n              [dataStateName]: { ...inputData[dataStateName],\n                sort: undefined,\n                filter: undefined\n              }\n            };\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData,\n              loading: false,\n              showFilter: false,\n              activeTestTab: inputData.activeTestTab,\n              screenName: inputData.screenName,\n              testtake,\n              testskip: undefined,\n              ...skipInfo\n            }\n          });\n        }\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab\n          }\n        });\n      }\n    } else {\n      let {\n        ApprovalParameter,\n        ResultUsedInstrument,\n        ResultUsedTasks,\n        RegistrationTestAttachment,\n        ApprovalResultChangeHistory,\n        RegistrationTestComment,\n        ApprovalHistory\n      } = inputData.masterData;\n\n      switch (inputData.activeTestTab) {\n        case \"IDS_RESULTS\":\n          ApprovalParameter = [];\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          ResultUsedInstrument = [];\n          break;\n\n        case \"IDS_TASK\":\n          ResultUsedTasks = [];\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          RegistrationTestAttachment = [];\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          ApprovalResultChangeHistory = [];\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          RegistrationTestComment = [];\n          break;\n\n        case \"IDS_APPROVALHISTORY\":\n          ApprovalHistory = [];\n          break;\n\n        default:\n          ApprovalParameter = [];\n          break;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            selectedTest: [],\n            ApprovalParameter,\n            ResultUsedInstrument,\n            ResultUsedTasks,\n            RegistrationTestAttachment,\n            ApprovalResultChangeHistory,\n            RegistrationTestComment,\n            ApprovalHistory\n          },\n          loading: false\n        }\n      });\n    }\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/RegistrationAction.js"],"names":["rsapi","Axios","toast","filterRecordBasedOnTwoArrays","sortData","rearrangeDateFormat","convertDateTimetoString","fillRecordBasedOnCheckBoxSelection","getRecordBasedOnPrimaryKeyName","updatedObjectWithNewElement","replaceUpdatedObject","parentChildComboLoad","getSameRecordFromTwoArrays","constructjsonOptionList","constructjsonOptionDefault","childComboLoad","DEFAULT_RETURN","intl","initRequest","RegistrationSubType","RegistrationType","transactionStatus","crudMaster","postCRUDOrganiseTransSearch","constructOptionList","getSampleTypeChange","Map","masterData","event","labelname","dispatch","post","then","response","data","item","type","payload","loading","catch","error","message","getSubSampleChildTabDetail","inputData","npreregno","length","inputParamData","userinfo","url","activeSampleTab","responseData","selectedSample","selectedTestCode","ntransactiontestcode","showFilter","screenName","status","warn","getRegTypeChange","getRegSubTypeChange","getComponentTestBySpec","selectedRecord","Component","Test","slno","selectedComponent","undefined","SelectedTest","Object","keys","popUptestDataState","skip","take","getTestfromDB","objComponent","LoginProps","nflag","component","value","label","dreceiveddate","userInfo","nspecsampletypecode","TestData","loadComponent","selectComponent","showSaveContinue","SelectedSource","parentPopUpSize","CurrentTime","unshift","EditComponent","urlArray","ComponentTestBySpec","timezone","all","lstComponentMap","lstComponent","timeZoneListMap","TimeZoneField","get","timeZoneList","scomponentname","ncomponentcode","ntzdreceivedate","findIndex","x","ntimezonecode","stimezoneid","childoperation","ChildscreenName","openChildModal","ReloadData","searchSampleRef","current","searchSubSampleRef","searchTestRef","testskip","testtake","subsampletake","subsampleskip","showSample","getTreeByProduct","comboData","inputParam","Specification","AgaramTree","ActiveKey","FocusKey","OpenNodes","selectedSpec","sversion","ntemplatemanipulationcode","getNewRegSpecification","selectedNode","operation","methodUrl","ntreetemplatemanipulationcode","activeKey","focusKey","primaryKey","AddComponents","sreceiveddate","stzdreceivedate","scomments","nallottedspeccode","openPortal","openModal","getTest","nneedsubsample","specBasedComponent","componentTest","TestCombined","loadTest","formatMessage","id","addsubSample","columnList","childColumnList","SubSamplecomboComponents","SubSamplewithoutCombocomponent","isServiceRequired","SubSamplecomboData","timeZoneService","actualService","parentcolumnlist","childcolumnlist","TestGet","timeZoneMap","defaultTimeZone","newcomboData","comboData1","selectedRecord1","map","componentrow","inputtype","mandatory","loadcurrentdate","Date","loadSubSample","parentSubSampleColumnList","selectedTestData","selectedobject","Reg","addSubSampleSaveContinue","Map1","editSubSample","Componnet","comp","insertRegistration","RegistrationGetSample","RegistrationGetSubSample","RegistrationGetTest","selectedSubSample","selectedTest","filter","ntransactionsamplecode","multipleselectionFlag","respObject","loadEsign","showConfirmAlert","loadPreregister","postParamList","getRegistrationSample","selectedFilter","getRegistrationsubSampleDetail","nsampletypecode","nregtypecode","nregsubtypecode","ntransactionstatus","napprovalconfigcode","activeTestTab","ndesigntemplatemappingcode","checkBoxOperation","activeName","dataStateName","subSample","skipInfo","oldSelectedTest","oldSelectedSubSample","childTabsKey","removeElementFromArray","selectedPreregno","RegistrationTestComment","RegistrationTestAttachment","RegistrationParameter","wholeSubSampleList","b","forEach","subsample","index","includes","splice","ResponseData","RegistrationTestComment1","RegistrationTestAttachment1","resultResponseData","RegistrationParameter1","ntransactiontestcode1","ResponseData1","RegistrationTestComment2","ntransactionTestCode","bool","wholeTestList","test","keepOld","sampleGridDataState","sort","attachmentskip","TestSelected","isGrandChildGetRequired","filterTestSameOldSelectedTest","join","filterSelectedSubSample","getRegistrationTestDetail","getTestChildTabDetailRegistration","subsamplecheck","SubSampleSelected","wholeSubSample","selectedSubSample1","dataStateArray","arr","selectedTransactionsamplecode","toString","selectedTransactioncode","acceptRegistration","rtn","addMoreTest","ncontrolCode","sampleList","selectedsubsample","some","obj","slice","selectedsample","selectsubsample","findTransactionStatus","Set","REJECT","CANCELLED","CERTIFIED","SENT","findApprovalVersion","napprovalversioncode","findSampleSpec","availableTest","loadChildTest","props","createRegistrationTest","modalName","classUrl","getEditRegistrationComboService","comboComponents","withoutCombocomponent","mastertoedit","primaryKeyName","selectedRegistration","editRegParam","languagetypeCode","comboValues","optionList","valuemember","displaymember","source","isMultiLingual","updateRegistration","regDateEditConfirmMessage","regEditParam","cancelTestAction","cancelSampleAction","addsubSampleRegistration","regcolumnList","selectRecord","regchildColumnList","regSubSamplecomboComponents","regSubSamplewithoutCombocomponent","ncontrolcode","loadRegSubSample","regSubSamplecomboData","regparentSubSampleColumnList","saveSubSample","getEditSubSampleComboService","PREREGISTER","editSubSampleRegParam","onUpdateSubSampleRegistration","cancelSubSampleAction","preregRecordToQuarantine","selectedSampleCode","ApprovalParameter","ResultUsedInstrument","ResultUsedTasks","ApprovalResultChangeHistory","ApprovalHistory"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    filterRecordBasedOnTwoArrays, sortData,\r\n    rearrangeDateFormat, convertDateTimetoString, fillRecordBasedOnCheckBoxSelection, getRecordBasedOnPrimaryKeyName, updatedObjectWithNewElement, replaceUpdatedObject, parentChildComboLoad, getSameRecordFromTwoArrays, constructjsonOptionList, constructjsonOptionDefault, childComboLoad\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { intl } from '../components/App';\r\nimport { initRequest } from './LoginAction';\r\nimport { RegistrationSubType, RegistrationType, transactionStatus } from '../components/Enumeration';\r\nimport { crudMaster, postCRUDOrganiseTransSearch } from './ServiceAction'\r\n//import { getTestChildTabDetail } from './index.js'\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function getSampleTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegTypeBySampleType\", Map)\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSubSampleChildTabDetail(inputData) {\r\n    return function (dispatch) {\r\n        if (inputData.npreregno.length > 0) {\r\n            let inputParamData = {\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            switch (inputData.activeSampleTab) {\r\n                case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSubSampleAttachment\"\r\n                    break;\r\n                case \"IDS_SUBSAMPLECOMMENTS\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    break;\r\n                default:\r\n                    url = null\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                rsapi.post(url, inputParamData)\r\n                    .then(response => {\r\n                        let responseData = { ...response.data }\r\n                        responseData = sortData(responseData)\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN, payload: {\r\n                                masterData: {\r\n                                    ...inputData.masterData,\r\n                                    ...responseData,\r\n                                    selectedSample: inputData.selectedSample,\r\n                                    selectedTestCode: inputData.ntransactiontestcode,\r\n                                },\r\n                                loading: false,\r\n                                showFilter: false,\r\n                                activeSampleTab: inputData.activeSampleTab,\r\n                                screenName: inputData.screenName\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            toast.warn(\"Please Select a Sample\");\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRegTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n            .then(response => {\r\n                // const RegistrationSubType = response.data[\"RegistrationSubType\"];\r\n\r\n                //  console.log(response.data);\r\n                // RegistrationSubType.length > 0 ?\r\n                //     selectedRecord[\"nregsubtypecode\"] = {\r\n                //         \"value\": RegistrationSubType[0].nregsubtypecode,\r\n                //         \"label\": RegistrationSubType[0].sregsubtypename\r\n                //     } : selectedRecord[\"nregsubtypecode\"] = \"\";\r\n                // const [labelname] = event.item;\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeChange(Map, masterData, event, labelname) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getRegSubTypeByRegType\", Map)\r\n\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    [labelname]: { ...event.item }\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getComponentTestBySpec(Map, selectedRecord, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getComponentTestBySpec\", Map)\r\n            .then(response => {\r\n                const { Component, Test } = response.data;\r\n                let slno = Component.length > 0 ? Component[0].slno : -1;\r\n                let selectedComponent = Component.length > 0 ? Component[0] : undefined\r\n                let SelectedTest = [];\r\n                if (Object.keys(Test).length > 0) {\r\n                    SelectedTest = Test[slno];\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectedComponent, loading: false,\r\n                         selectedRecord, popUptestDataState: { skip: 0, take: 10 }\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getTestfromDB(objComponent, LoginProps, nflag) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let component = { ...objComponent };\r\n        component[\"ncomponentcode\"] = objComponent[\"ncomponentcode\"] ? objComponent[\"ncomponentcode\"].value : -1;\r\n        component[\"nstoragelocationcode\"] = objComponent[\"nstoragelocationcode\"] ? objComponent[\"nstoragelocationcode\"].value : -1;\r\n        component[\"nstorageconditioncode\"] = objComponent[\"nstorageconditioncode\"] ? objComponent[\"nstorageconditioncode\"].value : -1;\r\n        component[\"slno\"] = LoginProps.Component ? Object.keys(LoginProps.Component).length + 1 : 0;\r\n        component[\"scomponentname\"] = objComponent[\"ncomponentcode\"].label;\r\n        component[\"sstoragelocationname\"] = objComponent[\"nstoragelocationcode\"] && objComponent[\"nstoragelocationcode\"].label ? objComponent[\"nstoragelocationcode\"].label : \"\";\r\n        component[\"sstorageconditionname\"] = objComponent[\"nstorageconditioncode\"] && objComponent[\"nstorageconditioncode\"].label ? objComponent[\"nstorageconditioncode\"].label : \"\";\r\n        component[\"ntzdmanufdate\"] = objComponent[\"ntzdmanufdate\"] ? objComponent[\"ntzdmanufdate\"].value : -1;\r\n        component[\"ntzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].value : -1;\r\n        component[\"stzdreceivedate\"] = objComponent[\"ntzdreceivedate\"] ? objComponent[\"ntzdreceivedate\"].label : \"\";\r\n        component[\"nplasmafilecode\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].value : -1;\r\n        component[\"splasmafilenumber\"] = objComponent[\"nplasmafilecode\"] ? objComponent[\"nplasmafilecode\"].label : \"\";\r\n        const dreceiveddate = objComponent[\"dreceiveddate\"];\r\n        component[\"dreceiveddate\"] = dreceiveddate;//formatInputDate(objComponent[\"dreceiveddate\"], false);\r\n        component[\"sreceiveddate\"] = convertDateTimetoString(dreceiveddate, LoginProps.userInfo);//formatInputDateWithoutT(objComponent[\"dreceiveddate\"], false);//formatDate(objComponent[\"sreceiveddate\"]);\r\n        // rsapi.post(\"/registration/getTestfromDB\", { \"Component\": component })\r\n        rsapi.post(\"/registration/getTestfromDB\", {\r\n            nspecsampletypecode: component.nspecsampletypecode,\r\n            slno: component.slno\r\n        })\r\n            .then(response => {\r\n                let TestData = response.data;\r\n                let slno = component.slno;\r\n                let SelectedTest = [];\r\n                let loadComponent = true;\r\n                let selectComponent = {};\r\n                let showSaveContinue = true;\r\n                let SelectedSource = [];\r\n                // let openChildModal = true;\r\n                let selectedComponent = undefined;\r\n                let parentPopUpSize = \"lg\"\r\n                // selectComponent = objComponent\r\n                if (nflag === 1) {\r\n                    loadComponent = true;\r\n                    objComponent[\"smanuflotno\"] = \"\";\r\n                    objComponent[\"dreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    objComponent[\"sreceiveddate\"] = rearrangeDateFormat(LoginProps.userInfo, LoginProps.CurrentTime)//new Date(LoginProps.CurrentTime);\r\n                    selectComponent = objComponent;\r\n                } else {\r\n                    loadComponent = false;\r\n                    parentPopUpSize = \"xl\"\r\n                    // openChildModal = false;\r\n                    showSaveContinue = false;\r\n                    selectComponent = undefined\r\n                }\r\n                let Test = LoginProps.Test || [];\r\n                let Component = LoginProps.Component || [];\r\n                Component.unshift(component);\r\n                selectedComponent = component;\r\n                Test[slno] = response.data;\r\n                SelectedTest = TestData;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Component, Test, SelectedTest, selectComponent, selectedComponent,\r\n                        loadComponent, showSaveContinue, parentPopUpSize, loading: false, SelectedSource\r\n                    }\r\n                });\r\n                // console.log(response.data);\r\n            })\r\n            .catch(error => {\r\n                //   console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function EditComponent(Map, component, userInfo) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const TimeZoneField = response[1].data;\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n\r\n                component[\"ncomponentcode\"] = { label: component.scomponentname, value: component.ncomponentcode }\r\n                component[\"dreceiveddate\"] = rearrangeDateFormat(userInfo, component[\"sreceiveddate\"]);\r\n                component[\"scomments\"] = component[\"scomments\"]\r\n\r\n                let ntzdreceivedate = component.ntzdreceivedate;\r\n                if (component.ntzdreceivedate !== null && typeof component.ntzdreceivedate === \"object\") {\r\n                    ntzdreceivedate = component.ntzdreceivedate.value;\r\n                }\r\n                component[\"ntzdreceivedate\"] = component.ntzdreceivedate ?\r\n                    {\r\n                        \"label\": TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].stimezoneid, \"value\":\r\n                            TimeZoneField[TimeZoneField.findIndex(x => x.ntimezonecode === ntzdreceivedate)].ntimezonecode\r\n                    } : \"\"\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true, childoperation: \"update\",\r\n                        lstComponent, ChildscreenName: \"Component\",\r\n                        openChildModal: false, selectComponent: component, parentPopUpSize: \"lg\",\r\n                        timeZoneList, loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function ReloadData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    //masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                // let selectedFilter = inputData.selectedFilter;\r\n                // selectedFilter[\"fromdate\"] = \"\";\r\n                // selectedFilter[\"todate\"] = \"\";\r\n\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampletake:undefined,\r\n                        subsampleskip:0,\r\n                        showSample: undefined,\r\n                        //selectedFilter\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTreeByProduct(Map, selectedRecord, comboData, inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/getTreeByProduct\", Map)\r\n            .then(response => {\r\n                let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                const selectedSpec = {}\r\n                if (response.data[\"rtn\"] === true) {\r\n                    Specification = constructOptionList(response.data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                        \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                    AgaramTree = response.data[\"AgaramTree\"];\r\n                    ActiveKey = response.data[\"ActiveKey\"];\r\n                    FocusKey = response.data[\"FocusKey\"];\r\n                    OpenNodes = response.data[\"OpenNodes\"];\r\n                    //Manufacturer = response.data[\"Manufacturer\"];\r\n                    selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                        \"value\": Specification[0].value,\r\n                        \"label\": Specification[0].label,\r\n                        \"item\": Specification[0].item\r\n                    } : \"\";\r\n\r\n                    selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                    selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1\r\n                }\r\n                selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Specification,\r\n                        selectedRecord,\r\n                        AgaramTree, ActiveKey, FocusKey, OpenNodes,\r\n                        Test: [],\r\n                        SelectedTest: [],\r\n                        loading: false,\r\n                        comboData,\r\n                        ...inputParam,\r\n                        selectedSpec,\r\n                        Component: [],\r\n                        selectComponent: {},\r\n                        selectedComponent: {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport const getNewRegSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedNode !== null) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam, ntreetemplatemanipulationcode: inputParam.selectedNode.ntemplatemanipulationcode })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let Specification = constructOptionList(response.data || [], \"nallottedspeccode\", \"sspecname\", false, false, true).get(\"OptionList\");\r\n                    let selectedComponent = undefined;\r\n                    inputParam.selectedRecord[\"nallottedspeccode\"] = Specification.length > 0 ? { value: Specification[0].value, label: Specification[0].label, item: Specification[0].item } : \"\";\r\n                    inputParam.selectedRecord[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\";\r\n                    inputParam.selectedRecord[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? Specification[0].item.ntemplatemanipulationcode : -1;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            ActiveKey: inputParam.activeKey,\r\n                            FocusKey: inputParam.focusKey,\r\n                            primaryKey: inputParam.primaryKey,\r\n                            Specification: Specification,\r\n                            selectedNode: inputParam.selectedNode,\r\n                            selectedRecord: inputParam.selectedRecord,\r\n                            Test: [],\r\n                            selectedComponent,\r\n                            SelectedTest: [],\r\n                            loading: false,\r\n                            showSample: undefined\r\n                        }\r\n                    }\r\n                    );\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function AddComponents(Map) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\",\r\n            Map);\r\n        const timezone = rsapi.post(\"timezone/getTimeZone\");\r\n\r\n        urlArray = [ComponentTestBySpec, timezone\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const lstComponentMap = constructOptionList(response[0].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const timeZoneListMap = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                const timeZoneList = timeZoneListMap.get(\"OptionList\");\r\n                let dreceiveddate = null;\r\n                if (lstComponent[0].item.sreceiveddate)\r\n                    dreceiveddate = rearrangeDateFormat(Map[\"userinfo\"], lstComponent[0].item.sreceiveddate);//new Date(lstComponent[0].item.sreceiveddate);//|| [];\r\n\r\n                let selectComponent = {\r\n                    sreceiveddate: dreceiveddate,\r\n                    dreceiveddate,\r\n                    ntzdreceivedate: { \"label\": Map[\"userinfo\"].stimezoneid, \"value\": Map[\"userinfo\"].ntimezonecode },\r\n                    stzdreceivedate: Map[\"userinfo\"].stimezoneid,\r\n                    scomments: \"\",\r\n                    nallottedspeccode: lstComponent[0].item.nallottedspeccode\r\n                };\r\n                let CurrentTime = dreceiveddate;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadComponent: true,\r\n                        lstComponent, dreceiveddate, ChildscreenName: \"Component\",\r\n                        showSaveContinue: true, openChildModal: false, childoperation: \"create\", selectComponent\r\n                        , parentPopUpSize: \"lg\", CurrentTime, timeZoneList, loading: false,\r\n                        openPortal: true, openModal: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\nexport function getTest(objComponent, LoginProps, nneedsubsample, specBasedComponent) {\r\n    return function (dispatch) {\r\n        if (Object.keys(objComponent).length > 0) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: objComponent.nspecsampletypecode,\r\n                slno: objComponent.slno,\r\n                nneedsubsample: nneedsubsample,\r\n                nallottedspeccode: objComponent.nallottedspeccode,\r\n                specBasedComponent: specBasedComponent\r\n\r\n            })\r\n                .then(response => {\r\n                    let TestData = response.data;\r\n                    let Test = LoginProps.Test || [];\r\n                    let componentTest = Test[objComponent.slno] ? Test[objComponent.slno] : [];\r\n                    const TestCombined = filterRecordBasedOnTwoArrays(TestData, componentTest, \"ntestgrouptestcode\");\r\n                    // const lstComponentMap = constructOptionList(TestCombined|| [], \"ntestgrouptestcode\",\r\n                    //\"stestsynonym\", undefined, undefined, true);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            TestCombined, loadTest: true, openChildModal: false, \r\n                            ChildscreenName: \"Test\",\r\n                            screenName: \"Test\",\r\n                            operation:\"create\",\r\n                            childoperation: \"create\",\r\n                            parentPopUpSize: \"lg\", loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTCOMPONENTTOADDTEST\" }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function addsubSample(masterData, userinfo, columnList,\r\n    selectComponent, childColumnList,\r\n    SubSamplecomboComponents, SubSamplewithoutCombocomponent,\r\n    specBasedComponent, Map, Component, isServiceRequired, SubSamplecomboData) {\r\n    if (isServiceRequired) {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = []\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray[0] = timeZoneService;\r\n            const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n                parentcolumnlist: columnList,\r\n                childcolumnlist: childColumnList,\r\n                userinfo\r\n            })\r\n            urlArray[1] = actualService;\r\n            if (specBasedComponent) {\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent\r\n                })\r\n                urlArray[2] = ComponentTestBySpec;\r\n            }else{\r\n                Component = Component ? Component : []\r\n                const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                    //nneedsubsample: nneedsubsample,\r\n                    // nallottedspeccode: objComponent.nallottedspeccode,\r\n                    specBasedComponent: specBasedComponent\r\n\r\n                })\r\n                urlArray[2] = TestGet;\r\n            }\r\n            Axios.all(urlArray).then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                    selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n                let TestCombined = [];\r\n                let lstComponent = [];\r\n                if (specBasedComponent) {\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n           \r\n                 lstComponent = lstComponentMap.get(\"OptionList\");\r\n \r\n                }else{\r\n                    TestCombined = response[2].data\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                SubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] =  componentrow.loadcurrentdate ?  new Date(): \"\";\r\n                        } \r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n\r\n                })\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ChildscreenName: \"SubSample\",\r\n                        screenName:\"SubSample\",\r\n                        showSaveContinue: true,\r\n                        openChildModal: false,\r\n                        childoperation: \"create\",\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent,\r\n                        openPortal: true,\r\n                        openModal: false,\r\n                        operation: \"create\",\r\n                        loadSubSample: true,\r\n                        selectComponent: selectedRecord1,\r\n                        SubSamplecomboData: comboData1,\r\n                        SubSamplecomboComponents,\r\n                        SubSamplewithoutCombocomponent,\r\n                        TestCombined,\r\n                        parentSubSampleColumnList: columnList,\r\n                        timeZoneList,\r\n                        defaultTimeZone,\r\n                        masterData,\r\n                    }\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        }\r\n    } else {\r\n        const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n            selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n        return (dispatch) => {\r\n          if (!specBasedComponent ) {\r\n         rsapi.post(\"/registration/getTestfromDB\",{\r\n            nallottedspeccode: Map[\"nallottedspeccode\"],\r\n            slno: Component ? Object.keys(Component).length + 1 : 1,\r\n            //nneedsubsample: nneedsubsample,\r\n            ...Map,\r\n            // nallottedspeccode: objComponent.nallottedspeccode,\r\n            specBasedComponent: specBasedComponent\r\n         }) .then(response => {\r\n            const TestCombined =  response.data\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ChildscreenName: \"SubSample\",\r\n                    showSaveContinue: true,\r\n                    openChildModal: false,\r\n                    childoperation: \"create\",\r\n                    parentPopUpSize: \"lg\",\r\n                    loading: false,\r\n                    lstComponent: [],\r\n                    openPortal: true,\r\n                    openModal: false,\r\n                    operation: \"create\",\r\n                    loadSubSample: true,\r\n                    selectComponent: newcomboData.selectedRecord,\r\n                    TestCombined:TestCombined\r\n                }\r\n            });\r\n        })\r\n        }else{\r\n           // Component = Component ? Component : []\r\n           rsapi.post(\"/registration/getComponentBySpec\", {\r\n                ...Map,\r\n                specBasedComponent: specBasedComponent\r\n            }) .then(response => {\r\n               // const lstComponent =  response.data.lstComponent\r\n               let  lstComponent= filterRecordBasedOnTwoArrays(response.data.lstComponent,Component,\"ncomponentcode\")\r\n                const lstComponentMap = constructOptionList(lstComponent || [], \"ncomponentcode\",\r\n                \"scomponentname\", undefined, undefined, true);\r\n              \r\n                  lstComponent = lstComponentMap.get(\"OptionList\");\r\n\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ChildscreenName: \"SubSample\",\r\n                        showSaveContinue: true,\r\n                        openChildModal: false,\r\n                        childoperation: \"create\",\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent,\r\n                        openPortal: true,\r\n                        openModal: false,\r\n                        operation: \"create\",\r\n                        loadSubSample: true,\r\n                        selectComponent: newcomboData.selectedRecord,\r\n                        TestCombined:[],\r\n                        selectedTestData:[]\r\n                    }\r\n                });\r\n            })\r\n        }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function componentTest( selectedobject,Reg,specBasedComponent,Component) {\r\n    return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            Component = Component ? Component : []\r\n            rsapi.post(\"/registration/getTestfromDB\", {\r\n                nspecsampletypecode: selectedobject.nspecsampletypecode,\r\n                slno: Component ? Object.keys(Component).length + 1 : 1,\r\n                specBasedComponent:specBasedComponent\r\n\r\n            })\r\n                .then(response => {\r\n                    let TestData = response.data;\r\n                    //let Test = [];\r\n                   // Test[selectedobject.slno] = TestData;\r\n                  const Map={}\r\n                    if(Reg){\r\n                        Map[\"selectedRecord\"]=selectedobject\r\n                    }else{\r\n                        Map[\"selectComponent\"]=selectedobject\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                             TestCombined:TestData,...Map  ,loading:false,selectedTestData:[]\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function addSubSampleSaveContinue(Map1, Map, \r\n    specBasedComponent, Component,) {\r\n  \r\n      //  const newcomboData = parentChildComboLoad(columnList, SubSamplecomboData,\r\n       //     selectComponent, childColumnList, SubSamplewithoutCombocomponent)\r\n        return (dispatch) => {\r\n          if (!specBasedComponent) {\r\n         rsapi.post(\"/registration/getTestfromDB\",{\r\n            nallottedspeccode: Map[\"nallottedspeccode\"],\r\n            slno: Map1.Component ? Object.keys(Map1.Component).length + 1 : 1,\r\n            specBasedComponent: specBasedComponent\r\n         }) .then(response => {\r\n            const TestCombined =  response.data\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    ...Map1,\r\n                    loading: false,\r\n                    TestCombined:TestCombined\r\n                }\r\n            });\r\n        })\r\n        }\r\n        }\r\n\r\n}\r\n\r\n\r\n\r\nexport function editSubSample(Map,\r\n    component, userInfo, specBasedComponent) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = []\r\n        let Componnet = {}\r\n        if (specBasedComponent ) {\r\n            Componnet = rsapi.post(\"/registration/getComponentBySpec\",{\r\n                ...Map});\r\n        }\r\n\r\n        urlArray = [Componnet\r\n        ]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let comp = []\r\n                if (specBasedComponent ) {\r\n                    comp = response[0].data.lstComponent\r\n                } \r\n                const lstComponentMap = constructOptionList(comp || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n                const lstComponent = lstComponentMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loadSubSample: true, childoperation: \"update\",\r\n                        ChildscreenName: \"SubSample\",\r\n                        openChildModal: false, selectComponent: component,\r\n                        parentPopUpSize: \"lg\", loading: false, lstComponent\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            })\r\n    }\r\n}\r\n\r\nexport function insertRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n                let selectedSample = response.data[\"selectedSample\"];\r\n                let RegistrationGetSubSample = response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                let selectedSubSample = RegistrationGetSubSample;\r\n                RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n                if (inputParam.inputData.nneedsubsample) {\r\n                    RegistrationGetSubSample = sortData(response.data[\"RegistrationGetSubSample\"],'npreregno','desc')\r\n                    selectedSubSample = RegistrationGetSubSample.length>0?[RegistrationGetSubSample[0]] : [];\r\n                    RegistrationGetTest=RegistrationGetTest.filter(x=>x.ntransactionsamplecode===selectedSubSample[0].ntransactionsamplecode)\r\n                    selectedTest = RegistrationGetTest.length > 0 ? response.data[\"selectedTest\"] : [];\r\n                }\r\n              // RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\")\r\n                if (inputParam.multipleselectionFlag) {\r\n                    selectedSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.selectedSample);\r\n                    updatedObjectWithNewElement(response.data[\"selectedSubSample\"], masterData.RegistrationGetSubSample);\r\n                    updatedObjectWithNewElement(response.data[\"selectedTest\"], masterData.RegistrationGetTest);\r\n                    RegistrationGetSubSample = masterData.RegistrationGetSubSample;\r\n                    RegistrationGetTest = masterData.RegistrationGetTest;\r\n                }\r\n\r\n\r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                    selectedSample, selectedSubSample, selectedTest,\r\n                    RegistrationGetSubSample, RegistrationGetTest, RegistrationGetSample\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: undefined,\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined,\r\n                    openPortal: false,\r\n                    selectedSpec: {},\r\n                    selectComponent: {},\r\n                    SelectedTest: {},\r\n                    selectedComponent: {},\r\n                    Component: [],\r\n                    selectedRecord: {},\r\n                    SelectedTest: [],\r\n                    Test: [],\r\n                    selectedComponent: {}\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getRegistrationSample(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"registration/getRegistrationByFilterSubmit\", { ...inputData.inputData })\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    ...response.data\r\n                }\r\n                if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    inputData.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                    inputData.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                    inputData.searchTestRef.current.value = \"\"\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                let respObject = {};\r\n                if (inputData.selectedFilter) {\r\n                    respObject = { selectedFilter: { ...inputData.selectedFilter } };\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        skip: 0,\r\n                        testskip: 0,\r\n                        take: undefined,\r\n                        testtake: undefined,\r\n                        subsampleskip:0,\r\n                        subsampletake:undefined,\r\n                        showSample: undefined,\r\n                        ...respObject,\r\n                        activeSampleTab: inputData.inputData.activeSampleTab\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegistrationsubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedsubsample: inputData.nneedsubsample,\r\n            checkBoxOperation:   inputData.nneedsubsample===true?\r\n            inputData.checkBoxOperation===5?3:inputData.checkBoxOperation:inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        const subSample = inputData.nneedsubsample\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationSubSample\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let masterData = {}\r\n                    let skipInfo = {}\r\n                    let oldSelectedTest = inputData.masterData.selectedTest||[]\r\n                    if (subSample) {\r\n                        let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetSubSample[0]] : [],\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        let RegistrationParameter = [];\r\n                        if (inputData.checkBoxOperation === 1 || inputData.checkBoxOperation === 7) {\r\n\r\n                            const wholeSubSampleList = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((subsample, index) => {\r\n                                if (!wholeSubSampleList.includes(subsample.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n                            if (oldSelectedSubSample.length > 0) {\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: oldSelectedSubSample\r\n                                }\r\n                            }\r\n                            const selectedTest = getSameRecordFromTwoArrays(oldSelectedTest,\r\n                                masterData.selectedSubSample, 'npreregno')\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest\r\n                            }\r\n                        }\r\n                        if (inputData.checkBoxOperation === 3||inputData.checkBoxOperation ===5) {\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: masterData.RegistrationGetTest.length > 0 ? [masterData.RegistrationGetTest[0]] : []\r\n                            }\r\n\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                    case \"IDS_TESTATTACHMENTS\":\r\n                                        {\r\n                                        let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                        let RegistrationTestAttachment1 = [];\r\n                                        if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                            RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                        }\r\n                                        let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                        RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                    }\r\n                                        break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = masterData.selectedTest.length > 0 ? masterData.selectedTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                            masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                            masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                        }\r\n\r\n\r\n                        let { testskip, testtake, subsampleskip, subsampletake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetSubSample.length < inputData.subsampleskip) {\r\n                            testskip = 0;\r\n                            subsampleskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake, subsampleskip, subsampletake }\r\n                        }\r\n                    } else {\r\n\r\n                        //let oldSelectedTest = inputData.masterData.selectedTest\r\n                        //  let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n                        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                            inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\",\r\n                            inputData.removeElementFromArray);\r\n                        masterData = {\r\n                            ...inputData.masterData,\r\n                            selectedSample: inputData.selectedSample,\r\n                            selectedPreregno: inputData.npreregno,\r\n                            selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                            selectedSubSample: inputData.masterData.RegistrationGetSubSample,\r\n                        }\r\n                        let RegistrationTestComment = [];\r\n                        let RegistrationParameter = [];\r\n                        let RegistrationTestAttachment = [];\r\n                        \r\n                        if (inputData.checkBoxOperation === 7 || inputData.checkBoxOperation === 1) {\r\n                            const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.forEach((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n\r\n                            })\r\n\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedTest: oldSelectedTest,\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                    inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                            }\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                    case \"IDS_TESTATTACHMENTS\":\r\n                                        {\r\n                                            RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                            inputData.masterData.RegistrationTestAttachment : [] :\r\n                                            getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                      \r\n                                    }\r\n                                        break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                        inputData.masterData.RegistrationTestComment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                        inputData.masterData.RegistrationParameter : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else if (inputData.checkBoxOperation === 5) {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                    case \"IDS_TESTATTACHMENTS\":\r\n                                        {\r\n                                            let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                            let RegistrationTestAttachment1 = [];\r\n                                            if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                                RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                            }\r\n                                            let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                            RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                            activeName = \"RegistrationTestAttachment\"\r\n                                            dataStateName = \"testCommentDataState\"\r\n                                      \r\n                                    }\r\n                                        break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                    let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                    let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                    let RegistrationTestComment2 = [];\r\n                                    if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                        RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                    }\r\n                                    let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                            // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                        }\r\n                        else {\r\n                            switch (inputData.activeTestTab) {\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                        [...response.data.RegistrationTestComment] : [];\r\n                                    activeName = \"RegistrationTestComment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                                    case \"IDS_TESTATTACHMENTS\":\r\n                                        {\r\n                                            RegistrationTestAttachment = response.data.RegistrationTestAttachment ?\r\n                                            [...response.data.RegistrationTestAttachment] : [];\r\n                                        activeName = \"RegistrationTestAttachment\"\r\n                                        dataStateName = \"testCommentDataState\"\r\n                                      \r\n                                    }\r\n                                    break;\r\n                                case \"IDS_PARAMETERRESULTS\":\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                                default:\r\n                                    RegistrationParameter = response.data.RegistrationParameter ?\r\n                                        [...response.data.RegistrationParameter] : [];\r\n                                    activeName = \"RegistrationParameter\"\r\n                                    dataStateName = \"resultDataState\"\r\n                                    break;\r\n                            }\r\n                        }\r\n                        masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                        masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                        masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                        let { testskip, testtake } = inputData\r\n                        let bool = false;\r\n\r\n                        if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                            testskip = 0;\r\n                            bool = true\r\n                        }\r\n                        if (bool) {\r\n                            skipInfo = { testskip, testtake }\r\n                        }\r\n\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\"\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            let bool = false;\r\n            let skipInfo = {};\r\n            let { testskip, testtake, subsampletake, subsampleskip } = inputData;\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let oldSelectedSubSample = inputData.masterData.selectedSubSample\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let selectedSample = inputData.selectedSample;\r\n                let filterTestSameOldSelectedTest = getSameRecordFromTwoArrays(oldSelectedTest, inputData.masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                let selectedTest = filterTestSameOldSelectedTest.length > 0 ? filterTestSameOldSelectedTest :\r\n                    inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                let ntransactiontestcode = selectedTest.length > 0 ? selectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\";\r\n                let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n\r\n                if (subSample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    selectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RegistrationGetSubSample[0]];\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n\r\n                }\r\n                let masterData = { ...inputData.masterData, selectedSample, selectedSubSample, selectedTest }\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3, skipInfo\r\n                }\r\n                if (subSample) {\r\n                    if (selectedTest.length === 0) {\r\n                        inputData[\"npreregno\"] = selectedSubSample.map(x => x.npreregno).join(\",\")\r\n                        inputData[\"ntransactionsamplecode\"] = selectedSubSample.map(x => x.ntransactionsamplecode).join(\",\")\r\n                        inputData[\"checkBoxOperation\"] = 3\r\n                        inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                        dispatch(getRegistrationTestDetail(inputData, true));\r\n                    } else {\r\n                        dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                    }\r\n                } else {\r\n                    dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSample: inputData.selectedSample,\r\n                    selectedPreregno: inputData.npreregno,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                    // RegistrationTestComment,\r\n                    selectedSubSample: inputData.masterData.RegistrationGetSubSample\r\n                }\r\n                let subsamplecheck = true;\r\n                if (subSample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RegistrationGetSubSample[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    selectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RegistrationGetTest\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getRegistrationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RegistrationGetSubSample.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            selectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RegistrationGetSubSample.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                if (inputData.masterData.RegistrationGetTest.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = { ...skipInfo, testskip, testtake }\r\n                }\r\n\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getRegistrationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            ntransactionstatus: inputData.ntransactionstatus,\r\n            napprovalconfigcode: inputData.napprovalconfigcode,\r\n            activeTestTab: inputData.activeTestTab,\r\n            activeSampleTab: inputData.activeSampleTab,\r\n            userinfo: inputData.userinfo,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"registration/getRegistrationTest\", inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.selectedTest||[]\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data,\r\n                        inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\",\r\n                        inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedSubSample: inputData.selectedSubSample,\r\n                        selectedTransactionsamplecode: inputData.ntransactionsamplecode,\r\n                        selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                            [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                        // RegistrationTestComment,\r\n                    }\r\n                    //let wholeRegistrationTestComments = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationTestAttachment= [];\r\n                    let RegistrationParameter = [];\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.forEach((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n\r\n                        })\r\n\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                selectedTest: oldSelectedTest,\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                                inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"\"\r\n                        }\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                                    inputData.masterData.RegistrationTestComment : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment ?\r\n                                        inputData.masterData.RegistrationTestAttachment : [] :\r\n                                        getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                            default:\r\n                                RegistrationParameter = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                                    inputData.masterData.RegistrationParameter : [] :\r\n                                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 5) {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                let ResponseData = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment1 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment1 = [...inputData.masterData.RegistrationTestComment, ...ResponseData];\r\n                                }\r\n                                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                                case \"IDS_TESTCOMMENTS\":\r\n                                    {\r\n                                    let ResponseData = response.data.RegistrationTestAttachment ? response.data.RegistrationTestAttachment : [];\r\n                                    let RegistrationTestAttachment1 = [];\r\n                                    if (inputData.masterData.RegistrationTestAttachment !== undefined) {\r\n                                        RegistrationTestAttachment1 = [...inputData.masterData.RegistrationTestAttachment, ...ResponseData];\r\n                                    }\r\n                                    let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                    RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(RegistrationTestAttachment1, ntransactiontestcode, \"ntransactiontestcode\");\r\n                                    activeName = \"RegistrationTestAttachment\"\r\n                                    dataStateName = \"testCommentDataState\"\r\n                                }\r\n                                    break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                let resultResponseData = response.data.RegistrationParameter ? response.data.RegistrationParameter : [];\r\n                                let RegistrationParameter1 = [...inputData.masterData.RegistrationParameter, ...resultResponseData];\r\n                                let ntransactiontestcode1 = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationParameter = getRecordBasedOnPrimaryKeyName(RegistrationParameter1, ntransactiontestcode1, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                let ResponseData1 = response.data.RegistrationTestComment ? response.data.RegistrationTestComment : [];\r\n                                let RegistrationTestComment2 = [];\r\n                                if (inputData.masterData.RegistrationTestComment !== undefined) {\r\n                                    RegistrationTestComment2 = [...inputData.masterData.RegistrationTestComment, ...ResponseData1];\r\n                                }\r\n                                let ntransactionTestCode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : -1\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(RegistrationTestComment2, ntransactionTestCode, \"ntransactiontestcode\");\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                        // RegistrationTestComment = response.data.RegistrationTestComment ? [...response.data.RegistrationTestComment] : [];\r\n                    }\r\n                    else {\r\n                        switch (inputData.activeTestTab) {\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = response.data.RegistrationTestComment ?\r\n                                    [...response.data.RegistrationTestComment] : [];\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    RegistrationTestAttachment= response.data.RegistrationTestAttachment ?\r\n                                    [...response.data.RegistrationTestAttachment] : [];\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                    break;\r\n                            case \"IDS_PARAMETERRESULTS\":\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationParameter = response.data.RegistrationParameter ?\r\n                                    [...response.data.RegistrationParameter] : [];\r\n                                activeName = \"RegistrationParameter\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData['RegistrationTestComment'] = RegistrationTestComment;\r\n                    masterData['RegistrationTestAttachment'] = RegistrationTestAttachment;\r\n                    masterData[\"RegistrationParameter\"] = RegistrationParameter;\r\n                    let { testskip, testtake } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RegistrationGetTest.length < inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n\r\n                    if (bool) {\r\n                        skipInfo = { testskip, testtake }\r\n                    }\r\n                    if (inputData.masterData.selectedSample && inputData.sampleGridDataState\r\n                        && inputData.masterData.selectedSample.length <= inputData.sampleGridDataState.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            sampleGridDataState: {\r\n                                ...inputData.sampleGridDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let inputParam = { attachmentskip: undefined }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeSampleTab: inputData.activeSampleTab,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo,\r\n                            inputParam\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.selectedTest\r\n            let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.selectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = true;\r\n            } else {\r\n                isGrandChildGetRequired = false;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ? inputData.masterData.RegistrationGetTest[0].ntransactiontestcode.toString() : \"-1\";\r\n                let selectedSubSample = inputData.selectedSubSample;\r\n                // let selectedPreregno = inputData.npreregno;\r\n                let selectedTest = inputData.masterData.RegistrationGetTest.length > 0 ? [inputData.masterData.RegistrationGetTest[0]] : [];\r\n                // let selectedSubSample = inputData.masterData.RegistrationGetSubSample\r\n                let masterData = { ...inputData.masterData, selectedSubSample, selectedTest }\r\n                inputData = {\r\n                    ...inputData, childTabsKey: [\"RegistrationTestComment\", \"RegistrationParameter\"], ntransactiontestcode, masterData, selectedTest,\r\n                    selectedSubSample, checkBoxOperation: 3\r\n                }\r\n                dispatch(getTestChildTabDetailRegistration(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    selectedSubSample: inputData.selectedSubSample,\r\n                    selectedTransactioncode: inputData.ntransactionsamplecode,\r\n                    selectedTest: inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        [inputData.masterData.RegistrationGetTest[0]] : [],\r\n                }\r\n\r\n                const wholeTestList = masterData.RegistrationGetTest.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.forEach((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        selectedTest: oldSelectedTest,\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RegistrationGetTest.length > 0 ?\r\n                        inputData.masterData.RegistrationGetTest[0].ntransactiontestcode : \"-1\"\r\n                }\r\n                masterData[\"RegistrationTestComment\"] = keepOld ? inputData.masterData.RegistrationTestComment ?\r\n                    inputData.masterData.RegistrationTestComment : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                masterData[\"RegistrationParameter\"] = keepOld ? inputData.masterData.RegistrationParameter ?\r\n                    inputData.masterData.RegistrationParameter : [] :\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationParameter, ntransactiontestcode, \"ntransactiontestcode\")\r\n                let skipInfo = {};\r\n                let dataStateArray = [\r\n                    { activeName: 'selectedSample', dataStateName: 'sampleGridDataState' },\r\n                    { activeName: 'RegistrationSourceCountry', dataStateName: 'sourceDataState' },\r\n                    { activeName: 'RegistrationTestComment', dataStateName: 'testCommentDataState' },\r\n                    { activeName: 'RegistrationParameter', dataStateName: 'resultDataState' },\r\n                ]\r\n                dataStateArray.map(arr => {\r\n                    if (inputData[arr.dataStateName] && masterData[arr.activeName] &&\r\n                        masterData[arr.activeName].length <= inputData[arr.dataStateName].skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [arr.dataStateName]: {\r\n                                ...inputData[arr.dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    return null;\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestTab: inputData.activeTestTab,\r\n                        ...skipInfo\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}\r\nexport function acceptRegistration(inputParam, LoginProps) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/acceptRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data.rtn === undefined || response.data.rtn === \"Success\"\r\n                    || response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                    || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                    replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                    delete response.data[\"RegistrationGetSample\"];\r\n                    delete response.data[\"RegistrationGetSubSample\"];\r\n                    delete response.data[\"RegistrationGetTest\"];\r\n                    let masterData = {\r\n                        ...LoginProps, ...response.data,\r\n                        selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                        selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                        selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                    }\r\n                    let respObject = {\r\n                        masterData,\r\n                        ...inputParam.inputData,\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showSample: undefined\r\n                    }\r\n                    dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    if (response.data.rtn === \"IDS_ATLEASTONETESTMUSTBEPREREGISTER\"\r\n                        || response.data.rtn === \"IDS_ALLSAMPLESAREREGISTERED\" || response.data.rtn === \"IDS_SELECTPREREGISTERORQUARANTINESAMPLES\") {\r\n                        toast.warn(intl.formatMessage({ id: response.data.rtn }));\r\n                    }\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false\r\n                        }\r\n                    });\r\n                    toast.warn(response.data.rtn);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                toast.error(error.message);\r\n            })\r\n    }\r\n}\r\n\r\nexport const addMoreTest = (inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        let { sampleList } = inputParam;\r\n        let value = false;\r\n        if(inputParam.selectedsubsample&&inputParam.selectedsubsample.length>0){\r\n        value = inputParam.selectedsubsample.some(obj => obj.nspecsampletypecode !== inputParam.selectedsubsample[0].nspecsampletypecode)\r\n        if (value) {\r\n            return toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n        }\r\n        sampleList = sampleList ? [...sampleList.slice(inputParam.skip, inputParam.take)] : [];\r\n        const selectedsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsample, \"npreregno\");\r\n        const selectsubsample = getSameRecordFromTwoArrays(sampleList, inputParam.selectedsubsample, \"npreregno\");\r\n        if (selectedsample && selectedsample.length > 0) {\r\n            const findTransactionStatus = [...new Set(selectedsample.map(item => item.ntransactionstatus))];\r\n\r\n            if (findTransactionStatus.length === 1) {\r\n                if (findTransactionStatus[0] !== transactionStatus.REJECT && findTransactionStatus[0] !== transactionStatus.CANCELLED) {\r\n                    if (findTransactionStatus[0] !== transactionStatus.CERTIFIED && findTransactionStatus[0] !== transactionStatus.SENT) {\r\n                        const findApprovalVersion = [...new Set(selectedsample.map(item => item.napprovalversioncode))];\r\n                        if (findApprovalVersion.length === 1) {\r\n                            const findSampleSpec = [...new Set(selectedsample.map(item => item.nallottedspeccode))];\r\n                            //const findComponent = [...new Set(selectsubsample.map(item => item.ncomponentcode))];\r\n                            if (findSampleSpec.length === 1)//&& findComponent.length === 1 \r\n                            {\r\n                                dispatch(initRequest(true));\r\n                                rsapi.post(\"/registration/getMoreTest\", { ...inputParam })\r\n                                    .then(response => {\r\n                                        dispatch({\r\n                                            type: DEFAULT_RETURN,\r\n                                            payload: {\r\n                                                availableTest: response.data,\r\n                                                loadChildTest: true,\r\n                                                loading: false, ncontrolCode,\r\n                                                screenName: \"IDS_TEST\",\r\n                                                operation: \"create\",\r\n                                                openModal: true,\r\n                                                parentPopUpSize: \"lg\",\r\n                                                selectedRecord: {},\r\n                                                showSample: undefined\r\n                                            }\r\n                                        });\r\n                                    })\r\n                                    .catch(error => {\r\n                                        dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                                        if (error.response.status === 500) {\r\n                                            toast.error(error.message);\r\n                                        } else {\r\n                                            toast.warn(this.props.formatMessage({ id: error.response.data }));\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESPECANDCOMPONENT\" }));\r\n                            }\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMEAPPROVALCONFIG\" }));\r\n                        }\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCERTIFIEDSAMPLES\" }));\r\n                    }\r\n                }\r\n                else {\r\n                    ////     toast.warn(intl.formatMessage({ id: \"IDS_TESTCANNOTBEFORCANCELLEDREJECTSAMPLES\" }));\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SAMPLEISREJECTEDORCANCELLED\" }));\r\n                }\r\n            } else {\r\n                toast.warn(intl.formatMessage({ id: \"IDS_PLEASESELECTSAMPLEWITHSAMESTATUS\" }));\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }));\r\n        }\r\n    }else{\r\n        toast.warn(intl.formatMessage({ id: \"IDS_SELECTSUBSAMPLE\" }));\r\n    }\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\nexport const createRegistrationTest = (inputParam, masterData, modalName) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData })\r\n            .then(response => {\r\n                let RegistrationGetTest = updatedObjectWithNewElement(masterData[\"RegistrationGetTest\"], response.data[\"RegistrationGetTest\"]);\r\n                masterData = {\r\n                    ...masterData,\r\n                    RegistrationGetTest,\r\n                    selectedTest: response.data[\"RegistrationGetTest\"],\r\n                    RegistrationParameter: response.data.RegistrationParameter,\r\n                    // RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, masterData.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    [modalName]: false,\r\n                    loading: false,\r\n                    loadChildTest: false,\r\n                    showSample: undefined,\r\n                    openModal: false,\r\n                    selectedRecord: {}\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n\r\n                // dispatch({\r\n                //     type: DEFAULT_RETURN,\r\n                //     payload: {\r\n                //         masterData,\r\n                //         [modalName]: false,\r\n                //         loading: false,\r\n                //         loadChildTest: false,\r\n                //         showSample: undefined,\r\n                //         openModal: false,\r\n                //         selectedRecord: {}\r\n                //     }\r\n                // });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getEditRegistrationComboService(inputParam, columnList, selectedRecord1, childColumnList, comboComponents,\r\n    withoutCombocomponent) {\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation } = { ...inputParam };\r\n\r\n        const npreregno = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo:userInfo\r\n        })\r\n        const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationDetails\", { ...inputParam.editRegParam, npreregno })\r\n\r\n        urlArray = [timeZoneService, actualService, selectedRegistration]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n                selectedRecord={...selectedRecord,...selectedRecord['jsondata']}\r\n                // const recordToEdit = { ...response[2].data[\"SelectedRegistration\"][0] };\r\n                //  const currentTime = rearrangeDateFormat(userInfo, response[6].data);\r\n\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n                //  const newcomboData = parentChildComboLoad(columnList, response[1].data,\r\n                // selectedRecord, childColumnList, withoutCombocomponent)\r\n\r\n                if (selectedRecord.ntransactionstatus === transactionStatus.CANCELLED\r\n                    || selectedRecord.ntransactionstatus === transactionStatus.REJECT) {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_CANNOTEDITCANCELLEDSAMPLE\" }));\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                }\r\n\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoad(x, comboData, selectedRecord1, \r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n\r\n                    let { Specification, AgaramTree, ActiveKey, FocusKey, OpenNodes } = [];\r\n                    const selectedSpec = {}\r\n                        Specification = constructOptionList(response[2].data[\"Specification\"] || [], \"nallottedspeccode\",\r\n                            \"sspecname\", undefined, undefined, true).get(\"OptionList\");\r\n                        AgaramTree = response[2].data[\"AgaramTree\"];\r\n                        ActiveKey = response[2].data[\"FocusKey\"];\r\n                        FocusKey = response[2].data[\"ActiveKey\"];\r\n                        OpenNodes = response[2].data[\"OpenNodes\"];\r\n                        //Manufacturer = response.data[\"Manufacturer\"];\r\n                        selectedSpec[\"nallottedspeccode\"] = Specification.length > 0 ? {\r\n                            \"value\": Specification[0].value,\r\n                            \"label\": Specification[0].label,\r\n                            \"item\": Specification[0].item\r\n                        } : \"\";\r\n    \r\n                        selectedSpec[\"sversion\"] = Specification.length > 0 ? Specification[0].item.sversion : \"\"\r\n                        selectedSpec[\"ntemplatemanipulationcode\"] = Specification.length > 0 ? \r\n                        Specification[0].item.ntemplatemanipulationcode : -1\r\n                        selectedRecord = { ...selectedRecord, ...selectedSpec }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            AgaramTree,\r\n                            FocusKey ,\r\n                            ActiveKey ,\r\n                            OpenNodes ,\r\n                            selectedSpec,\r\n                            Specification,\r\n                            // statustoEditDetail: response[2].data[\"ApprovalConfigRole\"] || {},\r\n                            // currentTime,\r\n                            operation,\r\n                            //  screenName: popUpLabel,\r\n                            // PopUpLabel: popUpLabel,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openPortal: true,\r\n                            ncontrolCode: inputParam.editRegParam.ncontrolCode,\r\n                            loadPreregister: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            comboData: comboValues.comboData\r\n                            //  regRecordToEdit:recordToEdit\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\nexport function updateRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], masterData.RegistrationGetSample, \"npreregno\");\r\n                //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n                let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                    selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest:response.data[\"selectedTest\"],\r\n                    RegistrationGetTest,\r\n                    RegistrationGetSubSample,\r\n                    RegistrationParameter:response.data[\"RegistrationParameter\"]\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openPortal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadPreregister: false, selectedRecord: {}, showSample: undefined\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign:false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function cancelTestAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelTest\", inputParam.inputData)\r\n            .then(response => {\r\n\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedTest: response.data[\"selectedTest\"],\r\n                    // RegistrationGetTest:response.data[\"RegistrationGetTest\"],\r\n                    RegistrationGetTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\"),\r\n                  //  RegistrationGetSample: replaceUpdatedObject(response.data.selectedSample, LoginProps.RegistrationGetSample, 'npreregno')\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    showConfirmAlert: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadPreregister: false,\r\n                    showSample: undefined\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'no'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function cancelSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSample\", inputParam.inputData)\r\n            .then(response => {\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n               \r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addsubSampleRegistration(masterData, userinfo, regcolumnList,\r\n    selectRecord, regchildColumnList,\r\n    regSubSamplecomboComponents,\r\n     regSubSamplewithoutCombocomponent, Map, ncontrolcode,specBasedComponent) {\r\n        return function (dispatch) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = []\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            urlArray[0] = timeZoneService;\r\n            const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n                parentcolumnlist: regcolumnList,\r\n                childcolumnlist: regchildColumnList,\r\n                userinfo\r\n            })\r\n            urlArray[1] = actualService;\r\n         \r\n            if (specBasedComponent) {\r\n                const ComponentTestBySpec = rsapi.post(\"/registration/getComponentBySpec\", {\r\n                    ...Map,\r\n                    specBasedComponent: specBasedComponent,\r\n                    userinfo\r\n                })\r\n                urlArray[2] = ComponentTestBySpec;\r\n            }else{\r\n               \r\n                const TestGet = rsapi.post(\"/registration/getTestfromDB\", {\r\n                    nallottedspeccode: Map[\"nallottedspeccode\"],\r\n                    slno:  1,\r\n                    specBasedComponent: specBasedComponent\r\n\r\n                })\r\n                urlArray[2] = TestGet;\r\n            }\r\n            Axios.all(urlArray).then(response => {\r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userinfo.stimezoneid, value: userinfo.ntimezonecode }\r\n                const newcomboData = parentChildComboLoad(regcolumnList, response[1].data,\r\n                    selectRecord, regchildColumnList, regSubSamplewithoutCombocomponent)\r\n                let TestCombined = [];\r\n                let lstComponent=[];\r\n                if (specBasedComponent) {\r\n                    const lstComponentMap = constructOptionList(response[2].data.lstComponent || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, true);\r\n           \r\n                 lstComponent = lstComponentMap.get(\"OptionList\");\r\n \r\n                }else{\r\n                    TestCombined = response[2].data\r\n                }\r\n                const comboData1 = newcomboData.comboData\r\n                const selectedRecord1 = newcomboData.selectedRecord\r\n                regSubSamplewithoutCombocomponent.map(componentrow => {\r\n                    if (componentrow.inputtype === \"date\") {\r\n                        if (componentrow.mandatory) {\r\n                            selectedRecord1[componentrow.label] =  componentrow.loadcurrentdate ?  new Date(): \"\";\r\n                        } \r\n                        // if (componentrow.timezone) {\r\n                        //     sampleRegistration[\"jsondata\"][`tz${componentrow.label}`] = selectedRecord[`tz${componentrow.label}`] ?\r\n                        //         { value: selectedRecord[`tz${componentrow.label}`].value, label: selectedRecord[`tz${componentrow.label}`].label } :\r\n                        //         defaulttimezone ? defaulttimezone : -1\r\n                        // }\r\n                    }\r\n\r\n                })\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        screenName: \"SubSample\",\r\n                        showSaveContinue: false,\r\n                        parentPopUpSize: \"lg\",\r\n                        loading: false,\r\n                        lstComponent,\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        loadRegSubSample: true,\r\n                        selectedRecord: selectedRecord1,\r\n                        regSubSamplecomboData: comboData1,\r\n                        regSubSamplecomboComponents,\r\n                        regSubSamplewithoutCombocomponent,\r\n                        TestCombined,\r\n                        regparentSubSampleColumnList: regcolumnList,\r\n                        ncontrolCode:ncontrolcode,\r\n                        timeZoneList,\r\n                        defaultTimeZone,\r\n                        masterData,\r\n                    }\r\n                });\r\n            })\r\n                .catch(error => {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                })\r\n        }\r\n\r\n}\r\n\r\n\r\n\r\nexport function saveSubSample(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/createSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n               // let RegistrationGetSample = updatedObjectWithNewElement(response.data[\"selectedSample\"], masterData.RegistrationGetSample);\r\n               // let selectedSample = response.data[\"selectedSample\"];\r\n                let RegistrationGetSubSample = updatedObjectWithNewElement(inputParam.inputData.masterData.RegistrationGetSubSample,response.data[\"selectedSubSample\"]);\r\n                let RegistrationGetTest = response.data[\"selectedTest\"];\r\n                let selectedSubSample =RegistrationGetSubSample.length>0?[RegistrationGetSubSample[0]] : [];\r\n                RegistrationGetTest = sortData(RegistrationGetTest, \"npreregno\", \"desc\");\r\n                let selectedTest = RegistrationGetTest.length > 0 ? [RegistrationGetTest[0]] : [];\r\n               \r\n                let RegistrationParameter=response.data[\"RegistrationParameter\"]\r\n                \r\n                RegistrationParameter=getSameRecordFromTwoArrays(RegistrationParameter,selectedTest,'ntransactiontestcode')\r\n\r\n              let masterData={...inputParam.inputData.masterData} \r\n                masterData = {\r\n                    ...masterData, ...response.data,\r\n                     selectedSubSample, selectedTest,\r\n                    RegistrationGetSubSample, RegistrationGetTest,RegistrationParameter\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    openModal: false,\r\n                    loadEsign: false,\r\n                    loading: false,\r\n                    showSample: undefined,\r\n                    selectedRecord: {},\r\n                    loadRegSubSample:false\r\n                }\r\n                inputParam.postParamList[0]['clearFilter'] = 'yes'\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            //    dispatch({\r\n            //     type: DEFAULT_RETURN,\r\n            //     payload: {\r\n            //         masterData,\r\n            //         openModal: false,\r\n            //         loadEsign: false,\r\n            //         loading: false,\r\n            //         showSample: undefined,\r\n            //         selectedRecord: {},\r\n            //         loadRegSubSample:false\r\n            //     }\r\n            // });\r\n            })\r\n            .catch(error => {\r\n                // console.log(error);\r\n                toast.error(error.message);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showConfirmAlert: false } })\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getEditSubSampleComboService(inputParam, columnList, selectedRecord1,\r\n     childColumnList, comboComponents,\r\n    withoutCombocomponent,specBasedComponent) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        const { userInfo, operation } = { ...inputParam };\r\n\r\n        const ntransactionsamplecode = inputParam.mastertoedit[inputParam.primaryKeyName];\r\n        let urlArray = [];\r\n\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const actualService = rsapi.post(\"dynamicpreregdesign/getComboValues\", {\r\n            parentcolumnlist: columnList,\r\n            childcolumnlist: childColumnList,\r\n            userinfo:userInfo\r\n        })\r\n        const selectedRegistration = rsapi.post(\"/registration/getEditRegistrationSubSampleDetails\", { ...inputParam.editRegParam, ntransactionsamplecode })\r\n\r\n        urlArray = [timeZoneService, actualService, selectedRegistration]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = { ...response[2].data[\"SelectedRegistrationSubSample\"][0] };\r\n                selectedRecord={...selectedRecord,...selectedRecord['jsondata']}\r\n              \r\n                const timeZoneMap = constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\r\n                const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                const defaultTimeZone = { label: userInfo.stimezoneid, value: userInfo.ntimezonecode }\r\n             \r\n                if (selectedRecord.ntransactionstatus !== transactionStatus.PREREGISTER) {\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_SELECTPREREGISTERSUBSAMPLETOEDIT\" }));\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                }\r\n\r\n                else {\r\n                    const languagetypeCode = undefined\r\n                    const comboData = response[1].data;\r\n                    let comboValues = {}\r\n                    if (columnList.length > 0) {\r\n                        columnList.map(x => {\r\n                            if (x.inputtype === 'combo') {\r\n                                if (comboData[x.label] && comboData[x.label].length > 0) //&& comboData[x.label][0].hasOwnProperty(x.source) \r\n                                {\r\n                                    if (comboData[x.label].length > 0) {\r\n                                        if (comboData[x.label][0].label === undefined) {\r\n                                            const optionList = constructjsonOptionList(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                            comboData[x.label] = optionList.get(\"OptionList\");\r\n                                        } else {\r\n                                            comboData[x.label] = comboData[x.label]\r\n                                            const optionList = constructjsonOptionDefault(comboData[x.label] || [], x.valuemember,\r\n                                                x.displaymember, false, false, true, undefined, x.source, x.isMultiLingual, languagetypeCode)\r\n                                        }\r\n                                    } else {\r\n                                        comboData[x.label] = []\r\n                                    }\r\n                                    //comboValues = childComboLoad(x, comboData, selectedRecord, \r\n                                    //   childColumnList, withoutCombocomponent)\\\r\n                                    comboValues = childComboLoad(x, comboData, selectedRecord1, \r\n                                        childColumnList, withoutCombocomponent)\r\n                                } else {\r\n                                    comboValues = {\r\n                                        \"comboData\": comboData,\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                comboValues = {\r\n                                    comboData: comboData,\r\n                                    ...comboValues\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        comboValues = {\r\n                            \"comboData\": comboData,\r\n                        }\r\n                    }\r\n\r\n                   \r\n                        selectedRecord = { ...selectedRecord }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation,\r\n                            timeZoneList,\r\n                            defaultTimeZone,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.editSubSampleRegParam.ncontrolCode,\r\n                            parentPopUpSize: \"lg\",\r\n                            loading: false,\r\n                            showSample: undefined,\r\n                            regSubSamplecomboData: comboValues.comboData,\r\n                            loadRegSubSample: true,\r\n                            screenName:\"IDS_SUBSAMPLE\",\r\n                            operation:\"update\"\r\n                            //  regRecordToEdit:recordToEdit\r\n\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n\r\n    }\r\n}\r\nexport function onUpdateSubSampleRegistration(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/updateRegistrationSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                //replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], masterData.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], masterData.RegistrationGetTest, \"ntransactiontestcode\");\r\n              //  let RegistrationGetSubSample=response.data[\"RegistrationGetSubSample\"];\r\n                let RegistrationGetTest = response.data[\"RegistrationGetTest\"];\r\n                masterData = {\r\n                    ...masterData,\r\n                   // selectedSample: response.data[\"selectedSample\"],\r\n                    selectedSubSample: response.data[\"selectedSubSample\"],\r\n                    selectedTest:response.data[\"selectedTest\"],\r\n                    RegistrationGetTest,\r\n                   // RegistrationGetSubSample,\r\n                    RegistrationParameter:response.data[\"RegistrationParameter\"]\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, openModal: false, loading: false, showConfirmAlert: false,\r\n                        regDateEditConfirmMessage: undefined, loadEsign: false,\r\n                        loadRegSubSample: false, selectedRecord: {}, showSample: undefined, screenName: \"SubSample\",\r\n                    }\r\n                });\r\n                // let inputData = {\r\n                //     masterData,\r\n                //     selectedTest: masterData.selectedTest,\r\n                //     ntransactiontestcode: masterData.selectedTest ?\r\n                //         String(masterData.selectedTest.map(item => item.ntransactiontestcode).join(\",\")) : \"-1\",\r\n                //     npreregno: masterData.selectedSample ?\r\n                //         masterData.selectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                //     userinfo: inputParam.inputData.userinfo,\r\n                //     activeTestTab : masterData.activeTestTab,\r\n                //     screenName: masterData.activeTestTab,\r\n                //     resultDataState: inputParam.resultDataState,\r\n                //     testCommentDataState: inputParam.testCommentDataState,\r\n                // }\r\n                // dispatch(getTestChildTabDetail(inputData, true))\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                }\r\n                else if (error.response.status === 302) {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            loading: false, loadEsign:false,\r\n                            regEditParam: inputParam,\r\n                            showConfirmAlert: true,\r\n                            parentPopUpSize: \"xl\",\r\n                            regDateEditConfirmMessage: error.response.data, showSample: undefined\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false, showSample: undefined } })\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function cancelSubSampleAction(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/cancelSubSample\", inputParam.inputData)\r\n            .then(response => {\r\n               // replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                   // selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n               \r\n                let respObject = {\r\n                    masterData,\r\n                    ...inputParam.inputData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function preregRecordToQuarantine(inputParam, LoginProps) {\r\n\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/registration/quarantineRegistration\", inputParam.inputData)\r\n            .then(response => {\r\n                // replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                // replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                // replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSample\"], LoginProps.RegistrationGetSample, \"npreregno\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetSubSample\"], LoginProps.RegistrationGetSubSample, \"ntransactionsamplecode\");\r\n                replaceUpdatedObject(response.data[\"RegistrationGetTest\"], LoginProps.RegistrationGetTest, \"ntransactiontestcode\");\r\n\r\n                delete response.data[\"RegistrationGetSample\"];\r\n                delete response.data[\"RegistrationGetSubSample\"];\r\n                delete response.data[\"RegistrationGetTest\"];\r\n                let masterData = {\r\n                    ...LoginProps,\r\n                    selectedSample: replaceUpdatedObject(response.data[\"selectedSample\"], LoginProps.selectedSample, \"npreregno\"),\r\n                    selectedSubSample: replaceUpdatedObject(response.data[\"selectedSubSample\"], LoginProps.selectedSubSample, \"ntransactionsamplecode\"),\r\n                    selectedTest: replaceUpdatedObject(response.data[\"selectedTest\"], LoginProps.selectedTest, \"ntransactiontestcode\"),\r\n                }\r\n                let respObject = {\r\n                    masterData,\r\n                    loading: false,\r\n                    loadEsign: false,\r\n                    openModal: false,\r\n                    showSample: undefined\r\n                }\r\n                dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data.rtn);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailRegistration(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        if (inputData.ntransactiontestcode && inputData.ntransactiontestcode.length > 0) {\r\n            let inputParamData = {\r\n                ntransactiontestcode: inputData.ntransactiontestcode,\r\n                npreregno: inputData.npreregno,\r\n                userinfo: inputData.userinfo\r\n            }\r\n            let url = null\r\n            let { testtake } = inputData;\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_PARAMETERRESULTS\":\r\n                    url = \"registration/getregistrationparameter\"\r\n                    activeName = \"RegistrationParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    url = \"resultentrybysample/getResultUsedInstrument\"\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    url = \"resultentrybysample/getResultUsedMaterial\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    url = \"resultentrybysample/getResultUsedTask\"\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    url = \"attachment/getTestAttachment\"\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    url = \"comments/getTestComment\"\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    url = \"approval/getapprovalparameter\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    url = \"approval/getApprovalResultChangeHistory\"\r\n                    activeName = \"ApprovalResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_TESTAPPROVALHISTORY\":\r\n                    url = \"approval/getApprovalHistory\"\r\n                    activeName = \"ApprovalHistory\"\r\n                    dataStateName = \"historyDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    url = \"attachment/getSampleAttachment\"\r\n                    break;\r\n                default:\r\n                    url = \"approval/getapprovalparameter\"\r\n                    activeName = \"ApprovalParameter\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            if (url !== null) {\r\n                dispatch(initRequest(true));\r\n                if (isServiceRequired) {\r\n                    rsapi.post(url, inputParamData)\r\n                        .then(response => {\r\n                            let skipInfo = {};\r\n                            let responseData = { ...response.data, selectedSample: inputData.selectedSample || inputData.masterData.selectedSample, selectedTest: inputData.selectedTest }\r\n                            //responseData = sortData(responseData)\r\n                            // fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\",inputData.removeElementFromArray);\r\n                            fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                            let masterData = {\r\n                                ...inputData.masterData,\r\n                                selectedSample: inputData.selectedSample || inputData.masterData.selectedSample,\r\n                                selectedTest: inputData.selectedTest,\r\n                                selectedPreregno: inputData.npreregno,\r\n                                selectedSampleCode: inputData.ntransactionsamplecode,\r\n                                selectedTestCode: inputData.ntransactiontestcode,\r\n                            }\r\n                            if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                                skipInfo = {\r\n\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        skip: 0,\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            } else {\r\n                                skipInfo = {\r\n                                    ...skipInfo,\r\n                                    [dataStateName]: {\r\n                                        ...inputData[dataStateName],\r\n                                        sort: undefined,\r\n                                        filter: undefined\r\n                                    }\r\n                                }\r\n                            }\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN, payload: {\r\n                                    masterData,\r\n                                    loading: false,\r\n                                    showFilter: false,\r\n                                    activeTestTab: inputData.activeTestTab,\r\n                                    screenName: inputData.screenName,\r\n                                    testtake, testskip: undefined,\r\n                                    ...skipInfo\r\n                                }\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(error.message);\r\n                            }\r\n                            else {\r\n                                toast.warn(error.response.data);\r\n                            }\r\n                        })\r\n                } else {\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.selectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n                    let skipInfo = {};\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        selectedTest: inputData.selectedTest,\r\n                        selectedPreregno: inputData.npreregno,\r\n                        selectedSampleCode: inputData.ntransactionsamplecode,\r\n                        selectedTestCode: inputData.ntransactiontestcode,\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestTab: inputData.activeTestTab,\r\n                            screenName: inputData.screenName,\r\n                            testtake, testskip: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                }\r\n\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab\r\n                    }\r\n                })\r\n            }\r\n        } else {\r\n            let { ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment, ApprovalResultChangeHistory,\r\n                RegistrationTestComment, ApprovalHistory } = inputData.masterData\r\n            switch (inputData.activeTestTab) {\r\n                case \"IDS_RESULTS\":\r\n                    ApprovalParameter = [];\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    ResultUsedInstrument = []\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    ResultUsedTasks = []\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    RegistrationTestAttachment = []\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    ApprovalResultChangeHistory = []\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    RegistrationTestComment = []\r\n                    break;\r\n                case \"IDS_APPROVALHISTORY\":\r\n                    ApprovalHistory = []\r\n                    break;\r\n                default:\r\n                    ApprovalParameter = []\r\n                    break;\r\n            }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData: {\r\n                        ...inputData.masterData,\r\n                        selectedTest: [],\r\n                        ApprovalParameter, ResultUsedInstrument, ResultUsedTasks, RegistrationTestAttachment,\r\n                        ApprovalResultChangeHistory, RegistrationTestComment, ApprovalHistory\r\n                    }, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}