{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\attachmentscomments\\\\comments\\\\Comments.jsx\";\nimport { process } from '@progress/kendo-data-query';\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../../audittrail/Esign';\nimport AddComment from './AddComment';\nimport { updateStore, viewAttachment, validateEsignCredential, crudMaster, getCommentsCombo, deleteComment, getSampleTestComments, getSampleTestCommentsDesc } from '../../../actions';\nimport { connect } from 'react-redux';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { Nav } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Comments extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, comboName) => {\n      let addFileId = this.props.controlMap.has(this.props.addName) && this.props.controlMap.get(this.props.addName).ncontrolcode;\n\n      if (comboData) {\n        let selectedRecord = this.state.selectedRecord || {};\n\n        if (comboName === 'ncommentsubtypecode') {\n          selectedRecord[comboName] = comboData;\n          this.props.getSampleTestComments(selectedRecord, this.props.Login.userInfo);\n        } else {\n          if (comboName === 'nsampletestcommentscode') {\n            selectedRecord['scomments'] = comboData.item.scomments;\n            selectedRecord[comboName] = comboData;\n            this.props.getSampleTestCommentsDesc(selectedRecord, this.props.Login.userInfo);\n          } // selectedRecord[comboName] = comboData\n\n\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onInputOnChange = event => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      // const masterData = this.props.Login.masterData;\n      // let inputData = {}\n      // let inputParam = {}\n      // inputData[\"userinfo\"] = this.props.Login.userInfo;\n      // if(this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n      //     // let saveParam={userInfo:this.props.Login.userInfo,\n      //     //     selectedRecord:this.state.selectedRecord,\n      //     //     masterData:this.props.Login.masterData,\n      //     //     saveType, formRef,\n      //     //     operation:this.props.Login.operation\n      //     // }\n      //     // inputParam = onSaveSampleAttachment(saveParam);\n      // }else if(this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n      //     let saveParam={\n      //         userInfo:this.props.Login.userInfo,\n      //         isTestComment:this.props.isTestComment,\n      //         selectedRecord:this.state.selectedRecord,\n      //         masterData:this.props.Login.masterData,\n      //         saveType, formRef,\n      //         operation:this.props.Login.operation,\n      //         selectedMaster:this.props.selectedMaster\n      //     }\n      //     inputParam = onSaveTestComments(saveParam);\n      // }\n      // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true,\n      //             screenData: { inputParam, masterData },\n      //             operation: this.props.Login.operation,\n      //             screenName: this.props.Login.screenName,\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //     this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      // }\n      this.props.onSaveClick(saveType, formRef, this.state.selectedRecord);\n    };\n\n    this.handleClose = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openCommentModal = this.props.Login.openCommentModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n      let operation = this.props.Login.operation;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openCommentModal = false;\n          selectedRecord = {};\n          operation = undefined;\n        } else {\n          loadEsign = false;\n          selectedRecord[\"esigncomments\"] = \"\";\n          selectedRecord[\"esignpassword\"] = \"\";\n          selectedRecord['esignreason'] = '';\n        }\n      } else {\n        openCommentModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openCommentModal,\n          loadEsign,\n          selectedRecord,\n          selectedParamId: null,\n          operation,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'dynamic') {\n        this.props.validateEsignforApproval(inputParam, \"openChildModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openCommentModal\");\n      }\n    };\n\n    this.state = {\n      selectedRecord: {}\n    };\n  }\n\n  render() {\n    let extractedColumnList = [];\n\n    if (this.props.Login.activeTestTab === \"IDS_SAMPLECOMMENTS\") {\n      // if (this.props.masterData && this.props.masterData[\"RegSubTypeValue\"] && \n      //    this.props.masterData[\"RegSubTypeValue\"].nneedsubsample || this.props.masterData[\"nneedsubsample\"]){\n      //     extractedColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\n      // }\n      // else{\n      extractedColumnList.push({\n        \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\",\n        \"dataField\": \"sarno\",\n        \"width\": \"155px\"\n      }); //}\n\n      extractedColumnList.push( //  {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"150px\"},\n      // { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\n      {\n        \"idsName\": \"IDS_COMMENTS\",\n        \"dataField\": \"scomments\",\n        \"width\": \"200px\",\n        jsonField: true\n      }, // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\n      {\n        \"idsName\": \"IDS_SCREENNAME\",\n        \"dataField\": \"sdisplayname\",\n        \"width\": \"150px\"\n      }, {\n        \"idsName\": \"IDS_USERNAME\",\n        \"dataField\": \"susername\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"200px\"\n      });\n    } else if (this.props.Login.activeTestTab === \"IDS_SUBSAMPLECOMMENTS\") {\n      extractedColumnList.push({\n        \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\",\n        \"dataField\": \"sarno\",\n        \"width\": \"155px\"\n      });\n\n      if (this.props.masterData[\"RegSubTypeValue\"] && this.props.masterData[\"RegSubTypeValue\"].nneedsubsample || this.props.masterData[\"nneedsubsample\"]) {\n        extractedColumnList.push({\n          \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_SAMPLEARNO\",\n          \"dataField\": \"ssamplearno\",\n          \"width\": \"155px\"\n        });\n      } //else{\n      //    extractedColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\n      //}\n\n\n      extractedColumnList.push( //  {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"100px\"},\n      // { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\n      {\n        \"idsName\": \"IDS_COMMENTS\",\n        \"dataField\": \"scomments\",\n        \"width\": \"200px\",\n        jsonField: true\n      }, // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\n      {\n        \"idsName\": \"IDS_SCREENNAME\",\n        \"dataField\": \"sdisplayname\",\n        \"width\": \"150px\"\n      }, {\n        \"idsName\": \"IDS_USERNAME\",\n        \"dataField\": \"susername\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"200px\"\n      });\n    } else {\n      if (this.props.Login.activeTestTab === \"IDS_TESTCOMMENTS\") {\n        extractedColumnList.push({\n          \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\",\n          \"dataField\": \"sarno\",\n          \"width\": \"155px\"\n        });\n\n        if (this.props.masterData && this.props.masterData[\"RealRegSubTypeValue\"] && this.props.masterData[\"RealRegSubTypeValue\"].nneedsubsample || this.props.masterData[\"nneedsubsample\"]) {\n          extractedColumnList.push({\n            \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_SAMPLEARNO\",\n            \"dataField\": \"ssamplearno\",\n            \"width\": \"155px\"\n          });\n        } // else{\n        //     extractedColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\n        // }\n\n\n        extractedColumnList.push( // extractedColumnList = [\n        // {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"100px\"},\n        // {\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\",\"width\":\"150px\"},\n        {\n          \"idsName\": \"IDS_TESTNAME\",\n          \"dataField\": \"stestsynonym\",\n          \"width\": \"200px\",\n          jsonField: true\n        }, {\n          \"idsName\": \"IDS_COMMENTS\",\n          \"dataField\": \"scomments\",\n          \"width\": \"200px\",\n          jsonField: true\n        });\n        this.props.isneedReport && extractedColumnList.push({\n          \"idsName\": \"IDS_INCULDEINREPORT\",\n          \"dataField\": \"sneedreport\",\n          \"width\": \"200px\"\n        }); // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\n\n        extractedColumnList.push({\n          \"idsName\": \"IDS_SCREENNAME\",\n          \"dataField\": \"sdisplayname\",\n          \"width\": \"150px\"\n        }, {\n          \"idsName\": \"IDS_USERNAME\",\n          \"dataField\": \"susername\",\n          \"width\": \"200px\"\n        }, {\n          \"idsName\": \"IDS_USERROLE\",\n          \"dataField\": \"suserrolename\",\n          \"width\": \"200px\"\n        }); // ];\n      }\n    }\n\n    let addFileId = this.props.controlMap.has(this.props.addName) && this.props.controlMap.get(this.props.addName).ncontrolcode;\n    let mandatoryFields = [];\n\n    if (this.props.isTestComment) {\n      if (this.props.masterData && this.props.masterData[\"RegSubTypeValue\"] && this.props.masterData[\"RegSubTypeValue\"].nneedsubsample) {\n        extractedColumnList.push({\n          \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_SAMPLEARNO\",\n          \"dataField\": \"ssamplearno\",\n          \"width\": \"155px\"\n        });\n      } else {\n        extractedColumnList.push({\n          \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\",\n          \"dataField\": \"sarno\",\n          \"width\": \"155px\"\n        });\n      }\n\n      extractedColumnList.push( //  { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\n      {\n        \"idsName\": \"IDS_TESTNAME\",\n        \"dataField\": \"stestsynonym\",\n        \"width\": \"200px\",\n        jsonField: true\n      }, {\n        \"idsName\": \"IDS_COMMENTS\",\n        \"dataField\": \"scomments\",\n        \"width\": \"200px\",\n        jsonField: true\n      });\n      this.props.isneedReport && extractedColumnList.push({\n        \"idsName\": \"IDS_INCULDEINREPORT\",\n        \"dataField\": \"sneedreport\",\n        \"width\": \"200px\"\n      });\n      extractedColumnList.push({\n        \"idsName\": \"IDS_SAMPLETESTCOMMENTS\",\n        \"dataField\": \"ssampletestcommentname\",\n        \"width\": \"400px\"\n      }, {\n        \"idsName\": \"IDS_SCREENNAME\",\n        \"dataField\": \"sdisplayname\",\n        \"width\": \"150px\"\n      }, {\n        \"idsName\": \"IDS_USERNAME\",\n        \"dataField\": \"susername\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"200px\"\n      }); //]\n\n      mandatoryFields = [{\n        \"idsName\": \"IDS_SAMPLETESTCOMMENTS\",\n        \"dataField\": \"nsamplecommentscode\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_COMMENT\",\n        \"dataField\": \"scomments\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    } else if (this.props.isSampleTestComment && this.props.isSampleTestComment === true) {\n      extractedColumnList = [];\n      mandatoryFields = [];\n\n      if (this.props.Login.activeTestTab === \"IDS_TESTCOMMENTS\") {\n        extractedColumnList.push({\n          \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\",\n          \"dataField\": \"sarno\",\n          \"width\": \"155px\"\n        });\n      }\n\n      if (this.props.masterData && this.props.masterData[\"RealRegSubTypeValue\"] && this.props.masterData[\"RealRegSubTypeValue\"].nneedsubsample || this.props.masterData[\"nneedsubsample\"]) {\n        extractedColumnList.push({\n          \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_SAMPLEARNO\",\n          \"dataField\": \"ssamplearno\",\n          \"width\": \"155px\"\n        });\n      }\n\n      extractedColumnList.push({\n        \"idsName\": \"IDS_TESTNAME\",\n        \"dataField\": \"stestsynonym\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_COMMENTNAME\",\n        \"dataField\": \"scommentsubtype\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_ABBREVIATIONNAME\",\n        \"dataField\": \"spredefinedname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_COMMENT\",\n        \"dataField\": \"scomments\",\n        \"width\": \"200px\"\n      });\n      this.props.isneedReport && extractedColumnList.push({\n        \"idsName\": \"IDS_INCULDEINREPORT\",\n        \"dataField\": \"sneedreport\",\n        \"width\": \"200px\"\n      });\n      extractedColumnList.push({\n        \"idsName\": \"IDS_SCREENNAME\",\n        \"dataField\": \"sdisplayname\",\n        \"width\": \"150px\"\n      }, {\n        \"idsName\": \"IDS_USERNAME\",\n        \"dataField\": \"susername\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_USERROLE\",\n        \"dataField\": \"suserrolename\",\n        \"width\": \"200px\"\n      });\n\n      if (this.props.Login.isAbbrevationneeded) {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMMENTNAME\",\n          \"dataField\": \"ncommentsubtypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_ABBREVIATIONNAME\",\n          \"dataField\": \"nsampletestcommentscode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_COMMENT\",\n          \"dataField\": \"scomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      } else {\n        mandatoryFields = [{\n          \"idsName\": \"IDS_COMMENTNAME\",\n          \"dataField\": \"ncommentsubtypecode\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"combo\"\n        }, {\n          \"idsName\": \"IDS_COMMENT\",\n          \"dataField\": \"scomments\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"textbox\"\n        }];\n      }\n    } else {\n      mandatoryFields = [{\n        \"idsName\": \"IDS_COMMENT\",\n        \"dataField\": \"scomments\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }];\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"actions-stripe border-bottom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: `add_${this.props.Login.screenName}_comment`,\n      className: \"add-txt-btn\",\n      hidden: this.props.userRoleControlRights.indexOf(addFileId) === -1,\n      onClick: () => this.props.getCommentsCombo({\n        userInfo: this.props.Login.userInfo,\n        operation: \"create\",\n        ncontrolCode: addFileId,\n        screenName: this.props.screenName,\n        modalName: \"openCommentModal\",\n        masterList: this.props.masterList,\n        masterAlertStatus: this.props.masterAlertStatus,\n        isSampleTestComment: this.props.isSampleTestComment\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_COMMENT\",\n      defaultMessage: \" Comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: this.props.primaryKeyField,\n      data: this.props.Comments,\n      dataResult: process(this.props.Comments || [], this.props.dataState),\n      dataState: this.props.dataState,\n      dataStateChange: this.props.dataStateChange,\n      extractedColumnList: extractedColumnList,\n      userInfo: this.props.userInfo,\n      controlMap: this.props.controlMap,\n      userRoleControlRights: this.props.userRoleControlRights,\n      inputParam: this.props.inputParam,\n      pageable: true,\n      expandField: \"expanded\",\n      hideDetailBand: true,\n      isActionRequired: this.props.isActionRequired !== undefined ? this.props.isActionRequired : true,\n      deleteParam: this.props.deleteParam || \"\",\n      fetchRecord: this.props.fetchRecord || \"\",\n      editParam: { ...this.props.editParam,\n        isSampleTestComment: this.props.isSampleTestComment,\n        modalName: \"openCommentModal\"\n      } || \"\",\n      deleteRecord: this.props.deleteComment || \"\",\n      selectedId: this.props.selectedId,\n      isToolBarRequired: false,\n      scrollable: \"scrollable\",\n      gridHeight: \"500px\",\n      methodUrl: this.props.methodUrl,\n      jsonField: \"jsondata\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }), this.props.Login.openCommentModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.screenName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openCommentModal,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(AddComment, {\n        selectedRecord: this.state.selectedRecord,\n        jsonField: \"jsondata\",\n        SampleTestComments: this.props.Login.sampleTestComments,\n        predefcomments: this.props.Login.predefcomments && this.props.Login.predefcomments,\n        CommentSubType: this.props.Login.CommentSubType && this.props.Login.CommentSubType,\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        isTestComment: this.props.isTestComment,\n        isSampleTestComment: this.props.isSampleTestComment,\n        maxSize: 20,\n        maxFiles: 3,\n        operation: this.props.Login.operation,\n        selectedListName: this.props.selectedListName,\n        displayName: this.props.displayName,\n        masterList: this.props.masterList,\n        isneedReport: this.props.isneedReport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 33\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 25\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  viewAttachment,\n  validateEsignCredential,\n  crudMaster,\n  getCommentsCombo,\n  deleteComment,\n  getSampleTestComments,\n  getSampleTestCommentsDesc\n})(injectIntl(Comments));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/attachmentscomments/comments/Comments.jsx"],"names":["process","React","FormattedMessage","injectIntl","DEFAULT_RETURN","DataGrid","transactionStatus","SlideOutModal","Esign","AddComment","updateStore","viewAttachment","validateEsignCredential","crudMaster","getCommentsCombo","deleteComment","getSampleTestComments","getSampleTestCommentsDesc","connect","faPlus","Nav","FontAwesomeIcon","mapStateToProps","state","Login","Comments","Component","constructor","props","onComboChange","comboData","comboName","addFileId","controlMap","has","addName","get","ncontrolcode","selectedRecord","userInfo","item","scomments","setState","onInputOnChange","event","target","type","name","checked","YES","NO","value","onSaveClick","saveType","formRef","handleClose","loadEsign","openCommentModal","selectedId","operation","undefined","updateInfo","typeName","data","selectedParamId","validateEsign","inputParam","inputData","sreason","nreasoncode","spredefinedreason","label","password","screenData","validateEsignforApproval","render","extractedColumnList","activeTestTab","push","genericLabel","slanguagetypecode","jsonField","masterData","nneedsubsample","isneedReport","mandatoryFields","isTestComment","isSampleTestComment","isAbbrevationneeded","screenName","userRoleControlRights","indexOf","ncontrolCode","modalName","masterList","masterAlertStatus","primaryKeyField","dataState","dataStateChange","isActionRequired","deleteParam","fetchRecord","editParam","methodUrl","masterStatus","sampleTestComments","predefcomments","CommentSubType","selectedListName","displayName","componentDidUpdate","previousProps"],"mappings":"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","sourcesContent":["import { process } from '@progress/kendo-data-query';\r\nimport React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../../audittrail/Esign';\r\nimport AddComment from './AddComment';\r\nimport { updateStore, viewAttachment, validateEsignCredential, crudMaster, getCommentsCombo, deleteComment, getSampleTestComments, getSampleTestCommentsDesc } from '../../../actions'\r\nimport { connect } from 'react-redux';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { Nav } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass Comments extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecord: {}\r\n        }\r\n    }\r\n    render() {\r\n        let extractedColumnList = []\r\n        if (this.props.Login.activeTestTab === \"IDS_SAMPLECOMMENTS\") {\r\n            // if (this.props.masterData && this.props.masterData[\"RegSubTypeValue\"] && \r\n            //    this.props.masterData[\"RegSubTypeValue\"].nneedsubsample || this.props.masterData[\"nneedsubsample\"]){\r\n            //     extractedColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\r\n            // }\r\n            // else{\r\n            extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\", \"dataField\": \"sarno\", \"width\": \"155px\" });\r\n            //}\r\n            extractedColumnList.push(\r\n                //  {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"150px\"},\r\n                // { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\", jsonField: true },\r\n                // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sdisplayname\", \"width\": \"150px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n            );\r\n        }\r\n        else if (this.props.Login.activeTestTab === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\", \"dataField\": \"sarno\", \"width\": \"155px\" });\r\n            if (this.props.masterData[\"RegSubTypeValue\"] &&\r\n                this.props.masterData[\"RegSubTypeValue\"].nneedsubsample\r\n                || this.props.masterData[\"nneedsubsample\"]\r\n            ) {\r\n                extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"155px\" });\r\n            }\r\n            //else{\r\n            //    extractedColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\r\n            //}\r\n            extractedColumnList.push(\r\n                //  {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"100px\"},\r\n                // { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\", jsonField: true },\r\n                // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sdisplayname\", \"width\": \"150px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" },\r\n            );\r\n        }\r\n        else {\r\n            if (this.props.Login.activeTestTab === \"IDS_TESTCOMMENTS\") {\r\n                extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\", \"dataField\": \"sarno\", \"width\": \"155px\" });\r\n                if (this.props.masterData && this.props.masterData[\"RealRegSubTypeValue\"] &&\r\n                    this.props.masterData[\"RealRegSubTypeValue\"].nneedsubsample || this.props.masterData[\"nneedsubsample\"]) {\r\n                    extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"155px\" });\r\n                }\r\n                // else{\r\n                //     extractedColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\r\n                // }\r\n                extractedColumnList.push(\r\n                    // extractedColumnList = [\r\n                    // {\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\",\"width\":\"100px\"},\r\n                    // {\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\",\"width\":\"150px\"},\r\n                    { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\", jsonField: true },\r\n                    { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\", jsonField: true });\r\n\r\n                this.props.isneedReport &&\r\n                    extractedColumnList.push({ \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" });\r\n\r\n                // { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\r\n                extractedColumnList.push({ \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sdisplayname\", \"width\": \"150px\" },\r\n                    { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" });\r\n                // ];\r\n            }\r\n        }\r\n\r\n        let addFileId = this.props.controlMap.has(this.props.addName) && this.props.controlMap.get(this.props.addName).ncontrolcode;\r\n        let mandatoryFields = [];\r\n        if (this.props.isTestComment) {\r\n            if (this.props.masterData && this.props.masterData[\"RegSubTypeValue\"] && this.props.masterData[\"RegSubTypeValue\"].nneedsubsample) {\r\n                extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"155px\" });\r\n            }\r\n            else {\r\n                extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\", \"dataField\": \"sarno\", \"width\": \"155px\" });\r\n            }\r\n            extractedColumnList.push(\r\n                //  { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\", jsonField: true },\r\n                { \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"scomments\", \"width\": \"200px\", jsonField: true });\r\n\r\n            this.props.isneedReport &&\r\n                extractedColumnList.push({ \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" });\r\n\r\n            extractedColumnList.push(\r\n                { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"ssampletestcommentname\", \"width\": \"400px\" },\r\n                { \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sdisplayname\", \"width\": \"150px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" });\r\n            //]\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_SAMPLETESTCOMMENTS\", \"dataField\": \"nsamplecommentscode\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n            ];\r\n        } else if (this.props.isSampleTestComment && this.props.isSampleTestComment === true) {\r\n            extractedColumnList = []\r\n            mandatoryFields = []\r\n            if (this.props.Login.activeTestTab === \"IDS_TESTCOMMENTS\") {\r\n                extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_ARNUMBER\", \"dataField\": \"sarno\", \"width\": \"155px\" });\r\n            }\r\n            if (this.props.masterData && this.props.masterData[\"RealRegSubTypeValue\"] &&\r\n                this.props.masterData[\"RealRegSubTypeValue\"].nneedsubsample || this.props.masterData[\"nneedsubsample\"]) {\r\n                extractedColumnList.push({ \"idsName\": this.props.Login.genericLabel ? this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"155px\" });\r\n            }\r\n            extractedColumnList.push(\r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_ABBREVIATIONNAME\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomments\", \"width\": \"200px\" });\r\n\r\n            this.props.isneedReport &&\r\n                extractedColumnList.push({ \"idsName\": \"IDS_INCULDEINREPORT\", \"dataField\": \"sneedreport\", \"width\": \"200px\" });\r\n\r\n            extractedColumnList.push({ \"idsName\": \"IDS_SCREENNAME\", \"dataField\": \"sdisplayname\", \"width\": \"150px\" },\r\n                { \"idsName\": \"IDS_USERNAME\", \"dataField\": \"susername\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_USERROLE\", \"dataField\": \"suserrolename\", \"width\": \"200px\" });\r\n            if (this.props.Login.isAbbrevationneeded) {\r\n                mandatoryFields = [\r\n                    { \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"ncommentsubtypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                    { \"idsName\": \"IDS_ABBREVIATIONNAME\", \"dataField\": \"nsampletestcommentscode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                    { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n\r\n                ];\r\n            }\r\n            else {\r\n                mandatoryFields = [\r\n                    { \"idsName\": \"IDS_COMMENTNAME\", \"dataField\": \"ncommentsubtypecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n                    { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n                ];\r\n            }\r\n\r\n        }\r\n        else {\r\n\r\n            mandatoryFields = [\r\n                { \"idsName\": \"IDS_COMMENT\", \"dataField\": \"scomments\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n            ];\r\n\r\n        }\r\n\r\n        return (\r\n\r\n            <>\r\n                <div className=\"actions-stripe border-bottom\">\r\n                    <div className=\"d-flex justify-content-end\">\r\n                        <Nav.Link name={`add_${this.props.Login.screenName}_comment`} className=\"add-txt-btn\" hidden={this.props.userRoleControlRights.indexOf(addFileId) === -1}\r\n                            onClick={() => this.props.getCommentsCombo({\r\n                                userInfo: this.props.Login.userInfo, operation: \"create\", ncontrolCode: addFileId, screenName: this.props.screenName, modalName: \"openCommentModal\", masterList: this.props.masterList, masterAlertStatus: this.props.masterAlertStatus,\r\n                                isSampleTestComment: this.props.isSampleTestComment\r\n                            })}>\r\n                            <FontAwesomeIcon icon={faPlus} /> { }\r\n                            <FormattedMessage id=\"IDS_COMMENT\" defaultMessage=\" Comment\" />\r\n                        </Nav.Link>\r\n                    </div>\r\n                </div>\r\n                <DataGrid\r\n                    primaryKeyField={this.props.primaryKeyField}\r\n                    data={this.props.Comments}\r\n                    dataResult={process(this.props.Comments || [], this.props.dataState)}\r\n                    dataState={this.props.dataState}\r\n                    dataStateChange={this.props.dataStateChange}\r\n                    extractedColumnList={extractedColumnList}\r\n                    userInfo={this.props.userInfo}\r\n                    controlMap={this.props.controlMap}\r\n                    userRoleControlRights={this.props.userRoleControlRights}\r\n                    inputParam={this.props.inputParam}\r\n                    pageable={true}\r\n                    expandField=\"expanded\"\r\n                    hideDetailBand={true}\r\n                    isActionRequired={this.props.isActionRequired !== undefined ? this.props.isActionRequired : true}\r\n                    deleteParam={this.props.deleteParam || \"\"}\r\n                    fetchRecord={this.props.fetchRecord || \"\"}\r\n                    editParam={{ ...this.props.editParam, isSampleTestComment: this.props.isSampleTestComment, modalName: \"openCommentModal\" } || \"\"}\r\n                    deleteRecord={this.props.deleteComment || \"\"}\r\n                    selectedId={this.props.selectedId}\r\n                    isToolBarRequired={false}\r\n                    scrollable={\"scrollable\"}\r\n                    gridHeight={\"500px\"}\r\n                    methodUrl={this.props.methodUrl}\r\n                    jsonField={\"jsondata\"}\r\n                />\r\n                {\r\n                    this.props.Login.openCommentModal ?\r\n                        <SlideOutModal\r\n                            onSaveClick={this.onSaveClick}\r\n                            operation={this.props.Login.operation}\r\n                            screenName={this.props.Login.screenName}\r\n                            closeModal={this.handleClose}\r\n                            show={this.props.Login.openCommentModal}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            esign={this.props.Login.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            masterStatus={this.props.Login.masterStatus}\r\n                            updateStore={this.props.updateStore}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={mandatoryFields}\r\n                            addComponent={this.props.Login.loadEsign ?\r\n                                <Esign\r\n                                    operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                :\r\n                                <AddComment\r\n                                    selectedRecord={this.state.selectedRecord}\r\n                                    jsonField={\"jsondata\"}\r\n                                    SampleTestComments={this.props.Login.sampleTestComments}\r\n                                    predefcomments={this.props.Login.predefcomments && this.props.Login.predefcomments}\r\n                                    CommentSubType={this.props.Login.CommentSubType && this.props.Login.CommentSubType}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    isTestComment={this.props.isTestComment}\r\n                                    isSampleTestComment={this.props.isSampleTestComment}\r\n                                    maxSize={20}\r\n                                    maxFiles={3}\r\n                                    operation={this.props.Login.operation}\r\n                                    selectedListName={this.props.selectedListName}\r\n                                    displayName={this.props.displayName}\r\n                                    masterList={this.props.masterList}\r\n                                    isneedReport={this.props.isneedReport}\r\n                                />\r\n                            }\r\n                        />\r\n                        : \"\"\r\n                }\r\n            </>\r\n        )\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n    onComboChange = (comboData, comboName) => {\r\n        let addFileId = this.props.controlMap.has(this.props.addName) && this.props.controlMap.get(this.props.addName).ncontrolcode;\r\n        if (comboData) {\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            if (comboName === 'ncommentsubtypecode') {\r\n                selectedRecord[comboName] = comboData\r\n                this.props.getSampleTestComments(selectedRecord, this.props.Login.userInfo)\r\n            }\r\n            else {\r\n                if (comboName === 'nsampletestcommentscode') {\r\n                    selectedRecord['scomments'] = comboData.item.scomments;\r\n                    selectedRecord[comboName] = comboData\r\n                    this.props.getSampleTestCommentsDesc(selectedRecord, this.props.Login.userInfo)\r\n                }\r\n                // selectedRecord[comboName] = comboData\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n        }\r\n    }\r\n    onInputOnChange = (event) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onSaveClick = (saveType, formRef) => {\r\n        // const masterData = this.props.Login.masterData;\r\n        // let inputData = {}\r\n        // let inputParam = {}\r\n        // inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        // if(this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n        //     // let saveParam={userInfo:this.props.Login.userInfo,\r\n        //     //     selectedRecord:this.state.selectedRecord,\r\n        //     //     masterData:this.props.Login.masterData,\r\n        //     //     saveType, formRef,\r\n        //     //     operation:this.props.Login.operation\r\n        //     // }\r\n        //     // inputParam = onSaveSampleAttachment(saveParam);\r\n        // }else if(this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n        //     let saveParam={\r\n        //         userInfo:this.props.Login.userInfo,\r\n        //         isTestComment:this.props.isTestComment,\r\n        //         selectedRecord:this.state.selectedRecord,\r\n        //         masterData:this.props.Login.masterData,\r\n        //         saveType, formRef,\r\n        //         operation:this.props.Login.operation,\r\n        //         selectedMaster:this.props.selectedMaster\r\n        //     }\r\n        //     inputParam = onSaveTestComments(saveParam);\r\n        // }\r\n        // if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true,\r\n        //             screenData: { inputParam, masterData },\r\n        //             operation: this.props.Login.operation,\r\n        //             screenName: this.props.Login.screenName,\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //     this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        // }\r\n        this.props.onSaveClick(saveType, formRef, this.state.selectedRecord)\r\n    }\r\n    handleClose = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openCommentModal = this.props.Login.openCommentModal\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let operation = this.props.Login.operation;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openCommentModal = false;\r\n                selectedRecord = {};\r\n                operation = undefined;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord[\"esigncomments\"] = \"\";\r\n                selectedRecord[\"esignpassword\"] = \"\";\r\n                selectedRecord['esignreason'] = '';\r\n\r\n            }\r\n        }\r\n        else {\r\n            openCommentModal = false;\r\n            selectedRecord = {};\r\n            selectedId = null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openCommentModal, loadEsign, selectedRecord, selectedParamId: null, operation, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'dynamic') {\r\n            this.props.validateEsignforApproval(inputParam, \"openChildModal\");\r\n        } else {\r\n            this.props.validateEsignCredential(inputParam, \"openCommentModal\");\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { updateStore, viewAttachment, validateEsignCredential, crudMaster, getCommentsCombo, deleteComment, getSampleTestComments, getSampleTestCommentsDesc })(injectIntl(Comments));"]},"metadata":{},"sourceType":"module"}