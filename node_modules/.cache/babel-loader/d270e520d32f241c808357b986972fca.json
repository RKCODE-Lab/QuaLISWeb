{"ast":null,"code":"import { geometry as geom, drawing as draw } from '@progress/kendo-drawing';\nimport { Class, defined, addClass, setDefaultOptions, deepExtend, getSpacing, isObject } from '../common';\nimport { Box, TextBox } from '../core';\nimport { Encodings } from './encodings/main';\nvar DEFAULT_BARCODE_WIDTH = 300;\nvar DEFAULT_BARCODE_HEIGHT = 100;\n\nvar Barcode = function (Class) {\n  function Barcode(element, options) {\n    Class.call(this);\n    this.options = deepExtend({}, this.options, options);\n    this.element = element;\n\n    this._initElement();\n\n    this._initSurface();\n\n    this._setOptions(options);\n\n    if (options && defined(options.value)) {\n      this.redraw();\n    }\n  }\n\n  if (Class) Barcode.__proto__ = Class;\n  Barcode.prototype = Object.create(Class && Class.prototype);\n  Barcode.prototype.constructor = Barcode;\n\n  Barcode.prototype.destroy = function destroy() {\n    this._destroySurface();\n  };\n\n  Barcode.prototype._initElement = function _initElement() {\n    addClass(this.element, \"k-barcode\");\n    this.element.style.display = \"block\";\n  };\n\n  Barcode.prototype._initSurface = function _initSurface() {\n    var ref = this;\n    var options = ref.options;\n    var surface = ref.surface;\n\n    if (!surface || surface.options.type !== options.renderAs) {\n      this._destroySurface();\n\n      this._initSurfaceElement();\n\n      this.surface = this._createSurface();\n    }\n  };\n\n  Barcode.prototype._createSurface = function _createSurface() {\n    return draw.Surface.create(this.surfaceElement, {\n      type: this.options.renderAs\n    });\n  };\n\n  Barcode.prototype._destroySurface = function _destroySurface() {\n    if (this.surface) {\n      this.surface.destroy();\n      this.surface = null;\n\n      this._destroySurfaceElement();\n    }\n  };\n\n  Barcode.prototype._initSurfaceElement = function _initSurfaceElement() {\n    if (!this.surfaceElement) {\n      this.surfaceElement = document.createElement('div');\n      this.surfaceElement.style.position = \"relative\";\n      this.element.appendChild(this.surfaceElement);\n    }\n  };\n\n  Barcode.prototype._destroySurfaceElement = function _destroySurfaceElement() {\n    if (this.surfaceElement && this.surfaceElement.parentNode) {\n      this.surfaceElement.parentNode.removeChild(this.surfaceElement);\n      this.surfaceElement = null;\n    }\n  };\n\n  Barcode.prototype.setOptions = function setOptions(options) {\n    this._setOptions(options);\n\n    this.redraw();\n  };\n\n  Barcode.prototype.redraw = function redraw() {\n    var size = this._getSize();\n\n    this.surface.clear();\n    this.surface.setSize({\n      width: size.width,\n      height: size.height\n    });\n    this.createVisual();\n    this.surface.draw(this.visual);\n  };\n\n  Barcode.prototype.getSize = function getSize() {\n    return {\n      width: this.element.offsetWidth,\n      height: this.element.offsetHeight\n    };\n  };\n\n  Barcode.prototype._resize = function _resize() {\n    this.redraw();\n  };\n\n  Barcode.prototype.createVisual = function createVisual() {\n    this.visual = this._render();\n  };\n\n  Barcode.prototype._render = function _render() {\n    var options = this.options;\n    var value = options.value;\n    var textOptions = options.text;\n    var textMargin = getSpacing(textOptions.margin);\n\n    var size = this._getSize();\n\n    var border = options.border || {};\n    var encoding = this.encoding;\n    var contentBox = new Box(0, 0, size.width, size.height).unpad(border.width).unpad(options.padding);\n    var barHeight = contentBox.height();\n    var encodedValue;\n    var textToDisplay;\n    var textHeight;\n    var visual = new draw.Group();\n    this.contentBox = contentBox;\n    visual.append(this._getBackground(size));\n\n    if (textOptions.visible) {\n      textHeight = draw.util.measureText(value, {\n        font: textOptions.font\n      }).height;\n      barHeight -= textHeight + textMargin.top + textMargin.bottom;\n    }\n\n    encodedValue = encoding.encode(value, contentBox.width(), barHeight);\n\n    if (textOptions.visible) {\n      textToDisplay = value;\n\n      if (options.checksum && defined(encoding.checksum)) {\n        textToDisplay += \" \" + encoding.checksum;\n      }\n\n      visual.append(this._getText(textToDisplay));\n    }\n\n    this.barHeight = barHeight;\n    this._bandsGroup = this._getBands(encodedValue.pattern, encodedValue.baseUnit);\n    visual.append(this._bandsGroup);\n    return visual;\n  };\n\n  Barcode.prototype.exportVisual = function exportVisual() {\n    return this._render();\n  };\n\n  Barcode.prototype._getSize = function _getSize() {\n    var element = this.element;\n    var elementWidth = element.clientWidth;\n    var elementHeight = element.clientHeight;\n    var size = new geom.Size(DEFAULT_BARCODE_WIDTH, DEFAULT_BARCODE_HEIGHT);\n\n    if (elementWidth > 0) {\n      size.width = elementWidth;\n    }\n\n    if (elementHeight) {\n      size.height = elementHeight;\n    }\n\n    if (this.options.width) {\n      size.width = this.options.width;\n    }\n\n    if (this.options.height) {\n      size.height = this.options.height;\n    }\n\n    return size;\n  };\n\n  Barcode.prototype.value = function value(value$1) {\n    if (!defined(value$1)) {\n      return this.options.value;\n    }\n\n    this.options.value = String(value$1);\n    this.redraw();\n  };\n\n  Barcode.prototype._getBands = function _getBands(pattern, baseUnit) {\n    var this$1 = this;\n    var contentBox = this.contentBox;\n    var offsetX = contentBox.x1;\n    var stepX;\n    var patternItem;\n    var group = new draw.Group();\n\n    for (var i = 0; i < pattern.length; i++) {\n      patternItem = isObject(pattern[i]) ? pattern[i] : {\n        width: pattern[i],\n        y1: 0,\n        y2: this$1.barHeight\n      };\n      stepX = patternItem.width * baseUnit;\n\n      if (i % 2) {\n        var rect = geom.Rect.fromPoints(new geom.Point(offsetX, patternItem.y1 + contentBox.y1), new geom.Point(offsetX + stepX, patternItem.y2 + contentBox.y1));\n        var path = draw.Path.fromRect(rect, {\n          fill: {\n            color: this$1.options.color\n          },\n          stroke: null\n        });\n        group.append(path);\n      }\n\n      offsetX += stepX;\n    }\n\n    return group;\n  };\n\n  Barcode.prototype._getBackground = function _getBackground(size) {\n    var options = this.options;\n    var border = options.border || {};\n    var box = new Box(0, 0, size.width, size.height).unpad(border.width / 2);\n    var path = draw.Path.fromRect(box.toRect(), {\n      fill: {\n        color: options.background\n      },\n      stroke: {\n        color: border.width ? border.color : \"\",\n        width: border.width,\n        dashType: border.dashType\n      }\n    });\n    return path;\n  };\n\n  Barcode.prototype._getText = function _getText(value) {\n    var textOptions = this.options.text;\n    var text = this._textbox = new TextBox(value, {\n      font: textOptions.font,\n      color: textOptions.color,\n      align: \"center\",\n      vAlign: \"bottom\",\n      margin: textOptions.margin\n    });\n    text.reflow(this.contentBox);\n    text.renderVisual();\n    return text.visual;\n  };\n\n  Barcode.prototype._setOptions = function _setOptions(options) {\n    this.type = (options.type || this.options.type).toLowerCase();\n\n    if (this.type === \"upca\") {\n      this.type = \"ean13\";\n      options.value = '0' + options.value;\n    }\n\n    if (this.type === \"upce\") {\n      this.type = \"ean8\";\n      options.value = '0' + options.value;\n    }\n\n    if (!Encodings[this.type]) {\n      throw new Error(\"Encoding \" + this.type + \" is not supported.\");\n    }\n\n    this.encoding = new Encodings[this.type]();\n    this.options = deepExtend({}, this.options, options);\n  };\n\n  return Barcode;\n}(Class);\n\nsetDefaultOptions(Barcode, {\n  name: \"Barcode\",\n  renderAs: \"svg\",\n  value: \"\",\n  type: \"code39\",\n  checksum: false,\n  width: 0,\n  height: 0,\n  color: \"black\",\n  background: \"white\",\n  text: {\n    visible: true,\n    font: \"16px Consolas, Monaco, Sans Mono, monospace, sans-serif\",\n    color: \"black\",\n    margin: {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0\n    }\n  },\n  border: {\n    width: 0,\n    dashType: \"solid\",\n    color: \"black\"\n  },\n  padding: {\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }\n});\nexport default Barcode;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/node_modules/@progress/kendo-charts/dist/es/barcode/barcode.js"],"names":["geometry","geom","drawing","draw","Class","defined","addClass","setDefaultOptions","deepExtend","getSpacing","isObject","Box","TextBox","Encodings","DEFAULT_BARCODE_WIDTH","DEFAULT_BARCODE_HEIGHT","Barcode","element","options","call","_initElement","_initSurface","_setOptions","value","redraw","__proto__","prototype","Object","create","constructor","destroy","_destroySurface","style","display","ref","surface","type","renderAs","_initSurfaceElement","_createSurface","Surface","surfaceElement","_destroySurfaceElement","document","createElement","position","appendChild","parentNode","removeChild","setOptions","size","_getSize","clear","setSize","width","height","createVisual","visual","getSize","offsetWidth","offsetHeight","_resize","_render","textOptions","text","textMargin","margin","border","encoding","contentBox","unpad","padding","barHeight","encodedValue","textToDisplay","textHeight","Group","append","_getBackground","visible","util","measureText","font","top","bottom","encode","checksum","_getText","_bandsGroup","_getBands","pattern","baseUnit","exportVisual","elementWidth","clientWidth","elementHeight","clientHeight","Size","value$1","String","this$1","offsetX","x1","stepX","patternItem","group","i","length","y1","y2","rect","Rect","fromPoints","Point","path","Path","fromRect","fill","color","stroke","box","toRect","background","dashType","_textbox","align","vAlign","reflow","renderVisual","toLowerCase","Error","name","left","right"],"mappings":"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","sourcesContent":["import {\n    geometry as geom,\n    drawing as draw\n} from '@progress/kendo-drawing';\n\nimport {\n    Class,\n    defined,\n    addClass,\n    setDefaultOptions,\n    deepExtend,\n    getSpacing,\n    isObject\n} from '../common';\n\nimport {\n    Box,\n    TextBox\n} from '../core';\n\nimport { Encodings } from './encodings/main';\n\nvar DEFAULT_BARCODE_WIDTH = 300;\nvar DEFAULT_BARCODE_HEIGHT = 100;\n\nvar Barcode = (function (Class) {\n    function Barcode(element, options) {\n        Class.call(this);\n\n        this.options = deepExtend({}, this.options, options);\n        this.element = element;\n\n        this._initElement();\n        this._initSurface();\n        this._setOptions(options);\n\n        if (options && defined(options.value)) {\n            this.redraw();\n        }\n    }\n\n    if ( Class ) Barcode.__proto__ = Class;\n    Barcode.prototype = Object.create( Class && Class.prototype );\n    Barcode.prototype.constructor = Barcode;\n\n    Barcode.prototype.destroy = function destroy () {\n        this._destroySurface();\n    };\n\n    Barcode.prototype._initElement = function _initElement () {\n        addClass(this.element, \"k-barcode\");\n        this.element.style.display = \"block\";\n    };\n\n    Barcode.prototype._initSurface = function _initSurface () {\n        var ref = this;\n        var options = ref.options;\n        var surface = ref.surface;\n\n        if (!surface || surface.options.type !== options.renderAs) {\n            this._destroySurface();\n            this._initSurfaceElement();\n            this.surface = this._createSurface();\n        }\n    };\n\n    Barcode.prototype._createSurface = function _createSurface () {\n        return draw.Surface.create(this.surfaceElement, {\n            type: this.options.renderAs\n        });\n    };\n\n    Barcode.prototype._destroySurface = function _destroySurface () {\n        if (this.surface) {\n            this.surface.destroy();\n            this.surface = null;\n            this._destroySurfaceElement();\n        }\n    };\n\n    Barcode.prototype._initSurfaceElement = function _initSurfaceElement () {\n        if (!this.surfaceElement) {\n            this.surfaceElement = document.createElement('div');\n            this.surfaceElement.style.position = \"relative\";\n            this.element.appendChild(this.surfaceElement);\n        }\n    };\n\n    Barcode.prototype._destroySurfaceElement = function _destroySurfaceElement () {\n        if (this.surfaceElement && this.surfaceElement.parentNode) {\n            this.surfaceElement.parentNode.removeChild(this.surfaceElement);\n            this.surfaceElement = null;\n        }\n    };\n\n    Barcode.prototype.setOptions = function setOptions (options) {\n        this._setOptions(options);\n        this.redraw();\n    };\n\n    Barcode.prototype.redraw = function redraw () {\n        var size = this._getSize();\n\n        this.surface.clear();\n\n        this.surface.setSize({\n            width: size.width,\n            height: size.height\n        });\n\n        this.createVisual();\n\n        this.surface.draw(this.visual);\n    };\n\n    Barcode.prototype.getSize = function getSize () {\n        return {\n            width: this.element.offsetWidth,\n            height: this.element.offsetHeight\n        };\n    };\n\n    Barcode.prototype._resize = function _resize () {\n        this.redraw();\n    };\n\n    Barcode.prototype.createVisual = function createVisual () {\n        this.visual = this._render();\n    };\n\n    Barcode.prototype._render = function _render () {\n        var options = this.options;\n        var value = options.value;\n        var textOptions = options.text;\n        var textMargin = getSpacing(textOptions.margin);\n        var size = this._getSize();\n        var border = options.border || {};\n        var encoding = this.encoding;\n        var contentBox = new Box(0, 0, size.width, size.height).unpad(border.width).unpad(options.padding);\n        var barHeight = contentBox.height();\n        var encodedValue;\n        var textToDisplay;\n        var textHeight;\n        var visual = new draw.Group();\n\n        this.contentBox = contentBox;\n        visual.append(this._getBackground(size));\n\n        if (textOptions.visible) {\n            textHeight = draw.util.measureText(value, { font: textOptions.font }).height;\n            barHeight -= textHeight + textMargin.top + textMargin.bottom;\n        }\n\n        encodedValue = encoding.encode(value, contentBox.width(), barHeight);\n\n        if (textOptions.visible) {\n            textToDisplay = value;\n\n            if (options.checksum && defined(encoding.checksum)) {\n                textToDisplay += \" \" + encoding.checksum;\n            }\n\n            visual.append(this._getText(textToDisplay));\n        }\n\n        this.barHeight = barHeight;\n        this._bandsGroup = this._getBands(encodedValue.pattern, encodedValue.baseUnit);\n        visual.append(this._bandsGroup);\n\n        return visual;\n    };\n\n    Barcode.prototype.exportVisual = function exportVisual () {\n        return this._render();\n    };\n\n    Barcode.prototype._getSize = function _getSize () {\n        var element = this.element;\n        var elementWidth = element.clientWidth;\n        var elementHeight = element.clientHeight;\n        var size = new geom.Size(DEFAULT_BARCODE_WIDTH, DEFAULT_BARCODE_HEIGHT);\n\n        if (elementWidth > 0) {\n            size.width = elementWidth;\n        }\n\n        if (elementHeight) {\n            size.height = elementHeight;\n        }\n\n        if (this.options.width) {\n            size.width = this.options.width;\n        }\n\n        if (this.options.height) {\n            size.height = this.options.height;\n        }\n\n        return size;\n    };\n\n    Barcode.prototype.value = function value (value$1) {\n        if (!defined(value$1)) {\n            return this.options.value;\n        }\n\n        this.options.value = String(value$1);\n        this.redraw();\n    };\n\n    Barcode.prototype._getBands = function _getBands (pattern, baseUnit) {\n        var this$1 = this;\n\n        var contentBox = this.contentBox;\n        var offsetX = contentBox.x1;\n        var stepX;\n        var patternItem;\n        var group = new draw.Group();\n\n        for (var i = 0; i < pattern.length; i++) {\n            patternItem = isObject(pattern[i]) ? pattern[i] : {\n                width: pattern[i],\n                y1: 0,\n                y2: this$1.barHeight\n            };\n\n            stepX = patternItem.width * baseUnit;\n\n            if (i % 2) {\n                var rect = geom.Rect.fromPoints(\n                    new geom.Point(offsetX, patternItem.y1 + contentBox.y1),\n                    new geom.Point(offsetX + stepX, patternItem.y2 + contentBox.y1)\n                );\n\n                var path = draw.Path.fromRect(rect, {\n                    fill: {\n                        color: this$1.options.color\n                    },\n                    stroke: null\n                });\n\n                group.append(path);\n            }\n\n            offsetX += stepX;\n        }\n\n        return group;\n    };\n\n    Barcode.prototype._getBackground = function _getBackground (size) {\n        var options = this.options;\n        var border = options.border || {};\n        var box = new Box(0, 0, size.width, size.height).unpad(border.width / 2);\n        var path = draw.Path.fromRect(box.toRect(), {\n            fill: {\n                color: options.background\n            },\n            stroke: {\n                color: border.width ? border.color : \"\",\n                width: border.width,\n                dashType: border.dashType\n            }\n        });\n\n        return path;\n    };\n\n    Barcode.prototype._getText = function _getText (value) {\n        var textOptions = this.options.text;\n        var text = this._textbox = new TextBox(value, {\n            font: textOptions.font,\n            color: textOptions.color,\n            align: \"center\",\n            vAlign: \"bottom\",\n            margin: textOptions.margin\n        });\n\n        text.reflow(this.contentBox);\n        text.renderVisual();\n\n        return text.visual;\n    };\n\n    Barcode.prototype._setOptions = function _setOptions (options) {\n        this.type = (options.type || this.options.type).toLowerCase();\n\n        if (this.type === \"upca\") {\n            this.type = \"ean13\";\n            options.value = '0' + options.value;\n        }\n\n        if (this.type === \"upce\") {\n            this.type = \"ean8\";\n            options.value = '0' + options.value;\n        }\n\n        if (!Encodings[this.type]) {\n            throw new Error(\"Encoding \" + this.type + \" is not supported.\");\n        }\n\n        this.encoding = new Encodings[this.type]();\n\n        this.options = deepExtend({}, this.options, options);\n    };\n\n    return Barcode;\n}(Class));\n\nsetDefaultOptions(Barcode, {\n    name: \"Barcode\",\n    renderAs: \"svg\",\n    value: \"\",\n    type: \"code39\",\n    checksum: false,\n    width: 0,\n    height: 0,\n    color: \"black\",\n    background: \"white\",\n    text: {\n        visible: true,\n        font: \"16px Consolas, Monaco, Sans Mono, monospace, sans-serif\",\n        color: \"black\",\n        margin: {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0\n        }\n    },\n    border: {\n        width: 0,\n        dashType: \"solid\",\n        color: \"black\"\n    },\n    padding: {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n    }\n});\n\nexport default Barcode;\n"]},"metadata":{},"sourceType":"module"}