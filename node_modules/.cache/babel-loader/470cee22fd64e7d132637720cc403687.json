{"ast":null,"code":"import _classCallCheck from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{FormattedMessage,injectIntl}from'react-intl';import'rc-tabs/assets/index.css';import{AtTabs}from'../../components/custom-tabs/custom-tabs.styles';import Tabs,{TabPane}from'rc-tabs';import ReactTooltip from'react-tooltip';import{Grid,GridColumn}from'@progress/kendo-react-grid';import CustomSwitch from'../../components/custom-switch/custom-switch.component';import{LocalizationProvider}from'@progress/kendo-react-intl';import{AtTableWrap}from'../../components/data-grid/data-grid.styles';import PerfectScrollbar from'react-perfect-scrollbar';import{SampleType,formCode}from'../../components/Enumeration';var ConfigureExportFields=/*#__PURE__*/function(_React$Component){_inherits(ConfigureExportFields,_React$Component);var _super=_createSuper(ConfigureExportFields);function ConfigureExportFields(props){var _this;_classCallCheck(this,ConfigureExportFields);_this=_super.call(this,props);_this.onTabChange=function(tab){_this.setState({selectedScreen:_this.state.screens.find(function(screen){return screen.eventKey===tab;})//,extractedColumnList:\n//  tab==='sample'||tab==='master'?this.state.sampleColumnList:this.state.subsampleColumnList\n});};if(_this.props.selectedSampleType===SampleType.Masters){var screens=[{eventKey:'master',name:_this.props.formName}];var sampleColumnList=[{\"title\":\"IDS_EXPORTFIELDS\",\"field\":\"sampleexportfields\",\"width\":\"600px\"}];_this.state={screens:screens,sampleColumnList:sampleColumnList,extractedColumnList:sampleColumnList,selectedScreen:{eventKey:'master',name:_this.props.formName}};}else if(_this.props.selectedSampleType===SampleType.GOODSIN){var _screens=[{eventKey:'master',name:\"IDS_GOODSIN\"}];var _sampleColumnList=[{\"title\":\"IDS_EXPORTFIELDS\",\"field\":\"sampleexportfields\",\"width\":\"600px\"}];_this.state={screens:_screens,sampleColumnList:_sampleColumnList,extractedColumnList:_sampleColumnList,selectedScreen:{eventKey:'master',name:\"IDS_GOODSIN\"}};}else{var _screens2=[{eventKey:'sample',name:\"IDS_SAMPLE\"}];var _sampleColumnList2=[{\"title\":\"IDS_EXPORTFIELDS\",\"field\":\"sampleexportfields\",\"width\":\"600px\"}];if(_this.props.needSubSample||_this.props.selectedSampleType===SampleType.STABILITY){_screens2.push({eventKey:'subsample',name:\"IDS_SUBSAMPLE\"});}_this.state={screens:_screens2,sampleColumnList:_sampleColumnList2,extractedColumnList:_sampleColumnList2,selectedScreen:{eventKey:'sample',name:\"IDS_SAMPLE\"}};}return _this;}_createClass(ConfigureExportFields,[{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(AtTabs,null,/*#__PURE__*/React.createElement(Tabs,{activeKey:this.state.selectedScreen.eventKey,moreIcon:\"...\",onChange:this.onTabChange},this.state.screens.map(function(screen){return/*#__PURE__*/ (//{\nReact.createElement(TabPane,{name:screen.eventKey,tab:_this2.props.intl.formatMessage({id:screen.name}),key:screen.eventKey},/*#__PURE__*/React.createElement(PerfectScrollbar,null,/*#__PURE__*/React.createElement(AtTableWrap,{className:\"at-list-table\"},/*#__PURE__*/React.createElement(LocalizationProvider,{language:\"lang\"},/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Grid,Object.assign({className:\"active-paging\",style:{height:'550px'},resizable:true,reorderable:true,scrollable:\"scrollable\",data:_this2.props.dataResult[_this2.state.selectedScreen.eventKey]?_this2.props.dataResult[_this2.state.selectedScreen.eventKey]:[]},_this2.state.dataState,{onDataStateChange:_this2.dataStateChange}),/*#__PURE__*/React.createElement(GridColumn,{field:\"label\",title:_this2.props.intl.formatMessage({id:\"IDS_FIELDS\"}),cell:function cell(row){return/*#__PURE__*/React.createElement(\"td\",{\"data-tip\":row[\"dataItem\"]['label'],\"data-for\":\"tooltip-grid-wrap\"},row[\"dataItem\"]['label']);}}),_this2.state.extractedColumnList.map(function(column){return/*#__PURE__*/React.createElement(GridColumn,{field:column.field,title:_this2.props.intl.formatMessage({id:column.title}),headerClassName:\"text-center\",cell:function cell(row){return/*#__PURE__*/React.createElement(\"td\",{style:{textAlign:\"center\"},\"data-tip\":_this2.props.intl.formatMessage({id:column.title}),\"data-for\":\"tooltip-grid-wrap\"},/*#__PURE__*/React.createElement(CustomSwitch,{type:\"switch\",id:row[\"dataItem\"][column.field],onChange:function onChange(event){return _this2.props.onChangeToggle(event,row[\"dataItem\"],column.field,row.dataIndex,_this2.state.selectedScreen.eventKey,_this2.props.operation);},checked:row[\"dataItem\"][column.field]||false,name:row[\"dataItem\"][\"label\"]+\"_\"+row.dataIndex+\"_\"+row.columnIndex}));}});}))))))));}//}\n))));}}]);return ConfigureExportFields;}(React.Component);export default injectIntl(ConfigureExportFields);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/designtemplatemapping/ConfigureExportFields.jsx"],"names":["React","FormattedMessage","injectIntl","AtTabs","Tabs","TabPane","ReactTooltip","Grid","GridColumn","CustomSwitch","LocalizationProvider","AtTableWrap","PerfectScrollbar","SampleType","formCode","ConfigureExportFields","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","selectedSampleType","Masters","name","formName","sampleColumnList","extractedColumnList","GOODSIN","needSubSample","STABILITY","push","map","intl","formatMessage","id","height","dataResult","dataState","dataStateChange","row","column","field","title","textAlign","event","onChangeToggle","dataIndex","operation","columnIndex","Component"],"mappings":"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","sourcesContent":["\r\nimport React from 'react'\r\nimport { FormattedMessage, injectIntl } from 'react-intl'\r\nimport 'rc-tabs/assets/index.css';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport Tabs, { TabPane } from 'rc-tabs';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { Grid,GridColumn } from '@progress/kendo-react-grid';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { SampleType, formCode } from '../../components/Enumeration';\r\n\r\nclass ConfigureExportFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (this.props.selectedSampleType === SampleType.Masters) {\r\n            const screens = [{ eventKey: 'master', name: this.props.formName }];\r\n\r\n            let sampleColumnList = [{ \"title\": \"IDS_EXPORTFIELDS\", \"field\": \"sampleexportfields\", \"width\": \"600px\" },\r\n            ];\r\n\r\n            this.state = {\r\n                screens, sampleColumnList, extractedColumnList: sampleColumnList,\r\n                selectedScreen: { eventKey: 'master', name: this.props.formName }\r\n            }\r\n\r\n        } else if(this.props.selectedSampleType === SampleType.GOODSIN) {\r\n            const screens = [{ eventKey: 'master', name: \"IDS_GOODSIN\" }];\r\n\r\n            let sampleColumnList = [{ \"title\": \"IDS_EXPORTFIELDS\", \"field\": \"sampleexportfields\", \"width\": \"600px\" },\r\n            ];\r\n\r\n            this.state = {\r\n                screens, sampleColumnList, extractedColumnList: sampleColumnList,\r\n                selectedScreen: { eventKey: 'master', name: \"IDS_GOODSIN\" }\r\n            }\r\n        } \r\n        else {\r\n            const screens = [{ eventKey: 'sample', name: \"IDS_SAMPLE\" }];\r\n\r\n            let sampleColumnList = [{ \"title\": \"IDS_EXPORTFIELDS\", \"field\": \"sampleexportfields\", \"width\": \"600px\" },\r\n            ];\r\n\r\n            if (this.props.needSubSample||this.props.selectedSampleType === SampleType.STABILITY) {\r\n                screens.push({ eventKey: 'subsample', name: \"IDS_SUBSAMPLE\" });\r\n            }\r\n\r\n            this.state = {\r\n                screens, sampleColumnList, extractedColumnList: sampleColumnList,\r\n                selectedScreen: { eventKey: 'sample', name: \"IDS_SAMPLE\" }\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n            //,extractedColumnList:\r\n          //  tab==='sample'||tab==='master'?this.state.sampleColumnList:this.state.subsampleColumnList\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <AtTabs>\r\n\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>//{\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n\r\n                                <PerfectScrollbar>\r\n                                    {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            <>\r\n                                                <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.eventKey]?this.props.dataResult[this.state.selectedScreen.eventKey]:[]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {this.state.extractedColumnList.map(column =>\r\n                                                            <GridColumn\r\n                                                                field={column.field}\r\n                                                                title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                                headerClassName=\"text-center\"\r\n                                                                cell={(row) => (\r\n                                                                    <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                        <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                            onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field,\r\n                                                                                row.dataIndex, this.state.selectedScreen.eventKey,\r\n                                                                                this.props.operation)}\r\n                                                                            checked={row[\"dataItem\"][column.field] || false}\r\n                                                                            name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n\r\n\r\n                                                                    </td>)}\r\n                                                            />\r\n\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                            </>\r\n\r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    {/* <ReactTooltip /> */}\r\n                                </PerfectScrollbar>\r\n\r\n                            </TabPane>\r\n                            //}\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureExportFields)"]},"metadata":{},"sourceType":"module"}