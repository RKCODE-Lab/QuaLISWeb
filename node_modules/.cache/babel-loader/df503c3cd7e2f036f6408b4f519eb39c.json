{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\components\\\\data-grid\\\\SingleSelectionDataGrid.jsx\";\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Button, Nav, Image } from 'react-bootstrap';\nimport { Grid, GridColumn as Column, GridToolbar, GridColumnMenuFilter, GridNoRecords, getSelectedState } from '@progress/kendo-react-grid';\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\nimport ConfirmDialog from '../confirm-alert/confirm-alert.component';\nimport SimpleGrid from './SimpleGrid';\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../data-grid/data-grid.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheck, faTrashAlt, faPencilAlt, faThumbsUp, faCopy, faPlus, faSync, faFileExcel, faFilePdf, faCloudDownloadAlt, faRedo, faEye, faRocket } from '@fortawesome/free-solid-svg-icons';\nimport ColumnMenu from './ColumnMenu'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport reject from \"../../assets/image/reject.svg\";\nimport CustomSwitch from '../custom-switch/custom-switch.component'; // import '../../assets/styles/unicode-font.css';\n\nimport parse from 'html-react-parser';\nimport { toast } from 'react-toastify';\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\nimport messages_en from '../../assets/translations/en.json';\nimport messages_ko from '../../assets/translations/ko.json';\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\nimport { connect } from 'react-redux';\nimport { process } from '@progress/kendo-data-query';\nimport ReactTooltip from 'react-tooltip';\nimport { getActionIcon } from '../HoverIcons';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport messages_ru from '../../assets/translations/ru.json';\nimport messages_tg from '../../assets/translations/tg.json';\nimport SimpleGridWithSelection from './SimpleGridWithSelection';\nconst messages = {\n  'en-US': messages_en,\n  'ko-KR': messages_ko,\n  'ru-RU': messages_ru,\n  'tg-TG': messages_tg\n};\n\nclass SingleSelectionDataGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.confirmMessage = new ConfirmMessage();\n  } // columnProps(field) {\n  //     if (!this.props.hideColumnFilter) {\n  //         return {\n  //             field: field,\n  //             columnMenu: ColumnMenu,\n  //             headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\n  //         };\n  //     }\n  // }\n  // isColumnActive(field, dataState) {\n  //     return GridColumnMenuFilter.active(field, dataState.filter)\n  // }\n\n\n  render() {\n    console.log(\"selectiontest\", this.props.subChildList);\n    console.log(\"selectiontest1\", this.props);\n    const methodUrl = this.props.methodUrl ? this.props.methodUrl : this.props.inputParam && this.props.inputParam.methodUrl;\n    const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting));\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      actionColWidth: this.props.actionColWidth ? this.props.actionColWidth : \"150px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      data: process(this.props.subChildList, {\n        skip: 0,\n        take: this.props.subChildList.length\n      }),\n      style: {\n        height: this.props.gridHeight,\n        width: this.props.gridWidth\n      },\n      sortable: true,\n      resizable: true,\n      reorderable: false,\n      scrollable: this.props.scrollable,\n      pageable: this.props.pageable ? {\n        buttonCount: 5,\n        pageSizes: pageSizes,\n        previousNext: false\n      } : \"\",\n      groupable: this.props.groupable ? true : false,\n      detail: this.props.hideDetailBand ? false : this.detailBand //   expandField={this.props.expandField ? this.props.expandField : false}\n      //   onExpandChange={this.expandChange}\n      //    data={this.props.subChildDataResult}\n      ,\n      total: this.props.total\n    }, this.props.dataState, {\n      selectedField: \"selected\",\n      onRowClick: this.props.handleRowClick,\n      onSelectionChange: this.props.subChildSelectionChange,\n      onHeaderSelectionChange: this.props.subChildHeaderSelectionChange,\n      onDataStateChange: this.props.dataStateChange,\n      selectable: {\n        enabled: true,\n        drag: false,\n        cell: false,\n        mode: 'multiple'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(GridNoRecords, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 29\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_NORECORDSAVAILABLE\"\n    })), this.props.extractedColumnList.map((item, index) => /*#__PURE__*/React.createElement(Column, {\n      key: index,\n      title: this.props.intl.formatMessage({\n        id: item.idsName\n      }) //     {...this.columnProps(item.dataField)}\n      ,\n      width: item.width,\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 41\n        }\n      }, item.isIdsField ? /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: row[\"dataItem\"][item.dataField],\n        defaultMessage: row[\"dataItem\"][item.dataField],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 49\n        }\n      }) : row[\"dataItem\"][item.dataField] && row[\"dataItem\"][item.dataField] === 'NA' ? \"-\" : row[\"dataItem\"][item.dataField]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 33\n      }\n    }))))));\n  }\n\n  componentDidUpdate() {\n    ReactTooltip.rebuild();\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, undefined)(injectIntl(SingleSelectionDataGrid));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/components/data-grid/SingleSelectionDataGrid.jsx"],"names":["React","FormattedMessage","injectIntl","Button","Nav","Image","Grid","GridColumn","Column","GridToolbar","GridColumnMenuFilter","GridNoRecords","getSelectedState","GridPDFExport","ExcelExport","ConfirmDialog","SimpleGrid","Row","Col","Card","FormGroup","FormLabel","AtTableWrap","FormControlStatic","FontIconWrap","FontAwesomeIcon","faCheck","faTrashAlt","faPencilAlt","faThumbsUp","faCopy","faPlus","faSync","faFileExcel","faFilePdf","faCloudDownloadAlt","faRedo","faEye","faRocket","ColumnMenu","CustomSwitch","parse","toast","FormCheckbox","messages_en","messages_ko","loadMessages","LocalizationProvider","connect","process","ReactTooltip","getActionIcon","ConfirmMessage","messages_ru","messages_tg","SimpleGridWithSelection","messages","SingleSelectionDataGrid","Component","constructor","props","confirmMessage","render","console","log","subChildList","methodUrl","inputParam","pageSizes","Login","settings","split","map","setting","parseInt","actionColWidth","skip","take","length","height","gridHeight","width","gridWidth","scrollable","pageable","buttonCount","previousNext","groupable","hideDetailBand","detailBand","total","dataState","handleRowClick","subChildSelectionChange","subChildHeaderSelectionChange","dataStateChange","enabled","drag","cell","mode","intl","formatMessage","id","extractedColumnList","item","index","idsName","row","dataField","isIdsField","componentDidUpdate","rebuild","mapStateToProps","state","undefined"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,YAA7C;AACA,SAASC,MAAT,EAAiBC,GAAjB,EAAsBC,KAAtB,QAAmC,iBAAnC;AACA,SAASC,IAAT,EAAeC,UAAU,IAAIC,MAA7B,EAAqCC,WAArC,EAAkDC,oBAAlD,EAAwEC,aAAxE,EAAuFC,gBAAvF,QAA+G,4BAA/G;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,OAAOC,aAAP,MAA0B,0CAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,IAAnB,EAAyBC,SAAzB,EAAoCC,SAApC,QAAqD,iBAArD;AACA,SAASC,WAAT,EAAsBC,iBAAtB,EAAyCC,YAAzC,QAA6D,+BAA7D;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SACIC,OADJ,EACaC,UADb,EACyBC,WADzB,EACsCC,UADtC,EAEIC,MAFJ,EAEYC,MAFZ,EAEoBC,MAFpB,EAE4BC,WAF5B,EAEyCC,SAFzC,EAEoDC,kBAFpD,EAEwEC,MAFxE,EAEgFC,KAFhF,EAEuFC,QAFvF,QAGO,mCAHP;AAIA,OAAOC,UAAP,MAAuB,cAAvB,C,CACA;;;AAEA,OAAOC,YAAP,MAAyB,0CAAzB,C,CAAoE;;AACpE,OAAOC,KAAP,MAAkB,mBAAlB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,4BAAnD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,uBAAP,MAAoC,2BAApC;AAEA,MAAMC,QAAQ,GAAG;AACb,WAASZ,WADI;AAEb,WAASC,WAFI;AAGb,WAASQ,WAHI;AAIb,WAASC;AAJI,CAAjB;;AAOA,MAAMG,uBAAN,SAAsCzD,KAAK,CAAC0D,SAA5C,CAAsD;AAIlDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,cAAL,GAAsB,IAAIT,cAAJ,EAAtB;AACH,GAPiD,CASlD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAGAU,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKJ,KAAL,CAAWK,YAAxC;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6B,KAAKJ,KAAlC;AAEA,UAAMM,SAAS,GAAG,KAAKN,KAAL,CAAWM,SAAX,GAAuB,KAAKN,KAAL,CAAWM,SAAlC,GAA+C,KAAKN,KAAL,CAAWO,UAAX,IAAyB,KAAKP,KAAL,CAAWO,UAAX,CAAsBD,SAAhH;AAGA,UAAME,SAAS,GAAG,KAAKR,KAAL,CAAWQ,SAAX,GAAuB,KAAKR,KAAL,CAAWQ,SAAlC,GAA8C,KAAKR,KAAL,CAAWS,KAAX,CAAiBC,QAAjB,IAA6B,KAAKV,KAAL,CAAWS,KAAX,CAAiBC,QAAjB,CAA0B,EAA1B,EAA8BC,KAA9B,CAAoC,GAApC,EAAyCC,GAAzC,CAA6CC,OAAO,IAAIC,QAAQ,CAACD,OAAD,CAAhE,CAA7F;AACA,wBACI,uDAEI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,eAAvB;AAAuC,MAAA,cAAc,EAAE,KAAKb,KAAL,CAAWe,cAAX,GAA4B,KAAKf,KAAL,CAAWe,cAAvC,GAAwD,OAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,oBAAD;AAAsB,MAAA,QAAQ,EAAC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,IAAD;AACI,MAAA,IAAI,EAAE1B,OAAO,CAAC,KAAKW,KAAL,CAAWK,YAAZ,EAA0B;AAAEW,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAE,KAAKjB,KAAL,CAAWK,YAAX,CAAwBa;AAAzC,OAA1B,CADjB;AAEI,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,KAAKnB,KAAL,CAAWoB,UAArB;AAAiCC,QAAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWsB;AAAnD,OAFX;AAGI,MAAA,QAAQ,MAHZ;AAII,MAAA,SAAS,MAJb;AAKI,MAAA,WAAW,EAAE,KALjB;AAMI,MAAA,UAAU,EAAE,KAAKtB,KAAL,CAAWuB,UAN3B;AAOI,MAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWwB,QAAX,GAAsB;AAAEC,QAAAA,WAAW,EAAE,CAAf;AAAkBjB,QAAAA,SAAS,EAAEA,SAA7B;AAAwCkB,QAAAA,YAAY,EAAE;AAAtD,OAAtB,GAAsF,EAPpG;AAQI,MAAA,SAAS,EAAE,KAAK1B,KAAL,CAAW2B,SAAX,GAAuB,IAAvB,GAA8B,KAR7C;AASI,MAAA,MAAM,EAAE,KAAK3B,KAAL,CAAW4B,cAAX,GAA4B,KAA5B,GAAoC,KAAKC,UATrD,CAUI;AACA;AACA;AAZJ;AAaI,MAAA,KAAK,EAAE,KAAK7B,KAAL,CAAW8B;AAbtB,OAcQ,KAAK9B,KAAL,CAAW+B,SAdnB;AAeI,MAAA,aAAa,EAAC,UAflB;AAgBI,MAAA,UAAU,EAAE,KAAK/B,KAAL,CAAWgC,cAhB3B;AAiBI,MAAA,iBAAiB,EAAE,KAAKhC,KAAL,CAAWiC,uBAjBlC;AAkBI,MAAA,uBAAuB,EAAE,KAAKjC,KAAL,CAAWkC,6BAlBxC;AAmBI,MAAA,iBAAiB,EAAE,KAAKlC,KAAL,CAAWmC,eAnBlC;AAoBI,MAAA,UAAU,EAAE;AACRC,QAAAA,OAAO,EAAE,IADD;AAERC,QAAAA,IAAI,EAAE,KAFE;AAGRC,QAAAA,IAAI,EAAE,KAHE;AAIRC,QAAAA,IAAI,EAAE;AAJE,OApBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA2BI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKvC,KAAL,CAAWwC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAA9B,CADL,CA3BJ,EAiDK,KAAK1C,KAAL,CAAW2C,mBAAX,CAA+B/B,GAA/B,CAAmC,CAACgC,IAAD,EAAOC,KAAP,kBAChC,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,KAAb;AACI,MAAA,KAAK,EAAE,KAAK7C,KAAL,CAAWwC,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAEE,IAAI,CAACE;AAAX,OAA9B,CADX,CAEI;AAFJ;AAGI,MAAA,KAAK,EAAEF,IAAI,CAACvB,KAHhB;AAII,MAAA,IAAI,EAAG0B,GAAD,iBACF;AAAI,oBAAUA,GAAG,CAAC,UAAD,CAAH,CAAgBH,IAAI,CAACI,SAArB,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKJ,IAAI,CAACK,UAAL,gBACG,oBAAC,gBAAD;AAAkB,QAAA,EAAE,EAAEF,GAAG,CAAC,UAAD,CAAH,CAAgBH,IAAI,CAACI,SAArB,CAAtB;AAAuD,QAAA,cAAc,EAAED,GAAG,CAAC,UAAD,CAAH,CAAgBH,IAAI,CAACI,SAArB,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,GAEKD,GAAG,CAAC,UAAD,CAAH,CAAgBH,IAAI,CAACI,SAArB,KAAiCD,GAAG,CAAC,UAAD,CAAH,CAAgBH,IAAI,CAACI,SAArB,MAAkC,IAAnE,GAAwE,GAAxE,GACFD,GAAG,CAAC,UAAD,CAAH,CAAgBH,IAAI,CAACI,SAArB,CAJR,CALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,CAjDL,CAFJ,CADJ,CAFJ,CADJ;AA8EH;;AAEDE,EAAAA,kBAAkB,GAAG;AACjB5D,IAAAA,YAAY,CAAC6D,OAAb;AACH;;AAlHiD;;AAoHtD,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAE5C,IAAAA,KAAK,EAAE4C,KAAK,CAAC5C;AAAf,GAAR;AACH,CAFD;;AAMA,eAAerB,OAAO,CAACgE,eAAD,EAAkBE,SAAlB,CAAP,CAAoChH,UAAU,CAACuD,uBAAD,CAA9C,CAAf","sourcesContent":["import React from 'react';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Button, Nav, Image } from 'react-bootstrap';\r\nimport { Grid, GridColumn as Column, GridToolbar, GridColumnMenuFilter, GridNoRecords, getSelectedState } from '@progress/kendo-react-grid';\r\nimport { GridPDFExport } from '@progress/kendo-react-pdf';\r\nimport { ExcelExport } from '@progress/kendo-react-excel-export';\r\nimport ConfirmDialog from '../confirm-alert/confirm-alert.component';\r\nimport SimpleGrid from './SimpleGrid';\r\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { AtTableWrap, FormControlStatic, FontIconWrap } from '../data-grid/data-grid.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faCheck, faTrashAlt, faPencilAlt, faThumbsUp,\r\n    faCopy, faPlus, faSync, faFileExcel, faFilePdf, faCloudDownloadAlt, faRedo, faEye, faRocket\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport ColumnMenu from './ColumnMenu';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport reject from '../../assets/image/reject.svg'\r\nimport CustomSwitch from '../custom-switch/custom-switch.component';// import '../../assets/styles/unicode-font.css';\r\nimport parse from 'html-react-parser';\r\nimport { toast } from 'react-toastify';\r\nimport FormCheckbox from '../form-checkbox/form-checkbox.component';\r\nimport messages_en from '../../assets/translations/en.json';\r\nimport messages_ko from '../../assets/translations/ko.json';\r\nimport { loadMessages, LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport { connect } from 'react-redux';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { getActionIcon } from '../HoverIcons';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport messages_ru from '../../assets/translations/ru.json';\r\nimport messages_tg from '../../assets/translations/tg.json';\r\nimport SimpleGridWithSelection from './SimpleGridWithSelection';\r\n\r\nconst messages = {\r\n    'en-US': messages_en,\r\n    'ko-KR': messages_ko,\r\n    'ru-RU': messages_ru,\r\n    'tg-TG': messages_tg\r\n}\r\n\r\nclass SingleSelectionDataGrid extends React.Component {\r\n\r\n    _pdfExport;\r\n    _excelExport;\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    // columnProps(field) {\r\n    //     if (!this.props.hideColumnFilter) {\r\n    //         return {\r\n    //             field: field,\r\n    //             columnMenu: ColumnMenu,\r\n    //             headerClassName: this.isColumnActive(field, this.props.dataState) ? 'active' : ''\r\n    //         };\r\n    //     }\r\n    // }\r\n\r\n    // isColumnActive(field, dataState) {\r\n    //     return GridColumnMenuFilter.active(field, dataState.filter)\r\n    // }\r\n\r\n\r\n    render() {\r\n        console.log(\"selectiontest\", this.props.subChildList)\r\n        console.log(\"selectiontest1\",this.props)\r\n\r\n        const methodUrl = this.props.methodUrl ? this.props.methodUrl : (this.props.inputParam && this.props.inputParam.methodUrl);\r\n\r\n\r\n        const pageSizes = this.props.pageSizes ? this.props.pageSizes : this.props.Login.settings && this.props.Login.settings[15].split(\",\").map(setting => parseInt(setting))\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' /> */}\r\n                <AtTableWrap className=\"at-list-table\" actionColWidth={this.props.actionColWidth ? this.props.actionColWidth : \"150px\"} >\r\n                    <LocalizationProvider language=\"lang\">\r\n\r\n                        <Grid\r\n                            data={process(this.props.subChildList, { skip: 0, take: this.props.subChildList.length })}\r\n                            style={{ height: this.props.gridHeight, width: this.props.gridWidth }}\r\n                            sortable\r\n                            resizable\r\n                            reorderable={false}\r\n                            scrollable={this.props.scrollable}\r\n                            pageable={this.props.pageable ? { buttonCount: 5, pageSizes: pageSizes, previousNext: false } : \"\"}\r\n                            groupable={this.props.groupable ? true : false}\r\n                            detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                            //   expandField={this.props.expandField ? this.props.expandField : false}\r\n                            //   onExpandChange={this.expandChange}\r\n                            //    data={this.props.subChildDataResult}\r\n                            total={this.props.total}\r\n                            {...this.props.dataState}\r\n                            selectedField=\"selected\"\r\n                            onRowClick={this.props.handleRowClick}\r\n                            onSelectionChange={this.props.subChildSelectionChange}\r\n                            onHeaderSelectionChange={this.props.subChildHeaderSelectionChange}\r\n                            onDataStateChange={this.props.dataStateChange}\r\n                            selectable={{\r\n                                enabled: true,\r\n                                drag: false,\r\n                                cell: false,\r\n                                mode: 'multiple'\r\n                            }}\r\n                        >\r\n                            <GridNoRecords>\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NORECORDSAVAILABLE\" })}\r\n                            </GridNoRecords>\r\n                            \r\n                                \r\n                                {/* <Column\r\n                            field=\"selected\"\r\n                            width=\"35px\"\r\n\r\n                                title={this.props.title}\r\n                                //     headerCell={this.props.subChildHeaderSelectionChange}\r\n                                //    headerSelectionValue={this.props.selectedsubcild!==undefined?this.props.abc===this.props.selectedsubcild?this.props.subChildSelectAll:false:false}\r\n                                headerSelectionValue={\r\n                                    Object.values(this.props.subChildList).every((dd) => {\r\n                                        return dd.selected === true\r\n                                    }) ? true : false\r\n\r\n                                }\r\n\r\n\r\n                            /> */}\r\n\r\n                            {this.props.extractedColumnList.map((item, index) =>\r\n                                <Column key={index}\r\n                                    title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                                    //     {...this.columnProps(item.dataField)}\r\n                                    width={item.width}\r\n                                    cell={(row) => (\r\n                                        <td data-tip={row[\"dataItem\"][item.dataField]}>\r\n                                            {item.isIdsField ?\r\n                                                <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                                : row[\"dataItem\"][item.dataField]&&row[\"dataItem\"][item.dataField]==='NA'?\"-\":\r\n                                                row[\"dataItem\"][item.dataField]\r\n                                                }\r\n                                        </td>\r\n                                    )} />\r\n                            )}\r\n\r\n\r\n                        </Grid>\r\n                    </LocalizationProvider >\r\n\r\n                </AtTableWrap >\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        ReactTooltip.rebuild();\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, undefined)(injectIntl(SingleSelectionDataGrid));"]},"metadata":{},"sourceType":"module"}