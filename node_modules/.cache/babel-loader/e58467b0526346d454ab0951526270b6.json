{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroup.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { Row, Col, Card, Button, Nav } from 'react-bootstrap';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport { faEye, faTrashAlt } from '@fortawesome/free-regular-svg-icons'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { callService, crudMaster, filterTestGroup, createTree, editTree, getTestGroupDetails, sampleTypeOnChange, validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent, changeTestCategory, addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter, addTestFile, editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData, viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification } from '../../actions';\nimport { constructOptionList, formatInputDate, create_UUID, deleteAttachmentDropZone, filterRecordBasedOnTwoArrays, getControlMap, onDropAttachFileList, showEsign, sortData } from '../../components/CommonScript';\nimport TestGroupTestTab from './TestGroupTestTab';\nimport AddTestGroupSpecification from './AddTestGroupSpecification';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, REPORTTYPE, attachmentType, formCode, designProperties } from '../../components/Enumeration';\nimport AddTestGroupTest from './AddTestGroupTest';\nimport AddProfileTree from './AddProfileTree';\nimport SampleFilter from './SampleFilter';\nimport AddFile from '../testmanagement/AddFile';\nimport AdvFilter from '../../components/AdvFilter';\nimport SpecificationHistory from './SpecificationHistory';\nimport TestGroupSpecFile from './TestGroupSpecFile';\nimport SpecificationInfo from './SpecificationInfo';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { testMoreFields, testSubFields, searchFieldList, specificationColumnList, componentColumnList, addTestColumnList, editTestColumnList } from './TestGroupFields';\nimport EditTestGroupTest from './EditTestGroupTest';\nimport { ContentPanel, SearchAdd } from '../../components/App.styles';\nimport '../../pages/registration/registration.css';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled';\nimport ReactTooltip from 'react-tooltip';\n\nclass TestGroup extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.reloadData = () => {\n      const filterData = this.props.Login.filterData || this.state.filterData;\n\n      if (filterData.nsampletypecode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      } else if (filterData.nproductcatcode === \"\") {\n        if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CATEGORYNOTAVAILABLE\"\n          }));\n        }\n      } else if (filterData.nproductcode === \"\" || filterData.nproductcode === undefined) {\n        if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        }\n      } else if (filterData.ntreeversiontempcode === \"\") {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n        }));\n      } else {\n        const inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: filterData.nsampletypecode.item[\"nsampletypecode\"],\n            nproductcatcode: filterData.nproductcatcode.item[\"nproductcatcode\"],\n            nproductcode: filterData.nproductcode.item[\"nproductcode\"],\n            ntreeversiontempcode: filterData.ntreeversiontempcode.item[\"ntreeversiontempcode\"],\n            filterData //: { ...this.props.Login.filterData }\n\n          },\n          historyDataState: this.state.historyDataState\n        };\n        this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\n      }\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(obj));\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        skip: event.skip,\n        take: event.take\n      });\n    };\n\n    this.viewTestFile = props => {\n      const viewParam = {\n        operation: \"view\",\n        methodUrl: \"TestGroupTestFile\",\n        classUrl: \"testgroup\",\n        inputData: {\n          ntestgroupfilecode: props.selectedTest ? props.selectedTest.ntestgroupfilecode : 0,\n          userinfo: this.props.Login.userInfo,\n          testgroupspecification: this.props.Login.masterData.SelectedSpecification\n        }\n      };\n      this.props.viewAttachment(viewParam);\n    };\n\n    this.fileViewIcon = master => {\n      if (master.ntestgroupfilecode > 0 && master.nlinkcode === transactionStatus.NA) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.linkViewIcon = master => {\n      if (master.ntestgroupfilecode > 0 && master.nlinkcode !== transactionStatus.NA) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.onFilterSumbit = () => {\n      const tempFilterData = this.state.tempFilterData;\n\n      if (tempFilterData.nsampletypecode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      } else if (tempFilterData.nproductcatcode === \"\") {\n        if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CATEGORYNOTAVAILABLE\"\n          }));\n        }\n      } // else if(tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO){\n      else if (tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === \"\" || tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === undefined) {\n        if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        }\n      } // }\n      else if (tempFilterData.ntreeversiontempcode === \"\") {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n        }));\n      } else {\n        const inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: tempFilterData.nsampletypecode.value,\n            nproductcatcode: tempFilterData.nproductcatcode.value,\n            nproductcode: tempFilterData.nproductcode ? tempFilterData.nproductcode.value : -1,\n            ntreeversiontempcode: tempFilterData.ntreeversiontempcode.value,\n            filterData: { ...tempFilterData\n            }\n          },\n          historyDataState: this.state.historyDataState\n        };\n        this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\n      }\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_SPECIFICATION\",\n        operation: \"get\",\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: event.item,\n        activeKey: event.key,\n        focusKey: event.key,\n        primaryKey: event.primaryKey,\n        historyDataState: this.state.historyDataState\n      };\n      this.props.getSpecification(inputParam, this.props.Login.masterData, this.searchRef);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_FILE\", /*#__PURE__*/React.createElement(TestGroupSpecFile, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.deleteRecord,\n        testGroupSpecFile: this.props.Login.masterData.TestGroupSpecFile || [],\n        selectedSpecification: this.props.Login.masterData.SelectedSpecification,\n        addTestFile: this.addFile,\n        editSpecFile: this.props.editSpecFile,\n        filterData: this.state.filterData,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        screenName: \"IDS_FILE\",\n        viewAttachment: this.props.viewAttachment,\n        settings: this.props.Login.settings,\n        masterData: this.props.Login.masterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 916,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_SPECIFICATIONHISTORY\", /*#__PURE__*/React.createElement(SpecificationHistory, {\n        data: this.props.Login.masterData.TestGroupSpecificationHistory,\n        dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], this.state.historyDataState),\n        dataState: this.state.historyDataState,\n        dataStateChange: this.historyDataStateChange // testGroupSpecificationHistory={this.props.Login.masterData.TestGroupSpecificationHistory}\n        // dataState={this.props.Login.screenName === \"IDS_SPECIFICATIONHISTORY\" ? this.state.historyDataState : { skip: 0, take: 10 }}\n        ,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_SPECIFICATIONHISTORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.historyDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], event.dataState),\n        historyDataState: event.dataState\n      });\n    };\n\n    this.addFile = (userInfo, operation, ncontrolCode, screenName, modalName, nflag) => {\n      const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName, nflag);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentRowClick = event => {\n      let masterData = this.props.Login.masterData;\n      masterData[\"SelectedComponent\"] = event.testgroupspecsampletype[0];\n      const inputParam = {\n        testgroupspecsampletype: event.testgroupspecsampletype[0],\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.getTestGroupComponentDetails(inputParam, masterData, this.searchRef);\n    };\n\n    this.deleteTest = deleteParam => {\n      const masterData = this.props.Login.masterData;\n      const testgroupspecification = masterData.SelectedSpecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        const testgrouptest = deleteParam.props.testgrouptest;\n        const inputParam = {\n          inputData: {\n            testgrouptest,\n            userinfo: this.props.Login.userInfo,\n            testgroupspecification,\n            ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\n          },\n          classUrl: \"testgroup\",\n          operation: \"delete\",\n          methodUrl: \"Test\",\n          screenName: \"IDS_TEST\",\n          postParam: {\n            inputListName: \"TestGroupTest\",\n            selectedObject: \"SelectedTest\",\n            primaryKeyField: \"ntestgrouptestcode\",\n            primaryKeyValue: testgrouptest.ntestgrouptestcode,\n            fetchUrl: \"testgroup/getTestGroupTest\",\n            fecthInputObject: {\n              userinfo: this.props.Login.userInfo\n            },\n            masterData,\n            searchFieldList,\n            unchangeList: [\"TestGroupSpecification\", \"SelectedSpecification\", \"SampleType\", \"TreeVersionTemplate\", \"ProductCategory\", \"SelectedTest\", \"Product\", \"AgaramTree\", \"OpenNodes\", \"selectedNode\", \"FocusKey\", \"ActiveKey\", \"SelectedComponent\", \"TestGroupSpecSampleType\"] //, isSingleSelect: true\n\n          }\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_TEST\",\n              operation: \"delete\",\n              selectedRecord: {}\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Default\" || this.props.Login.operation === 'approve' || this.props.Login.operation === 'complete') {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord[\"agree\"] = 4;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional; // selectedRecord[\"sfilename\"] = \"\";\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = event.target.value;\n          const indexKey = Object.keys(optional)[0];\n          const value = Object.values(optional)[0];\n          const treeData = {\n            ntreeversiontempcode: value.ntreeversiontempcode,\n            npositioncode: value.nlevelno - 1,\n            sleveldescription: event.target.value,\n            ntemptranstestgroupcode: value.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: \"\",\n            nnextchildcode: value.schildnode !== null ? value.schildnode : -1,\n            ntemplatemanipulationcode: value.ntemplatemanipulationcode,\n            isreadonly: value.ntemplatemanipulationcode > 0 ? true : false,\n            slevelformat: value.slevelformat\n          };\n          let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\n          treetemplatemanipulation[indexKey] = treeData;\n          selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onFilterComboChange = (comboData, fieldName, caseNo) => {\n      let tempFilterData = this.state.tempFilterData || {};\n      let inputParam = {};\n\n      switch (caseNo) {\n        case 1:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getProductCategory\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 2:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: tempFilterData.nsampletypecode.item,\n              productcategory: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getProduct\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 3:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: tempFilterData.nsampletypecode.item,\n              productcategory: tempFilterData.nproductcatcode.item,\n              product: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getTreeVersionTemplate\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 4:\n          tempFilterData[fieldName] = comboData;\n          this.setState({\n            tempFilterData\n          });\n          break;\n\n        case 5:\n          const selectedRecord = this.state.selectedRecord;\n          selectedRecord[fieldName] = comboData;\n          const TestGroupSpecSampleType = this.props.Login.testGroupInputData.TestGroupSpecSampleType || {};\n          let testGroupSpecSampleType = {};\n\n          if (this.props.Login.screenName === \"IDS_COMPONENT\") {\n            testGroupSpecSampleType = selectedRecord[\"ncomponentcode\"] ? selectedRecord[\"ncomponentcode\"].item : TestGroupSpecSampleType[0].item;\n          } else {\n            testGroupSpecSampleType = this.props.Login.masterData.SelectedComponent;\n          }\n\n          inputParam = {\n            userinfo: this.props.Login.userInfo,\n            testcategory: comboData.item,\n            testgroupspecsampletype: testGroupSpecSampleType,\n            nallottedspeccode: this.props.Login.masterData.SelectedSpecification[\"nallottedspeccode\"],\n            selectedRecord\n          };\n          this.props.changeTestCategory(inputParam, this.props.Login.testGroupInputData);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n\n      if (this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\") {\n        inputParam = this.onSaveTree(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SPECIFICATION\") {\n        inputParam = this.onSaveSpecification(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_COMPONENT\") {\n        inputParam = this.onSaveComponent(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_COPYSPECIFICATION\") {\n        inputParam = this.onSaveCopySpecification(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_TEST\" || this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\") {\n        inputParam = this.onSaveTest(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SPECFILE\") {\n        inputParam = this.onSaveSpecFile(saveType, formRef);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            openModal: true,\n            operation: this.props.Login.operation,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n      }\n    };\n\n    this.onSaveTest = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      let inputData = {};\n      const userinfo = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (operation === \"create\") {\n        const testArray = selectedRecord.ntestcode.map(test => {\n          return test.item;\n        });\n        inputData = {\n          testgroupspecification: masterData.SelectedSpecification,\n          testgroupspecsampletype: [masterData.SelectedComponent],\n          testgrouptest: testArray,\n          userinfo\n        };\n      } else {\n        postParam = {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: masterData.SelectedTest ? masterData.SelectedTest.ntestgrouptestcode : 0,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          searchFieldList,\n          changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\", \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"],\n          isSingleSelect: true\n        };\n        let testgrouptestfile = null;\n        let testGroupFile = selectedRecord.ntestfilecode;\n\n        if (testGroupFile) {\n          testGroupFile = testGroupFile.item;\n          testgrouptestfile = {\n            nlinkcode: testGroupFile.nlinkcode,\n            nattachmenttypecode: testGroupFile.nattachmenttypecode,\n            sdescription: testGroupFile.sdescription,\n            ssystemfilename: testGroupFile.ssystemfilename,\n            dcreateddate: testGroupFile.dcreateddate,\n            nfilesize: testGroupFile.nfilesize,\n            ntestgroupfilecode: selectedRecord.ntestgroupfilecode,\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            sfilename: testGroupFile.sfilename,\n            nstatus: transactionStatus.ACTIVE\n          };\n        }\n\n        inputData = {\n          testgroupspecification: masterData.SelectedSpecification,\n          testgrouptest: {\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            nsectioncode: selectedRecord.nsectioncode.value,\n            nsourcecode: selectedRecord.nsourcecode.value,\n            nmethodcode: selectedRecord.nmethodcode ? selectedRecord.nmethodcode.value : transactionStatus.NA,\n            ninstrumentcatcode: selectedRecord.ninstrumentcatcode ? selectedRecord.ninstrumentcatcode.value : transactionStatus.NA,\n            stestsynonym: selectedRecord.stestsynonym,\n            ncost: selectedRecord.ncost,\n            nsorter: selectedRecord.nsorter,\n            nspecsampletypecode: selectedRecord.nspecsampletypecode\n          },\n          testgrouptestfile,\n          userinfo\n        };\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Test\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveTree = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n      let inputData = {\n        userinfo: this.props.Login.userInfo\n      };\n\n      if (operation === \"update\") {\n        const selectedNode = this.props.Login.masterData.selectedNode;\n        inputData[\"treetemplatemanipulation\"] = {\n          ntemplatemanipulationcode: selectedRecord.ntemplatemanipulationcode,\n          sleveldescription: selectedRecord.sleveldescription,\n          nsampletypecode: selectedNode.nsampletypecode,\n          ntreeversiontempcode: selectedNode.ntreeversiontempcode,\n          nproductcatcode: selectedNode.nproductcatcode,\n          nproductcode: selectedNode.nproductcode\n        };\n        inputData[\"selectednode\"] = this.props.Login.masterData.ActiveKey;\n      } else {\n        const TreetempTranstestGroup = this.props.Login.TreetempTranstestGroup;\n        const filterData = this.state.filterData;\n        const selectedRecord = this.state.selectedRecord;\n        let treetemplatemanipulation = [];\n        let tempArray = filterRecordBasedOnTwoArrays(TreetempTranstestGroup, selectedRecord.treetemplatemanipulation, \"ntemptranstestgroupcode\");\n        tempArray.map(item => {\n          const treeData = {\n            ntreeversiontempcode: item.ntreeversiontempcode,\n            npositioncode: item.nlevelno - 1,\n            sleveldescription: item.sleveldescription,\n            ntemptranstestgroupcode: item.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: \"\",\n            nnextchildcode: item.schildnode,\n            ntemplatemanipulationcode: item.ntemplatemanipulationcode,\n            isreadonly: item.ntemplatemanipulationcode > 0 ? true : false,\n            slevelformat: item.slevelformat\n          };\n          return treetemplatemanipulation.push(treeData);\n        });\n        selectedRecord.treetemplatemanipulation.map(item => {\n          const treeTemplateManip = TreetempTranstestGroup.filter(temp => temp.ntemptranstestgroupcode === item.ntemptranstestgroupcode);\n\n          if (treeTemplateManip.length > 0) {\n            item[\"ntemplatemanipulationcode\"] = treeTemplateManip[\"ntemplatemanipulationcode\"];\n          } else {\n            item[\"ntemplatemanipulationcode\"] = 0;\n          }\n\n          return treetemplatemanipulation.push(item);\n        });\n        inputData[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n        inputData[\"sampletype\"] = filterData.nsampletypecode.item;\n        inputData[\"ncategorycode\"] = filterData.nproductcatcode.value;\n        inputData[\"nproductcode\"] = filterData.nproductcatcode.item.ncategorybasedflow == transactionStatus.YES ? -1 : filterData.nproductcode.value ? filterData.nproductcode.value : -1;\n        inputData[\"ntreeversiontempcode\"] = filterData.ntreeversiontempcode.value;\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Tree\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecification = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n      let testGroupSpec = {\n        napproveconfversioncode: -1,\n        sversion: '',\n        napprovalstatus: transactionStatus.DRAFT,\n        nstatus: transactionStatus.ACTIVE,\n        ntransactionstatus: selectedRecord[\"ntransactionstatus\"],\n        ncomponentrequired: selectedRecord[\"ncomponentrequired\"],\n        nprojectcode: selectedRecord[\"nprojectcode\"] ? selectedRecord[\"nprojectcode\"] : -1,\n        sspecname: selectedRecord[\"sspecname\"],\n        dexpirydate: selectedRecord[\"dexpirydate\"],\n        nallottedspeccode: selectedRecord[\"nallottedspeccode\"] ? selectedRecord[\"nallottedspeccode\"] : 0,\n        ntzexpirydate: selectedRecord[\"ntzexpirydate\"].value,\n        stzexpirydate: selectedRecord[\"ntzexpirydate\"].label\n      };\n      const dexpirydate = testGroupSpec[\"dexpirydate\"]; //need this conversion when the datatype of the field is 'Instant'\n\n      testGroupSpec[\"dexpirydate\"] = formatInputDate(dexpirydate, false);\n\n      if (operation === \"create\") {\n        testGroupSpec[\"ntemplatemanipulationcode\"] = this.props.Login.masterData.selectedNode.ntemplatemanipulationcode;\n      }\n\n      let ntreeversiontempcode = this.state.filterData.ntreeversiontempcode.value;\n      const inputData = {\n        userinfo: this.props.Login.userInfo,\n        testgroupspecification: testGroupSpec,\n        treetemplatemanipulation: this.props.Login.masterData.selectedNode,\n        selectedspecification: this.props.Login.masterData.SelectedSpecification,\n        ntreeversiontempcode: ntreeversiontempcode\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Specification\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveComponent = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      const testArray = selectedRecord.ntestcode.map(test => {\n        return test.item;\n      });\n      const inputData = {\n        testgroupspecification: masterData.SelectedSpecification,\n        testgroupspecsampletype: [selectedRecord.ncomponentcode.item],\n        testgrouptest: testArray,\n        userinfo: this.props.Login.userInfo\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Component\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let specFileArray = [];\n      const selectedSpecification = this.props.Login.masterData.SelectedSpecification;\n      let specFile = {\n        nallottedspeccode: selectedSpecification.nallottedspeccode,\n        nspecfilecode: selectedRecord.nspecfilecode ? selectedRecord.nspecfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, specFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name;\n            tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            specFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          specFile[\"sfilename\"] = selectedRecord.sfilename;\n          specFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n          specFile[\"nlinkcode\"] = transactionStatus.NA;\n          specFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          specFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          specFileArray.push(specFile);\n        }\n      } else {\n        specFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\n        specFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\n        specFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        specFile[\"ssystemfilename\"] = \"\";\n        specFile[\"nfilesize\"] = 0;\n        specFileArray.push(specFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"testgroupspecification\", JSON.stringify(selectedSpecification));\n      formData.append(\"testgroupspecfile\", JSON.stringify(specFileArray));\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        classUrl: \"testgroup\",\n        saveType,\n        formRef,\n        methodUrl: \"SpecificationFile\"\n      };\n      return inputParam;\n    };\n\n    this.deleteSpecRecord = deleteParam => {\n      const selectedRecord = deleteParam.selectedRecord;\n\n      if (selectedRecord.napprovalstatus === transactionStatus.DRAFT || selectedRecord.napprovalstatus === transactionStatus.CORRECTION) {\n        this.deleteRecord(deleteParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (this.props.Login.masterData.selectedNode) {\n        const methodUrl = deleteParam.methodUrl;\n        let dataState = this.state.componentDataState;\n        const screenName = deleteParam.screenName;\n        const inputParam = {\n          inputData: {\n            [deleteParam.keyName]: deleteParam.selectedRecord,\n            userinfo: this.props.Login.userInfo,\n            testgroupspecification: this.props.Login.masterData.SelectedSpecification,\n            treetemplatemanipulation: this.props.Login.masterData.selectedNode,\n            ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\n          },\n          classUrl: \"testgroup\",\n          operation: deleteParam.operation,\n          methodUrl: methodUrl,\n          screenName,\n          dataState\n        };\n        const masterData = this.props.Login.masterData; //if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: screenName,\n              operation: deleteParam.operation,\n              selectedRecord: {}\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPROFILENODE\"\n        }));\n      }\n    };\n\n    this.deleteMultipleRecord = deleteParam => {\n      const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n\n      if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n        const inputParam = {\n          inputData: {\n            testgroupspecsampletype: deleteParam.props.testgroupspecsampletype,\n            userinfo: this.props.Login.userInfo,\n            testgroupspecification,\n            treetemplatemanipulation: this.props.Login.masterData.selectedNode\n          },\n          classUrl: \"testgroup\",\n          operation: \"delete\",\n          methodUrl: \"TestGroupComponent\",\n          screenName: \"IDS_COMPONENT\"\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_COMPONENT\",\n              operation: \"delete\",\n              selectedRecord: {}\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    };\n\n    this.onDropSpecFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.validateTestGroupComplete = (operation, inputValue, ncontrolCode) => {\n      if (inputValue.testgroupspecification) {\n        if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          return rsapi.post(\"testgroup/validateTestGroupComplete\", {\n            nallottedspeccode: inputValue.testgroupspecification.nallottedspeccode,\n            \"userinfo\": this.props.Login.userInfo\n          }).then(response => {\n            if (response.data && response.data.length > 0) {\n              const inactiveTestArray = [];\n              response.data.map(item => inactiveTestArray.indexOf(item.stestname) === -1 ? inactiveTestArray.push(item.stestname) : \"\");\n              const data = \" [\" + inactiveTestArray + \"] \" + this.props.intl.formatMessage({\n                id: \"IDS_INACTIVETESTSATCOMPLETE\"\n              });\n              this.confirmMessage.confirm(this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CONFIRMATION\"\n              }), data, this.props.intl.formatMessage({\n                id: \"IDS_OK\"\n              }), this.props.intl.formatMessage({\n                id: \"IDS_CANCEL\"\n              }), () => this.completeSpecification(operation, inputValue, ncontrolCode), false, undefined);\n            } else {\n              this.completeSpecification(operation, inputValue, ncontrolCode);\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.error(this.props.intl.formatMessage({\n                id: error.message\n              }));\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: error.response\n              }));\n            }\n          });\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.retireSpec = (operation, selectedSpecification, approvalRoleActionDetail, retireSpecId) => {\n      if (selectedSpecification.testgroupspecification.napprovalstatus !== transactionStatus.RETIRED) {\n        if (approvalRoleActionDetail.length > 0 && approvalRoleActionDetail[0].nlevelno === transactionStatus.ACTIVE) {\n          if (selectedSpecification.testgroupspecification[\"napprovalstatus\"] === approvalRoleActionDetail[0].ntransactionstatus) {\n            const inputParam = {\n              inputData: {\n                nallottedspeccode: selectedSpecification.testgroupspecification,\n                treetemplatemanipulation: selectedSpecification.treetemplatemanipulation,\n                approvalRoleActionDetail: approvalRoleActionDetail[0],\n                userinfo: this.props.Login.userInfo,\n                operation: operation\n              },\n              classUrl: \"testgroup\",\n              operation: operation,\n              methodUrl: \"Spec\",\n              screenName: \"IDS_STUDYPLAN\"\n            };\n            let masterData = this.props.Login.masterData;\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, retireSpecId)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  openModal: true,\n                  screenName: \"IDS_STUDYPLAN\",\n                  operation: operation,\n                  selectedRecord: {}\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.retireSpecification(inputParam.inputData, masterData);\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_RETIRECANBECONEAFTERFINAL\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FINALLEVELAPPROVE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ALREADYRETIRED\"\n        }));\n      }\n    };\n\n    this.specificationReport = (operation, ncontrolCode) => {\n      if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\n        const inputParam = {\n          inputData: {\n            sprimarykeyname: 'nallottedspeccode',\n            userinfo: this.props.Login.userInfo,\n            ncontrolcode: ncontrolCode,\n            nregtypecode: transactionStatus.NA,\n            nregsubtypecode: transactionStatus.NA,\n            nreportmodulecode: transactionStatus.NA,\n            nreporttypecode: REPORTTYPE.CONTROLBASED,\n            nreportdecisiontypecode: transactionStatus.NA,\n            certificatetypecode: transactionStatus.NA,\n            nsectioncode: transactionStatus.NA,\n            operation: operation,\n            nallottedspeccode: this.props.Login.masterData['SelectedSpecification']['nallottedspeccode'],\n            selectedComponent: this.props.Login.masterData[\"SelectedComponent\"],\n            selectedTest: this.props.Login.masterData[\"SelectedTest\"],\n            filterData: this.state.filterData\n          }\n        };\n        this.props.reportSpecification(inputParam['inputData']);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\"\n        }));\n      }\n    };\n\n    this.completeSpecification = (operation, inputValue, ncontrolCode) => {\n      if (inputValue.testgroupspecification) {\n        if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\n              testGroupTest: this.props.Login.masterData.TestGroupTest,\n              ...inputValue\n            },\n            classUrl: \"testgroup\",\n            operation: operation,\n            methodUrl: \"Specification\",\n            screenName: \"IDS_SPECIFICATION\"\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: \"IDS_SPECIFICATION\",\n                operation: operation,\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.approveSpecification = (status, needEsign) => {\n      const masterData = this.props.Login.masterData;\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          treetemplatemanipulation: masterData.selectedNode,\n          ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\n          testgroupspecification: { ...masterData.SelectedSpecification,\n            napprovalstatus: status\n          }\n        },\n        classUrl: \"testgroup\",\n        operation: \"approve\",\n        methodUrl: \"Specification\",\n        screenName: \"IDS_SPECIFICATION\"\n      };\n\n      if (needEsign === transactionStatus.YES) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SPECIFICATION\",\n            operation: \"approve\",\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo, optional) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"ntestcode\") {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          } else {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          }\n\n          break;\n\n        case 2:\n          selectedRecord[\"parameterTypeCode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 3:\n          selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    const componentDataState = {\n      skip: 0,\n      take: 10\n    };\n    const historyDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      selectedRecord: {},\n      filterData: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      componentDataState,\n      historyDataState,\n      tempFilterData: {},\n      showTest: false,\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[12] : 5\n    };\n    this.componentBreadcrumbs = [];\n    this.breadCrumbData = [];\n    this.searchRef = React.createRef();\n    this.specSubField = [{\n      [designProperties.VALUE]: \"stransdisplaystatus\"\n    }, {\n      [designProperties.VALUE]: \"sapprovalstatus\",\n      [designProperties.COLOUR]: true\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  render() {\n    const {\n      TestGroupSpecification,\n      SelectedSpecification,\n      SelectedTest,\n      AgaramTree,\n      OpenNodes,\n      selectedNode,\n      FocusKey,\n      ActiveKey,\n      SelectedComponent,\n      TestGroupTest,\n      TestGroupSpecSampleType,\n      searchedData,\n      TestGroupTestParameter\n    } = this.props.Login.masterData; // const deleteTree = {\n    //     methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\n    //     userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\"\n    // };\n\n    const testGroupTestData = searchedData || TestGroupTest || [];\n\n    if (TestGroupTestParameter) {\n      sortData(TestGroupTestParameter, \"ascending\", \"nsorter\");\n    }\n\n    if (testGroupTestData) {\n      sortData(testGroupTestData, \"ascending\", \"nsorter\");\n    }\n\n    const getComponent = {\n      screenName: \"IDS_COMPONENT\",\n      operation: \"get\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"TestGroupComponent\",\n      keyName: \"testgroupspecification\"\n    };\n    const addSpecParam = {\n      testgroupspecification: SelectedSpecification,\n      selectedRecord: this.state.filterData,\n      userInfo: this.props.Login.userInfo,\n      selectedNode\n    };\n    const editSpecParam = {\n      selectedRecord: this.state.filterData,\n      userinfo: this.props.Login.userInfo,\n      selectedNode\n    };\n    const specDeleteParam = {\n      operation: \"delete\",\n      methodUrl: \"Specification\",\n      screenName: \"IDS_SPECIFICATION\",\n      keyName: \"testgroupspecification\",\n      filterData: this.state.filterData\n    };\n    const addSpecId = this.state.controlMap.has(\"AddSpecification\") && this.state.controlMap.get(\"AddSpecification\").ncontrolcode;\n    const addTreeId = this.state.controlMap.has(\"AddTree\") && this.state.controlMap.get(\"AddTree\").ncontrolcode;\n    const editTreeId = this.state.controlMap.has(\"EditTree\") && this.state.controlMap.get(\"EditTree\").ncontrolcode;\n    const deleteTreeId = this.state.controlMap.has(\"DeleteTree\") && this.state.controlMap.get(\"DeleteTree\").ncontrolcode;\n    const editSpecId = this.state.controlMap.has(\"EditSpecification\") && this.state.controlMap.get(\"EditSpecification\").ncontrolcode;\n    const deleteSpecId = this.state.controlMap.has(\"DeleteSpecification\") && this.state.controlMap.get(\"DeleteSpecification\").ncontrolcode;\n    const addComponentId = this.state.controlMap.has(\"AddComponent\") && this.state.controlMap.get(\"AddComponent\").ncontrolcode;\n    const deleteComponentId = this.state.controlMap.has(\"DeleteComponent\") && this.state.controlMap.get(\"DeleteComponent\").ncontrolcode;\n    const addTestId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\n    const deleteTestId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\n    const editTestId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\n    const viewFileId = this.state.controlMap.has(\"ViewTestFile\") && this.state.controlMap.get(\"ViewTestFile\").ncontrolcode;\n    const confirmMessage = new ConfirmMessage();\n    const deleteTree = {\n      methodUrl: \"Tree\",\n      operation: \"delete\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      screenName: \"IDS_TREE\",\n      ncontrolCode: deleteTreeId,\n      filterData: this.state.filterData\n    };\n    const getTest = {\n      screenName: \"IDS_TEST\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"TestGroupTest\",\n      keyName: \"ntestgrouptestcode\"\n    };\n    const filterParam = {\n      inputListName: \"TestGroupTest\",\n      selectedObject: \"SelectedTest\",\n      primaryKeyField: \"ntestgrouptestcode\",\n      fetchUrl: \"testgroup/getTestGroupTest\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList,\n      changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\", \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"],\n      isSingleSelect: true\n    };\n    const specMandatoryFields = [];\n    const compMandatoryFields = [];\n    const editTestMandatoryFields = [];\n    const addTestMandatoryFields = [];\n    specificationColumnList.forEach(item => item.mandatory === true ? specMandatoryFields.push(item) : \"\");\n    componentColumnList.forEach(item => item.mandatory === true ? compMandatoryFields.push(item) : \"\");\n    editTestColumnList.forEach(item => item.mandatory === true ? editTestMandatoryFields.push(item) : \"\");\n    addTestColumnList.forEach(item => item.mandatory === true ? addTestMandatoryFields.push(item) : \"\");\n\n    if (this.props.Login.masterData && Object.values(this.props.Login.masterData).length > 0) {\n      if (selectedNode && selectedNode.sleveldescription) {\n        // this.componentBreadcrumbs[0] = this.props.intl.formatMessage({ id: \"IDS_PROFILETREE\" }) + \": \" + selectedNode.sleveldescription;\n        const splitNode = this.props.Login.masterData.ActiveKey.split('/');\n        let treeNodeNames = [];\n        splitNode.forEach(nodeItem => {\n          this.props.Login.masterData.TreeTemplateManipulation.forEach(treeItem => {\n            if (treeItem.ntemplatemanipulationcode === parseInt(nodeItem)) treeNodeNames.push(treeItem.sleveldescription);\n          });\n        }); // this.componentBreadcrumbs[0] = treeNodeNames;\n\n        this.componentBreadcrumbs = treeNodeNames;\n\n        if (SelectedSpecification && SelectedSpecification !== null && SelectedSpecification.sspecname) {\n          // this.componentBreadcrumbs[1] = this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" }) + \": \" + SelectedSpecification.sspecname;\n          this.componentBreadcrumbs.push(SelectedSpecification.sspecname);\n\n          if (SelectedComponent && SelectedComponent !== null && SelectedComponent.ncomponentcode !== -1) {\n            // this.componentBreadcrumbs[2] = this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }) + \": \" + SelectedComponent.scomponentname;\n            this.componentBreadcrumbs.push(SelectedComponent.scomponentname);\n          } else {// delete this.componentBreadcrumbs[2];\n          }\n        } else {// delete this.componentBreadcrumbs[1];\n        }\n      } else {\n        this.componentBreadcrumbs = []; // delete this.componentBreadcrumbs[0];\n      }\n    }\n\n    this.confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip-list-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }\n    }, this.breadCrumbData && this.breadCrumbData.length > 0 && /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: 30,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.showModalBg ? 'show_modal_bg' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky_head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SearchAdd, {\n      className: \"border fixed_ico_list title_grp_custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_PROFILETREE\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon_group_right_aligned\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(AdvFilter, {\n      filterComponent: [{\n        \"IDS_SAMPLEFILTER\": /*#__PURE__*/React.createElement(SampleFilter, {\n          sampleType: this.state.sampleType,\n          treeVersionTemplate: this.state.treeVersionTemplate,\n          productCategory: this.state.productCategory,\n          product: this.state.product,\n          onFilterComboChange: this.onFilterComboChange,\n          tempFilterData: this.state.tempFilterData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 61\n          }\n        }),\n        needActionStrip: false\n      }],\n      onFilterSubmit: this.onFilterSumbit,\n      showModalBg: e => this.setState({\n        showModalBg: e\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue mr-1\",\n      role: \"button\",\n      hidden: this.state.userRoleControlRights.indexOf(addTreeId) === -1,\n      onClick: () => this.props.createTree(this.state.filterData, this.props.Login.userInfo, selectedNode, addTreeId),\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }),\n      \"data-for\": \"tooltip-list-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr0 mr-1\",\n      name: \"edittestname\",\n      hidden: this.state.userRoleControlRights.indexOf(editTreeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip-list-wrap\",\n      onClick: () => this.props.editTree(\"update\", selectedNode, this.props.Login.userInfo, editTreeId, this.state.filterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteLink\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteTreeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip-list-wrap\",\n      className: \"btn btn-circle outline-grey \",\n      onClick: () => this.ConfirmDelete({ ...deleteTree\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey ml-1\",\n      variant: \"link\",\n      onClick: () => this.reloadData(),\n      \"data-for\": \"tooltip-list-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSync,\n      style: {\n        \"width\": \"0.6!important\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 57\n      }\n    })))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky_head_scroll_body\",\n      style: {\n        \"height\": this.state.parentHeight\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormTreeMenu, {\n      data: AgaramTree,\n      hasSearch: false,\n      handleTreeClick: this.onTreeClick,\n      initialOpenNodes: OpenNodes,\n      focusKey: FocusKey || \"\",\n      activeKey: ActiveKey || \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(TransactionListMaster, {\n      notSearchable: true,\n      titleHead: this.props.intl.formatMessage({\n        id: \"IDS_SPECIFICATION\"\n      }),\n      titleClasses: \"title_grp_custom fixed_ico_list\",\n      masterList: TestGroupSpecification || [],\n      selectedMaster: [SelectedSpecification],\n      needMultiSelect: false,\n      primaryKeyField: \"nallottedspeccode\",\n      getMasterDetail: spec => this.props.getComponentBySpecId({ ...getComponent,\n        selectedRecord: spec,\n        historyDataState: this.state.historyDataState\n      }, this.props.Login.masterData, this.searchRef),\n      mainField: \"sspecname\",\n      selectedListName: \"testgroupspecification\",\n      objectName: \"testgroupspecification\",\n      listName: \"IDS_SPECIFICATION\",\n      onFilterSumbit: this.onFilterSumbit,\n      subFields: this.specSubField,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(editSpecId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.props.addSpecification(\"update\", { ...editSpecParam,\n          ...props\n        }, editSpecId)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteSpecId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteSpecRecord({\n          props,\n          ...specDeleteParam,\n          selectedRecord: SelectedSpecification,\n          ncontrolCode: deleteSpecId\n        }))\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addSpecId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-list-wrap\",\n        onClick: () => this.props.addSpecification(\"create\", { ...addSpecParam\n        }, addSpecId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 61\n        }\n      }))),\n      hideSearch: false,\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 45\n      }\n    }), SelectedSpecification && SelectedSpecification.ncomponentrequired === transactionStatus.YES && /*#__PURE__*/React.createElement(TransactionListMaster, {\n      notSearchable: true,\n      titleHead: this.props.intl.formatMessage({\n        id: \"IDS_COMPONENT\"\n      }),\n      titleClasses: \"title_grp_custom fixed_ico_list\",\n      masterList: TestGroupSpecSampleType || [],\n      selectedMaster: [SelectedComponent],\n      needMultiSelect: false,\n      primaryKeyField: \"nspecsampletypecode\",\n      getMasterDetail: event => this.componentRowClick(event),\n      mainField: \"scomponentname\",\n      selectedListName: \"testgroupspecsampletype\",\n      objectName: \"testgroupspecsampletype\",\n      listName: \"IDS_COMPONENT\",\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        controlname: \"faTrashAlt\",\n        objectName: \"testgroupspecsampletype\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteComponentId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteMultipleRecord({\n          props,\n          ncontrolCode: deleteComponentId\n        }))\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addComponentId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-list-wrap\" // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        ,\n        onClick: () => this.props.addComponent(SelectedSpecification, this.props.Login.userInfo, addComponentId),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 65\n        }\n      }))),\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 49\n      }\n    })))), /*#__PURE__*/React.createElement(SplitterLayout, {\n      vertical: true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      secondaryInitialSize: 400,\n      customClassName: \"fixed_list_height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 41\n      }\n    }, this.componentBreadcrumbs && this.componentBreadcrumbs.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"component_breadcrumbs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 53\n      }\n    }, this.componentBreadcrumbs.map(item => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 68\n        }\n      }, item);\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      hidden: !this.state.showTest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 65\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showSpecAndTestInfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 65\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SPECINFO\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      masterList: searchedData || TestGroupTest || [],\n      selectedMaster: [SelectedTest],\n      primaryKeyField: \"ntestgrouptestcode\",\n      getMasterDetail: this.props.getTestGroupDetails,\n      inputParam: getTest,\n      additionalParam: [],\n      mainField: \"stestname\",\n      selectedListName: \"SelectedTest\",\n      objectName: \"testgrouptest\",\n      listName: \"IDS_TEST\",\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      subFields: testSubFields,\n      moreField: testMoreFields,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faCloudDownloadAlt\",\n        objectName: \"selectedTest\",\n        hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.viewTestFile(props),\n        needConditionalIcon: true,\n        conditionalIconFunction: this.fileViewIcon\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faExternalLinkAlt\",\n        objectName: \"selectedTest\",\n        hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.viewTestFile(props),\n        needConditionalIcon: true,\n        conditionalIconFunction: this.linkViewIcon\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(editTestId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.props.editTestGroupTest(\"update\", props.SelectedTest[0], this.props.Login.userInfo, editTestId, SelectedSpecification, this.state.filterData)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"testgrouptest\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteTestId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteTest({\n          props,\n          ncontrolCode: deleteTestId,\n          filterData: this.state.filterData\n        }))\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addTestId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-list-wrap\",\n        onClick: () => this.props.addTestGroupTest(SelectedComponent, this.props.Login.userInfo, addTestId, SelectedSpecification, this.state.filterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 73\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 77\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 61\n      }\n    }))), TestGroupTestParameter && TestGroupTestParameter.length > 0 && /*#__PURE__*/React.createElement(Card, {\n      body: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(TestGroupTestTab, {\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenName: this.props.Login.screenName,\n      openChildModal: this.props.Login.openChildModal,\n      operation: this.props.Login.operation,\n      loadEsign: this.props.Login.loadEsign,\n      testGroupInputData: this.props.Login.testGroupInputData,\n      parameterData: this.props.Login.parameterData,\n      selectedRecord: this.state.selectedRecord,\n      screenData: this.props.Login.screenData,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      controlMap: this.state.controlMap,\n      testGroupCheckList: this.props.Login.testGroupCheckList,\n      openTemplateModal: this.props.Login.openTemplateModal,\n      editTestGroupTest: this.props.editTestGroupTest,\n      updateStore: this.props.updateStore,\n      crudMaster: this.props.crudMaster,\n      getTestGroupParameter: this.props.getTestGroupParameter,\n      editTestGroupParameter: this.props.editTestGroupParameter,\n      filterData: this.state.filterData,\n      addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n      validateEsignCredential: this.props.validateEsignCredential,\n      filterColumnData: this.props.filterColumnData,\n      viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 61\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      hidden: this.state.showTest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 65\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SPECIFICATIONINFO\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\"\n      },\n      onClick: () => this.showSpecAndTestInfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 65\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedSpecification: this.props.Login.masterData.SelectedSpecification,\n      userInfo: this.props.Login.userInfo,\n      selectedNode: this.props.Login.masterData.selectedNode,\n      selectedRecord: this.state.filterData,\n      approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n      screenName: \"IDS_SPECIFICATIONINFO\",\n      deleteRecord: this.deleteRecord,\n      addSpecification: this.props.addSpecification,\n      filterData: this.state.filterData //completeSpecification={this.completeSpecification}\n      ,\n      completeSpecification: this.validateTestGroupComplete,\n      approveSpecification: this.approveSpecification,\n      specificationReport: this.specificationReport,\n      retireSpec: this.retireSpec,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 61\n      }\n    }))), /*#__PURE__*/React.createElement(Card, {\n      body: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 57\n      }\n    }))))))))))), this.props.Login.openModal && this.props.Login.screenName && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.onSaveClick,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_SPECFILE\" ? this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord) : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? specMandatoryFields : this.props.Login.screenName === \"IDS_COMPONENT\" ? compMandatoryFields : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? editTestMandatoryFields : this.props.Login.screenName === \"IDS_TEST\" ? addTestMandatoryFields : this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\" ? this.props.Login.treeMandatoryFields : [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? /*#__PURE__*/React.createElement(AddTestGroupSpecification, {\n        selectedRecord: this.state.selectedRecord || {},\n        timeZoneList: this.props.Login.timeZoneList,\n        onInputOnChange: this.onInputOnChange,\n        handleDateChange: this.handleDateChange,\n        onComboChange: this.onComboChange,\n        screenName: this.props.Login.screenName,\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === \"IDS_COMPONENT\" ? /*#__PURE__*/React.createElement(AddTestGroupTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 713,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_PROFILETREE\" ? /*#__PURE__*/React.createElement(AddProfileTree, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        treetempTranstestGroup: this.props.Login.TreetempTranstestGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === \"IDS_SPECFILE\" ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        actionType: this.state.actionType,\n        onDrop: this.onDropSpecFile,\n        deleteAttachment: this.deleteAttachment,\n        linkMaster: this.props.Login.linkMaster,\n        editFiles: this.props.Login.editFiles,\n        maxSize: 20,\n        maxFiles: this.props.Login.operation === \"update\" ? 1 : 3,\n        multiple: this.props.Login.operation === \"update\" ? false : true,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SPECFILE\"\n        }),\n        hideDefaultToggle: true,\n        name: \"specfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === \"IDS_EDITTREE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 743,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"sleveldescription\",\n        label: this.state.selectedRecord.slabelname,\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event, 1),\n        placeholder: this.state.selectedRecord.slabelname,\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sleveldescription\"] : \"\",\n        isMandatory: \"*\",\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 57\n        }\n      }))) : this.props.Login.screenName === \"IDS_TEST\" ? /*#__PURE__*/React.createElement(AddTestGroupTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? /*#__PURE__*/React.createElement(EditTestGroupTest, {\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 57\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord) {\n    let mandyFields = [];\n\n    if (screenName === \"IDS_SPECFILE\") {\n      if (selectedRecord && selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        //if (this.props.Login.operation === 'update') {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }]; // }\n      }\n    } else {\n      return [];\n    }\n\n    let finalMandyFields = [];\n    mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\n    return finalMandyFields;\n  }\n\n  showSpecAndTestInfo() {\n    this.setState({\n      showTest: !this.state.showTest\n    });\n  }\n\n  generateBreadCrumData(filterData) {\n    if (filterData && Object.values(filterData).length > 0 && filterData.nsampletypecode && filterData.nsampletypecode.item) {\n      this.breadCrumbData = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n      }, {\n        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\n        \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\n      }, {\n        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCT\" : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : \"\",\n        \"value\": filterData.nproductcode ? filterData.nproductcode.label : \"\"\n      }, {\n        \"label\": \"IDS_TREETEMPLATEVERSION\",\n        \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\n      }];\n    }\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let selectedRecord = this.state.selectedRecord;\n    let filterData = this.state.filterData || {};\n    let isStateChanged = false;\n    let tempFilterData = this.state.tempFilterData || {};\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.tempFilterData !== previousProps.Login.tempFilterData) {\n      tempFilterData = this.props.Login.tempFilterData || {};\n      isStateChanged = true;\n    }\n\n    let sampleType = this.state.sampleType || [];\n\n    if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n      const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsampletypecode\", \"ascending\", false);\n      sampleType = sampleTypeMap.get(\"OptionList\");\n      tempFilterData[\"nsampletypecode\"] = sampleType.length ? sampleType[0] : \"\";\n      isStateChanged = true;\n    }\n\n    let productCategory = this.state.productCategory || [];\n\n    if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\n      const productCatMap = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", \"nproductcatcode\", \"ascending\", false);\n      productCategory = productCatMap.get(\"OptionList\");\n      tempFilterData[\"nproductcatcode\"] = productCategory.length > 0 ? productCategory[0] : \"\";\n      isStateChanged = true;\n    }\n\n    let product = this.state.product || [];\n\n    if (this.props.Login.masterData.Product !== previousProps.Login.masterData.Product) {\n      const productMap = constructOptionList(this.props.Login.masterData.Product || [], \"nproductcode\", \"sproductname\", \"nproductcode\", \"ascending\", false);\n      product = productMap.get(\"OptionList\");\n      tempFilterData[\"nproductcode\"] = product.length > 0 ? product[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let treeVersionTemplate = this.state.treeVersionTemplate || [];\n\n    if (this.props.Login.masterData.TreeVersionTemplate !== previousProps.Login.masterData.TreeVersionTemplate) {\n      const templateMap = constructOptionList(this.props.Login.masterData.TreeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", \"ntreeversiontempcode\", \"ascending\", false);\n      treeVersionTemplate = templateMap.get(\"OptionList\");\n      tempFilterData[\"ntreeversiontempcode\"] = treeVersionTemplate.length > 0 ? treeVersionTemplate[treeVersionTemplate.length - 1] : \"\";\n      isStateChanged = true;\n    } // if (this.props.Login.masterData.TestGroupTestParameter && this.props.Login.masterData.TestGroupTestParameter !== previousProps.Login.masterData.TestGroupTestParameter) {\n    //     sortData(this.props.Login.masterData.TestGroupTestParameter, \"ascending\", \"nsorter\");\n    // }\n    // if (this.props.Login.masterData.TestGroupTesT && this.props.Login.masterData.TestGroupTesT !== previousProps.Login.masterData.TestGroupTesT) {\n    //     sortData(this.props.Login.masterData.TestGroupTesTest, \"ascending\", \"nsorter\");\n    // }\n\n\n    let userRoleControlRights = this.state.userRoleControlRights || [];\n    let controlMap = this.state.controlMap || [];\n\n    if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const nformCode = this.props.Login.userInfo.nformcode;\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\n      filterData = { ...tempFilterData\n      };\n      this.generateBreadCrumData(filterData);\n    }\n\n    if (this.props.Login.filterData !== previousProps.Login.filterData) {\n      filterData = { ...this.props.Login.filterData\n      };\n      this.generateBreadCrumData(filterData);\n      isStateChanged = true;\n    } // else if (filterData !== previousState.filterData) {\n    //     filterData = { ...tempFilterData };\n    //     this.generateBreadCrumData(filterData);\n    // }\n\n\n    let historyDataState = this.state.historyDataState;\n\n    if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n      historyDataState = this.props.Login.historyDataState;\n      isStateChanged = true;\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        selectedRecord,\n        tempFilterData,\n        filterData,\n        userRoleControlRights,\n        controlMap,\n        sampleType,\n        productCategory,\n        product,\n        treeVersionTemplate,\n        historyDataState\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  filterTestGroup,\n  createTree,\n  editTree,\n  sampleTypeOnChange,\n  getTestGroupDetails,\n  validateEsignCredential,\n  updateStore,\n  addSpecification,\n  getSpecification,\n  addComponent,\n  changeTestCategory,\n  addTestGroupTest,\n  editTestGroupTest,\n  getTestGroupParameter,\n  editTestGroupParameter,\n  addTestFile,\n  editSpecFile,\n  getSpecificationDetails,\n  addTestGroupCodedResult,\n  getComponentBySpecId,\n  filterColumnData,\n  viewAttachment,\n  viewTestGroupCheckList,\n  getTestGroupComponentDetails,\n  filterTransactionList,\n  reportSpecification,\n  retireSpecification\n})(injectIntl(TestGroup));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/testgroup/TestGroup.jsx"],"names":["React","Component","connect","injectIntl","rsapi","toast","Row","Col","Card","Button","Nav","PerfectScrollbar","FontAwesomeIcon","faPencilAlt","faPlus","faSync","SplitterLayout","faEye","faTrashAlt","process","SlideOutModal","Esign","callService","crudMaster","filterTestGroup","createTree","editTree","getTestGroupDetails","sampleTypeOnChange","validateEsignCredential","updateStore","addSpecification","getSpecification","addComponent","changeTestCategory","addTestGroupTest","editTestGroupTest","getTestGroupParameter","editTestGroupParameter","addTestFile","editSpecFile","getSpecificationDetails","addTestGroupCodedResult","getComponentBySpecId","filterColumnData","viewAttachment","viewTestGroupCheckList","getTestGroupComponentDetails","filterTransactionList","reportSpecification","retireSpecification","constructOptionList","formatInputDate","create_UUID","deleteAttachmentDropZone","filterRecordBasedOnTwoArrays","getControlMap","onDropAttachFileList","showEsign","sortData","TestGroupTestTab","AddTestGroupSpecification","DEFAULT_RETURN","transactionStatus","REPORTTYPE","attachmentType","formCode","designProperties","AddTestGroupTest","AddProfileTree","SampleFilter","AddFile","AdvFilter","SpecificationHistory","TestGroupSpecFile","SpecificationInfo","CustomTab","TransactionListMaster","FormTreeMenu","FormInput","ConfirmMessage","BreadcrumbComponent","testMoreFields","testSubFields","searchFieldList","specificationColumnList","componentColumnList","addTestColumnList","editTestColumnList","EditTestGroupTest","ContentPanel","SearchAdd","ListWrapper","ProductList","ReactTooltip","TestGroup","constructor","props","reloadData","filterData","Login","state","nsampletypecode","undefined","warn","intl","formatMessage","id","nproductcatcode","item","nformcode","PRODUCTCATEGORY","INSTRUMENTCATEGORY","MATERIALCATEGORY","nproductcode","ntreeversiontempcode","inputParam","inputData","userinfo","userInfo","historyDataState","masterData","searchRef","ConfirmDelete","obj","confirmMessage","confirm","deleteRecord","handlePageChange","event","setState","skip","take","viewTestFile","viewParam","operation","methodUrl","classUrl","ntestgroupfilecode","selectedTest","testgroupspecification","SelectedSpecification","fileViewIcon","master","nlinkcode","NA","linkViewIcon","onFilterSumbit","tempFilterData","ncategorybasedflow","NO","value","onTreeClick","screenName","keyName","selectedRecord","activeKey","key","focusKey","primaryKey","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","addFile","defaultRecord","settings","TestGroupSpecificationHistory","historyDataStateChange","dataResult","dataState","ncontrolCode","modalName","nflag","napprovalstatus","DRAFT","CORRECTION","onTabChange","tabProps","updateInfo","typeName","data","componentRowClick","testgroupspecsampletype","deleteTest","deleteParam","testgrouptest","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","ntestgrouptestcode","fetchUrl","fecthInputObject","unchangeList","loadEsign","screenData","openModal","closeModal","onInputOnChange","caseNo","optional","target","type","name","checked","indexKey","Object","keys","values","treeData","npositioncode","nlevelno","sleveldescription","ntemptranstestgroupcode","schildnode","nnextchildcode","ntemplatemanipulationcode","isreadonly","slevelformat","treetemplatemanipulation","onEsignInputOnChange","YES","onFilterComboChange","comboData","fieldName","sampletype","productcategory","product","TestGroupSpecSampleType","testGroupInputData","testGroupSpecSampleType","SelectedComponent","testcategory","nallottedspeccode","handleDateChange","dateName","dateValue","Date","onNumericInputChange","onSaveClick","saveType","formRef","onSaveTree","onSaveSpecification","onSaveComponent","onSaveCopySpecification","onSaveTest","onSaveSpecFile","testArray","ntestcode","map","test","SelectedTest","changeList","isSingleSelect","testgrouptestfile","testGroupFile","ntestfilecode","nattachmenttypecode","sdescription","ssystemfilename","dcreateddate","nfilesize","sfilename","nstatus","ACTIVE","nsectioncode","nsourcecode","nmethodcode","ninstrumentcatcode","stestsynonym","ncost","nsorter","nspecsampletypecode","selectedNode","ActiveKey","TreetempTranstestGroup","tempArray","push","treeTemplateManip","filter","temp","length","testGroupSpec","napproveconfversioncode","sversion","ntransactionstatus","ncomponentrequired","nprojectcode","sspecname","dexpirydate","ntzexpirydate","stzexpirydate","label","selectedspecification","ncomponentcode","acceptedFiles","isFileEdited","specFileArray","selectedSpecification","specFile","nspecfilecode","formData","FormData","FTP","Array","isArray","forEach","file","index","tempData","assign","splittedFileName","split","fileExtension","uniquefilename","trim","size","append","slinkfilename","slinkdescription","JSON","stringify","isFileupload","deleteSpecRecord","componentDataState","deleteMultipleRecord","onDropSpecFile","attachedFiles","maxSize","actionType","deleteAttachment","validateTestGroupComplete","inputValue","post","then","response","inactiveTestArray","indexOf","stestname","completeSpecification","catch","error","status","message","retireSpec","approvalRoleActionDetail","retireSpecId","RETIRED","specificationReport","sprimarykeyname","ncontrolcode","nregtypecode","nregsubtypecode","nreportmodulecode","nreporttypecode","CONTROLBASED","nreportdecisiontypecode","certificatetypecode","selectedComponent","testGroupTest","TestGroupTest","approveSpecification","needEsign","onComboChange","schecklistversionname","validateEsign","sreason","password","parseInt","showTest","componentBreadcrumbs","breadCrumbData","createRef","specSubField","VALUE","COLOUR","getDerivedStateFromProps","masterStatus","errorCode","componentDidMount","parentHeight","height","clientHeight","render","TestGroupSpecification","AgaramTree","OpenNodes","FocusKey","searchedData","TestGroupTestParameter","testGroupTestData","getComponent","addSpecParam","editSpecParam","specDeleteParam","addSpecId","has","get","addTreeId","editTreeId","deleteTreeId","editSpecId","deleteSpecId","addComponentId","deleteComponentId","addTestId","deleteTestId","editTestId","viewFileId","deleteTree","getTest","filterParam","specMandatoryFields","compMandatoryFields","editTestMandatoryFields","addTestMandatoryFields","mandatory","splitNode","treeNodeNames","nodeItem","TreeTemplateManipulation","treeItem","scomponentname","showModalBg","sampleType","treeVersionTemplate","productCategory","needActionStrip","e","spec","title","controlname","objectName","hidden","onClick","display","marginTop","float","showSpecAndTestInfo","setting","needConditionalIcon","conditionalIconFunction","openChildModal","parameterData","testGroupCheckList","openTemplateModal","ApprovalRoleActionDetail","findMandatoryFields","treeMandatoryFields","timeZoneList","linkMaster","editFiles","slabelname","mandyFields","LINK","finalMandyFields","generateBreadCrumData","componentDidUpdate","previousProps","previousState","isStateChanged","SampleType","sampleTypeMap","ProductCategory","productCatMap","Product","productMap","TreeVersionTemplate","templateMap","nformCode","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { Row, Col, Card, Button, Nav } from 'react-bootstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { faEye, faTrashAlt } from '@fortawesome/free-regular-svg-icons';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport {\r\n    callService, crudMaster, filterTestGroup, createTree, editTree, getTestGroupDetails, sampleTypeOnChange,\r\n    validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent, changeTestCategory,\r\n    addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter, addTestFile,\r\n    editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData,\r\n    viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification\r\n} from '../../actions'\r\nimport { constructOptionList, formatInputDate, create_UUID, deleteAttachmentDropZone, filterRecordBasedOnTwoArrays, getControlMap, onDropAttachFileList, showEsign, sortData } from '../../components/CommonScript';\r\nimport TestGroupTestTab from './TestGroupTestTab';\r\nimport AddTestGroupSpecification from './AddTestGroupSpecification';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, REPORTTYPE, attachmentType, formCode, designProperties } from '../../components/Enumeration';\r\nimport AddTestGroupTest from './AddTestGroupTest';\r\nimport AddProfileTree from './AddProfileTree';\r\nimport SampleFilter from './SampleFilter';\r\nimport AddFile from '../testmanagement/AddFile';\r\nimport AdvFilter from '../../components/AdvFilter';\r\nimport SpecificationHistory from './SpecificationHistory';\r\nimport TestGroupSpecFile from './TestGroupSpecFile';\r\nimport SpecificationInfo from './SpecificationInfo';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\n\r\nimport {\r\n    testMoreFields, testSubFields, searchFieldList, specificationColumnList, componentColumnList,\r\n    addTestColumnList, editTestColumnList\r\n} from './TestGroupFields';\r\nimport EditTestGroupTest from './EditTestGroupTest';\r\nimport { ContentPanel, SearchAdd } from '../../components/App.styles';\r\nimport '../../pages/registration/registration.css';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\n\r\n\r\nclass TestGroup extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const componentDataState = { skip: 0, take: 10 };\r\n        const historyDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        this.state = {\r\n            selectedRecord: {},\r\n            filterData: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            componentDataState,\r\n            historyDataState,\r\n            tempFilterData: {},\r\n            showTest: false,\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[12] : 5\r\n        }\r\n        this.componentBreadcrumbs = [];\r\n        this.breadCrumbData = [];\r\n        this.searchRef = React.createRef();\r\n        this.specSubField = [{ [designProperties.VALUE]: \"stransdisplaystatus\" },\r\n        { [designProperties.VALUE]: \"sapprovalstatus\", [designProperties.COLOUR]: true }];\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    reloadData = () => {\r\n\r\n        const filterData = this.props.Login.filterData || this.state.filterData;\r\n        if (filterData.nsampletypecode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\" }));\r\n        }\r\n        else if (filterData.nproductcatcode === \"\") {\r\n            if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CATEGORYNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        else if (filterData.nproductcode === \"\" || filterData.nproductcode === undefined) {\r\n            if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            }\r\n        } else if (filterData.ntreeversiontempcode === \"\") {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        }\r\n        else {\r\n            const inputParam = {\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: filterData.nsampletypecode.item[\"nsampletypecode\"],\r\n                    nproductcatcode: filterData.nproductcatcode.item[\"nproductcatcode\"],\r\n                    nproductcode: filterData.nproductcode.item[\"nproductcode\"],\r\n                    ntreeversiontempcode: filterData.ntreeversiontempcode.item[\"ntreeversiontempcode\"],\r\n                    filterData,//: { ...this.props.Login.filterData }\r\n                },\r\n                historyDataState:this.state.historyDataState\r\n\r\n            }\r\n            this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { TestGroupSpecification, SelectedSpecification, SelectedTest, AgaramTree, OpenNodes, selectedNode, FocusKey,\r\n            ActiveKey, SelectedComponent, TestGroupTest, TestGroupSpecSampleType, searchedData,\r\n            TestGroupTestParameter } = this.props.Login.masterData;\r\n        // const deleteTree = {\r\n        //     methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\r\n        //     userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\"\r\n        // };\r\n\r\n        const testGroupTestData = searchedData || TestGroupTest || []\r\n\r\n        if (TestGroupTestParameter) {\r\n            sortData(TestGroupTestParameter, \"ascending\", \"nsorter\");\r\n        }\r\n\r\n        if (testGroupTestData) {\r\n            sortData(testGroupTestData, \"ascending\", \"nsorter\");\r\n        }\r\n\r\n        const getComponent = {\r\n            screenName: \"IDS_COMPONENT\", operation: \"get\", inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"TestGroupComponent\", keyName: \"testgroupspecification\"\r\n        };\r\n        const addSpecParam = { testgroupspecification: SelectedSpecification, selectedRecord: this.state.filterData, userInfo: this.props.Login.userInfo, selectedNode };\r\n        const editSpecParam = { selectedRecord: this.state.filterData, userinfo: this.props.Login.userInfo, selectedNode};\r\n        const specDeleteParam = { operation: \"delete\", methodUrl: \"Specification\", screenName: \"IDS_SPECIFICATION\", keyName: \"testgroupspecification\",filterData:this.state.filterData };\r\n        const addSpecId = this.state.controlMap.has(\"AddSpecification\") && this.state.controlMap.get(\"AddSpecification\").ncontrolcode;\r\n        const addTreeId = this.state.controlMap.has(\"AddTree\") && this.state.controlMap.get(\"AddTree\").ncontrolcode;\r\n        const editTreeId = this.state.controlMap.has(\"EditTree\") && this.state.controlMap.get(\"EditTree\").ncontrolcode;\r\n        const deleteTreeId = this.state.controlMap.has(\"DeleteTree\") && this.state.controlMap.get(\"DeleteTree\").ncontrolcode;\r\n        const editSpecId = this.state.controlMap.has(\"EditSpecification\") && this.state.controlMap.get(\"EditSpecification\").ncontrolcode;\r\n        const deleteSpecId = this.state.controlMap.has(\"DeleteSpecification\") && this.state.controlMap.get(\"DeleteSpecification\").ncontrolcode;\r\n        const addComponentId = this.state.controlMap.has(\"AddComponent\") && this.state.controlMap.get(\"AddComponent\").ncontrolcode;\r\n        const deleteComponentId = this.state.controlMap.has(\"DeleteComponent\") && this.state.controlMap.get(\"DeleteComponent\").ncontrolcode;\r\n        const addTestId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\r\n        const deleteTestId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\r\n        const editTestId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\r\n        const viewFileId = this.state.controlMap.has(\"ViewTestFile\") && this.state.controlMap.get(\"ViewTestFile\").ncontrolcode;\r\n        const confirmMessage = new ConfirmMessage();\r\n\r\n        const deleteTree = {\r\n            methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\", ncontrolCode: deleteTreeId,filterData:this.state.filterData\r\n        };\r\n\r\n        const getTest = {\r\n            screenName: \"IDS_TEST\", operation: \"get\", masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"TestGroupTest\", keyName: \"ntestgrouptestcode\"\r\n        };\r\n        const filterParam = {\r\n            inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n            fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo }, masterData: this.props.Login.masterData,\r\n            searchFieldList, changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\",\r\n                \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"], isSingleSelect: true\r\n        };\r\n        const specMandatoryFields = [];\r\n        const compMandatoryFields = [];\r\n        const editTestMandatoryFields = [];\r\n        const addTestMandatoryFields = [];\r\n        specificationColumnList.forEach(item => item.mandatory === true ?\r\n            specMandatoryFields.push(item) : \"\"\r\n        );\r\n        componentColumnList.forEach(item => item.mandatory === true ?\r\n            compMandatoryFields.push(item) : \"\"\r\n        );\r\n        editTestColumnList.forEach(item => item.mandatory === true ?\r\n            editTestMandatoryFields.push(item) : \"\"\r\n        );\r\n        addTestColumnList.forEach(item => item.mandatory === true ?\r\n            addTestMandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        if (this.props.Login.masterData && Object.values(this.props.Login.masterData).length > 0) {\r\n            if (selectedNode && selectedNode.sleveldescription) {\r\n                // this.componentBreadcrumbs[0] = this.props.intl.formatMessage({ id: \"IDS_PROFILETREE\" }) + \": \" + selectedNode.sleveldescription;\r\n                const splitNode = this.props.Login.masterData.ActiveKey.split('/');\r\n                let treeNodeNames = [];\r\n                splitNode.forEach(nodeItem => {\r\n                    this.props.Login.masterData.TreeTemplateManipulation.forEach(treeItem => {\r\n                        if (treeItem.ntemplatemanipulationcode === parseInt(nodeItem))\r\n                            treeNodeNames.push(treeItem.sleveldescription);\r\n                    })\r\n                })\r\n                // this.componentBreadcrumbs[0] = treeNodeNames;\r\n                this.componentBreadcrumbs = treeNodeNames;\r\n                if (SelectedSpecification && SelectedSpecification !== null && SelectedSpecification.sspecname) {\r\n                    // this.componentBreadcrumbs[1] = this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" }) + \": \" + SelectedSpecification.sspecname;\r\n                    this.componentBreadcrumbs.push(SelectedSpecification.sspecname);\r\n                    if (SelectedComponent && SelectedComponent !== null && SelectedComponent.ncomponentcode !== -1) {\r\n                        // this.componentBreadcrumbs[2] = this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }) + \": \" + SelectedComponent.scomponentname;\r\n                        this.componentBreadcrumbs.push(SelectedComponent.scomponentname);\r\n                    } else {\r\n                        // delete this.componentBreadcrumbs[2];\r\n                    }\r\n                } else {\r\n                    // delete this.componentBreadcrumbs[1];\r\n                }\r\n            } else {\r\n                this.componentBreadcrumbs = [];\r\n                // delete this.componentBreadcrumbs[0];\r\n            }\r\n        }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip-list-wrap\" />\r\n                {/* screen-height-window active_seperator */}\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {this.breadCrumbData && this.breadCrumbData.length > 0 &&\r\n                        <BreadcrumbComponent\r\n                            breadCrumbItem={this.breadCrumbData}\r\n                        />}\r\n                    <Row noGutters>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <SplitterLayout\r\n                                borderColor=\"#999\"\r\n                                primaryIndex={1}\r\n                                percentage={true}\r\n                                secondaryInitialSize={30}\r\n                                customClassName=\"fixed_list_height\"\r\n                            >\r\n                                <div className={`${this.state.showModalBg ? 'show_modal_bg' : ''}`}>\r\n                                    <div className=\"sticky_head\">\r\n                                        <SearchAdd className=\"border fixed_ico_list title_grp_custom\">\r\n                                            <h4>{this.props.intl.formatMessage({ id: \"IDS_PROFILETREE\" })}</h4>\r\n                                            <div className=\"icon_group_right_aligned\">\r\n                                                <AdvFilter\r\n                                                    filterComponent={[{\r\n                                                        \"IDS_SAMPLEFILTER\":\r\n                                                            <SampleFilter\r\n                                                                sampleType={this.state.sampleType}\r\n                                                                treeVersionTemplate={this.state.treeVersionTemplate}\r\n                                                                productCategory={this.state.productCategory}\r\n                                                                product={this.state.product}\r\n                                                                onFilterComboChange={this.onFilterComboChange}\r\n                                                                tempFilterData={this.state.tempFilterData}\r\n                                                            >\r\n                                                            </SampleFilter>,\r\n                                                        needActionStrip: false\r\n                                                    }]}\r\n                                                    onFilterSubmit={this.onFilterSumbit}\r\n                                                    showModalBg={(e) => this.setState({ showModalBg: e })}\r\n                                                />\r\n\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue mr-1\" role=\"button\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(addTreeId) === -1}\r\n                                                        onClick={() => this.props.createTree(this.state.filterData, this.props.Login.userInfo, selectedNode, addTreeId)}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                        data-for=\"tooltip-list-wrap\"\r\n                                                    >\r\n                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                    </Button>\r\n\r\n                                                    <Nav.Link className=\"btn btn-circle outline-grey mr0 mr-1\" name=\"edittestname\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(editTreeId) === -1}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                        data-for=\"tooltip-list-wrap\"\r\n                                                        onClick={() => this.props.editTree(\"update\", selectedNode, this.props.Login.userInfo, editTreeId,this.state.filterData)}>\r\n                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link name=\"deleteLink\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(deleteTreeId) === -1}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                        data-for=\"tooltip-list-wrap\"\r\n                                                        className=\"btn btn-circle outline-grey \"\r\n                                                        onClick={() => this.ConfirmDelete({ ...deleteTree })}>\r\n                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        {/* <ConfirmDialog\r\n                                                            name=\"deleteMessage\"\r\n                                                            message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                            doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                            doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                            icon={faTrashAlt}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteTreeId) === -1}\r\n                                                            handleClickDelete={() => this.deleteRecord({ ...deleteTree })}\r\n                                                        /> */}\r\n                                                    </Nav.Link>\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-1\" variant=\"link\"\r\n                                                        onClick={() => this.reloadData()} data-for=\"tooltip-list-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                        <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                    </Button>\r\n                                                    {/* </Tooltip> */}\r\n                                                </ProductList>\r\n\r\n                                            </div>\r\n                                        </SearchAdd>\r\n                                    </div>\r\n                                    <div className=\"sticky_head_scroll_body\" style={{ \"height\": this.state.parentHeight }}>\r\n                                        <PerfectScrollbar>\r\n                                            <FormTreeMenu\r\n                                                data={AgaramTree}\r\n                                                hasSearch={false}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                initialOpenNodes={OpenNodes}\r\n                                                focusKey={FocusKey || \"\"}\r\n                                                activeKey={ActiveKey || \"\"}\r\n                                            />\r\n                                            <TransactionListMaster\r\n                                                notSearchable={true}\r\n                                                titleHead={this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })}\r\n                                                titleClasses=\"title_grp_custom fixed_ico_list\"\r\n                                                masterList={TestGroupSpecification || []}\r\n                                                selectedMaster={[SelectedSpecification]}\r\n                                                needMultiSelect={false}\r\n                                                primaryKeyField=\"nallottedspeccode\"\r\n                                                getMasterDetail={(spec) => this.props.getComponentBySpecId({ ...getComponent, selectedRecord: spec, historyDataState:this.state.historyDataState }, this.props.Login.masterData, this.searchRef)}\r\n                                                mainField=\"sspecname\"\r\n                                                selectedListName=\"testgroupspecification\"\r\n                                                objectName=\"testgroupspecification\"\r\n                                                listName=\"IDS_SPECIFICATION\"\r\n                                                onFilterSumbit={this.onFilterSumbit}\r\n                                                subFields={this.specSubField}\r\n                                                actionIcons={\r\n                                                    [\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                            controlname: \"faPencilAlt\",\r\n                                                            objectName: \"testgroupspecification\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(editSpecId) === -1,\r\n                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                            onClick: (props) => this.props.addSpecification(\"update\", { ...editSpecParam, ...props }, editSpecId)\r\n                                                        },\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                            controlname: \"faTrashAlt\",\r\n                                                            objectName: \"testgroupspecification\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(deleteSpecId) === -1,\r\n                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                            onClick: (props) => confirmMessage.confirm(\r\n                                                                \"deleteMessage\",\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                () => this.deleteSpecRecord({ props, ...specDeleteParam, selectedRecord: SelectedSpecification, ncontrolCode: deleteSpecId })\r\n                                                            )\r\n                                                        }\r\n                                                    ]\r\n                                                }\r\n                                                needFilter={false}\r\n                                                commonActions={\r\n                                                    <>\r\n                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(addSpecId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                            data-for=\"tooltip-list-wrap\"\r\n                                                            onClick={() => this.props.addSpecification(\"create\", { ...addSpecParam }, addSpecId)}>\r\n                                                            <FontAwesomeIcon icon={faPlus}\r\n                                                            // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                            />\r\n                                                        </Button>\r\n                                                    </>\r\n                                                }\r\n                                                hideSearch={false}\r\n                                                hidePaging={true}\r\n                                            />\r\n                                            {SelectedSpecification && SelectedSpecification.ncomponentrequired === transactionStatus.YES &&\r\n                                                <TransactionListMaster\r\n                                                    notSearchable={true}\r\n                                                    titleHead={this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" })}\r\n                                                    titleClasses=\"title_grp_custom fixed_ico_list\"\r\n                                                    masterList={TestGroupSpecSampleType || []}\r\n                                                    selectedMaster={[SelectedComponent]}\r\n                                                    needMultiSelect={false}\r\n                                                    primaryKeyField=\"nspecsampletypecode\"\r\n                                                    getMasterDetail={(event) => this.componentRowClick(event)}\r\n                                                    mainField=\"scomponentname\"\r\n                                                    selectedListName=\"testgroupspecsampletype\"\r\n                                                    objectName=\"testgroupspecsampletype\"\r\n                                                    listName=\"IDS_COMPONENT\"\r\n                                                    actionIcons={\r\n                                                        [\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                controlname: \"faTrashAlt\",\r\n                                                                objectName: \"testgroupspecsampletype\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(deleteComponentId) === -1,\r\n                                                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                                onClick: (props) => confirmMessage.confirm(\r\n                                                                    \"deleteMessage\",\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                    () => this.deleteMultipleRecord({ props, ncontrolCode: deleteComponentId })\r\n                                                                )\r\n                                                            }\r\n                                                        ]\r\n                                                    }\r\n                                                    commonActions={\r\n                                                        <>\r\n                                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(addComponentId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                data-for=\"tooltip-list-wrap\"\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                onClick={() => this.props.addComponent(SelectedSpecification, this.props.Login.userInfo, addComponentId)}>\r\n                                                                <FontAwesomeIcon icon={faPlus}\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \r\n                                                                />\r\n                                                            </Button>\r\n\r\n                                                        </>\r\n                                                    }\r\n                                                    hidePaging={true}\r\n                                                />}\r\n                                        </PerfectScrollbar>\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                <SplitterLayout\r\n                                    vertical\r\n                                    borderColor=\"#999\"\r\n                                    primaryIndex={1}\r\n                                    secondaryInitialSize={400}\r\n                                    customClassName=\"fixed_list_height\"\r\n                                >\r\n                                    <>\r\n                                        <PerfectScrollbar>\r\n                                            {this.componentBreadcrumbs && this.componentBreadcrumbs.length > 0 &&\r\n                                                <div className=\"component_breadcrumbs\">\r\n                                                    <ul>\r\n                                                        {this.componentBreadcrumbs.map((item) => {\r\n                                                            return <li>{item}</li>\r\n                                                        })}\r\n                                                    </ul>\r\n                                                </div>\r\n                                            }\r\n                                            <div className=\"card_group\">\r\n                                                <ContentPanel hidden={!this.state.showTest}>\r\n                                                    <Card>\r\n                                                        <Card.Header>\r\n                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                <h4>{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                                                            </span>\r\n                                                            <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                onClick={() => this.showSpecAndTestInfo()}>\r\n                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                {this.props.intl.formatMessage({ id: \"IDS_SPECINFO\" })}\r\n                                                            </button>\r\n                                                        </Card.Header>\r\n                                                        <Card.Body>\r\n                                                            <TransactionListMaster\r\n                                                                masterList={searchedData || TestGroupTest || []}\r\n                                                                selectedMaster={[SelectedTest]}\r\n                                                                primaryKeyField=\"ntestgrouptestcode\"\r\n                                                                getMasterDetail={this.props.getTestGroupDetails}\r\n                                                                inputParam={getTest}\r\n                                                                additionalParam={[]}\r\n                                                                mainField=\"stestname\"\r\n                                                                selectedListName=\"SelectedTest\"\r\n                                                                objectName=\"testgrouptest\"\r\n                                                                listName=\"IDS_TEST\"\r\n                                                                showStatusLink={true}\r\n                                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                                statusField=\"ntransactionstatus\"\r\n                                                                subFields={testSubFields}\r\n                                                                moreField={testMoreFields}\r\n                                                                needValidation={false}\r\n                                                                needFilter={false}\r\n                                                                filterColumnData={this.props.filterTransactionList}\r\n                                                                searchListName=\"searchedData\"\r\n                                                                searchRef={this.searchRef}\r\n                                                                filterParam={filterParam}\r\n                                                                handlePageChange={this.handlePageChange}\r\n                                                                skip={this.state.skip}\r\n                                                                take={this.state.take}\r\n                                                                pageSize = {this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                                                                actionIcons={\r\n                                                                    [\r\n                                                                        {\r\n                                                                            title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                                                            controlname: \"faCloudDownloadAlt\",\r\n                                                                            objectName: \"selectedTest\",\r\n                                                                            hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\r\n                                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                                            onClick: (props) => this.viewTestFile(props),\r\n                                                                            needConditionalIcon: true,\r\n                                                                            conditionalIconFunction: this.fileViewIcon\r\n                                                                        },\r\n                                                                        {\r\n                                                                            title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                                                            controlname: \"faExternalLinkAlt\",\r\n                                                                            objectName: \"selectedTest\",\r\n                                                                            hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\r\n                                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                                            onClick: (props) => this.viewTestFile(props),\r\n                                                                            needConditionalIcon: true,\r\n                                                                            conditionalIconFunction: this.linkViewIcon\r\n                                                                        },\r\n                                                                        {\r\n                                                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                                            controlname: \"faPencilAlt\",\r\n                                                                            objectName: \"testgroupspecification\",\r\n                                                                            hidden: this.state.userRoleControlRights.indexOf(editTestId) === -1,\r\n                                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                                            onClick: (props) => this.props.editTestGroupTest(\"update\", props.SelectedTest[0], this.props.Login.userInfo, editTestId, SelectedSpecification,this.state.filterData)\r\n                                                                        },\r\n                                                                        {\r\n                                                                            title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                            controlname: \"faTrashAlt\",\r\n                                                                            objectName: \"testgrouptest\",\r\n                                                                            hidden: this.state.userRoleControlRights.indexOf(deleteTestId) === -1,\r\n                                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                                            onClick: (props) => confirmMessage.confirm(\r\n                                                                                \"deleteMessage\",\r\n                                                                                this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                                this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                                () => this.deleteTest({ props, ncontrolCode: deleteTestId ,filterData:this.state.filterData})\r\n                                                                            )\r\n                                                                        }\r\n                                                                    ]\r\n                                                                }\r\n                                                                commonActions={\r\n                                                                    <>\r\n                                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                                            hidden={this.state.userRoleControlRights.indexOf(addTestId) === -1}\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                            data-for=\"tooltip-list-wrap\"\r\n                                                                            onClick={() => this.props.addTestGroupTest(SelectedComponent, this.props.Login.userInfo, addTestId, SelectedSpecification,this.state.filterData)}>\r\n                                                                            <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                                                                        </Button>\r\n                                                                    </>\r\n                                                                }\r\n                                                            />\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                    {TestGroupTestParameter && TestGroupTestParameter.length > 0 &&\r\n                                                        <Card body>\r\n                                                            <TestGroupTestTab\r\n                                                                masterData={this.props.Login.masterData}\r\n                                                                inputParam={this.props.Login.inputParam}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                                screenName={this.props.Login.screenName}\r\n                                                                openChildModal={this.props.Login.openChildModal}\r\n                                                                operation={this.props.Login.operation}\r\n                                                                loadEsign={this.props.Login.loadEsign}\r\n                                                                testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                                parameterData={this.props.Login.parameterData}\r\n                                                                selectedRecord={this.state.selectedRecord}\r\n                                                                screenData={this.props.Login.screenData}\r\n                                                                ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                                controlMap={this.state.controlMap}\r\n                                                                testGroupCheckList={this.props.Login.testGroupCheckList}\r\n                                                                openTemplateModal={this.props.Login.openTemplateModal}\r\n                                                                editTestGroupTest={this.props.editTestGroupTest}\r\n                                                                updateStore={this.props.updateStore}\r\n                                                                crudMaster={this.props.crudMaster}\r\n                                                                getTestGroupParameter={this.props.getTestGroupParameter}\r\n                                                                editTestGroupParameter={this.props.editTestGroupParameter}\r\n                                                                filterData={this.state.filterData}\r\n                                                                addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                                filterColumnData={this.props.filterColumnData}\r\n                                                                viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n                                                            />\r\n                                                        </Card>\r\n                                                    }\r\n                                                </ContentPanel>\r\n                                                <ContentPanel hidden={this.state.showTest}>\r\n                                                    <Card>\r\n                                                        <Card.Header>\r\n                                                            <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                                                <h4>{this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONINFO\" })}</h4>\r\n                                                            </span>\r\n                                                            <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                                                onClick={() => this.showSpecAndTestInfo()}>\r\n                                                                <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                                                {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                                            </button>\r\n                                                        </Card.Header>\r\n                                                        <Card.Body>\r\n                                                            <SpecificationInfo\r\n                                                                controlMap={this.state.controlMap}\r\n                                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                selectedSpecification={this.props.Login.masterData.SelectedSpecification}\r\n                                                                userInfo={this.props.Login.userInfo}\r\n                                                                selectedNode={this.props.Login.masterData.selectedNode}\r\n                                                                selectedRecord={this.state.filterData}\r\n                                                                approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                                                                screenName=\"IDS_SPECIFICATIONINFO\"\r\n                                                                deleteRecord={this.deleteRecord}\r\n                                                                addSpecification={this.props.addSpecification}\r\n                                                                filterData={this.state.filterData}\r\n                                                                //completeSpecification={this.completeSpecification}\r\n                                                                completeSpecification={this.validateTestGroupComplete}\r\n                                                                approveSpecification={this.approveSpecification}\r\n                                                                specificationReport={this.specificationReport}\r\n                                                                retireSpec={this.retireSpec}\r\n                                                            />\r\n                                                        </Card.Body>\r\n                                                    </Card>\r\n                                                    <Card body>\r\n                                                        <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                                                    </Card>\r\n                                                </ContentPanel>\r\n                                            </div>\r\n                                        </PerfectScrollbar>\r\n\r\n                                    </>\r\n                                </SplitterLayout>\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n                {\r\n                    this.props.Login.openModal && this.props.Login.screenName &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        onSaveClick={this.onSaveClick}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={\r\n                            this.props.Login.screenName === \"IDS_SPECFILE\" ? this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord)\r\n                                : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? specMandatoryFields\r\n                                    : this.props.Login.screenName === \"IDS_COMPONENT\" ? compMandatoryFields\r\n                                        : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? editTestMandatoryFields\r\n                                            : this.props.Login.screenName === \"IDS_TEST\" ? addTestMandatoryFields\r\n                                                : this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\"\r\n                                                    ? this.props.Login.treeMandatoryFields : []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.Login.screenName === \"IDS_SPECIFICATION\" ?\r\n                                <AddTestGroupSpecification\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    screenName={this.props.Login.screenName}\r\n                                    operation={this.props.Login.operation}\r\n                                    userInfo ={this.props.Login.userInfo}\r\n                                /> :\r\n                                this.props.Login.screenName === \"IDS_COMPONENT\" ?\r\n                                    <AddTestGroupTest\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        testGroupInputData={this.props.Login.testGroupInputData}\r\n                                        screenName={this.props.Login.screenName}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onFilterComboChange={this.onFilterComboChange}\r\n                                    /> :\r\n                                    this.props.Login.screenName === \"IDS_PROFILETREE\" ?\r\n                                        <AddProfileTree\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            treetempTranstestGroup={this.props.Login.TreetempTranstestGroup}\r\n                                        /> :\r\n                                        this.props.Login.screenName === \"IDS_SPECFILE\" ?\r\n                                            <AddFile\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                actionType={this.state.actionType}\r\n                                                onDrop={this.onDropSpecFile}\r\n                                                deleteAttachment={this.deleteAttachment}\r\n                                                linkMaster={this.props.Login.linkMaster}\r\n                                                editFiles={this.props.Login.editFiles}\r\n                                                maxSize={20}\r\n                                                maxFiles={this.props.Login.operation === \"update\" ? 1 : 3}\r\n                                                multiple={this.props.Login.operation === \"update\" ? false : true}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_SPECFILE\" })}\r\n                                                hideDefaultToggle={true}\r\n                                                name=\"specfilename\"\r\n                                            /> :\r\n                                            this.props.Login.screenName === \"IDS_EDITTREE\" ?\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormInput\r\n                                                            name={\"sleveldescription\"}\r\n                                                            label={this.state.selectedRecord.slabelname}\r\n                                                            type=\"text\"\r\n                                                            onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                                            placeholder={this.state.selectedRecord.slabelname}\r\n                                                            value={this.state.selectedRecord ? this.state.selectedRecord[\"sleveldescription\"] : \"\"}\r\n                                                            isMandatory=\"*\"\r\n                                                            required={true}\r\n                                                            maxLength={100}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row> :\r\n                                                this.props.Login.screenName === \"IDS_TEST\" ?\r\n                                                    <AddTestGroupTest\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                        screenName={this.props.Login.screenName}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onFilterComboChange={this.onFilterComboChange}\r\n                                                    /> : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ?\r\n                                                        <EditTestGroupTest\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                            testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                        /> : \"\"\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(obj));\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    findMandatoryFields(screenName, selectedRecord) {\r\n        let mandyFields = [];\r\n        if (screenName === \"IDS_SPECFILE\") {\r\n            if (selectedRecord && selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"},\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n                //if (this.props.Login.operation === 'update') {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_CHOOSE\", \"controlType\": \"file\"},\r\n                ];\r\n                // }\r\n            }\r\n        } else {\r\n            return [];\r\n        }\r\n        let finalMandyFields = [];\r\n        mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\r\n        return finalMandyFields;\r\n    }\r\n\r\n    viewTestFile = (props) => {\r\n        const viewParam = {\r\n            operation: \"view\",\r\n            methodUrl: \"TestGroupTestFile\",\r\n            classUrl: \"testgroup\",\r\n            inputData: {\r\n                ntestgroupfilecode: props.selectedTest ? props.selectedTest.ntestgroupfilecode : 0,\r\n                userinfo: this.props.Login.userInfo,\r\n                testgroupspecification: this.props.Login.masterData.SelectedSpecification\r\n            }\r\n        }\r\n        this.props.viewAttachment(viewParam)\r\n    }\r\n\r\n    fileViewIcon = (master) => {\r\n        if (master.ntestgroupfilecode > 0 && master.nlinkcode === transactionStatus.NA) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    linkViewIcon = (master) => {\r\n        if (master.ntestgroupfilecode > 0 && master.nlinkcode !== transactionStatus.NA) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    showSpecAndTestInfo() {\r\n        this.setState({ showTest: !this.state.showTest })\r\n    }\r\n\r\n    onFilterSumbit = () => {\r\n        const tempFilterData = this.state.tempFilterData;\r\n        if (tempFilterData.nsampletypecode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\" }));\r\n        } else if (tempFilterData.nproductcatcode === \"\") {\r\n            if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CATEGORYNOTAVAILABLE\" }));\r\n            }\r\n        } \r\n       // else if(tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO){\r\n            else  if ((tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === \"\") ||\r\n             (tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO &&tempFilterData.nproductcode === undefined)) {\r\n                if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n                } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTNOTAVAILABLE\" }));\r\n                } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALNOTAVAILABLE\" }));\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n                }\r\n            }\r\n       // }\r\n        else if (tempFilterData.ntreeversiontempcode === \"\") {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        } else {\r\n            const inputParam = {\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: tempFilterData.nsampletypecode.value,\r\n                    nproductcatcode: tempFilterData.nproductcatcode.value,\r\n                    nproductcode: tempFilterData.nproductcode?tempFilterData.nproductcode.value:-1,\r\n                    ntreeversiontempcode: tempFilterData.ntreeversiontempcode.value,\r\n                    filterData: { ...tempFilterData },                  \r\n                },\r\n                historyDataState:this.state.historyDataState\r\n            }\r\n            this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\r\n        }\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_SPECIFICATION\",\r\n            operation: \"get\",\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedRecord: event.item,\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            primaryKey: event.primaryKey,\r\n            historyDataState:this.state.historyDataState\r\n        };\r\n        this.props.getSpecification(inputParam, this.props.Login.masterData, this.searchRef);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_FILE\",\r\n            <TestGroupSpecFile\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                testGroupSpecFile={this.props.Login.masterData.TestGroupSpecFile || []}\r\n                selectedSpecification={this.props.Login.masterData.SelectedSpecification}\r\n                addTestFile={this.addFile}\r\n                editSpecFile={this.props.editSpecFile}\r\n                filterData={this.state.filterData}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                screenName=\"IDS_FILE\"\r\n                viewAttachment={this.props.viewAttachment}\r\n                settings = {this.props.Login.settings}\r\n                masterData={this.props.Login.masterData}\r\n            />);\r\n        tabMap.set(\"IDS_SPECIFICATIONHISTORY\",\r\n            <SpecificationHistory\r\n                data={this.props.Login.masterData.TestGroupSpecificationHistory}\r\n                dataResult={process(this.props.Login.masterData.TestGroupSpecificationHistory || [], this.state.historyDataState)}\r\n                dataState={this.state.historyDataState}\r\n                dataStateChange={this.historyDataStateChange}\r\n\r\n               // testGroupSpecificationHistory={this.props.Login.masterData.TestGroupSpecificationHistory}\r\n               // dataState={this.props.Login.screenName === \"IDS_SPECIFICATIONHISTORY\" ? this.state.historyDataState : { skip: 0, take: 10 }}\r\n                controlMap={this.state.controlMap}                \r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_SPECIFICATIONHISTORY\"\r\n            />);\r\n        return tabMap;\r\n    }\r\n\r\n    historyDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], event.dataState),\r\n            historyDataState: event.dataState\r\n        });\r\n    }\r\n\r\n    addFile = (userInfo, operation, ncontrolCode, screenName, modalName,nflag) => {\r\n        const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n            || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName,nflag);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentRowClick = (event) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData[\"SelectedComponent\"] = event.testgroupspecsampletype[0];\r\n        const inputParam = {\r\n            testgroupspecsampletype: event.testgroupspecsampletype[0],\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.getTestGroupComponentDetails(inputParam, masterData, this.searchRef);\r\n    }\r\n\r\n    deleteTest = (deleteParam) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const testgroupspecification = masterData.SelectedSpecification;\r\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n            || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            const testgrouptest = deleteParam.props.testgrouptest;\r\n            const inputParam = {\r\n                inputData: {\r\n                    testgrouptest,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    testgroupspecification,\r\n                    ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\r\n                },\r\n                classUrl: \"testgroup\",\r\n                operation: \"delete\",\r\n                methodUrl: \"Test\",\r\n                screenName: \"IDS_TEST\",\r\n                postParam: {\r\n                    inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                    primaryKeyValue: testgrouptest.ntestgrouptestcode,\r\n                    fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                    masterData, searchFieldList, unchangeList: [\"TestGroupSpecification\", \"SelectedSpecification\",\r\n                        \"SampleType\", \"TreeVersionTemplate\", \"ProductCategory\", \"SelectedTest\", \"Product\",\r\n                        \"AgaramTree\", \"OpenNodes\", \"selectedNode\", \"FocusKey\", \"ActiveKey\", \"SelectedComponent\", \"TestGroupSpecSampleType\"]//, isSingleSelect: true\r\n                }\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_TEST\", operation: \"delete\", selectedRecord: {}\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Default\" \r\n                        || this.props.Login.operation === 'approve' || this.props.Login.operation === 'complete') {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n            } else {\r\n                loadEsign = false;\r\n                selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                   // selectedRecord[\"sfilename\"] = \"\";\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = event.target.value;\r\n\r\n                const indexKey = Object.keys(optional)[0];\r\n                const value = Object.values(optional)[0];\r\n                const treeData = {\r\n                    ntreeversiontempcode: value.ntreeversiontempcode,\r\n                    npositioncode: value.nlevelno - 1,\r\n                    sleveldescription: event.target.value,\r\n                    ntemptranstestgroupcode: value.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: \"\",\r\n                    nnextchildcode: value.schildnode !== null ? value.schildnode : -1,\r\n                    ntemplatemanipulationcode: value.ntemplatemanipulationcode,\r\n                    isreadonly: value.ntemplatemanipulationcode > 0 ? true : false,\r\n                    slevelformat: value.slevelformat\r\n                }\r\n                let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\r\n                treetemplatemanipulation[indexKey] = treeData;\r\n                selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onFilterComboChange = (comboData, fieldName, caseNo) => {\r\n        let tempFilterData = this.state.tempFilterData || {};\r\n        let inputParam = {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getProductCategory\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 2:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: tempFilterData.nsampletypecode.item,\r\n                        productcategory: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getProduct\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 3:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: tempFilterData.nsampletypecode.item,\r\n                        productcategory: tempFilterData.nproductcatcode.item,\r\n                        product: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getTreeVersionTemplate\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 4:\r\n                tempFilterData[fieldName] = comboData;\r\n                this.setState({ tempFilterData });\r\n                break;\r\n\r\n            case 5:\r\n                const selectedRecord = this.state.selectedRecord;\r\n                selectedRecord[fieldName] = comboData;\r\n                const TestGroupSpecSampleType = this.props.Login.testGroupInputData.TestGroupSpecSampleType || {};\r\n                let testGroupSpecSampleType = {};\r\n                if (this.props.Login.screenName === \"IDS_COMPONENT\") {\r\n                    testGroupSpecSampleType = selectedRecord[\"ncomponentcode\"] ? selectedRecord[\"ncomponentcode\"].item : TestGroupSpecSampleType[0].item;\r\n                } else {\r\n                    testGroupSpecSampleType = this.props.Login.masterData.SelectedComponent;\r\n                }\r\n                inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    testcategory: comboData.item,\r\n                    testgroupspecsampletype: testGroupSpecSampleType,\r\n                    nallottedspeccode: this.props.Login.masterData.SelectedSpecification[\"nallottedspeccode\"],\r\n                    selectedRecord\r\n                }\r\n                this.props.changeTestCategory(inputParam, this.props.Login.testGroupInputData);\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        if (this.props.Login.screenName === \"IDS_PROFILETREE\"\r\n            || this.props.Login.screenName === \"IDS_EDITTREE\") {\r\n            inputParam = this.onSaveTree(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_SPECIFICATION\") {\r\n            inputParam = this.onSaveSpecification(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_COMPONENT\") {\r\n            inputParam = this.onSaveComponent(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_COPYSPECIFICATION\") {\r\n            inputParam = this.onSaveCopySpecification(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_TEST\"\r\n            || this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\") {\r\n            inputParam = this.onSaveTest(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_SPECFILE\") {\r\n            inputParam = this.onSaveSpecFile(saveType, formRef);\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, openModal: true, operation: this.props.Login.operation,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n        }\r\n    }\r\n\r\n    onSaveTest = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let inputData = {};\r\n        const userinfo = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        if (operation === \"create\") {\r\n            const testArray = selectedRecord.ntestcode.map(test => { return test.item });\r\n            inputData = {\r\n                testgroupspecification: masterData.SelectedSpecification,\r\n                testgroupspecsampletype: [masterData.SelectedComponent],\r\n                testgrouptest: testArray, userinfo\r\n            }\r\n        } else {\r\n            postParam = {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: masterData.SelectedTest ? masterData.SelectedTest.ntestgrouptestcode : 0,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                masterData: this.props.Login.masterData, searchFieldList, changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\",\r\n                    \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"], isSingleSelect: true\r\n            }\r\n            let testgrouptestfile = null;\r\n            let testGroupFile = selectedRecord.ntestfilecode;\r\n            if (testGroupFile) {\r\n                testGroupFile = testGroupFile.item;\r\n                testgrouptestfile = {\r\n                    nlinkcode: testGroupFile.nlinkcode,\r\n                    nattachmenttypecode: testGroupFile.nattachmenttypecode,\r\n                    sdescription: testGroupFile.sdescription,\r\n                    ssystemfilename: testGroupFile.ssystemfilename,\r\n                    dcreateddate: testGroupFile.dcreateddate,\r\n                    nfilesize: testGroupFile.nfilesize,\r\n                    ntestgroupfilecode: selectedRecord.ntestgroupfilecode,\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    sfilename: testGroupFile.sfilename,\r\n                    nstatus: transactionStatus.ACTIVE\r\n                };\r\n            }\r\n            inputData = {\r\n                testgroupspecification: masterData.SelectedSpecification,\r\n                testgrouptest: {\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    nsectioncode: selectedRecord.nsectioncode.value,\r\n                    nsourcecode: selectedRecord.nsourcecode.value,\r\n                    nmethodcode: selectedRecord.nmethodcode ? selectedRecord.nmethodcode.value : transactionStatus.NA,\r\n                    ninstrumentcatcode: selectedRecord.ninstrumentcatcode ? selectedRecord.ninstrumentcatcode.value : transactionStatus.NA,\r\n                    stestsynonym: selectedRecord.stestsynonym,\r\n                    ncost: selectedRecord.ncost,\r\n                    nsorter: selectedRecord.nsorter,\r\n                    nspecsampletypecode: selectedRecord.nspecsampletypecode\r\n                },\r\n                testgrouptestfile, userinfo\r\n            }\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Test\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveTree = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo\r\n        };\r\n        if (operation === \"update\") {\r\n            const selectedNode = this.props.Login.masterData.selectedNode;\r\n            inputData[\"treetemplatemanipulation\"] = {\r\n                ntemplatemanipulationcode: selectedRecord.ntemplatemanipulationcode,\r\n                sleveldescription: selectedRecord.sleveldescription,\r\n                nsampletypecode: selectedNode.nsampletypecode,\r\n                ntreeversiontempcode: selectedNode.ntreeversiontempcode,\r\n                nproductcatcode: selectedNode.nproductcatcode,\r\n                nproductcode: selectedNode.nproductcode,\r\n            }\r\n            inputData[\"selectednode\"] = this.props.Login.masterData.ActiveKey;\r\n        } else {\r\n            const TreetempTranstestGroup = this.props.Login.TreetempTranstestGroup;\r\n            const filterData = this.state.filterData;\r\n            const selectedRecord = this.state.selectedRecord;\r\n            let treetemplatemanipulation = [];\r\n            let tempArray = filterRecordBasedOnTwoArrays(TreetempTranstestGroup, selectedRecord.treetemplatemanipulation, \"ntemptranstestgroupcode\");\r\n\r\n            tempArray.map(item => {\r\n                const treeData = {\r\n                    ntreeversiontempcode: item.ntreeversiontempcode,\r\n                    npositioncode: item.nlevelno - 1,\r\n                    sleveldescription: item.sleveldescription,\r\n                    ntemptranstestgroupcode: item.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: \"\",\r\n                    nnextchildcode: item.schildnode,\r\n                    ntemplatemanipulationcode: item.ntemplatemanipulationcode,\r\n                    isreadonly: item.ntemplatemanipulationcode > 0 ? true : false,\r\n                    slevelformat: item.slevelformat\r\n                }\r\n                return treetemplatemanipulation.push(treeData);\r\n            });\r\n\r\n\r\n            selectedRecord.treetemplatemanipulation.map(item => {\r\n                const treeTemplateManip = TreetempTranstestGroup.filter(temp => temp.ntemptranstestgroupcode === item.ntemptranstestgroupcode);\r\n                if (treeTemplateManip.length > 0) {\r\n                    item[\"ntemplatemanipulationcode\"] = treeTemplateManip[\"ntemplatemanipulationcode\"];\r\n                } else {\r\n                    item[\"ntemplatemanipulationcode\"] = 0;\r\n                }\r\n                return treetemplatemanipulation.push(item);\r\n            });\r\n\r\n            inputData[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n            inputData[\"sampletype\"] = filterData.nsampletypecode.item;\r\n            inputData[\"ncategorycode\"] = filterData.nproductcatcode.value;\r\n            inputData[\"nproductcode\"] =  filterData.nproductcatcode.item.ncategorybasedflow==transactionStatus.YES?-1:\r\n             filterData.nproductcode.value ? filterData.nproductcode.value : -1;\r\n            inputData[\"ntreeversiontempcode\"] = filterData.ntreeversiontempcode.value;\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Tree\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecification = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n  \r\n        let testGroupSpec = {\r\n            napproveconfversioncode: -1,\r\n            sversion: '',\r\n            napprovalstatus: transactionStatus.DRAFT,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntransactionstatus: selectedRecord[\"ntransactionstatus\"],\r\n            ncomponentrequired: selectedRecord[\"ncomponentrequired\"],\r\n            nprojectcode: selectedRecord[\"nprojectcode\"] ? selectedRecord[\"nprojectcode\"] : -1,\r\n            sspecname: selectedRecord[\"sspecname\"],\r\n            dexpirydate: selectedRecord[\"dexpirydate\"],\r\n            nallottedspeccode: selectedRecord[\"nallottedspeccode\"] ? selectedRecord[\"nallottedspeccode\"] : 0,\r\n            ntzexpirydate: selectedRecord[\"ntzexpirydate\"].value,\r\n            stzexpirydate: selectedRecord[\"ntzexpirydate\"].label\r\n        };\r\n\r\n        const dexpirydate = testGroupSpec[\"dexpirydate\"];\r\n        //need this conversion when the datatype of the field is 'Instant'\r\n        testGroupSpec[\"dexpirydate\"] = formatInputDate(dexpirydate, false);\r\n\r\n        if (operation === \"create\") {\r\n            testGroupSpec[\"ntemplatemanipulationcode\"] = this.props.Login.masterData.selectedNode.ntemplatemanipulationcode\r\n        }\r\n        let ntreeversiontempcode=this.state.filterData.ntreeversiontempcode.value;\r\n\r\n        const inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            testgroupspecification: testGroupSpec,\r\n            treetemplatemanipulation: this.props.Login.masterData.selectedNode,\r\n            selectedspecification: this.props.Login.masterData.SelectedSpecification,\r\n            ntreeversiontempcode:ntreeversiontempcode\r\n        }\r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Specification\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveComponent = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testArray = selectedRecord.ntestcode.map(test => { return test.item });\r\n        const inputData = {\r\n            testgroupspecification: masterData.SelectedSpecification,\r\n            testgroupspecsampletype: [selectedRecord.ncomponentcode.item],\r\n            testgrouptest: testArray,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Component\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecFile = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let specFileArray = [];\r\n        const selectedSpecification = this.props.Login.masterData.SelectedSpecification;\r\n        let specFile = {\r\n            nallottedspeccode: selectedSpecification.nallottedspeccode,\r\n            nspecfilecode: selectedRecord.nspecfilecode ? selectedRecord.nspecfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, specFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    specFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                specFile[\"sfilename\"] = selectedRecord.sfilename;\r\n                specFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                specFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                specFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                specFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                specFileArray.push(specFile);\r\n            }\r\n        } else {\r\n            specFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\r\n            specFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\r\n            specFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            specFile[\"ssystemfilename\"] = \"\";\r\n            specFile[\"nfilesize\"] = 0;\r\n            specFileArray.push(specFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"testgroupspecification\", JSON.stringify(selectedSpecification));\r\n        formData.append(\"testgroupspecfile\", JSON.stringify(specFileArray));\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            classUrl: \"testgroup\",\r\n            saveType, formRef, methodUrl: \"SpecificationFile\"\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteSpecRecord = (deleteParam) => {\r\n        const selectedRecord = deleteParam.selectedRecord;\r\n        if (selectedRecord.napprovalstatus === transactionStatus.DRAFT\r\n            || selectedRecord.napprovalstatus === transactionStatus.CORRECTION) {\r\n            this.deleteRecord(deleteParam);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        if (this.props.Login.masterData.selectedNode) {\r\n            const methodUrl = deleteParam.methodUrl;\r\n            let dataState = this.state.componentDataState;\r\n            const screenName = deleteParam.screenName;\r\n            const inputParam = {\r\n                inputData: {\r\n                    [deleteParam.keyName]: deleteParam.selectedRecord,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    testgroupspecification: this.props.Login.masterData.SelectedSpecification,\r\n                    treetemplatemanipulation: this.props.Login.masterData.selectedNode,\r\n                    ntreeversiontempcode:deleteParam.filterData.ntreeversiontempcode.value\r\n                },\r\n                classUrl: \"testgroup\",\r\n                operation: deleteParam.operation,\r\n                methodUrl: methodUrl,\r\n                screenName, dataState\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            //if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: screenName, operation: deleteParam.operation, selectedRecord: {}\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROFILENODE\" }));\r\n        }\r\n    }\r\n\r\n    deleteMultipleRecord = (deleteParam) => {\r\n        const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n            || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            const inputParam = {\r\n                inputData: {\r\n                    testgroupspecsampletype: deleteParam.props.testgroupspecsampletype,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    testgroupspecification,\r\n                    treetemplatemanipulation: this.props.Login.masterData.selectedNode\r\n                },\r\n                classUrl: \"testgroup\",\r\n                operation: \"delete\",\r\n                methodUrl: \"TestGroupComponent\",\r\n                screenName: \"IDS_COMPONENT\"\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_COMPONENT\", operation: \"delete\", selectedRecord: {}\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        }\r\n    }\r\n\r\n    onDropSpecFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    validateTestGroupComplete = (operation, inputValue, ncontrolCode) => {\r\n        if (inputValue.testgroupspecification) {\r\n            if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                return rsapi.post(\"testgroup/validateTestGroupComplete\", {\r\n                    nallottedspeccode: inputValue.testgroupspecification.nallottedspeccode,\r\n                    \"userinfo\": this.props.Login.userInfo\r\n                })\r\n                    .then(response => {\r\n                        if (response.data && response.data.length > 0) {\r\n                            const inactiveTestArray = [];\r\n                            response.data.map(item => inactiveTestArray.indexOf(item.stestname) === -1 ? inactiveTestArray.push(item.stestname) : \"\");\r\n                            const data = \" [\" + inactiveTestArray + \"] \" + this.props.intl.formatMessage({ id: \"IDS_INACTIVETESTSATCOMPLETE\" })\r\n                            this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                data,\r\n                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                () => this.completeSpecification(operation, inputValue, ncontrolCode),\r\n                                false,\r\n                                undefined);\r\n                        }\r\n                        else {\r\n                            this.completeSpecification(operation, inputValue, ncontrolCode);\r\n                        }\r\n\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                        }\r\n                        else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    retireSpec = (operation, selectedSpecification, approvalRoleActionDetail, retireSpecId) => {\r\n        if (selectedSpecification.testgroupspecification.napprovalstatus !== transactionStatus.RETIRED) {\r\n            if (approvalRoleActionDetail.length > 0 && approvalRoleActionDetail[0].nlevelno === transactionStatus.ACTIVE) {\r\n                if (selectedSpecification.testgroupspecification[\"napprovalstatus\"] === approvalRoleActionDetail[0].ntransactionstatus) {\r\n                    const inputParam = {\r\n                        inputData: {\r\n                            nallottedspeccode: selectedSpecification.testgroupspecification,\r\n                            treetemplatemanipulation: selectedSpecification.treetemplatemanipulation,\r\n                            approvalRoleActionDetail: approvalRoleActionDetail[0],\r\n                            userinfo: this.props.Login.userInfo,\r\n                            operation: operation\r\n                        },\r\n                        classUrl: \"testgroup\",\r\n                        operation: operation,\r\n                        methodUrl: \"Spec\",\r\n                        screenName: \"IDS_STUDYPLAN\"\r\n                    }\r\n\r\n\r\n                    let masterData = this.props.Login.masterData\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, retireSpecId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData },\r\n                                openModal: true, screenName: \"IDS_STUDYPLAN\", operation: operation, selectedRecord: {}\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.retireSpecification(inputParam.inputData, masterData);\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_RETIRECANBECONEAFTERFINAL\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FINALLEVELAPPROVE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYRETIRED\" }));\r\n        }\r\n\r\n    }\r\n\r\n    specificationReport = (operation, ncontrolCode) => {\r\n        if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\r\n            const inputParam = {\r\n                inputData: {\r\n                    sprimarykeyname: 'nallottedspeccode',\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ncontrolcode: ncontrolCode,\r\n                    nregtypecode: transactionStatus.NA,\r\n                    nregsubtypecode: transactionStatus.NA,\r\n                    nreportmodulecode: transactionStatus.NA,\r\n                    nreporttypecode: REPORTTYPE.CONTROLBASED,\r\n                    nreportdecisiontypecode: transactionStatus.NA,\r\n                    certificatetypecode: transactionStatus.NA,\r\n                    nsectioncode: transactionStatus.NA,\r\n                    operation: operation,\r\n                    nallottedspeccode: this.props.Login.masterData['SelectedSpecification']['nallottedspeccode'],\r\n                    selectedComponent: this.props.Login.masterData[\"SelectedComponent\"],\r\n                    selectedTest: this.props.Login.masterData[\"SelectedTest\"],\r\n                    filterData:this.state.filterData\r\n\r\n                },\r\n            }\r\n            this.props.reportSpecification(inputParam['inputData']);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\" }));\r\n        }\r\n    }\r\n\r\n    completeSpecification = (operation, inputValue, ncontrolCode) => {\r\n        if (inputValue.testgroupspecification) {\r\n            if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n\r\n                const inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        ntreeversiontempcode:this.state.filterData.ntreeversiontempcode.value,\r\n                        testGroupTest:this.props.Login.masterData.TestGroupTest,\r\n                        ...inputValue\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: operation,\r\n                    methodUrl: \"Specification\",\r\n                    screenName: \"IDS_SPECIFICATION\"\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: \"IDS_SPECIFICATION\", operation: operation, selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    approveSpecification = (status, needEsign) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const inputParam = {\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                treetemplatemanipulation: masterData.selectedNode,\r\n                ntreeversiontempcode:this.state.filterData.ntreeversiontempcode.value,\r\n                testgroupspecification: {\r\n                    ...masterData.SelectedSpecification,\r\n                    napprovalstatus: status\r\n                }\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: \"approve\",\r\n            methodUrl: \"Specification\",\r\n            screenName: \"IDS_SPECIFICATION\"\r\n        }\r\n        if (needEsign === transactionStatus.YES) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_SPECIFICATION\", operation: \"approve\", selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo, optional) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"ntestcode\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                } else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                }\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[\"parameterTypeCode\"] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    generateBreadCrumData(filterData) {\r\n        if (filterData && Object.values(filterData).length > 0 && filterData.nsampletypecode && filterData.nsampletypecode.item) {\r\n            this.breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                },\r\n                {\r\n                    \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCTCATEGORY\" :\r\n                        filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\r\n                    \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\r\n                },\r\n                \r\n                {\r\n                    \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? \"IDS_PRODUCT\" :\r\n                        filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : \"\",\r\n                    \"value\": filterData.nproductcode ? filterData.nproductcode.label : \"\"\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TREETEMPLATEVERSION\",\r\n                    \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let filterData = this.state.filterData || {};\r\n        let isStateChanged = false;\r\n        let tempFilterData = this.state.tempFilterData || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isStateChanged = true;\r\n        }\r\n\r\n        if (this.props.Login.tempFilterData !== previousProps.Login.tempFilterData) {\r\n            tempFilterData = this.props.Login.tempFilterData || {};\r\n            isStateChanged = true;\r\n        }\r\n        let sampleType = this.state.sampleType || [];\r\n        if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n            const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsampletypecode\", \"ascending\", false);\r\n            sampleType = sampleTypeMap.get(\"OptionList\");\r\n            tempFilterData[\"nsampletypecode\"] = sampleType.length ? sampleType[0] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n        let productCategory = this.state.productCategory || [];\r\n        if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\r\n            const productCatMap = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", \"nproductcatcode\", \"ascending\", false);\r\n            productCategory = productCatMap.get(\"OptionList\");\r\n            tempFilterData[\"nproductcatcode\"] = productCategory.length > 0 ? productCategory[0] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n        let product = this.state.product || [];\r\n        if (this.props.Login.masterData.Product !== previousProps.Login.masterData.Product) {\r\n            const productMap = constructOptionList(this.props.Login.masterData.Product || [], \"nproductcode\", \"sproductname\", \"nproductcode\", \"ascending\", false);\r\n            product = productMap.get(\"OptionList\");\r\n            tempFilterData[\"nproductcode\"] = product.length > 0 ? product[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let treeVersionTemplate = this.state.treeVersionTemplate || [];\r\n        if (this.props.Login.masterData.TreeVersionTemplate !== previousProps.Login.masterData.TreeVersionTemplate) {\r\n            const templateMap = constructOptionList(this.props.Login.masterData.TreeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", \"ntreeversiontempcode\", \"ascending\", false);\r\n            treeVersionTemplate = templateMap.get(\"OptionList\");\r\n            tempFilterData[\"ntreeversiontempcode\"] = treeVersionTemplate.length > 0 ? treeVersionTemplate[treeVersionTemplate.length - 1] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n\r\n        // if (this.props.Login.masterData.TestGroupTestParameter && this.props.Login.masterData.TestGroupTestParameter !== previousProps.Login.masterData.TestGroupTestParameter) {\r\n        //     sortData(this.props.Login.masterData.TestGroupTestParameter, \"ascending\", \"nsorter\");\r\n        // }\r\n\r\n        // if (this.props.Login.masterData.TestGroupTesT && this.props.Login.masterData.TestGroupTesT !== previousProps.Login.masterData.TestGroupTesT) {\r\n        //     sortData(this.props.Login.masterData.TestGroupTesTest, \"ascending\", \"nsorter\");\r\n        // }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || [];\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            filterData = { ...tempFilterData };\r\n            this.generateBreadCrumData(filterData);\r\n        }\r\n\r\n        if (this.props.Login.filterData !== previousProps.Login.filterData) {\r\n            filterData = { ...this.props.Login.filterData };\r\n            this.generateBreadCrumData(filterData);\r\n            isStateChanged = true;\r\n        }\r\n        // else if (filterData !== previousState.filterData) {\r\n        //     filterData = { ...tempFilterData };\r\n        //     this.generateBreadCrumData(filterData);\r\n        // }\r\n\r\n        let  historyDataState = this.state.historyDataState;\r\n        if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n            historyDataState = this.props.Login.historyDataState;\r\n            isStateChanged = true;\r\n        }\r\n\r\n        if (isStateChanged) {\r\n            this.setState({\r\n                selectedRecord, tempFilterData, filterData, userRoleControlRights, controlMap,\r\n                sampleType, productCategory, product, treeVersionTemplate, historyDataState\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, filterTestGroup, createTree, editTree, sampleTypeOnChange,\r\n    getTestGroupDetails, validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent,\r\n    changeTestCategory, addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter,\r\n    addTestFile, editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData,\r\n    viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification\r\n})(injectIntl(TestGroup));"]},"metadata":{},"sourceType":"module"}