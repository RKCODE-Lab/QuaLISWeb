{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\Material\\\\DynamicSlideoutMaterial.jsx\";\nimport React from 'react';\nimport { Row, Col, Button, Form, InputGroup } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { toast } from 'react-toastify';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormEmail from '../../components/form-email/form-email.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport DropZone from '../../components/dropzone/dropzone.component';\nimport { faSleigh } from '@fortawesome/free-solid-svg-icons';\n\nclass DynamicSlideoutMaterial extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.renderSwitch = (control, selectedRecord) => {\n      console.log('-------> ', this.props); //console.log(\"control:\", control, selectedRecord);\n      //const editfield = this.props.editfield && this.props.editfield\n\n      const index = this.props.editfield ? this.props.editfield.findIndex(x => x.label === control.label) : -1;\n      let checkReadOnly = false;\n\n      if (index !== -1) {\n        const listdata = this.props.editfield[index] && this.props.editfield[index].editableuntill || [];\n        checkReadOnly = listdata ? this.props.selectedSample && this.props.selectedSample.ntransactionstatus ? !listdata.includes(this.props.selectedSample.ntransactionstatus) : false : false;\n      }\n\n      switch (control.inputtype) {\n        case 'combo':\n          {\n            // console.log(control.label)\n            // let comboData = control.squestiondata ? control.squestiondata.split(\",\") : []\n            // let options = comboData ? comboData.map(option => ({ \"value\": option, \"label\": option })) : []\n            //  console.log(control.label, this.props.selectedRecord[control.label])\n            return (control.label === 'Section' || control.label === 'Site') && this.props.ismaterialSectionneed ? this.props.ismaterialSectionneed === transactionStatus.YES ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.label === 'Section' ? this.props.isSectionneed === transactionStatus.YES ? true : false : control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : [],\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isClearable: control.label === 'Section' ? this.props.isSectionneed === transactionStatus.YES ? false : true : control.mandatory ? false : true,\n              isDisabled: control.label === 'Inventory Transaction Type' || control.label === 'Transaction Type' ? this.props.disablefields ? true : false : control.label === 'Next Validation Period' ? this.props.enableDisableNextValidation === 4 ? true : false : control.label === 'Section' ? this.props.operation === 'update' && this.props.screenname === 'IDS_MATERIAL' && this.props.isBreadCrumbCategory === true ? true : false : control.label === 'Open Expiry Period' ? this.props.enableDisableOpenExpiry === 4 ? true : false : control.label === 'Expiry Policy Period' ? this.props.enableDisableExpiryPolicy !== 'Expiry policy' ? true : false : control.readonly ? control.readonly : checkReadOnly //    isDisabled={control.label==='Expiry Policy Period'?\n              //        this.props.enableDisableExpiryPolicy===4?true:false:\n              //        control.readonly}\n              //    isDisabled={control.readonly}\n              //   isDisabled={control.readonly?\n              //        control.readonly:checkReadOnly}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 29\n              }\n            }) : \"\" : /*#__PURE__*/React.createElement(FormSelectSearch, {\n              name: control.label,\n              as: \"select\",\n              onChange: event => this.props.onComboChange(event, control),\n              formLabel: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              placeholder: this.props.intl.formatMessage({\n                id: \"IDS_SELECTRECORD\"\n              }),\n              isMandatory: control.label === 'Section' ? this.props.isSectionneed === transactionStatus.YES ? true : false : control.mandatory,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              options: this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : [],\n              optionId: \"value\",\n              optionValue: \"label\",\n              isMulti: false,\n              isClearable: control.label === 'Section' ? this.props.isSectionneed === transactionStatus.YES ? false : true : control.mandatory ? false : true,\n              isDisabled: control.label === 'Inventory Transaction Type' || control.label === 'Transaction Type' ? this.props.disablefields ? true : false : control.label === 'Next Validation Period' ? this.props.enableDisableNextValidation === 4 ? true : false : control.label === 'Open Expiry Period' ? this.props.enableDisableOpenExpiry === 4 ? true : false : control.label === 'Expiry Policy Period' ? this.props.enableDisableExpiryPolicy !== 'Expiry policy' ? true : false : control.readonly ? control.readonly : checkReadOnly //    isDisabled={control.label==='Expiry Policy Period'?\n              //        this.props.enableDisableExpiryPolicy===4?true:false:\n              //        control.readonly}\n              //    isDisabled={control.readonly}\n              //   isDisabled={control.readonly?\n              //        control.readonly:checkReadOnly} \n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 25\n              }\n            });\n          }\n\n        case 'textinput':\n          {\n            return /*#__PURE__*/React.createElement(FormInput, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"text\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onInputOnChange(event, control.label) // id={control.nchecklistversionqbcode}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'email':\n          {\n            return /*#__PURE__*/React.createElement(FormEmail, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"email\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              onChange: event => this.props.onInputOnChange(event, control.label) // id={control.nchecklistversionqbcode}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'textarea':\n          {\n            // console.log(control.label, this.props.selectedRecord[control.label])\n            return /*#__PURE__*/React.createElement(FormTextarea, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              type: \"text\",\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              onChange: event => this.props.onInputOnChange(event, control.label),\n              rows: \"2\",\n              maxLength: control.sfieldlength,\n              isDisabled: control.readonly ? control.readonly : checkReadOnly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'toggle':\n          return /*#__PURE__*/React.createElement(CustomSwitch, {\n            label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n            type: \"switch\",\n            name: control.label,\n            onChange: event => this.props.onInputOnChange(event),\n            placeholder: control.label,\n            defaultValue: this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false,\n            checked: this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false //disabled={props.selectedRecord[props.extractedColumnList[2].controlName] === 3 ? true :false}\n            ,\n            disabled: control.label === 'Next Validation Need' ? this.props.enableDisableNextValidationNeed === 4 ? true : false : control.label === 'Need Expiry' ? this.props.enableDisableNeedExpiry === 4 ? true : false : control.readonly ? control.readonly : checkReadOnly,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 21\n            }\n          });\n\n        case 5:\n          {\n            return /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 190,\n                columnNumber: 25\n              }\n            }, control.isMultiLingualLabel ? this.props.intl.formatMessage({\n              id: control.squestion\n            }) : control.squestion, control.mandatory && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 70\n              }\n            }, \"*\")));\n          }\n\n        case 6:\n          {\n            return /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              htmlFor: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 25\n              }\n            }, control.squestion, control.mandatory && /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 106\n              }\n            }, \"*\")), /*#__PURE__*/React.createElement(Button, {\n              className: \"btn\",\n              name: control.squestion,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 25\n              }\n            }, control.squestion));\n          }\n\n        case 'Numeric':\n          {\n            return /*#__PURE__*/React.createElement(FormNumericInput, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              className: \"form-control\",\n              type: \"text\",\n              strict: true,\n              value: this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\",\n              isMandatory: control.label === 'Next Validation' ? this.props.enableDisableNextValidation === 3 ? true : false : control.label === 'Reorder Level' ? this.props.ismaterialSectionneed === transactionStatus.YES ? true : false : control.label === 'Expiry Policy Days' ? this.props.enableDisableExpiryPolicy === 'Expiry policy' ? true : false : control.mandatory,\n              required: control.mandatory,\n              maxLength: control.sfieldlength,\n              isDisabled: control.label === 'Next Validation' ? this.props.enableDisableNextValidation === 4 ? true : false : control.label === 'Reorder Level' ? this.props.ismaterialSectionneed && this.props.ismaterialSectionneed === transactionStatus.YES && this.props.operation === 'update' && this.props.isBreadCrumbCategory === true ? true : false : control.label === 'Open Expiry' ? this.props.enableDisableOpenExpiry === 4 ? true : false : control.label === 'Expiry Policy Days' ? this.props.enableDisableExpiryPolicy !== 'Expiry policy' ? true : false : control.readonly ? control.readonly : checkReadOnly // isDisabled={control.readonly}\n              // isDisabled={control.readonly?\n              //     control.readonly:checkReadOnly}\n              ,\n              onChange: event => this.props.onNumericInputChange(event, control.label),\n              precision: this.props.screenname === 'IDS_QUANTITYTRANSACTION' || this.props.screenname === 'IDS_MATERIALINVENTORY' ? control.label === 'Received Quantity' ? this.props.nprecision : control.precision || 0 : control.precision || 0,\n              max: control.max,\n              min: control.min,\n              noStyle: true // id={control.nchecklistversionqbcode}\n              ,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 208,\n                columnNumber: 21\n              }\n            });\n          }\n\n        case 'date':\n          {\n            return (\n              /*#__PURE__*/\n              // <DateTimePicker\n              //     name={control.squestion}\n              //     label={control.squestion}\n              //     placeholderText={\"DD/MM/YYYY\"}\n              //     showTimeSelect={control.dateonly==true?false:true}\n              //     selected={\n              //         selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null\n              //     }\n              //     isMandatory={control.mandatory}\n              //     dateFormat=\"dd/MM/yyyy\"\n              //     className='form-control'\n              //     onChange={(date) => this.props.handleDateChange(date, control.label)}\n              //     isClearable={true}\n              // />\n              React.createElement(React.Fragment, null, control.timezone ? /*#__PURE__*/React.createElement(Row, {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 29\n                }\n              }, /*#__PURE__*/React.createElement(Col, {\n                md: 6,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 271,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(DateTimePicker, {\n                name: control.label,\n                label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n                className: \"form-control\",\n                placeholderText: this.props.intl.formatMessage({\n                  id: \"IDS_SELECTDATE\"\n                }),\n                selected: selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : control.loadcurrentdate ? new Date() : null,\n                dateFormat: control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"],\n                timeInputLabel: this.props.intl.formatMessage({\n                  id: \"IDS_TIME\"\n                }),\n                showTimeInput: control.dateonly === true ? false : true,\n                showTimeSelectOnly: control.timeonly,\n                isDisabled: control.label === 'Expiry Date & Time' ? this.props.isExpiryNeed ? this.props.isExpiryNeed === 4 ? true : false : control.readonly ? control.readonly : checkReadOnly : control.readonly ? control.readonly : checkReadOnly // isClearable={false}\n                ,\n                isMandatory: control.mandatory,\n                maxDate: this.props.CurrentTime,\n                maxTime: this.props.CurrentTime,\n                onChange: date => this.props.handleDateChange(date, control.label),\n                value: this.props.selectedRecord ? this.props.selectedRecord[\"dcollectiondate\"] : new Date(),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 37\n                }\n              })), /*#__PURE__*/React.createElement(Col, {\n                md: 6,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 294,\n                  columnNumber: 33\n                }\n              }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n                name: `tz${control.label}`,\n                as: \"select\",\n                onChange: event => this.props.onComboChange(event, control, `tz${control.label}`),\n                formLabel: this.props.intl.formatMessage({\n                  id: \"IDS_TIMEZONE\"\n                }),\n                placeholder: this.props.intl.formatMessage({\n                  id: \"IDS_SELECTRECORD\"\n                }),\n                isMandatory: true // defaultValue={this.props.defaultTimeZone}\n                ,\n                value: this.props.selectedRecord[`tz${control.label}`] ? this.props.selectedRecord[`tz${control.label}`] : this.props.defaultTimeZone,\n                options: this.props.timeZoneList,\n                optionId: \"value\",\n                optionValue: \"label\",\n                isMulti: false,\n                isDisabled: `tz${control.label}` === 'tzExpiry Date & Time' ? this.props.isExpiryNeed ? this.props.isExpiryNeed === 4 ? true : false : control.readonly ? control.readonly : checkReadOnly : control.readonly ? control.readonly : checkReadOnly // isDisabled={control.readonly}\n                // isDisabled={control.readonly?\n                //     control.readonly:checkReadOnly}\n                ,\n                isSearchable: false,\n                isClearable: false,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 37\n                }\n              }))) : /*#__PURE__*/React.createElement(DateTimePicker, {\n                name: control.label,\n                label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n                className: \"form-control\",\n                placeholderText: this.props.intl.formatMessage({\n                  id: \"IDS_SELECTDATE\"\n                }),\n                selected: selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null,\n                dateFormat: control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"],\n                timeInputLabel: this.props.intl.formatMessage({\n                  id: \"IDS_TIME\"\n                }),\n                showTimeInput: control.dateonly === true ? false : true,\n                showTimeSelectOnly: control.timeonly // isClearable={false}\n                ,\n                isMandatory: control.mandatory,\n                maxDate: this.props.CurrentTime,\n                maxTime: this.props.CurrentTime,\n                onChange: date => this.props.handleDateChange(date, control.label),\n                value: this.props.selectedRecord ? this.props.selectedRecord[\"dcollectiondate\"] : new Date(),\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 29\n                }\n              }))\n            );\n          }\n\n        case 'checkbox':\n          {\n            let checkboxes = control.radioOptions ? control.radioOptions.tags : [];\n            const data = this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label].split(\",\") : [];\n            console.log('checkbox:', checkboxes);\n            return /*#__PURE__*/React.createElement(InputGroup, {\n              size: 'lg',\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 353,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 29\n              }\n            }, control.displayname[this.props.userInfo.slanguagetypecode] || control.label, control.mandatory ? /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 130\n              }\n            }, \"*\") : \"\"), checkboxes.map(checkbox => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"checkbox\",\n              name: control.label,\n              label: control.isMultiLingualLabel ? this.props.intl.formatMessage({\n                id: checkbox.text\n              }) : checkbox.text // label={checkbox.text}\n              ,\n              onChange: event => this.props.onInputOnChange(event, checkbox.text),\n              id: checkbox.id,\n              checked: this.props.selectedRecord[control.label] ? data.includes(checkbox.text.trim()) ? true : false : false,\n              defaultChecked: this.props.selectedRecord[control.label] ? data.includes(checkbox.text.trim()) ? true : false : false // defaultChecked={this.props.selectedRecord[control.label] === 3 ? true : false}\n              ,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              size: 'lg',\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 33\n              }\n            }))));\n          }\n\n        case 'radio':\n          {\n            let radioButtons = control.radioOptions ? control.radioOptions.tags : [];\n            return /*#__PURE__*/React.createElement(\"fieldset\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 21\n              }\n            }, /*#__PURE__*/React.createElement(Form.Group, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 25\n              }\n            }, /*#__PURE__*/React.createElement(Form.Label, {\n              as: \"legend\",\n              htmlFor: control.label,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 29\n              }\n            }, control.displayname[this.props.userInfo.slanguagetypecode] || control.label, control.mandatory ? /*#__PURE__*/React.createElement(\"sup\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 391,\n                columnNumber: 175\n              }\n            }, \"*\") : \"\"), radioButtons.map(radioButton => /*#__PURE__*/React.createElement(Form.Check, {\n              inline: true,\n              type: \"radio\",\n              name: control.label,\n              label: radioButton.text,\n              onChange: event => this.props.onInputOnChange(event, radioButton.text),\n              id: radioButton.id,\n              checked: selectedRecord[control.label] ? radioButton.text.trim() === selectedRecord[control.label].trim() ? true : false : false,\n              defaultChecked: selectedRecord[control.label] ? radioButton.text.trim() === selectedRecord[control.label].trim() ? true : false : false,\n              isMandatory: control.mandatory,\n              required: control.mandatory,\n              disabled: control.readonly ? control.readonly : checkReadOnly,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 394,\n                columnNumber: 33\n              }\n            }))));\n          }\n\n        case 'files':\n          {\n            return /*#__PURE__*/React.createElement(DropZone, {\n              name: control.label,\n              label: control.displayname[this.props.userInfo.slanguagetypecode] || control.label,\n              maxFiles: control.maxFiles || 1,\n              accept: control.accept && control.accept.value,\n              minSize: 0,\n              maxSize: 1,\n              onDrop: event => this.props.onDropFile(event, control.label, 1),\n              multiple: control.maxFiles > 1 ? true : false,\n              editFiles: this.props.selectedRecord ? this.props.selectedRecord : {} // attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.PRN : \"\"}\n              // fileSizeName=\"nfilesize\"\n              ,\n              fileName: control.label,\n              deleteAttachment: this.props.deleteAttachment,\n              actionType: this.props.actionType,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 418,\n                columnNumber: 21\n              }\n            });\n          }\n\n        default:\n          return \"\";\n      }\n    };\n\n    this.onSaveClick = () => {\n      if (this.props.needValidation) {\n        const failedControls = [];\n        const mandatoryFields = [];\n        this.props.templateData.map(control => control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : '');\n        mandatoryFields.forEach(item => {\n          if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\n            if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\n              //to validate FormSelectSearch component\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            } else {\n              if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\n                const alertMessage = item.squestion;\n                failedControls.push(alertMessage);\n              }\n            }\n          } else {\n            const alertMessage = item.squestion;\n            failedControls.push(alertMessage);\n          }\n        }); // console.log(\"validationPassed:\", failedControls);\n\n        if (failedControls.length === 0) {\n          this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n        } else {\n          toast.info(`${this.props.intl.formatMessage({\n            id: \"IDS_ENTER\"\n          })} ${failedControls[0]}`);\n        }\n      } else {\n        this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode);\n      }\n    };\n\n    this.formElement = React.createRef();\n  }\n\n  componentDidMount() {\n    if (this.props.triggerCallback !== undefined && this.props.enableCallback) setTimeout(() => {\n      this.props.triggerCallback(this.formElement.current.clientHeight + 30);\n    }, 200);\n  }\n\n  render() {\n    // this.props.templateData && Object.keys(this.props.templateData).map(design =>\n    // )\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.formElement,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 13\n      }\n    }, this.props.templateData ? this.props.templateData.map(item => /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 29\n      }\n    }, item.children.length > 0 ? item.children.map(column => /*#__PURE__*/React.createElement(Col, {\n      md: 12 / item.children.length,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 41\n      }\n    }, column.children.map(component => {\n      return component.hasOwnProperty(\"children\") ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 61\n        }\n      }, component.children.map(componentrow => /*#__PURE__*/React.createElement(Col, {\n        md: 12 / component.children.length,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 69\n        }\n      }, this.renderSwitch(componentrow, this.props.selectedRecord)))) : /*#__PURE__*/React.createElement(React.Fragment, null, this.renderSwitch(component, this.props.selectedRecord));\n    }))) : \"\")) : \"\");\n  }\n\n}\n\nexport default injectIntl(DynamicSlideoutMaterial);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/Material/DynamicSlideoutMaterial.jsx"],"names":["React","Row","Col","Button","Form","InputGroup","injectIntl","FormTextarea","FormInput","FormSelectSearch","DateTimePicker","transactionStatus","toast","CustomSwitch","FormEmail","FormNumericInput","DropZone","faSleigh","DynamicSlideoutMaterial","Component","constructor","props","renderSwitch","control","selectedRecord","console","log","index","editfield","findIndex","x","label","checkReadOnly","listdata","editableuntill","selectedSample","ntransactionstatus","includes","inputtype","ismaterialSectionneed","YES","event","onComboChange","displayname","userInfo","slanguagetypecode","intl","formatMessage","id","isSectionneed","mandatory","comboData","disablefields","enableDisableNextValidation","operation","screenname","isBreadCrumbCategory","enableDisableOpenExpiry","enableDisableExpiryPolicy","readonly","sfieldlength","onInputOnChange","enableDisableNextValidationNeed","enableDisableNeedExpiry","isMultiLingualLabel","squestion","onNumericInputChange","nprecision","precision","max","min","timezone","Date","loadcurrentdate","dateonly","timeonly","isExpiryNeed","CurrentTime","date","handleDateChange","defaultTimeZone","timeZoneList","checkboxes","radioOptions","tags","data","split","map","checkbox","text","trim","radioButtons","radioButton","maxFiles","accept","value","onDropFile","deleteAttachment","actionType","onSaveClick","needValidation","failedControls","mandatoryFields","templateData","nmandatoryfield","push","forEach","item","nchecklistversionqbcode","sdefaultvalue","length","alertMessage","Login","nregtypecode","nregsubtypecode","info","formElement","createRef","componentDidMount","triggerCallback","undefined","enableCallback","setTimeout","current","clientHeight","render","children","column","component","hasOwnProperty","componentrow"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col, Button, Form, InputGroup } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { transactionStatus } from '../../components/Enumeration'\r\nimport { toast } from 'react-toastify';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormEmail from '../../components/form-email/form-email.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport DropZone from '../../components/dropzone/dropzone.component';\r\nimport { faSleigh } from '@fortawesome/free-solid-svg-icons';\r\nclass DynamicSlideoutMaterial extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.formElement = React.createRef();\r\n    }\r\n    renderSwitch = (control, selectedRecord) => {\r\n        console.log('-------> ', this.props)\r\n        //console.log(\"control:\", control, selectedRecord);\r\n        //const editfield = this.props.editfield && this.props.editfield\r\n        const index = this.props.editfield ?\r\n            this.props.editfield.findIndex(x => x.label === control.label) : -1\r\n        let checkReadOnly = false;\r\n        if (index !== -1) {\r\n            const listdata = (this.props.editfield[index] && this.props.editfield[index].editableuntill) || []\r\n            checkReadOnly = listdata ? this.props.selectedSample && this.props.selectedSample.ntransactionstatus ?\r\n                !listdata.includes(this.props.selectedSample.ntransactionstatus)\r\n                : false : false\r\n        }\r\n\r\n\r\n        switch (control.inputtype) {\r\n            case 'combo': {\r\n                // console.log(control.label)\r\n                // let comboData = control.squestiondata ? control.squestiondata.split(\",\") : []\r\n                // let options = comboData ? comboData.map(option => ({ \"value\": option, \"label\": option })) : []\r\n                //  console.log(control.label, this.props.selectedRecord[control.label])\r\n\r\n                return (\r\n                    (control.label === 'Section' || control.label === 'Site') && this.props.ismaterialSectionneed ?\r\n                        this.props.ismaterialSectionneed === transactionStatus.YES ?\r\n                            <FormSelectSearch\r\n\r\n                                name={control.label}\r\n                                as={\"select\"}\r\n                                onChange={(event) => this.props.onComboChange(event, control)}\r\n                                formLabel={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                isMandatory={\r\n                                    control.label === 'Section' ? this.props.isSectionneed === transactionStatus.YES ? true : false : control.mandatory}\r\n                                value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                                options={this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : []}\r\n                                optionId={\"value\"}\r\n                                optionValue={\"label\"}\r\n                                isMulti={false}\r\n                                isClearable={control.label === 'Section' ? this.props.isSectionneed === transactionStatus.YES ? false : true : control.mandatory ? false : true\r\n                                } isDisabled={control.label === 'Inventory Transaction Type'||control.label === 'Transaction Type'\r\n                                ?this.props.disablefields?true:false:control.label === 'Next Validation Period' ? this.props.enableDisableNextValidation === 4 ? true : false :\r\n                                    control.label === 'Section' ?\r\n                                        this.props.operation === 'update' && this.props.screenname === 'IDS_MATERIAL' &&\r\n                                            this.props.isBreadCrumbCategory === true ? true : false :\r\n                                        control.label === 'Open Expiry Period' ?\r\n                                            this.props.enableDisableOpenExpiry === 4 ? true : false :\r\n                                            control.label === 'Expiry Policy Period' ?\r\n                                                this.props.enableDisableExpiryPolicy !== 'Expiry policy' ? true : false :\r\n                                                control.readonly ?\r\n                                                    control.readonly : checkReadOnly}\r\n                            //    isDisabled={control.label==='Expiry Policy Period'?\r\n                            //        this.props.enableDisableExpiryPolicy===4?true:false:\r\n                            //        control.readonly}\r\n\r\n                            //    isDisabled={control.readonly}\r\n\r\n                            //   isDisabled={control.readonly?\r\n                            //        control.readonly:checkReadOnly}\r\n\r\n                            /> : \"\" :\r\n                        <FormSelectSearch\r\n                            name={control.label}\r\n                            as={\"select\"}\r\n                            onChange={(event) => this.props.onComboChange(event, control)}\r\n                            formLabel={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={\r\n                                control.label === 'Section' ? this.props.isSectionneed === transactionStatus.YES ? true : false : control.mandatory}\r\n                            value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                            options={this.props.comboData && this.props.comboData[control.label] ? this.props.comboData[control.label] : []}\r\n                            optionId={\"value\"}\r\n                            optionValue={\"label\"}\r\n                            isMulti={false}\r\n                            isClearable={control.label === 'Section' ? this.props.isSectionneed === transactionStatus.YES ? false : true : control.mandatory ? false : true\r\n                            }\r\n                            isDisabled={control.label === 'Inventory Transaction Type'||control.label === 'Transaction Type'\r\n                             ? this.props.disablefields ? true : false : control.label === 'Next Validation Period' ? this.props.enableDisableNextValidation === 4 ? true : false :\r\n                                control.label === 'Open Expiry Period' ?\r\n                                    this.props.enableDisableOpenExpiry === 4 ? true : false :\r\n                                    control.label === 'Expiry Policy Period' ?\r\n                                        this.props.enableDisableExpiryPolicy !== 'Expiry policy' ? true : false :\r\n                                        control.readonly ?\r\n                                            control.readonly : checkReadOnly}\r\n                        //    isDisabled={control.label==='Expiry Policy Period'?\r\n                        //        this.props.enableDisableExpiryPolicy===4?true:false:\r\n                        //        control.readonly}\r\n\r\n                        //    isDisabled={control.readonly}\r\n\r\n                        //   isDisabled={control.readonly?\r\n                        //        control.readonly:checkReadOnly} \r\n                        />\r\n\r\n                );\r\n            }\r\n            case 'textinput': {\r\n                return (\r\n                    <FormInput\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"text\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                    // id={control.nchecklistversionqbcode}\r\n                    />\r\n\r\n                );\r\n            }\r\n            case 'email': {\r\n                return (\r\n                    <FormEmail\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"email\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                    // id={control.nchecklistversionqbcode}\r\n                    />\r\n                );\r\n            }\r\n            case 'textarea': {\r\n                // console.log(control.label, this.props.selectedRecord[control.label])\r\n                return (\r\n                    <FormTextarea\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"text\"\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.mandatory}\r\n                        required={control.mandatory}\r\n                        onChange={(event) => this.props.onInputOnChange(event, control.label)}\r\n                        rows=\"2\"\r\n                        maxLength={control.sfieldlength}\r\n                        isDisabled={control.readonly ?\r\n                            control.readonly : checkReadOnly}\r\n                    />\r\n                );\r\n            }\r\n            case 'toggle':\r\n                return (\r\n                    <CustomSwitch\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        type=\"switch\"\r\n                        name={control.label}\r\n                        onChange={(event) => this.props.onInputOnChange(event)}\r\n                        placeholder={control.label}\r\n                        defaultValue={this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                        checked={this.props.selectedRecord[control.label] && this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                        //disabled={props.selectedRecord[props.extractedColumnList[2].controlName] === 3 ? true :false}\r\n                        disabled={\r\n                            control.label === 'Next Validation Need' ? this.props.enableDisableNextValidationNeed === 4 ? true : false : control.label === 'Need Expiry' ?\r\n                                this.props.enableDisableNeedExpiry === 4 ? true : false :\r\n                                control.readonly ?\r\n                                    control.readonly : checkReadOnly}\r\n                    />\r\n                );\r\n            case 5: {\r\n                return (\r\n                    <Form.Group>\r\n                        <Form.Label>{control.isMultiLingualLabel ? this.props.intl.formatMessage({\r\n                            id: control.squestion\r\n                        }) : control.squestion}{control.mandatory && <sup>*</sup>}</Form.Label>{ }\r\n                    </Form.Group>\r\n                );\r\n            }\r\n            case 6: {\r\n                return (\r\n                    <Form.Group>\r\n                        <Form.Label htmlFor={control.squestion}>{control.squestion}{control.mandatory && <sup>*</sup>}</Form.Label>\r\n                        <Button className=\"btn\" name={control.squestion}>\r\n                            {control.squestion}\r\n                        </Button>\r\n                    </Form.Group>\r\n                );\r\n            }\r\n            case 'Numeric': {\r\n                return (\r\n                    <FormNumericInput\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        strict={true}\r\n                        value={this.props.selectedRecord[control.label] ? this.props.selectedRecord[control.label] : \"\"}\r\n                        isMandatory={control.label === 'Next Validation' ? this.props.enableDisableNextValidation === 3 ? true : false : control.label === 'Reorder Level' ?\r\n                            this.props.ismaterialSectionneed === transactionStatus.YES ? true : false : control.label === 'Expiry Policy Days' ?\r\n                                this.props.enableDisableExpiryPolicy === 'Expiry policy' ? true : false :\r\n                                control.mandatory}\r\n                        required={\r\n                            control.mandatory}\r\n                        maxLength={control.sfieldlength}\r\n\r\n                        isDisabled={control.label === 'Next Validation' ? this.props.enableDisableNextValidation === 4 ? true : false : control.label === 'Reorder Level' ?\r\n                            this.props.ismaterialSectionneed &&\r\n                                this.props.ismaterialSectionneed === transactionStatus.YES &&\r\n                                this.props.operation === 'update' &&\r\n                                this.props.isBreadCrumbCategory === true ? true : false :\r\n                            control.label === 'Open Expiry' ?\r\n                                this.props.enableDisableOpenExpiry === 4 ? true : false :\r\n                                control.label === 'Expiry Policy Days' ?\r\n                                    this.props.enableDisableExpiryPolicy !== 'Expiry policy' ? true : false :\r\n                                    control.readonly ?\r\n                                        control.readonly : checkReadOnly}\r\n\r\n                        // isDisabled={control.readonly}\r\n\r\n                        // isDisabled={control.readonly?\r\n                        //     control.readonly:checkReadOnly}\r\n\r\n                        onChange={(event) => this.props.onNumericInputChange(event, control.label)}\r\n                        precision={this.props.screenname === 'IDS_QUANTITYTRANSACTION'\r\n                            || this.props.screenname === 'IDS_MATERIALINVENTORY' ? control.label === 'Received Quantity' ?\r\n                            this.props.nprecision : control.precision || 0 :\r\n                            control.precision || 0}\r\n                        max={control.max}\r\n                        min={control.min}\r\n                        noStyle={true}\r\n                    // id={control.nchecklistversionqbcode}\r\n                    />\r\n                )\r\n            }\r\n            case 'date': {\r\n                return (\r\n                    // <DateTimePicker\r\n                    //     name={control.squestion}\r\n                    //     label={control.squestion}\r\n                    //     placeholderText={\"DD/MM/YYYY\"}\r\n                    //     showTimeSelect={control.dateonly==true?false:true}\r\n                    //     selected={\r\n                    //         selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null\r\n                    //     }\r\n                    //     isMandatory={control.mandatory}\r\n                    //     dateFormat=\"dd/MM/yyyy\"\r\n                    //     className='form-control'\r\n                    //     onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                    //     isClearable={true}\r\n                    // />\r\n                    <>\r\n                        {control.timezone ?\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <DateTimePicker\r\n                                        name={control.label}\r\n                                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                        className='form-control'\r\n                                        placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                        selected={selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : control.loadcurrentdate ? new Date() : null}\r\n                                        dateFormat={control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"]}\r\n                                        timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                        showTimeInput={control.dateonly === true ? false : true}\r\n                                        showTimeSelectOnly={control.timeonly}\r\n                                        isDisabled={control.label === 'Expiry Date & Time' ?\r\n                                            this.props.isExpiryNeed ? this.props.isExpiryNeed === 4 ? true : false : control.readonly ?\r\n                                                control.readonly : checkReadOnly : control.readonly ?\r\n                                                control.readonly : checkReadOnly}\r\n                                        // isClearable={false}\r\n                                        isMandatory={control.mandatory}\r\n                                        maxDate={this.props.CurrentTime}\r\n                                        maxTime={this.props.CurrentTime}\r\n                                        onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                                        value={this.props.selectedRecord ? this.props.selectedRecord[\"dcollectiondate\"] : new Date()}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormSelectSearch\r\n                                        name={`tz${control.label}`}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.props.onComboChange(event, control, `tz${control.label}`)}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                                        placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                        isMandatory={true}\r\n                                        // defaultValue={this.props.defaultTimeZone}\r\n                                        value={this.props.selectedRecord[`tz${control.label}`] ? this.props.selectedRecord[`tz${control.label}`] : this.props.defaultTimeZone}\r\n                                        options={this.props.timeZoneList}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n\r\n                                        isDisabled={`tz${control.label}` === 'tzExpiry Date & Time' ?\r\n                                            this.props.isExpiryNeed ? this.props.isExpiryNeed === 4 ? true : false : control.readonly ?\r\n                                                control.readonly : checkReadOnly : control.readonly ?\r\n                                                control.readonly : checkReadOnly}\r\n\r\n                                        // isDisabled={control.readonly}\r\n\r\n                                        // isDisabled={control.readonly?\r\n                                        //     control.readonly:checkReadOnly}\r\n\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row> :\r\n                            <DateTimePicker\r\n                                name={control.label}\r\n                                label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                                className='form-control'\r\n                                placeholderText={this.props.intl.formatMessage({ id: \"IDS_SELECTDATE\" })}\r\n                                selected={selectedRecord && this.props.selectedRecord[control.label] ? new Date(this.props.selectedRecord[control.label]) : null}\r\n                                dateFormat={control.dateonly === true ? this.props.userInfo[\"ssitedate\"] : control.timeonly ? 'HH:mm' : this.props.userInfo[\"ssitedatetime\"]}\r\n                                timeInputLabel={this.props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                                showTimeInput={control.dateonly === true ? false : true}\r\n                                showTimeSelectOnly={control.timeonly}\r\n                                // isClearable={false}\r\n                                isMandatory={control.mandatory}\r\n                                maxDate={this.props.CurrentTime}\r\n                                maxTime={this.props.CurrentTime}\r\n                                onChange={(date) => this.props.handleDateChange(date, control.label)}\r\n                                value={this.props.selectedRecord ? this.props.selectedRecord[\"dcollectiondate\"] : new Date()}\r\n                            />\r\n                        }\r\n\r\n                    </>\r\n                );\r\n            }\r\n            case 'checkbox': {\r\n                let checkboxes = control.radioOptions ? control.radioOptions.tags : []\r\n                const data = this.props.selectedRecord[control.label] ?\r\n                    this.props.selectedRecord[control.label].split(\",\") : [];\r\n                console.log('checkbox:', checkboxes)\r\n\r\n                return (\r\n                    <InputGroup size={'lg'}>\r\n                        <Form.Group>\r\n                            <Form.Label as=\"legend\" htmlFor={control.label}>{\r\n                                control.displayname[this.props.userInfo.slanguagetypecode] || control.label}{control.mandatory ? <sup>*</sup> : \"\"}</Form.Label>\r\n                            {checkboxes.map(checkbox =>\r\n\r\n                                <Form.Check\r\n                                    inline={true}\r\n                                    type=\"checkbox\"\r\n                                    name={control.label}\r\n                                    label={control.isMultiLingualLabel ? this.props.intl.formatMessage({ id: checkbox.text }) : checkbox.text}\r\n                                    // label={checkbox.text}\r\n                                    onChange={(event) => this.props.onInputOnChange(event, checkbox.text)}\r\n                                    id={checkbox.id}\r\n\r\n                                    checked={this.props.selectedRecord[control.label] ?\r\n                                        data.includes(checkbox.text.trim()) ? true : false : false}\r\n\r\n                                    defaultChecked={this.props.selectedRecord[control.label] ?\r\n                                        data.includes(checkbox.text.trim()) ? true : false : false}\r\n\r\n                                    // defaultChecked={this.props.selectedRecord[control.label] === 3 ? true : false}\r\n                                    isMandatory={control.mandatory}\r\n                                    required={control.mandatory}\r\n                                    size={'lg'}\r\n                                />\r\n\r\n                            )}\r\n                        </Form.Group>\r\n                    </InputGroup >\r\n\r\n                );\r\n            }\r\n            case 'radio': {\r\n                let radioButtons = control.radioOptions ? control.radioOptions.tags : []\r\n                return (\r\n                    <fieldset>\r\n                        <Form.Group>\r\n                            <Form.Label as=\"legend\" htmlFor={control.label}>{control.displayname[this.props.userInfo.slanguagetypecode] || control.label}{control.mandatory ? <sup>*</sup> : \"\"}</Form.Label>\r\n                            {radioButtons.map(radioButton =>\r\n\r\n                                <Form.Check\r\n                                    inline={true}\r\n                                    type=\"radio\"\r\n                                    name={control.label}\r\n                                    label={radioButton.text}\r\n                                    onChange={(event) => this.props.onInputOnChange(event, radioButton.text)}\r\n                                    id={radioButton.id}\r\n                                    checked={selectedRecord[control.label] ?\r\n                                        radioButton.text.trim() === selectedRecord[control.label].trim() ? true : false : false}\r\n                                    defaultChecked={selectedRecord[control.label] ?\r\n                                        radioButton.text.trim() === selectedRecord[control.label].trim() ? true : false : false}\r\n                                    isMandatory={control.mandatory}\r\n                                    required={control.mandatory}\r\n                                    disabled={control.readonly ?\r\n                                        control.readonly : checkReadOnly}\r\n                                />\r\n\r\n                            )}\r\n                        </Form.Group>\r\n                    </fieldset>\r\n                );\r\n            }\r\n            case 'files': {\r\n                return (\r\n                    <DropZone\r\n                        name={control.label}\r\n                        label={control.displayname[this.props.userInfo.slanguagetypecode] || control.label}\r\n                        maxFiles={control.maxFiles || 1}\r\n                        accept={control.accept && control.accept.value}\r\n                        minSize={0}\r\n                        maxSize={1}\r\n                        onDrop={(event) => this.props.onDropFile(event, control.label, 1)}\r\n                        multiple={control.maxFiles > 1 ? true : false}\r\n                        editFiles={this.props.selectedRecord ? this.props.selectedRecord : {}}\r\n                        // attachmentTypeCode={this.props.operation === \"update\" ? attachmentType.PRN : \"\"}\r\n                        // fileSizeName=\"nfilesize\"\r\n                        fileName={control.label}\r\n                        deleteAttachment={this.props.deleteAttachment}\r\n                        actionType={this.props.actionType}\r\n                    />\r\n                )\r\n            }\r\n            default:\r\n                return (\"\");\r\n        }\r\n    }\r\n    onSaveClick = () => {\r\n        if (this.props.needValidation) {\r\n            const failedControls = [];\r\n            const mandatoryFields = [];\r\n            this.props.templateData.map(control =>\r\n                control.nmandatoryfield === transactionStatus.YES ? mandatoryFields.push(control) : ''\r\n\r\n            )\r\n            mandatoryFields.forEach(item => {\r\n\r\n                if (this.props.selectedRecord && this.props.selectedRecord[item.nchecklistversionqbcode] && this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue) {\r\n                    if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"object\") {\r\n                        //to validate FormSelectSearch component\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                    else if (typeof this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue === \"string\") {\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.trim().length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (this.props.selectedRecord[item.nchecklistversionqbcode].sdefaultvalue.length === 0) {\r\n                            const alertMessage = item.squestion\r\n                            failedControls.push(alertMessage);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    const alertMessage = item.squestion\r\n                    failedControls.push(alertMessage);\r\n                }\r\n            });\r\n            // console.log(\"validationPassed:\", failedControls);\r\n\r\n            if (failedControls.length === 0) {\r\n                this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode)\r\n            }\r\n            else {\r\n\r\n                toast.info(`${this.props.intl.formatMessage({ id: \"IDS_ENTER\" })} ${failedControls[0]}`);\r\n\r\n\r\n            }\r\n        } else {\r\n            this.props.onSaveClick(this.props.selectedRecord, this.props.Login.userInfo, this.props.nregtypecode, this.props.nregsubtypecode)\r\n        }\r\n    }\r\n    componentDidMount() {\r\n\r\n        if (this.props.triggerCallback !== undefined && this.props.enableCallback)\r\n            setTimeout(() => {\r\n                this.props.triggerCallback(this.formElement.current.clientHeight + 30);\r\n            }, 200)\r\n\r\n\r\n    }\r\n    render() {\r\n        // this.props.templateData && Object.keys(this.props.templateData).map(design =>\r\n        // )\r\n        return (\r\n            <div ref={this.formElement}>\r\n                {\r\n                    this.props.templateData ?\r\n                        this.props.templateData.map((item) =>\r\n                            <Row>\r\n                                {item.children.length > 0 ?\r\n                                    item.children.map((column) =>\r\n                                        <Col md={12 / item.children.length}>\r\n                                            {\r\n                                                column.children.map((component) => {\r\n                                                    return (\r\n                                                        component.hasOwnProperty(\"children\") ?\r\n                                                            <Row>\r\n                                                                {component.children.map(componentrow =>\r\n                                                                    <Col md={12 / component.children.length}>\r\n                                                                        {this.renderSwitch(componentrow, this.props.selectedRecord)}\r\n                                                                    </Col>\r\n                                                                )\r\n                                                                }\r\n                                                            </Row>\r\n                                                            : <>\r\n                                                                {this.renderSwitch(component, this.props.selectedRecord)}\r\n                                                            </>\r\n                                                    )\r\n                                                })\r\n                                            }\r\n\r\n                                        </Col>\r\n                                    )\r\n                                    : \"\"}\r\n                            </Row>\r\n                        )\r\n                        :\r\n                        \"\"\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default injectIntl(DynamicSlideoutMaterial);"]},"metadata":{},"sourceType":"module"}