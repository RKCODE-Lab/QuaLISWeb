{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\AddTestGroupTest.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { injectIntl } from 'react-intl';\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\n\nconst AddTestGroupTest = props => {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }\n  }, props.screenName === \"IDS_COMPONENT\" && /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_COMPONENT\"\n    }),\n    isSearchable: true,\n    name: \"ncomponentcode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    isMandatory: true,\n    showOption: true,\n    options: props.testGroupInputData.TestGroupSpecSampleType || [],\n    optionId: \"ncomponentcode\",\n    optionValue: \"scomponentname\",\n    value: props.selectedRecord[\"ncomponentcode\"] ? props.selectedRecord[\"ncomponentcode\"] || [] : [],\n    onChange: value => props.onComboChange(value, \"ncomponentcode\", 1),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TESTCATEGORY\"\n    }),\n    isSearchable: true,\n    name: \"ntestcategorycode\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    showOption: true,\n    options: props.testGroupInputData.TestCategory || [],\n    optionId: \"ntestcategorycode\",\n    optionValue: \"stestcategoryname\",\n    value: props.selectedRecord[\"ntestcategorycode\"] ? props.selectedRecord[\"ntestcategorycode\"] || [] : [],\n    onChange: value => props.onFilterComboChange(value, \"ntestcategorycode\", 5),\n    alphabeticalSort: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(FormMultiSelect, {\n    name: \"ntestcode\",\n    label: props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }),\n    options: props.testGroupInputData.TestGroupTest || [],\n    optionId: \"ntestcode\",\n    optionValue: \"stestname\",\n    value: props.selectedRecord[\"ntestcode\"] ? props.selectedRecord[\"ntestcode\"] || [] : [],\n    isMandatory: true,\n    isClearable: true,\n    alphabeticalSort: true,\n    onChange: value => props.onComboChange(value, \"ntestcode\", 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default injectIntl(AddTestGroupTest);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/AddTestGroupTest.jsx"],"names":["React","Row","Col","FormSelectSearch","injectIntl","FormMultiSelect","AddTestGroupTest","props","screenName","intl","formatMessage","id","testGroupInputData","TestGroupSpecSampleType","selectedRecord","value","onComboChange","TestCategory","onFilterComboChange","TestGroupTest"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\n\r\nconst AddTestGroupTest = (props) => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    {props.screenName === \"IDS_COMPONENT\" &&\r\n                        <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_COMPONENT\" })}\r\n                            isSearchable={true}\r\n                            name={\"ncomponentcode\"}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            showOption={true}\r\n                            options={props.testGroupInputData.TestGroupSpecSampleType || []}\r\n                            optionId='ncomponentcode'\r\n                            optionValue='scomponentname'\r\n                            value={props.selectedRecord[\"ncomponentcode\"]?props.selectedRecord[\"ncomponentcode\"]||[]:[]}\r\n                            onChange={value => props.onComboChange(value, \"ncomponentcode\", 1)}\r\n                            alphabeticalSort={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                    }\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_TESTCATEGORY\" })}\r\n                        isSearchable={true}\r\n                        name={\"ntestcategorycode\"}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        showOption={true}\r\n                        options={props.testGroupInputData.TestCategory || []}\r\n                        optionId='ntestcategorycode'\r\n                        optionValue='stestcategoryname'\r\n                        value={props.selectedRecord[\"ntestcategorycode\"]?props.selectedRecord[\"ntestcategorycode\"]||[]:[]}\r\n                        onChange={value => props.onFilterComboChange(value, \"ntestcategorycode\", 5)}\r\n                        alphabeticalSort={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n                    <FormMultiSelect\r\n                        name={\"ntestcode\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                        options={props.testGroupInputData.TestGroupTest || []}\r\n                        optionId=\"ntestcode\"\r\n                        optionValue=\"stestname\"\r\n                        value={props.selectedRecord[\"ntestcode\"] ? props.selectedRecord[\"ntestcode\"] ||[]: []}\r\n                        isMandatory={true}\r\n                        isClearable={true}\r\n                        alphabeticalSort={true}\r\n                        onChange={(value) => props.onComboChange(value, \"ntestcode\", 1)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTestGroupTest);"]},"metadata":{},"sourceType":"module"}