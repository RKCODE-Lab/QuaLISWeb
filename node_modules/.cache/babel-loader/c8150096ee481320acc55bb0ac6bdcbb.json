{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, replaceUpdatedObject, sortData, fillRecordBasedOnCheckBoxSelection, getSameRecordFromTwoArrays, getRecordBasedOnPrimaryKeyName, filterRecordBasedOnPrimaryKeyName, reArrangeArrays, rearrangeDateFormat } from '../components/CommonScript';\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\nimport Axios from 'axios';\nexport function getRegTypeJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultSampleTypeValue: inputData.defaultSampleTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRegSubTypeJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultRegTypeValue: inputData.defaultRegTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAppConfigVersionJobAllocation(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...responseData,\n            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\n            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getTestComboBySection\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFilterStatusSectionJobAllocation(inputData) {\n  return function (dispatch) {\n    const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData);\n    const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\", inputData);\n    let urlArray = [];\n    urlArray = [testStatusService, sectionService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestStatusJobAllocation(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...responseData,\n            RegSubTypeValue: inputData.RegSubTypeValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getJobAllcationFilterSubmit(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData).then(response => {\n      let responseData = { ...response.data\n      }; // responseData = sortData(responseData)\n\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\n        inputParam.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\n        inputParam.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\n        inputParam.searchTestRef.current.value = \"\";\n        masterData['searchedTest'] = undefined; // masterData['searchedTests'] = undefined\n      }\n\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showTest: inputParam.inputData.showTest,\n          activeTestTab: inputParam.inputData.activeTestTab,\n          showFilter: false,\n          sampleskip: 0,\n          sampletake: inputParam.sampletake,\n          subsampleskip: 0,\n          subsampletake: inputParam.subsampletake,\n          testskip: 0,\n          testtake: inputParam.testtake,\n          documentDataState: { ...inputParam.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParam.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ReceiveinLabStatusWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/CreateReceiveinLab\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"npreregno\");\n        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_SAMPLE\"];\n        delete response.data[\"JA_SUBSAMPLE\"];\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"npreregno\"),\n          JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      toast.error(error.message);\n    });\n  };\n}\nexport function getAllottedTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getAllotDetails\", inputParam.inputData).then(response => {\n      const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      const Technique = TechniqueMap.get(\"OptionList\");\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\n      const Instrument = InstrumentMap.get(\"OptionList\");\n      const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          Users,\n          UsersPeriod,\n          InstrumentCategory,\n          Instrument,\n          InstrumentPeriod,\n          currentTime,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAllotAnotherUserTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getAllotAnotherUserDetails\", inputParam.inputData).then(response => {\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          UsersPeriod,\n          currentTime,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRescheduleTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/getRescheduledDetails\", inputParam.inputData).then(response => {\n      // const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\n      //  \"stechniquename\", 'ntechniquecode', 'ascending', false);    \n      const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, false);\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\", \"speriodname\", undefined, undefined, false);\n      const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, false);\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\", \"speriodname\", undefined, undefined, false);\n      const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\n      const Technique = TechniqueMap.get(\"OptionList\");\n      const Users = UsersMap.get(\"OptionList\");\n      const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\n      const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\n      const Instrument = InstrumentMap.get(\"OptionList\");\n      const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Technique,\n          Users,\n          UsersPeriod,\n          InstrumentCategory,\n          Instrument,\n          InstrumentPeriod,\n          currentTime,\n          isOpen: true,\n          operation: inputParam.inputData.operation,\n          screenName: inputParam.inputData.screenName,\n          openModal: true,\n          ncontrolCode: inputParam.inputData.ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getInstrument(ninstrumentcatcode, ncalibrationreq, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\n      \"ninstrumentcatcode\": ninstrumentcatcode,\n      \"ncalibrationreq\": ncalibrationreq,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Instrument = [];\n      const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, false);\n      Instrument = InstrumentMap.get(\"OptionList\"); //selectedRecord[\"ninstrumentcode\"] = undefined;\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Instrument,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getUsers(ntechniquecode, JASelectedTest, userInfo, selectedRecord) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\n      \"ntechniquecode\": ntechniquecode,\n      \"ssectioncode\": JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample => sample.nsectioncode).join(\",\") : \"\",\n      \"nregtypecode\": JASelectedTest.realRegTypeValue.nregtypecode,\n      \"nregsubtypecode\": JASelectedTest.realRegSubTypeValue.nregsubtypecode,\n      \"userinfo\": userInfo\n    }).then(response => {\n      let Users = [];\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = UsersMap.get(\"OptionList\"); //selectedRecord[\"ninstrumentcode\"] = undefined;\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function ViewAnalystCalendar(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/viewAnalystCalendar\", inputParam.inputData).then(response => {\n      let masterData = { ...inputParam.inputData.masterData,\n        ...response.data\n      };\n      let Users = [];\n      const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\", \"susername\", undefined, undefined, false);\n      Users = UsersMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          Users,\n          screenName: inputParam.inputData.screenName,\n          loading: false,\n          openModal: true,\n          masterData\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function CancelTestWise(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"joballocation/CancelTest\", inputParam.inputData).then(response => {\n      if (response.data.rtn === undefined || response.data.rtn === \"Success\") {\n        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\n        delete response.data[\"JA_TEST\"];\n        let masterData = { ...inputParam.inputData.masterData,\n          ...response.data,\n          JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\")\n        };\n        let respObject = {\n          masterData,\n          ...inputParam.inputData,\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showSample: undefined\n        };\n        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject));\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false,\n            openModal: false\n          }\n        });\n        toast.warn(response.data.rtn);\n      }\n    }).catch(error => {\n      toast.error(error.message);\n    });\n  };\n}\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\n      ssectioncode: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\n      ntranscode: String(inputData.ntransactionstatus),\n      ntransactiontestcode: 0,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestKey: inputData.activeTestKey,\n      activeSampleKey: inputData.activeSampleKey,\n      activeSubSampleKey: inputData.activeSubSampleKey,\n      nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\n      checkBoxOperation: inputData.checkBoxOperation\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData,\n        checkBoxOperation: inputData.checkBoxOperation\n      }).then(response => {\n        sortData(response.data);\n        let oldSelectedTest = inputData.masterData.JASelectedTest;\n        inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;\n        inputData.masterData.JASelectedSubSample = response.data.JASelectedSubSample;\n        inputData.masterData.JA_TEST = response.data.JA_TEST;\n        inputData.masterData.JASelectedTest = response.data.JASelectedTest;\n        inputData.masterData.RegistrationAttachment = response.data.RegistrationAttachment;\n        inputData.masterData.RegistrationSampleAttachment = response.data.RegistrationSampleAttachment;\n        inputData.masterData.RegistrationComment = response.data.RegistrationComment;\n        inputData.masterData.RegistrationSampleComment = response.data.RegistrationSampleComment; //  fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\n        //  let JASelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.JASelectedSubSample : inputData.masterData.JASelectedSubSample\n        //  JASelectedSubSample = inputData.masterData.realRegSubTypeValue.nneedsubsample ? JASelectedSubSample : inputData.masterData.JA_SUBSAMPLE;\n\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.JASelectedSample //JASelectedSubSample\n\n        };\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let RegistrationTestAttachment = [];\n        let RegistrationTestComment = [];\n        let RegistrationComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n          let npreregno;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              JASelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n            npreregno = masterData.JASelectedSample[0].npreregno;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \" testAttachmentDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              dbData = response.data.RegistrationComment || [];\n              list = [...inputData.masterData.RegistrationComment, ...dbData];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleCommentsDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        } else {\n          let list = [];\n\n          if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n            oldSelectedTest.map((test, index) => {\n              if (!wholeTestList.includes(test.ntransactiontestcode)) {\n                oldSelectedTest.splice(index, 1);\n              }\n\n              return null;\n            });\n            let keepOld = false;\n            let ntransactiontestcode;\n\n            if (oldSelectedTest.length > 0) {\n              keepOld = true;\n              masterData = { ...masterData,\n                JASelectedTest: oldSelectedTest\n              };\n            } else {\n              ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n            }\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_SAMPLECOMMENTS\":\n              list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\n              RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\");\n              activeName = \"RegistrationComment\";\n              dataStateName = \"sampleChangeDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          RegistrationTestAttachment,\n          RegistrationTestComment,\n          RegistrationComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.JASelectedTest;\n      let oldSelectedSubSample = inputData.masterData.JASelectedSubSample;\n      let {\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let skipInfo = {};\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\n        let JASelectedSample = inputData.JASelectedSample;\n        let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\n        let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE;\n\n        if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n          JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\n\n          if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\n        let masterData = { ...inputData.masterData,\n          JASelectedSample,\n          JASelectedSubSample,\n          JASelectedTest\n        };\n        inputData = { ...inputData,\n          ntransactiontestcode,\n          ntransactionsamplecode,\n          JASelectedSample,\n          JASelectedTest,\n          JASelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey,\n          masterData\n        };\n\n        if (JASelectedTest.length > 0) {\n          inputData = { ...inputData,\n            childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\"]\n          };\n          dispatch(getTestChildTabDetailJobAllocation(inputData, true));\n        } else {\n          inputData = { ...inputData,\n            masterData,\n            childTabsKey: [\"JA_TEST\"]\n          };\n          dispatch(getJobAllocationTestDetail(inputData, true));\n        }\n      } else {\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.JASelectedSample,\n          JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\n        };\n        let subsamplecheck = true;\n\n        if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\n                masterData = { ...masterData,\n                  JASelectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"JA_TEST\"];\n                subsamplecheck = false;\n                dispatch(getJobAllocationTestDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              JASelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            JASelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode;\n        }\n\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              JASelectedSample: inputData.JASelectedSample,\n              RegistrationTestAttachment,\n              RegistrationTestComment\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ssectioncode: inputData.nsectioncode,\n      ntransactiontestcode: 0,\n      ntranscode: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestKey: inputData.activeTestKey,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation,\n      nneedsubsample: inputData.nneedsubsample\n    };\n    const subSample = inputData.nneedsubsample;\n\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData).then(response => {\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'npreregno');\n        let oldSelectedTest = inputData.masterData.JASelectedTest;\n        let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || [];\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSample: inputData.masterData.JASelectedSample,\n          JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample\n        };\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let RegistrationTestAttachment = [];\n        let RegistrationTestComment = [];\n        let RegistrationSampleComment = [];\n        let RegistrationSampleAttachment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              JASelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n          let dbData = [];\n          let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            JASelectedTest: [testList[0]],\n            JA_TEST: testList\n          };\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\n              list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              dataStateName = \"testAttachmentState\";\n              break;\n          }\n        }\n\n        if (subSample) {\n          let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n          oldSelectedSubSample.map((test, index) => {\n            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\n              oldSelectedSubSample.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactionsamplecode;\n\n          if (oldSelectedSubSample.length > 0) {\n            keepOld = true;\n          } else {\n            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode;\n          }\n\n          switch (inputData.activeSubSampleTab) {\n            case \"IDS_SUBSAMPLECOMMENTS\":\n              RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleComment\";\n              dataStateName = \"subSampleCommentDataState\";\n              break;\n\n            default:\n              RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\");\n              activeName = \"RegistrationSampleAttachment\";\n              dataStateName = \"subSampleAttachmentDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          RegistrationTestAttachment,\n          RegistrationTestComment,\n          RegistrationSampleComment,\n          RegistrationSampleAttachment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestKey: inputData.activeTestKey,\n            activeTestTab: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        console.log(\"error:\", error);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.JASelectedTest;\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\n        let JASelectedSubSample = inputData.RESelectedSubSample;\n        let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\n        inputData = { ...inputData,\n          childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\n          ntransactiontestcode,\n          JASelectedSample: inputData.masterData.JASelectedSample,\n          JASelectedTest,\n          JASelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey\n        };\n        dispatch(getTestChildTabDetailJobAllocation(inputData, true));\n      } else {\n        let masterData = { ...inputData.masterData,\n          JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\n          JASelectedSubSample: inputData.JASelectedSubSample\n        };\n        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            JASelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode;\n        }\n\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              JASelectedSubSample: inputData.JASelectedSubSample,\n              RegistrationTestAttachment,\n              RegistrationTestComment\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            activeTestTab: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let url = \"\";\n\n    switch (inputData.activeTestKey) {\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        dataStateName = \"testAttachmentDataState\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"RegistrationSampleAttachment\";\n        dataStateName = \"sampleAttachmentDataState\";\n        break;\n\n      default:\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        dataStateName = \"testAttachmentDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        let responseData = { ...response.data,\n          JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\n          JASelectedTest: inputData.JASelectedTest,\n          activeTabIndex: inputData.activeTabIndex,\n          activeTabId: inputData.activeTabId\n        };\n        let skipInfo = {};\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          JASelectedTest: inputData.JASelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            activeTabIndex: inputData.activeTabIndex,\n            activeTabId: inputData.activeTabId,\n            activeTestTab: inputData.activeTestKey,\n            loading: false,\n            activeTestKey: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        JASelectedTest: inputData.JASelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData.skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestKey: inputData.activeTestKey,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function updatedObjectWithNewElement1(oldList, newList) {\n  oldList = [...newList, ...oldList];\n  return oldList;\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/JobAllocationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","constructOptionList","replaceUpdatedObject","sortData","fillRecordBasedOnCheckBoxSelection","getSameRecordFromTwoArrays","getRecordBasedOnPrimaryKeyName","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","rearrangeDateFormat","postCRUDOrganiseTransSearch","Axios","getRegTypeJobAllocation","inputData","dispatch","post","then","response","responseData","data","type","payload","masterData","defaultSampleTypeValue","loading","catch","error","status","message","warn","getRegSubTypeJobAllocation","defaultRegTypeValue","getAppConfigVersionJobAllocation","inputParam","defaultRegSubTypeValue","RegSubTypeValue","realRegSubTypeValue","getSectionJobAllocation","defaultUserSectionValue","getFilterStatusJobAllocation","defaultFilterStatusValue","getFilterStatusSectionJobAllocation","testStatusService","sectionService","urlArray","all","defaultApprovalVersionValue","getTestStatusJobAllocation","getJobAllcationFilterSubmit","searchSampleRef","undefined","current","value","searchSubSampleRef","searchTestRef","showTest","activeTestTab","showFilter","sampleskip","sampletake","subsampleskip","subsampletake","testskip","testtake","documentDataState","sort","filter","testCommentDataState","ReceiveinLabStatusWise","rtn","JA_SAMPLE","JA_SUBSAMPLE","JA_TEST","JASelectedSample","JASelectedSubSample","JASelectedTest","respObject","loadEsign","openModal","showSample","postParamList","getAllottedTestWise","TechniqueMap","Technique","UsersMap","Users","UsersPeriodMap","Period","InstrumentCategoryMap","InstrumentCategory","InstrumentMap","Instrument","InstrumentPeriodMap","currentTime","userinfo","CurrentTime","body","get","UsersPeriod","InstrumentPeriod","isOpen","operation","screenName","ncontrolCode","ncontrolcode","getAllotAnotherUserTestWise","getRescheduleTestWise","getInstrument","ninstrumentcatcode","ncalibrationreq","userInfo","selectedRecord","getUsers","ntechniquecode","map","sample","nsectioncode","join","realRegTypeValue","nregtypecode","nregsubtypecode","ViewAnalystCalendar","CancelTestWise","getJobAllocationSubSampleDetail","isServiceRequired","inputParamData","nsampletypecode","npreregno","ssectioncode","ntranscode","String","ntransactionstatus","ntransactiontestcode","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","activeSubSampleKey","nneedsubsample","ndesigntemplatemappingcode","nneedtemplatebasedflow","checkBoxOperation","activeName","dataStateName","oldSelectedTest","RegistrationAttachment","RegistrationSampleAttachment","RegistrationComment","RegistrationSampleComment","length","bool","skipInfo","RegistrationTestAttachment","RegistrationTestComment","wholeTestList","b","test","index","includes","splice","keepOld","list","dbData","skip","take","oldSelectedSubSample","TestSelected","subSampleSelected","removeElementFromArray","isGrandChildGetRequired","childTabsKey","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","getTestChildTabDetailJobAllocation","getJobAllocationTestDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","activeSampleTab","nflag","ntype","subSample","testList","wholeSubsampleList","selectedSubSample","activeSubSampleTab","console","log","RESelectedSubSample","url","activeTabIndex","activeTabId","updatedObjectWithNewElement1","oldList","newList"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, replaceUpdatedObject, sortData,fillRecordBasedOnCheckBoxSelection,getSameRecordFromTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,filterRecordBasedOnPrimaryKeyName,reArrangeArrays,rearrangeDateFormat } from '../components/CommonScript';\r\nimport { postCRUDOrganiseTransSearch } from './ServiceAction';\r\nimport Axios from 'axios';\r\n\r\nexport function getRegTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationTypeBySampleType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultSampleTypeValue: inputData.defaultSampleTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRegSubTypeJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getRegistrationsubTypeByRegType\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultRegTypeValue: inputData.defaultRegTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAppConfigVersionJobAllocation(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getApprovalConfigVersionByRegSubType\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...responseData,\r\n                            defaultRegSubTypeValue: inputParam.masterData.defaultRegSubTypeValue,\r\n                            RegSubTypeValue: inputParam.masterData.realRegSubTypeValue\r\n                        },\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultUserSectionValue: inputData.masterData.defaultUserSectionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getTestComboBySection\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultFilterStatusValue: inputData.masterData.defaultFilterStatusValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getFilterStatusSectionJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        const testStatusService = rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData );\r\n        const sectionService = rsapi.post(\"joballocation/getSectionByApproveVersion\",  inputData );\r\n        let urlArray = [];\r\n        urlArray = [testStatusService,sectionService];\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            defaultApprovalVersionValue: inputData.masterData.defaultApprovalVersionValue,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTestStatusJobAllocation(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getFilterStatusByApproveVersion\", inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...responseData,\r\n                            RegSubTypeValue: inputData.RegSubTypeValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getJobAllcationFilterSubmit(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/getJobAllocationDetails\", inputParam.inputData)\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                // responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchSampleRef !== undefined && inputParam.searchSampleRef.current !== null) {\r\n                    inputParam.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParam.searchSubSampleRef !== undefined && inputParam.searchSubSampleRef.current !== null) {\r\n                    inputParam.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParam.searchTestRef !== undefined && inputParam.searchTestRef.current !== null) {\r\n                    inputParam.searchTestRef.current.value = \"\"\r\n                     masterData['searchedTest'] = undefined\r\n                   // masterData['searchedTests'] = undefined\r\n\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showTest: inputParam.inputData.showTest,\r\n                        activeTestTab: inputParam.inputData.activeTestTab,\r\n                        showFilter: false,\r\n                        sampleskip: 0,\r\n                        sampletake: inputParam.sampletake,\r\n                        subsampleskip :0,\r\n                        subsampletake :inputParam.subsampletake,\r\n                        testskip: 0,\r\n                        testtake: inputParam.testtake,\r\n                        documentDataState: { ...inputParam.documentDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParam.testCommentDataState, sort: undefined, filter: undefined },\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReceiveinLabStatusWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/CreateReceiveinLab\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_SAMPLE\"], inputParam.inputData.masterData.JA_SAMPLE, \"npreregno\");\r\n                        replaceUpdatedObject(response.data[\"JA_SUBSAMPLE\"], inputParam.inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n\r\n                        delete response.data[\"JA_SAMPLE\"];\r\n                        delete response.data[\"JA_SUBSAMPLE\"];\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedSample: replaceUpdatedObject(response.data[\"JASelectedSample\"], inputParam.inputData.masterData.JASelectedSample, \"npreregno\"),\r\n                            JASelectedSubSample: replaceUpdatedObject(response.data[\"JASelectedSubSample\"], inputParam.inputData.masterData.JASelectedSubSample, \"ntransactionsamplecode\"),\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        toast.error(error.message);                   \r\n                })\r\n    }\r\n} \r\n\r\nexport function getAllottedTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            isOpen: true,\r\n                            operation:inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getAllotAnotherUserTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getAllotAnotherUserDetails\",inputParam.inputData)\r\n                .then(response => {\r\n                    \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);  \r\n\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {                           \r\n                            Users,\r\n                            UsersPeriod, \r\n                            currentTime,                           \r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\nexport function getRescheduleTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getRescheduledDetails\",inputParam.inputData)\r\n                .then(response => {\r\n\r\n                // const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                //  \"stechniquename\", 'ntechniquecode', 'ascending', false);    \r\n\r\n                const TechniqueMap = constructOptionList(response.data.Technique || [], \"ntechniquecode\",\r\n                \"stechniquename\", undefined, undefined, false);    \r\n\r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\r\n                \"susername\", undefined, undefined, false);\r\n\r\n                const UsersPeriodMap = constructOptionList(response.data.Period || [], \"nuserperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);    \r\n\r\n\r\n                const InstrumentCategoryMap = constructOptionList(response.data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                \"sinstrumentcatname\", undefined, undefined, false);                \r\n\r\n                const InstrumentMap =    constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                \"sinstrumentid\", undefined, undefined, false);           \r\n\r\n                const InstrumentPeriodMap = constructOptionList(response.data.Period || [], \"ninstrumentperiodcode\",\r\n                \"speriodname\", undefined, undefined, false);   \r\n                \r\n                const currentTime = rearrangeDateFormat(inputParam.inputData.userinfo, response.data.CurrentTime.body);\r\n\r\n                const Technique = TechniqueMap.get(\"OptionList\");\r\n                const Users = UsersMap.get(\"OptionList\");\r\n                const UsersPeriod = UsersPeriodMap.get(\"OptionList\");\r\n                const InstrumentCategory = InstrumentCategoryMap.get(\"OptionList\");\r\n                const Instrument = InstrumentMap.get(\"OptionList\");                \r\n                const InstrumentPeriod = InstrumentPeriodMap.get(\"OptionList\");\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, \r\n                        payload: {\r\n                            Technique,\r\n                            Users,\r\n                            UsersPeriod,\r\n                            InstrumentCategory,\r\n                            Instrument,                            \r\n                            InstrumentPeriod,\r\n                            currentTime,\r\n                            isOpen: true,\r\n                            operation: inputParam.inputData.operation,\r\n                            screenName: inputParam.inputData.screenName,\r\n                            openModal: true,\r\n                            ncontrolCode: inputParam.inputData.ncontrolcode,\r\n                            loading: false             \r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n    }\r\n}\r\n\r\n\r\nexport function getInstrument(ninstrumentcatcode,ncalibrationreq,userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getInstrumentBasedCategory\", {\r\n                \"ninstrumentcatcode\": ninstrumentcatcode,\"ncalibrationreq\":ncalibrationreq,\"userinfo\":userInfo\r\n            })\r\n            .then(response => {\r\n                let Instrument = [];               \r\n                const InstrumentMap = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\"sinstrumentid\", undefined, undefined, false);\r\n                Instrument = InstrumentMap.get(\"OptionList\");\r\n                //selectedRecord[\"ninstrumentcode\"] = undefined;\r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Instrument,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getUsers(ntechniquecode,JASelectedTest, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"joballocation/getUsersBasedTechnique\", {\"ntechniquecode\": ntechniquecode,\r\n                          \"ssectioncode\":JASelectedTest.JASelectedSample ? JASelectedTest.JASelectedSample.map(sample=>sample.nsectioncode).join(\",\"):\"\", \r\n                          \"nregtypecode\":JASelectedTest.realRegTypeValue.nregtypecode,\r\n                          \"nregsubtypecode\":JASelectedTest.realRegSubTypeValue.nregsubtypecode,\r\n                          \"userinfo\": userInfo})\r\n            .then(response => {\r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                //selectedRecord[\"ninstrumentcode\"] = undefined;\r\n               \r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        Users,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function ViewAnalystCalendar(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"joballocation/viewAnalystCalendar\", (inputParam.inputData))\r\n            .then(response => {\r\n                let masterData = {\r\n                    ...inputParam.inputData.masterData,\r\n                    ...response.data,\r\n                }  \r\n                let Users = [];               \r\n                const UsersMap = constructOptionList(response.data.Users || [], \"nusercode\",\"susername\", undefined, undefined, false);\r\n                Users = UsersMap.get(\"OptionList\");\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {                       \r\n                        Users,                        \r\n                        screenName: inputParam.inputData.screenName,\r\n                        loading: false,\r\n                        openModal:true,\r\n                        masterData,\r\n                        \r\n                        \r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function CancelTestWise(inputParam) {\r\n    return function (dispatch) {\r\n    dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/CancelTest\",inputParam.inputData)\r\n                .then(response => {\r\n                    if(response.data.rtn === undefined || response.data.rtn===\"Success\"){\r\n                        replaceUpdatedObject(response.data[\"JA_TEST\"], inputParam.inputData.masterData.JA_TEST, \"ntransactiontestcode\");\r\n                        delete response.data[\"JA_TEST\"];\r\n                        let masterData = {\r\n                            ...inputParam.inputData.masterData,\r\n                             ...response.data,\r\n                            JASelectedTest: replaceUpdatedObject(response.data[\"JASelectedTest\"], inputParam.inputData.masterData.JASelectedTest, \"ntransactiontestcode\"),\r\n                        }\r\n                        let respObject = {\r\n                            masterData,\r\n                            ...inputParam.inputData,\r\n                            loading: false,\r\n                            loadEsign: false,\r\n                            openModal: false,\r\n                            showSample: undefined\r\n                        }\r\n                        dispatch(postCRUDOrganiseTransSearch(inputParam.postParamList, respObject))\r\n                    }else{\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false,\r\n                                loadEsign: false,\r\n                                openModal: false\r\n                            }\r\n                        });\r\n                        toast.warn(response.data.rtn);\r\n                    }\r\n\r\n\r\n                })\r\n                .catch(error => {                   \r\n                        toast.error(error.message);                   \r\n                })\r\n    }\r\n}\r\n\r\nexport function getJobAllocationSubSampleDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n            ssectioncode : inputData.JASelectedSample && inputData.JASelectedSample.map(sample => sample.nsectioncode).join(\",\"),\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            activeSubSampleKey: inputData.activeSubSampleKey,\r\n            nneedsubsample: inputData.masterData.realRegSubTypeValue.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            nneedtemplatebasedflow: inputData.masterData.realRegSubTypeValue.nneedtemplatebasedflow,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"joballocation/getJobAllocationSubSampleDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest;           \r\n\r\n                    inputData.masterData.JA_SUBSAMPLE = response.data.JA_SUBSAMPLE;  \r\n                    inputData.masterData.JASelectedSubSample=response.data.JASelectedSubSample;\r\n                    inputData.masterData.JA_TEST = response.data.JA_TEST;  \r\n                    inputData.masterData.JASelectedTest=response.data.JASelectedTest;\r\n                    inputData.masterData.RegistrationAttachment =response.data.RegistrationAttachment;\r\n                    inputData.masterData.RegistrationSampleAttachment =response.data.RegistrationSampleAttachment;\r\n                    inputData.masterData.RegistrationComment =response.data.RegistrationComment;\r\n                    inputData.masterData.RegistrationSampleComment =response.data.RegistrationSampleComment;\r\n\r\n\r\n\r\n\r\n\r\n                    //  fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"nregistrationsectioncode\", inputData.removeElementFromArray);\r\n                    //  let JASelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.JASelectedSubSample : inputData.masterData.JASelectedSubSample\r\n                    //  JASelectedSubSample = inputData.masterData.realRegSubTypeValue.nneedsubsample ? JASelectedSubSample : inputData.masterData.JA_SUBSAMPLE;\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.JASelectedSample\r\n                        //JASelectedSubSample\r\n                    }\r\n                    \r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        let npreregno;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode;\r\n                            npreregno = masterData.JASelectedSample[0].npreregno;\r\n                        }\r\n                        switch (inputData.activeTestKey) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationComment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"npreregno\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName = \" testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {                  \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                dbData = response.data.RegistrationComment || []\r\n                                list = [...inputData.masterData.RegistrationComment, ...dbData];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    }\r\n                    else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                           \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n\r\n                                RegistrationComment = response.data.RegistrationComment ? [...response.data.RegistrationComment] : [];\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleCommentsDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n\r\n                        }\r\n\r\n                    }\r\n                    else {\r\n                        let list = []\r\n                        if (!inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                            let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                            oldSelectedTest.map((test, index) => {\r\n                                if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                    oldSelectedTest.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            let keepOld = false;\r\n                            let ntransactiontestcode;\r\n                            if (oldSelectedTest.length > 0) {\r\n                                keepOld = true\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedTest: oldSelectedTest\r\n                                }\r\n                            } else {\r\n                                ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                            }\r\n                        }\r\n                        switch (inputData.activeTestKey) {                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SAMPLECOMMENTS\":\r\n                                list = response.data.RegistrationComment ? sortData(response.data.RegistrationComment, 'descending', 'nregcommentcode') : [];\r\n                                RegistrationComment = getRecordBasedOnPrimaryKeyName(list, inputData.JASelectedSample.length > 0 ? inputData.JASelectedSample[0].npreregno : \"\", \"npreregno\")\r\n                                activeName = \"RegistrationComment\"\r\n                                dataStateName = \"sampleChangeDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        RegistrationComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let oldSelectedSubSample = inputData.masterData.JASelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if (inputData[\"statusNone\"]) {\r\n                TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSample = inputData.JASelectedSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                let JASelectedSubSample = inputData.masterData.JA_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    JASelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = JASelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let masterData = { ...inputData.masterData, JASelectedSample, JASelectedSubSample, JASelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    ntransactionsamplecode,\r\n                    JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey, masterData\r\n                }\r\n\r\n                if (JASelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"RegistrationTestAttachment\",\"RegistrationTestComment\"]\r\n                    }\r\n                    dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData, masterData,\r\n                        childTabsKey: [\"JA_TEST\"]\r\n                    }\r\n                    dispatch(getJobAllocationTestDetail(inputData, true));\r\n                }\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: TestSelected ? TestSelected : inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSample: inputData.JASelectedSample,\r\n                    JASelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.JA_SUBSAMPLE.length > 0 ? [inputData.masterData.JA_SUBSAMPLE[0]] : []\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.realRegSubTypeValue.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.JA_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.JA_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    JASelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"JA_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getJobAllocationTestDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.JA_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.JA_TEST[0].ntransactiontestcode\r\n                }                \r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n              \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSample: inputData.JASelectedSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getJobAllocationTestDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ssectioncode :inputData.nsectioncode,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation,\r\n            nneedsubsample: inputData.nneedsubsample\r\n        }\r\n        const subSample = inputData.nneedsubsample;\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"joballocation/getJobAllocationTestDetails\", inputParamData)\r\n                .then(response => {\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData, 'descending', 'npreregno')\r\n                    let oldSelectedTest = inputData.masterData.JASelectedTest\r\n                    let oldSelectedSubSample = inputData.masterData.JASelectedSubSample || []\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                        JASelectedSample: inputData.masterData.JASelectedSample,\r\n                        JASelectedSubSample: inputData.JASelectedSubSample || inputData.masterData.JASelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let RegistrationTestAttachment = [];\r\n                    let RegistrationTestComment = [];\r\n                    let RegistrationSampleComment = [];\r\n                    let RegistrationSampleAttachment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                JASelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.JASelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {                           \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                           \r\n                            default:\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                          \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays(inputData.masterData.JA_SUBSAMPLE, responseData.JA_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            JASelectedTest: [testList[0]],\r\n                            JA_TEST: testList,\r\n                        }\r\n\r\n                        switch (inputData.activeTestKey) {\r\n                            \r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                           \r\n                                case \"IDS_TESTATTACHMENTS\":\r\n                                    dbData = response.data.RegistrationTestComment || []\r\n                                    list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                    RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                    break;\r\n                            default:\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    } else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                            \r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                                list = response.data.RegistrationSampleComment ? sortData(response.data.RegistrationSampleComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_SUBSAMPLE.length > 0 ? inputData.masterData.JA_SUBSAMPLE[0].ntransactionsamplecode : \"\", \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                dataStateName =\"testAttachmentState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    if (subSample) {\r\n                        let wholeSubsampleList = masterData.JA_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.map((test, index) => {\r\n                            if (!wholeSubsampleList.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactionsamplecode;\r\n                        if (oldSelectedSubSample.length > 0) {\r\n                            keepOld = true\r\n                        } else {\r\n                            ntransactionsamplecode = masterData.selectedSubSample[0].ntransactionsamplecode\r\n                        }\r\n\r\n                        switch (inputData.activeSubSampleTab) {\r\n                            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                                RegistrationSampleComment = keepOld ? inputData.masterData.RegistrationSampleComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleComment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleComment\"\r\n                                dataStateName = \"subSampleCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                RegistrationSampleAttachment = keepOld ? inputData.masterData.RegistrationSampleAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationSampleAttachment, ntransactionsamplecode, \"ntransactionsamplecode\")\r\n                                activeName = \"RegistrationSampleAttachment\"\r\n                                dataStateName = \"subSampleAttachmentDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n                    masterData = {\r\n                        ...masterData,                      \r\n                        RegistrationTestAttachment,\r\n                        RegistrationTestComment,\r\n                        RegistrationSampleComment,\r\n                        RegistrationSampleAttachment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    console.log(\"error:\", error);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.JASelectedTest\r\n            let TestSelected =\r\n                inputData[\"statusNone\"] ?\r\n                    getRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") :\r\n                    filterRecordBasedOnPrimaryKeyName(inputData.masterData.JASelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.JA_TEST.length > 0 ? inputData.masterData.JA_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let JASelectedSubSample = inputData.RESelectedSubSample;\r\n                let JASelectedTest = inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [];\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"RegistrationTestAttachment\", \"RegistrationTestComment\"],\r\n                    ntransactiontestcode,\r\n                    JASelectedSample: inputData.masterData.JASelectedSample,\r\n                    JASelectedTest,\r\n                    JASelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabDetailJobAllocation(inputData, true));\r\n            } else {\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    JASelectedTest: inputData.masterData.JA_TEST.length > 0 ? [inputData.masterData.JA_TEST[0]] : [],\r\n                    JASelectedSubSample: inputData.JASelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.JA_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        JASelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.JA_TEST[0].ntransactiontestcode\r\n                }\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                \r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.JA_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            JASelectedSubSample: inputData.JASelectedSubSample,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        activeTestTab: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestChildTabDetailJobAllocation(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.JASelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let url=\"\";\r\n       \r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;           \r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"RegistrationSampleAttachment\"\r\n                dataStateName = \"sampleAttachmentDataState\"\r\n                break;\r\n            default:\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                dataStateName =\"testAttachmentDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        JASelectedSample: inputData.JASelectedSample || inputData.masterData.JASelectedSample,\r\n                        JASelectedTest: inputData.JASelectedTest,\r\n                        activeTabIndex: inputData.activeTabIndex,\r\n                        activeTabId: inputData.activeTabId\r\n                    }\r\n                    let skipInfo = {};\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        JASelectedTest: inputData.JASelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            activeTabIndex: inputData.activeTabIndex,\r\n                            activeTabId: inputData.activeTabId,\r\n                            activeTestTab: inputData.activeTestKey,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.JASelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                JASelectedTest: inputData.JASelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData.skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\nexport function updatedObjectWithNewElement1(oldList, newList) {\r\n    oldList = [...newList, ...oldList];\r\n    return oldList;\r\n  }\r\n\r\n"]},"metadata":{},"sourceType":"module"}