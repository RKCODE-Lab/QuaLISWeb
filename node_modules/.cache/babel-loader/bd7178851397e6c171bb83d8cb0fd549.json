{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest, updateStore } from './LoginAction';\nimport { sortData } from '../components/CommonScript';\nexport function constructGraphView(graphViewData, graphSelectedNode, userInfo, dispatch) {\n  let initialNode = {};\n  let dataHeight = 2;\n  const masterData = graphViewData;\n\n  if (graphSelectedNode === \"Site\") {\n    const selectedOrgSite = masterData.SelectedOrgSite || {};\n    const siteDeptList = masterData.SiteDepartment || [];\n    const siteDeptArray = [];\n    siteDeptList.map((siteDept, i) => {\n      dataHeight++;\n\n      if (siteDept.nsitecode === selectedOrgSite.nsitecode) {\n        const deptLabList = masterData.DepartmentLab || [];\n        const deptLabArray = [];\n        deptLabList.map((deptLab, j) => {\n          dataHeight++;\n\n          if (deptLab.nsitedeptcode === siteDept.nsitedeptcode) {\n            const labSectionList = masterData.LabSection || [];\n            const labSectionArray = [];\n            labSectionList.map((labSection, index) => {\n              dataHeight++;\n\n              if (labSection.ndeptlabcode === deptLab.ndeptlabcode) {\n                const sectionUsersList = masterData.SectionUsers || [];\n                const sectionUserArray = [];\n                sectionUsersList.map((sectionUser, userIndex) => {\n                  dataHeight++;\n\n                  if (sectionUser.nlabsectioncode === labSection.nlabsectioncode) {\n                    const userNode = sectionUser.susername;\n                    return sectionUserArray.push({\n                      name: userNode.length > 30 ? userNode.substring(0, 30).concat(\"...\") : userNode,\n                      key: \"sectionuser_4_\" + sectionUser.nsectionusercode,\n                      textProps: {\n                        x: -25,\n                        y: 10\n                      },\n                      gProps: {\n                        className: \"userClass\",\n                        item: sectionUser\n                      }\n                    });\n                  }\n\n                  return null;\n                });\n                const sectionNode = labSection.ssectionname;\n                return labSectionArray.push({\n                  name: sectionNode.length > 30 ? sectionNode.substring(0, 30).concat(\"...\") : sectionNode,\n                  key: \"labsection_4_\" + labSection.nlabsectioncode,\n                  textProps: {\n                    x: -25,\n                    y: 10\n                  },\n                  children: sectionUserArray,\n                  gProps: {\n                    className: 'sectionClass',\n                    item: labSection,\n                    onClick: () => dispatch(organisationService({\n                      inputData: {\n                        nlabsectioncode: labSection.nlabsectioncode,\n                        userinfo: userInfo,\n                        graphview: true\n                      },\n                      selectedtreepath: \"\",\n                      selectedNode: \"Section\",\n                      url: \"organisation/getSectionUsers\"\n                    }))\n                  }\n                });\n              }\n\n              return null;\n            });\n            const labNode = deptLab.slabname;\n            return deptLabArray.push({\n              name: labNode.length > 30 ? labNode.substring(0, 30).concat(\"...\") : labNode,\n              key: \"deptlab_4_\" + deptLab.ndeptlabcode,\n              children: labSectionArray,\n              textProps: {\n                x: -25,\n                y: 10\n              },\n              gProps: {\n                className: 'labClass',\n                item: deptLab,\n                onClick: () => dispatch(organisationService({\n                  inputData: {\n                    ndeptlabcode: deptLab.ndeptlabcode,\n                    userinfo: userInfo,\n                    graphview: true\n                  },\n                  selectedtreepath: \"\",\n                  selectedNode: \"Lab\",\n                  url: \"organisation/getLabSection\"\n                }))\n              }\n            });\n          }\n\n          return null;\n        });\n        const deptNode = siteDept.sdeptname;\n        return siteDeptArray.push({\n          name: deptNode.length > 30 ? deptNode.substring(0, 30).concat(\"...\") : deptNode,\n          key: \"sitedept_4_\" + siteDept.nsitedeptcode,\n          children: deptLabArray,\n          textProps: {\n            x: -25,\n            y: 10\n          },\n          gProps: {\n            className: 'deptClass',\n            item: siteDept,\n            onClick: () => dispatch(organisationService({\n              inputData: {\n                nsitedeptcode: siteDept.nsitedeptcode,\n                userinfo: userInfo,\n                graphview: true\n              },\n              selectedtreepath: \"\",\n              selectedNode: \"Department\",\n              url: \"organisation/getDepartmentLab\"\n            }))\n          }\n        });\n      }\n\n      ;\n      return null;\n    });\n    initialNode = {\n      name: selectedOrgSite && selectedOrgSite.ssitename,\n      key: \"selectedOrgSite_4_\" + selectedOrgSite.nsitecode,\n      children: siteDeptArray,\n      textProps: {\n        x: 0,\n        y: 10\n      },\n      gProps: {\n        className: 'siteClass',\n        onClick: () => dispatch(organisationService({\n          inputData: {\n            nsitecode: selectedOrgSite.nsitecode,\n            userinfo: userInfo,\n            graphview: true\n          },\n          selectedtreepath: \"\",\n          selectedNode: \"Site\",\n          url: \"organisation/getSiteDepartment\"\n        }))\n      }\n    };\n  } else if (graphSelectedNode === \"Department\") {\n    const selectedSiteDepartment = masterData.SelectedSiteDepartment || {};\n    const deptLabList = masterData.DepartmentLab || [];\n    const deptLabArray = [];\n    deptLabList.map((deptLab, j) => {\n      dataHeight++;\n\n      if (deptLab.nsitedeptcode === selectedSiteDepartment.nsitedeptcode) {\n        const labSectionList = masterData.LabSection || [];\n        const labSectionArray = [];\n        labSectionList.map((labSection, index) => {\n          dataHeight++;\n\n          if (labSection.ndeptlabcode === deptLab.ndeptlabcode) {\n            const sectionUsersList = masterData.SectionUsers || [];\n            const sectionUserArray = [];\n            sectionUsersList.map((sectionUser, userIndex) => {\n              dataHeight++;\n\n              if (sectionUser.nlabsectioncode === labSection.nlabsectioncode) {\n                const userNode = sectionUser.susername;\n                return sectionUserArray.push({\n                  name: userNode.length > 30 ? userNode.substring(0, 30).concat(\"...\") : userNode,\n                  key: \"sectionuser_4_\" + sectionUser.nsectionusercode,\n                  textProps: {\n                    x: -25,\n                    y: 10\n                  },\n                  gProps: {\n                    className: \"userClass\",\n                    item: sectionUser\n                  }\n                });\n              }\n\n              return null;\n            });\n            const sectionNode = labSection.ssectionname;\n            return labSectionArray.push({\n              name: sectionNode.length > 30 ? sectionNode.substring(0, 30).concat(\"...\") : sectionNode,\n              key: \"labsection_3_\" + labSection.nlabsectioncode,\n              textProps: {\n                x: -25,\n                y: 25\n              },\n              children: sectionUserArray,\n              gProps: {\n                className: 'sectionClass',\n                item: labSection,\n                onClick: () => dispatch(organisationService({\n                  inputData: {\n                    nlabsectioncode: labSection.nlabsectioncode,\n                    userinfo: userInfo,\n                    graphview: true\n                  },\n                  selectedtreepath: \"\",\n                  selectedNode: \"Section\",\n                  url: \"organisation/getSectionUsers\"\n                }))\n              }\n            });\n          }\n\n          return null;\n        });\n        const labNode = deptLab.slabname;\n        return deptLabArray.push({\n          name: labNode.length > 30 ? labNode.substring(0, 30).concat(\"...\") : labNode,\n          key: \"deptlab_3_\" + deptLab.ndeptlabcode,\n          children: labSectionArray,\n          textProps: {\n            x: -25,\n            y: 25\n          },\n          gProps: {\n            className: 'labClass',\n            item: deptLab,\n            onClick: () => dispatch(organisationService({\n              inputData: {\n                ndeptlabcode: deptLab.ndeptlabcode,\n                userinfo: userInfo,\n                graphview: true\n              },\n              selectedtreepath: \"\",\n              selectedNode: \"Lab\",\n              url: \"organisation/getLabSection\"\n            }))\n          }\n        });\n      }\n\n      return null;\n    });\n    const deptNode = selectedSiteDepartment.sdeptname;\n    initialNode = {\n      name: deptNode,\n      key: 'selectedSiteDepartment_3_' + selectedSiteDepartment.nsitedeptcode,\n      children: deptLabArray,\n      textProps: {\n        x: 0,\n        y: 25\n      },\n      gProps: {\n        className: 'deptClass'\n      }\n    };\n  } else if (graphSelectedNode === \"Lab\") {\n    const selectedDepartmentLab = masterData.SelectedDepartmentLab || {};\n    const labSectionList = masterData.LabSection || [];\n    const labSectionArray = [];\n    labSectionList.map((labSection, index) => {\n      dataHeight++;\n\n      if (labSection.ndeptlabcode === selectedDepartmentLab.ndeptlabcode) {\n        const sectionUsersList = masterData.SectionUsers || [];\n        const sectionUserArray = [];\n        sectionUsersList.map((sectionUser, userIndex) => {\n          dataHeight++;\n\n          if (sectionUser.nlabsectioncode === labSection.nlabsectioncode) {\n            const userNode = sectionUser.susername;\n            return sectionUserArray.push({\n              name: userNode.length > 30 ? userNode.substring(0, 30).concat(\"...\") : userNode,\n              key: \"sectionuser_2_\" + sectionUser.nsectionusercode,\n              textProps: {\n                x: -25,\n                y: 25\n              },\n              gProps: {\n                className: \"userClass\",\n                item: sectionUser\n              }\n            });\n          }\n\n          return null;\n        });\n        const sectionNode = labSection.ssectionname;\n        return labSectionArray.push({\n          name: sectionNode.length > 30 ? sectionNode.substring(0, 30).concat(\"...\") : sectionNode,\n          key: \"labsection_2_\" + labSection.nlabsectioncode,\n          textProps: {\n            x: -25,\n            y: 25\n          },\n          children: sectionUserArray,\n          gProps: {\n            className: 'sectionClass',\n            item: labSection,\n            onClick: () => dispatch(organisationService({\n              inputData: {\n                nlabsectioncode: labSection.nlabsectioncode,\n                userinfo: userInfo,\n                graphview: true\n              },\n              selectedtreepath: \"\",\n              selectedNode: \"Section\",\n              url: \"organisation/getSectionUsers\"\n            }))\n          }\n        });\n      }\n\n      return null;\n    });\n    const labNode = selectedDepartmentLab.slabname;\n    initialNode = {\n      name: labNode,\n      key: 'deptlab_2_' + selectedDepartmentLab.ndeptlabcode,\n      children: labSectionArray,\n      textProps: {\n        x: 0,\n        y: 25\n      },\n      gProps: {\n        className: 'deptClass'\n      }\n    };\n  } else if (graphSelectedNode === \"Section\") {\n    const selectedLabSection = masterData.SelectedLabSection || {};\n    const sectionUsersList = masterData.SectionUsers || [];\n    const sectionUserArray = [];\n    sectionUsersList.map((sectionUser, userIndex) => {\n      dataHeight++;\n\n      if (sectionUser.nlabsectioncode === selectedLabSection.nlabsectioncode) {\n        const userNode = sectionUser.susername;\n        return sectionUserArray.push({\n          name: userNode.length > 30 ? userNode.substring(0, 30).concat(\"...\") : userNode,\n          key: \"sectionuser_1_\" + sectionUser.nsectionusercode,\n          textProps: {\n            x: -25,\n            y: 25\n          },\n          gProps: {\n            className: \"userClass\",\n            item: sectionUser\n          }\n        });\n      }\n\n      return null;\n    });\n    const sectionNode = selectedLabSection.ssectionname;\n    initialNode = {\n      name: sectionNode,\n      key: \"labSection_1_\" + selectedLabSection.nlabsectioncode,\n      children: sectionUserArray,\n      textProps: {\n        x: 0,\n        y: 25\n      },\n      gProps: {\n        className: 'deptClass'\n      }\n    };\n  }\n\n  const graphData = {\n    initialNode,\n    dataHeight\n  };\n  return graphData;\n}\nexport function organisationService(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(methodParam.url, methodParam.inputData).then(response => {\n      if (methodParam.inputData.graphview === true) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal: false\n          }\n        };\n        dispatch(updateStore(updateInfo));\n        const data = { ...response.data\n        };\n        const graphData = constructGraphView(data, methodParam.selectedNode, methodParam.inputData.userinfo, dispatch);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            graphData: graphData[\"initialNode\"],\n            graphHeight: graphData[\"dataHeight\"],\n            graphSelectedNode: methodParam.selectedNode,\n            loading: false,\n            graphView: data.GraphView,\n            openModal: true\n          }\n        });\n      } else {\n        const masterData = { ...methodParam.masterData,\n          ...response.data\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            organisation: methodParam.organisation,\n            data: undefined,\n            dataState: undefined,\n            //selectedTreePath :methodParam.inputData.selectedtreepath,\n            loading: false,\n            // treeData:site\n            graphView: false\n          }\n        });\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getOrganisationComboService(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(methodParam.url, methodParam.inputData).then(response => {\n      const respObject = {};\n\n      if (methodParam.organisation) {\n        respObject[\"organisation\"] = methodParam.organisation;\n      } //const index = methodParam.columnList.findIndex(item=>item.controlType === \"selectbox\")\n      // const selected = methodParam.selectedRecord;\n      // const foundIndex = response.data.findIndex(\n      //     x => x[\"ndefaultstatus\"] === transactionStatus.YES);\n      // const defaultStatus =  response.data[foundIndex] ;\n      // selected[methodParam.columnList[index].dataField] = defaultStatus;\n      // const dataMap = constructOptionList(response.data || [],methodParam.columnList[index].optionId, \n      //     methodParam.columnList[index].optionValue, undefined, undefined, true) ;\n      // const dataList = dataMap.get(\"OptionList\");\n      // const selected = methodParam.selectedRecord;\n      // if (dataMap.get(\"DefaultValue\") !== undefined){\n      //     selected[methodParam.columnList[index].dataField] = [dataMap.get(\"DefaultValue\")];\n      // }\n\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          [methodParam.listName]: response.data || [],\n          operation: methodParam.operation,\n          screenName: methodParam.screenName,\n          selectedRecord: methodParam.selectedRecord,\n          openModal: true,\n          ncontrolCode: methodParam.ncontrolCode,\n          loading: false,\n          graphView: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionUserRole(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"organisation/getSectionUserRole\", {\n      nsitecode: methodParam.nsitecode,\n      nusercode: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let userRoleMap = methodParam.masterData.userRoleMap || new Map();\n      userRoleMap.set(parseInt(Object.keys(response.data[\"SectionUserRoleMap\"])[0]), Object.values(response.data[\"SectionUserRoleMap\"])[0]);\n      const masterData = { ...methodParam.masterData,\n        userRoleMap\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          userRoleMap,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function reloadTreeData (methodParam) {            \n//     return function (dispatch) {  \n//     const updateInfo = {\n//             typeName: DEFAULT_RETURN,\n//             data: { masterData:{}, organisation:undefined,}\n//         }\n//     dispatch(updateStore(updateInfo))\n//     dispatch(callService(methodParam))\n//     }\n// }","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/actions/OrganisationAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","updateStore","sortData","constructGraphView","graphViewData","graphSelectedNode","userInfo","dispatch","initialNode","dataHeight","masterData","selectedOrgSite","SelectedOrgSite","siteDeptList","SiteDepartment","siteDeptArray","map","siteDept","i","nsitecode","deptLabList","DepartmentLab","deptLabArray","deptLab","j","nsitedeptcode","labSectionList","LabSection","labSectionArray","labSection","index","ndeptlabcode","sectionUsersList","SectionUsers","sectionUserArray","sectionUser","userIndex","nlabsectioncode","userNode","susername","push","name","length","substring","concat","key","nsectionusercode","textProps","x","y","gProps","className","item","sectionNode","ssectionname","children","onClick","organisationService","inputData","userinfo","graphview","selectedtreepath","selectedNode","url","labNode","slabname","deptNode","sdeptname","ssitename","selectedSiteDepartment","SelectedSiteDepartment","selectedDepartmentLab","SelectedDepartmentLab","selectedLabSection","SelectedLabSection","graphData","methodParam","post","then","response","updateInfo","typeName","data","openModal","type","payload","graphHeight","loading","graphView","GraphView","organisation","undefined","dataState","catch","error","status","message","warn","getOrganisationComboService","respObject","listName","operation","screenName","selectedRecord","ncontrolCode","getSectionUserRole","nusercode","primaryKeyValue","userRoleMap","Map","set","parseInt","Object","keys","values"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest, updateStore} from './LoginAction';\r\nimport {  sortData } from '../components/CommonScript';\r\n\r\n\r\nexport function constructGraphView(graphViewData, graphSelectedNode, userInfo, dispatch) {\r\n\r\n    let initialNode = {};\r\n    let dataHeight = 2;\r\n    const masterData = graphViewData;\r\n    if (graphSelectedNode === \"Site\") {\r\n        const selectedOrgSite = masterData.SelectedOrgSite || {};\r\n        const siteDeptList = masterData.SiteDepartment || [];\r\n        const siteDeptArray = [];\r\n\r\n        siteDeptList.map((siteDept, i) => {\r\n            dataHeight++\r\n            if (siteDept.nsitecode === selectedOrgSite.nsitecode) {\r\n\r\n                const deptLabList = masterData.DepartmentLab || [];\r\n                const deptLabArray = [];\r\n\r\n                deptLabList.map((deptLab, j) => {\r\n                    dataHeight++;\r\n                    if (deptLab.nsitedeptcode === siteDept.nsitedeptcode) {\r\n                        const labSectionList = masterData.LabSection || [];\r\n                        const labSectionArray = [];\r\n\r\n                        labSectionList.map((labSection, index) => {\r\n                            dataHeight++;\r\n                            if (labSection.ndeptlabcode === deptLab.ndeptlabcode) {\r\n                                const sectionUsersList = masterData.SectionUsers || [];\r\n                                const sectionUserArray = [];\r\n                                sectionUsersList.map((sectionUser, userIndex) => {\r\n                                    dataHeight++;\r\n                                    if (sectionUser.nlabsectioncode === labSection.nlabsectioncode) {\r\n                                        const userNode = sectionUser.susername;\r\n                                        return sectionUserArray.push({\r\n                                            name: userNode.length > 30 ? userNode.substring(0, 30).concat(\"...\") : userNode,\r\n                                            key: \"sectionuser_4_\" + sectionUser.nsectionusercode,\r\n                                            textProps: { x: -25, y: 10 },\r\n                                            gProps: { className: \"userClass\", item: sectionUser }\r\n                                        })\r\n                                    }\r\n                                    return null;\r\n                                })\r\n                                const sectionNode = labSection.ssectionname;\r\n                                return labSectionArray.push({\r\n                                    name: sectionNode.length > 30 ? sectionNode.substring(0, 30).concat(\"...\") : sectionNode,\r\n                                    key: \"labsection_4_\" + labSection.nlabsectioncode,\r\n                                    textProps: { x: -25, y: 10 },\r\n                                    children: sectionUserArray,\r\n                                    gProps: {\r\n                                        className: 'sectionClass', item: labSection,\r\n                                          onClick: () => dispatch(organisationService({inputData:{nlabsectioncode:labSection.nlabsectioncode,\r\n                                                userinfo:userInfo, graphview:true},\r\n                                                selectedtreepath :\"\", \r\n                                                selectedNode :\"Section\",\r\n                                                url:\"organisation/getSectionUsers\"}))                                         \r\n                                    }\r\n\r\n                                })\r\n                            }\r\n                            return null;\r\n\r\n                        });\r\n                        \r\n                        const labNode = deptLab.slabname;\r\n                        return deptLabArray.push({\r\n                            name: labNode.length > 30 ? labNode.substring(0, 30).concat(\"...\") : labNode,\r\n                            key: \"deptlab_4_\" + deptLab.ndeptlabcode,\r\n                            children: labSectionArray,\r\n                            textProps: { x: -25, y: 10 },\r\n                            gProps: {\r\n                                className: 'labClass', item: deptLab,\r\n                                onClick: () => dispatch(organisationService({inputData:{ndeptlabcode:deptLab.ndeptlabcode,\r\n                                                    userinfo:userInfo, graphview:true},\r\n                                                    selectedtreepath :\"\", \r\n                                                    selectedNode :\"Lab\",\r\n                                                    url:\"organisation/getLabSection\"}))                                    \r\n                            },\r\n                        }\r\n                        )\r\n                    }\r\n                    return null;\r\n                });\r\n                \r\n                const deptNode = siteDept.sdeptname;\r\n                return siteDeptArray.push({\r\n                    name: deptNode.length > 30 ? deptNode.substring(0, 30).concat(\"...\") : deptNode,\r\n                    key: \"sitedept_4_\" + siteDept.nsitedeptcode,\r\n                    children: deptLabArray,\r\n                    textProps: { x: -25, y: 10 },\r\n                    gProps: {\r\n                        className: 'deptClass', item: siteDept,\r\n                        onClick: () => dispatch(organisationService({inputData:{nsitedeptcode:siteDept.nsitedeptcode,\r\n                                                userinfo:userInfo, graphview:true},\r\n                                                selectedtreepath :\"\", \r\n                                                selectedNode :\"Department\",\r\n                                                url:\"organisation/getDepartmentLab\"}))\r\n                        \r\n                    },\r\n                })\r\n            };\r\n\r\n            return null;\r\n        });\r\n\r\n        initialNode = {\r\n            name: selectedOrgSite && selectedOrgSite.ssitename,\r\n            key: \"selectedOrgSite_4_\" + selectedOrgSite.nsitecode,\r\n            children: siteDeptArray,\r\n            textProps: { x: 0, y: 10 },\r\n            gProps: {\r\n                className: 'siteClass',\r\n                onClick: () => dispatch(organisationService({inputData:{nsitecode:selectedOrgSite.nsitecode,\r\n                                                userinfo:userInfo, graphview:true},\r\n                                                 selectedtreepath :\"\",\r\n                                                 selectedNode:\"Site\",\r\n                                                 url:\"organisation/getSiteDepartment\"}))                        \r\n                            \r\n            }\r\n        };\r\n    }\r\n    else if (graphSelectedNode === \"Department\") {\r\n        const selectedSiteDepartment = masterData.SelectedSiteDepartment || {};\r\n\r\n        const deptLabList = masterData.DepartmentLab || [];\r\n        const deptLabArray = [];\r\n\r\n        deptLabList.map((deptLab, j) => {\r\n            dataHeight++;\r\n            if (deptLab.nsitedeptcode === selectedSiteDepartment.nsitedeptcode) {\r\n                const labSectionList = masterData.LabSection || [];\r\n                const labSectionArray = [];\r\n\r\n                labSectionList.map((labSection, index) => {\r\n                    dataHeight++;\r\n                    if (labSection.ndeptlabcode === deptLab.ndeptlabcode) {\r\n                        const sectionUsersList = masterData.SectionUsers || [];\r\n                        const sectionUserArray = [];\r\n                        sectionUsersList.map((sectionUser, userIndex) => {\r\n                            dataHeight++;\r\n                            if (sectionUser.nlabsectioncode === labSection.nlabsectioncode) {\r\n                                const userNode = sectionUser.susername;\r\n                                return sectionUserArray.push({\r\n                                    name: userNode.length > 30 ? userNode.substring(0, 30).concat(\"...\") : userNode,\r\n                                    key: \"sectionuser_4_\" + sectionUser.nsectionusercode,\r\n                                    textProps: { x: -25, y: 10 },\r\n                                    gProps: { className: \"userClass\", item: sectionUser }\r\n                                })\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                        const sectionNode = labSection.ssectionname;\r\n\r\n                        return labSectionArray.push({\r\n                            name: sectionNode.length > 30 ? sectionNode.substring(0, 30).concat(\"...\") : sectionNode,\r\n                            key: \"labsection_3_\" + labSection.nlabsectioncode,\r\n                            textProps: { x: -25, y: 25 },\r\n                            children: sectionUserArray,\r\n                            gProps: {\r\n                                className: 'sectionClass', item: labSection,\r\n                                  onClick: () => \r\n                                    dispatch(organisationService({inputData:{nlabsectioncode:labSection.nlabsectioncode,\r\n                                            userinfo:userInfo, graphview:true},\r\n                                            selectedtreepath :\"\", \r\n                                            selectedNode :\"Section\",\r\n                                            url:\"organisation/getSectionUsers\"}))                                 \r\n                            }\r\n                        })\r\n                    }\r\n                    return null;\r\n\r\n                });\r\n                                   \r\n                const labNode = deptLab.slabname;\r\n                return deptLabArray.push({\r\n                    name: labNode.length > 30 ? labNode.substring(0, 30).concat(\"...\") : labNode,\r\n                    key: \"deptlab_3_\" + deptLab.ndeptlabcode,\r\n                    children: labSectionArray,\r\n                    textProps: { x: -25, y: 25 },\r\n                    gProps: {\r\n                        className: 'labClass', item: deptLab,\r\n                        onClick: () => dispatch(organisationService({inputData:{ndeptlabcode:deptLab.ndeptlabcode,\r\n                                    userinfo:userInfo, graphview:true},\r\n                                    selectedtreepath :\"\", \r\n                                    selectedNode :\"Lab\",\r\n                                    url:\"organisation/getLabSection\"}))                      \r\n                    },\r\n                })\r\n            }\r\n            return null;\r\n        });\r\n\r\n        const deptNode = selectedSiteDepartment.sdeptname;\r\n\r\n        initialNode = {\r\n            name: deptNode,\r\n            key: 'selectedSiteDepartment_3_' + selectedSiteDepartment.nsitedeptcode,\r\n            children: deptLabArray,\r\n            textProps: { x: 0, y: 25 },\r\n            gProps: { className: 'deptClass' },\r\n        };\r\n    }\r\n    else if (graphSelectedNode === \"Lab\") {\r\n\r\n        const selectedDepartmentLab = masterData.SelectedDepartmentLab || {};\r\n        const labSectionList = masterData.LabSection || [];\r\n        const labSectionArray = [];\r\n\r\n        labSectionList.map((labSection, index) => {\r\n            dataHeight++;\r\n            if (labSection.ndeptlabcode === selectedDepartmentLab.ndeptlabcode) {\r\n                const sectionUsersList = masterData.SectionUsers || [];\r\n                const sectionUserArray = [];\r\n                sectionUsersList.map((sectionUser, userIndex) => {\r\n                    dataHeight++;\r\n                    if (sectionUser.nlabsectioncode === labSection.nlabsectioncode) {\r\n                        const userNode = sectionUser.susername;\r\n\r\n                        return sectionUserArray.push({\r\n                            name: userNode.length > 30 ? userNode.substring(0, 30).concat(\"...\") : userNode,\r\n                            key: \"sectionuser_2_\" + sectionUser.nsectionusercode,\r\n                            textProps: { x: -25, y: 25 },\r\n                            gProps: { className: \"userClass\", item: sectionUser }\r\n                        })\r\n                    }\r\n                    return null;\r\n                })\r\n                const sectionNode = labSection.ssectionname;\r\n\r\n                return labSectionArray.push({\r\n                    name: sectionNode.length > 30 ? sectionNode.substring(0, 30).concat(\"...\") : sectionNode,\r\n                    key: \"labsection_2_\" + labSection.nlabsectioncode,\r\n                    textProps: { x: -25, y: 25 },\r\n                    children: sectionUserArray,\r\n                    gProps: {\r\n                        className: 'sectionClass', item: labSection,\r\n                          onClick: () =>  dispatch(organisationService({inputData:{nlabsectioncode:labSection.nlabsectioncode,\r\n                                    userinfo:userInfo, graphview:true},\r\n                                    selectedtreepath :\"\", \r\n                                    selectedNode :\"Section\",\r\n                                    url:\"organisation/getSectionUsers\"}))\r\n                    }\r\n                })\r\n            }\r\n            return null;\r\n\r\n        });\r\n        const labNode = selectedDepartmentLab.slabname;\r\n\r\n        initialNode = {\r\n            name: labNode,\r\n            key: 'deptlab_2_' + selectedDepartmentLab.ndeptlabcode,\r\n            children: labSectionArray,\r\n            textProps: { x: 0, y: 25 },\r\n            gProps: { className: 'deptClass' },\r\n        };\r\n\r\n    }\r\n    else if (graphSelectedNode === \"Section\") {\r\n\r\n        const selectedLabSection = masterData.SelectedLabSection || {};\r\n\r\n        const sectionUsersList = masterData.SectionUsers || [];\r\n        const sectionUserArray = [];\r\n        sectionUsersList.map((sectionUser, userIndex) => {\r\n            dataHeight++;\r\n            if (sectionUser.nlabsectioncode === selectedLabSection.nlabsectioncode) {\r\n               const userNode = sectionUser.susername;\r\n               return sectionUserArray.push({\r\n                    name: userNode.length > 30 ? userNode.substring(0, 30).concat(\"...\") : userNode,\r\n                    key: \"sectionuser_1_\" + sectionUser.nsectionusercode,\r\n                    textProps: { x: -25, y: 25 },\r\n                    gProps: { className: \"userClass\", item: sectionUser }\r\n                })\r\n            }\r\n            return null;\r\n        })\r\n        const sectionNode = selectedLabSection.ssectionname;\r\n\r\n        initialNode = {\r\n            name: sectionNode,\r\n            key: \"labSection_1_\" + selectedLabSection.nlabsectioncode,\r\n            children: sectionUserArray,\r\n            textProps: { x: 0, y: 25 },\r\n            gProps: { className: 'deptClass' },\r\n        };\r\n\r\n    }\r\n    const graphData = {initialNode, dataHeight};\r\n    return graphData;\r\n}\r\n\r\n\r\nexport function organisationService(methodParam){\r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(methodParam.url, methodParam.inputData)\r\n    .then(response=>{       \r\n                   \r\n            if (methodParam.inputData.graphview === true){               \r\n                   \r\n                const updateInfo = { typeName: DEFAULT_RETURN,\r\n                                     data: { openModal:false}\r\n                                   };\r\n                dispatch(updateStore(updateInfo));\r\n\r\n                const data = {...response.data};   \r\n                \r\n                const graphData = constructGraphView(data,methodParam.selectedNode, methodParam.inputData.userinfo, dispatch);\r\n                dispatch({type: DEFAULT_RETURN, payload:{   graphData:graphData[\"initialNode\"],\r\n                                                            graphHeight :graphData[\"dataHeight\"],\r\n                                                            graphSelectedNode:methodParam.selectedNode,\r\n                                                            loading:false, \r\n                                                            graphView: data.GraphView,\r\n                                                            openModal:true\r\n                                                        }});                   \r\n            }\r\n            else{\r\n                const masterData = {...methodParam.masterData, ...response.data};\r\n                sortData(masterData);  \r\n\r\n                dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n                                                            organisation :methodParam.organisation,\r\n                                                            data:undefined, dataState:undefined,\r\n                                                            //selectedTreePath :methodParam.inputData.selectedtreepath,\r\n                                                            loading:false,// treeData:site\r\n                                                            graphView:false\r\n                                                        }});\r\n            }                      \r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n\r\nexport function getOrganisationComboService(methodParam) {            \r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(methodParam.url, methodParam.inputData)\r\n    .then(response=>{                  \r\n        const respObject = {};\r\n        if (methodParam.organisation){\r\n            respObject[\"organisation\"] = methodParam.organisation\r\n        }\r\n        //const index = methodParam.columnList.findIndex(item=>item.controlType === \"selectbox\")\r\n        // const selected = methodParam.selectedRecord;\r\n\r\n        // const foundIndex = response.data.findIndex(\r\n        //     x => x[\"ndefaultstatus\"] === transactionStatus.YES);\r\n        // const defaultStatus =  response.data[foundIndex] ;\r\n        // selected[methodParam.columnList[index].dataField] = defaultStatus;\r\n\r\n        // const dataMap = constructOptionList(response.data || [],methodParam.columnList[index].optionId, \r\n        //     methodParam.columnList[index].optionValue, undefined, undefined, true) ;\r\n        // const dataList = dataMap.get(\"OptionList\");\r\n        // const selected = methodParam.selectedRecord;\r\n        // if (dataMap.get(\"DefaultValue\") !== undefined){\r\n        //     selected[methodParam.columnList[index].dataField] = [dataMap.get(\"DefaultValue\")];\r\n        // }\r\n            dispatch({type: DEFAULT_RETURN, payload:{...respObject,\r\n                        [methodParam.listName]:response.data || [],                               \r\n                        operation:methodParam.operation, \r\n                        screenName:methodParam.screenName, \r\n                        selectedRecord:methodParam.selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:methodParam.ncontrolCode,\r\n                        loading:false, graphView:false\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n\r\nexport function getSectionUserRole (methodParam) {            \r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"organisation/getSectionUserRole\", \r\n                                    {nsitecode:methodParam.nsitecode, nusercode:methodParam.primaryKeyValue,\r\n                                    userinfo:methodParam.userInfo})\r\n    .then(response=>{ \r\n            let userRoleMap = methodParam.masterData.userRoleMap || new Map();           \r\n            userRoleMap.set(parseInt(Object.keys(response.data[\"SectionUserRoleMap\"])[0]), Object.values(response.data[\"SectionUserRoleMap\"])[0]);\r\n            const masterData = {...methodParam.masterData, userRoleMap};\r\n            sortData(masterData);\r\n            dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n                        data: methodParam.data, userRoleMap,\r\n                        dataState:methodParam.dataState,\r\n                        loading:false\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n\r\n// export function reloadTreeData (methodParam) {            \r\n//     return function (dispatch) {  \r\n//     const updateInfo = {\r\n//             typeName: DEFAULT_RETURN,\r\n//             data: { masterData:{}, organisation:undefined,}\r\n//         }\r\n//     dispatch(updateStore(updateInfo))\r\n//     dispatch(callService(methodParam))\r\n         \r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}