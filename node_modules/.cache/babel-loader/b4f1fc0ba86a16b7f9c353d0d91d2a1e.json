{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\project\\\\ProjectView.jsx\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport { connect } from \"react-redux\";\nimport { toast } from \"react-toastify\";\nimport { injectIntl } from \"react-intl\";\nimport { callService, crudMaster, validateEsignCredential, updateStore, changeSampleTypeFilter, filterColumnData, viewAttachment, addProjectMaster, getProjectView, getProjectmasterAddMemberService, addProjectMasterFile, getuserComboServices } from \"../../actions\";\nimport ListMaster from \"../../components/list-master/list-master.component\";\nimport { transactionStatus } from \"../../components/Enumeration\";\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\nimport { getControlMap, constructOptionList } from \"../../components/CommonScript\";\nimport { ContentPanel } from \"../../components/App.styles\";\nimport { process } from \"@progress/kendo-data-query\";\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\nimport { Affix } from \"rsuite\";\nimport { intl } from \"../../components/App\";\nimport ProjectViewFilter from \"../../pages/project/ProjectViewFilter\";\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { convertDateValuetoString, formatInputDate } from '../../components/CommonScript';\nimport ViewInfoDetails from \"../../components/ViewInfoDetails\";\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass ProjectView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleExpandChange = () => {\n      let childListMap = new Map();\n      let keylst = this.props.Login.masterData.ChildProjectView.map(key => key.npreregno);\n      keylst.map((key, i) => {\n        let ChildProjectView = this.props.Login.masterData.ChildProjectView;\n        ChildProjectView = ChildProjectView.filter(x => x['npreregno'] === key);\n        childListMap.set(parseInt(key), ChildProjectView);\n      });\n      this.setState({\n        childListMap\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 2:\n          const selectedRecordfilter = this.state.selectedRecordfilter || {};\n          selectedRecordfilter[fieldName] = comboData;\n          this.setState({\n            selectedRecordfilter\n          });\n          break;\n\n        case 3:\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.ConfirmDelete = (selectedProjectView, operation, deleteId, screenName) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.DeleteProjectMaster(screenName, selectedProjectView, operation, deleteId));\n    };\n\n    this.reloadData = onFilterSubmit => {\n      this.searchRef.current.value = \"\"; // if (Object.values(this.state.selectedRecordfilter.nsampletypecodevalue).length && this.state.selectedRecordfilter.nsampletypecodevalue !== undefined) {\n      // if ( this.props.Login.masterData.SelectedSampleType !== undefined) {\n\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n\n      if (onFilterSubmit) {\n        let selectedRecord = this.state.selectedRecord || {};\n\n        if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\n          fromDate = selectedRecord[\"fromdate\"];\n        }\n\n        if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\n          toDate = selectedRecord[\"todate\"];\n        }\n      }\n\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n\n      if (this.state.selectedRecordfilter !== undefined) {\n        if (this.state.selectedRecordfilter.nsampletypecodevalue !== undefined && this.state.selectedRecordfilter.nprojecttypecodevalue !== \"\") {\n          if (Object.values(this.props.Login.masterData.SelectedSampleType).length && this.props.Login.masterData.SelectedSampleType !== undefined) {\n            let inputParam = {\n              inputData: {\n                nsampletypecode: this.state.selectedRecordfilter.nsampletypecodevalue.value,\n                nprojecttypecode: this.state.selectedRecordfilter.nprojecttypecodevalue.value,\n                userinfo: this.props.Login.userInfo,\n                // nfilterSampleType: this.state.nfilterSampleType,\n                nfilterSampleType: this.state.selectedRecordfilter.nsampletypecodevalue,\n                fromDate: obj.fromDate,\n                toDate: obj.toDate,\n                currentdate: null\n              },\n              // classUrl: \"projectview\",\n              methodUrl: \"ProjectViewBySampleType\"\n            };\n            this.props.changeSampleTypeFilter(inputParam, this.props.Login.masterData.filterSampleType, this.state.selectedRecordfilter.nsampletypecodevalue);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PROJECTTYPENOTAVAILABLE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.reloadData(true); //   this.searchRef.current.value = \"\";\n      //   // if (this.state.nfilterSampleType.value) {\n      //   // if (this.state.selectedRecord.nsampletypecodevalue.value) {\n      //   //if ((this.state.selectedRecord).length>0) {\n      //   // if (Object.values(this.state.selectedRecordfilter.nsampletypecodevalue).length && this.state.selectedRecordfilter.nsampletypecodevalue !== undefined) {\n      //   let fromDate = this.props.Login.masterData.FromDate;\n      //   let toDate = this.props.Login.masterData.ToDate;\n      //   let selectedRecord = this.state.selectedRecord || {};\n      //   if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\n      //     fromDate = selectedRecord[\"fromdate\"];\n      //   }\n      //   if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\n      //     toDate = selectedRecord[\"todate\"];\n      //   }\n      //   let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      //   if (this.state.selectedRecordfilter !== undefined) {\n      //     if (this.state.selectedRecordfilter.nsampletypecodevalue !== undefined && this.state.selectedRecordfilter.nprojecttypecodevalue !== \"\") {\n      //       let inputParam = {\n      //         inputData: {\n      //           nsampletypecode: this.state.selectedRecordfilter.nsampletypecodevalue.value,\n      //           nprojecttypecode: this.state.selectedRecordfilter.nprojecttypecodevalue.value,\n      //           userinfo: this.props.Login.userInfo,\n      //           // nfilterSampleType: this.state.nfilterSampleType,\n      //           nfilterSampleType: this.state.selectedRecordfilter.nsampletypecodevalue,\n      //           fromDate: obj.fromDate,\n      //           toDate: obj.toDate,\n      //           currentDate: null\n      //         },\n      //         // classUrl: \"projectview\",\n      //         methodUrl: \"ProjectViewBySampleType\",\n      //       };\n      //       this.props.changeSampleTypeFilter(\n      //         inputParam,\n      //         this.props.Login.masterData.filterSampleType,this.state.selectedRecordfilter.nsampletypecodevalue\n      //       );\n      //     } else {\n      //       toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPENOTAVAILABLE\", }));\n      //     }\n      //   } else {\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\", }));\n      //   }\n    };\n\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      selectedProjectView: undefined,\n      controlMap: new Map(),\n      Instrument: [],\n      dataState: dataState,\n      dataResult: [],\n      data: [],\n      childListMap: [],\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"sprojectcode\", \"sprojecttitle\", \"ncost\", \"sprojecttypename\", \"stransdisplaystatus\", \"sprojectname\", \"sclientname\"];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  // onInputOnChange = (event, optional) => {\n  //   const selectedRecord = this.state.selectedRecord || {};\n  //   if (event.target.type === \"checkbox\") {\n  //     selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n  //   } else if (event.target.type === 'radio') {\n  //     selectedRecord[event.target.name] = optional;\n  //   } else {\n  //     selectedRecord[event.target.name] = event.target.value;\n  //   }\n  //   this.setState({ selectedRecord });\n  // };\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let versionStatusCSS = \"outline-secondary\";\n    let activeIconCSS = \"fa fa-check\";\n\n    if (this.props.Login.masterData.SelectedProjectView && this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.APPROVED) {\n      versionStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.SelectedProjectView && (this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.RETIRED || this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.CLOSED)) {\n      versionStatusCSS = \"outline-danger\";\n      activeIconCSS = \"\";\n    } // if (this.props.Login.openModal) {\n    //   this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\n    // }\n    //console.log(\"master main\", this.props.Login.masterData);\n    // let mandatoryFields = [];\n    //const { userInfo } = this.props.Login;\n    // const { SelectedProjectView } = this.props.Login.masterData;\n    // const selectedMaster = this.props.Login.masterData.SelectedProjectView;\n\n\n    const selectedProjectView = this.props.Login.masterData.SelectedProjectView;\n    const viewProjectId = this.state.controlMap.has(\"View\") && this.state.controlMap.get(\"View\").ncontrolcode;\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLETYPE\",\n      \"dataField\": \"sproductname\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_REGISTRATIONTYPE\",\n      \"dataField\": \"sregtypename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"dataField\": \"sregsubtypename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TRANSACTIONSTATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"200px\"\n    }];\n    let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.FromDate, this.state.selectedRecord[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let fromDate = obj.fromDate;\n    let toDate = obj.toDate;\n    const filterParam = {\n      inputListName: \"ProjectView\",\n      selectedObject: \"SelectedProjectView\",\n      primaryKeyField: \"nprojectmastercode\",\n      fetchUrl: \"projectview/getActiveProjectViewById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType.nsampletypecode\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTVIEW\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.ProjectView,\n      getMasterDetail: ProjectViewdata => this.props.getProjectView(ProjectViewdata, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: selectedProjectView,\n      primaryKeyField: \"nprojectmastercode\",\n      mainField: \"sprojecttitle\",\n      firstField: \"sprojectcode\",\n      secondField: \"sprojecttypename\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      isMultiSelecct: false,\n      hidePaging: false,\n      isClearSearch: this.props.Login.isClearSearch,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_PROJECTVIEWFILTER\": /*#__PURE__*/React.createElement(ProjectViewFilter, {\n          filterSampleType: this.state.ProjectViewFilterList || [],\n          nfilterSampleType: this.props.Login.masterData.SelectedSampleType || {},\n          handleDateChange: this.handleDateChange,\n          fromDate: fromDate,\n          toDate: toDate,\n          userInfo: this.props.Login.userInfo,\n          filterProjectType: this.state.ProjectTypeFilterList || [],\n          nfilterProjectType: this.props.Login.masterData.SelectedProjectType || {},\n          onComboChange: this.onComboChange,\n          selectedRecord: this.state.selectedRecordfilter || {} // selectedRecord1={this.state.selectedRecordfilter1 || {}}\n          // onFilterChange={this.onFilterChange}\n          ,\n          handleFilterDateChange: this.handleFilterDateChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 23\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 29\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 29\n      }\n    }))), selectedProjectView ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 23\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TOTALCOST\"\n    }) + \" : \" + selectedProjectView.ncost), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${versionStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 29\n      }\n    }, selectedProjectView.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(ViewInfoDetails, {\n      selectedObject: this.props.Login.masterData.SelectedProjectView,\n      screenHiddenDetails: this.state.userRoleControlRights.indexOf(viewProjectId) === -1,\n      screenName: this.props.Login.screenName,\n      dataTip: this.props.intl.formatMessage({\n        id: \"IDS_VIEW\"\n      }),\n      rowList: [[{\n        dataField: \"sprojecttitle\",\n        idsName: \"IDS_PROJECTTITLE\"\n      }, {\n        dataField: \"sprojectdescription\",\n        idsName: \"IDS_PROJECTDESCRIPTION\"\n      }], [{\n        dataField: \"sprojectname\",\n        idsName: \"IDS_PROJECTNAME\"\n      }, {\n        dataField: \"sclientname\",\n        idsName: \"IDS_CLIENT\"\n      }], [{\n        dataField: \"sprojectcode\",\n        idsName: \"IDS_PROJECTCODE\"\n      }, {\n        dataField: \"stransdisplaystatus\",\n        idsName: \"IDS_PROJECTSTATUS\"\n      }], [{\n        dataField: \"sprojectstartdate\",\n        idsName: \"IDS_PROJECTSTARTDATE\"\n      }, {\n        dataField: \"sexpectcompletiondate\",\n        idsName: \"IDS_PROJECTCOMPLETIONDATE\"\n      }]],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 27\n      }\n    }))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      expandField: \"expanded\",\n      handleExpandChange: this.handleExpandChange,\n      dataResult: this.props.Login.masterData.ParentProjectView && process(this.props.Login.masterData.ParentProjectView || [], this.state.dataState ? this.state.dataState : {\n        skip: 0,\n        take: 10\n      }) // dataResult={this.state.dataResult}\n      ,\n      dataState: this.state.dataState ? this.state.dataState : {\n        skip: 0,\n        take: 10\n      } // dataState={this.state.dataState}\n      ,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      pageable: true,\n      scrollable: 'scrollable',\n      hideColumnFilter: false,\n      selectedId: 0,\n      hasChild: true,\n      childMappingField: 'npreregno',\n      childColumnList: [{\n        \"idsName\": \"IDS_SAMPLEARNO\",\n        \"dataField\": \"ssamplearno\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_TESTNAME\",\n        \"dataField\": \"stestsynonym\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_COST\",\n        \"dataField\": \"ncost\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_TRANSACTIONSTATUS\",\n        \"dataField\": \"stransdisplaystatus\",\n        \"width\": \"200px\"\n      }],\n      childList: this.state.childListMap,\n      gridHeight: '600px',\n      isActionRequired: false //  actionColWidth={'250px'}   \n      //  gridWidth={'800px'}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 27\n      }\n    })))))) : \"\"))));\n  }\n\n  // closeModal = () => {\n  //   let loadEsign = this.props.Login.loadEsign;\n  //   let openModal = this.props.Login.openModal;\n  //   let selectedRecord = this.state.selectedRecord;\n  //   //    let selectedRecord = this.state.selectedRecord;\n  //   if (this.props.Login.loadEsign) {\n  //     if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\" || this.props.Login.operation === \"retire\") {\n  //       loadEsign = false;\n  //       openModal = false;\n  //       selectedRecord = {};\n  //     }\n  //     else {\n  //       loadEsign = false;\n  //       selectedRecord['esignpassword'] = '';\n  //       selectedRecord['esigncomments'] = '';\n  //       selectedRecord['esignreason'] = '';\n  //     }\n  //   }\n  //   else {\n  //     openModal = false;\n  //     selectedRecord = {};\n  //   }\n  //   const updateInfo = {\n  //     typeName: DEFAULT_RETURN,\n  //     data: { openModal, loadEsign, selectedRecord }\n  //   }\n  //   this.props.updateStore(updateInfo);\n  // }\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      selectedRecordfilter,\n      userRoleControlRights,\n      controlMap,\n      filterData,\n      nfilterSampleType,\n      filterSampleType,\n      nfilterProjectType,\n      selectedRecordfilter1\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n      this.setState({\n        selectedRecord,\n        selectedRecordfilter\n      });\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        controlMap,\n        userRoleControlRights\n      }); //   updateState = true;\n    }\n\n    let nsampletypecode = this.state.nfilterSampleType || {};\n    let nprojecttypecode = this.state.nfilterProjectType || {};\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.masterData.filterProjectType !== previousProps.Login.masterData.filterProjectType) {\n        nfilterSampleType = this.state.nfilterSampleType || {};\n        const filterSampleType = constructOptionList(this.props.Login.masterData.filterSampleType || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, undefined);\n        let ProjectViewFilterList = filterSampleType.get(\"OptionList\");\n        nsampletypecode = ProjectViewFilterList[0];\n        selectedRecordfilter = {\n          nsampletypecodevalue: nsampletypecode\n        };\n        selectedRecord = {\n          nsampletypecodevalue: nsampletypecode\n        };\n        const filterProjectType = constructOptionList(this.props.Login.masterData.filterProjectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n        let ProjectTypeFilterList = filterProjectType.get(\"OptionList\");\n        nprojecttypecode = ProjectTypeFilterList[0];\n        selectedRecordfilter = { ...selectedRecordfilter,\n          nprojecttypecodevalue: nprojecttypecode\n        };\n        selectedRecord = { ...selectedRecord,\n          nprojecttypecodevalue: nprojecttypecode\n        };\n        this.setState({\n          ProjectViewFilterList,\n          ProjectTypeFilterList,\n          selectedRecordfilter,\n          selectedRecord,\n          data: this.props.Login.masterData.ParentProjectView,\n          dataResult: process(this.props.Login.masterData.ParentProjectView || [], this.state.dataState)\n        });\n      }\n\n      if (this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\n        nfilterSampleType = {\n          label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\n          value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\n          item: this.props.Login.masterData.SelectedSampleType\n        };\n      }\n\n      if (this.props.Login.masterData.SelectedProjectType && this.props.Login.masterData.SelectedProjectType !== previousProps.Login.masterData.SelectedProjectType) {\n        nfilterProjectType = {\n          label: this.props.Login.masterData.SelectedProjectType.sprojecttypename,\n          value: this.props.Login.masterData.SelectedProjectType.nprojecttypecode,\n          item: this.props.Login.masterData.SelectedProjectType\n        };\n      } //  selectedRecordfilter = {nsampletypecodevalue:nfilterSampleType}\n\n\n      filterData = this.generateBreadCrumData();\n      updateState = true;\n      this.setState({\n        filterData,\n        selectedRecordfilter\n      });\n    }\n\n    if (this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\n      let nsampletypecodevalue = this.props.Login.masterData.SelectedSampleType ? {\n        label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\n        value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\n        item: this.props.Login.masterData.SelectedSampleType\n      } : \"\"; //  nsampletypecode=ProjectViewFilterList[ProjectViewFilterList.length-1];\n\n      selectedRecordfilter = { ...selectedRecordfilter,\n        nsampletypecodevalue\n      };\n      selectedRecord = { ...selectedRecord,\n        nsampletypecodevalue: nsampletypecode\n      }; // nfilterSampleType = this.props.Login.masterData.nfilterSampleType;\n\n      this.setState({\n        selectedRecordfilter,\n        selectedRecord\n      });\n    } ////\n\n\n    if (this.props.Login.masterData.SelectedProjectType !== previousProps.Login.masterData.SelectedProjectType) {\n      let nprojecttypecodevalue = this.props.Login.masterData.SelectedProjectType ? {\n        label: this.props.Login.masterData.SelectedProjectType.sprojecttypename,\n        value: this.props.Login.masterData.SelectedProjectType.nprojecttypecode,\n        item: this.props.Login.masterData.SelectedProjectType\n      } : \"\"; //  nsampletypecode=ProjectViewFilterList[ProjectViewFilterList.length-1];\n\n      selectedRecordfilter = { ...selectedRecordfilter,\n        nprojecttypecodevalue\n      };\n      selectedRecord = { ...selectedRecord,\n        nprojecttypecodevalue: nprojecttypecode\n      }; // nfilterSampleType = this.props.Login.masterData.nfilterSampleType;\n\n      this.setState({\n        selectedRecordfilter,\n        selectedRecord\n      });\n    } // if (this.props.Login.masterData.nfilterSampleType !== previousProps.Login.masterData.nfilterSampleType) {\n    // }\n\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      });\n    }\n\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedSampleType) {\n      breadCrumbData.push({\n        label: \"IDS_SAMPLETYPE\",\n        value: this.props.Login.masterData.SelectedSampleType ? this.props.Login.masterData.SelectedSampleType.ssampletypename : \"NA\"\n      });\n    }\n\n    if (this.props.Login.masterData && this.props.Login.masterData.SelectedProjectType) {\n      breadCrumbData.push({\n        label: \"IDS_PROJECTTYPE\",\n        value: this.props.Login.masterData.SelectedProjectType ? this.props.Login.masterData.SelectedProjectType.sprojecttypename : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  filterColumnData,\n  updateStore,\n  validateEsignCredential,\n  changeSampleTypeFilter,\n  viewAttachment,\n  addProjectMaster,\n  getProjectView,\n  getProjectmasterAddMemberService,\n  addProjectMasterFile,\n  getuserComboServices\n})(injectIntl(ProjectView));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/project/ProjectView.jsx"],"names":["React","Component","Row","Col","Card","connect","toast","injectIntl","callService","crudMaster","validateEsignCredential","updateStore","changeSampleTypeFilter","filterColumnData","viewAttachment","addProjectMaster","getProjectView","getProjectmasterAddMemberService","addProjectMasterFile","getuserComboServices","ListMaster","transactionStatus","DEFAULT_RETURN","getControlMap","constructOptionList","ContentPanel","process","ConfirmMessage","BreadcrumbComponent","Affix","intl","ProjectViewFilter","DataGrid","convertDateValuetoString","formatInputDate","ViewInfoDetails","SlideOutModal","mapStateToProps","state","Login","ProjectView","constructor","props","sidebarExpandCollapse","setState","sidebarview","handleDateChange","dateName","dateValue","selectedRecord","handleExpandChange","childListMap","Map","keylst","masterData","ChildProjectView","map","key","npreregno","i","filter","x","set","parseInt","onComboChange","comboData","fieldName","caseNo","selectedRecordfilter","dataStateChange","event","dataResult","data","dataState","ConfirmDelete","selectedProjectView","operation","deleteId","screenName","confirmMessage","confirm","formatMessage","id","DeleteProjectMaster","reloadData","onFilterSubmit","searchRef","current","value","fromDate","FromDate","toDate","ToDate","undefined","obj","userInfo","nsampletypecodevalue","nprojecttypecodevalue","Object","values","SelectedSampleType","length","inputParam","inputData","nsampletypecode","nprojecttypecode","userinfo","nfilterSampleType","currentdate","methodUrl","filterSampleType","warn","openFilter","showFilter","updateInfo","typeName","closeFilter","skip","take","error","userRoleControlRights","controlMap","Instrument","createRef","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","render","versionStatusCSS","activeIconCSS","SelectedProjectView","ntransactionstatus","APPROVED","RETIRED","CLOSED","viewProjectId","has","get","ncontrolcode","extractedColumnList","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","breadCrumbData","filterData","searchedData","ProjectViewdata","isClearSearch","ProjectViewFilterList","ProjectTypeFilterList","SelectedProjectType","handleFilterDateChange","parentFunction","ncost","stransdisplaystatus","indexOf","dataField","idsName","ParentProjectView","componentDidUpdate","previousProps","updateState","nfilterProjectType","selectedRecordfilter1","nformcode","item","push","filterProjectType","label","ssampletypename","sprojecttypename","generateBreadCrumData","breadCrumbFrom","breadCrumbto"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Row, Col, Card } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { toast } from \"react-toastify\";\r\nimport { injectIntl } from \"react-intl\";\r\nimport {\r\n  callService, crudMaster, validateEsignCredential, updateStore, changeSampleTypeFilter, filterColumnData,\r\n  viewAttachment, addProjectMaster, getProjectView, getProjectmasterAddMemberService, addProjectMasterFile, getuserComboServices\r\n} from \"../../actions\";\r\n\r\nimport ListMaster from \"../../components/list-master/list-master.component\";\r\nimport { transactionStatus } from \"../../components/Enumeration\";\r\nimport { DEFAULT_RETURN } from \"../../actions/LoginTypes\";\r\n\r\nimport { getControlMap, constructOptionList }\r\n  from \"../../components/CommonScript\"\r\nimport { ContentPanel } from \"../../components/App.styles\";\r\nimport { process } from \"@progress/kendo-data-query\";\r\nimport ConfirmMessage from \"../../components/confirm-alert/confirm-message.component\";\r\nimport BreadcrumbComponent from \"../../components/Breadcrumb.Component\";\r\nimport { Affix } from \"rsuite\";\r\nimport { intl } from \"../../components/App\";\r\nimport ProjectViewFilter from \"../../pages/project/ProjectViewFilter\";\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { convertDateValuetoString,formatInputDate } from '../../components/CommonScript';\r\nimport ViewInfoDetails from \"../../components/ViewInfoDetails\";\r\nimport SlideOutModal from \"../../components/slide-out-modal/SlideOutModal\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { Login: state.Login };\r\n};\r\n\r\nclass ProjectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const dataState = { skip: 0, take: 10 };\r\n    this.state = {\r\n      selectedRecord: {},\r\n      error: \"\",\r\n      userRoleControlRights: [],\r\n      selectedProjectView: undefined,\r\n      controlMap: new Map(),\r\n      Instrument: [],\r\n      dataState: dataState,\r\n      dataResult: [], data: [],\r\n      childListMap: [],\r\n      sidebarview: false\r\n    };\r\n    this.searchRef = React.createRef();\r\n    this.searchFieldList = [\"sprojectcode\", \"sprojecttitle\", \"ncost\", \"sprojecttypename\", \"stransdisplaystatus\",\"sprojectname\",\"sclientname\"]\r\n    this.confirmMessage = new ConfirmMessage();\r\n  }\r\n  sidebarExpandCollapse = () => {\r\n      this.setState({\r\n          sidebarview: true\r\n      })          \r\n  }\r\n\r\n  handleDateChange = (dateName, dateValue) => {\r\n    const { selectedRecord } = this.state;\r\n    selectedRecord[dateName] = dateValue;\r\n    this.setState({ selectedRecord });\r\n  };\r\n\r\n\r\n\r\n  // onInputOnChange = (event, optional) => {\r\n  //   const selectedRecord = this.state.selectedRecord || {};\r\n  //   if (event.target.type === \"checkbox\") {\r\n  //     selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n  //   } else if (event.target.type === 'radio') {\r\n  //     selectedRecord[event.target.name] = optional;\r\n  //   } else {\r\n  //     selectedRecord[event.target.name] = event.target.value;\r\n  //   }\r\n  //   this.setState({ selectedRecord });\r\n  // };\r\n\r\n\r\n  static getDerivedStateFromProps(props, state) {\r\n    if (props.Login.masterStatus !== \"\") {\r\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n        toast.warn(props.Login.masterStatus);\r\n        props.Login.masterStatus = \"\";\r\n      }\r\n    }\r\n    if (props.Login.error !== state.error) {\r\n      toast.error(props.Login.error);\r\n      props.Login.error = \"\";\r\n    }\r\n    if (props.Login.selectedRecord === undefined) {\r\n      return { selectedRecord: {} };\r\n    }\r\n    return null;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n\r\n    let versionStatusCSS = \"outline-secondary\";\r\n    let activeIconCSS = \"fa fa-check\"\r\n\r\n\r\n    if (this.props.Login.masterData.SelectedProjectView && this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.APPROVED) {\r\n      versionStatusCSS = \"outline-success\";\r\n    }\r\n    else if (this.props.Login.masterData.SelectedProjectView && ((this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.RETIRED) || (this.props.Login.masterData.SelectedProjectView.ntransactionstatus === transactionStatus.CLOSED))) {\r\n      versionStatusCSS = \"outline-danger\";\r\n      activeIconCSS = \"\";\r\n    }\r\n\r\n\r\n    // if (this.props.Login.openModal) {\r\n    //   this.mandatoryFields = this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord, this.props.Login.operation)\r\n    // }\r\n\r\n    //console.log(\"master main\", this.props.Login.masterData);\r\n    // let mandatoryFields = [];\r\n    //const { userInfo } = this.props.Login;\r\n\r\n\r\n\r\n    // const { SelectedProjectView } = this.props.Login.masterData;\r\n    // const selectedMaster = this.props.Login.masterData.SelectedProjectView;\r\n    const selectedProjectView = this.props.Login.masterData.SelectedProjectView;\r\n    const viewProjectId = this.state.controlMap.has(\"View\") && this.state.controlMap.get(\"View\").ncontrolcode;\r\n\r\n    this.extractedColumnList = [\r\n      { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"150px\" },\r\n      { \"idsName\": \"IDS_SAMPLETYPE\", \"dataField\": \"sproductname\", \"width\": \"150px\" },\r\n      { \"idsName\": \"IDS_REGISTRATIONTYPE\", \"dataField\": \"sregtypename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_REGISTRATIONSUBTYPE\", \"dataField\": \"sregsubtypename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\" },\r\n\r\n    ]\r\n\r\n    let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\r\n            this.state.selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate),\r\n            this.props.Login.userInfo)\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n\r\n    const filterParam = {\r\n      inputListName: \"ProjectView\",\r\n      selectedObject: \"SelectedProjectView\",\r\n      primaryKeyField: \"nprojectmastercode\",\r\n      fetchUrl: \"projectview/getActiveProjectViewById\",\r\n      fecthInputObject: { userinfo: this.props.Login.userInfo, nsampletypecode: this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType.nsampletypecode },\r\n      masterData: this.props.Login.masterData,\r\n      searchFieldList: this.searchFieldList,\r\n\r\n\r\n    };\r\n    const breadCrumbData = this.state.filterData || [];\r\n    return (\r\n      <>\r\n        <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n          {breadCrumbData.length > 0 ? (\r\n            <Affix top={53}>\r\n              <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n            </Affix>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <Row noGutters={true}>\r\n            <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n              <ListMaster\r\n                screenName={this.props.intl.formatMessage({ id: \"IDS_PROJECTVIEW\" })}\r\n                masterData={this.props.Login.masterData}\r\n                userInfo={this.props.Login.userInfo}\r\n                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.ProjectView}\r\n                getMasterDetail={(ProjectViewdata) => this.props.getProjectView(ProjectViewdata, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                selectedMaster={selectedProjectView}\r\n                primaryKeyField=\"nprojectmastercode\"\r\n                mainField=\"sprojecttitle\"\r\n                firstField=\"sprojectcode\"\r\n                secondField=\"sprojecttypename\"\r\n                filterColumnData={this.props.filterColumnData}\r\n                filterParam={filterParam}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                searchRef={this.searchRef}\r\n                reloadData={this.reloadData}\r\n                isMultiSelecct={false}\r\n                hidePaging={false}\r\n                isClearSearch={this.props.Login.isClearSearch}\r\n\r\n                openFilter={this.openFilter}\r\n                closeFilter={this.closeFilter}\r\n                onFilterSubmit={this.onFilterSubmit}\r\n                showFilterIcon={true}\r\n                showFilter={this.props.Login.showFilter}\r\n                filterComponent={[\r\n                  {\r\n                    \"IDS_PROJECTVIEWFILTER\":\r\n                      <ProjectViewFilter\r\n                        filterSampleType={this.state.ProjectViewFilterList || []}\r\n                        nfilterSampleType={this.props.Login.masterData.SelectedSampleType || {}}\r\n                        handleDateChange={this.handleDateChange}\r\n                        fromDate={fromDate}\r\n                        toDate={toDate}\r\n                        userInfo={this.props.Login.userInfo}\r\n                        filterProjectType={this.state.ProjectTypeFilterList || []}\r\n                        nfilterProjectType={this.props.Login.masterData.SelectedProjectType || {}}\r\n                        onComboChange={this.onComboChange}\r\n                        selectedRecord={this.state.selectedRecordfilter || {}}\r\n                      // selectedRecord1={this.state.selectedRecordfilter1 || {}}\r\n                        // onFilterChange={this.onFilterChange}\r\n                        handleFilterDateChange={this.handleFilterDateChange}\r\n\r\n                      />\r\n                  }\r\n                ]}\r\n\r\n              />\r\n            </Col>\r\n            <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                <div className=\"sidebar-view-btn-block\">\r\n                    <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                        {!this.props.sidebarview ?                    \r\n                            <i class=\"fa fa-less-than\"></i> :\r\n                            <i class=\"fa fa-greater-than\"></i> \r\n                        }\r\n                    </div>\r\n                </div>\r\n              {selectedProjectView ?\r\n                <ContentPanel className=\"panel-main-content\">\r\n                  <Card className=\"border-0\">\r\n                    <Card.Header>\r\n                      <Card.Title className=\"product-title-main\">\r\n                        {this.props.intl.formatMessage({ id: \"IDS_TOTALCOST\" }) + \" : \" + selectedProjectView.ncost}\r\n                      </Card.Title>\r\n                      <Card.Subtitle>\r\n                        <div className=\"d-flex product-category\">\r\n                          <h2 className=\"product-title-sub flex-grow-1\">\r\n                            <span className={`btn btn-outlined ${versionStatusCSS} btn-sm ml-3`}>\r\n                              {/* <i class={activeIconCSS}></i> */}\r\n                              {selectedProjectView.stransdisplaystatus}\r\n                            </span>\r\n                          </h2>\r\n                          <div className=\"d-inline\">\r\n\r\n                          <ViewInfoDetails \r\n                                selectedObject ={this.props.Login.masterData.SelectedProjectView}\r\n                                screenHiddenDetails={this.state.userRoleControlRights.indexOf(viewProjectId) === -1}\r\n                                screenName={this.props.Login.screenName}\r\n                                dataTip={this.props.intl.formatMessage({ id: \"IDS_VIEW\" })}\r\n                                rowList={[\r\n                                  [\r\n                                    {dataField:\"sprojecttitle\", idsName:\"IDS_PROJECTTITLE\"},                                    \r\n                                    {dataField:\"sprojectdescription\", idsName:\"IDS_PROJECTDESCRIPTION\"}                     \r\n                                  ],\r\n                                  [\r\n                                    {dataField:\"sprojectname\", idsName:\"IDS_PROJECTNAME\"},\r\n                                    {dataField: \"sclientname\", idsName: \"IDS_CLIENT\"}                \r\n                                  ],\r\n                                  [\r\n                                    {dataField:\"sprojectcode\", idsName:\"IDS_PROJECTCODE\"},\r\n                                    {dataField: \"stransdisplaystatus\", idsName: \"IDS_PROJECTSTATUS\"}            \r\n                                  ],\r\n                                  [                        \r\n                                    {dataField:\"sprojectstartdate\", idsName:\"IDS_PROJECTSTARTDATE\"},\r\n                                    {dataField:\"sexpectcompletiondate\", idsName:\"IDS_PROJECTCOMPLETIONDATE\"}                \r\n                                  ]\r\n                                                   \r\n                                ]}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </Card.Subtitle>\r\n                    </Card.Header>\r\n                    <Card.Body className=\"form-static-wrap\">\r\n\r\n                      {/* <Col md={12}>\r\n                        <div className=\"horizontal-line\"></div>\r\n                      </Col> */}\r\n                      <Row noGutters>\r\n                        <Col md={12}>\r\n                          <DataGrid\r\n                            expandField=\"expanded\"\r\n                            handleExpandChange={this.handleExpandChange}\r\n                            dataResult={this.props.Login.masterData.ParentProjectView && process(\r\n                              this.props.Login.masterData.ParentProjectView || [],\r\n                              this.state.dataState ? this.state.dataState : { skip: 0, take: 10 }\r\n                            )}\r\n                            // dataResult={this.state.dataResult}\r\n                            dataState={this.state.dataState\r\n                              ? this.state.dataState : { skip: 0, take: 10 }}\r\n                            // dataState={this.state.dataState}\r\n                            dataStateChange={this.dataStateChange}\r\n                            extractedColumnList={this.extractedColumnList}\r\n                            controlMap={this.state.controlMap}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            pageable={true}\r\n                            scrollable={'scrollable'}\r\n                            hideColumnFilter={false}\r\n                            selectedId={0}\r\n                            hasChild={true}\r\n                            childMappingField={'npreregno'}\r\n                            childColumnList={[\r\n                              { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"ssamplearno\", \"width\": \"250px\" },\r\n                              { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"250px\" },\r\n                              { \"idsName\": \"IDS_COST\", \"dataField\": \"ncost\", \"width\": \"100px\" },\r\n                              { \"idsName\": \"IDS_TRANSACTIONSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\" },\r\n\r\n\r\n                            ]}\r\n                            childList={this.state.childListMap}\r\n                            gridHeight={'600px'}\r\n                            isActionRequired={false}\r\n                          //  actionColWidth={'250px'}   \r\n                          //  gridWidth={'800px'}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                    </Card.Body>\r\n                  </Card>\r\n                </ContentPanel>\r\n                : \"\"\r\n              }\r\n            </Col>\r\n          </Row>\r\n\r\n\r\n        </div>\r\n\r\n      {/* {this.props.Login.openModal &&\r\n        <SlideOutModal\r\n        show={this.props.Login.openModal}\r\n        size={this.props.Login.modalScreenSize===true ? \"xl\" : \"lg\" }\r\n        closeModal={this.closeModal}\r\n        hideSave={this.props.Login.screenName ===  \"IDS_VIEW\" ? true :  false}\r\n        operation={( this.props.Login.screenName === \"IDS_VIEW\") ? \"\" :  this.props.Login.operation}\r\n        inputParam={this.props.Login.inputParam}\r\n        screenName={this.props.Login.screenName}\r\n        onSaveClick={this.onSaveClick}\r\n        esign={this.props.Login.loadEsign}\r\n        validateEsign={this.validateEsign}\r\n        selectedRecord={this.state.selectedRecord || {}} \r\n        addcomponent = {this.props.Login.screenName === \"IDS_VIEW\" ?\r\n        <AddQuotationPreview\r\n\r\n                selectedQuotation ={this.props.Login.masterData.SelectedQuotation}\r\n                userInfo={this.props.Login.userInfo}\r\n                genericlabel={this.props.Login.genericLabel}\r\n              ></AddQuotationPreview> : \"\"\r\n      }\r\n        />\r\n      } */}\r\n      </>\r\n    );\r\n  }\r\n\r\n  handleExpandChange = () => {\r\n\r\n    let childListMap = new Map();\r\n    let keylst = this.props.Login.masterData.ChildProjectView.map(key => key.npreregno);\r\n\r\n    keylst.map((key, i) => {\r\n      let ChildProjectView = this.props.Login.masterData.ChildProjectView;\r\n\r\n      ChildProjectView = ChildProjectView.filter(x => x['npreregno'] === key);\r\n      childListMap.set(parseInt(key), ChildProjectView);\r\n    })\r\n    this.setState({ childListMap })\r\n\r\n  };\r\n\r\n  onComboChange = (comboData, fieldName, caseNo) => {\r\n\r\n    const selectedRecord = this.state.selectedRecord || {};\r\n    switch (caseNo) {\r\n\r\n      case 2:\r\n        const selectedRecordfilter = this.state.selectedRecordfilter || {};\r\n        selectedRecordfilter[fieldName] = comboData;\r\n        this.setState({ selectedRecordfilter });\r\n        break;\r\n\r\n      case 3:\r\n\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord });\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // onInputOnChange = (event, optional) => {\r\n  //   const selectedRecord = this.state.selectedRecord || {};\r\n  //   if (event.target.type === 'checkbox') {\r\n  //     if (event.target.name === \"ntransactionstatus\")\r\n  //       selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n  //     // else if (event.target.name === \"nlockmode\")\r\n  //     //     selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.UNLOCK : transactionStatus.LOCK;\r\n  //     else\r\n  //       selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n  //   }\r\n  //   else if (event.target.type === 'radio') {\r\n  //     selectedRecord[event.target.name] = optional;\r\n  //   }\r\n  //   else {\r\n  //     selectedRecord[event.target.name] = event.target.value;\r\n  //   }\r\n  //   this.setState({ selectedRecord });\r\n  // }\r\n\r\n\r\n\r\n\r\n  // onTabChange = (tabProps) => {\r\n  //   const screenName = tabProps.screenName;\r\n  //   const updateInfo = {\r\n  //     typeName: DEFAULT_RETURN,\r\n  //     data: { screenName },\r\n  //   };\r\n  //   this.props.updateStore(updateInfo);\r\n  // };\r\n\r\n\r\n\r\n  dataStateChange = (event) => {\r\n    this.setState({\r\n      dataResult: process(this.state.data, event.dataState),\r\n      dataState: event.dataState\r\n    });\r\n  }\r\n\r\n\r\n  ConfirmDelete = (selectedProjectView, operation, deleteId, screenName) => {\r\n    this.confirmMessage.confirm(\r\n      \"deleteMessage\",\r\n      this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n      this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n      () =>\r\n        this.DeleteProjectMaster(\r\n          screenName,\r\n          selectedProjectView,\r\n          operation,\r\n          deleteId\r\n\r\n        )\r\n    );\r\n  };\r\n\r\n\r\n\r\n  reloadData = (onFilterSubmit) => {\r\n    this.searchRef.current.value = \"\";\r\n\r\n    // if (Object.values(this.state.selectedRecordfilter.nsampletypecodevalue).length && this.state.selectedRecordfilter.nsampletypecodevalue !== undefined) {\r\n    // if ( this.props.Login.masterData.SelectedSampleType !== undefined) {\r\n    let fromDate = this.props.Login.masterData.FromDate;\r\n    let toDate = this.props.Login.masterData.ToDate;\r\n    if(onFilterSubmit){\r\n      let selectedRecord = this.state.selectedRecord || {};\r\n      if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\r\n        fromDate = selectedRecord[\"fromdate\"];\r\n      }\r\n      if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\r\n        toDate = selectedRecord[\"todate\"];\r\n      }\r\n    }\r\n\r\n    let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n    if (this.state.selectedRecordfilter !== undefined) {\r\n      if (this.state.selectedRecordfilter.nsampletypecodevalue !== undefined && this.state.selectedRecordfilter.nprojecttypecodevalue !== \"\") {\r\n        if (Object.values(this.props.Login.masterData.SelectedSampleType).length && this.props.Login.masterData.SelectedSampleType !== undefined) {\r\n          let inputParam = {\r\n            inputData: {\r\n              nsampletypecode: this.state.selectedRecordfilter.nsampletypecodevalue.value,\r\n              nprojecttypecode: this.state.selectedRecordfilter.nprojecttypecodevalue.value,\r\n              userinfo: this.props.Login.userInfo,\r\n              // nfilterSampleType: this.state.nfilterSampleType,\r\n              nfilterSampleType: this.state.selectedRecordfilter.nsampletypecodevalue,\r\n              fromDate: obj.fromDate,\r\n              toDate: obj.toDate,\r\n              currentdate: null,\r\n            },\r\n            // classUrl: \"projectview\",\r\n            methodUrl: \"ProjectViewBySampleType\",\r\n          };\r\n          this.props.changeSampleTypeFilter(\r\n            inputParam,\r\n            this.props.Login.masterData.filterSampleType,this.state.selectedRecordfilter.nsampletypecodevalue\r\n          );\r\n        }\r\n      } else {\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPENOTAVAILABLE\", }));\r\n      }\r\n    } else {\r\n      toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\", }));\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // closeModal = () => {\r\n  //   let loadEsign = this.props.Login.loadEsign;\r\n  //   let openModal = this.props.Login.openModal;\r\n  //   let selectedRecord = this.state.selectedRecord;\r\n  //   //    let selectedRecord = this.state.selectedRecord;\r\n  //   if (this.props.Login.loadEsign) {\r\n  //     if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"approve\" || this.props.Login.operation === \"retire\") {\r\n  //       loadEsign = false;\r\n  //       openModal = false;\r\n  //       selectedRecord = {};\r\n  //     }\r\n  //     else {\r\n  //       loadEsign = false;\r\n  //       selectedRecord['esignpassword'] = '';\r\n  //       selectedRecord['esigncomments'] = '';\r\n  //       selectedRecord['esignreason'] = '';\r\n  //     }\r\n  //   }\r\n  //   else {\r\n  //     openModal = false;\r\n  //     selectedRecord = {};\r\n  //   }\r\n\r\n  //   const updateInfo = {\r\n  //     typeName: DEFAULT_RETURN,\r\n  //     data: { openModal, loadEsign, selectedRecord }\r\n  //   }\r\n  //   this.props.updateStore(updateInfo);\r\n\r\n  // }\r\n\r\n  componentDidUpdate(previousProps) {\r\n    let updateState = false;\r\n    let {\r\n      selectedRecord,\r\n      selectedRecordfilter,\r\n      userRoleControlRights,\r\n      controlMap,\r\n      filterData,\r\n      nfilterSampleType,\r\n      filterSampleType,\r\n      nfilterProjectType,\r\n      selectedRecordfilter1,\r\n\r\n\r\n    } = this.state;\r\n\r\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n      selectedRecord = this.props.Login.selectedRecord;\r\n      updateState = true;\r\n      this.setState({ selectedRecord, selectedRecordfilter });\r\n    }\r\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n      userRoleControlRights = [];\r\n      if (this.props.Login.userRoleControlRights) {\r\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode\r\n        ] &&\r\n          Object.values(\r\n            this.props.Login.userRoleControlRights[\r\n            this.props.Login.userInfo.nformcode\r\n            ]\r\n          ).map((item) => userRoleControlRights.push(item.ncontrolcode));\r\n      }\r\n      controlMap = getControlMap(\r\n        this.props.Login.userRoleControlRights,\r\n        this.props.Login.userInfo.nformcode\r\n      );\r\n      this.setState({ controlMap, userRoleControlRights });\r\n      //   updateState = true;\r\n    }\r\n\r\n    let nsampletypecode = this.state.nfilterSampleType || {};\r\n    let nprojecttypecode = this.state.nfilterProjectType || {};\r\n\r\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n      if (this.props.Login.masterData.filterProjectType !== previousProps.Login.masterData.filterProjectType) {\r\n      nfilterSampleType = this.state.nfilterSampleType || {};\r\n\r\n      const filterSampleType = constructOptionList(this.props.Login.masterData.filterSampleType || [], \"nsampletypecode\",\r\n        \"ssampletypename\", undefined, undefined, undefined);\r\n\r\n      let ProjectViewFilterList = filterSampleType.get(\"OptionList\");\r\n      nsampletypecode = ProjectViewFilterList[0];\r\n      selectedRecordfilter = { nsampletypecodevalue: nsampletypecode }\r\n      selectedRecord = { nsampletypecodevalue: nsampletypecode }\r\n\r\n      const filterProjectType = constructOptionList(this.props.Login.masterData.filterProjectType || [], \"nprojecttypecode\",\r\n        \"sprojecttypename\", undefined, undefined, undefined);\r\n\r\n      let ProjectTypeFilterList = filterProjectType.get(\"OptionList\");\r\n      nprojecttypecode = ProjectTypeFilterList[0];\r\n      selectedRecordfilter = { ...selectedRecordfilter, nprojecttypecodevalue: nprojecttypecode }\r\n      selectedRecord = { ...selectedRecord, nprojecttypecodevalue: nprojecttypecode }\r\n\r\n      this.setState({\r\n        ProjectViewFilterList, ProjectTypeFilterList,\r\n        selectedRecordfilter, selectedRecord, data: this.props.Login.masterData.ParentProjectView,\r\n        dataResult: process(this.props.Login.masterData.ParentProjectView || [], this.state.dataState)\r\n      });\r\n    }\r\n\r\n      if (this.props.Login.masterData.SelectedSampleType && this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\r\n        nfilterSampleType = {\r\n          label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\r\n          value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\r\n          item: this.props.Login.masterData.SelectedSampleType,\r\n        };\r\n      }\r\n\r\n      if (this.props.Login.masterData.SelectedProjectType && this.props.Login.masterData.SelectedProjectType !== previousProps.Login.masterData.SelectedProjectType) {\r\n        nfilterProjectType = {\r\n          label: this.props.Login.masterData.SelectedProjectType.sprojecttypename,\r\n          value: this.props.Login.masterData.SelectedProjectType.nprojecttypecode,\r\n          item: this.props.Login.masterData.SelectedProjectType,\r\n        };\r\n      }\r\n      //  selectedRecordfilter = {nsampletypecodevalue:nfilterSampleType}\r\n      filterData = this.generateBreadCrumData();\r\n      updateState = true;\r\n      this.setState({ filterData, selectedRecordfilter });\r\n    }\r\n\r\n\r\n    if (this.props.Login.masterData.SelectedSampleType !== previousProps.Login.masterData.SelectedSampleType) {\r\n\r\n      let nsampletypecodevalue = this.props.Login.masterData.SelectedSampleType ?\r\n        {\r\n          label: this.props.Login.masterData.SelectedSampleType.ssampletypename,\r\n          value: this.props.Login.masterData.SelectedSampleType.nsampletypecode,\r\n          item: this.props.Login.masterData.SelectedSampleType\r\n        } : \"\"\r\n      //  nsampletypecode=ProjectViewFilterList[ProjectViewFilterList.length-1];\r\n      selectedRecordfilter = { ...selectedRecordfilter, nsampletypecodevalue }\r\n      selectedRecord = { ...selectedRecord, nsampletypecodevalue: nsampletypecode }\r\n      // nfilterSampleType = this.props.Login.masterData.nfilterSampleType;\r\n      this.setState({\r\n        selectedRecordfilter, selectedRecord\r\n\r\n      });\r\n\r\n    }\r\n    ////\r\n    if (this.props.Login.masterData.SelectedProjectType !== previousProps.Login.masterData.SelectedProjectType) {\r\n\r\n      let nprojecttypecodevalue = this.props.Login.masterData.SelectedProjectType ?\r\n        {\r\n          label: this.props.Login.masterData.SelectedProjectType.sprojecttypename,\r\n          value: this.props.Login.masterData.SelectedProjectType.nprojecttypecode,\r\n          item: this.props.Login.masterData.SelectedProjectType\r\n        } : \"\"\r\n      //  nsampletypecode=ProjectViewFilterList[ProjectViewFilterList.length-1];\r\n      selectedRecordfilter = { ...selectedRecordfilter, nprojecttypecodevalue }\r\n      selectedRecord = { ...selectedRecord, nprojecttypecodevalue: nprojecttypecode }\r\n      // nfilterSampleType = this.props.Login.masterData.nfilterSampleType;\r\n      this.setState({\r\n        selectedRecordfilter, selectedRecord\r\n\r\n      });\r\n\r\n    }\r\n    // if (this.props.Login.masterData.nfilterSampleType !== previousProps.Login.masterData.nfilterSampleType) {\r\n\r\n    // }\r\n\r\n  }\r\n  generateBreadCrumData() {\r\n    const breadCrumbData = [];\r\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate ) {\r\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,this.props.Login.masterData.ToDate,this.props.Login.userInfo);\r\n      breadCrumbData.push(\r\n        {\r\n          \"label\": \"IDS_FROM\",\r\n          \"value\": obj.breadCrumbFrom\r\n        },\r\n        {\r\n          \"label\": \"IDS_TO\",\r\n          \"value\": obj.breadCrumbto\r\n        })\r\n      }\r\n      if(this.props.Login.masterData&&this.props.Login.masterData.SelectedSampleType){\r\n        breadCrumbData.push(\r\n      {\r\n        label: \"IDS_SAMPLETYPE\",\r\n        value: this.props.Login.masterData.SelectedSampleType\r\n          ? this.props.Login.masterData.SelectedSampleType.ssampletypename\r\n          : \"NA\",\r\n      })\r\n    }\r\n    if(this.props.Login.masterData&&this.props.Login.masterData.SelectedProjectType){\r\n      breadCrumbData.push(\r\n        {\r\n          label: \"IDS_PROJECTTYPE\",\r\n          value: this.props.Login.masterData.SelectedProjectType\r\n            ? this.props.Login.masterData.SelectedProjectType.sprojecttypename\r\n            : \"NA\",\r\n        });\r\n\r\n    } \r\n    return breadCrumbData;\r\n  }\r\n\r\n  openFilter = () => {\r\n    let showFilter = !this.props.Login.showFilter;\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  closeFilter = () => {\r\n    const updateInfo = {\r\n      typeName: DEFAULT_RETURN,\r\n      data: { showFilter: false },\r\n    };\r\n    this.props.updateStore(updateInfo);\r\n  };\r\n\r\n  onFilterSubmit = () => {\r\n    this.reloadData(true);\r\n  //   this.searchRef.current.value = \"\";\r\n\r\n  //   // if (this.state.nfilterSampleType.value) {\r\n  //   // if (this.state.selectedRecord.nsampletypecodevalue.value) {\r\n  //   //if ((this.state.selectedRecord).length>0) {\r\n\r\n  //   // if (Object.values(this.state.selectedRecordfilter.nsampletypecodevalue).length && this.state.selectedRecordfilter.nsampletypecodevalue !== undefined) {\r\n  //   let fromDate = this.props.Login.masterData.FromDate;\r\n  //   let toDate = this.props.Login.masterData.ToDate;\r\n  //   let selectedRecord = this.state.selectedRecord || {};\r\n  //   if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\r\n  //     fromDate = selectedRecord[\"fromdate\"];\r\n  //   }\r\n  //   if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\r\n  //     toDate = selectedRecord[\"todate\"];\r\n  //   }\r\n  //   let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n\r\n  //   if (this.state.selectedRecordfilter !== undefined) {\r\n  //     if (this.state.selectedRecordfilter.nsampletypecodevalue !== undefined && this.state.selectedRecordfilter.nprojecttypecodevalue !== \"\") {\r\n  //       let inputParam = {\r\n  //         inputData: {\r\n  //           nsampletypecode: this.state.selectedRecordfilter.nsampletypecodevalue.value,\r\n  //           nprojecttypecode: this.state.selectedRecordfilter.nprojecttypecodevalue.value,\r\n  //           userinfo: this.props.Login.userInfo,\r\n  //           // nfilterSampleType: this.state.nfilterSampleType,\r\n  //           nfilterSampleType: this.state.selectedRecordfilter.nsampletypecodevalue,\r\n  //           fromDate: obj.fromDate,\r\n  //           toDate: obj.toDate,\r\n  //           currentDate: null\r\n  //         },\r\n  //         // classUrl: \"projectview\",\r\n  //         methodUrl: \"ProjectViewBySampleType\",\r\n  //       };\r\n  //       this.props.changeSampleTypeFilter(\r\n  //         inputParam,\r\n  //         this.props.Login.masterData.filterSampleType,this.state.selectedRecordfilter.nsampletypecodevalue\r\n  //       );\r\n  //     } else {\r\n\r\n  //       toast.warn(this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPENOTAVAILABLE\", }));\r\n\r\n  //     }\r\n  //   } else {\r\n\r\n  //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\", }));\r\n\r\n  //   }\r\n   }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  callService,\r\n  crudMaster,\r\n  filterColumnData,\r\n  updateStore,\r\n  validateEsignCredential,\r\n  changeSampleTypeFilter,\r\n  viewAttachment, addProjectMaster, getProjectView, getProjectmasterAddMemberService, addProjectMasterFile, getuserComboServices\r\n})(injectIntl(ProjectView));\r\n"]},"metadata":{},"sourceType":"module"}