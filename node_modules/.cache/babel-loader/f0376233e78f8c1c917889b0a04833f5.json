{"ast":null,"code":"import*as React from'react';import{injectIntl}from'react-intl';import{Row,Col,Form}from'react-bootstrap';import'@progress/kendo-react-animation';import FormInput from'../../components/form-input/form-input.component';import TreeViewEditable from'../../components/form-tree-editable/form-tree-editable.component';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';var AddTreeview=function AddTreeview(props){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormSelectSearch,{name:\"nstoragecategorycode\",formLabel:props.intl.formatMessage({id:\"IDS_STORAGECATEGORY\"}),placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),options:props.storageCategoryList,value:props.selectedRecord[\"nstoragecategorycode\"],isMandatory:true,isClearable:false,isMulti:false,isSearchable:true,isDisabled:false,closeMenuOnSelect:true,onChange:function onChange(event){return props.onComboChange(event,'nstoragecategorycode',1);}})),/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormInput,{label:props.intl.formatMessage({id:\"IDS_SAMPLESTORAGELOCATIONNAME\"}),name:\"ssamplestoragelocationname\",type:\"text\",onChange:function onChange(event){return props.onInputChange(event);},placeholder:props.intl.formatMessage({id:\"IDS_SAMPLESTORAGELOCATIONNAME\"}),value:props.selectedRecord?props.selectedRecord[\"ssamplestoragelocationname\"]:\"\",isMandatory:true,required:true,maxLength:\"30\"})),/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(TreeViewEditable,{id:\"samplestoragelocation\",name:\"samplestoragelocation\"// label=\"Sample Storage Location\"\n,placeholder:\"Enter samplestoragelocation\",data:props.treeData,expandIcons:true,item:props.itemRender,onExpandChange:props.onExpandChange,onItemClick:props.onItemClick})));};export default injectIntl(AddTreeview);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/AddTreeview.jsx"],"names":["React","injectIntl","Row","Col","Form","FormInput","TreeViewEditable","FormSelectSearch","AddTreeview","props","intl","formatMessage","id","storageCategoryList","selectedRecord","event","onComboChange","onInputChange","treeData","itemRender","onExpandChange","onItemClick"],"mappings":"AAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,UAAT,KAA2B,YAA3B,CACA,OAASC,GAAT,CAAcC,GAAd,CAAmBC,IAAnB,KAA+B,iBAA/B,CACA,MAAO,iCAAP,CACA,MAAOC,CAAAA,SAAP,KAAsB,kDAAtB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,kEAA7B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,kEAA7B,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,KAAD,CAAW,CAC7B,mBACE,oBAAC,GAAD,mBAEE,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,eACE,oBAAC,gBAAD,EACE,IAAI,CAAE,sBADR,CAEE,SAAS,CAAEA,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,qBAAN,CAAzB,CAFb,CAGE,WAAW,CAAEH,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,kBAAN,CAAzB,CAHf,CAIE,OAAO,CAAEH,KAAK,CAACI,mBAJjB,CAKE,KAAK,CAAEJ,KAAK,CAACK,cAAN,CAAqB,sBAArB,CALT,CAME,WAAW,CAAE,IANf,CAOE,WAAW,CAAE,KAPf,CAQE,OAAO,CAAE,KARX,CASE,YAAY,CAAE,IAThB,CAUE,UAAU,CAAE,KAVd,CAWE,iBAAiB,CAAE,IAXrB,CAYE,QAAQ,CAAE,kBAACC,KAAD,QAAWN,CAAAA,KAAK,CAACO,aAAN,CAAoBD,KAApB,CAA2B,sBAA3B,CAAkD,CAAlD,CAAX,EAZZ,EADF,CAFF,cAkBE,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,eAaE,oBAAC,SAAD,EACE,KAAK,CAAEN,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,+BAAN,CAAzB,CADT,CAEE,IAAI,CAAE,4BAFR,CAGE,IAAI,CAAC,MAHP,CAIE,QAAQ,CAAE,kBAACG,KAAD,QAAWN,CAAAA,KAAK,CAACQ,aAAN,CAAoBF,KAApB,CAAX,EAJZ,CAKE,WAAW,CAAEN,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAE,+BAAN,CAAzB,CALf,CAME,KAAK,CAAEH,KAAK,CAACK,cAAN,CAAuBL,KAAK,CAACK,cAAN,CAAqB,4BAArB,CAAvB,CAA4E,EANrF,CAOE,WAAW,CAAE,IAPf,CAQE,QAAQ,CAAE,IARZ,CASE,SAAS,CAAE,IATb,EAbF,CAlBF,cA2CE,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,eACE,oBAAC,gBAAD,EACE,EAAE,CAAC,uBADL,CAEE,IAAI,CAAC,uBACL;AAHF,CAIE,WAAW,CAAC,6BAJd,CAKE,IAAI,CAAEL,KAAK,CAACS,QALd,CAME,WAAW,CAAE,IANf,CAOE,IAAI,CAAET,KAAK,CAACU,UAPd,CAQE,cAAc,CAAEV,KAAK,CAACW,cARxB,CASE,WAAW,CAAEX,KAAK,CAACY,WATrB,EADF,CA3CF,CADF,CA0DD,CA3DD,CA4DA,cAAepB,CAAAA,UAAU,CAACO,WAAD,CAAzB","sourcesContent":["import * as React from 'react';\r\nimport { injectIntl } from 'react-intl'\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport '@progress/kendo-react-animation'\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport TreeViewEditable from '../../components/form-tree-editable/form-tree-editable.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\nconst AddTreeview = (props) => {\r\n  return (\r\n    <Row>\r\n\r\n      <Col md={12}>\r\n        <FormSelectSearch\r\n          name={\"nstoragecategorycode\"}\r\n          formLabel={props.intl.formatMessage({ id: \"IDS_STORAGECATEGORY\" })}\r\n          placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n          options={props.storageCategoryList}\r\n          value={props.selectedRecord[\"nstoragecategorycode\"]}\r\n          isMandatory={true}\r\n          isClearable={false}\r\n          isMulti={false}\r\n          isSearchable={true}\r\n          isDisabled={false}\r\n          closeMenuOnSelect={true}\r\n          onChange={(event) => props.onComboChange(event, 'nstoragecategorycode',1)}\r\n        />\r\n      </Col>\r\n      <Col md={12}>\r\n        {/* <Form.Control\r\n          id='ssamplestoragelocationname'\r\n          name={\"ssamplestoragelocationname\"}\r\n          type='text'\r\n          label={props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATIONNAME\" })}\r\n          placeholder={props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATIONNAME\" })}\r\n          autoFocus\r\n          autoComplete=\"off\"\r\n          onChange={props.onInputChange}\r\n          value={props.selectedRecord ? props.selectedRecord[\"ssamplestoragelocationname\"] : \"\"}\r\n\r\n        /> */}\r\n        <FormInput\r\n          label={props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATIONNAME\" })}\r\n          name={\"ssamplestoragelocationname\"}\r\n          type=\"text\"\r\n          onChange={(event) => props.onInputChange(event)}\r\n          placeholder={props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATIONNAME\" })}\r\n          value={props.selectedRecord ? props.selectedRecord[\"ssamplestoragelocationname\"] : \"\"}\r\n          isMandatory={true}\r\n          required={true}\r\n          maxLength={\"30\"}\r\n        />\r\n      </Col>\r\n      <Col md={12}>\r\n        <TreeViewEditable\r\n          id=\"samplestoragelocation\"\r\n          name=\"samplestoragelocation\"\r\n          // label=\"Sample Storage Location\"\r\n          placeholder=\"Enter samplestoragelocation\"\r\n          data={props.treeData}\r\n          expandIcons={true}\r\n          item={props.itemRender}\r\n          onExpandChange={props.onExpandChange}\r\n          onItemClick={props.onItemClick}\r\n        />\r\n      </Col>\r\n    </Row>)\r\n}\r\nexport default injectIntl(AddTreeview);\r\n"]},"metadata":{},"sourceType":"module"}