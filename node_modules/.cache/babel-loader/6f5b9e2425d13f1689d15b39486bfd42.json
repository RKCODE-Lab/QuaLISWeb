{"ast":null,"code":"import { intl } from '../../components/App';\nimport { formatInputDate } from '../../components/CommonScript';\nimport { transactionStatus } from '../../components/Enumeration';\nexport function fnCheckBatchComponentMandatory(Components) {\n  // Components.map(component => {\n  for (var i = 0; i < Components.length; i++) {\n    if (Components[i].smanuflotno.length <= 0) {\n      // alert('IDS_ENTERMANUFLOTNOFOR ' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } else if (Components[i].nnoofcontainer && Components[i].nnoofcontainer.length <= 0) {\n      // alert('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERNOOFCONTFOR\"\n      }) + Components[i].scomponentname; // return ('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\n    } else if (Components[i].dreceiveddate === null) {\n      // alert('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname; // return ('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\n    }\n  }\n\n  return true;\n}\nexport function fnCheckBatchProtocolComponentMandatory(Components) {\n  //Components.map(component => {\n  for (var i = 0; i < Components.length; i++) {\n    if (Components[i].smanuflotno.length <= 0) {\n      // alert('IDS_ENTERMANUFLOTNOFOR ' + {} + component.scomponentname);\n      //return (intl.formatMessage({ id: 'IDS_ENTERMANUFLOTNOFOR ' }) + {} + Components[i].scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } else if (Components[i].dreceiveddate === null) {\n      // alert('IDS_ENTERMANUFLOTNOFOR' + component.scomponentname);\n      return intl.formatMessage({\n        id: \"IDS_ENTERMANUFLOTNOFOR\"\n      }) + Components[i].scomponentname;\n    } //return null;\n    //});\n\n  }\n\n  return true;\n}\nexport function checkDuplicateComponentandManufLot(Components) {\n  let copiedArrays = [...Components];\n  let DuplicateComponent = [];\n  let bReturnFlag = true;\n  Components.map(component => {\n    copiedArrays.forEach(componentArray => {\n      component.slno !== componentArray.slno && component.smanuflotno === componentArray.smanuflotno && component.scomponentname === componentArray.scomponentname && DuplicateComponent.push(component);\n    });\n    return null;\n  });\n\n  if (DuplicateComponent.length > 0) {\n    let smanuflotno = DuplicateComponent[0].smanuflotno;\n    let scomponentname = DuplicateComponent[0].scomponentname; // Alert.show(resourceManager.getString('LocalizedStrings', 'IDS_DUPLICATEMANFNO') + \" \" + smanuflotno + \" for \" + scomponentname, resourceManager.getString('LocalizedStrings', 'IDS_WARNING'));\n\n    bReturnFlag = intl.formatMessage({\n      id: 'IDS_DUPLICATEMANFNO'\n    }) + \" \" + smanuflotno + \" \" + intl.formatMessage({\n      id: 'IDS_FOR'\n    }) + \" \" + scomponentname;\n  }\n\n  return bReturnFlag;\n}\nexport function TestListManipulation(Components, Test) {\n  let ArrayList = [];\n  Components.map(component => {\n    return ArrayList = Test && Test[component.slno] ? [...ArrayList, ...Test[component.slno]] : ArrayList;\n  });\n  return ArrayList ? ArrayList : [];\n}\nexport function getRegistrationGeneral(selectedRecord) {\n  let sampleRegistrationGeneral = {};\n  sampleRegistrationGeneral[\"nrmsno\"] = selectedRecord.nrmsno ? selectedRecord.nrmsno.value : -1;\n  sampleRegistrationGeneral[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode : -1;\n  sampleRegistrationGeneral[\"nmanufsitecode\"] = selectedRecord.nmanufsitecode ? selectedRecord.nmanufsitecode : -1;\n  sampleRegistrationGeneral[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\n  sampleRegistrationGeneral[\"nclientsitecode\"] = selectedRecord.nclientsitecode ? selectedRecord.nclientsitecode.value : -1;\n  sampleRegistrationGeneral[\"nproductmanufcode\"] = selectedRecord.nproductmanufcode ? selectedRecord.nproductmanufcode : -1;\n  sampleRegistrationGeneral[\"nproductmahcode\"] = selectedRecord.nproductmahcode ? selectedRecord.nproductmahcode : -1;\n  sampleRegistrationGeneral[\"neprotocolcode\"] = selectedRecord.neprotocolcode ? selectedRecord.neprotocolcode.value : -1;\n  sampleRegistrationGeneral[\"nplasmafilecode\"] = selectedRecord.nplasmafilecode ? selectedRecord.nplasmafilecode : -1;\n  return sampleRegistrationGeneral;\n}\nexport function getRegistration(masterData, selectedRecord, selectedSpec, templateList) {\n  let sampleRegistration = {};\n  sampleRegistration[\"nsampletypecode\"] = masterData.RealSampleTypeValue.nsampletypecode;\n  sampleRegistration[\"nregtypecode\"] = masterData.RealRegTypeValue.nregtypecode;\n  sampleRegistration[\"nregsubtypecode\"] = masterData.RealRegSubTypeValue.nregsubtypecode;\n  sampleRegistration[\"nproductcatcode\"] = selectedRecord.nproductcatcode.value;\n  sampleRegistration[\"nproductcode\"] = selectedRecord.nproductcode.value;\n  sampleRegistration[\"ntemplatemanipulationcode\"] = selectedSpec.ntemplatemanipulationcode;\n  sampleRegistration[\"nallottedspeccode\"] = selectedSpec.nallottedspeccode.value;\n  Layout.map(row => {\n    row.children.map(column => {\n      column.children.map(component => {\n        return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\n          if (componentrow.inputtype === \"combo\") {\n            // data.push(componentrow)\n            sampleRegistration[\"jsonData\"][componentrow.valueMember] = selectedRecord.valueMember ? {\n              value: selectedRecord[valueMember].value,\n              label: selectedRecord[valueMember].label\n            } : -1;\n          } else {\n            sampleRegistration[\"jsonData\"][componentrow.displayMember] = selectedRecord.displayMember ? selectedRecord.displayMember : \"\";\n          }\n        }) : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component);\n      });\n    });\n  });\n  return sampleRegistration;\n}\nexport function getComponentListfromUnwantedAttr(Components) {\n  Components.map(component => {\n    if (component.ncomponentcode !== null && typeof component.ncomponentcode === \"object\") {\n      component.ncomponentcode = {\n        value: component.ncomponentcode.value,\n        label: component.ncomponentcode.label\n      };\n    }\n\n    if (component.nunnitcode !== null && typeof component.nunnitcode === \"object\") {\n      component.nunnitcode = {\n        value: component.nunnitcode.value,\n        label: component.nunnitcode.label\n      };\n    } // if (component.nstorageconditioncode !== null && typeof component.nstorageconditioncode === \"object\") {\n    //     component.nstorageconditioncode = component.nstorageconditioncode.value;\n    // }\n    // if (component.nstoragelocationcode !== null && typeof component.nstoragelocationcode === \"object\") {\n    //     component.nstoragelocationcode = component.nstoragelocationcode.value;\n    // }\n    // if (component.dreceiveddate !== undefined && typeof component.dreceiveddate !== \"string\") {\n    //     component.dreceiveddate = formatInputDate(component.dreceiveddate, false);\n    // }\n    // if (component.dmanufdate !== undefined && component.dmanufdate !== null) {\n    //     component.dmanufdate = formatInputDate(component.dmanufdate, false);\n    // }\n\n\n    component && delete component[\"selected\"];\n    return component;\n  });\n  return Components;\n}\nexport function checkSourceForAllPreregno(Components, Source) {\n  Components.map(component => {\n    //   return Source[component.slno] === undefined &&  false;\n    if (Source[component.slno] === undefined) {\n      return false;\n    }\n\n    return component;\n  });\n  return true;\n}\nexport function checkTestPresent(Test, Samples) {\n  const filterArray = Samples.filter(function (x) {\n    return !Test.some(function (y) {\n      return x[\"npreregno\"] === y[\"npreregno\"] && y[\"ntransactionstatus\"] !== transactionStatus.REJECT && y[\"ntransactionstatus\"] !== transactionStatus.CANCELLED;\n    });\n  });\n  return filterArray.length > 0 ? false : true;\n} // //added by perumalraj on 23/12/2020\n// //compare two arrays of object and filter the record which are not present in the second array and vice versa\n// export function filterStatusBasedOnTwoArrays(firstArray, secondArray, PrimaryKey) {\n//     const filterArray = firstArray.filter(function (x) {\n//         return secondArray.some(function (y) {\n//             return x[PrimaryKey] === y[PrimaryKey]\n//         })\n//     });\n//     return filterArray;\n// }\n\nexport function getRegistrationRoutine(selectedRecord) {\n  let sampleRegistrationRoutine = {};\n  sampleRegistrationRoutine[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\n  sampleRegistrationRoutine[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode.value : -1;\n  sampleRegistrationRoutine[\"nsuppliercode\"] = selectedRecord.nsuppliercode ? selectedRecord.nsuppliercode.value : -1;\n  sampleRegistrationRoutine[\"ssamplecondition\"] = selectedRecord.ssamplecondition ? selectedRecord.ssamplecondition : '';\n  sampleRegistrationRoutine[\"nstorageconditioncode\"] = selectedRecord.nstorageconditioncode ? selectedRecord.nstorageconditioncode.value : -1;\n  sampleRegistrationRoutine[\"dreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\n  sampleRegistrationRoutine[\"sreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) : 'null';\n  sampleRegistrationRoutine[\"ntzdreceivedate\"] = selectedRecord.ntzdreceivedate ? selectedRecord.ntzdreceivedate.value : -1;\n  sampleRegistrationRoutine[\"stzdreceivedate\"] = selectedRecord.stzdreceivedate ? selectedRecord.stzdreceivedate.label : -1;\n  sampleRegistrationRoutine[\"ncontainertypecode\"] = selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : -1;\n  sampleRegistrationRoutine[\"sourfile\"] = selectedRecord.sourfile ? selectedRecord.sourfile : '';\n  sampleRegistrationRoutine[\"sbatchno\"] = selectedRecord.sbatchno ? selectedRecord.sbatchno : '';\n  sampleRegistrationRoutine[\"slotno\"] = selectedRecord.slotno ? selectedRecord.slotno : '';\n  sampleRegistrationRoutine[\"ndisposition\"] = selectedRecord.ndisposition ? selectedRecord.ndisposition.value : -1;\n  sampleRegistrationRoutine[\"stotalqty\"] = selectedRecord.stotalqty ? selectedRecord.stotalqty : '0';\n  sampleRegistrationRoutine[\"ntotalunitcode\"] = selectedRecord.ntotalunitcode ? selectedRecord.ntotalunitcode.value : -1;\n  sampleRegistrationRoutine[\"npriority\"] = selectedRecord.npriority ? selectedRecord.npriority.value : -1;\n  sampleRegistrationRoutine[\"sdeadline\"] = selectedRecord.sdeadline ? selectedRecord.sdeadline : '0';\n  sampleRegistrationRoutine[\"nperiodconfigcode\"] = selectedRecord.nperiodconfigcode ? selectedRecord.nperiodconfigcode.value : -1;\n  sampleRegistrationRoutine[\"sremarks\"] = selectedRecord.sremarks ? selectedRecord.sremarks : null;\n  sampleRegistrationRoutine[\"sreportremarks\"] = selectedRecord.sreportremarks ? selectedRecord.sreportremarks : null;\n  sampleRegistrationRoutine[\"sdeviationcomments\"] = selectedRecord.sdeviationcomments ? selectedRecord.sdeviationcomments : null;\n  return sampleRegistrationRoutine;\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/registration/RegistrationValidation.jsx"],"names":["intl","formatInputDate","transactionStatus","fnCheckBatchComponentMandatory","Components","i","length","smanuflotno","formatMessage","id","scomponentname","nnoofcontainer","dreceiveddate","fnCheckBatchProtocolComponentMandatory","checkDuplicateComponentandManufLot","copiedArrays","DuplicateComponent","bReturnFlag","map","component","forEach","componentArray","slno","push","TestListManipulation","Test","ArrayList","getRegistrationGeneral","selectedRecord","sampleRegistrationGeneral","nrmsno","value","nmanufcode","nmanufsitecode","nclientcode","nclientsitecode","nproductmanufcode","nproductmahcode","neprotocolcode","nplasmafilecode","getRegistration","masterData","selectedSpec","templateList","sampleRegistration","RealSampleTypeValue","nsampletypecode","RealRegTypeValue","nregtypecode","RealRegSubTypeValue","nregsubtypecode","nproductcatcode","nproductcode","ntemplatemanipulationcode","nallottedspeccode","Layout","row","children","column","hasOwnProperty","componentrow","inputtype","valueMember","label","displayMember","data","withoutCombocomponent","getComponentListfromUnwantedAttr","ncomponentcode","nunnitcode","checkSourceForAllPreregno","Source","undefined","checkTestPresent","Samples","filterArray","filter","x","some","y","REJECT","CANCELLED","getRegistrationRoutine","sampleRegistrationRoutine","nsuppliercode","ssamplecondition","nstorageconditioncode","ntzdreceivedate","stzdreceivedate","ncontainertypecode","sourfile","sbatchno","slotno","ndisposition","stotalqty","ntotalunitcode","npriority","sdeadline","nperiodconfigcode","sremarks","sreportremarks","sdeviationcomments"],"mappings":"AACA,SAASA,IAAT,QAAqB,sBAArB;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,OAAO,SAASC,8BAAT,CAAwCC,UAAxC,EAAoD;AACvD;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,QACID,UAAU,CAACC,CAAD,CAAV,CAAcE,WADd,CAC2BD,MAD3B,IACqC,CADzC,EAC4C;AACxC;AACA,aAAQN,IAAI,CAACQ,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,IAAuDL,UAAU,CAACC,CAAD,CAAV,CAAcK,cAA7E;AAEH,KALD,MAKO,IAAIN,UAAU,CAACC,CAAD,CAAV,CAAcM,cAAd,IAAiCP,UAAU,CAACC,CAAD,CAAV,CAAcM,cAAf,CAA+BL,MAA/B,IAAyC,CAA7E,EAAgF;AACnF;AACA,aAAQN,IAAI,CAACQ,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,IAAqDL,UAAU,CAACC,CAAD,CAAV,CAAcK,cAA3E,CAFmF,CAGnF;AACH,KAJM,MAIA,IAAIN,UAAU,CAACC,CAAD,CAAV,CAAcO,aAAd,KAAgC,IAApC,EAA0C;AAC7C;AACA,aAAQZ,IAAI,CAACQ,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,IAAuDL,UAAU,CAACC,CAAD,CAAV,CAAcK,cAA7E,CAF6C,CAG7C;AACH;AACJ;;AACD,SAAO,IAAP;AACH;AACD,OAAO,SAASG,sCAAT,CAAgDT,UAAhD,EAA4D;AAC/D;AACI,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,UAAU,CAACE,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC5C,QAAKD,UAAU,CAACC,CAAD,CAAV,CAAcE,WAAf,CAA4BD,MAA5B,IAAsC,CAA1C,EAA6C;AACzC;AACA;AACA,aAAQN,IAAI,CAACQ,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,IAAuDL,UAAU,CAACC,CAAD,CAAV,CAAcK,cAA7E;AACH,KAJD,MAIO,IAAIN,UAAU,CAACC,CAAD,CAAV,CAAcO,aAAd,KAAgC,IAApC,EAA0C;AAC7C;AACA,aAAQZ,IAAI,CAACQ,aAAL,CAAmB;AAAEC,QAAAA,EAAE,EAAE;AAAN,OAAnB,IAAuDL,UAAU,CAACC,CAAD,CAAV,CAAcK,cAA7E;AACH,KAR2C,CAS5C;AACJ;;AACK;;AACL,SAAO,IAAP;AACH;AAED,OAAO,SAASI,kCAAT,CAA4CV,UAA5C,EAAwD;AAC3D,MAAIW,YAAY,GAAG,CAAC,GAAGX,UAAJ,CAAnB;AACA,MAAIY,kBAAkB,GAAG,EAAzB;AACA,MAAIC,WAAW,GAAG,IAAlB;AACAb,EAAAA,UAAU,CAACc,GAAX,CAAeC,SAAS,IAAI;AACxBJ,IAAAA,YAAY,CAACK,OAAb,CAAqBC,cAAc,IAAI;AAClCF,MAAAA,SAAS,CAACG,IAAV,KAAmBD,cAAc,CAACC,IAAlC,IAA0CH,SAAS,CAACZ,WAAV,KAA0Bc,cAAc,CAACd,WAAnF,IACGY,SAAS,CAACT,cAAV,KAA6BW,cAAc,CAACX,cADhD,IACmEM,kBAAkB,CAACO,IAAnB,CAAwBJ,SAAxB,CADnE;AAEH,KAHD;AAIA,WAAO,IAAP;AACH,GAND;;AAOA,MAAIH,kBAAkB,CAACV,MAAnB,GAA4B,CAAhC,EAAmC;AAC/B,QAAIC,WAAW,GAAGS,kBAAkB,CAAC,CAAD,CAAlB,CAAsBT,WAAxC;AACA,QAAIG,cAAc,GAAGM,kBAAkB,CAAC,CAAD,CAAlB,CAAsBN,cAA3C,CAF+B,CAG/B;;AACAO,IAAAA,WAAW,GAAGjB,IAAI,CAACQ,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,IAAoD,GAApD,GAA0DF,WAA1D,GAAwE,GAAxE,GAA8EP,IAAI,CAACQ,aAAL,CAAmB;AAAEC,MAAAA,EAAE,EAAE;AAAN,KAAnB,CAA9E,GAAsH,GAAtH,GAA4HC,cAA1I;AACH;;AACD,SAAOO,WAAP;AACH;AACD,OAAO,SAASO,oBAAT,CAA8BpB,UAA9B,EAA0CqB,IAA1C,EAAgD;AACnD,MAAIC,SAAS,GAAG,EAAhB;AACAtB,EAAAA,UAAU,CAACc,GAAX,CAAeC,SAAS,IAAI;AACxB,WAAOO,SAAS,GAAGD,IAAI,IAAIA,IAAI,CAACN,SAAS,CAACG,IAAX,CAAZ,GAA+B,CAAC,GAAGI,SAAJ,EAAe,GAAGD,IAAI,CAACN,SAAS,CAACG,IAAX,CAAtB,CAA/B,GAAyEI,SAA5F;AACH,GAFD;AAGA,SAAOA,SAAS,GAAGA,SAAH,GAAe,EAA/B;AACH;AACD,OAAO,SAASC,sBAAT,CAAgCC,cAAhC,EAAgD;AAEnD,MAAIC,yBAAyB,GAAG,EAAhC;AACAA,EAAAA,yBAAyB,CAAC,QAAD,CAAzB,GAAsCD,cAAc,CAACE,MAAf,GAAwBF,cAAc,CAACE,MAAf,CAAsBC,KAA9C,GAAsD,CAAC,CAA7F;AACAF,EAAAA,yBAAyB,CAAC,YAAD,CAAzB,GAA0CD,cAAc,CAACI,UAAf,GAA4BJ,cAAc,CAACI,UAA3C,GAAwD,CAAC,CAAnG;AACAH,EAAAA,yBAAyB,CAAC,gBAAD,CAAzB,GAA8CD,cAAc,CAACK,cAAf,GAAgCL,cAAc,CAACK,cAA/C,GAAgE,CAAC,CAA/G;AACAJ,EAAAA,yBAAyB,CAAC,aAAD,CAAzB,GAA2CD,cAAc,CAACM,WAAf,GAA6BN,cAAc,CAACM,WAAf,CAA2BH,KAAxD,GAAgE,CAAC,CAA5G;AACAF,EAAAA,yBAAyB,CAAC,iBAAD,CAAzB,GAA+CD,cAAc,CAACO,eAAf,GAAiCP,cAAc,CAACO,eAAf,CAA+BJ,KAAhE,GAAwE,CAAC,CAAxH;AACAF,EAAAA,yBAAyB,CAAC,mBAAD,CAAzB,GAAiDD,cAAc,CAACQ,iBAAf,GAAmCR,cAAc,CAACQ,iBAAlD,GAAsE,CAAC,CAAxH;AACAP,EAAAA,yBAAyB,CAAC,iBAAD,CAAzB,GAA+CD,cAAc,CAACS,eAAf,GAAiCT,cAAc,CAACS,eAAhD,GAAkE,CAAC,CAAlH;AACAR,EAAAA,yBAAyB,CAAC,gBAAD,CAAzB,GAA8CD,cAAc,CAACU,cAAf,GAAgCV,cAAc,CAACU,cAAf,CAA8BP,KAA9D,GAAsE,CAAC,CAArH;AACAF,EAAAA,yBAAyB,CAAC,iBAAD,CAAzB,GAA+CD,cAAc,CAACW,eAAf,GAAiCX,cAAc,CAACW,eAAhD,GAAkE,CAAC,CAAlH;AACA,SAAOV,yBAAP;AACH;AAED,OAAO,SAASW,eAAT,CAAyBC,UAAzB,EAAqCb,cAArC,EAAoDc,YAApD,EAAiEC,YAAjE,EAA+E;AAClF,MAAIC,kBAAkB,GAAG,EAAzB;AACAA,EAAAA,kBAAkB,CAAC,iBAAD,CAAlB,GAAwCH,UAAU,CAACI,mBAAX,CAA+BC,eAAvE;AACAF,EAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqCH,UAAU,CAACM,gBAAX,CAA4BC,YAAjE;AACAJ,EAAAA,kBAAkB,CAAC,iBAAD,CAAlB,GAAwCH,UAAU,CAACQ,mBAAX,CAA+BC,eAAvE;AACAN,EAAAA,kBAAkB,CAAC,iBAAD,CAAlB,GAAwChB,cAAc,CAACuB,eAAf,CAA+BpB,KAAvE;AACAa,EAAAA,kBAAkB,CAAC,cAAD,CAAlB,GAAqChB,cAAc,CAACwB,YAAf,CAA4BrB,KAAjE;AACAa,EAAAA,kBAAkB,CAAC,2BAAD,CAAlB,GAAkDF,YAAY,CAACW,yBAA/D;AACAT,EAAAA,kBAAkB,CAAC,mBAAD,CAAlB,GAA0CF,YAAY,CAACY,iBAAb,CAA+BvB,KAAzE;AAEAwB,EAAAA,MAAM,CAACrC,GAAP,CAAWsC,GAAG,IAAI;AACdA,IAAAA,GAAG,CAACC,QAAJ,CAAavC,GAAb,CAAiBwC,MAAM,IAAI;AACvBA,MAAAA,MAAM,CAACD,QAAP,CAAgBvC,GAAhB,CAAoBC,SAAS,IAAI;AAC7B,eAAOA,SAAS,CAACwC,cAAV,CAAyB,UAAzB,IAAuCxC,SAAS,CAACsC,QAAV,CAAmBvC,GAAnB,CAAuB0C,YAAY,IAAI;AACjF,cAAIA,YAAY,CAACC,SAAb,KAA2B,OAA/B,EAAwC;AACrC;AACCjB,YAAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+BgB,YAAY,CAACE,WAA5C,IAA2DlC,cAAc,CAACkC,WAAf,GAC3D;AAAC/B,cAAAA,KAAK,EAACH,cAAc,CAACkC,WAAD,CAAd,CAA4B/B,KAAnC;AAAyCgC,cAAAA,KAAK,EAACnC,cAAc,CAACkC,WAAD,CAAd,CAA4BC;AAA3E,aAD2D,GACuB,CAAC,CADnF;AAEH,WAJD,MAIO;AACHnB,YAAAA,kBAAkB,CAAC,UAAD,CAAlB,CAA+BgB,YAAY,CAACI,aAA5C,IAA6DpC,cAAc,CAACoC,aAAf,GAC7DpC,cAAc,CAACoC,aAD8C,GAChC,EAD7B;AAEH;AACJ,SAT6C,CAAvC,GAUD7C,SAAS,CAAC0C,SAAV,KAAwB,OAAxB,GAAkCI,IAAI,CAAC1C,IAAL,CAAUJ,SAAV,CAAlC,GAAyD+C,qBAAqB,CAAC3C,IAAtB,CAA2BJ,SAA3B,CAV/D;AAWH,OAZD;AAaH,KAdD;AAeH,GAhBD;AAkBA,SAAOyB,kBAAP;AACH;AACD,OAAO,SAASuB,gCAAT,CAA0C/D,UAA1C,EAAsD;AACzDA,EAAAA,UAAU,CAACc,GAAX,CAAeC,SAAS,IAAI;AACxB,QAAIA,SAAS,CAACiD,cAAV,KAA6B,IAA7B,IAAqC,OAAOjD,SAAS,CAACiD,cAAjB,KAAoC,QAA7E,EAAuF;AACnFjD,MAAAA,SAAS,CAACiD,cAAV,GAA2B;AAACrC,QAAAA,KAAK,EAACZ,SAAS,CAACiD,cAAV,CAAyBrC,KAAhC;AAAsCgC,QAAAA,KAAK,EAAC5C,SAAS,CAACiD,cAAV,CAAyBL;AAArE,OAA3B;AACH;;AACD,QAAI5C,SAAS,CAACkD,UAAV,KAAyB,IAAzB,IAAiC,OAAOlD,SAAS,CAACkD,UAAjB,KAAgC,QAArE,EAA+E;AAC3ElD,MAAAA,SAAS,CAACkD,UAAV,GAAuB;AAACtC,QAAAA,KAAK,EAACZ,SAAS,CAACkD,UAAV,CAAqBtC,KAA5B;AAAkCgC,QAAAA,KAAK,EAAC5C,SAAS,CAACkD,UAAV,CAAqBN;AAA7D,OAAvB;AACH,KANuB,CAQxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA5C,IAAAA,SAAS,IAAI,OAAOA,SAAS,CAAC,UAAD,CAA7B;AACA,WAAOA,SAAP;AACH,GAtBD;AAuBA,SAAOf,UAAP;AACH;AAED,OAAO,SAASkE,yBAAT,CAAmClE,UAAnC,EAA+CmE,MAA/C,EAAuD;AAC1DnE,EAAAA,UAAU,CAACc,GAAX,CAAeC,SAAS,IAAI;AACxB;AACA,QAAIoD,MAAM,CAACpD,SAAS,CAACG,IAAX,CAAN,KAA2BkD,SAA/B,EAA0C;AACtC,aAAO,KAAP;AACH;;AACD,WAAOrD,SAAP;AACH,GAND;AAOA,SAAO,IAAP;AACH;AACD,OAAO,SAASsD,gBAAT,CAA0BhD,IAA1B,EAAgCiD,OAAhC,EAAyC;AAE5C,QAAMC,WAAW,GAAGD,OAAO,CAACE,MAAR,CAAe,UAAUC,CAAV,EAAa;AAC5C,WAAO,CAACpD,IAAI,CAACqD,IAAL,CAAU,UAAUC,CAAV,EAAa;AAC3B,aAAOF,CAAC,CAAC,WAAD,CAAD,KAAmBE,CAAC,CAAC,WAAD,CAApB,IAAsCA,CAAC,CAAC,oBAAD,CAAD,KAA4B7E,iBAAiB,CAAC8E,MAA9C,IAAwDD,CAAC,CAAC,oBAAD,CAAD,KAA4B7E,iBAAiB,CAAC+E,SAAnJ;AACH,KAFO,CAAR;AAGH,GAJmB,CAApB;AAKA,SAAON,WAAW,CAACrE,MAAZ,GAAqB,CAArB,GAAyB,KAAzB,GAAiC,IAAxC;AACH,C,CAED;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAS4E,sBAAT,CAAgCtD,cAAhC,EAAgD;AAEnD,MAAIuD,yBAAyB,GAAG,EAAhC;AACAA,EAAAA,yBAAyB,CAAC,aAAD,CAAzB,GAA2CvD,cAAc,CAACM,WAAf,GAA6BN,cAAc,CAACM,WAAf,CAA2BH,KAAxD,GAAgE,CAAC,CAA5G;AACAoD,EAAAA,yBAAyB,CAAC,YAAD,CAAzB,GAA0CvD,cAAc,CAACI,UAAf,GAA4BJ,cAAc,CAACI,UAAf,CAA0BD,KAAtD,GAA8D,CAAC,CAAzG;AACAoD,EAAAA,yBAAyB,CAAC,eAAD,CAAzB,GAA6CvD,cAAc,CAACwD,aAAf,GAA+BxD,cAAc,CAACwD,aAAf,CAA6BrD,KAA5D,GAAoE,CAAC,CAAlH;AACAoD,EAAAA,yBAAyB,CAAC,kBAAD,CAAzB,GAAgDvD,cAAc,CAACyD,gBAAf,GAAkCzD,cAAc,CAACyD,gBAAjD,GAAoE,EAApH;AACAF,EAAAA,yBAAyB,CAAC,uBAAD,CAAzB,GAAqDvD,cAAc,CAAC0D,qBAAf,GAAuC1D,cAAc,CAAC0D,qBAAf,CAAqCvD,KAA5E,GAAoF,CAAC,CAA1I;AACAoD,EAAAA,yBAAyB,CAAC,eAAD,CAAzB,GAA6CvD,cAAc,CAAC,eAAD,CAAd,GAAkC3B,eAAe,CAAC2B,cAAc,CAAC,eAAD,CAAf,EAAkC,KAAlC,CAAjD,GAA2F,MAAxI;AACAuD,EAAAA,yBAAyB,CAAC,eAAD,CAAzB,GAA6CvD,cAAc,CAAC,eAAD,CAAd,GAAkC3B,eAAe,CAAC2B,cAAc,CAAC,eAAD,CAAf,EAAkC,KAAlC,CAAjD,GAA2F,MAAxI;AACAuD,EAAAA,yBAAyB,CAAC,iBAAD,CAAzB,GAA+CvD,cAAc,CAAC2D,eAAf,GAAiC3D,cAAc,CAAC2D,eAAf,CAA+BxD,KAAhE,GAAwE,CAAC,CAAxH;AACAoD,EAAAA,yBAAyB,CAAC,iBAAD,CAAzB,GAA+CvD,cAAc,CAAC4D,eAAf,GAAiC5D,cAAc,CAAC4D,eAAf,CAA+BzB,KAAhE,GAAwE,CAAC,CAAxH;AACAoB,EAAAA,yBAAyB,CAAC,oBAAD,CAAzB,GAAkDvD,cAAc,CAAC6D,kBAAf,GAAoC7D,cAAc,CAAC6D,kBAAf,CAAkC1D,KAAtE,GAA8E,CAAC,CAAjI;AACAoD,EAAAA,yBAAyB,CAAC,UAAD,CAAzB,GAAwCvD,cAAc,CAAC8D,QAAf,GAA0B9D,cAAc,CAAC8D,QAAzC,GAAoD,EAA5F;AACAP,EAAAA,yBAAyB,CAAC,UAAD,CAAzB,GAAwCvD,cAAc,CAAC+D,QAAf,GAA0B/D,cAAc,CAAC+D,QAAzC,GAAoD,EAA5F;AACAR,EAAAA,yBAAyB,CAAC,QAAD,CAAzB,GAAsCvD,cAAc,CAACgE,MAAf,GAAwBhE,cAAc,CAACgE,MAAvC,GAAgD,EAAtF;AACAT,EAAAA,yBAAyB,CAAC,cAAD,CAAzB,GAA4CvD,cAAc,CAACiE,YAAf,GAA8BjE,cAAc,CAACiE,YAAf,CAA4B9D,KAA1D,GAAkE,CAAC,CAA/G;AACAoD,EAAAA,yBAAyB,CAAC,WAAD,CAAzB,GAAyCvD,cAAc,CAACkE,SAAf,GAA2BlE,cAAc,CAACkE,SAA1C,GAAsD,GAA/F;AACAX,EAAAA,yBAAyB,CAAC,gBAAD,CAAzB,GAA8CvD,cAAc,CAACmE,cAAf,GAAgCnE,cAAc,CAACmE,cAAf,CAA8BhE,KAA9D,GAAsE,CAAC,CAArH;AACAoD,EAAAA,yBAAyB,CAAC,WAAD,CAAzB,GAAyCvD,cAAc,CAACoE,SAAf,GAA2BpE,cAAc,CAACoE,SAAf,CAAyBjE,KAApD,GAA4D,CAAC,CAAtG;AACAoD,EAAAA,yBAAyB,CAAC,WAAD,CAAzB,GAAyCvD,cAAc,CAACqE,SAAf,GAA2BrE,cAAc,CAACqE,SAA1C,GAAsD,GAA/F;AACAd,EAAAA,yBAAyB,CAAC,mBAAD,CAAzB,GAAiDvD,cAAc,CAACsE,iBAAf,GAAmCtE,cAAc,CAACsE,iBAAf,CAAiCnE,KAApE,GAA4E,CAAC,CAA9H;AACAoD,EAAAA,yBAAyB,CAAC,UAAD,CAAzB,GAAwCvD,cAAc,CAACuE,QAAf,GAA0BvE,cAAc,CAACuE,QAAzC,GAAoD,IAA5F;AACAhB,EAAAA,yBAAyB,CAAC,gBAAD,CAAzB,GAA8CvD,cAAc,CAACwE,cAAf,GAAgCxE,cAAc,CAACwE,cAA/C,GAAgE,IAA9G;AACAjB,EAAAA,yBAAyB,CAAC,oBAAD,CAAzB,GAAkDvD,cAAc,CAACyE,kBAAf,GAAoCzE,cAAc,CAACyE,kBAAnD,GAAwE,IAA1H;AAEA,SAAOlB,yBAAP;AACH","sourcesContent":["\r\nimport { intl } from '../../components/App';\r\nimport { formatInputDate } from '../../components/CommonScript';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nexport function fnCheckBatchComponentMandatory(Components) {\r\n    // Components.map(component => {\r\n    for (var i = 0; i < Components.length; i++) {\r\n        if ((\r\n            Components[i].smanuflotno).length <= 0) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR ' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n\r\n        } else if (Components[i].nnoofcontainer && (Components[i].nnoofcontainer).length <= 0) {\r\n            // alert('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERNOOFCONTFOR\" }) + Components[i].scomponentname);\r\n            // return ('IDS_ENTERNOOFCONTFOR' + Components[i].scomponentname);\r\n        } else if (Components[i].dreceiveddate === null) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n            // return ('IDS_ENTERMANUFLOTNOFOR' + Components[i].scomponentname);\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function fnCheckBatchProtocolComponentMandatory(Components) {\r\n    //Components.map(component => {\r\n        for (var i = 0; i < Components.length; i++) {\r\n        if ((Components[i].smanuflotno).length <= 0) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR ' + {} + component.scomponentname);\r\n            //return (intl.formatMessage({ id: 'IDS_ENTERMANUFLOTNOFOR ' }) + {} + Components[i].scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n        } else if (Components[i].dreceiveddate === null) {\r\n            // alert('IDS_ENTERMANUFLOTNOFOR' + component.scomponentname);\r\n            return (intl.formatMessage({ id: \"IDS_ENTERMANUFLOTNOFOR\" }) + Components[i].scomponentname);\r\n        }\r\n        //return null;\r\n    //});\r\n        }\r\n    return true;\r\n}\r\n\r\nexport function checkDuplicateComponentandManufLot(Components) {\r\n    let copiedArrays = [...Components];\r\n    let DuplicateComponent = [];\r\n    let bReturnFlag = true;\r\n    Components.map(component => {\r\n        copiedArrays.forEach(componentArray => {\r\n            (component.slno !== componentArray.slno && component.smanuflotno === componentArray.smanuflotno &&\r\n                component.scomponentname === componentArray.scomponentname) && DuplicateComponent.push(component);\r\n        })\r\n        return null;\r\n    });\r\n    if (DuplicateComponent.length > 0) {\r\n        let smanuflotno = DuplicateComponent[0].smanuflotno;\r\n        let scomponentname = DuplicateComponent[0].scomponentname;\r\n        // Alert.show(resourceManager.getString('LocalizedStrings', 'IDS_DUPLICATEMANFNO') + \" \" + smanuflotno + \" for \" + scomponentname, resourceManager.getString('LocalizedStrings', 'IDS_WARNING'));\r\n        bReturnFlag = intl.formatMessage({ id: 'IDS_DUPLICATEMANFNO' }) + \" \" + smanuflotno + \" \" + intl.formatMessage({ id: 'IDS_FOR' }) + \" \" + scomponentname;\r\n    }\r\n    return bReturnFlag;\r\n}\r\nexport function TestListManipulation(Components, Test) {\r\n    let ArrayList = [];\r\n    Components.map(component => {\r\n        return ArrayList = Test && Test[component.slno] ? [...ArrayList, ...Test[component.slno]] : ArrayList;\r\n    });\r\n    return ArrayList ? ArrayList : [];\r\n}\r\nexport function getRegistrationGeneral(selectedRecord) {\r\n\r\n    let sampleRegistrationGeneral = {};\r\n    sampleRegistrationGeneral[\"nrmsno\"] = selectedRecord.nrmsno ? selectedRecord.nrmsno.value : -1;\r\n    sampleRegistrationGeneral[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode : -1;\r\n    sampleRegistrationGeneral[\"nmanufsitecode\"] = selectedRecord.nmanufsitecode ? selectedRecord.nmanufsitecode : -1;\r\n    sampleRegistrationGeneral[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\r\n    sampleRegistrationGeneral[\"nclientsitecode\"] = selectedRecord.nclientsitecode ? selectedRecord.nclientsitecode.value : -1;\r\n    sampleRegistrationGeneral[\"nproductmanufcode\"] = selectedRecord.nproductmanufcode ? selectedRecord.nproductmanufcode : -1;\r\n    sampleRegistrationGeneral[\"nproductmahcode\"] = selectedRecord.nproductmahcode ? selectedRecord.nproductmahcode : -1;\r\n    sampleRegistrationGeneral[\"neprotocolcode\"] = selectedRecord.neprotocolcode ? selectedRecord.neprotocolcode.value : -1;\r\n    sampleRegistrationGeneral[\"nplasmafilecode\"] = selectedRecord.nplasmafilecode ? selectedRecord.nplasmafilecode : -1;\r\n    return sampleRegistrationGeneral;\r\n}\r\n\r\nexport function getRegistration(masterData, selectedRecord,selectedSpec,templateList) {\r\n    let sampleRegistration = {};\r\n    sampleRegistration[\"nsampletypecode\"] = masterData.RealSampleTypeValue.nsampletypecode;\r\n    sampleRegistration[\"nregtypecode\"] = masterData.RealRegTypeValue.nregtypecode;\r\n    sampleRegistration[\"nregsubtypecode\"] = masterData.RealRegSubTypeValue.nregsubtypecode;\r\n    sampleRegistration[\"nproductcatcode\"] = selectedRecord.nproductcatcode.value;\r\n    sampleRegistration[\"nproductcode\"] = selectedRecord.nproductcode.value;\r\n    sampleRegistration[\"ntemplatemanipulationcode\"] = selectedSpec.ntemplatemanipulationcode;\r\n    sampleRegistration[\"nallottedspeccode\"] = selectedSpec.nallottedspeccode.value;\r\n\r\n    Layout.map(row => {\r\n        row.children.map(column => {\r\n            column.children.map(component => {\r\n                return component.hasOwnProperty(\"children\") ? component.children.map(componentrow => {\r\n                    if (componentrow.inputtype === \"combo\") {\r\n                       // data.push(componentrow)\r\n                        sampleRegistration[\"jsonData\"][componentrow.valueMember] = selectedRecord.valueMember?\r\n                        {value:selectedRecord[valueMember].value,label:selectedRecord[valueMember].label}:-1\r\n                    } else {\r\n                        sampleRegistration[\"jsonData\"][componentrow.displayMember] = selectedRecord.displayMember?\r\n                        selectedRecord.displayMember:\"\"\r\n                    }\r\n                })\r\n                    : component.inputtype === \"combo\" ? data.push(component) : withoutCombocomponent.push(component)\r\n            })\r\n        })\r\n    })\r\n\r\n    return sampleRegistration;\r\n}\r\nexport function getComponentListfromUnwantedAttr(Components) {\r\n    Components.map(component => {\r\n        if (component.ncomponentcode !== null && typeof component.ncomponentcode === \"object\") {\r\n            component.ncomponentcode = {value:component.ncomponentcode.value,label:component.ncomponentcode.label};\r\n        }\r\n        if (component.nunnitcode !== null && typeof component.nunnitcode === \"object\") {\r\n            component.nunnitcode = {value:component.nunnitcode.value,label:component.nunnitcode.label};\r\n        }\r\n\r\n        // if (component.nstorageconditioncode !== null && typeof component.nstorageconditioncode === \"object\") {\r\n        //     component.nstorageconditioncode = component.nstorageconditioncode.value;\r\n        // }\r\n        // if (component.nstoragelocationcode !== null && typeof component.nstoragelocationcode === \"object\") {\r\n        //     component.nstoragelocationcode = component.nstoragelocationcode.value;\r\n        // }\r\n        // if (component.dreceiveddate !== undefined && typeof component.dreceiveddate !== \"string\") {\r\n        //     component.dreceiveddate = formatInputDate(component.dreceiveddate, false);\r\n        // }\r\n        // if (component.dmanufdate !== undefined && component.dmanufdate !== null) {\r\n        //     component.dmanufdate = formatInputDate(component.dmanufdate, false);\r\n        // }\r\n        component && delete component[\"selected\"];\r\n        return component;\r\n    });\r\n    return Components;\r\n}\r\n\r\nexport function checkSourceForAllPreregno(Components, Source) {\r\n    Components.map(component => {\r\n        //   return Source[component.slno] === undefined &&  false;\r\n        if (Source[component.slno] === undefined) {\r\n            return false;\r\n        }\r\n        return component;\r\n    });\r\n    return true;\r\n}\r\nexport function checkTestPresent(Test, Samples) {\r\n\r\n    const filterArray = Samples.filter(function (x) {\r\n        return !Test.some(function (y) {\r\n            return x[\"npreregno\"] === y[\"npreregno\"] && (y[\"ntransactionstatus\"] !== transactionStatus.REJECT && y[\"ntransactionstatus\"] !== transactionStatus.CANCELLED)\r\n        });\r\n    });\r\n    return filterArray.length > 0 ? false : true\r\n}\r\n\r\n// //added by perumalraj on 23/12/2020\r\n// //compare two arrays of object and filter the record which are not present in the second array and vice versa\r\n// export function filterStatusBasedOnTwoArrays(firstArray, secondArray, PrimaryKey) {\r\n\r\n//     const filterArray = firstArray.filter(function (x) {\r\n//         return secondArray.some(function (y) {\r\n//             return x[PrimaryKey] === y[PrimaryKey]\r\n//         })\r\n//     });\r\n//     return filterArray;\r\n// }\r\n\r\nexport function getRegistrationRoutine(selectedRecord) {\r\n\r\n    let sampleRegistrationRoutine = {};\r\n    sampleRegistrationRoutine[\"nclientcode\"] = selectedRecord.nclientcode ? selectedRecord.nclientcode.value : -1;\r\n    sampleRegistrationRoutine[\"nmanufcode\"] = selectedRecord.nmanufcode ? selectedRecord.nmanufcode.value : -1;\r\n    sampleRegistrationRoutine[\"nsuppliercode\"] = selectedRecord.nsuppliercode ? selectedRecord.nsuppliercode.value : -1;\r\n    sampleRegistrationRoutine[\"ssamplecondition\"] = selectedRecord.ssamplecondition ? selectedRecord.ssamplecondition : '';\r\n    sampleRegistrationRoutine[\"nstorageconditioncode\"] = selectedRecord.nstorageconditioncode ? selectedRecord.nstorageconditioncode.value : -1;\r\n    sampleRegistrationRoutine[\"dreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) :'null';\r\n    sampleRegistrationRoutine[\"sreceiveddate\"] = selectedRecord[\"dreceiveddate\"] ? formatInputDate(selectedRecord[\"dreceiveddate\"], false) :'null';\r\n    sampleRegistrationRoutine[\"ntzdreceivedate\"] = selectedRecord.ntzdreceivedate ? selectedRecord.ntzdreceivedate.value : -1;\r\n    sampleRegistrationRoutine[\"stzdreceivedate\"] = selectedRecord.stzdreceivedate ? selectedRecord.stzdreceivedate.label : -1;\r\n    sampleRegistrationRoutine[\"ncontainertypecode\"] = selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : -1;\r\n    sampleRegistrationRoutine[\"sourfile\"] = selectedRecord.sourfile ? selectedRecord.sourfile : '';\r\n    sampleRegistrationRoutine[\"sbatchno\"] = selectedRecord.sbatchno ? selectedRecord.sbatchno : '';\r\n    sampleRegistrationRoutine[\"slotno\"] = selectedRecord.slotno ? selectedRecord.slotno : '';\r\n    sampleRegistrationRoutine[\"ndisposition\"] = selectedRecord.ndisposition ? selectedRecord.ndisposition.value : -1;\r\n    sampleRegistrationRoutine[\"stotalqty\"] = selectedRecord.stotalqty ? selectedRecord.stotalqty : '0';\r\n    sampleRegistrationRoutine[\"ntotalunitcode\"] = selectedRecord.ntotalunitcode ? selectedRecord.ntotalunitcode.value : -1;\r\n    sampleRegistrationRoutine[\"npriority\"] = selectedRecord.npriority ? selectedRecord.npriority.value : -1;\r\n    sampleRegistrationRoutine[\"sdeadline\"] = selectedRecord.sdeadline ? selectedRecord.sdeadline : '0';\r\n    sampleRegistrationRoutine[\"nperiodconfigcode\"] = selectedRecord.nperiodconfigcode ? selectedRecord.nperiodconfigcode.value : -1;\r\n    sampleRegistrationRoutine[\"sremarks\"] = selectedRecord.sremarks ? selectedRecord.sremarks : null;\r\n    sampleRegistrationRoutine[\"sreportremarks\"] = selectedRecord.sreportremarks ? selectedRecord.sreportremarks : null;\r\n    sampleRegistrationRoutine[\"sdeviationcomments\"] = selectedRecord.sdeviationcomments ? selectedRecord.sdeviationcomments : null;\r\n\r\n    return sampleRegistrationRoutine;\r\n}"]},"metadata":{},"sourceType":"module"}