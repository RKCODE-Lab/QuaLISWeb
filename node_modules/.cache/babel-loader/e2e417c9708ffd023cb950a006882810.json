{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\components\\\\form-multi-select\\\\form-multi-select.component.jsx\";\nimport React from 'react';\nimport MultiSelect from 'react-multi-select-component';\nimport { MultiSelectWrap } from '../form-multi-select/form-multi-select.styles';\nimport { Form } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\n\nfunction FormMultiSelect({\n  name,\n  className,\n  isMandatory,\n  errors,\n  ClearIcon,\n  label,\n  ClearSelectedIcon,\n  disableSearch,\n  disabled,\n  ArrowRenderer,\n  focusSearchOnOpen,\n  optionId,\n  optionValue,\n  options,\n  value,\n  onChange,\n  isInvalid,\n  allItemSelectedLabel,\n  noOptionsLabel,\n  searchLabel,\n  selectAllLabel,\n  ...props\n}) {\n  //ALPD-3356\n  const filterOptions = (options, filter) => {\n    const filteredOptions = options.filter(option => option.label && option.label.toLowerCase().includes(filter.toLowerCase()));\n    return filteredOptions;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    className: \"floating-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MultiSelectWrap, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    htmlFor: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, label, isMandatory && /*#__PURE__*/React.createElement(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 72\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(MultiSelect //options={options}\n  , {\n    options: Object.values(props.sortField ? props.sortOrder === \"ascending\" ? options.sort((itemA, itemB) => itemA[props.sortField] < itemB[props.sortField] ? -1 : 1) : options.sort((itemA, itemB) => itemA[props.sortField] > itemB[props.sortField] ? -1 : 1) : props.alphabeticalSort ? options.sort((itemA, itemB) => itemA[optionValue] < itemB[optionValue] ? -1 : 1) : options).map(item => {\n      return {\n        label: item[optionValue],\n        value: item[optionId],\n        item: item\n      };\n    }),\n    value: value,\n    onChange: onChange,\n    labelledBy: \"Select\",\n    name: name,\n    className: \"multi-select-dropdown\",\n    isMandatory: isMandatory,\n    label: label,\n    errors: errors,\n    ClearIcon: ClearIcon,\n    ClearSelectedIcon: ClearSelectedIcon,\n    disableSearch: disableSearch,\n    disabled: disabled,\n    focusSearchOnOpen: true,\n    ArrowRenderer: ArrowRenderer,\n    isInvalid: isInvalid,\n    filterOptions: filterOptions,\n    overrideStrings: {\n      \"allItemsAreSelected\": props.intl.formatMessage({\n        id: \"IDS_ALLITEMSAREMSELECTED\"\n      }),\n      \"noOptions\": props.intl.formatMessage({\n        id: \"IDS_NOOPTIONS\"\n      }),\n      \"search\": props.intl.formatMessage({\n        id: \"IDS_SEARCH\"\n      }),\n      \"selectAll\": props.intl.formatMessage({\n        id: \"IDS_SELECTALL\"\n      }),\n      \"selectSomeItems\": props.placeholder ? props.placeholder : props.intl.formatMessage({\n        id: \"IDS_SELECT...\"\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, errors)));\n}\n\nexport default injectIntl(FormMultiSelect);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/components/form-multi-select/form-multi-select.component.jsx"],"names":["React","MultiSelect","MultiSelectWrap","Form","injectIntl","FormMultiSelect","name","className","isMandatory","errors","ClearIcon","label","ClearSelectedIcon","disableSearch","disabled","ArrowRenderer","focusSearchOnOpen","optionId","optionValue","options","value","onChange","isInvalid","allItemSelectedLabel","noOptionsLabel","searchLabel","selectAllLabel","props","filterOptions","filter","filteredOptions","option","toLowerCase","includes","Object","values","sortField","sortOrder","sort","itemA","itemB","alphabeticalSort","map","item","intl","formatMessage","id","placeholder"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport MultiSelect from 'react-multi-select-component';\r\nimport { MultiSelectWrap } from '../form-multi-select/form-multi-select.styles';\r\nimport { Form } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\n\r\nfunction FormMultiSelect({ \r\n    name,\r\n    className,\r\n    isMandatory,\r\n    errors,\r\n    ClearIcon,\r\n    label,\r\n    ClearSelectedIcon,\r\n    disableSearch,\r\n    disabled,\r\n    ArrowRenderer,\r\n    focusSearchOnOpen,\r\n    optionId,\r\n    optionValue,\r\n    options,\r\n    value,\r\n    onChange,\r\n    isInvalid,\r\n    allItemSelectedLabel,\r\n    noOptionsLabel,\r\n    searchLabel,\r\n    selectAllLabel,\r\n    ...props\r\n\r\n    }) {\r\n        //ALPD-3356\r\n        const filterOptions =  (options, filter) => {\r\n            const filteredOptions = options.filter(option =>\r\n                option.label && option.label.toLowerCase().includes(filter.toLowerCase())\r\n            );\r\n            return filteredOptions;\r\n          };\r\n    return (\r\n        <React.Fragment>\r\n            <Form.Group className=\"floating-label\">\r\n                <MultiSelectWrap>\r\n                    <Form.Label htmlFor={name}>{label}{ isMandatory && <sup>*</sup>}</Form.Label>\r\n                    <MultiSelect\r\n                        //options={options}\r\n                        options={\r\n                                Object.values((props.sortField ? (\r\n                                        (props.sortOrder  === \"ascending\" ?\r\n                                                options.sort((itemA, itemB) => itemA[props.sortField] < itemB[props.sortField] ? -1 : 1) \r\n                                                : options.sort((itemA, itemB) => itemA[props.sortField] > itemB[props.sortField] ? -1 : 1) )\r\n                                    )\r\n                                    : (props.alphabeticalSort ?\r\n                                        options.sort((itemA, itemB) => itemA[optionValue] < itemB[optionValue] ? -1 : 1) : options)\r\n                                    \r\n                                )\r\n                                ).map(item => {\r\n                                    return { label: item[optionValue], value: item[optionId], item: item }\r\n                                })}\r\n                        value={value}\r\n                        onChange={onChange}\r\n                        labelledBy={\"Select\"}\r\n                        name={name}\r\n                        className={\"multi-select-dropdown\"}\r\n                        isMandatory={isMandatory}\r\n                        label={label}\r\n                        errors={errors}\r\n                        ClearIcon={ClearIcon}\r\n                        ClearSelectedIcon={ClearSelectedIcon}\r\n                        disableSearch={disableSearch}\r\n                        disabled={disabled}\r\n                        focusSearchOnOpen={true}\r\n                        ArrowRenderer={ArrowRenderer}\r\n                        isInvalid={isInvalid}\r\n                        filterOptions={filterOptions}\r\n                        overrideStrings={{\"allItemsAreSelected\":props.intl.formatMessage({ id: \"IDS_ALLITEMSAREMSELECTED\" }),\r\n                        \"noOptions\":props.intl.formatMessage({ id: \"IDS_NOOPTIONS\" }),\r\n                        \"search\":props.intl.formatMessage({ id: \"IDS_SEARCH\" }),\r\n                        \"selectAll\": props.intl.formatMessage({ id: \"IDS_SELECTALL\" }),\r\n                        \"selectSomeItems\":props.placeholder?props.placeholder: props.intl.formatMessage({ id: \"IDS_SELECT...\" }),\r\n                        }}\r\n                    />\r\n                </MultiSelectWrap>\r\n\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    { errors }\r\n                </Form.Control.Feedback>\r\n            </Form.Group>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default injectIntl(FormMultiSelect);"]},"metadata":{},"sourceType":"module"}