{"ast":null,"code":"import React from'react';import{Row,Col}from'react-bootstrap';import{injectIntl}from'react-intl';import FormInput from'../../../components/form-input/form-input.component';import FormMultiSelect from'../../../components/form-multi-select/form-multi-select.component';var AddChild=function AddChild(props){return/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:12},/*#__PURE__*/React.createElement(FormInput,{label:props.intl.formatMessage({id:props.extractedColumnList[0].idsName}),name:props.extractedColumnList[0].dataField,type:\"text\",placeholder:props.intl.formatMessage({id:props.extractedColumnList[0].idsName}),value:props.selectedRecord?props.selectedRecord[props.extractedColumnList[0].dataField]:\"\",isMandatory:props.extractedColumnList[0].mandatory,required:props.extractedColumnList[0].mandatory,readOnly:true}),/*#__PURE__*/React.createElement(FormMultiSelect,{name:props.extractedColumnList[1].dataField,label:props.intl.formatMessage({id:props.extractedColumnList[1].idsName}),options:props.comboDataList||[],optionId:props.extractedColumnList[1].optionId,optionValue:props.extractedColumnList[1].optionValue,value:props.selectedRecord?props.selectedRecord[props.extractedColumnList[1].dataField]||[]:[],isMandatory:true,isClearable:true,disableSearch:false,disabled:false,closeMenuOnSelect:false,alphabeticalSort:true,onChange:function onChange(event){return props.onComboChange(event,props.extractedColumnList[1].dataField);}//isInvalid={props.failedControls.indexOf(props.extractedColumnList[1].dataField) !==-1}\n})));};export default injectIntl(AddChild);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/organisation/organisationmapping/AddChild.js"],"names":["React","Row","Col","injectIntl","FormInput","FormMultiSelect","AddChild","props","intl","formatMessage","id","extractedColumnList","idsName","dataField","selectedRecord","mandatory","comboDataList","optionId","optionValue","event","onComboChange"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,CAAcC,GAAd,KAAyB,iBAAzB,CACA,OAASC,UAAT,KAA2B,YAA3B,CACA,MAAOC,CAAAA,SAAP,KAAsB,qDAAtB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mEAA5B,CAGA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,CAAW,CACpB,mBACQ,oBAAC,GAAD,mBACQ,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,eACQ,oBAAC,SAAD,EACQ,KAAK,CAAEA,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAEH,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BC,OAAnC,CAAzB,CADf,CAEQ,IAAI,CAAEL,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BE,SAF3C,CAGQ,IAAI,CAAC,MAHb,CAIQ,WAAW,CAAEN,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAEH,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BC,OAAnC,CAAzB,CAJrB,CAKQ,KAAK,CAAEL,KAAK,CAACO,cAAN,CAAuBP,KAAK,CAACO,cAAN,CAAqBP,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BE,SAAlD,CAAvB,CAAsF,EALrG,CAMQ,WAAW,CAAEN,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BI,SANlD,CAOQ,QAAQ,CAAER,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BI,SAP/C,CAQQ,QAAQ,CAAE,IARlB,EADR,cAgCQ,oBAAC,eAAD,EACQ,IAAI,CAAER,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BE,SAD3C,CAEQ,KAAK,CAAEN,KAAK,CAACC,IAAN,CAAWC,aAAX,CAAyB,CAAEC,EAAE,CAAEH,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BC,OAAnC,CAAzB,CAFf,CAGQ,OAAO,CAAEL,KAAK,CAACS,aAAN,EAAuB,EAHxC,CAIQ,QAAQ,CAAET,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BM,QAJ/C,CAKQ,WAAW,CAAEV,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BO,WALlD,CAMQ,KAAK,CAAEX,KAAK,CAACO,cAAN,CAAuBP,KAAK,CAACO,cAAN,CAAqBP,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BE,SAAlD,GAAiE,EAAxF,CAA4F,EAN3G,CAOQ,WAAW,CAAE,IAPrB,CAQQ,WAAW,CAAE,IARrB,CASQ,aAAa,CAAE,KATvB,CAUQ,QAAQ,CAAE,KAVlB,CAWQ,iBAAiB,CAAE,KAX3B,CAYQ,gBAAgB,CAAE,IAZ1B,CAaQ,QAAQ,CAAE,kBAACM,KAAD,QAAWZ,CAAAA,KAAK,CAACa,aAAN,CAAoBD,KAApB,CAA2BZ,KAAK,CAACI,mBAAN,CAA0B,CAA1B,EAA6BE,SAAxD,CAAX,EAClB;AAdA,EAhCR,CADR,CADR,CAuDP,CAxDD,CA0DA,cAAeV,CAAAA,UAAU,CAACG,QAAD,CAAzB","sourcesContent":["import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormMultiSelect from '../../../components/form-multi-select/form-multi-select.component';\r\n\r\n\r\nconst AddChild = (props) => {\r\n        return (\r\n                <Row>\r\n                        <Col md={12}>\r\n                                <FormInput\r\n                                        label={props.intl.formatMessage({ id: props.extractedColumnList[0].idsName })}\r\n                                        name={props.extractedColumnList[0].dataField}\r\n                                        type=\"text\"\r\n                                        placeholder={props.intl.formatMessage({ id: props.extractedColumnList[0].idsName })}\r\n                                        value={props.selectedRecord ? props.selectedRecord[props.extractedColumnList[0].dataField] : \"\"}\r\n                                        isMandatory={props.extractedColumnList[0].mandatory}\r\n                                        required={props.extractedColumnList[0].mandatory}\r\n                                        readOnly={true}\r\n                                />\r\n\r\n                                {/* <FormSelectSearch\r\n                                    name={props.extractedColumnList[1].dataField}\r\n                                    formLabel={ props.intl.formatMessage({ id:props.extractedColumnList[1].idsName})}                              \r\n                                    placeholder=\"Please Select...\"                              \r\n                                    options={ props.comboDataList || []}\r\n                                    optionId={props.extractedColumnList[1].optionId}\r\n                                    optionValue={props.extractedColumnList[1].optionValue}\r\n                                    value = { props.selectedRecord ? props.selectedRecord[props.extractedColumnList[1].dataField]:\"\"}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    isMulti={true}\r\n                                    isClearable={true}\r\n                                    isSearchable={true}                                \r\n                                    isDisabled={false}\r\n                                    closeMenuOnSelect={false}\r\n                                    alphabeticalSort={true}\r\n                                    onChange = {(event)=> props.onComboChange(event, props.extractedColumnList[1].dataField)}                               \r\n                                    //isInvalid={props.failedControls.indexOf(props.extractedColumnList[1].dataField) !==-1}\r\n                        \r\n                            /> */}\r\n                                <FormMultiSelect\r\n                                        name={props.extractedColumnList[1].dataField}\r\n                                        label={props.intl.formatMessage({ id: props.extractedColumnList[1].idsName })}\r\n                                        options={props.comboDataList || []}\r\n                                        optionId={props.extractedColumnList[1].optionId}\r\n                                        optionValue={props.extractedColumnList[1].optionValue}\r\n                                        value={props.selectedRecord ? props.selectedRecord[props.extractedColumnList[1].dataField]  || []: []}\r\n                                        isMandatory={true}\r\n                                        isClearable={true}\r\n                                        disableSearch={false}\r\n                                        disabled={false}\r\n                                        closeMenuOnSelect={false}\r\n                                        alphabeticalSort={true}\r\n                                        onChange={(event) => props.onComboChange(event, props.extractedColumnList[1].dataField)}\r\n                                //isInvalid={props.failedControls.indexOf(props.extractedColumnList[1].dataField) !==-1}\r\n\r\n                                />\r\n                        </Col>\r\n\r\n                </Row>\r\n        )\r\n}\r\n\r\nexport default injectIntl(AddChild);"]},"metadata":{},"sourceType":"module"}