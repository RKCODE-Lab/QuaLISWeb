{"ast":null,"code":"// import React, { Component } from 'react';\n// import { connect } from 'react-redux';\n// import { injectIntl, FormattedMessage } from 'react-intl';\n// import { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import PerfectScrollbar from 'react-perfect-scrollbar';\n// import { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus,faThumbsUp } from '@fortawesome/free-solid-svg-icons';\n// import { toast } from 'react-toastify';\n// import ListMaster from '../../components/list-master/list-master.component';\n// import { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\n// import { ReadOnlyText, ContentPanel } from '../../components/App.styles';\n// import SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\n// import {\n//     callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation,\n//     openPropertyModal, editSampleStorageLocation\n// } from '../../actions';\n// import { DEFAULT_RETURN } from '../../actions/LoginTypes';\n// import { ListWrapper } from '../../components/client-group.styles';\n// import { ProductList } from '../product/product.styled';\n// import ReactTooltip from 'react-tooltip';\n// import { uuid } from \"uuidv4\";\n// import TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\n// import TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\n// import { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\n// import ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\n// import AddTreeview from './AddTreeview';\n// import AddTreeProperties from './AddTreeProperties';\n// import { Splitter } from '@progress/kendo-react-layout';\n// import TransactionListMaster from '../../components/TransactionListMaster';\n// import BreadcrumbComponent from '../../components/Breadcrumb.Component';\n// import SplitterLayout from 'react-splitter-layout';\n// class SampleStorageLocation extends Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             toggleAction: false,\n//             treeDataView: undefined,\n//             toggleActionView: false,\n//             treeData: [\n//                 {\n//                     text: \"root\",\n//                     expanded: true,\n//                     editable: true,\n//                     root: true,\n//                     id: uuid(),\n//                 }],\n//             panes: [{\n//                 size: '50%',\n//                 scrollable: false\n//             }],\n//             selectedRecord: {},\n//             userRoleControlRights: [],\n//             controlMap: new Map(),\n//             skip: 0,\n//             detailSkip: 0,\n//             detailTake: 10,\n//             take: this.props.Login.settings ?\n//                 this.props.Login.settings[3] : 25,\n//             splitChangeWidthPercentage: 22,\n//         };\n//         this.searchRef = React.createRef();\n//         this.confirmMessage = new ConfirmMessage();\n//     }\n//     onChange = (event) => {\n//         this.setState({ panes: event.newState })\n//     };\n//     componentDidUpdate(previousProps) {\n//         let { filterData } = this.state;\n//         if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n//             const userRoleControlRights = [];\n//             if (this.props.Login.userRoleControlRights) {\n//                 this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\n//                     userRoleControlRights.push(item.ncontrolcode))\n//             }\n//             const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\n//             this.setState({ controlMap, userRoleControlRights });\n//         }\n//         if (this.props.Login.treeData !== previousProps.Login.treeData) {\n//             this.setState({\n//                 treeData: this.props.Login.treeData\n//             });\n//         }\n//         if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\n//             this.setState({\n//                 treeDataView:\n//                     JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\n//             });\n//         }\n//         if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n//             this.setState({\n//                 selectedRecord: this.props.Login.selectedRecord\n//             });\n//         }\n//     }\n//     addChildNode = (e, clickedItem) => {\n//         let newData = mapTree(this.state.treeData, \"items\", (item) => {\n//             if (item.id === clickedItem.id) {\n//                 item.items = item.items || [];\n//                 item.items.push({\n//                     id: uuid(),\n//                     text: uuid(),\n//                     expanded: true,\n//                     editable: false,\n//                     locationlastnode: false,\n//                     containerfirstnode: false,\n//                     containerlastnode: false\n//                 });\n//             }\n//             return item;\n//         });\n//         this.setState({ treeData: newData });\n//     };\n//     equalNode = (e, clickedItem) => {\n//         let parentItem = {};\n//         let parentFound = false;\n//         let newData = [...this.state.treeData];\n//         mapTree(this.state.treeData, \"items\", (item) => {\n//             if (item.items) {\n//                 if (parentFound) {\n//                     parentItem = item;\n//                     parentFound = false;\n//                 }\n//             }\n//             if (item.id === clickedItem.id) {\n//                 parentFound = true;\n//             }\n//             return item;\n//         });\n//         if (parentItem.text === undefined) {\n//             newData.push({\n//                 id: uuid(),\n//                 text: uuid(),\n//                 expanded: true,\n//                 editable: false,\n//                 locationlastnode: false,\n//                 containerfirstnode: false,\n//                 containerlastnode: false\n//             });\n//             this.setState({ treeData: newData });\n//         } else {\n//             newData = mapTree(this.state.treeData, \"items\", (item) => {\n//                 if (item.id === parentItem.id) {\n//                     item.items.push({\n//                         id: uuid(),\n//                         text: uuid(),\n//                         expanded: true,\n//                         editable: false,\n//                         locationlastnode: false,\n//                         containerfirstnode: false,\n//                         containerlastnode: false\n//                     });\n//                 }\n//                 return item;\n//             });\n//             this.setState({ treeData: newData });\n//         }\n//     };\n//     deleteNode = (clickedItem) => {\n//         const newData = removeItems(this.state.treeData, \"items\", (item) => {\n//             return item.id === clickedItem.id;\n//         });\n//         this.setState({ treeData: newData });\n//     };\n//     editRecord = (e, clickedItem) => {\n//         this.setState({ toggleAction: !this.state.toggleAction });\n//     };\n//     openModal = () => {\n//         const updateInfo = {\n//             typeName: DEFAULT_RETURN,\n//             data: {\n//                 openModal: true, selectedRecord: {}, loadTreeProperties: false,\n//                 treeData: [\n//                     {\n//                         text: \"root\",\n//                         expanded: true,\n//                         editable: true,\n//                         root: true,\n//                         id: uuid(),\n//                     },\n//                 ], operation: \"create\"\n//             }\n//         }\n//         this.props.updateStore(updateInfo);\n//     }\n//     closeModal = () => {\n//         const updateInfo = {\n//             typeName: DEFAULT_RETURN,\n//             data: {\n//                 openModal: false, selectedRecord: {}\n//             }\n//         }\n//         this.props.updateStore(updateInfo);\n//     }\n//     onInputChange = (event) => {\n//         const selectedRecord = this.state.selectedRecord || {};\n//         if (event.target.type === \"checkbox\") {\n//             selectedRecord[event.target.name] = event.target.checked;\n//         } else {\n//             selectedRecord[event.target.name] = event.target.value;\n//         }\n//         this.setState({ selectedRecord });\n//     };\n//     itemRender = (props) => {\n//         if (this.state.toggleAction) {\n//             return (\n//                 <>\n//                     {props.item.editable ? (\n//                         <Form.Group className=\"k-editable-text-wrap\">\n//                             <Form.Control\n//                                 id={\"nodename\"}\n//                                 name={\"nodename\"}\n//                                 type=\"text\"\n//                                 onKeyDown={(e) => e.stopPropagation()}\n//                                 value={props.item.text}\n//                                 autoFocus\n//                                 autoComplete=\"off\"\n//                                 onChange={(e) => this.handleChange(e, props.item)}\n//                                 onBlur={(e) => this.handleBlur(e, props.item)}\n//                             />\n//                         </Form.Group>\n//                     ) : (\n//                         <span>{props.item.text}</span>\n//                     )}\n//                 </>\n//             );\n//         } else {\n//             return (\n//                 <>\n//                     {props.item ? (\n//                         <ul className=\"list-inline mb-0\">\n//                             <li className=\"list-inline-item mr-3\">{props.item.text}</li>\n//                             {props.item.editable ? (\n//                                 <>\n//                                     <li className=\"list-inline-item\">\n//                                         <span\n//                                             className=\"action-icon tree-level1\"\n//                                             onClick={(e) => {\n//                                                 e.stopPropagation();\n//                                                 this.equalNode(e, props.item);\n//                                             }}\n//                                         ></span>\n//                                     </li>\n//                                     <li className=\"list-inline-item\">\n//                                         <span\n//                                             className=\"action-icon tree-level2\"\n//                                             onClick={(e) => {\n//                                                 e.stopPropagation();\n//                                                 this.addChildNode(e, props.item);\n//                                             }}\n//                                         ></span>\n//                                     </li>\n//                                     <li className=\"list-inline-item\">\n//                                         <span\n//                                             className=\"k-icon k-i-edit k-i-pencil\"\n//                                             onClick={(e) => {\n//                                                 e.stopPropagation();\n//                                                 this.editRecord(e, props.item);\n//                                             }}\n//                                         ></span>\n//                                     </li>\n//                                     {!props.item.isRoot ? (\n//                                         <li className=\"list-inline-item\">\n//                                             <span\n//                                                 className=\"k-icon k-i-delete\"\n//                                                 onClick={(e) => {\n//                                                     e.stopPropagation();\n//                                                     this.deleteNode(props.item);\n//                                                 }}\n//                                             ></span>\n//                                         </li>\n//                                     ) : null}\n//                                 </>\n//                             ) : null}\n//                         </ul>\n//                     ) : (\n//                         \"\"\n//                     )}\n//                 </>\n//             );\n//         }\n//     };\n//     onItemClick = (event) => {\n//         let newData = mapTree(this.state.treeData, \"items\", (item) => {\n//             if (item.editable === true) {\n//                 item.editable = false;\n//             } else if (item.id === event.item.id) {\n//                 item.editable = true;\n//             }\n//             return item;\n//         });\n//         this.setState({ treeData: newData });\n//     };\n//     onExpandChange = (event) => {\n//         event.item.expanded = !event.item.expanded;\n//         this.forceUpdate();\n//     };\n//     itemRenderView = (clickedItem) => {\n//         if (!this.state.toggleActionView) {\n//             return (\n//                 <>\n//                     {clickedItem.item ? (\n//                         <ul className=\"list-inline mb-0\">\n//                             <li className=\"list-inline-item mr-3\">{clickedItem.item.text}</li>\n//                             {clickedItem.item.editable ? (\n//                                 <>\n//                                     <li className=\"list-inline-item\">\n//                                         <span\n//                                             className=\"action-icon tree-toggle\"\n//                                             onClick={(e) => this.setProperties(e, clickedItem)}\n//                                         ></span>\n//                                     </li>\n//                                 </>\n//                             ) : null}\n//                         </ul>\n//                     ) : (\n//                         \"\"\n//                     )}\n//                 </>\n//             );\n//         }\n//     };\n//     onItemClickView = (event) => {\n//         let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\n//             if (item.editable === true) {\n//                 item.editable = false;\n//             } else if (item.id === event.item.id) {\n//                 item.editable = true;\n//             }\n//             return item;\n//         });\n//         this.setState({ treeDataView: newData });\n//     };\n//     onExpandChangeView = (event) => {\n//         event.item.expanded = !event.item.expanded;\n//         this.forceUpdate();\n//     };\n//     setProperties = (event, clickedItem) => {\n//         this.props.openPropertyModal(clickedItem);\n//     };\n//     handleChange = (e, clickedItem) => {\n//         let newData = mapTree(this.state.treeData, \"items\", (item) => {\n//             if (item.id === clickedItem.id) {\n//                 item.text = e.target.value;\n//             }\n//             return item;\n//         });\n//         this.setState({ treeData: newData });\n//     };\n//     handleBlur = (e, item) => {\n//         item.editable = false;\n//         this.setState({ toggleAction: !this.state.toggleAction });\n//     };\n//     onSaveClick = () => {\n//         if (this.props.Login.loadTreeProperties === true) {\n//             this.onSaveProperties();\n//         } else {\n//             this.onSaveSampleStorageLocation();\n//         }\n//     };\n//     onSaveProperties = (saveType, formRef) => {\n//         const { selectedRecord } = this.state;\n//         if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\n//             let inputData = [];\n//             let jsondata = {}\n//             let postParam = undefined;\n//             let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\n//                 if (item.id === this.props.Login.clickedItem.item.id) {\n//                     item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\n//                     item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\n//                     item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\n//                 }\n//                 return item;\n//             });\n//             postParam = { inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\n//             jsondata[\"data\"] = newData;\n//             inputData[\"userinfo\"] = this.props.Login.userInfo;\n//             inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\n//             inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\n//             inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\n//             inputData[\"sampleStorageLocation\"][\"jsondata\"] = jsondata;\n//             const inputParam = {\n//                 classUrl: \"samplestoragelocation\",\n//                 methodUrl: \"SampleStorageLocation\",\n//                 displayName: this.props.Login.inputParam.displayName,\n//                 inputData: inputData,\n//                 operation: \"update\", saveType, formRef, postParam\n//             }\n//             this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n//         }\n//     }\n//     onSaveSampleStorageLocation = (saveType, formRef) => {\n//         const { selectedRecord } = this.state;\n//         if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\n//             let inputData = [];\n//             let jsondata = {}\n//             let postParam = undefined;\n//             let newData = mapTree(this.state.treeData, \"items\", (item) => {\n//                 if (item.editable === true) {\n//                     item.editable = false;\n//                 }\n//                 return item;\n//             });\n//             // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\n//             jsondata[\"data\"] = newData;\n//             inputData[\"userinfo\"] = this.props.Login.userInfo;\n//             inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\n//             inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\n//             inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\n//             inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\n//             if (this.props.Login.operation === \"create\") {\n//                 const inputParam = {\n//                     classUrl: \"samplestoragelocation\",\n//                     methodUrl: \"SampleStorageLocation\",\n//                     displayName: this.props.Login.inputParam.displayName,\n//                     inputData: inputData,\n//                     operation: \"create\", saveType, formRef\n//                 }\n//                 this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n//             } else {\n//                 inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\n//                 const inputParam = {\n//                     classUrl: \"samplestoragelocation\",\n//                     methodUrl: \"SampleStorageLocation\",\n//                     displayName: this.props.Login.inputParam.displayName,\n//                     inputData: inputData,\n//                     operation: \"update\", saveType, formRef\n//                 }\n//                 this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n//             }\n//         }\n//         else {\n//             toast.info(this.props.intl.formatMessage({ id: \"IDS_INVALIDSAMPLESTORAGELOCATIONNAME\" }));\n//         }\n//     }\n//     deleteSampleStorageLocation = () => {\n//         let inputData = [];\n//         inputData[\"sampleStorageLocation\"] = this.props.Login.masterData.selectedSampleStorageLocation;\n//         inputData[\"userinfo\"] = this.props.Login.userInfo;\n//         const inputParam = {\n//             methodUrl: \"SampleStorageLocation\",\n//             classUrl: \"samplestoragelocation\",\n//             inputData: inputData,\n//             operation: \"delete\", searchRef: this.searchRef\n//         }\n//         this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n//     }\n//     confirmDelete = (ncontrolCode) => {\n//         this.confirmMessage.confirm(\"deleteMessage\",\n//             this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n//             this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\n//             this.props.intl.formatMessage({ id: \"IDS_OK\" }),\n//             this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\n//             () => this.deleteSampleStorageLocation(\"delete\", ncontrolCode));\n//     };\n//     paneSizeChange = (d) => {\n//         this.setState({\n//             splitChangeWidthPercentage: d\n//         })\n//     }\n//     handlePageChange = e => {\n//         this.setState({\n//             skip: e.skip,\n//             take: e.take\n//         });\n//     };\n//     handleDetailPageChange = e => {\n//         this.setState({\n//             skip: e.skip,\n//             take: e.take\n//         });\n//     };\n//     componentDidMount() {\n//         if (this.parentHeight) {\n//             const height = this.parentHeight.clientHeight;\n//             this.setState({\n//                 firstPane: height - 80,\n//                 parentHeight: height - 50\n//             });\n//         }\n//     }\n//     render() {\n//         const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\n//         const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n//         const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n//         const breadCrumbData = [];\n//         const confirmMessage = new ConfirmMessage();\n//         return (\n//             <>\n//                 <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\n//                     {breadCrumbData.length > 0 ?\n//                         <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\n//                         : \"\"}\n//                     <Row noGutters={true}>\n//                         <Col md={12} className=\"parent-port-height\">\n//                             {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\n//                             <ListWrapper> */}\n//                             <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\n//                                 {/* First column */}\n//                                 <TransactionListMaster\n//                                     paneHeight={this.state.parentHeight}\n//                                     needMultiSelect={false}\n//                                     masterList={this.props.Login.masterData.sampleStorageLocation || []}\n//                                     selectedMaster={[this.props.Login.masterData.selectedSampleStorageLocation]}\n//                                     primaryKeyField=\"nsamplestoragelocationcode\"\n//                                     getMasterDetail={(selectedItem) =>\n//                                         this.props.getSelectedSampleStorageLocation(\n//                                             selectedItem,\n//                                             this.props.Login.userInfo, this.props.Login.masterData\n//                                         )}\n//                                     inputParam={{\n//                                         userInfo: this.props.Login.userInfo,\n//                                         masterData: this.props.Login.masterData\n//                                     }}\n//                                     mainField={\"ssamplestoragelocationname\"}\n//                                     selectedListName=\"selectedSampleStorageLocation\"\n//                                     objectName=\"LocationMaster\"\n//                                     listName=\"IDS_SAMPLESTORAGELOCATION\"\n//                                     // filterColumnData={this.props.filterTransactionList}\n//                                     searchListName=\"searchedData\"\n//                                     searchRef={this.searchRef}\n//                                     // filterParam={filterParam}\n//                                     // showFilter={this.props.Login.showFilter}\n//                                     // openFilter={this.openFilter}\n//                                     // closeFilter={this.closeFilter}\n//                                     // onFilterSubmit={this.onFilterSubmit}                                       \n//                                     needFilter={false}\n//                                     //skip={this.state.masterSkip}\n//                                     //take={this.state.masterTake}\n//                                     hidePaging={false}\n//                                     handlePageChange={this.handlePageChange}\n//                                     skip={this.state.skip}\n//                                     take={this.state.take}\n//                                     commonActions={\n//                                         <ProductList className=\"d-flex product-category float-right\">\n//                                             <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\n//                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n//                                                 data-for=\"tooltip-common-wrap\"\n//                                                 hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\n//                                                 onClick={() => this.openModal()}>\n//                                                 <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\n//                                             </Button>\n//                                             <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\n//                                                 onClick={() => this.reloadData()}\n//                                                 data-for=\"tooltip-common-wrap\"\n//                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\n//                                                 <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\n//                                             </Button>\n//                                         </ProductList>\n//                                     }\n//                                 />\n//                                 {/* End of first column */}\n//                                 <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\n//                                     customClassName=\"fixed_list_height\">\n//                                     <PerfectScrollbar>\n//                                         {/* Start of second column */}\n//                                         <div className=\"card_group\">\n//                                             <Row>\n//                                                 <Col md={3} style={{ paddingRight: '0' }}>\n//                                                     {/* Start of version column */}\n//                                                     <TransactionListMaster\n//                                                         masterList={this.props.Login.masterData.sampleStorageVersion || []}\n//                                                         needMultiSelect={false}\n//                                                         selectedMaster={[this.props.Login.masterData.selectedSampleStorageVersion]}\n//                                                         primaryKeyField=\"nsamplestorageversioncode\"\n//                                                         getMasterDetail={(selectedItem) =>\n//                                                             this.props.getSelectedSampleStorageVersion(\n//                                                                 selectedItem, this.props.Login.userInfo,\n//                                                                 this.props.Login.masterData\n//                                                             )}\n//                                                         inputParam={{\n//                                                             userInfo: this.props.Login.userInfo,\n//                                                             masterData: this.props.Login.masterData\n//                                                         }}\n//                                                         mainField={\"nversionno\"}\n//                                                         mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\n//                                                         selectedListName=\"selectedSampleStorageVersion\"\n//                                                         objectName=\"Version\"\n//                                                         listName=\"IDS_SAMPLESTORAGEVersion\"\n//                                                         hideSearch={true}\n//                                                         needValidation={false}\n//                                                         needFilter={false}\n//                                                         moreField={[]}\n//                                                         skip={this.state.detailSkip}\n//                                                         take={this.state.detailTake}\n//                                                         hidePaging={true}\n//                                                         handlePageChange={this.handleDetailPageChange}\n//                                                         splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n//                                                         actionIcons={\n//                                                             [\n//                                                                 {\n//                                                                     title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\n//                                                                     controlname: \"faPencilAlt\",\n//                                                                     objectName: \"detailtoedit\",\n//                                                                     hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n//                                                                     onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\n//                                                                 },\n//                                                                 {\n//                                                                     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n//                                                                     controlname: \"faTrashAlt\",\n//                                                                     objectName: \"mastertodelete\",\n//                                                                     hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n//                                                                     onClick: () => this.confirmDelete(deleteId)\n//                                                                 }\n//                                                             ]\n//                                                         }\n//                                                     />\n//                                                     {/* End of version column */}\n//                                                 </Col>\n//                                                 <Col md={9}>\n//                                                     {/* Start of detailed content */}\n//                                                     <ProductList className=\"panel-main-content\">\n//                                                         {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\n//                                                             <Card className=\"border-0\">\n//                                                                 <Card.Header>\n//                                                                     <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\n//                                                                     <Card.Subtitle>\n//                                                                         <h2 className=\"product-title-sub flex-grow-1\">\n//                                                                             <Nav.Link className=\"action-icons-wrap mr-2\">\n//                                                                                 {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === 8 ?\n//                                                                                     <span className={`btn btn-outlined  outline-secondary btn-sm ml-3`}>\n//                                                                                         <FormattedMessage id={\"IDS_DRAFT\"} defaultMessage=\"Draft\" />\n//                                                                                     </span>\n//                                                                                     :\n//                                                                                     this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === 7 ?\n//                                                                                         <span className={`btn btn-outlined outline-secondary btn-sm ml-3`}>\n//                                                                                             <FormattedMessage id={\"IDS_RETIRED\"} defaultMessage=\"Retired\" />\n//                                                                                         </span>\n//                                                                                         :\n//                                                                                         <span className={`btn btn-outlined outline-success btn-sm ml-3`}>\n//                                                                                             <FormattedMessage id={\"IDS_APPROVED\"} defaultMessage=\"Approved\" />\n//                                                                                         </span>\n//                                                                                 }\n//                                                                             </Nav.Link>\n//                                                                         </h2>\n//                                                                     </Card.Subtitle>\n//                                                                     <ContentPanel className=\"d-flex product-category\">\n//                                                                         <Col md='6'>\n//                                                                             <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\n//                                                                                 <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\n//                                                                                 <ProductList className=\"d-inline dropdown badget_menu\">\n//                                                                                     <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\n//                                                                                         // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\n//                                                                                         data-for=\"tooltip_list_wrap\"\n//                                                                                         data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\n//                                                                                         onClick={(e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData)}\n//                                                                                     >\n//                                                                                         <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\" />\n//                                                                                     </Nav.Link>\n//                                                                                     <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\n//                                                                                         // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\n//                                                                                         data-for=\"tooltip_list_wrap\"\n//                                                                                         data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\n//                                                                                         onClick={() => this.confirmDelete(deleteId)}\n//                                                                                     >\n//                                                                                         <FontAwesomeIcon icon={faTrashAlt} />\n//                                                                                     </Nav.Link>\n//                                                                                     <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\n//                                                                                         // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\n//                                                                                         data-for=\"tooltip_list_wrap\"\n//                                                                                         data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\n//                                                                                         // onClick={() => this.confirmDelete(deleteId)}\n//                                                                                     >\n//                                                                                         <FontAwesomeIcon icon={faThumbsUp} />\n//                                                                                     </Nav.Link>\n//                                                                                 </ProductList>\n//                                                                             </div>\n//                                                                         </Col>\n//                                                                     </ContentPanel>\n//                                                                 </Card.Header>\n//                                                                 <Card.Body>\n//                                                                     <TreeViewEditable\n//                                                                         id=\"samplestoragelocation\"\n//                                                                         name=\"samplestoragelocation\"\n//                                                                         // label=\"Sample Storage Location\"\n//                                                                         data={this.state.treeDataView}\n//                                                                         expandIcons={true}\n//                                                                         item={this.itemRenderView}\n//                                                                         onExpandChange={this.onExpandChangeView}\n//                                                                         onItemClick={this.onItemClickView}\n//                                                                     />\n//                                                                 </Card.Body>\n//                                                             </Card>\n//                                                             : \"\"}\n//                                                     </ProductList>\n//                                                     {/* End of detailed content */}\n//                                                 </Col>\n//                                             </Row>\n//                                         </div>\n//                                         {/* End of second column */}\n//                                     </PerfectScrollbar>\n//                                 </SplitterLayout>\n//                             </SplitterLayout>\n//                         </Col>\n//                     </Row>\n//                 </ListWrapper>\n//                 {/* <ListWrapper className=\"client-listing-wrap mtop-4 \"> */}\n//                 {/* <Row noGutters={true}>\n//                         <Col md=\"6\" className=\"parent-port-height\">\n//                             <Splitter panes={this.state.panes} onChange={this.onChange}>\n//                                 <div>                                    \n//                                     <TransactionListMaster\n//                                         // paneHeight={this.state.parentHeight}\n//                                         needMultiSelect={false}\n//                                         masterList={this.props.Login.masterData &&\n//                                             this.props.Login.masterData.sampleStorageLocation || []}\n//                                         selectedMaster={[(this.props.Login.masterData &&\n//                                             this.props.Login.masterData.selectedSampleStorageLocation) || []]}\n//                                         primaryKeyField=\"nsamplestoragelocationcode\"\n//                                         getMasterDetail={(selectedItem) =>\n//                                             this.props.getSelectedSampleStorageLocation(\n//                                                 selectedItem,\n//                                                 this.props.Login.userInfo, this.props.Login.masterData\n//                                             )\n//                                         }\n//                                         // inputParam={{\n//                                         //   userInfo: this.props.Login.userInfo,\n//                                         //   masterData: this.props.Login.masterData\n//                                         // }}\n//                                         mainField={\"ssamplestoragelocationname\"}\n//                                         selectedListName=\"selectedSampleStorageLocation\"\n//                                         objectName=\"LocationMaster\"\n//                                         listName=\"IDS_SAMPLESTORAGELOCATION\"\n//                                         // filterColumnData={this.props.filterTransactionList}\n//                                         // searchListName=\"searchedData\"\n//                                         searchRef={this.searchRef}\n//                                         // filterParam={filterParam}\n//                                         // showFilter={this.props.Login.showFilter}\n//                                         // openFilter={this.openFilter}\n//                                         // closeFilter={this.closeFilter}\n//                                         // onFilterSubmit={this.onFilterSubmit}              \n//                                         // needFilter={true}              \n//                                         hidePaging={false}\n//                                         pageSize={[10, 20, 30]}\n//                                         handlePageChange={this.handlePageChange}\n//                                         skip={0}\n//                                         take={10}\n//                                         commonActions={\n//                                             <ProductList className=\"d-flex product-category float-right\">\n//                                                 <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\n//                                                     data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n//                                                     data-for=\"tooltip_list_wrap\"\n//                                                     hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\n//                                                     onClick={() => this.openModal()}\n//                                                 >\n//                                                     <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\n//                                                 </Button>\n//                                                 <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\n//                                                     onClick={() => this.reloadData()}\n//                                                     data-for=\"tooltip_list_wrap\"\n//                                                     data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\n//                                                     <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\n//                                                 </Button>\n//                                             </ProductList>\n//                                         }\n//                                     />\n//                                 </div>\n//                                 <div>                                    \n//                                     <TransactionListMaster\n//                                         // paneHeight={this.state.parentHeight}\n//                                         needMultiSelect={false}\n//                                         masterList={this.props.Login.masterData &&\n//                                             this.props.Login.masterData.sampleStorageVersion || []}\n//                                         selectedMaster={[(this.props.Login.masterData &&\n//                                             this.props.Login.masterData.selectedSampleStorageVersion) || []]}\n//                                         primaryKeyField=\"nsamplestorageversioncode\"                                     \n//                                         getMasterDetail={(selectedItem) =>\n//                                             this.props.getSelectedSampleStorageVersion(\n//                                                 selectedItem, this.props.Login.userInfo,\n//                                                 this.props.Login.masterData\n//                                             )\n//                                         }\n//                                         // inputParam={{\n//                                         //   userInfo: this.props.Login.userInfo,\n//                                         //   masterData: this.props.Login.masterData\n//                                         // }}\n//                                         mainField={\"nversionno\"}\n//                                         mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\n//                                         selectedListName=\"selectedSampleStorageVersion\"\n//                                         objectName=\"Version\"\n//                                         listName=\"IDS_SAMPLESTORAGEVersion\"\n//                                         // filterColumnData={this.props.filterTransactionList}\n//                                         // searchListName=\"searchedData\"\n//                                         searchRef={this.searchRef}\n//                                         // filterParam={filterParam}\n//                                         // showFilter={this.props.Login.showFilter}\n//                                         // openFilter={this.openFilter}\n//                                         // closeFilter={this.closeFilter}\n//                                         // onFilterSubmit={this.onFilterSubmit}              \n//                                         // needFilter={true}  \n//                                         // hideSearch={true}            \n//                                         hidePaging={false}\n//                                         pageSize={[10, 20, 30]}\n//                                         handlePageChange={this.handlePageChange}\n//                                         skip={0}\n//                                         take={10}\n//                                         splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n//                                         actionIcons={\n//                                             [\n//                                                 {\n//                                                     title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\n//                                                     controlname: \"faPencilAlt\",\n//                                                     objectName: \"mastertoedit\",\n//                                                     hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n//                                                     onClick: this.editSampleStorageLocation,\n//                                                     inputData: {\n//                                                         primaryKeyName: \"nreportcode\",\n//                                                         operation: \"update\",\n//                                                         // masterData: this.props.Login.masterData,\n//                                                         // userInfo: this.props.Login.userInfo,\n//                                                         screenName: \"IDS_REPORTMASTER\",\n//                                                         // ncontrolcode: editMasterId,\n//                                                         // filterReportType:this.props.Login.masterData.SelectedFilterReportType\n//                                                     },\n//                                                 },\n//                                                 {\n//                                                     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n//                                                     controlname: \"faTrashAlt\",\n//                                                     objectName: \"mastertodelete\",\n//                                                     hidden: false, // this.state.userRoleControlRights.indexOf(deleteMasterId) === -1,\n//                                                     onClick: () => ConfirmMessage.confirm(\n//                                                         \"deleteMessage\",\n//                                                         this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\n//                                                         this.props.intl.formatMessage({ id: \"IDS_DELETECONFIRMMSG\" }),\n//                                                         this.props.intl.formatMessage({ id: \"IDS_OK\" }),\n//                                                         this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\n//                                                         () => this.onDeleteSampleStorageLocation()\n//                                                     ),\n//                                                     inputData: {\n//                                                         // primaryKeyName: \"nreportcode\",\n//                                                         // operation: \"delete\",\n//                                                         // masterData: this.props.Login.masterData,\n//                                                         // userInfo: this.props.Login.userInfo,\n//                                                         // screenName: \"IDS_REPORTMASTER\",\n//                                                         // listName: \"reportmaster\",\n//                                                         // ncontrolCode: deleteMasterId, methodUrl: \"ReportMaster\"\n//                                                     }\n//                                                 },\n//                                             ]\n//                                         }\n//                                     />\n//                                 </div>\n//                             </Splitter>\n//                         </Col>\n//                         <Col md=\"6\">\n//                             <ProductList className=\"panel-main-content\">\n//                                 {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\n//                                     <Card className=\"border-0\">\n//                                         <Card.Header>\n//                                             <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\n//                                             <ContentPanel className=\"d-flex product-category\">\n//                                                 <Col md='6'>\n//                                                     <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\n//                                                         <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\n//                                                         <ProductList className=\"d-inline dropdown badget_menu\">\n//                                                             <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\n//                                                                 // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\n//                                                                 data-for=\"tooltip_list_wrap\"\n//                                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\n//                                                                 onClick={(e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageLocation, this.props.Login.userInfo, this.props.Login.masterData)}\n//                                                             >\n//                                                                 <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\" />\n//                                                             </Nav.Link>\n//                                                             <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\n//                                                                 // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\n//                                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\n//                                                                 onClick={() => this.confirmDelete(deleteId)}\n//                                                             >\n//                                                                 <FontAwesomeIcon icon={faTrashAlt} />\n//                                                             </Nav.Link>\n//                                                         </ProductList>\n//                                                     </div>\n//                                                 </Col>\n//                                             </ContentPanel>\n//                                         </Card.Header>\n//                                         <Card.Body>\n//                                             <TreeViewEditable\n//                                                 id=\"samplestoragelocation\"\n//                                                 name=\"samplestoragelocation\"\n//                                                 // label=\"Sample Storage Location\"\n//                                                 data={this.state.treeDataView}\n//                                                 expandIcons={true}\n//                                                 item={this.itemRenderView}\n//                                                 onExpandChange={this.onExpandChangeView}\n//                                                 onItemClick={this.onItemClickView}\n//                                             />\n//                                         </Card.Body>\n//                                     </Card>\n//                                     : \"\"}\n//                             </ProductList>\n//                         </Col>\n//                     </Row> */}\n//                 {/* </ListWrapper> */}\n//                 {this.props.Login.openModal &&\n//                     <SlideOutModal show={this.props.Login.openModal}\n//                         closeModal={this.closeModal}\n//                         operation={this.props.Login.operation}\n//                         inputParam={this.props.Login.inputParam}\n//                         screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATION\" })}\n//                         onSaveClick={this.onSaveClick}\n//                         selectedRecord={this.state.selectedRecord || {}}\n//                         addComponent={\n//                             this.props.Login.loadTreeProperties ? (\n//                                 <AddTreeProperties\n//                                     onInputChange={(e) => this.onInputChange(e)}\n//                                     selectedRecord={this.state.selectedRecord || {}}\n//                                 />\n//                             ) : this.state.treeData ? (\n//                                 <AddTreeview\n//                                     treeData={this.state.treeData}\n//                                     onInputChange={(e) => this.onInputChange(e)}\n//                                     selectedRecord={this.state.selectedRecord || {}}\n//                                     itemRender={this.itemRender}\n//                                     onExpandChange={this.onExpandChange}\n//                                     onItemClick={this.onItemClick}\n//                                 />\n//                             ) : (\n//                                 <></>\n//                             )\n//                         }\n//                     />\n//                 }\n//             </>\n//         )\n//     }\n// }\n// const mapStateToProps = (state) => {\n//     return {\n//         Login: state.Login\n//     }\n// }\n// export default connect(mapStateToProps, {\n//     callService, crudMaster, updateStore, validateEsignCredential,\n//     getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation\n// })(injectIntl(SampleStorageLocation));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/SampleStorageLocation.jsx"],"names":[],"mappingssourcesContent":["// import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n// import { injectIntl, FormattedMessage } from 'react-intl';\r\n// import { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button } from 'react-bootstrap';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n// import PerfectScrollbar from 'react-perfect-scrollbar';\r\n// import { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus,faThumbsUp } from '@fortawesome/free-solid-svg-icons';\r\n// import { toast } from 'react-toastify';\r\n// import ListMaster from '../../components/list-master/list-master.component';\r\n// import { constructOptionList, getControlMap, showEsign } from '../../components/CommonScript';\r\n// import { ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\n// import SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\n// import {\r\n//     callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation,\r\n//     openPropertyModal, editSampleStorageLocation\r\n// } from '../../actions';\r\n// import { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\n// import { ListWrapper } from '../../components/client-group.styles';\r\n// import { ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\n// import { uuid } from \"uuidv4\";\r\n// import TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\n// import TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\n// import { mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\n// import ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\n// import AddTreeview from './AddTreeview';\r\n// import AddTreeProperties from './AddTreeProperties';\r\n// import { Splitter } from '@progress/kendo-react-layout';\r\n// import TransactionListMaster from '../../components/TransactionListMaster';\r\n// import BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\n// import SplitterLayout from 'react-splitter-layout';\r\n\r\n// class SampleStorageLocation extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props);\r\n\r\n//         this.state = {\r\n//             toggleAction: false,\r\n//             treeDataView: undefined,\r\n//             toggleActionView: false,\r\n//             treeData: [\r\n//                 {\r\n//                     text: \"root\",\r\n//                     expanded: true,\r\n//                     editable: true,\r\n//                     root: true,\r\n//                     id: uuid(),\r\n//                 }],\r\n//             panes: [{\r\n//                 size: '50%',\r\n//                 scrollable: false\r\n//             }],\r\n//             selectedRecord: {},\r\n//             userRoleControlRights: [],\r\n//             controlMap: new Map(),\r\n//             skip: 0,\r\n//             detailSkip: 0,\r\n//             detailTake: 10,\r\n//             take: this.props.Login.settings ?\r\n//                 this.props.Login.settings[3] : 25,\r\n//             splitChangeWidthPercentage: 22,\r\n//         };\r\n//         this.searchRef = React.createRef();\r\n//         this.confirmMessage = new ConfirmMessage();\r\n//     }\r\n//     onChange = (event) => {\r\n\r\n//         this.setState({ panes: event.newState })\r\n\r\n//     };\r\n//     componentDidUpdate(previousProps) {\r\n\r\n//         let { filterData } = this.state;\r\n//         if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n//             const userRoleControlRights = [];\r\n//             if (this.props.Login.userRoleControlRights) {\r\n//                 this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n//                     userRoleControlRights.push(item.ncontrolcode))\r\n//             }\r\n//             const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n//             this.setState({ controlMap, userRoleControlRights });\r\n//         }\r\n\r\n//         if (this.props.Login.treeData !== previousProps.Login.treeData) {\r\n//             this.setState({\r\n//                 treeData: this.props.Login.treeData\r\n//             });\r\n//         }\r\n//         if (this.props.Login.masterData.selectedSampleStorageVersion !== previousProps.Login.masterData.selectedSampleStorageVersion) {\r\n//             this.setState({\r\n//                 treeDataView:\r\n//                     JSON.parse(this.props.Login.masterData.selectedSampleStorageVersion[\"jsondata\"].value).data\r\n//             });\r\n//         }\r\n//         if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n//             this.setState({\r\n//                 selectedRecord: this.props.Login.selectedRecord\r\n//             });\r\n//         }\r\n//     }\r\n//     addChildNode = (e, clickedItem) => {\r\n//         let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n//             if (item.id === clickedItem.id) {\r\n//                 item.items = item.items || [];\r\n//                 item.items.push({\r\n//                     id: uuid(),\r\n//                     text: uuid(),\r\n//                     expanded: true,\r\n//                     editable: false,\r\n//                     locationlastnode: false,\r\n//                     containerfirstnode: false,\r\n//                     containerlastnode: false\r\n//                 });\r\n//             }\r\n//             return item;\r\n//         });\r\n//         this.setState({ treeData: newData });\r\n//     };\r\n\r\n//     equalNode = (e, clickedItem) => {\r\n//         let parentItem = {};\r\n//         let parentFound = false;\r\n//         let newData = [...this.state.treeData];\r\n//         mapTree(this.state.treeData, \"items\", (item) => {\r\n//             if (item.items) {\r\n//                 if (parentFound) {\r\n//                     parentItem = item;\r\n//                     parentFound = false;\r\n//                 }\r\n//             }\r\n\r\n//             if (item.id === clickedItem.id) {\r\n//                 parentFound = true;\r\n//             }\r\n\r\n//             return item;\r\n//         });\r\n//         if (parentItem.text === undefined) {\r\n//             newData.push({\r\n//                 id: uuid(),\r\n//                 text: uuid(),\r\n//                 expanded: true,\r\n//                 editable: false,\r\n//                 locationlastnode: false,\r\n//                 containerfirstnode: false,\r\n//                 containerlastnode: false\r\n//             });\r\n//             this.setState({ treeData: newData });\r\n//         } else {\r\n//             newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n//                 if (item.id === parentItem.id) {\r\n//                     item.items.push({\r\n//                         id: uuid(),\r\n//                         text: uuid(),\r\n//                         expanded: true,\r\n//                         editable: false,\r\n//                         locationlastnode: false,\r\n//                         containerfirstnode: false,\r\n//                         containerlastnode: false\r\n//                     });\r\n//                 }\r\n//                 return item;\r\n//             });\r\n//             this.setState({ treeData: newData });\r\n//         }\r\n//     };\r\n//     deleteNode = (clickedItem) => {\r\n//         const newData = removeItems(this.state.treeData, \"items\", (item) => {\r\n//             return item.id === clickedItem.id;\r\n//         });\r\n//         this.setState({ treeData: newData });\r\n//     };\r\n//     editRecord = (e, clickedItem) => {\r\n//         this.setState({ toggleAction: !this.state.toggleAction });\r\n//     };\r\n//     openModal = () => {\r\n//         const updateInfo = {\r\n//             typeName: DEFAULT_RETURN,\r\n//             data: {\r\n//                 openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n//                 treeData: [\r\n//                     {\r\n//                         text: \"root\",\r\n//                         expanded: true,\r\n//                         editable: true,\r\n//                         root: true,\r\n//                         id: uuid(),\r\n//                     },\r\n//                 ], operation: \"create\"\r\n//             }\r\n//         }\r\n//         this.props.updateStore(updateInfo);\r\n//     }\r\n//     closeModal = () => {\r\n//         const updateInfo = {\r\n//             typeName: DEFAULT_RETURN,\r\n//             data: {\r\n//                 openModal: false, selectedRecord: {}\r\n//             }\r\n//         }\r\n//         this.props.updateStore(updateInfo);\r\n//     }\r\n//     onInputChange = (event) => {\r\n//         const selectedRecord = this.state.selectedRecord || {};\r\n//         if (event.target.type === \"checkbox\") {\r\n//             selectedRecord[event.target.name] = event.target.checked;\r\n//         } else {\r\n//             selectedRecord[event.target.name] = event.target.value;\r\n//         }\r\n\r\n//         this.setState({ selectedRecord });\r\n//     };\r\n\r\n//     itemRender = (props) => {\r\n//         if (this.state.toggleAction) {\r\n//             return (\r\n//                 <>\r\n//                     {props.item.editable ? (\r\n//                         <Form.Group className=\"k-editable-text-wrap\">\r\n//                             <Form.Control\r\n//                                 id={\"nodename\"}\r\n//                                 name={\"nodename\"}\r\n//                                 type=\"text\"\r\n//                                 onKeyDown={(e) => e.stopPropagation()}\r\n//                                 value={props.item.text}\r\n//                                 autoFocus\r\n//                                 autoComplete=\"off\"\r\n//                                 onChange={(e) => this.handleChange(e, props.item)}\r\n//                                 onBlur={(e) => this.handleBlur(e, props.item)}\r\n//                             />\r\n//                         </Form.Group>\r\n//                     ) : (\r\n//                         <span>{props.item.text}</span>\r\n//                     )}\r\n//                 </>\r\n//             );\r\n//         } else {\r\n//             return (\r\n//                 <>\r\n//                     {props.item ? (\r\n//                         <ul className=\"list-inline mb-0\">\r\n//                             <li className=\"list-inline-item mr-3\">{props.item.text}</li>\r\n//                             {props.item.editable ? (\r\n//                                 <>\r\n//                                     <li className=\"list-inline-item\">\r\n//                                         <span\r\n//                                             className=\"action-icon tree-level1\"\r\n//                                             onClick={(e) => {\r\n//                                                 e.stopPropagation();\r\n//                                                 this.equalNode(e, props.item);\r\n//                                             }}\r\n//                                         ></span>\r\n//                                     </li>\r\n//                                     <li className=\"list-inline-item\">\r\n//                                         <span\r\n//                                             className=\"action-icon tree-level2\"\r\n//                                             onClick={(e) => {\r\n//                                                 e.stopPropagation();\r\n//                                                 this.addChildNode(e, props.item);\r\n//                                             }}\r\n//                                         ></span>\r\n//                                     </li>\r\n//                                     <li className=\"list-inline-item\">\r\n//                                         <span\r\n//                                             className=\"k-icon k-i-edit k-i-pencil\"\r\n//                                             onClick={(e) => {\r\n//                                                 e.stopPropagation();\r\n//                                                 this.editRecord(e, props.item);\r\n//                                             }}\r\n//                                         ></span>\r\n//                                     </li>\r\n\r\n//                                     {!props.item.isRoot ? (\r\n//                                         <li className=\"list-inline-item\">\r\n//                                             <span\r\n//                                                 className=\"k-icon k-i-delete\"\r\n//                                                 onClick={(e) => {\r\n//                                                     e.stopPropagation();\r\n//                                                     this.deleteNode(props.item);\r\n//                                                 }}\r\n//                                             ></span>\r\n//                                         </li>\r\n//                                     ) : null}\r\n//                                 </>\r\n//                             ) : null}\r\n//                         </ul>\r\n//                     ) : (\r\n//                         \"\"\r\n//                     )}\r\n//                 </>\r\n//             );\r\n//         }\r\n//     };\r\n\r\n//     onItemClick = (event) => {\r\n//         let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n//             if (item.editable === true) {\r\n//                 item.editable = false;\r\n//             } else if (item.id === event.item.id) {\r\n//                 item.editable = true;\r\n//             }\r\n//             return item;\r\n//         });\r\n//         this.setState({ treeData: newData });\r\n//     };\r\n\r\n//     onExpandChange = (event) => {\r\n//         event.item.expanded = !event.item.expanded;\r\n//         this.forceUpdate();\r\n//     };\r\n//     itemRenderView = (clickedItem) => {\r\n//         if (!this.state.toggleActionView) {\r\n//             return (\r\n//                 <>\r\n//                     {clickedItem.item ? (\r\n//                         <ul className=\"list-inline mb-0\">\r\n//                             <li className=\"list-inline-item mr-3\">{clickedItem.item.text}</li>\r\n//                             {clickedItem.item.editable ? (\r\n//                                 <>\r\n//                                     <li className=\"list-inline-item\">\r\n//                                         <span\r\n//                                             className=\"action-icon tree-toggle\"\r\n//                                             onClick={(e) => this.setProperties(e, clickedItem)}\r\n//                                         ></span>\r\n//                                     </li>\r\n//                                 </>\r\n//                             ) : null}\r\n//                         </ul>\r\n//                     ) : (\r\n//                         \"\"\r\n//                     )}\r\n//                 </>\r\n//             );\r\n//         }\r\n//     };\r\n//     onItemClickView = (event) => {\r\n//         let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n//             if (item.editable === true) {\r\n//                 item.editable = false;\r\n//             } else if (item.id === event.item.id) {\r\n//                 item.editable = true;\r\n//             }\r\n//             return item;\r\n//         });\r\n//         this.setState({ treeDataView: newData });\r\n//     };\r\n\r\n//     onExpandChangeView = (event) => {\r\n//         event.item.expanded = !event.item.expanded;\r\n//         this.forceUpdate();\r\n//     };\r\n//     setProperties = (event, clickedItem) => {\r\n//         this.props.openPropertyModal(clickedItem);\r\n//     };\r\n\r\n//     handleChange = (e, clickedItem) => {\r\n//         let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n//             if (item.id === clickedItem.id) {\r\n//                 item.text = e.target.value;\r\n//             }\r\n//             return item;\r\n//         });\r\n//         this.setState({ treeData: newData });\r\n//     };\r\n\r\n//     handleBlur = (e, item) => {\r\n//         item.editable = false;\r\n//         this.setState({ toggleAction: !this.state.toggleAction });\r\n//     };\r\n\r\n//     onSaveClick = () => {\r\n//         if (this.props.Login.loadTreeProperties === true) {\r\n//             this.onSaveProperties();\r\n//         } else {\r\n//             this.onSaveSampleStorageLocation();\r\n//         }\r\n//     };\r\n//     onSaveProperties = (saveType, formRef) => {\r\n\r\n//         const { selectedRecord } = this.state;\r\n\r\n//         if (this.props.Login.clickedItem && this.props.Login.clickedItem !== undefined) {\r\n//             let inputData = [];\r\n//             let jsondata = {}\r\n//             let postParam = undefined;\r\n\r\n//             let newData = mapTree(this.state.treeDataView, \"items\", (item) => {\r\n//                 if (item.id === this.props.Login.clickedItem.item.id) {\r\n//                     item.locationlastnode = selectedRecord[\"locationlastnode\"] !== undefined ? selectedRecord[\"locationlastnode\"] : false;\r\n//                     item.containerfirstnode = selectedRecord[\"containerfirstnode\"] !== undefined ? selectedRecord[\"containerfirstnode\"] : false;\r\n//                     item.containerlastnode = selectedRecord[\"containerlastnode\"] !== undefined ? selectedRecord[\"containerlastnode\"] : false;\r\n//                 }\r\n//                 return item;\r\n//             });\r\n\r\n//             postParam = { inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n//             jsondata[\"data\"] = newData;\r\n//             inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n//             inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n//             inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n//             inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"ssamplestoragelocationname\"];\r\n//             inputData[\"sampleStorageLocation\"][\"jsondata\"] = jsondata;\r\n\r\n//             const inputParam = {\r\n//                 classUrl: \"samplestoragelocation\",\r\n//                 methodUrl: \"SampleStorageLocation\",\r\n//                 displayName: this.props.Login.inputParam.displayName,\r\n//                 inputData: inputData,\r\n//                 operation: \"update\", saveType, formRef, postParam\r\n//             }\r\n//             this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n//         }\r\n//     }\r\n//     onSaveSampleStorageLocation = (saveType, formRef) => {\r\n\r\n//         const { selectedRecord } = this.state;\r\n\r\n//         if (selectedRecord[\"ssamplestoragelocationname\"] && selectedRecord[\"ssamplestoragelocationname\"].length > 0) {\r\n\r\n//             let inputData = [];\r\n//             let jsondata = {}\r\n//             let postParam = undefined;\r\n\r\n//             let newData = mapTree(this.state.treeData, \"items\", (item) => {\r\n//                 if (item.editable === true) {\r\n//                     item.editable = false;\r\n//                 }\r\n//                 return item;\r\n//             });\r\n\r\n//             // postParam = { inputListName: \"SampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\" };\r\n\r\n//             jsondata[\"data\"] = newData;\r\n//             inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n//             inputData[\"sampleStorageLocation\"] = { \"nstatus\": 1 };\r\n//             inputData[\"sampleStorageVersion\"] = { \"nstatus\": 1 };\r\n\r\n\r\n//             inputData[\"sampleStorageLocation\"][\"ssamplestoragelocationname\"] = selectedRecord[\"ssamplestoragelocationname\"];\r\n//             inputData[\"sampleStorageVersion\"][\"jsondata\"] = jsondata;\r\n\r\n//             if (this.props.Login.operation === \"create\") {\r\n//                 const inputParam = {\r\n//                     classUrl: \"samplestoragelocation\",\r\n//                     methodUrl: \"SampleStorageLocation\",\r\n//                     displayName: this.props.Login.inputParam.displayName,\r\n//                     inputData: inputData,\r\n//                     operation: \"create\", saveType, formRef\r\n//                 }\r\n//                 this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n//             } else {\r\n//                 inputData[\"sampleStorageLocation\"][\"nsamplestoragelocationcode\"] = this.props.Login.masterData.selectedSampleStorageLocation[\"nsamplestoragelocationcode\"]\r\n//                 const inputParam = {\r\n//                     classUrl: \"samplestoragelocation\",\r\n//                     methodUrl: \"SampleStorageLocation\",\r\n//                     displayName: this.props.Login.inputParam.displayName,\r\n//                     inputData: inputData,\r\n//                     operation: \"update\", saveType, formRef\r\n//                 }\r\n//                 this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n//             }\r\n\r\n//         }\r\n//         else {\r\n//             toast.info(this.props.intl.formatMessage({ id: \"IDS_INVALIDSAMPLESTORAGELOCATIONNAME\" }));\r\n//         }\r\n//     }\r\n\r\n//     deleteSampleStorageLocation = () => {\r\n//         let inputData = [];\r\n//         inputData[\"sampleStorageLocation\"] = this.props.Login.masterData.selectedSampleStorageLocation;\r\n//         inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n\r\n\r\n//         const inputParam = {\r\n//             methodUrl: \"SampleStorageLocation\",\r\n//             classUrl: \"samplestoragelocation\",\r\n//             inputData: inputData,\r\n//             operation: \"delete\", searchRef: this.searchRef\r\n//         }\r\n\r\n//         this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n\r\n//     }\r\n//     confirmDelete = (ncontrolCode) => {\r\n//         this.confirmMessage.confirm(\"deleteMessage\",\r\n//             this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n//             this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n//             this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n//             this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n//             () => this.deleteSampleStorageLocation(\"delete\", ncontrolCode));\r\n//     };\r\n\r\n//     paneSizeChange = (d) => {\r\n//         this.setState({\r\n//             splitChangeWidthPercentage: d\r\n//         })\r\n//     }\r\n//     handlePageChange = e => {\r\n//         this.setState({\r\n//             skip: e.skip,\r\n//             take: e.take\r\n//         });\r\n//     };\r\n//     handleDetailPageChange = e => {\r\n//         this.setState({\r\n//             skip: e.skip,\r\n//             take: e.take\r\n//         });\r\n//     };\r\n//     componentDidMount() {\r\n//         if (this.parentHeight) {\r\n//             const height = this.parentHeight.clientHeight;\r\n//             this.setState({\r\n//                 firstPane: height - 80,\r\n//                 parentHeight: height - 50\r\n//             });\r\n//         }\r\n//     }\r\n//     render() {\r\n\r\n//         const addId = this.state.controlMap.has(\"Add SampleStorageLocation\") && this.state.controlMap.get(\"Add SampleStorageLocation\").ncontrolcode;\r\n//         const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n//         const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n//         const breadCrumbData = [];\r\n\r\n//         const confirmMessage = new ConfirmMessage();\r\n//         return (\r\n//             <>\r\n//                 <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n//                     {breadCrumbData.length > 0 ?\r\n//                         <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n//                         : \"\"}\r\n//                     <Row noGutters={true}>\r\n//                         <Col md={12} className=\"parent-port-height\">\r\n//                             {/* <Col md={12} className='parent-port-height-nobreadcrumb sticky_head_parent' ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n//                             <ListWrapper> */}\r\n//                             <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1} onSecondaryPaneSizeChange={this.paneSizeChange} secondaryInitialSize={25} primaryMinSize={40} secondaryMinSize={20}>\r\n//                                 {/* First column */}\r\n//                                 <TransactionListMaster\r\n//                                     paneHeight={this.state.parentHeight}\r\n//                                     needMultiSelect={false}\r\n//                                     masterList={this.props.Login.masterData.sampleStorageLocation || []}\r\n//                                     selectedMaster={[this.props.Login.masterData.selectedSampleStorageLocation]}\r\n//                                     primaryKeyField=\"nsamplestoragelocationcode\"\r\n//                                     getMasterDetail={(selectedItem) =>\r\n//                                         this.props.getSelectedSampleStorageLocation(\r\n//                                             selectedItem,\r\n//                                             this.props.Login.userInfo, this.props.Login.masterData\r\n//                                         )}\r\n//                                     inputParam={{\r\n//                                         userInfo: this.props.Login.userInfo,\r\n//                                         masterData: this.props.Login.masterData\r\n//                                     }}\r\n//                                     mainField={\"ssamplestoragelocationname\"}\r\n//                                     selectedListName=\"selectedSampleStorageLocation\"\r\n//                                     objectName=\"LocationMaster\"\r\n//                                     listName=\"IDS_SAMPLESTORAGELOCATION\"\r\n//                                     // filterColumnData={this.props.filterTransactionList}\r\n//                                     searchListName=\"searchedData\"\r\n//                                     searchRef={this.searchRef}\r\n//                                     // filterParam={filterParam}\r\n\r\n//                                     // showFilter={this.props.Login.showFilter}\r\n//                                     // openFilter={this.openFilter}\r\n//                                     // closeFilter={this.closeFilter}\r\n//                                     // onFilterSubmit={this.onFilterSubmit}                                       \r\n//                                     needFilter={false}\r\n//                                     //skip={this.state.masterSkip}\r\n//                                     //take={this.state.masterTake}\r\n//                                     hidePaging={false}\r\n//                                     handlePageChange={this.handlePageChange}\r\n//                                     skip={this.state.skip}\r\n//                                     take={this.state.take}\r\n//                                     commonActions={\r\n//                                         <ProductList className=\"d-flex product-category float-right\">\r\n//                                             <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n//                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n//                                                 data-for=\"tooltip-common-wrap\"\r\n//                                                 hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n//                                                 onClick={() => this.openModal()}>\r\n//                                                 <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n//                                             </Button>\r\n//                                             <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n//                                                 onClick={() => this.reloadData()}\r\n//                                                 data-for=\"tooltip-common-wrap\"\r\n//                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n//                                                 <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n//                                             </Button>\r\n//                                         </ProductList>\r\n//                                     }\r\n\r\n//                                 />\r\n\r\n//                                 {/* End of first column */}\r\n//                                 <SplitterLayout vertical borderColor=\"#999\" percentage={true} primaryIndex={1} //secondaryInitialSize={400}\r\n//                                     customClassName=\"fixed_list_height\">\r\n//                                     <PerfectScrollbar>\r\n//                                         {/* Start of second column */}\r\n//                                         <div className=\"card_group\">\r\n//                                             <Row>\r\n//                                                 <Col md={3} style={{ paddingRight: '0' }}>\r\n//                                                     {/* Start of version column */}\r\n//                                                     <TransactionListMaster\r\n//                                                         masterList={this.props.Login.masterData.sampleStorageVersion || []}\r\n//                                                         needMultiSelect={false}\r\n//                                                         selectedMaster={[this.props.Login.masterData.selectedSampleStorageVersion]}\r\n//                                                         primaryKeyField=\"nsamplestorageversioncode\"\r\n//                                                         getMasterDetail={(selectedItem) =>\r\n//                                                             this.props.getSelectedSampleStorageVersion(\r\n//                                                                 selectedItem, this.props.Login.userInfo,\r\n//                                                                 this.props.Login.masterData\r\n//                                                             )}\r\n//                                                         inputParam={{\r\n//                                                             userInfo: this.props.Login.userInfo,\r\n//                                                             masterData: this.props.Login.masterData\r\n//                                                         }}\r\n//                                                         mainField={\"nversionno\"}\r\n//                                                         mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n//                                                         selectedListName=\"selectedSampleStorageVersion\"\r\n//                                                         objectName=\"Version\"\r\n//                                                         listName=\"IDS_SAMPLESTORAGEVersion\"\r\n//                                                         hideSearch={true}\r\n//                                                         needValidation={false}\r\n//                                                         needFilter={false}\r\n//                                                         moreField={[]}\r\n//                                                         skip={this.state.detailSkip}\r\n//                                                         take={this.state.detailTake}\r\n//                                                         hidePaging={true}\r\n//                                                         handlePageChange={this.handleDetailPageChange}\r\n//                                                         splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n//                                                         actionIcons={\r\n//                                                             [\r\n//                                                                 {\r\n//                                                                     title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n//                                                                     controlname: \"faPencilAlt\",\r\n//                                                                     objectName: \"detailtoedit\",\r\n//                                                                     hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n//                                                                     onClick: (e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData),\r\n//                                                                 },\r\n//                                                                 {\r\n//                                                                     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n//                                                                     controlname: \"faTrashAlt\",\r\n//                                                                     objectName: \"mastertodelete\",\r\n//                                                                     hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\r\n//                                                                     onClick: () => this.confirmDelete(deleteId)\r\n//                                                                 }\r\n//                                                             ]\r\n//                                                         }\r\n//                                                     />\r\n//                                                     {/* End of version column */}\r\n//                                                 </Col>\r\n//                                                 <Col md={9}>\r\n//                                                     {/* Start of detailed content */}\r\n//                                                     <ProductList className=\"panel-main-content\">\r\n//                                                         {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\r\n//                                                             <Card className=\"border-0\">\r\n//                                                                 <Card.Header>\r\n//                                                                     <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\r\n//                                                                     <Card.Subtitle>\r\n//                                                                         <h2 className=\"product-title-sub flex-grow-1\">\r\n//                                                                             <Nav.Link className=\"action-icons-wrap mr-2\">\r\n//                                                                                 {this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === 8 ?\r\n\r\n//                                                                                     <span className={`btn btn-outlined  outline-secondary btn-sm ml-3`}>\r\n//                                                                                         <FormattedMessage id={\"IDS_DRAFT\"} defaultMessage=\"Draft\" />\r\n//                                                                                     </span>\r\n//                                                                                     :\r\n//                                                                                     this.props.Login.masterData.selectedSampleStorageVersion.napprovalstatus === 7 ?\r\n\r\n//                                                                                         <span className={`btn btn-outlined outline-secondary btn-sm ml-3`}>\r\n//                                                                                             <FormattedMessage id={\"IDS_RETIRED\"} defaultMessage=\"Retired\" />\r\n//                                                                                         </span>\r\n//                                                                                         :\r\n//                                                                                         <span className={`btn btn-outlined outline-success btn-sm ml-3`}>\r\n//                                                                                             <FormattedMessage id={\"IDS_APPROVED\"} defaultMessage=\"Approved\" />\r\n//                                                                                         </span>\r\n//                                                                                 }\r\n//                                                                             </Nav.Link>\r\n//                                                                         </h2>\r\n//                                                                     </Card.Subtitle>\r\n//                                                                     <ContentPanel className=\"d-flex product-category\">\r\n//                                                                         <Col md='6'>\r\n//                                                                             <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n//                                                                                 <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n//                                                                                 <ProductList className=\"d-inline dropdown badget_menu\">\r\n//                                                                                     <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n//                                                                                         // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n//                                                                                         data-for=\"tooltip_list_wrap\"\r\n//                                                                                         data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n//                                                                                         onClick={(e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageVersion, this.props.Login.userInfo, this.props.Login.masterData)}\r\n//                                                                                     >\r\n//                                                                                         <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\" />\r\n\r\n//                                                                                     </Nav.Link>\r\n//                                                                                     <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n//                                                                                         // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n//                                                                                         data-for=\"tooltip_list_wrap\"\r\n//                                                                                         data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n//                                                                                         onClick={() => this.confirmDelete(deleteId)}\r\n//                                                                                     >\r\n//                                                                                         <FontAwesomeIcon icon={faTrashAlt} />\r\n//                                                                                     </Nav.Link>\r\n//                                                                                     <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n//                                                                                         // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n//                                                                                         data-for=\"tooltip_list_wrap\"\r\n//                                                                                         data-tip={this.props.intl.formatMessage({ id: \"IDS_APPROVE\" })}\r\n//                                                                                         // onClick={() => this.confirmDelete(deleteId)}\r\n//                                                                                     >\r\n//                                                                                         <FontAwesomeIcon icon={faThumbsUp} />\r\n//                                                                                     </Nav.Link>\r\n//                                                                                 </ProductList>\r\n//                                                                             </div>\r\n//                                                                         </Col>\r\n//                                                                     </ContentPanel>\r\n//                                                                 </Card.Header>\r\n//                                                                 <Card.Body>\r\n//                                                                     <TreeViewEditable\r\n//                                                                         id=\"samplestoragelocation\"\r\n//                                                                         name=\"samplestoragelocation\"\r\n//                                                                         // label=\"Sample Storage Location\"\r\n//                                                                         data={this.state.treeDataView}\r\n//                                                                         expandIcons={true}\r\n//                                                                         item={this.itemRenderView}\r\n//                                                                         onExpandChange={this.onExpandChangeView}\r\n//                                                                         onItemClick={this.onItemClickView}\r\n//                                                                     />\r\n//                                                                 </Card.Body>\r\n//                                                             </Card>\r\n//                                                             : \"\"}\r\n\r\n//                                                     </ProductList>\r\n//                                                     {/* End of detailed content */}\r\n//                                                 </Col>\r\n//                                             </Row>\r\n\r\n//                                         </div>\r\n//                                         {/* End of second column */}\r\n//                                     </PerfectScrollbar>\r\n\r\n//                                 </SplitterLayout>\r\n\r\n//                             </SplitterLayout>\r\n//                         </Col>\r\n//                     </Row>\r\n//                 </ListWrapper>\r\n//                 {/* <ListWrapper className=\"client-listing-wrap mtop-4 \"> */}\r\n//                 {/* <Row noGutters={true}>\r\n//                         <Col md=\"6\" className=\"parent-port-height\">\r\n//                             <Splitter panes={this.state.panes} onChange={this.onChange}>\r\n//                                 <div>                                    \r\n//                                     <TransactionListMaster\r\n//                                         // paneHeight={this.state.parentHeight}\r\n//                                         needMultiSelect={false}\r\n//                                         masterList={this.props.Login.masterData &&\r\n//                                             this.props.Login.masterData.sampleStorageLocation || []}\r\n//                                         selectedMaster={[(this.props.Login.masterData &&\r\n//                                             this.props.Login.masterData.selectedSampleStorageLocation) || []]}\r\n//                                         primaryKeyField=\"nsamplestoragelocationcode\"\r\n//                                         getMasterDetail={(selectedItem) =>\r\n//                                             this.props.getSelectedSampleStorageLocation(\r\n//                                                 selectedItem,\r\n//                                                 this.props.Login.userInfo, this.props.Login.masterData\r\n//                                             )\r\n//                                         }\r\n//                                         // inputParam={{\r\n//                                         //   userInfo: this.props.Login.userInfo,\r\n//                                         //   masterData: this.props.Login.masterData\r\n//                                         // }}\r\n//                                         mainField={\"ssamplestoragelocationname\"}\r\n//                                         selectedListName=\"selectedSampleStorageLocation\"\r\n//                                         objectName=\"LocationMaster\"\r\n//                                         listName=\"IDS_SAMPLESTORAGELOCATION\"\r\n//                                         // filterColumnData={this.props.filterTransactionList}\r\n//                                         // searchListName=\"searchedData\"\r\n//                                         searchRef={this.searchRef}\r\n//                                         // filterParam={filterParam}\r\n\r\n//                                         // showFilter={this.props.Login.showFilter}\r\n//                                         // openFilter={this.openFilter}\r\n//                                         // closeFilter={this.closeFilter}\r\n//                                         // onFilterSubmit={this.onFilterSubmit}              \r\n//                                         // needFilter={true}              \r\n//                                         hidePaging={false}\r\n//                                         pageSize={[10, 20, 30]}\r\n//                                         handlePageChange={this.handlePageChange}\r\n//                                         skip={0}\r\n//                                         take={10}\r\n//                                         commonActions={\r\n//                                             <ProductList className=\"d-flex product-category float-right\">\r\n//                                                 <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n//                                                     data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n//                                                     data-for=\"tooltip_list_wrap\"\r\n//                                                     hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n//                                                     onClick={() => this.openModal()}\r\n//                                                 >\r\n//                                                     <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n//                                                 </Button>\r\n//                                                 <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n//                                                     onClick={() => this.reloadData()}\r\n//                                                     data-for=\"tooltip_list_wrap\"\r\n//                                                     data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n//                                                     <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n//                                                 </Button>\r\n//                                             </ProductList>\r\n//                                         }\r\n\r\n//                                     />\r\n//                                 </div>\r\n//                                 <div>                                    \r\n//                                     <TransactionListMaster\r\n//                                         // paneHeight={this.state.parentHeight}\r\n//                                         needMultiSelect={false}\r\n//                                         masterList={this.props.Login.masterData &&\r\n//                                             this.props.Login.masterData.sampleStorageVersion || []}\r\n//                                         selectedMaster={[(this.props.Login.masterData &&\r\n//                                             this.props.Login.masterData.selectedSampleStorageVersion) || []]}\r\n//                                         primaryKeyField=\"nsamplestorageversioncode\"                                     \r\n//                                         getMasterDetail={(selectedItem) =>\r\n//                                             this.props.getSelectedSampleStorageVersion(\r\n//                                                 selectedItem, this.props.Login.userInfo,\r\n//                                                 this.props.Login.masterData\r\n//                                             )\r\n//                                         }\r\n//                                         // inputParam={{\r\n//                                         //   userInfo: this.props.Login.userInfo,\r\n//                                         //   masterData: this.props.Login.masterData\r\n//                                         // }}\r\n//                                         mainField={\"nversionno\"}\r\n//                                         mainFieldLabel={this.props.intl.formatMessage({ id: \"IDS_VERSION\" })}\r\n//                                         selectedListName=\"selectedSampleStorageVersion\"\r\n//                                         objectName=\"Version\"\r\n//                                         listName=\"IDS_SAMPLESTORAGEVersion\"\r\n//                                         // filterColumnData={this.props.filterTransactionList}\r\n//                                         // searchListName=\"searchedData\"\r\n//                                         searchRef={this.searchRef}\r\n//                                         // filterParam={filterParam}\r\n\r\n//                                         // showFilter={this.props.Login.showFilter}\r\n//                                         // openFilter={this.openFilter}\r\n//                                         // closeFilter={this.closeFilter}\r\n//                                         // onFilterSubmit={this.onFilterSubmit}              \r\n//                                         // needFilter={true}  \r\n//                                         // hideSearch={true}            \r\n//                                         hidePaging={false}\r\n//                                         pageSize={[10, 20, 30]}\r\n//                                         handlePageChange={this.handlePageChange}\r\n//                                         skip={0}\r\n//                                         take={10}\r\n//                                         splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n//                                         actionIcons={\r\n//                                             [\r\n//                                                 {\r\n//                                                     title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n//                                                     controlname: \"faPencilAlt\",\r\n//                                                     objectName: \"mastertoedit\",\r\n//                                                     hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\r\n//                                                     onClick: this.editSampleStorageLocation,\r\n//                                                     inputData: {\r\n//                                                         primaryKeyName: \"nreportcode\",\r\n//                                                         operation: \"update\",\r\n//                                                         // masterData: this.props.Login.masterData,\r\n//                                                         // userInfo: this.props.Login.userInfo,\r\n//                                                         screenName: \"IDS_REPORTMASTER\",\r\n//                                                         // ncontrolcode: editMasterId,\r\n//                                                         // filterReportType:this.props.Login.masterData.SelectedFilterReportType\r\n//                                                     },\r\n\r\n//                                                 },\r\n//                                                 {\r\n//                                                     title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n//                                                     controlname: \"faTrashAlt\",\r\n//                                                     objectName: \"mastertodelete\",\r\n//                                                     hidden: false, // this.state.userRoleControlRights.indexOf(deleteMasterId) === -1,\r\n//                                                     onClick: () => ConfirmMessage.confirm(\r\n//                                                         \"deleteMessage\",\r\n//                                                         this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n//                                                         this.props.intl.formatMessage({ id: \"IDS_DELETECONFIRMMSG\" }),\r\n//                                                         this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n//                                                         this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n//                                                         () => this.onDeleteSampleStorageLocation()\r\n//                                                     ),\r\n//                                                     inputData: {\r\n//                                                         // primaryKeyName: \"nreportcode\",\r\n//                                                         // operation: \"delete\",\r\n//                                                         // masterData: this.props.Login.masterData,\r\n//                                                         // userInfo: this.props.Login.userInfo,\r\n//                                                         // screenName: \"IDS_REPORTMASTER\",\r\n//                                                         // listName: \"reportmaster\",\r\n//                                                         // ncontrolCode: deleteMasterId, methodUrl: \"ReportMaster\"\r\n//                                                     }\r\n//                                                 },\r\n\r\n//                                             ]\r\n//                                         }\r\n\r\n//                                     />\r\n//                                 </div>\r\n//                             </Splitter>\r\n//                         </Col>\r\n//                         <Col md=\"6\">\r\n//                             <ProductList className=\"panel-main-content\">\r\n//                                 {this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.length > 0 && this.props.Login.masterData.selectedSampleStorageLocation ?\r\n//                                     <Card className=\"border-0\">\r\n//                                         <Card.Header>\r\n//                                             <Card.Title className=\"product-title-main\">{this.props.Login.masterData.selectedSampleStorageLocation.ssamplestoragelocationname}</Card.Title>\r\n//                                             <ContentPanel className=\"d-flex product-category\">\r\n//                                                 <Col md='6'>\r\n//                                                     <div className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n//                                                         <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n//                                                         <ProductList className=\"d-inline dropdown badget_menu\">\r\n//                                                             <Nav.Link className=\"btn btn-circle outline-grey mr-2 \" href=\"#\"\r\n//                                                                 // hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n//                                                                 data-for=\"tooltip_list_wrap\"\r\n//                                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n//                                                                 onClick={(e) => this.props.editSampleStorageLocation(this.props.Login.masterData.selectedSampleStorageLocation, this.props.Login.userInfo, this.props.Login.masterData)}\r\n//                                                             >\r\n//                                                                 <FontAwesomeIcon icon={faPencilAlt} className=\"ActionIconColor\" />\r\n\r\n//                                                             </Nav.Link>\r\n//                                                             <Nav.Link name=\"QB\" className=\"btn btn-circle outline-grey mr-2\"\r\n//                                                                 // hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n//                                                                 data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n//                                                                 onClick={() => this.confirmDelete(deleteId)}\r\n//                                                             >\r\n//                                                                 <FontAwesomeIcon icon={faTrashAlt} />\r\n//                                                             </Nav.Link>\r\n\r\n//                                                         </ProductList>\r\n//                                                     </div>\r\n//                                                 </Col>\r\n//                                             </ContentPanel>\r\n//                                         </Card.Header>\r\n//                                         <Card.Body>\r\n//                                             <TreeViewEditable\r\n//                                                 id=\"samplestoragelocation\"\r\n//                                                 name=\"samplestoragelocation\"\r\n//                                                 // label=\"Sample Storage Location\"\r\n//                                                 data={this.state.treeDataView}\r\n//                                                 expandIcons={true}\r\n//                                                 item={this.itemRenderView}\r\n//                                                 onExpandChange={this.onExpandChangeView}\r\n//                                                 onItemClick={this.onItemClickView}\r\n//                                             />\r\n//                                         </Card.Body>\r\n//                                     </Card>\r\n//                                     : \"\"}\r\n\r\n//                             </ProductList>\r\n//                         </Col>\r\n//                     </Row> */}\r\n//                 {/* </ListWrapper> */}\r\n//                 {this.props.Login.openModal &&\r\n//                     <SlideOutModal show={this.props.Login.openModal}\r\n//                         closeModal={this.closeModal}\r\n//                         operation={this.props.Login.operation}\r\n//                         inputParam={this.props.Login.inputParam}\r\n//                         screenName={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGELOCATION\" })}\r\n//                         onSaveClick={this.onSaveClick}\r\n//                         selectedRecord={this.state.selectedRecord || {}}\r\n//                         addComponent={\r\n//                             this.props.Login.loadTreeProperties ? (\r\n//                                 <AddTreeProperties\r\n//                                     onInputChange={(e) => this.onInputChange(e)}\r\n//                                     selectedRecord={this.state.selectedRecord || {}}\r\n//                                 />\r\n//                             ) : this.state.treeData ? (\r\n//                                 <AddTreeview\r\n//                                     treeData={this.state.treeData}\r\n//                                     onInputChange={(e) => this.onInputChange(e)}\r\n//                                     selectedRecord={this.state.selectedRecord || {}}\r\n//                                     itemRender={this.itemRender}\r\n//                                     onExpandChange={this.onExpandChange}\r\n//                                     onItemClick={this.onItemClick}\r\n//                                 />\r\n//                             ) : (\r\n//                                 <></>\r\n//                             )\r\n//                         }\r\n//                     />\r\n//                 }\r\n//             </>\r\n//         )\r\n//     }\r\n\r\n\r\n// }\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         Login: state.Login\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, {\r\n//     callService, crudMaster, updateStore, validateEsignCredential,\r\n//     getSelectedSampleStorageLocation, openPropertyModal, editSampleStorageLocation\r\n// })(injectIntl(SampleStorageLocation));"]},"metadata":{},"sourceType":"module"}