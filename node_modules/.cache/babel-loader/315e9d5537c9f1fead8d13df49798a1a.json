{"ast":null,"code":"import _defineProperty from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import Axios from'axios';import{toast}from'react-toastify';import{rearrangeDateFormat}from'../components/CommonScript';import{DEFAULT_RETURN}from'./LoginTypes';import{initRequest}from'./LoginAction';export function getComboSampleReceiving(addParam,masterData){return function(dispatch){var userInfo=addParam.userInfo;dispatch(initRequest(true));return rsapi.post(\"timezone/getLocalTimeByZone\",{userinfo:userInfo}).then(function(response){var date=rearrangeDateFormat(userInfo,response.data);// masterData[\"barcodeFields\"] ={};\n// masterData [\"barcodedata\"]={};\n// masterData [\"jsondataBarcodeFields\"]={};\nvar selectedRecord=_objectSpread(_objectSpread({},addParam.selectedRecord),{},{\"dcollectiondate\":date});dispatch({type:DEFAULT_RETURN,payload:{masterData:_objectSpread(_objectSpread({},masterData),{},{\"barcodeFields\":[],\"barcodedata\":[],\"jsondataBarcodeFields\":[]}),operation:addParam.operation,screenName:addParam.screenName,selectedRecord:selectedRecord,openModal:true,ncontrolcode:addParam.ncontrolCode,loading:false,barcodenorecord:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getBarcodeDataRecord(inputParam){return function(dispatch){var obj1={};dispatch(initRequest(true));rsapi.post(\"samplereceiving/getBarcodeConfigData\",{userinfo:inputParam.inputData.userinfo,nprojecttypecode:inputParam.masterData.selectedProjectType.value,spositionvalue:inputParam.inputData.selectedRecord.sbarcodeid,nbarcodeLength:inputParam.inputData.selectedRecord.sbarcodeid.length,jsondata:obj1}).then(function(response){// let b = [];\n// b[0] = { \"sfieldname\": \"Unit Name\", \"nsorter\": 9 };\n// b[1] = { \"sfieldname\": \"Sample Quantity\", \"nsorter\": 10 };\n// let str = [];\n// str = [...barcodeFields, ...b]\n//let barcodedata = { ...response.data.jsondataBarcodeData, \"Unit Name\": response.data.addValue[0].sunitname, \"Sample Quantity\": response.data.addValue[0].nsampleqty };\nvar barcodeFields=response.data.jsondataBarcodeFields;var barcodedata=response.data.jsondataBarcodeData;inputParam.masterData[\"jsondataBarcodeFields\"]=response.data.jsondataBarcodeFields;var masterData=_objectSpread(_objectSpread({},inputParam.masterData),{},{\"barcodedata\":barcodedata,\"barcodeFields\":barcodeFields});dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({masterData:masterData},inputParam.inputData.selectedRecord),{},{loading:false,barcodenorecord:false})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function saveReceiving(inputParam,masterData){return function(dispatch){var service1=rsapi.post(\"samplereceiving/\"+inputParam.operation+\"SampleReceiving\",inputParam.inputData);var service2=rsapi.post(\"timezone/getLocalTimeByZone\",{userinfo:inputParam.inputData.userinfo});var urlArray=[];dispatch(initRequest(true));urlArray=[service1,service2];Axios.all(urlArray).then(function(response){//let masterData = { ...inputParam.masterData, ...response.data, selectedProjectType: inputParam.inputData.selectedProjectType }\nmasterData=_objectSpread(_objectSpread({},masterData),{},{\"SampleReceiving\":response[0].data.SampleReceiving,\"barcodedata\":\"\"});var openModal=false;if(inputParam.saveType===2){openModal=true;}masterData[\"jsondataBarcodeFields\"]=response[0].data.jsondataBarcodeFields;masterData=_objectSpread(_objectSpread({},masterData),{},{\"SampleReceiving\":response[0].data.SampleReceiving,\"barcodedata\":\"\"});var date=rearrangeDateFormat(inputParam.inputData.userinfo,response[1].data);var selectedRecord=_objectSpread(_objectSpread({},inputParam.selectedRecord),{},{\"sbarcodeid\":\"\",\"dcollectiondate\":date,\"scomments\":\"\"});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,barcodeFields:[],barcodedata:[],barcodenorecord:[],openModal:openModal,loading:false,loadEsign:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getActiveSampleReceivingById(editParam){return function(dispatch){var _rsapi$post;var selectedId=null;rsapi.post(\"samplereceiving/getActiveSampleReceivingById\",(_rsapi$post={},_defineProperty(_rsapi$post,editParam.primaryKeyField,editParam.primaryKeyValue),_defineProperty(_rsapi$post,\"nprojecttypecode\",editParam.editRow.nprojecttypecode),_defineProperty(_rsapi$post,\"spositionvalue\",editParam.editRow.sbarcodeid),_defineProperty(_rsapi$post,\"userinfo\",editParam.userInfo),_rsapi$post)).then(function(response){selectedId=editParam.primaryKeyValue;var date=rearrangeDateFormat(editParam.userInfo,response.data.activeSampleColletionByID['scollectiondate']);var selectedRecord=response.data&&response.data.activeSampleColletionByID;// let b = [];\n// b[0] = { \"sfieldname\": \"Unit Name\", \"nsorter\": 9 };\n// b[1] = { \"sfieldname\": \"Sample Quantity\", \"nsorter\": 10 };\n// let str = [];\n// str = [...barcodeFields, ...b]\n// let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\n// let barcodeFields = response.data.jsondataBarcodeFields;\nvar barcodeFields=response.data.jsondataBarcodeFields;var barcodedata=response.data&&response.data.activeSampleColletionByID.jsondata;var masterData=_objectSpread(_objectSpread({},editParam.masterData),{},{\"barcodedata\":barcodedata,\"barcodeFields\":barcodeFields});//let masterData = { ...editParam.masterData, \"barcodedata\": barcodedata, \"barcodeFields\": barcodeFields }\nselectedRecord=_objectSpread(_objectSpread({},editParam.selectedRecord),{},{\"sbarcodeid\":response.data.activeSampleColletionByID['sbarcodeid'],\"dcollectiondate\":date,\"scomments\":response.data.activeSampleColletionByID['scomments']});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,operation:editParam.operation,ncontrolcode:editParam.ncontrolCode,openModal:true,loading:false,barcodenorecord:false,selectedId:selectedId,screenName:editParam.screenName,dataState:editParam.dataState}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSampleReceiving(inputParam){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"samplereceiving/getSampleReceiving\",inputParam.inputData).then(function(response){var masterData=_objectSpread(_objectSpread(_objectSpread({},inputParam.masterData),response.data),{},{selectedProjectType:inputParam.inputData.selectedProjectType});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}// export function SampleReceivingReportReadBarcode(SampleReceivingReportId, data) {\n//     if (SampleReceivingReportId !== false) {\n//         let obj = convertDateValuetoString(data.masterData.FromDate,\n//             data.masterData.ToDate,\n//             data.userInfo);\n//         let fromDate = obj.fromDate;\n//         let toDate = obj.toDate;\n//         const filterTestParam = {\n//             todate: toDate,\n//             fromdate: fromDate\n//         }\n//         this.props.generateControlBasedReport(SampleReceivingReportId, filterTestParam, this.props.Login, \"nsamplereceivingcode\",\n//             this.state.selectedRecord.nsamplereceivingcode);\n//     }\n// }","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/actions/SampleReceivingAction.js"],"names":["rsapi","Axios","toast","rearrangeDateFormat","DEFAULT_RETURN","initRequest","getComboSampleReceiving","addParam","masterData","dispatch","userInfo","post","userinfo","then","response","date","data","selectedRecord","type","payload","operation","screenName","openModal","ncontrolcode","ncontrolCode","loading","barcodenorecord","catch","error","status","message","warn","getBarcodeDataRecord","inputParam","obj1","inputData","nprojecttypecode","selectedProjectType","value","spositionvalue","sbarcodeid","nbarcodeLength","length","jsondata","barcodeFields","jsondataBarcodeFields","barcodedata","jsondataBarcodeData","saveReceiving","service1","service2","urlArray","all","SampleReceiving","saveType","loadEsign","getActiveSampleReceivingById","editParam","selectedId","primaryKeyField","primaryKeyValue","editRow","activeSampleColletionByID","dataState","getSampleReceiving"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { rearrangeDateFormat } from '../components/CommonScript'\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\n\r\nexport function getComboSampleReceiving(addParam,masterData) {\r\n    return function (dispatch) {\r\n        let userInfo = addParam.userInfo;\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: userInfo })\r\n            .then(response => {\r\n                let date = rearrangeDateFormat(userInfo, response.data);\r\n                // masterData[\"barcodeFields\"] ={};\r\n                // masterData [\"barcodedata\"]={};\r\n                // masterData [\"jsondataBarcodeFields\"]={};\r\n\r\n                let selectedRecord = { ...addParam.selectedRecord, \"dcollectiondate\": date }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData:{...masterData,\r\n                            \"barcodeFields\" :[],\r\n                            \"barcodedata\":[],\r\n                            \"jsondataBarcodeFields\":[]\r\n                        },\r\n                        operation: addParam.operation,\r\n                        screenName: addParam.screenName,\r\n                        selectedRecord: selectedRecord,\r\n                        openModal: true,\r\n                        ncontrolcode: addParam.ncontrolCode,\r\n                        loading: false,\r\n                        barcodenorecord: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getBarcodeDataRecord(inputParam) {\r\n    return function (dispatch) {\r\n        const obj1 = {};\r\n       \r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"samplereceiving/getBarcodeConfigData\", {\r\n                userinfo: inputParam.inputData.userinfo,\r\n                nprojecttypecode: inputParam.masterData.selectedProjectType.value, spositionvalue: inputParam.inputData.selectedRecord.sbarcodeid,\r\n                nbarcodeLength: inputParam.inputData.selectedRecord.sbarcodeid.length, jsondata: obj1\r\n            }\r\n            ).then(response => {\r\n\r\n\r\n                // let b = [];\r\n                // b[0] = { \"sfieldname\": \"Unit Name\", \"nsorter\": 9 };\r\n                // b[1] = { \"sfieldname\": \"Sample Quantity\", \"nsorter\": 10 };\r\n                // let str = [];\r\n                // str = [...barcodeFields, ...b]\r\n                //let barcodedata = { ...response.data.jsondataBarcodeData, \"Unit Name\": response.data.addValue[0].sunitname, \"Sample Quantity\": response.data.addValue[0].nsampleqty };\r\n                \r\n                let barcodeFields = response.data.jsondataBarcodeFields;\r\n                let barcodedata = response.data.jsondataBarcodeData;\r\n              \r\n                inputParam.masterData[\"jsondataBarcodeFields\"]=response.data.jsondataBarcodeFields;\r\n\r\n                let masterData = { ...inputParam.masterData, \"barcodedata\": barcodedata, \"barcodeFields\": barcodeFields }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        ...inputParam.inputData.selectedRecord,\r\n                        loading: false,\r\n                        barcodenorecord: false\r\n                    }\r\n                });\r\n            }\r\n            )\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n       \r\n    }\r\n}\r\n\r\nexport function saveReceiving(inputParam, masterData) {\r\n    return function (dispatch) {\r\n\r\n        const service1 = rsapi.post(\"samplereceiving/\" + inputParam.operation + \"SampleReceiving\", inputParam.inputData);\r\n        const service2 = rsapi.post(\"timezone/getLocalTimeByZone\", {\r\n            userinfo: inputParam.inputData.userinfo\r\n        });\r\n        let urlArray = [];\r\n        dispatch(initRequest(true));\r\n\r\n        urlArray = [service1, service2]\r\n        Axios.all(urlArray).then(response => {\r\n\r\n            //let masterData = { ...inputParam.masterData, ...response.data, selectedProjectType: inputParam.inputData.selectedProjectType }\r\n            masterData = { ...masterData, \"SampleReceiving\": response[0].data.SampleReceiving, \"barcodedata\": \"\" }\r\n            let openModal = false;\r\n            if (inputParam.saveType === 2) {\r\n                openModal = true;\r\n            }\r\n\r\n            masterData[\"jsondataBarcodeFields\"]=response[0].data.jsondataBarcodeFields;\r\n \r\n            masterData = { ...masterData,\"SampleReceiving\": response[0].data.SampleReceiving, \"barcodedata\": \"\" }\r\n\r\n            let date = rearrangeDateFormat(inputParam.inputData.userinfo, response[1].data);\r\n\r\n            let selectedRecord = { ...inputParam.selectedRecord, \"sbarcodeid\": \"\", \"dcollectiondate\": date, \"scomments\": \"\" }\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    masterData,\r\n                    selectedRecord,\r\n                    barcodeFields:[],\r\n                    barcodedata:[],\r\n                    barcodenorecord:[],\r\n                    openModal: openModal,\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            });\r\n        })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport function getActiveSampleReceivingById(editParam) {\r\n    return function (dispatch) {\r\n\r\n        let selectedId = null;\r\n        rsapi.post(\"samplereceiving/getActiveSampleReceivingById\",\r\n            {\r\n                [editParam.primaryKeyField]: editParam.primaryKeyValue, \"nprojecttypecode\": editParam.editRow.nprojecttypecode, \"spositionvalue\": editParam.editRow.sbarcodeid, \"userinfo\": editParam.userInfo\r\n            }).then(response => {\r\n                selectedId = editParam.primaryKeyValue;\r\n\r\n                let date = rearrangeDateFormat(editParam.userInfo, response.data.activeSampleColletionByID['scollectiondate']);\r\n\r\n                let selectedRecord = response.data && response.data.activeSampleColletionByID\r\n                // let b = [];\r\n                // b[0] = { \"sfieldname\": \"Unit Name\", \"nsorter\": 9 };\r\n                // b[1] = { \"sfieldname\": \"Sample Quantity\", \"nsorter\": 10 };\r\n\r\n                // let str = [];\r\n                // str = [...barcodeFields, ...b]\r\n\r\n                // let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\r\n                // let barcodeFields = response.data.jsondataBarcodeFields;\r\n\r\n                let barcodeFields = response.data.jsondataBarcodeFields;\r\n              \r\n                let barcodedata = response.data && response.data.activeSampleColletionByID.jsondata;\r\n                let masterData = { ...editParam.masterData, \"barcodedata\": barcodedata , \"barcodeFields\":barcodeFields}\r\n\r\n                //let masterData = { ...editParam.masterData, \"barcodedata\": barcodedata, \"barcodeFields\": barcodeFields }\r\n\r\n                selectedRecord = {\r\n                    ...editParam.selectedRecord, \"sbarcodeid\": response.data.activeSampleColletionByID['sbarcodeid'],\r\n                    \"dcollectiondate\": date, \"scomments\": response.data.activeSampleColletionByID['scomments']\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        operation: editParam.operation,\r\n                        ncontrolcode: editParam.ncontrolCode,\r\n                        openModal: true,\r\n                        loading: false,\r\n                        barcodenorecord:false,\r\n                        selectedId,\r\n                        screenName: editParam.screenName,\r\n                        dataState:editParam.dataState,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function getSampleReceiving(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"samplereceiving/getSampleReceiving\", inputParam.inputData)\r\n            .then(response => {\r\n                let masterData = { ...inputParam.masterData, ...response.data, selectedProjectType: inputParam.inputData.selectedProjectType }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData, loading: false,\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n// export function SampleReceivingReportReadBarcode(SampleReceivingReportId, data) {\r\n\r\n//     if (SampleReceivingReportId !== false) {\r\n//         let obj = convertDateValuetoString(data.masterData.FromDate,\r\n//             data.masterData.ToDate,\r\n//             data.userInfo);\r\n//         let fromDate = obj.fromDate;\r\n//         let toDate = obj.toDate;\r\n\r\n//         const filterTestParam = {\r\n//             todate: toDate,\r\n//             fromdate: fromDate\r\n//         }\r\n\r\n\r\n//         this.props.generateControlBasedReport(SampleReceivingReportId, filterTestParam, this.props.Login, \"nsamplereceivingcode\",\r\n//             this.state.selectedRecord.nsamplereceivingcode);\r\n\r\n//     }\r\n\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}