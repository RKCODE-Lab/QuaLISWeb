{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5500\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboardtypes\\\\DashBoardView.jsx\";\nimport React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, fetchRecordDashBoardType, getSqlQueryDataService, getSqlQueryColumns, getAddDashboardDesign, selectCheckBoxDashBoardTypes, selectCheckBoxDashBoardView, checkParametersAvailable, getReportViewChildDataListForDashBoard, getAllSelectionDashBoardView, updateStore, validateEsignCredential, filterColumnData } from '../../actions';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ProductList } from '../../pages/product/product.styled';\nimport { getControlMap, formatInputDate, rearrangeDateFormat, convertDateValuetoString } from '../../components/CommonScript';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { transactionStatus, designComponents } from '../../components/Enumeration';\nimport AreaChart from '../dashboardtypes/charts/AreaChart';\nimport PieChart from '../dashboardtypes/charts/PieChart';\nimport DashBoardDynamicControls from '../dashboardtypes/DashBoardDynamicControls';\nimport { chartType } from '../../components/Enumeration';\nimport BubbleChart from '../dashboardtypes/charts/BubbleChart'; //import ReactTooltip from 'react-tooltip';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass DashBoardView extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.openModal = input => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: {},\n          operation: input.operation,\n          screenName: \"IDS_DASHBOARDTYPES\",\n          openModal: true,\n          ncontrolCode: input.ncontrolCode,\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord; // if (this.props.Login.loadEsign) {\n      //     if (this.props.Login.operation === \"delete\") {\n      //         loadEsign = false;\n      //         openModal = false;\n      //         selectedRecord = {};\n      //     }\n      //     else {\n      //         loadEsign = false;\n      //     }\n      // }\n      // else {\n\n      openModal = false; //selectedRecord = {};\n      //}\n\n      this.props.Login.masterData.viewDashBoardDesignConfigList.map(item => {\n        if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n          selectedRecord[item.sfieldname] = rearrangeDateFormat(this.props.Login.userInfo, item.dataList[0]);\n        } else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n          const comboList = item.dataList;\n          let getList = comboList.filter(lst => {\n            return lst.value === parseInt(item.sdefaultvalue);\n          });\n\n          if (getList.length > 0) {\n            selectedRecord[item.sfieldname] = {\n              label: getList[0].label,\n              value: getList[0].value\n            };\n          } else {\n            selectedRecord[item.sfieldname] = undefined;\n          }\n        } else {\n          selectedRecord[item.sfieldname] = item.sdefaultvalue;\n        }\n\n        return null;\n      });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          //loadEsign, \n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"dashboardview\",\n        methodUrl: \"DashBoardView\",\n        displayName: \"IDS_DASHBOARDVIEW\",\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onNumericInputOnChange = (value, name, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectedRecord2 = this.state.selectedRecord2 || {};\n      selectedRecord[name] = value;\n      selectedRecord2[name] = value;\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          [name]: value,\n          [name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [name.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: value.toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onInputOnChange = (event, item) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          [event.target.name]: selectedRecord[event.target.name],\n          [event.target.name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [event.target.name.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: selectedRecord[event.target.name].toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onComboChange = (comboData, fieldName, item) => {\n      //console.log(\"combo data:\", comboData, fieldName, item);\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectedRecord2 = this.state.selectedRecord2 || {};\n      selectedRecord[fieldName] = comboData;\n      selectedRecord2[fieldName] = comboData === null ? -1 : comboData.value;\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          [fieldName]: comboData === null ? -1 : comboData.value,\n          [fieldName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [fieldName.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        parentcode: comboData === null ? \"-1\" : comboData.value.toString(),\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.handleDateChange = (dateName, dateValue, item) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const selectedRecord2 = this.state.selectedRecord2 || {};\n      dateValue = rearrangeDateFormat(this.props.Login.userInfo, dateValue);\n\n      if (dateValue === null) {\n        dateValue = rearrangeDateFormat(this.props.Login.userInfo, item.dataList[0]);\n      }\n\n      selectedRecord[dateName] = dateValue;\n      selectedRecord2[dateName] = dateValue;\n      const inputData = {\n        dashboarddesignconfig: item,\n        inputfielddata: { ...this.props.Login.inputFieldData,\n          //[dateName]: formatInputDate(dateValue, true),\n          [dateName]: dateValue,\n          [dateName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\n          [dateName.concat(\"_componentname\")]: item.sdesigncomponentname\n        },\n        //parentcode: formatInputDate(dateValue, true),\n        parentcode: dateValue,\n        parentid: item.ndashboarddesigncode,\n        userinfo: this.props.Login.userInfo,\n        ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode\n      };\n      const inputParam = {\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\n        selectedRecord,\n        inputData\n      };\n      this.props.getReportViewChildDataListForDashBoard(inputParam);\n    };\n\n    this.onSaveClick = () => {\n      const inputFieldData = this.props.Login.inputFieldData;\n      let dateValue = convertDateValuetoString(inputFieldData.dfromdate, inputFieldData.dtodate, this.props.Login.userInfo);\n      inputFieldData['dfromdate'] = dateValue.fromDate + \"Z\";\n      inputFieldData['dtodate'] = dateValue.toDate + \"Z\";\n      const inputParam = {\n        dashboardtypes: this.props.Login.masterData.selectedDashBoardTypes,\n        inputfielddata: inputFieldData,\n        userinfo: this.props.Login.userInfo\n      };\n      this.props.selectCheckBoxDashBoardView(\"DashBoardView\", this.state.selectedRecord, this.props.Login.masterData, inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.gridColumnList = [];\n    const dataState = {\n      skip: 0,\n      take: 10\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      selectedRecord2: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      controlMap: new Map(),\n      userRoleControlRights: [],\n      sqlQueryCode: 0,\n      chartTypeCode: 0,\n      chartSeries: [{\n        xField: [],\n        yField: [],\n        chartTitle: \"\"\n      }],\n      displayColorPicker: false,\n      color: {\n        r: '241',\n        g: '112',\n        b: '19',\n        a: '1'\n      },\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (state.selectedRecord === undefined) {\n      return {\n        openModal: false\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const filterParam = {\n      inputListName: \"DashBoardView\",\n      selectedObject: \"selectedDashBoardTypes\",\n      primaryKeyField: \"ndashboardtypecode\",\n      fetchUrl: \"dashboardview/getAllSelectionDashBoardView\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"sdashboardtypename\", \"schartname\", \"ssqlqueryname\"]\n    }; //  console.log(\"Chart Property : \", this.props.ChartProperty);\n\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_DASHBOARDNAME\",\n      \"dataField\": \"sdashboardtypename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"ndesigncomponentcode\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_EXISTINGLINKTABLE\",\n      \"dataField\": \"nsqlquerycode\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DAYS\",\n      \"dataField\": \"ndays\",\n      \"width\": \"200px\"\n    }];\n    this.gridColumnList = [{\n      \"idsName\": \"IDS_PARAMETERS\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"300px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYNAME\",\n      \"dataField\": \"sdisplayname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INPUTTYPE\",\n      \"dataField\": \"ndesigncomponentcode\",\n      \"width\": \"200px\"\n    }];\n    const mandatoryFields = []; // console.log(\"props DV:\", this.props.Login);\n\n    const fieldList = this.props.Login.masterData.viewDashBoardDesignConfigList || [];\n    fieldList.forEach(item => {\n      if (item.nmandatory === transactionStatus.YES) {\n        //if (item.ndesigncomponentcode !== designComponents.PATH ){\n        mandatoryFields.push({\n          \"idsName\": item.sdisplayname,\n          \"dataField\": item.sfieldname,\n          \"mandatoryLabel\": \"IDS_PROVIDE\",\n          \"controlType\": \"textbox\"\n        });\n      }\n    }); //console.log(\"masterdata: DV\", this.props.Login.masterData);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster //filterColumnData ={(e)=>this.filterColumnData(e)}\n    , {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_DASHBOARDVIEW\"\n      }),\n      masterData: this.props.Login.masterData || [],\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.DashBoardView,\n      getMasterDetail: DashBoardTypes => this.props.getAllSelectionDashBoardView(DashBoardTypes, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.selectedDashBoardTypes,\n      primaryKeyField: \"ndashboardtypecode\",\n      mainField: \"sdashboardtypename\",\n      firstField: \"schartname\" // secondField=\"stransdisplaystatus\"\n      // isIDSField=\"Yes\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: true //allowDuplicateHits={true}\n      // openModal={() => this.props.fetchRecordDashBoardType(AddDashBoardtype, this.props.Login.masterData.selectedDashBoardTypes)}\n      // openModal={() => this.props.getAddDashboardDesign(this.props.Login.masterData.selectedDashBoardTypes,this.props.Login.userInfo)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(ProductList, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.DashBoardView && this.props.Login.masterData.DashBoardView.length > 0 && this.props.Login.masterData.selectedDashBoardTypes ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 41\n      }\n    }, this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.PIECHART || this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.DONUT ? /*#__PURE__*/React.createElement(PieChart, {\n      series: this.props.Login.masterData.pieChart,\n      dashBoardType: this.props.Login.masterData,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      checkParametersAvailable: this.props.checkParametersAvailable,\n      chartTypeName: this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.PIECHART ? \"pie\" : \"donut\",\n      valueField: \"valueField\",\n      categoryField: \"categoryField\",\n      style: {\n        height: 550\n      },\n      selectedRecord: this.state.selectedRecord,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 49\n      }\n    }) : this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode !== chartType.BUBBLE ? /*#__PURE__*/React.createElement(AreaChart, {\n      xSeries: this.props.Login.masterData.xSeries,\n      ySeries: this.props.Login.masterData.ySeries,\n      dashBoardType: this.props.Login.masterData,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      checkParametersAvailable: this.props.checkParametersAvailable,\n      style: {\n        height: 550\n      },\n      selectedRecord: this.state.selectedRecord //chartTypeName={\"column\"}\n      ,\n      chartTypeName: this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.AREACHART ? \"area\" : this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.COLUMNCHART ? \"column\" : this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.BARCHART ? \"bar\" : \"area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(BubbleChart, {\n      bubbleSeries: this.props.Login.masterData.bubbleSeries,\n      chartData: this.props.Login.masterData.chartData,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      checkParametersAvailable: this.props.checkParametersAvailable,\n      style: {\n        height: 550\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 53\n      }\n    }))) : \"\")))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: \"filter\" //this.props.Login.operation}\n      ,\n      inputParam: this.props.Login.inputParam,\n      screenName: \"IDS_PARAMETER\" //this.props.Login.screenName}\n      ,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent:\n      /*#__PURE__*/\n      // this.props.Login.loadEsign ?\n      // <Esign operation={this.props.Login.operation}\n      //     onInputOnChange={this.onInputOnChange}\n      //     inputParam={this.props.Login.inputParam}\n      //     selectedRecord={this.state.selectedRecord || {}}\n      // />\n      // :\n      React.createElement(DashBoardDynamicControls, {\n        selectedRecord: this.props.Login.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList || [],\n        operation: \"filter\" //this.props.Login.operation}\n        ,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData\n        });\n      } else {\n        this.setState({\n          data: this.props.Login.masterData,\n          selectedRecord: this.props.Login.selectedRecord,\n          isOpen: false\n        });\n      } // let respObj = {};\n      // if (this.props.Login.masterData.viewDashBoardDesignConfigList !== undefined && this.props.Login.masterData.viewDashBoardDesignConfigList.length > 0) {\n      //     sortByField(this.props.Login.masterData.viewDashBoardDesignConfigList, \"ascending\", \"ndashboarddesigncode\");\n      //     respObj[\"openModal\"] = true;\n      //     respObj[\"viewDashBoardDesignConfigList\"] = this.props.Login.masterData.viewDashBoardDesignConfigList;\n      //     let selectedRecord = {};           \n      //     respObj[\"viewDashBoardDesignConfigList\"].map(item => {\n      //       if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\n      //         selectedRecord[item.sfieldname] = new Date(item.dataList[0])\n      //       }\n      //       else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\n      //         const comboMap = constructOptionList(item.dataList || [], item.svaluemember,\n      //           item.sdisplaymember, undefined, undefined, true);\n      //         const comboList = comboMap.get(\"OptionList\");\n      //         item.dataList = comboList;\n      //       }\n      //       return null;\n      //     });   \n      //     respObj[\"selectedRecord\"] = selectedRecord;\n      // }\n      // else{\n      //     respObj[\"openModal\"] = false;\n      // }   \n      // this.setState({ ...respObj });\n\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchRecordDashBoardType,\n  selectCheckBoxDashBoardTypes,\n  getSqlQueryDataService,\n  getSqlQueryColumns,\n  getAddDashboardDesign,\n  selectCheckBoxDashBoardView,\n  checkParametersAvailable,\n  getReportViewChildDataListForDashBoard,\n  getAllSelectionDashBoardView,\n  updateStore,\n  validateEsignCredential,\n  filterColumnData\n})(injectIntl(DashBoardView));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5500/QuaLISWeb/src/pages/dashboardtypes/DashBoardView.jsx"],"names":["React","Row","Col","Card","toast","connect","injectIntl","callService","crudMaster","fetchRecordDashBoardType","getSqlQueryDataService","getSqlQueryColumns","getAddDashboardDesign","selectCheckBoxDashBoardTypes","selectCheckBoxDashBoardView","checkParametersAvailable","getReportViewChildDataListForDashBoard","getAllSelectionDashBoardView","updateStore","validateEsignCredential","filterColumnData","ListMaster","DEFAULT_RETURN","ProductList","getControlMap","formatInputDate","rearrangeDateFormat","convertDateValuetoString","SlideOutModal","transactionStatus","designComponents","AreaChart","PieChart","DashBoardDynamicControls","chartType","BubbleChart","mapStateToProps","state","Login","DashBoardView","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","openModal","input","updateInfo","typeName","data","selectedRecord","operation","screenName","ncontrolCode","loading","closeModal","masterData","viewDashBoardDesignConfigList","map","item","ndesigncomponentcode","DATEPICKER","sfieldname","userInfo","dataList","COMBOBOX","comboList","getList","filter","lst","value","parseInt","sdefaultvalue","length","label","undefined","selectedId","reloadData","searchRef","current","inputParam","inputData","classUrl","methodUrl","displayName","onNumericInputOnChange","name","selectedRecord2","dashboarddesignconfig","inputfielddata","inputFieldData","concat","sdesigncomponentname","parentcode","toString","parentid","ndashboarddesigncode","userinfo","ndashboardtypecode","selectedDashBoardTypes","onInputOnChange","event","target","type","checked","YES","NO","onComboChange","comboData","fieldName","handleDateChange","dateName","dateValue","onSaveClick","dfromdate","dtodate","fromDate","toDate","dashboardtypes","validateEsign","sreason","nreasoncode","spredefinedreason","password","screenData","formRef","createRef","extractedColumnList","gridColumnList","dataState","skip","take","masterStatus","error","dataResult","isOpen","controlMap","Map","userRoleControlRights","sqlQueryCode","chartTypeCode","chartSeries","xField","yField","chartTitle","displayColorPicker","color","r","g","b","a","getDerivedStateFromProps","warn","render","addId","has","get","ncontrolcode","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","searchFieldList","mandatoryFields","fieldList","forEach","nmandatory","push","sdisplayname","intl","formatMessage","id","searchedData","DashBoardTypes","parentFunction","ncharttypecode","PIECHART","DONUT","pieChart","height","BUBBLE","xSeries","ySeries","AREACHART","COLUMNCHART","BARCHART","bubbleSeries","chartData","loadEsign","componentDidUpdate","previousProps","nformcode","Object","values"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport {\r\n    callService, crudMaster, fetchRecordDashBoardType, getSqlQueryDataService,\r\n    getSqlQueryColumns, getAddDashboardDesign, selectCheckBoxDashBoardTypes,\r\n    selectCheckBoxDashBoardView, checkParametersAvailable, getReportViewChildDataListForDashBoard,\r\n    getAllSelectionDashBoardView,\r\n    updateStore, validateEsignCredential, filterColumnData\r\n} from '../../actions';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ProductList } from '../../pages/product/product.styled';\r\nimport { getControlMap, formatInputDate, rearrangeDateFormat ,convertDateValuetoString} from '../../components/CommonScript';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { transactionStatus, designComponents } from '../../components/Enumeration';\r\nimport AreaChart from '../dashboardtypes/charts/AreaChart';\r\nimport PieChart from '../dashboardtypes/charts/PieChart';\r\nimport DashBoardDynamicControls from '../dashboardtypes/DashBoardDynamicControls';\r\nimport { chartType } from '../../components/Enumeration';\r\nimport BubbleChart from '../dashboardtypes/charts/BubbleChart';\r\n//import ReactTooltip from 'react-tooltip';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\n\r\nclass DashBoardView extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.gridColumnList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: 10,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}, selectedRecord2: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false, controlMap: new Map(), userRoleControlRights: [],\r\n            sqlQueryCode: 0, chartTypeCode: 0, chartSeries: [{ xField: [], yField: [], chartTitle: \"\" }],\r\n            displayColorPicker: false, color: { r: '241', g: '112', b: '19', a: '1' },\r\n            sidebarview: false\r\n        }\r\n        this.searchRef = React.createRef();\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })          \r\n    }\r\n\r\n    openModal = (input) => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: {}, operation: input.operation,\r\n                screenName: \"IDS_DASHBOARDTYPES\",\r\n                openModal: true, ncontrolCode: input.ncontrolCode,\r\n                loading: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        // if (this.props.Login.loadEsign) {\r\n        //     if (this.props.Login.operation === \"delete\") {\r\n        //         loadEsign = false;\r\n        //         openModal = false;\r\n        //         selectedRecord = {};\r\n        //     }\r\n        //     else {\r\n        //         loadEsign = false;\r\n        //     }\r\n        // }\r\n        // else {\r\n            openModal = false;\r\n            //selectedRecord = {};\r\n        //}\r\n\r\n        this.props.Login.masterData.viewDashBoardDesignConfigList.map(item => {\r\n\r\n            if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n                selectedRecord[item.sfieldname] = rearrangeDateFormat(this.props.Login.userInfo,item.dataList[0])\r\n            }\r\n            else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n                const comboList =  item.dataList;\r\n            \r\n                let getList = comboList.filter(lst => {\r\n                    return lst.value === parseInt(item.sdefaultvalue);\r\n                });\r\n\r\n                if (getList.length > 0) {\r\n                    selectedRecord[item.sfieldname] = { label: getList[0].label, value: getList[0].value };\r\n\r\n                } else {\r\n                    selectedRecord[item.sfieldname] = undefined;\r\n                }\r\n            }\r\n            else {\r\n                selectedRecord[item.sfieldname] = item.sdefaultvalue;\r\n            }\r\n        \r\n            return null;\r\n        })\r\n\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, //loadEsign, \r\n                selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (state.selectedRecord === undefined) {\r\n            return { openModal: false }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"DashBoardView\", selectedObject: \"selectedDashBoardTypes\", primaryKeyField: \"ndashboardtypecode\",\r\n            fetchUrl: \"dashboardview/getAllSelectionDashBoardView\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"sdashboardtypename\", \"schartname\", \"ssqlqueryname\"]\r\n        };\r\n      //  console.log(\"Chart Property : \", this.props.ChartProperty);\r\n\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_DASHBOARDNAME\", \"dataField\": \"sdashboardtypename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"ndesigncomponentcode\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sfieldname\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_EXISTINGLINKTABLE\", \"dataField\": \"nsqlquerycode\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DAYS\", \"dataField\": \"ndays\", \"width\": \"200px\" }\r\n        ];\r\n        this.gridColumnList = [\r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sfieldname\", \"width\": \"300px\" },\r\n            { \"idsName\": \"IDS_DISPLAYNAME\", \"dataField\": \"sdisplayname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INPUTTYPE\", \"dataField\": \"ndesigncomponentcode\", \"width\": \"200px\" },\r\n        ];\r\n     \r\n        const mandatoryFields = [];\r\n\r\n       // console.log(\"props DV:\", this.props.Login);\r\n        const fieldList = this.props.Login.masterData.viewDashBoardDesignConfigList || [];\r\n        fieldList.forEach(item => {\r\n            if (item.nmandatory === transactionStatus.YES){\r\n            //if (item.ndesigncomponentcode !== designComponents.PATH ){\r\n                mandatoryFields.push({ \"idsName\": item.sdisplayname, \"dataField\": item.sfieldname  , \"mandatoryLabel\":\"IDS_PROVIDE\", \"controlType\": \"textbox\"})\r\n            }\r\n        });\r\n\r\n        //console.log(\"masterdata: DV\", this.props.Login.masterData);\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-4\">\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                            <ListMaster //filterColumnData ={(e)=>this.filterColumnData(e)}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_DASHBOARDVIEW\" })}\r\n                                masterData={this.props.Login.masterData || []}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.DashBoardView}\r\n                                getMasterDetail={(DashBoardTypes) => this.props.getAllSelectionDashBoardView(DashBoardTypes, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                selectedMaster={this.props.Login.masterData.selectedDashBoardTypes}\r\n                                primaryKeyField=\"ndashboardtypecode\"\r\n                                mainField=\"sdashboardtypename\"\r\n                                firstField=\"schartname\"\r\n                                // secondField=\"stransdisplaystatus\"\r\n                                // isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={true}\r\n                            //allowDuplicateHits={true}\r\n                            // openModal={() => this.props.fetchRecordDashBoardType(AddDashBoardtype, this.props.Login.masterData.selectedDashBoardTypes)}\r\n                            // openModal={() => this.props.getAddDashboardDesign(this.props.Login.masterData.selectedDashBoardTypes,this.props.Login.userInfo)}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                            {/* <div  className=\"d-flex product-category\" style={{ float: \"right\" }}>\r\n                            <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                            <ProductList className=\"panel-main-content\">\r\n                                {this.props.Login.masterData.DashBoardView && this.props.Login.masterData.DashBoardView.length > 0 && this.props.Login.masterData.selectedDashBoardTypes ?\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Body>\r\n                                            {(this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.PIECHART ||\r\n                                                this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.DONUT) ?\r\n                                                <PieChart\r\n                                                    series={this.props.Login.masterData.pieChart}\r\n                                                    dashBoardType={this.props.Login.masterData}\r\n                                                    masterData={this.props.Login.masterData}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    checkParametersAvailable={this.props.checkParametersAvailable}\r\n                                                    chartTypeName={this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.PIECHART ? \"pie\" : \"donut\"}\r\n                                                    valueField={\"valueField\"}\r\n                                                    categoryField={\"categoryField\"}\r\n                                                    style={{ height: 550 }}\r\n                                                    selectedRecord={this.state.selectedRecord}\r\n                                                />\r\n                                                :\r\n\r\n                                                this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode !== chartType.BUBBLE ?\r\n                                                    < AreaChart\r\n                                                        xSeries={this.props.Login.masterData.xSeries}\r\n                                                        ySeries={this.props.Login.masterData.ySeries}\r\n                                                        dashBoardType={this.props.Login.masterData}\r\n                                                        masterData={this.props.Login.masterData}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        checkParametersAvailable={this.props.checkParametersAvailable}\r\n                                                        style={{ height: 550 }}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        //chartTypeName={\"column\"}\r\n                                                        chartTypeName={this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.AREACHART ? \"area\" :\r\n                                                            this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.COLUMNCHART ? \"column\" :\r\n                                                                this.props.Login.masterData.selectedDashBoardTypes.ncharttypecode === chartType.BARCHART ? \"bar\" : \"area\"}\r\n                                                    />\r\n                                                    :\r\n                                                    <BubbleChart\r\n                                                        bubbleSeries={this.props.Login.masterData.bubbleSeries}\r\n                                                        chartData={this.props.Login.masterData.chartData}\r\n                                                        masterData={this.props.Login.masterData}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        checkParametersAvailable={this.props.checkParametersAvailable}\r\n                                                        style={{ height: 550 }}\r\n                                                    />\r\n\r\n\r\n\r\n                                            }\r\n\r\n                                        </Card.Body>\r\n                                    </Card> : \"\"}\r\n                            </ProductList>\r\n                            {/* </div> */}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={\"filter\"}//this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={\"IDS_PARAMETER\"}//this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={\r\n                            // this.props.Login.loadEsign ?\r\n                            // <Esign operation={this.props.Login.operation}\r\n                            //     onInputOnChange={this.onInputOnChange}\r\n                            //     inputParam={this.props.Login.inputParam}\r\n                            //     selectedRecord={this.state.selectedRecord || {}}\r\n                            // />\r\n                            // :\r\n                            <DashBoardDynamicControls\r\n                                selectedRecord={this.props.Login.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                handleDateChange={this.handleDateChange}\r\n                                viewDashBoardDesignConfigList={this.props.Login.masterData.viewDashBoardDesignConfigList || []}\r\n                                operation={\"filter\"}//this.props.Login.operation}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                userInfo={this.props.Login.userInfo}\r\n\r\n                            />\r\n\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"dashboardview\",\r\n            methodUrl: \"DashBoardView\",\r\n            displayName: \"IDS_DASHBOARDVIEW\",\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectedRecord2 = this.state.selectedRecord2 || {};\r\n        selectedRecord[name] = value;\r\n        selectedRecord2[name] = value;\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                [name]: value,\r\n                [name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [name.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: value.toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    onInputOnChange = (event, item) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                [event.target.name]: selectedRecord[event.target.name],\r\n                [event.target.name.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [event.target.name.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: selectedRecord[event.target.name].toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, item) => {\r\n        //console.log(\"combo data:\", comboData, fieldName, item);\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectedRecord2 = this.state.selectedRecord2 || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        selectedRecord2[fieldName] = comboData === null ? -1 : comboData.value;\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                [fieldName]: comboData === null ? -1 : comboData.value,\r\n                [fieldName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [fieldName.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            parentcode: comboData === null ? \"-1\" : comboData.value.toString(),\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue, item) => {\r\n        const { selectedRecord } = this.state;\r\n        const selectedRecord2 = this.state.selectedRecord2 || {};\r\n\r\n        dateValue = rearrangeDateFormat(this.props.Login.userInfo,dateValue);\r\n\r\n        if (dateValue === null){\r\n            dateValue = rearrangeDateFormat(this.props.Login.userInfo,item.dataList[0]);\r\n        }\r\n  \r\n        selectedRecord[dateName] = dateValue;\r\n        selectedRecord2[dateName] = dateValue;\r\n\r\n        const inputData = {\r\n            dashboarddesignconfig: item,\r\n            inputfielddata: {\r\n                ...this.props.Login.inputFieldData,\r\n                //[dateName]: formatInputDate(dateValue, true),\r\n                [dateName]: dateValue,\r\n                [dateName.concat(\"_componentcode\")]: item.ndesigncomponentcode,\r\n                [dateName.concat(\"_componentname\")]: item.sdesigncomponentname,\r\n\r\n            },\r\n            //parentcode: formatInputDate(dateValue, true),\r\n            parentcode: dateValue,\r\n            parentid: item.ndashboarddesigncode,\r\n            userinfo: this.props.Login.userInfo,\r\n            ndashboardtypecode: this.props.Login.masterData.selectedDashBoardTypes.ndashboardtypecode,\r\n\r\n        }\r\n        const inputParam = {\r\n            viewDashBoardDesignConfigList: this.props.Login.masterData.viewDashBoardDesignConfigList,\r\n            selectedRecord,\r\n            inputData\r\n        }\r\n\r\n        this.props.getReportViewChildDataListForDashBoard(inputParam);\r\n    }\r\n\r\n    onSaveClick = () => {\r\n        const inputFieldData = this.props.Login.inputFieldData;\r\n\r\n        let dateValue=convertDateValuetoString(inputFieldData.dfromdate,inputFieldData.dtodate,this.props.Login.userInfo);\r\n        inputFieldData['dfromdate']=dateValue.fromDate+\"Z\";\r\n        inputFieldData['dtodate']=dateValue.toDate+\"Z\";\r\n\r\n        const inputParam = {\r\n            dashboardtypes: this.props.Login.masterData.selectedDashBoardTypes,\r\n            inputfielddata: inputFieldData,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n\r\n        this.props.selectCheckBoxDashBoardView(\"DashBoardView\", this.state.selectedRecord, this.props.Login.masterData, inputParam);\r\n\r\n     } \r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                });\r\n            }\r\n\r\n            else {\r\n                this.setState({\r\n                    data: this.props.Login.masterData, selectedRecord: this.props.Login.selectedRecord,\r\n                    isOpen: false\r\n                });\r\n            }\r\n            // let respObj = {};\r\n            // if (this.props.Login.masterData.viewDashBoardDesignConfigList !== undefined && this.props.Login.masterData.viewDashBoardDesignConfigList.length > 0) {\r\n            //     sortByField(this.props.Login.masterData.viewDashBoardDesignConfigList, \"ascending\", \"ndashboarddesigncode\");\r\n\r\n            //     respObj[\"openModal\"] = true;\r\n            //     respObj[\"viewDashBoardDesignConfigList\"] = this.props.Login.masterData.viewDashBoardDesignConfigList;\r\n            //     let selectedRecord = {};           \r\n            //     respObj[\"viewDashBoardDesignConfigList\"].map(item => {\r\n            //       if (item.ndesigncomponentcode === designComponents.DATEPICKER) {\r\n            //         selectedRecord[item.sfieldname] = new Date(item.dataList[0])\r\n            //       }\r\n            //       else if (item.ndesigncomponentcode === designComponents.COMBOBOX) {\r\n            //         const comboMap = constructOptionList(item.dataList || [], item.svaluemember,\r\n            //           item.sdisplaymember, undefined, undefined, true);\r\n\r\n            //         const comboList = comboMap.get(\"OptionList\");\r\n            //         item.dataList = comboList;\r\n            //       }\r\n            //       return null;\r\n\r\n            //     });   \r\n            //     respObj[\"selectedRecord\"] = selectedRecord;\r\n\r\n            // }\r\n            // else{\r\n            //     respObj[\"openModal\"] = false;\r\n            // }   \r\n            // this.setState({ ...respObj });\r\n        }\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,\r\n    {\r\n        callService, crudMaster, fetchRecordDashBoardType, selectCheckBoxDashBoardTypes, getSqlQueryDataService,\r\n        getSqlQueryColumns, getAddDashboardDesign, selectCheckBoxDashBoardView, checkParametersAvailable,\r\n        getReportViewChildDataListForDashBoard, getAllSelectionDashBoardView, updateStore,\r\n        validateEsignCredential, filterColumnData\r\n    })(injectIntl(DashBoardView));"]},"metadata":{},"sourceType":"module"}