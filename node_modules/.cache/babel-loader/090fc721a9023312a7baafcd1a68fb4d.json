{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\SampleStorageTransaction.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator } from '@fortawesome/free-solid-svg-icons';\nimport { toast } from 'react-toastify';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData } from '../../components/CommonScript';\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles'; //import SortableTree from 'react-sortable-tree'; \n\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { BasicConfig, BasicFuncs, Utils as QbUtils } from \"@react-awesome-query-builder/ui\";\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter, openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion, crudSampleStorageLocation } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { MediaLabel, ProductList } from '../product/product.styled'; // import ReactTooltip from 'react-tooltip';\n\nimport { uuid } from \"uuidv4\";\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport AddTreeview from './AddTreeview';\nimport AddTreeProperties from './AddTreeProperties';\nimport { Splitter } from '@progress/kendo-react-layout';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport StorageCategoryFilter from './StorageCategoryFilter';\nimport { transactionStatus } from '../../components/Enumeration';\nimport Esign from '../audittrail/Esign';\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\nimport ModalShow from '../../components/ModalShow';\nimport rsapi from '../../rsapi';\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\nimport Axios from 'axios';\nimport StorageMappingFilter from './StorageMappingFilter';\nimport Preloader from '../../components/preloader/preloader.component';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport { groupBy, process } from '@progress/kendo-data-query'; //import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\n\nimport MatrixComponent from '../../components/MatrixComponent';\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid'; //import { ReactSpreadsheetImport } from 'react-spreadsheet-import';\n\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\n\nclass SampleStorageTransaction extends Component {\n  constructor(props) {\n    super(props);\n    this.dragOverCnt = 0;\n    this.isDragDrop = false;\n    this.SEPARATOR = '_';\n    this.uniqueIDArr = [];\n    this.countforTree = 0;\n    this.pointedItem = undefined;\n    this.getitemPath = {};\n\n    this.openModal = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal: true,\n          selectedRecord: {},\n          loadTreeProperties: false,\n          treeData: [{\n            text: \"root\",\n            expanded: true,\n            editable: true,\n            root: true,\n            id: uuid()\n          }],\n          operation: \"create\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         openModal: false, selectedRecord: {}\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedId = this.props.Login.selectedId;\n      let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          selectedId = null;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedId = null;\n        selectedRecord = {};\n      } // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { openModal, loadEsign, selectedRecord, selectedId }\n      // }\n      // this.props.updateStore(updateInfo);\n      // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\n      //      if (!this.state.isFilterPopup) {\n      //         this.getDynamicFilterExecuteData(2)\n      //    }\n\n\n      this.setState({\n        selectedRecord,\n        openModal: false,\n        isInitialRender: true,\n        isFilterPopup: false\n      });\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.loadTreeProperties === true) {\n        this.onSaveProperties(saveType, formRef);\n      } else if (this.state.openSpreadSheet) {\n        this.CRUDSampleStorageTransaction({ ...this.state.editedsheetData,\n          nsamplestoragemappingcode: this.state.isMultiSampleAdd ? Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\") : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\n          nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\n          sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\n          sheetUpdate: true,\n          userinfo: this.props.Login.userInfo,\n          isMultiSampleAdd: this.state.isMultiSampleAdd\n        }, 'create');\n      } else {\n        this.onSaveSampleStorageTransaction(saveType, formRef);\n      }\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.handleDetailPageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData = () => {\n      this.onFilterSubmit();\n    };\n\n    this.onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\n      this.handleSearch();\n      this.setState({\n        searchedTreeData: undefined\n      });\n\n      if (this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      let isOnlyDraft = false;\n\n      if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\n        isOnlyDraft = true;\n      }\n\n      this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\n    };\n\n    this.openStorageMapping = addId => {\n      this.addSampleStorageMapping({\n        userInfo: this.props.Login.userInfo,\n        addId\n      });\n    };\n\n    this.deletesamplestoragemapping = param => {\n      this.CRUDSampleStorageTransaction({\n        'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\n        userinfo: this.props.Login.userInfo\n      }, 'delete');\n    };\n\n    this.addMultipleSample = param => {\n      this.setState({\n        //sheetData: JSON.parse(response[0].data.sheetData),\n        openModal: true,\n        isMultiSampleAdd: true,\n        openSpreadSheet: true,\n        //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n        loading: false\n      });\n    };\n\n    this.opensearch = () => {\n      this.setState({\n        openModal: true,\n        isFilterPopup: true,\n        openSpreadSheet: false,\n        selectedRecord: { ...this.state.submittedselectedRecord\n        } || { ...this.state.selectedRecord\n        }\n      });\n    };\n\n    this.addSample = (param, nflag) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data;\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemappingSheetData\", {\n        isMultiSampleAdd: nflag === 2 ? true : false,\n        nsamplestoragemappingcode: nflag === 2 ? groupedArray.map(groupedItem => groupedItem.items.map(item => item.nsamplestoragemappingcode)).join(\",\") : param.nsamplestoragemappingcode.toString()\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        if (nflag === 2) {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\n            openModal: true,\n            isMultiSampleAdd: true,\n            openSpreadSheet: true,\n            //, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\n            loading: false\n          });\n        } else {\n          this.setState({\n            sheetData: JSON.parse(response[0].data.sheetData),\n            AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\n            openModal: true,\n            isMultiSampleAdd: false,\n            openSpreadSheet: true,\n            editedsheetData: param,\n            Rows: param.nrow,\n            columns: param.ncolumn,\n            loading: false\n          });\n        }\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let selectedRecordFilter = this.state.selectedRecordFilter || {};\n      let selectedProjectType = this.state.selectedProjectType;\n      let masterData = this.state.masterData;\n\n      if (fieldName === 'nstoragecategorycode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        return this.getContainerStructure({\n          userinfo: this.props.Login.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'nprojecttypecode') {\n        if (selectedProjectType.value !== comboData.value) {\n          masterData = { ...masterData,\n            sampleStoragetransaction: []\n          };\n        }\n\n        this.setState({\n          masterData,\n          selectedProjectType: {\n            label: comboData.label,\n            value: comboData.value\n          }\n        });\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        return this.getSampleStorageLocation({\n          userinfo: this.props.Login.userInfo,\n          nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      if (fieldName === 'nsamplestorageversioncode') {\n        selectedRecordFilter[fieldName] = comboData;\n        this.setState({\n          selectedRecordFilter\n        });\n      } else {\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord,\n          selectedRecordFilter\n        });\n      }\n    };\n\n    this.onSaveSampleStorageTransaction = saveType => {\n      let selectedRecord = this.state.selectedRecord;\n      let containerpathCodeArray = [];\n\n      if (this.state.operation === 'create') {\n        containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\n      }\n\n      const inputParam = {\n        nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ? parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ? parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\n        ncontainertypecode: -1,\n        nproductcode: selectedRecord['nproductcode'].value,\n        ndirectionmastercode: -1,\n        ssamplestoragemappingname: \"-\",\n        nsamplestoragecontainerpathcode: this.state.operation === 'create' ? JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\n        containerpathsize: containerpathCodeArray.length,\n        nneedposition: 4,\n        ncontainerstructurecode: -1,\n        nquantity: selectedRecord['nquantity'] ? parseInt(selectedRecord['nquantity']) : 1,\n        userinfo: this.props.Login.userInfo\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\n      }\n    };\n\n    this.getsamplestoragetransaction = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragetransaction\", {\n        userinfo: this.props.Login.userInfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.childDataChange = selectedRecord => {\n      this.setState({\n        selectedRecord: { ...selectedRecord\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.childSheetDataChange = sheetData => {\n      this.setState({\n        // selectedRecord: {\n        //     ...this.state.selectedRecord,\n        //     sheetData: {\n        //         ...this.state.selectedRecord.sheetData,\n        //         ...sheetData\n        //     }\n        // },\n        sheetData: { ...sheetData\n        },\n        isInitialRender: false\n      });\n    };\n\n    this.getActiveSampleStorageMappingById = (inputParam, userinfo) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getActiveSampleStorageMappingById\", {\n        nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\n        userinfo: userinfo\n      });\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          } //,\n          // selectedRecord: {\n          //     ...this.state.selectedRecord\n          //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\n          // }\n          ,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.filterColumnData = (filterValue, filterParam) => {\n      let masterData = filterParam.masterData;\n      let primaryKeyValue = 0;\n      let searchedData = undefined;\n\n      if (filterValue === \"\") {\n        if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\n          primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\n        }\n      } else {\n        if (filterParam.isjsondata) {\n          searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        } else {\n          searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\n        }\n\n        if (searchedData.length > 0) {\n          primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\n        }\n      }\n\n      if (primaryKeyValue !== 0) {\n        this.setState({\n          loading: true\n        });\n        return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject,\n          [filterParam.primaryKeyField]: primaryKeyValue\n        }).then(response => {\n          masterData[\"searchedData\"] = searchedData;\n          masterData = { ...masterData,\n            ...response.data\n          };\n\n          if (filterParam.sortField) {\n            sortData(masterData, filterParam.sortOrder, filterParam.sortField);\n          } else {\n            sortData(masterData);\n          }\n\n          this.setState({\n            masterData,\n            loading: false,\n            skip: 0,\n            take: 10,\n            selectedId: null\n          });\n        }).catch(error => {\n          this.setState({\n            loading: false\n          });\n\n          if (error.response.status === 500) {\n            toast.error(this.props.intl.formatMessage({\n              id: error.message\n            }));\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: error.response.data\n            }));\n          }\n        });\n      } else {\n        masterData[filterParam.selectedObject] = undefined;\n        masterData[\"searchedData\"] = [];\n        Object.keys(masterData).forEach(item => {\n          if (item !== filterParam.inputListName && item !== filterParam.selectedObject && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1) masterData[item] = [];\n        });\n        this.setState({\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        });\n      }\n    };\n\n    this.CRUDSampleStorageTransaction = (inputParam, operation) => {\n      this.setState({\n        loading: true\n      });\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/\" + operation + \"SampleStorageTransaction\", inputParam);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          isInitialRender: true,\n          selectedRecord: {},\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          openModal: false,\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onFilterSubmit = () => {\n      this.setState({\n        loading: true\n      });\n      let inputParamData = {\n        nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n        // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\n        // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let object = {\n          selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\n          // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\n\n        };\n        let filterData = this.generateBreadCrumData(object);\n        this.setState({\n          filterData,\n          masterData: { ...this.state.masterData,\n            ...response[0].data //   sampleStoragetransaction: response[0].data['sampleStoragetransaction'],\n\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onSampleMappingSaveClick = () => {\n      const mandatoryFields = this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined || this.state.selectedRecord[\"nneedposition\"] === false ? [{\n        \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }] : [{\n        \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\",\n        \"dataField\": \"nsamplestoragecontainerpathcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"nproductcode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"ncontainertypecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"ncontainerstructurecode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_DIRECTION\",\n        \"dataField\": \"ndirectionmastercode\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"nquantity\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"selectbox\"\n      }];\n      onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields, this.onSaveClick);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataStateChange: event.dataState\n      });\n    };\n\n    this.approveSampleStorageMapping = event => {\n      let inputParamData = {};\n      this.setState({\n        loading: true\n      });\n      inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/approveSampleStorageMapping\", inputParamData);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        this.setState({\n          masterData: { ...this.state.masterData,\n            ...response[0].data\n          },\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.fetchRecord = data => {\n      this.setState({\n        loading: true\n      });\n      let selectedRecord = this.state.selectedRecord;\n      let inputParamData = {\n        nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\n      const url2 = rsapi.post(\"product/getProduct\", {\n        'userinfo': this.props.Login.userInfo\n      });\n      const url3 = rsapi.post(\"samplestoragetransaction/getEditSampleStorageMapping\", {\n        'nsamplestoragemappingcode': data.nsamplestoragemappingcode,\n        'userinfo': this.props.Login.userInfo\n      });\n      urlArray = [url1, url2, url3];\n      Axios.all(urlArray).then(response => {\n        const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n        const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n        let containerStructure = response[0].data['containerStructure'];\n        const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n        const containerTypeList = containerTypeMap.get(\"OptionList\");\n        const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n        const directionmasterList = directionmasterMap.get(\"OptionList\");\n        const containerstructureMap = constructOptionList(response[2].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n        const containerstructureList = containerstructureMap.get(\"OptionList\");\n        const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n        const productList = productMap.get(\"OptionList\");\n        const editedObject = response[2].data.editsampleStorageMapping;\n        storageMappingMapList.unshift({\n          label: editedObject.scontainerpath,\n          value: editedObject.nsamplestoragecontainerpathcode\n        });\n        selectedRecord = {\n          ndirectionmastercode: {\n            label: editedObject.sdirection,\n            value: editedObject.ndirectionmastercode\n          },\n          nsamplestoragecontainerpathcode: {\n            label: editedObject.scontainerpath,\n            value: editedObject.nsamplestoragecontainerpathcode\n          },\n          nproductcode: {\n            label: editedObject.sproductname,\n            value: editedObject.nproductcode\n          },\n          ncontainertypecode: {\n            label: editedObject.scontainertype,\n            value: editedObject.ncontainertypecode\n          },\n          ncontainerstructurecode: {\n            label: editedObject.scontainerstructurename,\n            value: editedObject.ncontainerstructurecode\n          },\n          nneedposition: editedObject.nneedposition === 3 ? true : false,\n          directionmasterOptions: directionmasterList,\n          nquantity: editedObject.nquantity,\n          nrow: editedObject.nrow,\n          ncolumn: editedObject.ncolumn,\n          nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\n        };\n        this.setState({\n          openSpreadSheet: false,\n          openModal: true,\n          selectedRecord: { ...selectedRecord,\n            storageMappingMapOptions: storageMappingMapList,\n            productOptions: productList,\n            containerTypeOptions: containerTypeList,\n            containerStructureOptions: containerstructureList,\n            isInitialRender: true\n          },\n          operation: 'update',\n          loading: false\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n        }\n      } else if (event.target.type === 'select-one') {\n        selectedRecord[event.target.name] = event.target.value;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handlePageChangeFilter = event => {\n      this.setState({\n        kendoSkip: event.skip,\n        kendoTake: event.take\n      });\n    };\n\n    this.onChange = (immutableTree, config) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"tree\"] = immutableTree;\n      selectedRecord[\"config\"] = config;\n      let tree = QbUtils.getTree(immutableTree);\n      tree = QbUtils.queryString(immutableTree, config, true);\n      selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\n      this.setState({\n        tree: immutableTree,\n        config: config,\n        selectedRecord: { ...selectedRecord\n        }\n      });\n    };\n\n    this.processWithGroups = (data, dataState) => {\n      const aggregates = [{\n        field: \"navailablespace\",\n        aggregate: \"sum\"\n      }];\n      const groups = dataState.group;\n\n      if (groups) {\n        groups.map(group => group.aggregates = aggregates);\n      }\n\n      dataState.group = groups;\n      const newDataState = process(data, dataState); // setGroupIds({\n      //     data: newDataState.data,\n      //     group: dataState.group,\n      // });\n\n      return newDataState;\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.state = {\n      extractedColumnList: [{\n        \"idsName\": \"IDS_STORAGESTRUCTURE\",\n        \"dataField\": \"ssamplestoragelocationname\",\n        \"width\": \"200px\"\n      }, {\n        \"idsName\": \"IDS_SAMPLESTORAGEPATH\",\n        \"dataField\": \"scontainerpath\",\n        \"width\": \"450px\"\n      }, {\n        \"idsName\": \"IDS_AVAILABLESPACE\",\n        \"dataField\": \"navailablespace\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"sproductname\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_PROJECTTYPE\",\n        \"dataField\": \"sprojecttypename\",\n        \"width\": \"100px\"\n      }, //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\n      {\n        \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\",\n        \"dataField\": \"stransdisplaystatus\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERTYPE\",\n        \"dataField\": \"scontainertype\",\n        \"width\": \"100px\"\n      }, {\n        \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\n        \"dataField\": \"scontainerstructurename\",\n        \"width\": \"200px\"\n      }],\n      sheetData: {},\n      selectedRecordFilter: {},\n      treeData: [{\n        title: 'Chicken',\n        children: [{\n          title: 'Egg'\n        }]\n      }],\n      toggleAction: false,\n      treeDataView: undefined,\n      toggleActionView: false,\n      treeData: [{\n        //  text: \"root\",\n        text: this.props.intl.formatMessage({\n          id: \"IDS_ROOT\"\n        }),\n        expanded: true,\n        editable: true,\n        root: true,\n        id: uuid()\n      }],\n      panes: [{\n        size: '50%',\n        scrollable: false\n      }],\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      detailSkip: 0,\n      detailTake: 10,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25,\n      splitChangeWidthPercentage: 22,\n      selectedItem: undefined,\n      loading: false,\n      dataStateChange: {\n        take: 10,\n        skip: 0,\n        group: [{\n          field: \"ssamplestoragelocationname\"\n        }]\n      }\n    };\n    let fields = {};\n\n    if (this.state.extractedColumnList) {\n      this.state.extractedColumnList.map(field => {\n        if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname' && field.dataField !== 'sprojecttypename' && field.dataField !== 'scontainertype' && field.dataField !== 'scontainerstructurename') {\n          fields = { ...fields,\n            [field.dataField]: {\n              \"label\": this.props.intl.formatMessage({\n                id: field.idsName\n              }),\n              \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\n              \"valueSources\": [\"value\", \"func\"],\n              \"mainWidgetProps\": {\n                \"valueLabel\": \"Name\",\n                \"valuePlaceholder\": this.props.intl.formatMessage({\n                  id: field.idsName\n                })\n              }\n            }\n          };\n        }\n      });\n    }\n\n    this.state = { ...this.state,\n      'fields': fields\n    };\n    this.searchRef = React.createRef();\n    this.dragClue = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let {\n      filterData,\n      storageCategoryOptions,\n      selectedRecord,\n      controlMap,\n      userRoleControlRights,\n      storageLocationOptions,\n      sampleStorageVersionOptions,\n      masterData,\n      selectedRecordFilter,\n      fields,\n      selectedProjectType\n    } = this.state;\n    let bool = false; ///////////////////////////////\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(item => queryBuilderFreezer.push({\n        \"value\": item.nsamplestoragelocationcode,\n        \"title\": item.ssamplestoragelocationname\n      }));\n      fields = { ...fields,\n        'nsamplestoragelocationcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_STORAGESTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(item => queryBuilderFreezer.push({\n        \"value\": item.nproductcode,\n        \"title\": item.sproductname\n      }));\n      fields = { ...fields,\n        'nproductcode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_PRODUCT\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      masterData = this.props.Login.masterData;\n      this.props.Login.masterData.projectType && this.props.Login.masterData.projectType.map(item => queryBuilderFreezer.push({\n        \"value\": item.nprojecttypecode,\n        \"title\": item.sprojecttypename\n      })); // fields = {\n      //     ...fields,\n      //     'nprojecttypecode': {\n      //         \"label\": this.props.intl.formatMessage({\n      //             id: \"IDS_PROJECTTYPE\",\n      //         }),\n      //         \"type\": \"select\",\n      //         \"valueSources\": [\"value\"],\n      //         \"fieldSettings\": {\n      //             \"listValues\": queryBuilderFreezer\n      //         }\n      //     }\n      // }\n\n      selectedProjectType = {\n        label: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.sprojecttypename,\n        value: this.props.Login.masterData.selectedProjectType && this.props.Login.masterData.selectedProjectType.nprojecttypecode\n      };\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\", \"sprojecttypename\", undefined, undefined, undefined);\n      masterData['projectTypeOptions'] = filterStorageCategorylist.get(\"OptionList\");\n    }\n\n    if (this.props.Login.masterData.containerType !== previousProps.Login.masterData.containerType) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.containerType && this.props.Login.masterData.containerType.map(item => queryBuilderFreezer.push({\n        \"value\": item.ncontainertypecode,\n        \"title\": item.scontainertype\n      }));\n      fields = { ...fields,\n        'ncontainertypecode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_CONTAINERTYPE\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    }\n\n    if (this.props.Login.masterData.containerStructure !== previousProps.Login.masterData.containerStructure) {\n      let queryBuilderFreezer = [];\n      bool = true;\n      this.props.Login.masterData.containerStructure && this.props.Login.masterData.containerStructure.map(item => queryBuilderFreezer.push({\n        \"value\": item.ncontainerstructurecode,\n        \"title\": item.scontainerstructurename\n      }));\n      fields = { ...fields,\n        'ncontainerstructurecode': {\n          \"label\": this.props.intl.formatMessage({\n            id: \"IDS_CONTAINERSTRUCTURENAME\"\n          }),\n          \"type\": \"select\",\n          \"valueSources\": [\"value\"],\n          \"fieldSettings\": {\n            \"listValues\": queryBuilderFreezer\n          }\n        }\n      };\n    } ///////////////////////////////\n\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      bool = true;\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\n      bool = true;\n      const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\", \"sstoragecategoryname\", undefined, undefined, undefined);\n      storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedStorageCategory) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nstoragecategorycode: storageCategoryOptions.filter(item => item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\n      bool = true;\n      const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageLocation) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestoragelocationcode: storageLocationOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\n      bool = true;\n      const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n\n      if (this.props.Login.masterData.selectedSampleStorageVersion) {\n        selectedRecordFilter = { ...selectedRecordFilter,\n          nsamplestorageversioncode: sampleStorageVersionOptions.filter(item => item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\n        };\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      masterData = this.props.Login.masterData;\n      filterData = this.generateBreadCrumData(this.props.Login.masterData);\n    }\n\n    if (this.state.masterData !== previousState.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData(this.state.masterData);\n    }\n\n    if (bool) {\n      this.setState({\n        storageCategoryOptions,\n        filterData,\n        selectedRecord,\n        controlMap,\n        userRoleControlRights,\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        masterData,\n        selectedRecordFilter,\n        fields,\n        selectedProjectType\n      });\n    }\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height - 50\n      });\n    }\n  }\n\n  generateBreadCrumData(obj) {\n    const breadCrumbData = [];\n\n    if (this.state.masterData && this.state.masterData.filterStorageCategory) {\n      breadCrumbData.push({\n        \"label\": \"IDS_STORAGECATEGORY\",\n        \"value\": obj.selectedStorageCategoryName && obj.selectedStorageCategoryName !== null ? obj.selectedStorageCategoryName : \"NA\"\n      } // ,\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\n      //     \"value\": obj.selectedSampleStorageLocation &&\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\n      //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\n      // },\n      // {\n      //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\n      //     \"value\": obj.selectedSampleStorageVersion &&\n      //         obj.selectedSampleStorageVersion.nversionno !== null ?\n      //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\n      // }\n      );\n    }\n\n    return breadCrumbData;\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.state.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  addSampleStorageMapping() {\n    this.setState({\n      loading: true\n    });\n    let selectedRecord = this.state.selectedRecord;\n    let inputParamData = {\n      // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\n      nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\n      // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\n      userinfo: this.props.Login.userInfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\n    const url2 = rsapi.post(\"product/getProduct\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    const url3 = rsapi.post(\"containertype/getContainerType\", {\n      'userinfo': this.props.Login.userInfo\n    });\n    urlArray = [url1, url2];\n    Axios.all(urlArray).then(response => {\n      const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [], \"nsamplestoragecontainerpathcode\", \"scontainerpath\", undefined, undefined, true);\n      const storageMappingMapList = storageMappingMap.get(\"OptionList\");\n      let containerStructure = response[0].data['containerStructure'];\n      const containerTypeMap = constructOptionList(response[0].data['containerType'] || [], \"ncontainertypecode\", \"scontainertype\", undefined, undefined, true);\n      const containerTypeList = containerTypeMap.get(\"OptionList\");\n      const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [], \"ndirectionmastercode\", \"sdirection\", undefined, undefined, true);\n      const directionmasterList = directionmasterMap.get(\"OptionList\");\n      const containerstructureMap = constructOptionList(response[0].data['containerStructure'] || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, true);\n      const containerstructureList = containerstructureMap.get(\"OptionList\");\n      const productMap = constructOptionList(response[1].data['Product'] || [], \"nproductcode\", \"sproductname\", undefined, undefined, true);\n      const productList = productMap.get(\"OptionList\");\n      this.setState({\n        openModal: true,\n        selectedRecord: { ...selectedRecord,\n          storageMappingMapOptions: storageMappingMapList,\n          productOptions: productList,\n          containerTypeOptions: containerTypeList,\n          directionmasterOptions: directionmasterList,\n          // ncontainertypecode: containerTypeList[0],\n          // containerStructureOptions: containerstructureList,\n          // ncontainerstructurecode: containerstructureList[0],\n          nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\n          ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\n          isInitialRender: true\n        },\n        openSpreadSheet: false,\n        operation: 'create',\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragetransaction/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getDynamicFilterExecuteData(nflag) {\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (nflag === 2 ? true : selectedRecord.filterquery && selectedRecord.filterquery !== \"\") {\n      this.setState({\n        loading: true\n      });\n      let obj = {\n        // ...inputParam.component, \n        label: 'sampleStoragetransaction',\n        valuemember: 'nsamplestoragemappingcode',\n        filterquery: nflag === 2 ? this.state.submittedselectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value : selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value,\n        source: 'view_samplestoragelocation',\n        userinfo: this.props.Login.userInfo\n      };\n      let urlArray = [];\n      const url1 = rsapi.post(\"/samplestoragetransaction/getdynamicfilterexecutedata\", obj);\n      urlArray = [url1];\n      Axios.all(urlArray).then(response => {\n        let masterData = this.state.masterData;\n        masterData = { ...masterData,\n          ...response[0].data\n        };\n        this.setState({\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false,\n          isFilterPopup: false,\n          submittedselectedRecord: nflag === 2 ? { ...this.state.submittedselectedRecord\n          } : { ...selectedRecord\n          },\n          selectedRecord: {},\n          displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\n        });\n      }).catch(error => {\n        this.setState({\n          loading: false\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.info(error.response.data.rtn);\n        }\n      });\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTAFILTER\"\n      }));\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.openModal && nextState.isInitialRender === false && nextState.selectedRecord !== this.state.selectedRecord) {\n      return false;\n    } else if (this.state.openModal && nextState.isInitialRender === false && nextState.sheetData !== this.state.sheetData) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    const addId = this.state.controlMap.has(\"Add SampleStorageTransaction\") && this.state.controlMap.get(\"Add SampleStorageTransaction\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\n    const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\n    const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\n    const addMultipleSampleId = this.state.controlMap.has(\"AddMultipleSample\") && this.state.controlMap.get(\"AddMultipleSample\").ncontrolcode;\n    const addSampleId = this.state.controlMap.has(\"AddSample\") && this.state.controlMap.get(\"AddSample\").ncontrolcode;\n    const filterParam = {\n      inputListName: \"sampleStorageLocation\",\n      selectedObject: \"selectedSampleStorageLocation\",\n      primaryKeyField: \"nsamplestoragelocationcode\",\n      fetchUrl: \"sampleStoragetransaction/getActiveSampleStorageMappingById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: [\"ssamplestoragelocationname\"]\n    };\n    const breadCrumbData = this.state.filterData || [];\n    const confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1477,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1478,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1483,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1484,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nprojecttypecode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nprojecttypecode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isMandatory: false,\n      value: this.state.selectedProjectType ? this.state.selectedProjectType || [] : [],\n      options: this.state.masterData && this.state.masterData.projectTypeOptions || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1485,\n        columnNumber: 37\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1501,\n        columnNumber: 35\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1502,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      isDownloadPDFRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      isDownloadExcelRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      isRefreshRequired: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? true : false,\n      reloadData: e => this.getDynamicFilterExecuteData(2),\n      isCustomButton: true,\n      customButtonlist: this.state.masterData && this.state.masterData.sampleStoragetransaction && this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }).data.length > 0 ? [{\n        label: 'IDS_ADDSAMPLETOMULTIPLEBOX',\n        id: {},\n        hidden: this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1,\n        onClick: () => this.addSample({}, 2),\n        controlname: 'faBoxes'\n      }, {\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }] : [{\n        label: 'IDS_SEARCH',\n        id: {},\n        onClick: () => this.opensearch(),\n        controlname: 'faSearch'\n      }],\n      cellRender: this.cellRender,\n      group: this.state.group || [] // onGroupChange={this.handleGroupChange}\n      ,\n      primaryKeyField: 'nsamplestoragemappingcode',\n      groupable: true,\n      groupfooter: true,\n      aggregateLabel: 'IDS_AVAILABLESPACE',\n      aggregatedColumn: 'navailablespace',\n      data: this.state.masterData && this.state.masterData.sampleStoragetransaction,\n      dataResult: // process(this.state.masterData.sampleStoragetransaction || [],\n      //     this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 })\n      this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n        take: 10,\n        skip: 0\n      }) : [],\n      dataState: this.state.dataStateChange ? this.state.dataStateChange : {\n        skip: 0,\n        take: 10\n      },\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.state.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      userInfo: this.props.Login.userInfo,\n      deleteRecord: this.deleteRecord // addRecord={() => this.openStorageMapping()}\n      ,\n      pageable: true,\n      scrollable: 'scrollable' // isComponent={true}\n      ,\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDSAMPLETOABOX\"\n        }),\n        controlname: \"faBox\",\n        hidden: this.state.userRoleControlRights.indexOf(addSampleId) === -1,\n        objectName: \"add\",\n        onClick: param => this.addSample(param, 1)\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1503,\n        columnNumber: 37\n      }\n    }))))), this.state.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.state.openModal,\n      closeModal: this.closeModal,\n      hideSave: true,\n      needClose: this.state.isFilterPopup ? false : true,\n      showSubmit: this.state.openSpreadSheet ? false : true,\n      size: this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\",\n      operation: \"\",\n      inputParam: this.props.Login.inputParam,\n      screenName: this.state.isFilterPopup ? \"\" : this.state.isMultiSampleAdd ? this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGE\"\n      }) : this.state.editedsheetData.scontainerpath,\n      onSaveClick: this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick,\n      esign: this.props.Login.loadEsign // className={\"wide-popup\"}\n      ,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.state.isFilterPopup ? /*#__PURE__*/React.createElement(FilterQueryBuilder, {\n        fields: this.state.fields,\n        isSampleStorage: true,\n        queryArray: this.state.queryArray,\n        skip: this.state.kendoSkip,\n        take: this.state.kendoTake,\n        onChange: this.onChange,\n        tree: this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree,\n        gridColumns: this.slideList,\n        filterData: this.props.Login.slideResult || [],\n        handlePageChange: this.handlePageChangeFilter,\n        static: true,\n        userInfo: this.props.Login.userInfo,\n        updateStore: this.props.updateStore,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1623,\n          columnNumber: 33\n        }\n      }) : this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1639,\n          columnNumber: 37\n        }\n      }) : this.state.openSpreadSheet ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MatrixComponent, {\n        updateStore: this.props.updateStore,\n        intl: this.props.intl,\n        Rows: this.state.Rows || 1,\n        AdditionalFieldsComponentData: this.state.AdditionalFieldsComponentData,\n        userInfo: this.props.Login.userInfo,\n        columns: this.state.columns || 1,\n        selectedRecord: this.state.selectedRecord.sheetData || {},\n        sheetData: this.state.sheetData || {},\n        isMultiSampleAdd: this.state.isMultiSampleAdd,\n        childSheetDataChange: this.childSheetDataChange,\n        editedsheetData: this.state.editedsheetData,\n        nbarcodedescription: this.props.Login.settings && parseInt(this.props.Login.settings[36]),\n        nbarcodeLength: this.props.Login.settings && parseInt(this.props.Login.settings[37]),\n        sbarcodeboxWidth: this.props.Login.settings && this.props.Login.settings[38],\n        multipleSheetData: this.state.masterData && this.state.masterData.sampleStoragetransaction && process(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange ? this.state.dataStateChange : {\n          skip: 0,\n          take: 10\n        }).data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1653,\n          columnNumber: 45\n        }\n      }))) : /*#__PURE__*/React.createElement(AddSampleStorageMapping, {\n        operation: this.state.operation,\n        selectedRecordFilter: this.state.selectedRecordFilter,\n        onInputChange: e => this.onInputChange(e),\n        onComboChange: this.onComboChange,\n        selectedRecord: this.state.selectedRecord || {},\n        childDataChange: this.childDataChange,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1675,\n          columnNumber: 41\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1602,\n        columnNumber: 21\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService\n})(injectIntl(SampleStorageTransaction));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/basemaster/SampleStorageTransaction.jsx"],"names":["React","Component","connect","injectIntl","FormattedMessage","Row","Col","Card","Nav","FormGroup","FormLabel","Form","Button","FormControl","FontAwesomeIcon","PerfectScrollbar","faTrashAlt","faCopy","faPencilAlt","faSync","faPlus","faThumbsUp","faBoxOpen","faBox","faLocationArrow","faFolderMinus","faFolder","faFolderOpen","faArrowRight","faSearch","faTimes","faArrowDown","faHandPointLeft","faArrowUp","faClone","faPuzzlePiece","faCalculator","toast","ListMaster","constructOptionList","getControlMap","onSaveMandatoryValidation","searchData","searchJsonData","showEsign","sortData","ReadOnlyText","ContentPanel","SearchIcon","DataGrid","BasicConfig","BasicFuncs","Utils","QbUtils","SlideOutModal","callService","crudMaster","validateEsignCredential","updateStore","getSelectedSampleStorageLocation","filterColumnData","changeStorageCategoryFilter","openPropertyModal","editSampleStorageLocation","approveSampleStorageLocation","getSelectedSampleStorageVersion","fetchStorageCategory","copySampleStorageVersion","crudSampleStorageLocation","DEFAULT_RETURN","ListWrapper","MediaLabel","ProductList","uuid","TreeEditable","TreeViewEditable","getItemPath","mapTree","removeItems","ConfirmMessage","AddTreeview","AddTreeProperties","Splitter","TransactionListMaster","BreadcrumbComponent","SplitterLayout","StorageCategoryFilter","transactionStatus","Esign","TreeViewDragAnalyzer","moveTreeViewItem","ModalShow","rsapi","AddSampleStorageMapping","Axios","StorageMappingFilter","Preloader","TransactionListMasterJsonView","groupBy","process","MatrixComponent","FilterQueryBuilder","Grid","GridColumn","FormSelectSearch","SampleStorageTransaction","constructor","props","dragOverCnt","isDragDrop","SEPARATOR","uniqueIDArr","countforTree","pointedItem","undefined","getitemPath","openModal","updateInfo","typeName","data","selectedRecord","loadTreeProperties","treeData","text","expanded","editable","root","id","operation","closeModal","loadEsign","Login","selectedId","state","setState","isInitialRender","isFilterPopup","onInputChange","event","target","type","name","checked","value","onSaveClick","saveType","formRef","onSaveProperties","openSpreadSheet","CRUDSampleStorageTransaction","editedsheetData","nsamplestoragemappingcode","isMultiSampleAdd","Object","keys","sheetData","map","join","toString","nsamplestoragelocationcode","JSON","stringify","sheetUpdate","userinfo","userInfo","onSaveSampleStorageTransaction","paneSizeChange","d","splitChangeWidthPercentage","handlePageChange","e","skip","take","handleDetailPageChange","openFilter","showFilter","closeFilter","reloadData","onFilterSubmit","onEditSampleStorageLocation","selectedSampleStorageVersion","editId","handleSearch","searchedTreeData","searchRef","current","isOnlyDraft","masterData","sampleStorageVersion","length","openStorageMapping","addId","addSampleStorageMapping","deletesamplestoragemapping","param","selectedSampleStorageLocation","addMultipleSample","loading","opensearch","submittedselectedRecord","addSample","nflag","urlArray","groupedArray","processWithGroups","sampleStoragetransaction","dataStateChange","url1","post","groupedItem","items","item","all","then","response","parse","AdditionalFieldsComponentData","Rows","nrow","columns","ncolumn","catch","error","status","message","warn","onComboChange","comboData","fieldName","selectedRecordFilter","selectedProjectType","getSampleStorageLocation","nstoragecategorycode","getContainerStructure","ncontainertypecode","label","containerpathCodeArray","inputParam","nsamplestoragetransactioncode","parseInt","nproductcode","ndirectionmastercode","ssamplestoragemappingname","nsamplestoragecontainerpathcode","containerpathsize","nneedposition","ncontainerstructurecode","nquantity","userRoleControlRights","nformcode","ncontrolcode","screenData","getsamplestoragetransaction","childDataChange","childSheetDataChange","getActiveSampleStorageMappingById","filterValue","filterParam","primaryKeyValue","searchedData","inputListName","primaryKeyField","isjsondata","searchFieldList","fetchUrl","fecthInputObject","sortField","sortOrder","intl","formatMessage","selectedObject","forEach","unchangeList","indexOf","modalName","inputParamData","object","selectedStorageCategoryName","sstoragecategoryname","filterData","generateBreadCrumData","onSampleMappingSaveClick","mandatoryFields","dataState","approveSampleStorageMapping","fetchRecord","url2","url3","storageMappingMap","storageMappingMapList","get","containerStructure","containerTypeMap","containerTypeList","directionmasterMap","directionmasterList","containerstructureMap","containerstructureList","productMap","productList","editedObject","editsampleStorageMapping","unshift","scontainerpath","sdirection","sproductname","scontainertype","scontainerstructurename","directionmasterOptions","storageMappingMapOptions","productOptions","containerTypeOptions","containerStructureOptions","onInputOnChange","handlePageChangeFilter","kendoSkip","kendoTake","onChange","immutableTree","config","tree","getTree","queryString","sqlFormat","aggregates","field","aggregate","groups","group","newDataState","validateEsign","inputData","sreason","nreasoncode","spredefinedreason","password","extractedColumnList","title","children","toggleAction","treeDataView","toggleActionView","panes","size","scrollable","controlMap","Map","detailSkip","detailTake","settings","selectedItem","fields","dataField","idsName","createRef","dragClue","confirmMessage","getDerivedStateFromProps","masterStatus","componentDidUpdate","previousProps","previousState","storageCategoryOptions","storageLocationOptions","sampleStorageVersionOptions","bool","sampleStorageLocation","queryBuilderFreezer","push","ssamplestoragelocationname","sampleType","projectType","nprojecttypecode","sprojecttypename","filterStorageCategorylist","containerType","values","filterStorageCategory","selectedStorageCategory","filter","sampleStorageLocationList","sampleStorageVersionList","nsamplestorageversioncode","componentDidMount","parentHeight","height","clientHeight","firstPane","obj","breadCrumbData","containerStructureList","getDynamicFilterExecuteData","filterquery","valuemember","source","displayQuery","info","rtn","shouldComponentUpdate","nextProps","nextState","render","has","deleteId","copyId","approveId","addMultipleSampleId","addSampleId","projectTypeOptions","hidden","onClick","controlname","cellRender","deleteRecord","objectName","bind","queryArray","slideList","slideResult","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel, Form, Button, FormControl } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { faTrashAlt, faCopy, faPencilAlt, faSync, faPlus, faThumbsUp, faBoxOpen, faBox, faLocationArrow, faFolderMinus, faFolder, faFolderOpen, faArrowRight, faSearch, faTimes, faArrowDown, faHandPointLeft, faArrowUp, faClone, faPuzzlePiece, faCalculator } from '@fortawesome/free-solid-svg-icons';\r\nimport { toast } from 'react-toastify';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { constructOptionList, getControlMap, onSaveMandatoryValidation, searchData, searchJsonData, showEsign, sortData } from '../../components/CommonScript';\r\nimport { ReadOnlyText, ContentPanel, SearchIcon } from '../../components/App.styles';\r\n//import SortableTree from 'react-sortable-tree'; \r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport {\r\n    BasicConfig, BasicFuncs,\r\n    Utils as QbUtils,\r\n} from \"@react-awesome-query-builder/ui\";\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSelectedSampleStorageLocation, filterColumnData, changeStorageCategoryFilter,\r\n    openPropertyModal, editSampleStorageLocation, approveSampleStorageLocation, getSelectedSampleStorageVersion, fetchStorageCategory, copySampleStorageVersion,\r\n    crudSampleStorageLocation\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { MediaLabel, ProductList } from '../product/product.styled';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport { uuid } from \"uuidv4\";\r\nimport TreeEditable from \"../../components/form-tree-editable/TreeEditable\";\r\nimport TreeViewEditable from \"../../components/form-tree-editable/form-tree-editable.component\";\r\nimport { getItemPath, mapTree, removeItems } from \"@progress/kendo-react-treelist\";\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport AddTreeview from './AddTreeview';\r\nimport AddTreeProperties from './AddTreeProperties';\r\nimport { Splitter } from '@progress/kendo-react-layout';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport StorageCategoryFilter from './StorageCategoryFilter';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport Esign from '../audittrail/Esign';\r\nimport { TreeViewDragAnalyzer, moveTreeViewItem } from '@progress/kendo-react-treeview';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport rsapi from '../../rsapi';\r\nimport AddSampleStorageMapping from './AddSampleStorageMapping';\r\nimport Axios from 'axios';\r\nimport StorageMappingFilter from './StorageMappingFilter';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\n\r\nimport { groupBy, process } from '@progress/kendo-data-query';\r\n//import Spreadsheet from '../../components/Spreadsheet/Spreadsheet';\r\nimport MatrixComponent from '../../components/MatrixComponent';\r\nimport FilterQueryBuilder from '../../components/FilterQueryBuilder';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\n//import { ReactSpreadsheetImport } from 'react-spreadsheet-import';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n\r\n\r\nclass SampleStorageTransaction extends Component {\r\n    dragOverCnt = 0;\r\n    isDragDrop = false;\r\n    SEPARATOR = '_';\r\n    uniqueIDArr = [];\r\n    countforTree = 0;\r\n    pointedItem = undefined\r\n    getitemPath = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            extractedColumnList: [\r\n                { \"idsName\": \"IDS_STORAGESTRUCTURE\", \"dataField\": \"ssamplestoragelocationname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_SAMPLESTORAGEPATH\", \"dataField\": \"scontainerpath\", \"width\": \"450px\" },\r\n                { \"idsName\": \"IDS_AVAILABLESPACE\", \"dataField\": \"navailablespace\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_PROJECTTYPE\", \"dataField\": \"sprojecttypename\", \"width\": \"100px\" },\r\n                //{ \"idsName\": \"IDS_VISITNUMBER\", \"dataField\": \"svisitnumber\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_NEEDPREDEFINEDSTRUCURE\", \"dataField\": \"stransdisplaystatus\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"scontainertype\", \"width\": \"100px\" },\r\n                { \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\", \"dataField\": \"scontainerstructurename\", \"width\": \"200px\" },\r\n\r\n            ],\r\n            sheetData: {},\r\n            selectedRecordFilter: {},\r\n            treeData: [{ title: 'Chicken', children: [{ title: 'Egg' }] }],\r\n            toggleAction: false,\r\n            treeDataView: undefined,\r\n            toggleActionView: false,\r\n            treeData: [\r\n                {\r\n                    //  text: \"root\",\r\n                    text: this.props.intl.formatMessage({ id: \"IDS_ROOT\" }),\r\n                    expanded: true,\r\n                    editable: true,\r\n                    root: true,\r\n                    id: uuid(),\r\n                }],\r\n            panes: [{\r\n                size: '50%',\r\n                scrollable: false\r\n            }],\r\n            selectedRecord: {},\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            detailSkip: 0,\r\n            detailTake: 10,\r\n            take: this.props.Login.settings ?\r\n                this.props.Login.settings[3] : 25,\r\n            splitChangeWidthPercentage: 22,\r\n            selectedItem: undefined,\r\n            loading: false,\r\n            dataStateChange: {\r\n                take: 10,\r\n                skip: 0,\r\n                group: [\r\n                    {\r\n                        field: \"ssamplestoragelocationname\",\r\n                    },\r\n                ],\r\n            }\r\n        };\r\n        let fields = {};\r\n        if (this.state.extractedColumnList) {\r\n            this.state.extractedColumnList.map(field => {\r\n                if (field.dataField !== 'ssamplestoragelocationname' && field.dataField !== 'sproductname'\r\n                    && field.dataField !== 'sprojecttypename' && field.dataField !== 'scontainertype'\r\n                    && field.dataField !== 'scontainerstructurename') {\r\n                    fields = {\r\n                        ...fields,\r\n                        [field.dataField]: {\r\n                            \"label\":\r\n                                this.props.intl.formatMessage({\r\n                                    id: field.idsName,\r\n                                })\r\n                            ,\r\n                            \"type\": field.dataField === 'navailablespace' ? \"number\" : \"text\",\r\n                            \"valueSources\": [\"value\", \"func\"],\r\n\r\n                            \"mainWidgetProps\": {\r\n                                \"valueLabel\": \"Name\",\r\n                                \"valuePlaceholder\": this.props.intl.formatMessage({\r\n                                    id: field.idsName\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        this.state = { ... this.state, 'fields': fields }\r\n        this.searchRef = React.createRef();\r\n        this.dragClue = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let { filterData, storageCategoryOptions,\r\n            selectedRecord, controlMap,\r\n            userRoleControlRights, storageLocationOptions,\r\n            sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType } = this.state\r\n        let bool = false;\r\n        ///////////////////////////////\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleStorageLocation && this.props.Login.masterData.sampleStorageLocation.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nsamplestoragelocationcode, \"title\": item.ssamplestoragelocationname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nsamplestoragelocationcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_STORAGESTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleType !== previousProps.Login.masterData.sampleType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.sampleType && this.props.Login.masterData.sampleType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nproductcode, \"title\": item.sproductname })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'nproductcode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_PRODUCT\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.projectType !== previousProps.Login.masterData.projectType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            this.props.Login.masterData.projectType && this.props.Login.masterData.projectType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.nprojecttypecode, \"title\": item.sprojecttypename })\r\n            )\r\n            // fields = {\r\n            //     ...fields,\r\n            //     'nprojecttypecode': {\r\n            //         \"label\": this.props.intl.formatMessage({\r\n            //             id: \"IDS_PROJECTTYPE\",\r\n            //         }),\r\n            //         \"type\": \"select\",\r\n            //         \"valueSources\": [\"value\"],\r\n            //         \"fieldSettings\": {\r\n            //             \"listValues\": queryBuilderFreezer\r\n            //         }\r\n            //     }\r\n            // }\r\n            selectedProjectType = {\r\n                label: this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.sprojecttypename, value:\r\n                    this.props.Login.masterData.selectedProjectType &&\r\n                    this.props.Login.masterData.selectedProjectType.nprojecttypecode\r\n            };\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.projectType || [], \"nprojecttypecode\",\r\n                \"sprojecttypename\", undefined, undefined, undefined);\r\n            masterData['projectTypeOptions'] = filterStorageCategorylist.get(\"OptionList\");\r\n        }\r\n        if (this.props.Login.masterData.containerType !== previousProps.Login.masterData.containerType) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.containerType && this.props.Login.masterData.containerType.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.ncontainertypecode, \"title\": item.scontainertype })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'ncontainertypecode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_CONTAINERTYPE\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        } if (this.props.Login.masterData.containerStructure !== previousProps.Login.masterData.containerStructure) {\r\n            let queryBuilderFreezer = [];\r\n            bool = true;\r\n            this.props.Login.masterData.containerStructure && this.props.Login.masterData.containerStructure.map(\r\n                (item) => queryBuilderFreezer.push({ \"value\": item.ncontainerstructurecode, \"title\": item.scontainerstructurename })\r\n            )\r\n            fields = {\r\n                ...fields,\r\n                'ncontainerstructurecode': {\r\n                    \"label\": this.props.intl.formatMessage({\r\n                        id: \"IDS_CONTAINERSTRUCTURENAME\",\r\n                    }),\r\n                    \"type\": \"select\",\r\n                    \"valueSources\": [\"value\"],\r\n                    \"fieldSettings\": {\r\n                        \"listValues\": queryBuilderFreezer\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        ///////////////////////////////\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            bool = true;\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.filterStorageCategory !== previousProps.Login.masterData.filterStorageCategory) {\r\n            bool = true;\r\n            const filterStorageCategorylist = constructOptionList(this.props.Login.masterData.filterStorageCategory || [], \"nstoragecategorycode\",\r\n                \"sstoragecategoryname\", undefined, undefined, undefined);\r\n            storageCategoryOptions = filterStorageCategorylist.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedStorageCategory) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nstoragecategorycode: storageCategoryOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedStorageCategory.nstoragecategorycode)[0]\r\n                }\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.sampleStorageLocation !== previousProps.Login.masterData.sampleStorageLocation) {\r\n            bool = true;\r\n            const sampleStorageLocationList = constructOptionList(this.props.Login.masterData.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n            storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageLocation) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode)[0]\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n\r\n        if (this.props.Login.masterData.sampleStorageVersion !== previousProps.Login.masterData.sampleStorageVersion) {\r\n            bool = true;\r\n            const sampleStorageVersionList = constructOptionList(this.props.Login.masterData.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                \"nversionno\", undefined, undefined, undefined);\r\n            sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n            if (this.props.Login.masterData.selectedSampleStorageVersion) {\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.filter(item =>\r\n                        item.value === this.props.Login.masterData.selectedSampleStorageVersion.nsamplestorageversioncode)[0]\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            masterData = this.props.Login.masterData;\r\n            filterData = this.generateBreadCrumData(this.props.Login.masterData);\r\n\r\n        }\r\n        if (this.state.masterData !== previousState.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData(this.state.masterData);\r\n\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                storageCategoryOptions, filterData,\r\n                selectedRecord, controlMap,\r\n                userRoleControlRights, storageLocationOptions,\r\n                sampleStorageVersionOptions, masterData, selectedRecordFilter, fields, selectedProjectType\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    openModal = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                openModal: true, selectedRecord: {}, loadTreeProperties: false,\r\n                treeData: [\r\n                    {\r\n                        text: \"root\",\r\n                        expanded: true,\r\n                        editable: true,\r\n                        root: true,\r\n                        id: uuid(),\r\n                    },\r\n                ], operation: \"create\"\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         openModal: false, selectedRecord: {}\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let selectedRecord = this.state.selectedRecord; //this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Approve\" || this.props.Login.operation === \"copy\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                selectedId = null;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedId = null;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { openModal, loadEsign, selectedRecord, selectedId }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        // this.getsamplestoragetransaction({}, this.props.Login.userInfo);\r\n        //      if (!this.state.isFilterPopup) {\r\n        //         this.getDynamicFilterExecuteData(2)\r\n        //    }\r\n        this.setState({\r\n            selectedRecord,\r\n            openModal: false, isInitialRender: true\r\n            , isFilterPopup: false\r\n        })\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    };\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        if (this.props.Login.loadTreeProperties === true) {\r\n            this.onSaveProperties(saveType, formRef);\r\n        } else if (this.state.openSpreadSheet) {\r\n            this.CRUDSampleStorageTransaction({\r\n                ...this.state.editedsheetData,\r\n                nsamplestoragemappingcode: this.state.isMultiSampleAdd ?\r\n                    Object.keys(this.state.sheetData).map(nsamplestoragemappingcode => nsamplestoragemappingcode).join(\",\")\r\n                    : this.state.editedsheetData.nsamplestoragemappingcode.toString(),\r\n                nsamplestoragelocationcode: this.state.editedsheetData.nsamplestoragelocationcode,\r\n                sheetData: JSON.stringify(this.state.sheetData ? this.state.sheetData : {}),\r\n                sheetUpdate: true,\r\n                userinfo: this.props.Login.userInfo,\r\n                isMultiSampleAdd: this.state.isMultiSampleAdd\r\n            }, 'create');\r\n        } else {\r\n            this.onSaveSampleStorageTransaction(saveType, formRef);\r\n        }\r\n    };\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    handleDetailPageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    generateBreadCrumData(obj) {\r\n        const breadCrumbData = [];\r\n        if (this.state.masterData && this.state.masterData.filterStorageCategory) {\r\n\r\n            breadCrumbData.push(\r\n                {\r\n                    \"label\": \"IDS_STORAGECATEGORY\",\r\n                    \"value\": obj.selectedStorageCategoryName &&\r\n                        obj.selectedStorageCategoryName !== null ?\r\n                        obj.selectedStorageCategoryName : \"NA\"\r\n\r\n                }\r\n                // ,\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYLOCATION\",\r\n                //     \"value\": obj.selectedSampleStorageLocation &&\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname !== null ?\r\n                //         obj.selectedSampleStorageLocation.ssamplestoragelocationname : \"NA\"\r\n                // },\r\n                // {\r\n                //     \"label\": \"IDS_STORAGECATEGORYVERSION\",\r\n                //     \"value\": obj.selectedSampleStorageVersion &&\r\n                //         obj.selectedSampleStorageVersion.nversionno !== null ?\r\n                //         obj.selectedSampleStorageVersion.nversionno : \"NA\"\r\n                // }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    reloadData = () => {\r\n        this.onFilterSubmit();\r\n    }\r\n    onEditSampleStorageLocation = (selectedSampleStorageVersion, userInfo, editId) => {\r\n        this.handleSearch();\r\n        this.setState({ searchedTreeData: undefined })\r\n        if (this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n        }\r\n\r\n        let isOnlyDraft = false;\r\n        if (this.props.Login.masterData.sampleStorageVersion && this.props.Login.masterData.sampleStorageVersion.length > 1) {\r\n            isOnlyDraft = true;\r\n        }\r\n        this.props.editSampleStorageLocation(selectedSampleStorageVersion, userInfo, isOnlyDraft, editId);\r\n    }\r\n    openStorageMapping = (addId) => {\r\n        this.addSampleStorageMapping({ userInfo: this.props.Login.userInfo, addId });\r\n    }\r\n    deletesamplestoragemapping = (param) => {\r\n        this.CRUDSampleStorageTransaction({\r\n            'nsamplestoragelocationcode': this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            'nsamplestoragemappingcode': param.nsamplestoragemappingcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }, 'delete');\r\n    }\r\n    addMultipleSample = (param) => {\r\n        this.setState({\r\n            //sheetData: JSON.parse(response[0].data.sheetData),\r\n            openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n            loading: false\r\n        })\r\n    }\r\n    // opensearch=()={\r\n\r\n    // }\r\n\r\n    opensearch = () => {\r\n        this.setState({\r\n            openModal: true, isFilterPopup: true, openSpreadSheet: false, selectedRecord: { ...this.state.submittedselectedRecord } ||\r\n                { ...this.state.selectedRecord }\r\n        })\r\n    }\r\n    addSample = (param, nflag) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        let groupedArray = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n            this.state.dataStateChange ? this.state.dataStateChange : {\r\n                take: 10,\r\n                skip: 0\r\n            }).data;\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemappingSheetData\",\r\n            {\r\n                isMultiSampleAdd: (nflag === 2) ? true : false,\r\n                nsamplestoragemappingcode:\r\n                    (nflag === 2) ? groupedArray.map(groupedItem => groupedItem.items.map(item => item.nsamplestoragemappingcode)).join(\",\")\r\n                        : param.nsamplestoragemappingcode.toString()\r\n            });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                if (nflag === 2) {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\r\n                        openModal: true, isMultiSampleAdd: true, openSpreadSheet: true,//, editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        sheetData: JSON.parse(response[0].data.sheetData),\r\n                        AdditionalFieldsComponentData: JSON.parse(response[0].data.AdditionalFieldsComponentData),\r\n                        openModal: true, isMultiSampleAdd: false, openSpreadSheet: true,\r\n                        editedsheetData: param, Rows: param.nrow, columns: param.ncolumn,\r\n                        loading: false\r\n                    })\r\n                }\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let selectedProjectType=this.state.selectedProjectType;\r\n        let masterData = this.state.masterData;\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            return this.getContainerStructure({\r\n                userinfo: this.props.Login.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'nprojecttypecode') {\r\n            if(selectedProjectType.value!==comboData.value){\r\n                masterData = {\r\n                    ...masterData,\r\n                    sampleStoragetransaction: []\r\n                }\r\n            } \r\n            this.setState({ masterData,selectedProjectType: { label: comboData.label, value: comboData.value } })\r\n\r\n        } else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            return this.getSampleStorageLocation({\r\n                userinfo: this.props.Login.userInfo,\r\n                nstoragecategorycode: this.state.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        if (fieldName === 'nsamplestorageversioncode') {\r\n            selectedRecordFilter[fieldName] = comboData;\r\n            this.setState({ selectedRecordFilter });\r\n\r\n        } else {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord, selectedRecordFilter });\r\n        }\r\n\r\n\r\n    }\r\n\r\n    onSaveSampleStorageTransaction = (saveType) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let containerpathCodeArray = [];\r\n        if (this.state.operation === 'create') {\r\n            containerpathCodeArray = selectedRecord['nsamplestoragecontainerpathcode'].map(item => item.value);\r\n        }\r\n        const inputParam =\r\n        {\r\n            nsamplestoragetransactioncode: selectedRecord['nsamplestoragetransactioncode'] ?\r\n                parseInt(selectedRecord['nsamplestoragetransactioncode']) : 0,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            nsamplestoragemappingcode: selectedRecord['nsamplestoragemappingcode'] ?\r\n                parseInt(selectedRecord['nsamplestoragemappingcode']) : 0,\r\n            ncontainertypecode: -1,\r\n            nproductcode: selectedRecord['nproductcode'].value,\r\n            ndirectionmastercode: -1,\r\n            ssamplestoragemappingname: \"-\",\r\n            nsamplestoragecontainerpathcode: this.state.operation === 'create' ?\r\n                JSON.stringify(containerpathCodeArray) : parseInt(selectedRecord['nsamplestoragecontainerpathcode'].value),\r\n            containerpathsize: containerpathCodeArray.length,\r\n            nneedposition: 4,\r\n            ncontainerstructurecode: -1, nquantity: selectedRecord['nquantity'] ?\r\n                parseInt(selectedRecord['nquantity']) : 1,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.CRUDSampleStorageTransaction(inputParam, this.state.operation);\r\n        }\r\n    }\r\n    getsamplestoragetransaction = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragetransaction\", {\r\n            userinfo: this.props.Login.userInfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    childDataChange = (selectedRecord) => {\r\n        this.setState({\r\n            selectedRecord: {\r\n                ...selectedRecord\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    childSheetDataChange = (sheetData) => {\r\n\r\n        this.setState({\r\n            // selectedRecord: {\r\n            //     ...this.state.selectedRecord,\r\n            //     sheetData: {\r\n            //         ...this.state.selectedRecord.sheetData,\r\n            //         ...sheetData\r\n            //     }\r\n            // },\r\n            sheetData: {\r\n                ...sheetData\r\n            },\r\n            isInitialRender: false\r\n        });\r\n    }\r\n    // Actions start\r\n    getActiveSampleStorageMappingById = (inputParam, userinfo) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getActiveSampleStorageMappingById\", {\r\n            nsamplestoragelocationcode: inputParam['selectedSampleStorageLocation'][0].nsamplestoragelocationcode,\r\n            userinfo: userinfo\r\n        });\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    }//,\r\n                    // selectedRecord: {\r\n                    //     ...this.state.selectedRecord\r\n                    //    // , sheetData: JSON.parse(response[0].data.selectedSampleStoragemapping.jsondata.value)\r\n                    // }\r\n                    ,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n    filterColumnData = (filterValue, filterParam) => {\r\n        let masterData = filterParam.masterData;\r\n        let primaryKeyValue = 0;\r\n        let searchedData = undefined;\r\n        if (filterValue === \"\") {\r\n            if (masterData[filterParam.inputListName] && masterData[filterParam.inputListName].length > 0) {\r\n                primaryKeyValue = masterData[filterParam.inputListName][0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n        else {\r\n            if (filterParam.isjsondata) {\r\n                searchedData = searchJsonData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n            }\r\n            else {\r\n                searchedData = searchData(filterValue, masterData[filterParam.inputListName], filterParam.searchFieldList || []);\r\n\r\n            }\r\n            if (searchedData.length > 0) {\r\n                primaryKeyValue = searchedData[0][filterParam.primaryKeyField];\r\n            }\r\n        }\r\n\r\n        if (primaryKeyValue !== 0) {\r\n            this.setState({ loading: true });\r\n            return rsapi.post(filterParam.fetchUrl, { ...filterParam.fecthInputObject, [filterParam.primaryKeyField]: primaryKeyValue })\r\n                .then(response => {\r\n                    masterData[\"searchedData\"] = searchedData;\r\n                    masterData = { ...masterData, ...response.data };\r\n\r\n                    if (filterParam.sortField) {\r\n                        sortData(masterData, filterParam.sortOrder, filterParam.sortField);\r\n                    }\r\n                    else {\r\n                        sortData(masterData);\r\n                    }\r\n                    this.setState({ masterData, loading: false, skip: 0, take: 10, selectedId: null });\r\n                })\r\n                .catch(error => {\r\n                    this.setState({ loading: false });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            masterData[filterParam.selectedObject] = undefined;\r\n            masterData[\"searchedData\"] = [];\r\n            Object.keys(masterData).forEach(item => {\r\n                if (item !== filterParam.inputListName && item !== filterParam.selectedObject\r\n                    && filterParam.unchangeList && filterParam.unchangeList.indexOf(item) === -1)\r\n                    masterData[item] = [];\r\n            })\r\n            this.setState({\r\n                masterData, operation: null, modalName: undefined,\r\n                loading: false\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n\r\n    CRUDSampleStorageTransaction = (inputParam, operation) => {\r\n        this.setState({ loading: true })\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/\" + operation + \"SampleStorageTransaction\", inputParam);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    isInitialRender: true,\r\n                    selectedRecord: {},\r\n                    masterData: {\r\n                        ...this.state.masterData, ...response[0].data\r\n                    },\r\n                    openModal: false,\r\n                    loading: false\r\n                });\r\n\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n\r\n    }\r\n\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.state.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.setState({ loading: true })\r\n        let inputParamData = {\r\n            nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            // nsamplestoragelocationcode: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].value,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getsamplestoragemapping\", inputParamData);\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let object = {\r\n                    selectedStorageCategoryName: this.state.selectedRecordFilter[\"nstoragecategorycode\"].item.sstoragecategoryname,\r\n                    // ssamplestoragelocationname: this.state.selectedRecordFilter[\"nsamplestoragelocationcode\"].item.ssamplestoragelocationname,\r\n                    // selectedSampleStorageVersion: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].item.nversionno,\r\n                }\r\n                let filterData = this.generateBreadCrumData(object);\r\n\r\n                this.setState({\r\n                    filterData,\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data,\r\n                        //   sampleStoragetransaction: response[0].data['sampleStoragetransaction'],\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    addSampleStorageMapping() {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            // nstoragecategorycode: this.state.selectedRecordFilter[\"nstoragecategorycode\"].value,\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            // nsamplestorageversioncode: this.state.selectedRecordFilter[\"nsamplestorageversioncode\"].value,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"containertype/getContainerType\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n                const containerstructureMap = constructOptionList(response[0].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                this.setState({\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        directionmasterOptions: directionmasterList,\r\n                        // ncontainertypecode: containerTypeList[0],\r\n                        // containerStructureOptions: containerstructureList,\r\n                        // ncontainerstructurecode: containerstructureList[0],\r\n                        nrow: containerStructure.length > 0 ? containerStructure[0].nrow : 1,\r\n                        ncolumn: containerStructure.length > 0 ? containerStructure[0].ncolumn : 1,\r\n                        isInitialRender: true\r\n\r\n                    },\r\n                    openSpreadSheet: false,\r\n                    operation: 'create',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    onSampleMappingSaveClick = () => {\r\n        const mandatoryFields = this.state.openSpreadSheet ? [] : this.state.selectedRecord[\"nneedposition\"] === undefined ||\r\n            this.state.selectedRecord[\"nneedposition\"] === false ? [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ] : [\r\n            {\r\n                \"idsName\": \"IDS_SAMPLESTORAGEMAPPING\", \"dataField\": \"nsamplestoragecontainerpathcode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_PRODUCT\",\r\n                \"dataField\": \"nproductcode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            }\r\n            ,\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERTYPE\",\r\n                \"dataField\": \"ncontainertypecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_CONTAINERSTRUCTURENAME\",\r\n                \"dataField\": \"ncontainerstructurecode\", \"mandatoryLabel\":\r\n                    \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_DIRECTION\",\r\n                \"dataField\": \"ndirectionmastercode\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            },\r\n            {\r\n                \"idsName\": \"IDS_AVAILABLESPACE\",\r\n                \"dataField\": \"nquantity\", \"mandatoryLabel\":\r\n                    \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n            }\r\n        ]\r\n        onSaveMandatoryValidation(this.state.selectedRecord, mandatoryFields,\r\n            this.onSaveClick)\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateChange: event.dataState\r\n        });\r\n    }\r\n\r\n    approveSampleStorageMapping = (event) => {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/approveSampleStorageMapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                this.setState({\r\n                    masterData: {\r\n                        ...this.state.masterData,\r\n                        ...response[0].data\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    getDynamicFilterExecuteData(nflag) {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (nflag === 2 ? true : (selectedRecord.filterquery && selectedRecord.filterquery !== \"\")) {\r\n            this.setState({ loading: true })\r\n            let obj = {// ...inputParam.component, \r\n                label: 'sampleStoragetransaction', valuemember: 'nsamplestoragemappingcode',\r\n                filterquery: nflag === 2 ?\r\n                    this.state.submittedselectedRecord.filterquery+ \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                    :\r\n                    selectedRecord.filterquery + \" and nprojecttypecode=\" + this.state.selectedProjectType.value\r\n                , source: 'view_samplestoragelocation', userinfo: this.props.Login.userInfo\r\n            }\r\n            let urlArray = [];\r\n            const url1 = rsapi.post(\"/samplestoragetransaction/getdynamicfilterexecutedata\", obj);\r\n            urlArray = [url1];\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let masterData = this.state.masterData\r\n                    masterData = { ...masterData, ...response[0].data }\r\n                    this.setState({\r\n                        masterData: { ...masterData },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        isFilterPopup: false,\r\n                        submittedselectedRecord: nflag === 2 ?\r\n                            { ...this.state.submittedselectedRecord }\r\n                            :\r\n                            { ...selectedRecord }\r\n                        ,\r\n                        selectedRecord: {},\r\n                        displayQuery: this.state.tree ? QbUtils.queryString(this.state.tree, this.state.config, true) : \"\"\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    this.setState({\r\n                        loading: false\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.info(error.response.data.rtn);\r\n                    }\r\n\r\n                })\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTAFILTER\" }));\r\n\r\n        }\r\n    }\r\n\r\n    fetchRecord = (data) => {\r\n        this.setState({ loading: true })\r\n        let selectedRecord = this.state.selectedRecord\r\n        let inputParamData = {\r\n            nsamplestoragelocationcode: this.state.masterData.selectedSampleStorageLocation.nsamplestoragelocationcode,\r\n            userinfo: this.props.Login.userInfo,\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragetransaction/addSampleStorageMapping\", inputParamData);\r\n\r\n        const url2 = rsapi.post(\"product/getProduct\",\r\n            { 'userinfo': this.props.Login.userInfo });\r\n\r\n        const url3 = rsapi.post(\"samplestoragetransaction/getEditSampleStorageMapping\",\r\n            { 'nsamplestoragemappingcode': data.nsamplestoragemappingcode, 'userinfo': this.props.Login.userInfo });\r\n\r\n        urlArray = [url1, url2, url3];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const storageMappingMap = constructOptionList(response[0].data['samplestoragecontainerpath'] || [],\r\n                    \"nsamplestoragecontainerpathcode\",\r\n                    \"scontainerpath\", undefined, undefined, true);\r\n                const storageMappingMapList = storageMappingMap.get(\"OptionList\");\r\n                let containerStructure = response[0].data['containerStructure'];\r\n\r\n                const containerTypeMap = constructOptionList(response[0].data['containerType'] || [],\r\n                    \"ncontainertypecode\",\r\n                    \"scontainertype\", undefined, undefined, true);\r\n                const containerTypeList = containerTypeMap.get(\"OptionList\");\r\n\r\n                const directionmasterMap = constructOptionList(response[0].data['directionmaster'] || [],\r\n                    \"ndirectionmastercode\",\r\n                    \"sdirection\", undefined, undefined, true);\r\n                const directionmasterList = directionmasterMap.get(\"OptionList\");\r\n\r\n\r\n                const containerstructureMap = constructOptionList(response[2].data['containerStructure']\r\n                    || [],\r\n                    \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, true);\r\n                const containerstructureList = containerstructureMap.get(\"OptionList\");\r\n\r\n                const productMap = constructOptionList(response[1].data['Product'] || [],\r\n                    \"nproductcode\",\r\n                    \"sproductname\", undefined, undefined, true);\r\n                const productList = productMap.get(\"OptionList\");\r\n\r\n                const editedObject = response[2].data.editsampleStorageMapping;\r\n\r\n                storageMappingMapList.unshift({ label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode })\r\n                selectedRecord = {\r\n                    ndirectionmastercode: { label: editedObject.sdirection, value: editedObject.ndirectionmastercode },\r\n                    nsamplestoragecontainerpathcode: { label: editedObject.scontainerpath, value: editedObject.nsamplestoragecontainerpathcode },\r\n                    nproductcode: { label: editedObject.sproductname, value: editedObject.nproductcode },\r\n                    ncontainertypecode: { label: editedObject.scontainertype, value: editedObject.ncontainertypecode },\r\n                    ncontainerstructurecode: { label: editedObject.scontainerstructurename, value: editedObject.ncontainerstructurecode },\r\n                    nneedposition: editedObject.nneedposition === 3 ? true : false,\r\n                    directionmasterOptions: directionmasterList,\r\n                    nquantity: editedObject.nquantity,\r\n                    nrow: editedObject.nrow,\r\n                    ncolumn: editedObject.ncolumn,\r\n                    nsamplestoragemappingcode: editedObject.nsamplestoragemappingcode\r\n                }\r\n                this.setState({\r\n                    openSpreadSheet: false,\r\n                    openModal: true,\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        storageMappingMapOptions: storageMappingMapList,\r\n                        productOptions: productList,\r\n                        containerTypeOptions: containerTypeList,\r\n                        containerStructureOptions: containerstructureList,\r\n                        isInitialRender: true\r\n                    },\r\n                    operation: 'update',\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    // Actions End\r\n\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n            }\r\n        }\r\n        else if (event.target.type === 'select-one') {\r\n\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.selectedRecord !== this.state.selectedRecord)) {\r\n            return false;\r\n        } else if (this.state.openModal && nextState.isInitialRender === false &&\r\n            (nextState.sheetData !== this.state.sheetData)) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    handlePageChangeFilter = (event) => {\r\n        this.setState({ kendoSkip: event.skip, kendoTake: event.take });\r\n    };\r\n    onChange = (immutableTree, config) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"tree\"] = immutableTree;\r\n        selectedRecord[\"config\"] = config;\r\n        let tree = QbUtils.getTree(immutableTree);\r\n        tree = QbUtils.queryString(immutableTree, config, true);\r\n        selectedRecord['filterquery'] = QbUtils.sqlFormat(immutableTree, config);\r\n        this.setState({ tree: immutableTree, config: config, selectedRecord: { ...selectedRecord } });\r\n\r\n    };\r\n    // cellRender(tdElement, cellProps) {\r\n\r\n    //     if (cellProps.rowType === \"groupFooter\") {\r\n    //         console.log('cellProps.field', cellProps)\r\n    //         if (cellProps.dataItem.field === \"ssamplestoragelocationname\") {\r\n    //             console.log('tdElement', tdElement, 'cellProps', cellProps)\r\n    //             return (\r\n    //                 <td aria-colindex={cellProps.columnIndex} role={\"gridcell\"}>\r\n    //                     Sum: {cellProps.dataItem.aggregates.navailablespace.sum}\r\n    //                 </td>\r\n    //             );\r\n    //         }\r\n    //     }\r\n    //     return tdElement;\r\n    // }\r\n    // handleGroupChange = (event) => {\r\n    //     const newDataState = this.processWithGroups(this.state.masterData.sampleStoragetransaction || [], this.state.dataStateChange, event.group);\r\n    //     this.setState({\r\n    //         masterData: { ...this.state.masterData, sampleStoragetransaction: newDataState },\r\n    //         group: event.group,\r\n    //     });\r\n    // };\r\n    // processWithGroups = (data, group) => {\r\n    //     const newDataState = groupBy(data, group);\r\n    //     return newDataState;\r\n    // };\r\n    processWithGroups = (data, dataState) => {\r\n        const aggregates = [\r\n            {\r\n                field: \"navailablespace\",\r\n                aggregate: \"sum\",\r\n            }\r\n        ];\r\n        const groups = dataState.group;\r\n        if (groups) {\r\n            groups.map((group) => (group.aggregates = aggregates));\r\n        }\r\n        dataState.group = groups;\r\n        const newDataState = process(data, dataState);\r\n        // setGroupIds({\r\n        //     data: newDataState.data,\r\n        //     group: dataState.group,\r\n        // });\r\n        return newDataState;\r\n    };\r\n    render() {\r\n\r\n\r\n        const addId = this.state.controlMap.has(\"Add SampleStorageTransaction\") && this.state.controlMap.get(\"Add SampleStorageTransaction\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"Edit SampleStorageLocation\") && this.state.controlMap.get(\"Edit SampleStorageLocation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"Delete SampleStorageLocation\") && this.state.controlMap.get(\"Delete SampleStorageLocation\").ncontrolcode;\r\n        const copyId = this.state.controlMap.has(\"Copy SampleStorageLocation\") && this.state.controlMap.get(\"Copy SampleStorageLocation\").ncontrolcode;\r\n        const approveId = this.state.controlMap.has(\"Approve SampleStorageLocation\") && this.state.controlMap.get(\"Approve SampleStorageLocation\").ncontrolcode;\r\n\r\n        const addMultipleSampleId = this.state.controlMap.has(\"AddMultipleSample\") && this.state.controlMap.get(\"AddMultipleSample\").ncontrolcode;\r\n        const addSampleId = this.state.controlMap.has(\"AddSample\") && this.state.controlMap.get(\"AddSample\").ncontrolcode;\r\n\r\n        const filterParam = {\r\n            inputListName: \"sampleStorageLocation\", selectedObject: \"selectedSampleStorageLocation\", primaryKeyField: \"nsamplestoragelocationcode\",\r\n            fetchUrl: \"sampleStoragetransaction/getActiveSampleStorageMappingById\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: [\"ssamplestoragelocationname\"]\r\n        };\r\n\r\n        const breadCrumbData = this.state.filterData || [];\r\n\r\n        const confirmMessage = new ConfirmMessage(); \r\n        return (\r\n            <>\r\n                <Preloader loading={this.state.loading} />\r\n                <ListWrapper className=\"client-list-content\">\r\n                    {\r\n\r\n\r\n                        <Col md={12}>\r\n                            <Row>\r\n                                <Col md={3}>\r\n                                    <FormSelectSearch\r\n                                        name={\"nprojecttypecode\"}\r\n                                        as={\"select\"}\r\n                                        onChange={(event) => this.onComboChange(event, 'nprojecttypecode')}\r\n                                        formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                                        isMandatory={false}\r\n                                        value={this.state.selectedProjectType ? this.state.selectedProjectType || [] : []}\r\n                                        options={this.state.masterData && this.state.masterData.projectTypeOptions || []}\r\n                                        optionId={\"value\"}\r\n                                        optionValue={\"label\"}\r\n                                        isMulti={false}\r\n                                        isDisabled={false}\r\n                                        isSearchable={false}\r\n                                        isClearable={false}\r\n                                    />\r\n                                </Col>\r\n                            </Row><Row>\r\n                                <Col md={12}>\r\n                                    <DataGrid\r\n                                        isDownloadPDFRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isDownloadExcelRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        isRefreshRequired={this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                            this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }).data.length > 0 ?\r\n                                            true : false}\r\n                                        reloadData={(e) => this.getDynamicFilterExecuteData(2)}\r\n                                        isCustomButton={true}\r\n                                        customButtonlist={\r\n                                            this.state.masterData && this.state.masterData.sampleStoragetransaction &&\r\n                                                this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                    this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                        take: 10,\r\n                                                        skip: 0\r\n                                                    }).data.length > 0 ?\r\n                                                [{\r\n                                                    label: 'IDS_ADDSAMPLETOMULTIPLEBOX',\r\n                                                    id: {},\r\n                                                    hidden: this.state.userRoleControlRights.indexOf(addMultipleSampleId) === -1,\r\n                                                    onClick: () => this.addSample({}, 2),\r\n                                                    controlname: 'faBoxes'\r\n                                                },\r\n                                                {\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }] : [{\r\n                                                    label: 'IDS_SEARCH',\r\n                                                    id: {},\r\n                                                    onClick: () => this.opensearch(),\r\n                                                    controlname: 'faSearch'\r\n                                                }]}\r\n                                        cellRender={this.cellRender}\r\n                                        group={this.state.group || []}\r\n                                        // onGroupChange={this.handleGroupChange}\r\n                                        primaryKeyField={'nsamplestoragemappingcode'}\r\n                                        groupable={true}\r\n                                        groupfooter={true}\r\n                                        aggregateLabel={'IDS_AVAILABLESPACE'}\r\n                                        aggregatedColumn={'navailablespace'}\r\n                                        data={this.state.masterData &&\r\n                                            this.state.masterData.sampleStoragetransaction}\r\n                                        dataResult={\r\n                                            // process(this.state.masterData.sampleStoragetransaction || [],\r\n                                            //     this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 })\r\n                                            this.state.masterData && this.state.masterData.sampleStoragetransaction ? this.processWithGroups(this.state.masterData.sampleStoragetransaction || [],\r\n                                                this.state.dataStateChange ? this.state.dataStateChange : {\r\n                                                    take: 10,\r\n                                                    skip: 0\r\n                                                }) : []\r\n                                        }\r\n                                        dataState={this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        extractedColumnList={this.state.extractedColumnList}\r\n                                        controlMap={this.state.controlMap}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        deleteRecord={this.deleteRecord}\r\n                                        // addRecord={() => this.openStorageMapping()}\r\n                                        pageable={true}\r\n                                        scrollable={'scrollable'}\r\n                                        // isComponent={true}\r\n                                        gridHeight={'600px'}\r\n                                        isActionRequired={true}\r\n                                        isToolBarRequired={true}\r\n                                        actionIcons={\r\n                                            [{\r\n                                                title: this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLETOABOX\" }),\r\n                                                controlname: \"faBox\",\r\n                                                hidden: this.state.userRoleControlRights.indexOf(addSampleId) === -1,\r\n                                                objectName: \"add\",\r\n                                                onClick: (param) => this.addSample(param, 1)\r\n                                            }]}\r\n                                    /></Col></Row>\r\n                        </Col>\r\n\r\n                    }\r\n\r\n                </ListWrapper>\r\n\r\n                {\r\n                    this.state.openModal &&\r\n                    <SlideOutModal show={this.state.openModal}\r\n                        closeModal={this.closeModal}\r\n                        hideSave={true}\r\n                        needClose={this.state.isFilterPopup ? false : true}\r\n                        showSubmit={this.state.openSpreadSheet ? false : true}\r\n                        size={this.state.openSpreadSheet || this.state.isFilterPopup ? 'xl' : \"\"}\r\n                        operation={\"\"}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.state.isFilterPopup ? \"\" :\r\n                            this.state.isMultiSampleAdd ? this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGE\" })\r\n                                : this.state.editedsheetData.scontainerpath}\r\n                        onSaveClick={this.state.isFilterPopup ? this.getDynamicFilterExecuteData.bind(this) : this.onSampleMappingSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        // className={\"wide-popup\"}\r\n\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={\r\n                            this.state.isFilterPopup ?\r\n                                <FilterQueryBuilder\r\n                                    fields={this.state.fields}\r\n                                    isSampleStorage={true}\r\n                                    queryArray={this.state.queryArray}\r\n                                    skip={this.state.kendoSkip}\r\n                                    take={this.state.kendoTake}\r\n                                    onChange={this.onChange}\r\n                                    tree={this.props.Login.tree !== undefined ? this.props.Login.tree : this.state.selectedRecord.tree}\r\n                                    gridColumns={this.slideList}\r\n                                    filterData={this.props.Login.slideResult || []}\r\n                                    handlePageChange={this.handlePageChangeFilter}\r\n                                    static={true}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    updateStore={this.props.updateStore}\r\n                                />\r\n                                : this.props.Login.loadEsign ?\r\n                                    <Esign operation={this.props.Login.operation}\r\n                                        formatMessage={this.props.intl.formatMessage}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                    />\r\n                                    :\r\n                                    this.state.openSpreadSheet ? <>\r\n                                        {/* <Spreadsheet\r\n                                    data={this.state.placedSample}\r\n                                    Rows={this.state.Rows || 1}\r\n                                    columns={this.state.columns || 1}\r\n                                /> */}\r\n                                        <> \r\n                                            <MatrixComponent\r\n                                                updateStore={this.props.updateStore}\r\n                                                intl={this.props.intl}\r\n                                                Rows={this.state.Rows || 1}\r\n                                                AdditionalFieldsComponentData={this.state.AdditionalFieldsComponentData}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                columns={this.state.columns || 1}\r\n                                                selectedRecord={this.state.selectedRecord.sheetData || {}}\r\n                                                sheetData={this.state.sheetData || {}}\r\n                                                isMultiSampleAdd={this.state.isMultiSampleAdd}\r\n                                                childSheetDataChange={this.childSheetDataChange}\r\n                                                editedsheetData={this.state.editedsheetData}\r\n                                                nbarcodedescription={this.props.Login.settings && parseInt(this.props.Login.settings[36])}\r\n                                                nbarcodeLength={this.props.Login.settings && parseInt(this.props.Login.settings[37])}\r\n                                                sbarcodeboxWidth={this.props.Login.settings && this.props.Login.settings[38]}\r\n                                                multipleSheetData={this.state.masterData &&\r\n                                                    this.state.masterData.sampleStoragetransaction &&\r\n                                                    process(this.state.masterData.sampleStoragetransaction || [],\r\n                                                        this.state.dataStateChange ? this.state.dataStateChange : { skip: 0, take: 10 }).data} /></>\r\n\r\n                                    </>\r\n                                        :\r\n                                        <AddSampleStorageMapping\r\n                                            operation={this.state.operation}\r\n                                            selectedRecordFilter={this.state.selectedRecordFilter}\r\n                                            onInputChange={(e) => this.onInputChange(e)}\r\n                                            onComboChange={this.onComboChange}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            childDataChange={this.childDataChange}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                        />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        )\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService\r\n})(injectIntl(SampleStorageTransaction));"]},"metadata":{},"sourceType":"module"}