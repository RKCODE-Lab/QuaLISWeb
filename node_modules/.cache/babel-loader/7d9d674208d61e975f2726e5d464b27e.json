{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\instrumentmanagement\\\\AddInstrumentCalibration.jsx\";\nimport React from 'react';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\n\nconst AddInstrumentCalibration = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_INSTRUMENTID\"\n    }),\n    name: \"ninstrumentcode\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    value: props.instrumentid,\n    isDisabled: true,\n    required: true,\n    maxLength: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dlastcalibrationdate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_LASTCALIBRATIONDATE\"\n    }),\n    className: \"form-control\",\n    selected: props.selectedRecord[\"dlastcalibrationdate\"] ? props.selectedRecord[\"dlastcalibrationdate\"] : new Date(),\n    dateFormat: props.userInfo.ssitedate,\n    isClearable: false,\n    required: true,\n    isMandatory: true,\n    maxTime: props.currentTime,\n    onChange: date => props.handleDateChange(\"dlastcalibrationdate\", date),\n    value: props.selectedRecord[\"dlastcalibrationdate\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dduedate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_DUEDATE\"\n    }),\n    className: \"form-control\",\n    selected: props.selectedRecord[\"dduedate\"] ? props.selectedRecord[\"dduedate\"] : new Date(),\n    dateFormat: props.userInfo.ssitedate,\n    isClearable: false,\n    required: true,\n    isMandatory: true,\n    maxTime: props.currentTime,\n    onChange: date => props.handleDateChange(\"dduedate\", date),\n    value: props.selectedRecord[\"dduedate\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ntranscode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_STATUS\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.CalibrationStatus,\n    value: props.selectedRecord[\"ntranscode\"] ? props.selectedRecord[\"ntranscode\"] : \"\",\n    defaultValue: props.selectedRecord[\"ntranscode\"],\n    isMulti: false,\n    isSearchable: true,\n    isMandatory: true,\n    isDisabled: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    onChange: event => props.onComboChange(event, 'ntranscode', 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 27\n    }\n  })));\n};\n\nexport default injectIntl(AddInstrumentCalibration);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/instrumentmanagement/AddInstrumentCalibration.jsx"],"names":["React","FormSelectSearch","injectIntl","Row","Col","FormInput","DateTimePicker","AddInstrumentCalibration","props","intl","formatMessage","id","event","onInputOnChange","instrumentid","selectedRecord","Date","userInfo","ssitedate","currentTime","date","handleDateChange","CalibrationStatus","onComboChange"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\n\r\n\r\n\r\n\r\nconst AddInstrumentCalibration = (props) => {\r\n    return (\r\n        <Row>\r\n\r\n        <Col md={12}>\r\n            <FormInput\r\n                label={props.intl.formatMessage({ id: \"IDS_INSTRUMENTID\" })}\r\n                name={\"ninstrumentcode\"}\r\n                type=\"text\"\r\n                onChange={(event) => props.onInputOnChange(event)}\r\n                value={props.instrumentid}                   \r\n                isDisabled={true}\r\n                required={true}\r\n                maxLength={\"100\"}\r\n            />\r\n        </Col>\r\n        <Col md={12}>\r\n        <DateTimePicker\r\n                             name={\"dlastcalibrationdate\"} \r\n                             label={ props.intl.formatMessage({ id:\"IDS_LASTCALIBRATIONDATE\"})}                     \r\n                             className='form-control'\r\n                             selected={props.selectedRecord[\"dlastcalibrationdate\"]?props.selectedRecord[\"dlastcalibrationdate\"]:new Date()}\r\n                             dateFormat  ={props.userInfo.ssitedate}\r\n                             isClearable={false}\r\n                             required={true}\r\n                             isMandatory={true}\r\n                             maxTime={props.currentTime}\r\n                             onChange={date => props.handleDateChange(\"dlastcalibrationdate\", date)}\r\n                             value={props.selectedRecord[\"dlastcalibrationdate\"]}\r\n\r\n                            />\r\n        </Col>\r\n        {/* <Col md={6}>\r\n                            <FormSelectSearch\r\n                                   name={\"ntzlastcalibrationdate\"}\r\n                                   formLabel={ props.intl.formatMessage({ id:\"IDS_TIMEZONE\"})}                                \r\n                                   placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}                                \r\n                                   options={ props.TimeZoneList}\r\n                                   value = { props.selectedRecord[\"ntzlastcalibrationdate\"] }\r\n                                   defaultValue={props.selectedRecord[\"ntzlastcalibrationdate\"]}\r\n                                   isMandatory={false}\r\n                                   isMulti={false}\r\n                                   isSearchable={true}\r\n                                   isDisabled={false}\r\n                                   closeMenuOnSelect={true}\r\n                                   alphabeticalSort={true}\r\n                                   onChange = {(event)=> props.onComboChange(event, 'ntzlastcalibrationdate',1)}                               \r\n                              />                    \r\n\r\n        </Col> */}\r\n        <Col md={12}>\r\n        <DateTimePicker\r\n                             name={\"dduedate\"} \r\n                             label={ props.intl.formatMessage({ id:\"IDS_DUEDATE\"})}                     \r\n                             className='form-control'\r\n                             selected={props.selectedRecord[\"dduedate\"]?props.selectedRecord[\"dduedate\"]:new Date()}\r\n                             dateFormat  ={props.userInfo.ssitedate}\r\n                             isClearable={false}\r\n                             required={true}\r\n                             isMandatory={true}\r\n                             maxTime={props.currentTime}\r\n                             onChange={date => props.handleDateChange(\"dduedate\", date)}\r\n                             value={props.selectedRecord[\"dduedate\"]}\r\n\r\n                            />\r\n        </Col>\r\n        {/* <Col md={6}>\r\n                            <FormSelectSearch\r\n                                   name={\"ntzduedate\"}\r\n                                   formLabel={ props.intl.formatMessage({ id:\"IDS_TIMEZONE\"})}                                \r\n                                   placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}                                \r\n                                   options={ props.TimeZoneList}\r\n                                   value = { props.selectedRecord[\"ntzduedate\"] }\r\n                                   defaultValue={props.selectedRecord[\"ntzduedate\"]}\r\n                                   isMandatory={false}\r\n                                   isMulti={false}\r\n                                   isSearchable={true}\r\n                                   isDisabled={false}\r\n                                   closeMenuOnSelect={true}\r\n                                   alphabeticalSort={true}\r\n                                   onChange = {(event)=> props.onComboChange(event, 'ntzduedate',1)}                               \r\n                              />                    \r\n\r\n        </Col> */}\r\n        \r\n                <Col md={12}>\r\n                          <FormSelectSearch\r\n                               name={\"ntranscode\"}\r\n                               formLabel={ props.intl.formatMessage({ id:\"IDS_STATUS\"})}                                \r\n                               placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}                                \r\n                               options={ props.CalibrationStatus}\r\n                               value = { props.selectedRecord[\"ntranscode\"]?props.selectedRecord[\"ntranscode\"]:\"\" }\r\n                               defaultValue={props.selectedRecord[\"ntranscode\"]}\r\n                               isMulti={false}\r\n                               isSearchable={true}\r\n                               isMandatory={true}\r\n                               isDisabled={false}\r\n                               closeMenuOnSelect={true}\r\n                               alphabeticalSort={true}\r\n                               onChange = {(event)=> props.onComboChange(event, 'ntranscode',1)}                               \r\n                          />\r\n            </Col>\r\n\r\n    </Row>\r\n    );\r\n}\r\n\r\nexport default injectIntl(AddInstrumentCalibration);"]},"metadata":{},"sourceType":"module"}