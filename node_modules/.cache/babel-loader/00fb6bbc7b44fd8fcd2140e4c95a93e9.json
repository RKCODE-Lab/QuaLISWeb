{"ast":null,"code":"import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{constructOptionList,sortData}from'../components/CommonScript';//getComboLabelValue,, searchData\nimport{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{intl}from'../components/App';import{ColumnType,queryTypeFilter,transactionStatus}from'../components/Enumeration';import{format}from'date-fns';export function getTestGroupRulesEngineAdd(userInfo,testgrouprulesengine,inputParam,masterData){var testcomments=[];var reportcomments=[];var predefcomments=[];var sampletestcommentsList=[];var selectedRecord={};var addGroupList=[];return function(dispatch){//if (masterData.SelectedSpecification&&masterData.SelectedSpecification['napprovalstatus'] === transactionStatus.APPROVED) { \ndispatch(initRequest(true));var url=[];if(testgrouprulesengine){url.push(rsapi.post(\"/testgrouprulesengine/getdatabasetables\",{userinfo:userInfo}));}else{url.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\",{\"ntestgrouptestcode\":masterData.SelectedTest.ntestgrouptestcode,\"nspecsampletypecode\":masterData.SelectedComponent.nspecsampletypecode,\"napproveconfversioncode\":masterData.SelectedSpecification.napproveconfversioncode,\"nallottedspeccode\":masterData.SelectedSpecification.nallottedspeccode,userinfo:userInfo}));url.push(rsapi.post(\"/grade/getGrade\",{userinfo:userInfo}));url.push(rsapi.post(\"/site/getSite\",{userinfo:userInfo}));url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\",{userinfo:userInfo}));url.push(rsapi.post(\"/sampletestcomments/getCommentType\",{userinfo:userInfo}));url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\",{userinfo:userInfo}));}Axios.all(url).then(function(response){var DiagnosticCase=constructOptionList(response[0].data[\"DiagnosticCase\"]||[],\"ndiagnosticcasecode\",\"sdiagnosticcasename\",false,false,false);var Grade=constructOptionList(response[1].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,false);var viewListMap=constructOptionList(response[0].data[\"TestParameter\"]||[],\"ntestgrouptestparametercode\",\"stestparametersynonym\",undefined,undefined,undefined);var resultType=constructOptionList(response[0].data[\"ResultType\"]||[],\"nresultypecode\",\"sdisplayname\",undefined,undefined,undefined);var site=constructOptionList(response[2].data||[],\"nsitecode\",\"ssitename\",false,false,false);var CommentType=constructOptionList(response[4].data['CommentType']||[],\"ncommenttypecode\",\"scommenttype\",false,false,false);var commentsubtypelst=response[5].data['CommentSubType'];var w=commentsubtypelst.filter(function(x){return x.ncommentsubtypecode===3||x.ncommentsubtypecode===6;});var CommentSubType=constructOptionList(w||[],\"ncommentsubtypecode\",\"scommentsubtype\",false,false,false);var testInitiateTestCombo=constructOptionList(masterData['TestGroupTest']||[],\"ntestgrouptestcode\",\"stestsynonym\",false,false,false);var commentlist=response[3].data;var x=commentlist.filter(function(x){return x.ncommentsubtypecode===1;});var y=commentlist.filter(function(x){return x.ncommentsubtypecode===4;});var z=commentlist.filter(function(x){return x.ncommentsubtypecode===3;});testcomments=constructOptionList(x||[],\"nsampletestcommentscode\",\"sdescription\",false,false,false).get(\"OptionList\");reportcomments=constructOptionList(y||[],\"nsampletestcommentscode\",\"sdescription\",false,false,false).get(\"OptionList\");predefcomments=constructOptionList(z||[],\"nsampletestcommentscode\",\"spredefinedname\",false,false,false).get(\"OptionList\");masterData['testParameter']={};masterData['testParameterComments']={};masterData['testParameterreportComments']={};masterData['testComments']={};masterData['reportComments']={};masterData['testSite']={};masterData['testRepeat']=[];masterData['testenforceTests']=[];selectedRecord[\"groupList\"]=[];selectedRecord[\"groupList\"][0]=[];selectedRecord[\"groupList\"][0][\"button_and\"]=true;selectedRecord[\"groupList\"][0][0]={};addGroupList[0]=1;dispatch({type:DEFAULT_RETURN,payload:_objectSpread(_objectSpread({loading:false,operation:'create',databaseviewList:viewListMap.get(\"OptionList\"),testcomments:testcomments,reportcomments:reportcomments,openPortalModal:true,screenName:\"IDS_ADDRULESENGINE\",testgrouprulesengine:testgrouprulesengine},inputParam),{},{siteObject:{},testCommentObject:{},reportCommentObject:{},testInitiateTests:[],testRepeatTests:[],testenforceTests:[],testCommentsTests:[],reportCommentsTests:[],reportCommentsTestsTab:[],activeTabIndex:0,masterData:_objectSpread(_objectSpread({},masterData),{},{testInitiateTestCombo:testInitiateTestCombo.get(\"OptionList\"),testCommentsTestCombo:testInitiateTestCombo.get(\"OptionList\"),testRepeatTestCombo:testInitiateTestCombo.get(\"OptionList\"),testenforceTestCombo:testInitiateTestCombo.get(\"OptionList\"),rulesOption:viewListMap.get(\"OptionList\"),DiagnosticCaseList:DiagnosticCase.get(\"OptionList\"),GradeList:Grade.get(\"OptionList\"),siteList:site.get(\"OptionList\"),resultTypeList:resultType.get(\"OptionList\"),testCommentsTestsTab:[],testInitiateSiteTab:[],PredefinedParameterOptions:[],testRepeatTestsTab:[],testenforceTestsTab:[]}),testInitiateTestOptions:viewListMap.get(\"OptionList\"),testCommentsTestOptions:viewListMap.get(\"OptionList\"),reportCommentsTestOptions:viewListMap.get(\"OptionList\"),CommentType:CommentType.get(\"OptionList\"),CommentSubType:CommentSubType.get(\"OptionList\"),predefcomments:predefcomments,openModalPopup:false,openmodalsavePopup:false,addGroupList:addGroupList,selectedRecord:selectedRecord,viewColumnListByRule:viewListMap.get(\"OptionList\")})});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});// }\n// else {\n//     toast.warn(intl.formatMessage({ id: \"IDS_RULESCANBEADDEDONLYFORAPPROVEDSPEC\" })); \n// }\n};}export function getSpecificationTestGroupRulesEngine(inputParam,selectedRecord,ismodalcombochange,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getSpecificationTestGroupRulesEngine\",{'userinfo':userInfo,\"nproductcatcode\":inputParam.nproductcatcode.item.nproductcatcode}).then(function(response){var TestGroupSpecification=constructOptionList(response.data.TestGroupSpecification||[],\"nallottedspeccode\",\"sspecname\",undefined,undefined,undefined);var TestGroupSpecificationList=TestGroupSpecification.get(\"OptionList\");if(ismodalcombochange){selectedRecord=_objectSpread(_objectSpread(_objectSpread({},selectedRecord),inputParam),{},{'nallottedspeccode':TestGroupSpecificationList[0]});masterData=_objectSpread(_objectSpread({},masterData),response.data);}else{var selectedcombo=_objectSpread(_objectSpread({},inputParam),{},{'nallottedspeccode':TestGroupSpecificationList[0]});masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{selectedcombo:selectedcombo});}dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getComponentTestGroupRulesEngine(inputParam,selectedRecord,ismodalcombochange,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getComponentTestGroupRulesEngine\",{'userinfo':userInfo,\"nallottedspeccode\":inputParam.nallottedspeccode.item.nallottedspeccode}).then(function(response){var Component=constructOptionList(response.data.Component||[],\"ncomponentcode\",\"scomponentname\",undefined,undefined,undefined);var ComponentList=Component.get(\"OptionList\");if(ismodalcombochange){selectedRecord=_objectSpread(_objectSpread(_objectSpread({},selectedRecord),inputParam),{},{'ncomponentcode':ComponentList[0]});masterData=_objectSpread(_objectSpread({},masterData),response.data);}else{var selectedcombo=_objectSpread(_objectSpread({},inputParam),{},{'ncomponentcode':ComponentList[0]});masterData=_objectSpread(_objectSpread(_objectSpread({},masterData),response.data),{},{selectedcombo:selectedcombo});}dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getSelectedTestGroupRulesEngine(inputParam,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getSelectedTestGroupRulesEngine\",{'userinfo':userInfo,\"ntestgrouprulesenginecode\":parseInt(inputParam.ntestgrouprulesenginecode)//, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\n,\"ntestgrouptestcode\":masterData.SelectedTest.ntestgrouptestcode}).then(function(response){masterData=_objectSpread(_objectSpread({},masterData),{},{SelectedRulesEngine:response.data[\"SelectedRulesEngine\"]});dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getTestGroupRulesEngine(nproductcatcode,nallottedspeccode,ncomponentcode,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngine\",{'userinfo':userInfo,\"nproductcatcode\":nproductcatcode,\"nallottedspeccode\":nallottedspeccode,\"ncomponentcode\":ncomponentcode}).then(function(response){masterData=_objectSpread({},response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getEditTestGroupRulesEngine(operation,masterData//,\n// ncontrolCode\n,userInfo){var testcomments=[];var reportcomments=[];var predefcomments=[];return function(dispatch){if(masterData['RulesEngine']&&masterData['RulesEngine'].length>0){var urlArray=[];var selectedRecord={};urlArray.push(rsapi.post(\"testgrouprulesengine/getEditTestGroupRulesEngine\",{'ntestgrouprulesenginecode':masterData.SelectedRulesEngine['ntestgrouprulesenginecode'],'masterData':masterData,\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"/grade/getGrade\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/site/getSite\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\",{\"ntestgrouptestcode\":masterData.SelectedTest.ntestgrouptestcode,\"nspecsampletypecode\":masterData.SelectedComponent.nspecsampletypecode,\"napproveconfversioncode\":masterData.SelectedSpecification.napproveconfversioncode,\"nallottedspeccode\":masterData.SelectedSpecification.nallottedspeccode,userinfo:userInfo}));urlArray.push(rsapi.post(\"/productcategory/getProductCategory\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\",{userinfo:userInfo}));urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\",{userinfo:userInfo}));dispatch(initRequest(true));Axios.all(urlArray).then(function(response){masterData['testParameter']={};masterData['testParameterComments']={};masterData['testParameterreportComments']={};var responsedata=response[0].data;var srulename=responsedata['RulesEngineEdit'][0]['srulename'];var nruleexecorder=responsedata['RulesEngineEdit'][0]['nruleexecorder'];var groupList=responsedata['RulesEngineEdit'][0]['jsondata'];var outcomeList=responsedata['RulesEngineEdit'][0]['jsonuidata'];selectedRecord[\"groupList\"]=[];groupList.map(function(ruleslist,index){if(ruleslist.hasOwnProperty('button_or')){selectedRecord[\"groupList\"][index]=ruleslist[\"button_or\"];selectedRecord[\"groupList\"][index][\"button_or\"]=true;}if(ruleslist.hasOwnProperty('button_and')){selectedRecord[\"groupList\"][index]=ruleslist[\"button_and\"];selectedRecord[\"groupList\"][index][\"button_and\"]=true;}if(ruleslist.hasOwnProperty('button_not_button_and')){selectedRecord[\"groupList\"][index]=ruleslist[\"button_not_button_and\"];selectedRecord[\"groupList\"][index][\"button_and\"]=true;selectedRecord[\"groupList\"][index][\"button_not\"]=true;}if(ruleslist.hasOwnProperty('button_not_button_or')){selectedRecord[\"groupList\"][index]=ruleslist[\"button_not_button_or\"];selectedRecord[\"groupList\"][index][\"button_or\"]=true;selectedRecord[\"groupList\"][index][\"button_not\"]=true;}});// if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\n//     selectedRecord[\"groupList\"]['button_not'] = true\n// }\n// if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\n//     selectedRecord[\"groupList\"]['button_not'] = true\n// }\nif(responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')){selectedRecord[\"groupList\"]['button_or']=true;}else{selectedRecord[\"groupList\"]['button_and']=true;}selectedRecord['srulename']=srulename;selectedRecord['srulenamecopy']=srulename;selectedRecord['nruleexecordercopy']=nruleexecorder;// selectedRecord[\"groupList\"][0][\"button_and\"] = true\nvar addGroupList=[];addGroupList=responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList'];var DiagnosticCase=constructOptionList(response[4].data[\"DiagnosticCase\"]||[],\"ndiagnosticcasecode\",\"sdiagnosticcasename\",false,false,false);var Grade=constructOptionList(response[1].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,false);var viewListMap=constructOptionList(response[4].data[\"TestParameter\"]||[],\"ntestgrouptestparametercode\",\"stestparametersynonym\",undefined,undefined,undefined);var resultType=constructOptionList(response[4].data[\"ResultType\"]||[],\"nresultypecode\",\"sdisplayname\",undefined,undefined,undefined);var site=constructOptionList(response[2].data||[],\"nsitecode\",\"ssitename\",false,false,false);var CommentType=constructOptionList(response[6].data['CommentType']||[],\"ncommenttypecode\",\"scommenttype\",false,false,false);var testInitiateTestCombo=constructOptionList(masterData['TestGroupTest']||[],\"ntestgrouptestcode\",\"stestsynonym\",false,false,false);var commentsubtypelst=response[7].data['CommentSubType'];var w=commentsubtypelst.filter(function(x){return x.ncommentsubtypecode===3||x.ncommentsubtypecode===6;});var CommentSubType=constructOptionList(w||[],\"ncommentsubtypecode\",\"scommentsubtype\",false,false,false);var commentlist=response[3].data;var x=commentlist.filter(function(x){return x.ncommentsubtypecode===1;});var y=commentlist.filter(function(x){return x.ncommentsubtypecode===4;});var z=commentlist.filter(function(x){return x.ncommentsubtypecode===3;});testcomments=constructOptionList(x||[],\"nsampletestcommentscode\",\"sdescription\",false,false,false).get(\"OptionList\");reportcomments=constructOptionList(y||[],\"nsampletestcommentscode\",\"sdescription\",false,false,false).get(\"OptionList\");predefcomments=constructOptionList(z||[],\"nsampletestcommentscode\",\"spredefinedname\",false,false,false).get(\"OptionList\");masterData['testParameter']=outcomeList['testInitiateTests']&&outcomeList['testInitiateTests'];masterData['testRepeat']=outcomeList['testRepeatTests']&&outcomeList['testRepeatTests'];masterData['testenforceTests']=outcomeList['testenforceTests']&&outcomeList['testenforceTests'];masterData['testParameterComments']=outcomeList['testCommentsTests']&&outcomeList['testCommentsTests'];masterData['testParameterreportComments']=outcomeList['reportCommentsTests']&&outcomeList['reportCommentsTests'];masterData[\"testComments\"]=outcomeList['testCommentObject']&&outcomeList['testCommentObject'];masterData[\"reportComments\"]=outcomeList['reportCommentObject']&&outcomeList['reportCommentObject'];masterData[\"testSite\"]=outcomeList['siteObject']&&outcomeList['siteObject'];selectedRecord[\"nproductcatcode\"]=outcomeList['nproductcatcode']&&outcomeList['nproductcatcode'];selectedRecord[\"nallottedspeccode\"]=outcomeList['nallottedspeccode']&&outcomeList['nallottedspeccode'];selectedRecord[\"ncomponentcode\"]=outcomeList['ncomponentcode']&&outcomeList['ncomponentcode'];selectedRecord[\"groupListJoins\"]=outcomeList['groupListJoins']&&outcomeList['groupListJoins'];dispatch({type:DEFAULT_RETURN,payload:{operation:operation,screenName:\"IDS_EDITRULESENGINE\",selectedRecord:selectedRecord,openPortalModal:true,// ncontrolCode: ncontrolCode,\nloading:false,addGroupList:addGroupList,masterData:_objectSpread(_objectSpread({},masterData),{},{testInitiateTestCombo:testInitiateTestCombo.get(\"OptionList\"),testCommentsTestCombo:testInitiateTestCombo.get(\"OptionList\"),testRepeatTestCombo:testInitiateTestCombo.get(\"OptionList\"),testenforceTestCombo:testInitiateTestCombo.get(\"OptionList\"),rulesOption:viewListMap.get(\"OptionList\"),DiagnosticCaseList:DiagnosticCase.get(\"OptionList\"),GradeList:Grade.get(\"OptionList\"),siteList:site.get(\"OptionList\"),resultTypeList:resultType.get(\"OptionList\"),testCommentsTestsTab:outcomeList['testCommentsTestsTab'],testRepeatTestsTab:outcomeList['testRepeatTestsTab'],testenforceTestsTab:outcomeList['testenforceTestsTab'],PredefinedParameterOptions:outcomeList['PredefinedParameterOptions'],testInitiateSiteTab:outcomeList['testInitiateSiteTab'],reportCommentsTestsTab:outcomeList['reportCommentsTestsTab']}),viewColumnListByRule:viewListMap.get(\"OptionList\"),testcomments:testcomments,reportcomments:reportcomments,testInitiateTests:outcomeList['testInitiateTests']&&outcomeList['testInitiateTests'],testCommentsTests:outcomeList['testCommentsTests']&&outcomeList['testCommentsTests'],testRepeatTests:outcomeList['testRepeatTests']&&outcomeList['testRepeatTests'],testenforceTests:outcomeList['testenforceTests']&&outcomeList['testenforceTests'],reportCommentsTests:outcomeList['reportCommentsTests']&&outcomeList['reportCommentsTests'],siteObject:outcomeList['siteObject']&&outcomeList['siteObject'],testCommentObject:outcomeList['testCommentObject']&&outcomeList['testCommentObject'],reportCommentObject:outcomeList['reportCommentObject']&&outcomeList['reportCommentObject'],CommentType:CommentType.get(\"OptionList\"),CommentSubType:CommentSubType.get(\"OptionList\"),predefcomments:predefcomments,openModalPopup:false,openmodalsavePopup:false,activeTabIndex:0,action:\"update\"}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});}else{toast.warn(intl.formatMessage({id:\"IDS_SELECTRULETOEDIT\"}));}};}export function getParameterRulesEngine(selectedRecord,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",{'userinfo':userInfo,\"ntestgrouptestcode\":selectedRecord['ntestgrouptestcode'].value}).then(function(response){var testGroupTestParameterRulesEngine=constructOptionList(response.data.TestGroupTestParameterRulesEngine||[],\"ntestgrouptestparametercode\",\"sparametersynonym\",undefined,undefined,undefined);var testGroupTestParameterRulesEngineList=testGroupTestParameterRulesEngine.get(\"OptionList\");masterData['testGroupTestParameterRulesEngine']=testGroupTestParameterRulesEngineList;dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getParameterResultValue(combodata,groupIndex,index,PredefinedParameterOptions,selectedRecord,masterData,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testgrouprulesengine/getParameterResultValue\",{'userinfo':userInfo,\"nparametertypecode\":combodata['stestname']['item']['nparametertypecode'],'ntestgrouptestparametercode':combodata['stestname']['item']['ntestgrouptestparametercode']}).then(function(response){var PredefinedParameterRulesEngine=constructOptionList(response.data.PredefinedParameterRulesEngine||[],\"ntestgrouptestpredefcode\",\"spredefinedname\",undefined,undefined,undefined);if(PredefinedParameterOptions[groupIndex]===undefined){PredefinedParameterOptions[groupIndex]=[];}if(PredefinedParameterOptions[groupIndex][index]===undefined){PredefinedParameterOptions[groupIndex][index]=[];}PredefinedParameterOptions[groupIndex][index]=PredefinedParameterRulesEngine.get(\"OptionList\");masterData['PredefinedParameterOptions']=PredefinedParameterOptions;dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TestGroupRuleEngineAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","ColumnType","queryTypeFilter","transactionStatus","format","getTestGroupRulesEngineAdd","userInfo","testgrouprulesengine","inputParam","masterData","testcomments","reportcomments","predefcomments","sampletestcommentsList","selectedRecord","addGroupList","dispatch","url","push","post","userinfo","SelectedTest","ntestgrouptestcode","SelectedComponent","nspecsampletypecode","SelectedSpecification","napproveconfversioncode","nallottedspeccode","all","then","response","DiagnosticCase","data","Grade","viewListMap","undefined","resultType","site","CommentType","commentsubtypelst","w","filter","x","ncommentsubtypecode","CommentSubType","testInitiateTestCombo","commentlist","y","z","get","type","payload","loading","operation","databaseviewList","openPortalModal","screenName","siteObject","testCommentObject","reportCommentObject","testInitiateTests","testRepeatTests","testenforceTests","testCommentsTests","reportCommentsTests","reportCommentsTestsTab","activeTabIndex","testCommentsTestCombo","testRepeatTestCombo","testenforceTestCombo","rulesOption","DiagnosticCaseList","GradeList","siteList","resultTypeList","testCommentsTestsTab","testInitiateSiteTab","PredefinedParameterOptions","testRepeatTestsTab","testenforceTestsTab","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","openModalPopup","openmodalsavePopup","viewColumnListByRule","catch","error","status","message","warn","getSpecificationTestGroupRulesEngine","ismodalcombochange","nproductcatcode","item","TestGroupSpecification","TestGroupSpecificationList","selectedcombo","getComponentTestGroupRulesEngine","Component","ComponentList","getSelectedTestGroupRulesEngine","parseInt","ntestgrouprulesenginecode","SelectedRulesEngine","getTestGroupRulesEngine","ncomponentcode","getEditTestGroupRulesEngine","length","urlArray","responsedata","srulename","nruleexecorder","groupList","outcomeList","map","ruleslist","index","hasOwnProperty","action","formatMessage","id","getParameterRulesEngine","value","testGroupTestParameterRulesEngine","TestGroupTestParameterRulesEngine","testGroupTestParameterRulesEngineList","getParameterResultValue","combodata","groupIndex","PredefinedParameterRulesEngine"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from '../components/CommonScript' //getComboLabelValue,, searchData\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    ColumnType,\r\n    queryTypeFilter,\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\nimport { format } from 'date-fns';\r\n\r\nexport function getTestGroupRulesEngineAdd(userInfo, testgrouprulesengine, inputParam, masterData) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    let sampletestcommentsList = []\r\n    let selectedRecord = {}\r\n    let addGroupList = []\r\n    return function (dispatch) {\r\n        //if (masterData.SelectedSpecification&&masterData.SelectedSpecification['napprovalstatus'] === transactionStatus.APPROVED) { \r\n        dispatch(initRequest(true)); \r\n            let url = [];\r\n            if (testgrouprulesengine) {\r\n                url.push(rsapi.post(\"/testgrouprulesengine/getdatabasetables\", {\r\n                    userinfo: userInfo\r\n                }));\r\n\r\n            } else {\r\n                url.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\r\n                    \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n                    \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\r\n                    \"napproveconfversioncode\":masterData.SelectedSpecification.napproveconfversioncode,\r\n                    \"nallottedspeccode\":masterData.SelectedSpecification.nallottedspeccode,\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/grade/getGrade\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/site/getSite\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                    userinfo: userInfo\r\n                }));\r\n            }\r\n            Axios.all(url)\r\n                .then(response => {\r\n                    const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    let commentsubtypelst = response[5].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                    const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\r\n\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    masterData['testComments'] = {}\r\n                    masterData['reportComments'] = {}\r\n                    masterData['testSite'] = {}\r\n                    masterData['testRepeat'] = []\r\n                    masterData['testenforceTests'] = []\r\n\r\n                    selectedRecord[\"groupList\"] = [];\r\n                    selectedRecord[\"groupList\"][0] = [];\r\n                    selectedRecord[\"groupList\"][0][\"button_and\"] = true;\r\n                    selectedRecord[\"groupList\"][0][0] = {};\r\n                    addGroupList[0] = 1;\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            operation: 'create',\r\n                            databaseviewList: viewListMap.get(\"OptionList\"),\r\n                            testcomments,\r\n                            reportcomments,\r\n\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_ADDRULESENGINE\",\r\n                            testgrouprulesengine,\r\n                            ...inputParam,\r\n\r\n                            siteObject: {},\r\n                            testCommentObject: {},\r\n                            reportCommentObject: {},\r\n                            testInitiateTests: [],\r\n                            testRepeatTests: [],\r\n                            testenforceTests: [],\r\n                            testCommentsTests: [],\r\n                            reportCommentsTests: []\r\n                            ,\r\n                            reportCommentsTestsTab: [],\r\n                            \r\n                            activeTabIndex: 0,\r\n                            masterData: {\r\n                                ...masterData, testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                rulesOption: viewListMap.get(\"OptionList\"),\r\n                                DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                                GradeList: Grade.get(\"OptionList\"),\r\n                                siteList: site.get(\"OptionList\"),\r\n                                resultTypeList: resultType.get(\"OptionList\"),\r\n                                testCommentsTestsTab: [],\r\n                                testInitiateSiteTab: [],\r\n                                PredefinedParameterOptions:[],\r\n                                testRepeatTestsTab: [],\r\n                                testenforceTestsTab: [],\r\n                            },\r\n\r\n                            testInitiateTestOptions: viewListMap.get(\"OptionList\"),\r\n                            testCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            reportCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            addGroupList,\r\n                            selectedRecord,\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\")\r\n                        }\r\n                    });\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n       // }\r\n        // else {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_RULESCANBEADDEDONLYFORAPPROVEDSPEC\" })); \r\n        // }\r\n    }\r\n}\r\nexport function getSpecificationTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSpecificationTestGroupRulesEngine\",\r\n            { 'userinfo': userInfo, \"nproductcatcode\": inputParam.nproductcatcode.item.nproductcatcode })\r\n            .then(response => {\r\n                const TestGroupSpecification = constructOptionList(response.data.TestGroupSpecification || [], \"nallottedspeccode\",\r\n                    \"sspecname\", undefined, undefined, undefined);\r\n                let TestGroupSpecificationList = TestGroupSpecification.get(\"OptionList\");\r\n                if (ismodalcombochange) {\r\n                    selectedRecord = { ...selectedRecord, ...inputParam, 'nallottedspeccode': TestGroupSpecificationList[0] }\r\n                    masterData = { ...masterData, ...response.data }\r\n                }\r\n                else {\r\n                    let selectedcombo = { ...inputParam, 'nallottedspeccode': TestGroupSpecificationList[0] }\r\n                    masterData = { ...masterData, ...response.data, selectedcombo }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getComponentTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getComponentTestGroupRulesEngine\",\r\n            { 'userinfo': userInfo, \"nallottedspeccode\": inputParam.nallottedspeccode.item.nallottedspeccode })\r\n            .then(response => {\r\n                const Component = constructOptionList(response.data.Component || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, undefined);\r\n                let ComponentList = Component.get(\"OptionList\");\r\n                if (ismodalcombochange) {\r\n                    selectedRecord = { ...selectedRecord, ...inputParam, 'ncomponentcode': ComponentList[0] }\r\n                    masterData = { ...masterData, ...response.data }\r\n                }\r\n                else {\r\n                    let selectedcombo = { ...inputParam, 'ncomponentcode': ComponentList[0] }\r\n                    masterData = { ...masterData, ...response.data, selectedcombo }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getSelectedTestGroupRulesEngine(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSelectedTestGroupRulesEngine\",\r\n            {\r\n                'userinfo': userInfo, \"ntestgrouprulesenginecode\": parseInt(inputParam.ntestgrouprulesenginecode)//, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\r\n                , \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, SelectedRulesEngine: response.data[\"SelectedRulesEngine\"]\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestGroupRulesEngine(nproductcatcode, nallottedspeccode, ncomponentcode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngine\",\r\n            {\r\n                'userinfo': userInfo, \"nproductcatcode\": nproductcatcode\r\n                , \"nallottedspeccode\": nallottedspeccode\r\n                , \"ncomponentcode\": ncomponentcode\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getEditTestGroupRulesEngine(operation, masterData//,\r\n    // ncontrolCode\r\n    , userInfo) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    return function (dispatch) {\r\n        if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\r\n            let urlArray = [];\r\n            let selectedRecord = {}\r\n            urlArray.push(rsapi.post(\"testgrouprulesengine/getEditTestGroupRulesEngine\", {\r\n                'ntestgrouprulesenginecode':\r\n                    masterData.SelectedRulesEngine['ntestgrouprulesenginecode'], 'masterData': masterData, \"userinfo\": userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/grade/getGrade\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/site/getSite\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\r\n                \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n                \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\r\n                \"napproveconfversioncode\":masterData.SelectedSpecification.napproveconfversioncode,\r\n                \"nallottedspeccode\":masterData.SelectedSpecification.nallottedspeccode,\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/productcategory/getProductCategory\", {\r\n                userinfo: userInfo\r\n            }));\r\n\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    let responsedata = response[0].data\r\n                    let srulename = responsedata['RulesEngineEdit'][0]['srulename']\r\n                    let nruleexecorder = responsedata['RulesEngineEdit'][0]['nruleexecorder']\r\n                    let groupList = responsedata['RulesEngineEdit'][0]['jsondata']\r\n                    let outcomeList = responsedata['RulesEngineEdit'][0]['jsonuidata']\r\n                    selectedRecord[\"groupList\"] = []\r\n                    groupList.map((ruleslist, index) => {\r\n\r\n                        if (ruleslist.hasOwnProperty('button_or')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_or\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_and')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_and\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_not_button_and')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_and\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                            selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_not_button_or')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_or\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                            selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                        }\r\n                    })\r\n                    // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\r\n                    //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                    // }\r\n                    // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\r\n                    //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                    // }\r\n                    if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')) {\r\n                        selectedRecord[\"groupList\"]['button_or'] = true\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"groupList\"]['button_and'] = true\r\n                    }\r\n                    selectedRecord['srulename'] = srulename\r\n                    selectedRecord['srulenamecopy'] = srulename\r\n                    selectedRecord['nruleexecordercopy'] =nruleexecorder\r\n                    // selectedRecord[\"groupList\"][0][\"button_and\"] = true\r\n                    let addGroupList = []\r\n                    addGroupList = responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList']\r\n                    const DiagnosticCase = constructOptionList(response[4].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[4].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[4].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[6].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\r\n\r\n\r\n                    let commentsubtypelst = response[7].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = outcomeList['testInitiateTests'] && outcomeList['testInitiateTests']\r\n                    masterData['testRepeat'] = outcomeList['testRepeatTests'] && outcomeList['testRepeatTests']\r\n                    masterData['testenforceTests'] = outcomeList['testenforceTests'] && outcomeList['testenforceTests']\r\n\r\n                    masterData['testParameterComments'] = outcomeList['testCommentsTests'] && outcomeList['testCommentsTests']\r\n                    masterData['testParameterreportComments'] = outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests']\r\n\r\n                    masterData[\"testComments\"] = outcomeList['testCommentObject'] && outcomeList['testCommentObject']\r\n                    masterData[\"reportComments\"] = outcomeList['reportCommentObject'] && outcomeList['reportCommentObject']\r\n                    masterData[\"testSite\"] = outcomeList['siteObject'] && outcomeList['siteObject']\r\n                    selectedRecord[\"nproductcatcode\"] = outcomeList['nproductcatcode'] && outcomeList['nproductcatcode']\r\n                    selectedRecord[\"nallottedspeccode\"] = outcomeList['nallottedspeccode'] && outcomeList['nallottedspeccode']\r\n                    selectedRecord[\"ncomponentcode\"] = outcomeList['ncomponentcode'] && outcomeList['ncomponentcode']\r\n                    selectedRecord[\"groupListJoins\"] = outcomeList['groupListJoins'] && outcomeList['groupListJoins']\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation: operation, screenName: \"IDS_EDITRULESENGINE\", selectedRecord,\r\n                            openPortalModal: true,// ncontrolCode: ncontrolCode,\r\n                            loading: false, addGroupList,\r\n                            masterData: {\r\n                                ...masterData, testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                rulesOption: viewListMap.get(\"OptionList\"),\r\n                                DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                                GradeList: Grade.get(\"OptionList\"),\r\n                                siteList: site.get(\"OptionList\"),\r\n                                resultTypeList: resultType.get(\"OptionList\"),\r\n                                testCommentsTestsTab: outcomeList['testCommentsTestsTab'],\r\n                                testRepeatTestsTab: outcomeList['testRepeatTestsTab'], \r\n                                testenforceTestsTab: outcomeList['testenforceTestsTab'],  \r\n                                PredefinedParameterOptions: outcomeList['PredefinedParameterOptions'],\r\n                                testInitiateSiteTab: outcomeList['testInitiateSiteTab'],\r\n                                reportCommentsTestsTab: outcomeList['reportCommentsTestsTab'],\r\n                            },\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\"),\r\n\r\n                            testcomments,\r\n                            reportcomments,\r\n\r\n                            testInitiateTests: outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'],\r\n                            testCommentsTests: outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'],\r\n                            testRepeatTests: outcomeList['testRepeatTests'] && outcomeList['testRepeatTests'],\r\n                            testenforceTests: outcomeList['testenforceTests'] && outcomeList['testenforceTests'],\r\n                            reportCommentsTests: outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'],\r\n                            siteObject: outcomeList['siteObject'] && outcomeList['siteObject'],\r\n                            testCommentObject: outcomeList['testCommentObject'] && outcomeList['testCommentObject'],\r\n                            reportCommentObject: outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'],\r\n                          \r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            activeTabIndex: 0,\r\n                            action: \"update\"\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTRULETOEDIT\" }));\r\n        }\r\n    }\r\n}\r\nexport function getParameterRulesEngine(selectedRecord, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",\r\n            { 'userinfo': userInfo, \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value, })\r\n            .then(response => {\r\n                const testGroupTestParameterRulesEngine = constructOptionList(response.data.TestGroupTestParameterRulesEngine || [], \"ntestgrouptestparametercode\",\r\n                    \"sparametersynonym\", undefined, undefined, undefined);\r\n                let testGroupTestParameterRulesEngineList = testGroupTestParameterRulesEngine.get(\"OptionList\");\r\n                masterData['testGroupTestParameterRulesEngine'] = testGroupTestParameterRulesEngineList\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getParameterResultValue(combodata,groupIndex,index,PredefinedParameterOptions, selectedRecord, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterResultValue\",\r\n            {\r\n                'userinfo': userInfo, \"nparametertypecode\": combodata['stestname']['item']['nparametertypecode'],\r\n                'ntestgrouptestparametercode': combodata['stestname']['item']['ntestgrouptestparametercode']\r\n            })\r\n            .then(response => {\r\n                const PredefinedParameterRulesEngine = constructOptionList(response.data.PredefinedParameterRulesEngine || [], \"ntestgrouptestpredefcode\",\r\n                    \"spredefinedname\", undefined, undefined, undefined);\r\n                    if(PredefinedParameterOptions[groupIndex]===undefined)\r\n                    {\r\n                        PredefinedParameterOptions[groupIndex]=[] \r\n                    }\r\n                    if(PredefinedParameterOptions[groupIndex][index]===undefined)\r\n                    {\r\n                        PredefinedParameterOptions[groupIndex][index]=[] \r\n                    }\r\n                 PredefinedParameterOptions[groupIndex][index] = PredefinedParameterRulesEngine.get(\"OptionList\"); \r\n                masterData['PredefinedParameterOptions'] = PredefinedParameterOptions\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}