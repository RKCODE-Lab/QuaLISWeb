{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroup.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { Row, Col, Card, Button, Nav } from 'react-bootstrap';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport { faEye, faTrashAlt } from '@fortawesome/free-regular-svg-icons'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport OrgTree from 'react-org-tree';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport { callService, crudMaster, filterTestGroup, createTree, editTree, getTestGroupDetails, sampleTypeOnChange, validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent, changeTestCategory, addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter, addTestFile, editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData, viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial, getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd, getEditTestGroupRulesEngine, getSelectedTestGroupRulesEngine, getParameterforEnforce, getParameterRulesEngine, getParameterResultValue, subCodedResultView, saveExecutionOrder, getPredefinedDataRulesEngine, getCopyValues, generateControlBasedReport, getSpecDetailsForCopy, getSpecificationComboServices, getComponentComboServices, getRulesTestComboServices, getProductComboServices, getProfileRootComboServices } from '../../actions';\nimport { constructOptionList, formatInputDate, create_UUID, deleteAttachmentDropZone, filterRecordBasedOnTwoArrays, getControlMap, onDropAttachFileList, showEsign, sortData, Lims_JSON_stringify, replaceBackSlash } from '../../components/CommonScript';\nimport TestGroupTestTab from './TestGroupTestTab';\nimport AddTestGroupSpecification from './AddTestGroupSpecification';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, REPORTTYPE, attachmentType, formCode, designProperties, // parameterType,SampleType, grade } from '../../components/Enumeration';\n// parameterType,SampleType } from '../../components/Enumeration';\nparameterType, SampleType, MaterialType, ResultEntry } from '../../components/Enumeration';\nimport AddTestGroupTest from './AddTestGroupTest';\nimport AddProfileTree from './AddProfileTree';\nimport SampleFilter from './SampleFilter';\nimport AddFile from '../testmanagement/AddFile';\nimport AdvFilter from '../../components/AdvFilter';\nimport SpecificationHistory from './SpecificationHistory';\nimport TestGroupSpecFile from './TestGroupSpecFile';\nimport SpecificationInfo from './SpecificationInfo';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport TransationListMaster from '../../components/TransactionListMaster';\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component'; // import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport { testMoreFields, testSubFields, searchFieldList, specificationColumnList, addTestColumnList, editTestColumnList, specificationCopyColumnList } from './TestGroupFields';\nimport EditTestGroupTest from './EditTestGroupTest';\nimport { ContentPanel, SearchAdd } from '../../components/App.styles';\nimport '../../pages/registration/registration.css';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { ProductList } from '../product/product.styled';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView'; // import ReactTooltip from 'react-tooltip';\n\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\nimport AddTestGroupRule from './AddTestGroupRule';\nimport ViewSubCodedResult from './ViewSubCodedResult';\nimport { numberConversion, numericGrade } from '../ResultEntryBySample/ResultEntryValidation';\nimport ResultEntryPredefinedComments from '../ResultEntryBySample/ResultEntryPredefinedComments';\nimport ModalShow from '../../components/ModalShow';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\n\nclass TestGroup extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.reloadData = () => {\n      const filterData = this.props.Login.filterData || this.state.filterData;\n\n      if (filterData.nsampletypecode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      } else if (filterData.nproductcatcode === \"\") {\n        if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CATEGORYNOTAVAILABLE\"\n          }));\n        }\n      } else if (filterData.nproductcode === \"\" && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO) {\n        if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY && filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTNOTAVAILABLE\"\n          }));\n        } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        }\n      } else if (filterData.ntreeversiontempcode === \"\") {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n        }));\n      } else {\n        const inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: filterData.nsampletypecode.item[\"nsampletypecode\"],\n            nproductcatcode: filterData.nproductcatcode.item[\"nproductcatcode\"],\n            //   nproductcode: filterData.nproductcode.item[\"nproductcode\"],\n            nproductcode: filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : filterData.nproductcode ? filterData.nproductcode.value : -1,\n            ntreeversiontempcode: filterData.ntreeversiontempcode.item[\"ntreeversiontempcode\"],\n            nprojectmastercode: filterData.nprojectmastercode !== undefined ? filterData.nprojectmastercode.item[\"nprojectmastercode\"] : -1,\n            filterData //: { ...this.props.Login.filterData }\n\n          },\n          historyDataState: this.state.historyDataState\n        };\n        this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\n      }\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteRecord(obj));\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        testskip: event.skip,\n        testtake: event.take\n      });\n    };\n\n    this.viewTestFile = props => {\n      const viewParam = {\n        operation: \"view\",\n        methodUrl: \"TestGroupTestFile\",\n        classUrl: \"testgroup\",\n        inputData: {\n          ntestgroupfilecode: props.selectedTest ? props.selectedTest.ntestgroupfilecode : 0,\n          userinfo: this.props.Login.userInfo,\n          testgroupspecification: this.props.Login.masterData.SelectedSpecification,\n          ntestgrouptestcode: props.selectedTest ? props.selectedTest.ntestgrouptestcode : 0\n        }\n      };\n      this.props.viewAttachment(viewParam);\n    };\n\n    this.fileViewIcon = master => {\n      if (master.ntestgroupfilecode > 0 && master.nlinkcode === transactionStatus.NA) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.linkViewIcon = master => {\n      if (master.ntestgroupfilecode > 0 && master.nlinkcode !== transactionStatus.NA) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    this.onFilterSumbit = () => {\n      const tempFilterData = this.state.tempFilterData;\n\n      if (tempFilterData.nsampletypecode === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENOTAVAILABLE\"\n        }));\n      } else if (tempFilterData.nproductcatcode === \"\") {\n        if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_CATEGORYNOTAVAILABLE\"\n          }));\n        }\n      } // else if(tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO){\n      else if (tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === \"\" && tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO || tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === undefined && tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) {\n        if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY && tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_INSTRUMENTNOTAVAILABLE\"\n          }));\n        } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_MATERIALNOTAVAILABLE\"\n          }));\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_PRODUCTNOTAVAILABLE\"\n          }));\n        }\n      } // }\n      else if (tempFilterData.ntreeversiontempcode === \"\") {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\"\n        }));\n      } else {\n        const inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: tempFilterData.nsampletypecode.value,\n            nproductcatcode: tempFilterData.nproductcatcode.value,\n            nproductcode: tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : tempFilterData.nproductcode ? tempFilterData.nproductcode.value : -1,\n            ntreeversiontempcode: tempFilterData.ntreeversiontempcode.value,\n            nprojectmastercode: tempFilterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE ? tempFilterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? tempFilterData.nprojectmastercode.value : -1 : -1,\n            filterData: { ...tempFilterData\n            }\n          },\n          historyDataState: this.state.historyDataState\n        };\n        this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\n      }\n    };\n\n    this.onCopyTreeClick = (selectedCopyNodeManipulationCode, selectedCopyProfileName, CopyFocusKey, CopyActiveKey) => {\n      let selectedRecord = { ...this.state.selectedRecord\n      } || {};\n      selectedRecord['selectedCopyNodeManipulationCode'] = selectedCopyNodeManipulationCode;\n      selectedRecord['selectedCopyProfileName'] = selectedCopyProfileName;\n      selectedRecord['CopyFocusKey'] = CopyFocusKey;\n      selectedRecord['CopyActiveKey'] = CopyActiveKey;\n      selectedRecord['scopyspecname'] = selectedCopyProfileName;\n      this.setState({\n        selectedRecord: { ...selectedRecord\n        } // isCopySpecRender: false\n\n      });\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_SPECIFICATION\",\n        operation: \"get\",\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedRecord: event.item,\n        activeKey: event.key,\n        focusKey: event.key,\n        primaryKey: event.primaryKey,\n        historyDataState: this.state.historyDataState\n      };\n      this.props.getSpecification(inputParam, this.props.Login.masterData, this.searchRef);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_FILE\", /*#__PURE__*/React.createElement(TestGroupSpecFile, {\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        deleteRecord: this.deleteRecord,\n        testGroupSpecFile: this.props.Login.masterData.TestGroupSpecFile || [],\n        selectedSpecification: this.props.Login.masterData.SelectedSpecification,\n        addTestFile: this.addFile,\n        editSpecFile: this.props.editSpecFile,\n        filterData: this.state.filterData,\n        viewTestFile: this.viewTestFile,\n        defaultRecord: this.defaultRecord,\n        screenName: \"IDS_FILE\",\n        viewAttachment: this.props.viewAttachment,\n        settings: this.props.Login.settings,\n        masterData: this.props.Login.masterData,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1419,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_SPECIFICATIONHISTORY\", /*#__PURE__*/React.createElement(SpecificationHistory, {\n        data: this.props.Login.masterData.TestGroupSpecificationHistory,\n        dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], this.state.historyDataState),\n        dataState: this.state.historyDataState,\n        dataStateChange: this.historyDataStateChange // testGroupSpecificationHistory={this.props.Login.masterData.TestGroupSpecificationHistory}\n        // dataState={this.props.Login.screenName === \"IDS_SPECIFICATIONHISTORY\" ? this.state.historyDataState : { skip: 0, take: 10 }}\n        ,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_SPECIFICATIONHISTORY\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1438,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.historyDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], event.dataState),\n        historyDataState: event.dataState\n      });\n    };\n\n    this.specDataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TestGroupTestClinicalSpec || [], event.dataState),\n        clinicalspecDataState: event.dataState\n      });\n    };\n\n    this.addFile = (userInfo, operation, ncontrolCode, screenName, modalName, nflag) => {\n      // const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n      // if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\n      //     || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n      //     this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName, nflag);\n      // } else {\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\n      // }\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.componentRowClick = event => {\n      let masterData = this.props.Login.masterData;\n      masterData[\"SelectedComponent\"] = event.testgroupspecsampletype[0];\n      const inputParam = {\n        testgroupspecsampletype: event.testgroupspecsampletype[0],\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.getTestGroupComponentDetails(inputParam, masterData, this.searchRef);\n    };\n\n    this.deleteTest = deleteParam => {\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const testgrouptest = deleteParam.props.testgrouptest;\n          const inputParam = {\n            inputData: {\n              testgrouptest,\n              userinfo: this.props.Login.userInfo,\n              testgroupspecification,\n              ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value,\n              nprojectmastercode: masterData.selectedNode.nprojectmastercode ? masterData.selectedNode.nprojectmastercode : -1\n            },\n            classUrl: \"testgroup\",\n            operation: \"delete\",\n            methodUrl: \"Test\",\n            screenName: \"IDS_TEST\",\n            postParam: {\n              inputListName: \"TestGroupTest\",\n              selectedObject: \"SelectedTest\",\n              primaryKeyField: \"ntestgrouptestcode\",\n              primaryKeyValue: testgrouptest.ntestgrouptestcode,\n              fetchUrl: \"testgroup/getTestGroupTest\",\n              fecthInputObject: {\n                userinfo: this.props.Login.userInfo\n              },\n              masterData,\n              searchFieldList,\n              unchangeList: [\"TestGroupSpecification\", \"SelectedSpecification\", \"SampleType\", \"TreeVersionTemplate\", \"ProductCategory\", \"SelectedTest\", \"Product\", \"AgaramTree\", \"OpenNodes\", \"selectedNode\", \"FocusKey\", \"ActiveKey\", \"SelectedComponent\", \"TestGroupSpecSampleType\"] //, isSingleSelect: true\n\n            }\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: \"IDS_TEST\",\n                operation: \"delete\",\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let masterData = this.props.Login.masterData;\n\n      if (loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Default\" || this.props.Login.operation === 'approve' || this.props.Login.operation === 'complete') {\n          loadEsign = false;\n          openModal = false;\n          selectedRecord = {};\n          delete masterData.selectedRecordCopy;\n        } else {\n          loadEsign = false; // selectedRecord[\"agree\"] = 4;\n\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n        delete masterData.selectedRecordCopy;\n        delete masterData.CopyOpenNodes;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onInputOnChange = (event, caseNo, optional) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (event.target.type === 'checkbox') {\n            selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\n          } else if (event.target.type === 'radio') {\n            selectedRecord[event.target.name] = optional; // selectedRecord[\"sfilename\"] = \"\";\n          } else {\n            selectedRecord[event.target.name] = event.target.value;\n          }\n\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[event.target.name] = event.target.value;\n          const indexKey = Object.keys(optional)[0];\n          const value = Object.values(optional)[0];\n          const treeData = {\n            ntreeversiontempcode: value.ntreeversiontempcode,\n            npositioncode: value.nlevelno - 1,\n            sleveldescription: event.target.value,\n            ntemptranstestgroupcode: value.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: \"\",\n            nnextchildcode: value.schildnode !== null ? value.schildnode : -1,\n            ntemplatemanipulationcode: value.ntemplatemanipulationcode,\n            isreadonly: value.ntemplatemanipulationcode > 0 ? true : false,\n            slevelformat: value.slevelformat\n          };\n          let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\n          treetemplatemanipulation[indexKey] = treeData;\n          selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChangeRulesEngine = tabProps => {\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['activeTabName'] = tabProps.activeTabName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.tabDetailRulesEngine = () => {\n      let masterData = this.props.Login.masterData || {};\n      let jsonuidata = this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine['jsonuidata'];\n      const tabMap = new Map();\n      {\n        tabMap.set(\"IDS_Test\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          expandField: \"expanded\",\n          handleExpandChange: this.handleExpandChange,\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testInitiateTests'], \"descending\", \"npkAtestparametercode\") || [], this.state.dataStatetestinitiate ? this.state.dataStatetestinitiate : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStatetestinitiate ? this.state.dataStatetestinitiate : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangetestinitiateTab,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          hasChild: true,\n          childMappingField: 'npkAtestparametercode',\n          childColumnList: [{\n            \"idsName\": \"IDS_TOSITE\",\n            \"dataField\": \"stositename\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_FROMSITE\",\n            \"dataField\": \"sfromsitename\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_Test\" //gridHeight = {'400px'}\n          ,\n          isActionRequired: true,\n          actionIcons: [{\n            title: this.props.intl.formatMessage({\n              id: \"IDS_VIEWPARAMETER\"\n            }),\n            controlname: \"faEye\",\n            hidden: false,\n            objectName: \"view\",\n            onClick: this.viewParameter\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1842,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_COMMENTS\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          handleExpandChange: this.handleExpandChange,\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentsTestsTab'], \"descending\", \"nslno\") || [], this.state.dataState ? this.state.dataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataState ? this.state.dataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChange,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          childMappingField: 'npkBtestparametercode',\n          extractedColumnList: [{\n            \"idsName\": \"IDS_DESCRIPTION\",\n            \"dataField\": \"sdescription\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_RESULTS\",\n            \"dataField\": \"spredefinedname\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_COMMENTSUBTYPE\",\n            \"dataField\": \"scommentsubtype\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_COMMENTTYPE\",\n            \"dataField\": \"scommenttype\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap2 && this.state.childListMap2,\n          activeTabName: \"IDS_COMMENTS\" //gridHeight = {'400px'}\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1889,\n            columnNumber: 13\n          }\n        }));\n        tabMap.set(\"IDS_REPEAT\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testRepeatTestsTab'], \"descending\", \"npkCtestparametercode\") || [], this.state.dataStaterepeatTab ? this.state.dataStaterepeatTab : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStaterepeatTab ? this.state.dataStaterepeatTab : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangeRepeatTab,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_REPEATCOUNT\",\n            \"dataField\": \"nrepeatcountno\",\n            \"width\": \"200px\"\n          }],\n          activeTabName: \"IDS_COMMENTS\" //gridHeight = {'400px'}\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1923,\n            columnNumber: 9\n          }\n        }));\n        tabMap.set(\"IDS_ENFORCERESULT\", /*#__PURE__*/React.createElement(DataGrid, {\n          key: \"testsectionkey\",\n          primaryKeyField: \"nresultusedmaterialcode\",\n          dataResult: this.props.Login.masterData.SelectedRulesEngine && process(sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testenforceTestsTab'], \"descending\", \"npkDtestparametercode\") || [], this.state.dataStateChangenforceTab ? this.state.dataStateChangenforceTab : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateChangenforceTab ? this.state.dataStateChangenforceTab : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateChangenforceTab,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: false,\n          selectedId: 0,\n          deleteParam: {\n            operation: \"delete\"\n          },\n          extractedColumnList: [{\n            \"idsName\": \"IDS_TESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_PARAMETERS\",\n            \"dataField\": \"sparametersynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_RESULTFLAG\",\n            \"dataField\": \"sgradename\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_RESULTS\",\n            \"dataField\": \"senforceresult\",\n            \"width\": \"200px\"\n          }],\n          activeTabName: \"IDS_COMMENTS\" //gridHeight = {'400px'}\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1952,\n            columnNumber: 5\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.dataStateChange = (event, ntestgrouptestparametercode) => {\n      let dataStateObject = this.state.dataStateObject || {};\n\n      if (ntestgrouptestparametercode) {\n        dataStateObject = { ...dataStateObject,\n          [ntestgrouptestparametercode]: event.dataState\n        };\n        this.setState({\n          dataStateObject\n        });\n      } else {\n        this.setState({\n          dataState: event.dataState\n        });\n      }\n    };\n\n    this.dataStateChangetestRepeat = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestRepeat: event.dataState\n      });\n    };\n\n    this.dataStateChangetestEnforce = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestEnforce: event.dataState\n      });\n    };\n\n    this.dataStateChangetestinitiateTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStatetestinitiate: event.dataState\n      });\n    };\n\n    this.dataStateChangeViewParameter = event => {\n      this.setState({\n        dataStateChangeViewParameter: event.dataState\n      });\n    };\n\n    this.dataStateChangeRepeatTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStaterepeatTab: event.dataState\n      });\n    };\n\n    this.dataStateChangenforceTab = event => {\n      this.setState({\n        //  dataResult: process(this.props.Login.queryData, event.dataState),\n        dataStateChangenforceTab: event.dataState\n      });\n    };\n\n    this.dataStateChangeMain = event => {\n      this.setState({\n        dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\n        dataStateMain: event.dataStateMain\n      });\n    };\n\n    this.ConfirmDeleteRule = deleteId => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETODELETE\"\n        }));\n      }\n    };\n\n    this.closeModalShow = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let modalParameterPopup = this.props.Login.modalParameterPopup;\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['srulename'] = \"\";\n\n      if (selectedRecord['ParameterRulesEngine']) {\n        selectedRecord['ParameterRulesEngine'] = [];\n      }\n\n      openModalPopup = false;\n      modalParameterPopup = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModalPopup,\n          selectedRecord,\n          modalParameterPopup\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onModalSavePredefAlert = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n      let currentntestgrouptestpredefcode = this.state.currentntestgrouptestpredefcode || 0;\n      let bool = this.state.selectedRecord.ParameterRulesEngine.some(x => x['ntestgrouptestparametercode'] === currentAlertResultCode);\n\n      if (bool) {\n        this.state.selectedRecord.ParameterRulesEngine.map(Parameter => {\n          if (Parameter['ntestgrouptestparametercode'] === currentAlertResultCode) {\n            Parameter['additionalInfoUidata'] = {\n              ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode']\n            };\n\n            if (selectedRecord['ntestgrouptestpredefsubcode']) {\n              if (typeof selectedRecord['ntestgrouptestpredefsubcode'] === 'string') {\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'];\n              } else {\n                Parameter['additionalInfo'] = \"\";\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'].map(x => x.label + \",\").join('\\n');\n                Parameter['additionalInfo'] = Parameter['additionalInfo'].substring(0, Parameter['additionalInfo'].length - 1);\n              }\n            } else {\n              Parameter['additionalInfo'] = \"\";\n              Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata'];\n            }\n\n            Parameter['ntestgrouptestpredefcode'] = currentntestgrouptestpredefcode;\n          }\n        });\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          showAlertGrid: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModalShowPredefAlert = () => {\n      let showAlertGrid = this.props.Login.showAlertGrid;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let masterData = this.props.Login.masterData && this.props.Login.masterData; // masterData['RESelectedTest'].forEach(object => {\n      //     object['expanded']&&delete object['expanded'];\n      //   });\n\n      selectedRecord['ntestgrouptestpredefsubcode'] && delete selectedRecord['ntestgrouptestpredefsubcode'];\n      showAlertGrid = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showAlertGrid,\n          masterData,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onsavevalidation = selectedRecord => {\n      let grouplist = selectedRecord[\"groupList\"];\n      let hasAll = true;\n\n      for (var i = 0; i < grouplist.length; i++) {\n        let rules = grouplist[i];\n\n        for (var j = 0; j < rules.length; j++) {\n          let props = [];\n\n          if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\n            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\n          } else if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 3) {\n            if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestpredefcode\"];\n            } else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestcharcode\"];\n            } else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC) {\n              props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestnumericcode\"];\n            } else {\n              if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\n                props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\n              } else {\n                props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\n              }\n            }\n          } else {\n            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\n          }\n\n          hasAll = props.every(prop => rules[j].hasOwnProperty(prop));\n\n          if (hasAll === false) {\n            break;\n          }\n        }\n\n        if (hasAll === false) {\n          break;\n        }\n      }\n\n      return hasAll;\n    };\n\n    this.save = () => {\n      let inputData = [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      let testsInvolvedInRules = [];\n      let testsNameInvolvedInRules = [];\n      const {\n        selectedRecord\n      } = this.state;\n      let rules = []; //  if (selectedRecord[\"nproductcatcode\"]) {\n\n      if (testInitiateTests.length > 0 || testCommentsTests.length > 0 || testRepeatTests.length > 0 || testenforceTests.length > 0) {\n        if (selectedRecord[\"groupList\"].length > 0) {\n          if (this.onsavevalidation(selectedRecord)) {\n            if (selectedRecord[\"srulename\"] && selectedRecord[\"srulename\"] !== \"\" && this.props.Login.action !== 'update' && this.props.Login.action !== 'IDS_ADDTESTCOMMENTS' && this.props.Login.action !== 'IDS_ADDREPORTCOMMENTS' && this.props.Login.action !== 'IDS_ADDTEST' && this.props.Login.action !== 'IDS_ADDSITE' && this.props.Login.action !== 'IDS_ADDPARAMETER') {\n              if (selectedRecord[\"groupList\"]) {\n                let groupList = [];\n                let outcomeList = {};\n                groupList = selectedRecord[\"groupList\"];\n                outcomeList['groupList'] = groupList;\n                outcomeList['addGroupList'] = this.props.Login.addGroupList;\n                outcomeList['testInitiateTests'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests;\n                outcomeList['testCommentsTests'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests;\n                outcomeList['testRepeatTests'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests;\n                outcomeList['testenforceTests'] = this.props.Login.testenforceTests && this.props.Login.testenforceTests;\n                outcomeList['reportCommentsTests'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests;\n                outcomeList['siteObject'] = this.props.Login.siteObject && this.props.Login.siteObject;\n                outcomeList['testCommentObject'] = this.props.Login.testCommentObject && this.props.Login.testCommentObject;\n                outcomeList['reportCommentObject'] = this.props.Login.reportCommentObject && this.props.Login.reportCommentObject;\n                outcomeList['testInitiateSiteTab'] = this.props.Login.masterData.testInitiateSiteTab && this.props.Login.masterData.testInitiateSiteTab;\n                outcomeList['testCommentsTestsTab'] = this.props.Login.masterData.testCommentsTestsTab && this.props.Login.masterData.testCommentsTestsTab;\n                outcomeList['reportCommentsTestsTab'] = this.props.Login.reportCommentsTestsTab && this.props.Login.reportCommentsTestsTab;\n                outcomeList['testRepeatTestsTab'] = this.props.Login.masterData['testRepeatTestsTab'] && this.props.Login.masterData['testRepeatTestsTab'];\n                outcomeList['testenforceTestsTab'] = this.props.Login.masterData['testenforceTestsTab'] && this.props.Login.masterData['testenforceTestsTab'];\n                outcomeList['PredefinedParameterOptions'] = PredefinedParameterOptions; // outcomeList['nproductcatcode'] = selectedRecord['nproductcatcode']\n\n                outcomeList['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode; // outcomeList['nallottedspeccode'] = selectedRecord['nallottedspeccode']\n                // outcomeList['ncomponentcode'] = selectedRecord['ncomponentcode'] \n\n                outcomeList['groupListJoins'] = selectedRecord['groupListJoins'] ? selectedRecord['groupListJoins'] : [];\n                let ruleEngineLayout = [];\n                let ruleEngineLayoutObject = [];\n                let groupRuleObject = {};\n                groupList.map(List => List.map(x => {\n                  testsInvolvedInRules.push(x.stestname.item.ntestgrouptestcode);\n                  testsNameInvolvedInRules.push(x.stestname.item);\n                }));\n                outcomeList['testsNameInvolvedInRules'] = testsNameInvolvedInRules;\n                outcomeList['testsInvolvedInRules'] = testsInvolvedInRules;\n                groupList.map(List => {\n                  if (List.hasOwnProperty('button_or') && List['button_or'] === true) {\n                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\n                      groupRuleObject['button_not_button_or'] = List;\n                    } else {\n                      groupRuleObject['button_or'] = List;\n                    } // groupRuleObject['button_or'] = List\n\n\n                    ruleEngineLayout.push(groupRuleObject);\n                    groupRuleObject = {};\n                  }\n\n                  if (List.hasOwnProperty('button_and') && List['button_and'] === true) {\n                    if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\n                      groupRuleObject['button_not_button_and'] = List;\n                    } else {\n                      groupRuleObject['button_and'] = List;\n                    } //  groupRuleObject['button_and'] = List\n\n\n                    ruleEngineLayout.push(groupRuleObject);\n                    groupRuleObject = {};\n                  }\n                });\n                ruleEngineLayoutObject = groupList.hasOwnProperty('button_or') && groupList['button_or'] === true ? {\n                  'button_or': ruleEngineLayout\n                } : {\n                  'button_and': ruleEngineLayout\n                }; // console.log('savelist--->', JSON.stringify(ruleEngineLayoutObject))\n                //  inputData['nproductcatcode'] = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\n                //  inputData['nproductcatcode'] = selectedRecord['nproductcatcode'].value\n\n                inputData['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode; // inputData['nallottedspeccode'] = selectedRecord['nallottedspeccode'].value\n                // inputData['ncomponentcode'] = selectedRecord['ncomponentcode'].value\n\n                inputData['srulename'] = selectedRecord['srulename']; //   inputData['nruleexecorder'] = parseInt(selectedRecord['nruleexecorder'])\n\n                inputData['outcomeList'] = JSON.stringify(outcomeList);\n                inputData['jsondata'] = JSON.stringify(ruleEngineLayout);\n                inputData['userinfo'] = this.props.Login.userInfo;\n                inputData['selectedValueForAudit'] = {\n                  sproductcatname: this.state.filterData.nproductcatcode && this.state.filterData.nproductcatcode.label || 'NA',\n                  sproductname: this.state.filterData.nproductcode && this.state.filterData.nproductcode.label || 'NA',\n                  sspecname: this.props.Login.masterData.SelectedSpecification.sspecname || 'NA',\n                  scomponentname: this.props.Login.masterData.SelectedComponent.scomponentname || 'NA',\n                  stestsynonym: this.props.Login.masterData.SelectedTest.stestsynonym || 'NA',\n                  sleveldescription: this.props.Login.masterData.selectedNode.sleveldescription || 'NA',\n                  srulename: selectedRecord['srulename']\n                };\n\n                if (this.props.Login.operation === 'update') {\n                  inputData['ntestgrouprulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode'];\n                }\n\n                const inputParam = {\n                  classUrl: \"testgrouprulesengine\",\n                  methodUrl: \"TestGroupRulesEngine\",\n                  displayName: this.props.Login.inputParam.displayName,\n                  inputData: inputData,\n                  operation: this.props.Login.operation === 'create' ? 'create' : 'update'\n                };\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\n              } else {\n                toast.info(this.props.intl.formatMessage({\n                  id: \"IDS_PLEASEADDRULE\"\n                }));\n              }\n            } else {\n              selectedRecord['srulename'] = selectedRecord['srulenamecopy'] || \"\"; //  selectedRecord['nruleexecorder'] = selectedRecord['nruleexecordercopy'] || \"\"\n\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  openModalPopup: true,\n                  selectedRecord,\n                  action: \"IDS_SAVERULEMODAL\",\n                  openmodalsavePopup: true\n                }\n              };\n              this.props.updateStore(updateInfo); //   toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERRULESENGINENAME\" }));\n            }\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_COMPLETETHERULETOSAVE\"\n            }));\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_ATLEASTADDONERULE\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ATLEASTADDONEOUTCOME\"\n        }));\n      }\n    };\n\n    this.onOutcomeChange = (comboData, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"outComeList\"] = [];\n      selectedRecord[\"outComeList\"][index] = [];\n      selectedRecord[\"outComeList\"][index] = comboData;\n\n      if (selectedRecord[\"outComeList\"][index]) {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.writtenRules = data => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let grouplist = selectedRecord[\"groupList\"];\n      let activeTabIndex = this.props.Login.activeTabIndex || 0;\n\n      if (activeTabIndex === 1) {\n        let boolean = grouplist.every(x => x.every(y => y['stestname']['item'].ntestgrouptestcode !== data['item'].ntestgrouptestcode));\n\n        if (boolean) {\n          return data;\n        }\n      } else {\n        let boolean = grouplist.some(x => x.some(y => y['stestname']['item'].ntestgrouptestcode === data['item'].ntestgrouptestcode));\n\n        if (boolean) {\n          return data;\n        }\n      }\n    };\n\n    this.selectedTestRemove = data => {\n      let activeTabIndex = this.props.Login.activeTabIndex || 0;\n\n      if (activeTabIndex === 1) {\n        if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode !== data['item'].ntestgrouptestcode) {\n          return data;\n        }\n      } else {\n        if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode === data['item'].ntestgrouptestcode) {\n          return data;\n        }\n      }\n    };\n\n    this.outComeTestsRemoveFromRules = data => {\n      let testInitiateTests = this.props.Login.testInitiateTests;\n      let boolean = testInitiateTests.every(x => x['ntestgrouptestcode'] !== data['item'].ntestgrouptestcode);\n\n      if (boolean) {\n        return data;\n      }\n    };\n\n    this.addTest = tabName => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let action = this.props.Login.action;\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      let rulesOption = this.props.Login.masterData.rulesOption || [];\n      let testInitiateTestCombo = this.props.Login.masterData.testInitiateTestCombo || [];\n      let testCommentsTestCombo = this.props.Login.masterData.testCommentsTestCombo || [];\n      let testRepeatTestCombo = this.props.Login.masterData.testRepeatTestCombo || [];\n      let testenforceTestCombo = this.props.Login.masterData.testenforceTestCombo || [];\n\n      if (tabName == 'IDS_Test') {\n        testInitiateTestCombo = testInitiateTestCombo.filter(this.selectedTestRemove);\n        testInitiateTestCombo = testInitiateTestCombo.filter(this.writtenRules);\n        selectedRecord['ParameterRulesEngine'] && delete selectedRecord['ParameterRulesEngine'];\n      } else if (tabName == 'IDS_COMMENTS') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testCommentsTestCombo.filter(this.selectedTestRemove);\n        testCommentsTestCombo = testCommentsTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testCommentsTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testCommentsTestCombo = testCommentsTestCombo;\n        } else {\n          testCommentsTestCombo = [...testCommentsTestCombo, ...selectedTestTempArray];\n        }\n      } else if (tabName == 'IDS_REPEAT') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testRepeatTestCombo.filter(this.selectedTestRemove);\n        testRepeatTestCombo = testRepeatTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testRepeatTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testRepeatTestCombo = testRepeatTestCombo;\n        } else {\n          testRepeatTestCombo = [...testRepeatTestCombo, ...selectedTestTempArray];\n        }\n      } else if (tabName == 'IDS_ENFORCERESULT') {\n        let selectedTestTempArray = [];\n        selectedTestTempArray = testenforceTestCombo.filter(this.selectedTestRemove);\n        testenforceTestCombo = testenforceTestCombo.filter(this.writtenRules);\n        let duplicatePresent = selectedTestTempArray.some(x => testenforceTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode));\n\n        if (duplicatePresent) {\n          testenforceTestCombo = testenforceTestCombo;\n        } else {\n          testenforceTestCombo = [...testenforceTestCombo, ...selectedTestTempArray];\n        }\n      } else {}\n\n      selectedRecord['ntestgrouptestcode'] && delete selectedRecord['ntestgrouptestcode'];\n      selectedRecord['nsampletestcommentscode'] && delete selectedRecord['nsampletestcommentscode'];\n      selectedRecord['ncommentsubtypecode'] && delete selectedRecord['ncommentsubtypecode'];\n      selectedRecord['ncommenttypecode'] && delete selectedRecord['ncommenttypecode'];\n      selectedRecord['sgeneralcomments'] && delete selectedRecord['sgeneralcomments'];\n      selectedRecord['needoutsource'] && delete selectedRecord['needoutsource'];\n      selectedRecord['sdescription'] && delete selectedRecord['sdescription'];\n      selectedRecord['ntestgrouptestparametercode'] && delete selectedRecord['ntestgrouptestparametercode'];\n      selectedRecord['senforceresult'] && delete selectedRecord['senforceresult'];\n      selectedRecord['ngradecode'] && delete selectedRecord['ngradecode'];\n      selectedRecord['nfromsitecode'] && delete selectedRecord['nfromsitecode'];\n      selectedRecord['ntositecode'] && delete selectedRecord['ntositecode'];\n      selectedRecord['nrepeatcountno'] && delete selectedRecord['nrepeatcountno'];\n\n      if (this.props.Login.addGroupList.length > 0) {\n        action = \"IDS_ADDTEST\";\n        openModalPopup = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup,\n            modalParameterPopup: false,\n            action,\n            selectedRecord,\n            openmodalsavePopup: false,\n            testInitiateTestCombo,\n            testCommentsTestCombo,\n            testRepeatTestCombo,\n            testenforceTestCombo\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEADDRULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.onRuleChange = (comboData, fieldName, groupIndex, index) => {\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      const {\n        selectedRecord\n      } = this.state;\n      this.clearSelectedRule(selectedRecord, index);\n\n      if (selectedRecord[\"groupList\"][groupIndex][index][fieldName] && selectedRecord[\"groupList\"][groupIndex][index][fieldName].value !== comboData.value) {\n        selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'];\n        selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'];\n      }\n\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName]['nparenttestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName]['nparentstestname'] = this.props.Login.masterData.SelectedTest.stestname;\n\n      if (selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype']) {\n        if (selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'].value === 3) {\n          let nparametertypecode = selectedRecord[\"groupList\"][groupIndex][index][fieldName]['item']['nparametertypecode'];\n\n          if (nparametertypecode === parameterType.PREDEFINED) {\n            this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index], groupIndex, index, PredefinedParameterOptions, selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n              this.setState({\n                selectedRecord,\n                groupIndex,\n                index\n              });\n            }\n          }\n        } else {\n          if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n            this.setState({\n              selectedRecord,\n              groupIndex,\n              index\n            });\n          }\n        }\n      } else {\n        if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\n          this.setState({\n            selectedRecord,\n            groupIndex,\n            index\n          });\n        }\n      }\n    };\n\n    this.onRuleInputChange = (event, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event.target.value;\n      selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = event.target.value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onRuleNumericInputOnChange = (event, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (groupIndex === undefined && index === undefined) {\n        selectedRecord[fieldName] = event;\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (event !== 0) {\n          selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event;\n          selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = event;\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let PredefinedParameterOptions = this.props.Login.masterData.PredefinedParameterOptions || [];\n      let isResultorOrderType = [];\n      let optionsByRule = [];\n\n      if (this.state.optionsByRule && this.state.optionsByRule.length > 0) {\n        optionsByRule = this.state.optionsByRule;\n      } else {\n        optionsByRule[groupIndex] = [];\n        optionsByRule[groupIndex][index] = [];\n      }\n\n      if (this.state.isResultorOrderType && this.state.isResultorOrderType.length > 0) {\n        isResultorOrderType = this.state.isResultorOrderType;\n      } else {\n        isResultorOrderType[groupIndex] = [];\n        isResultorOrderType[groupIndex][index] = [];\n      }\n\n      if (fieldName !== 'ndiagnosticcasecode' && fieldName !== 'ngradecode' && fieldName !== 'ntestgrouptestpredefcode' && fieldName !== 'ntestgrouptestcharcode' && fieldName !== 'ntestgrouptestnumericcode') {\n        if (selectedRecord[\"groupList\"][groupIndex][index][fieldName] && selectedRecord[\"groupList\"][groupIndex][index][fieldName].value !== comboData.value) {\n          selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode'];\n          selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'] && delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname'];\n        }\n\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n\n        if (isResultorOrderType[groupIndex] === undefined) {\n          isResultorOrderType[groupIndex] = [];\n          isResultorOrderType[groupIndex][index] = [];\n        }\n\n        isResultorOrderType[groupIndex][index] = comboData.value;\n\n        if (optionsByRule[groupIndex] === undefined) {\n          optionsByRule[groupIndex] = [];\n          optionsByRule[groupIndex][index] = [];\n        }\n\n        if (isResultorOrderType[groupIndex][index] === 1) {\n          optionsByRule[groupIndex][index] = this.props.Login.masterData.DiagnosticCaseList;\n        } else if (isResultorOrderType[groupIndex][index] === 3) {\n          let nparametertypecode = selectedRecord[\"groupList\"][groupIndex][index]['stestname']['item']['nparametertypecode'];\n\n          if (nparametertypecode === parameterType.PREDEFINED) {\n            this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index], groupIndex, index, PredefinedParameterOptions, selectedRecord, this.props.Login.masterData, this.props.Login.userInfo);\n          } else {\n            optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList;\n          }\n        } else {\n          optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList;\n        }\n\n        this.setState({\n          selectedRecord,\n          isResultorOrderType,\n          optionsByRule\n        });\n      } else {\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n        selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = comboData.label;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.addRule = (type, groupIndex) => {\n      const {\n        selectedRecord\n      } = this.state;\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      const addGroupList = this.props.Login.addGroupList || [];\n      const arrayLength = addGroupList[groupIndex];\n      addGroupList[groupIndex] = arrayLength + 1;\n      selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\n      viewColumnListByRule = this.props.Login.viewColumnList || this.props.Login.databaseviewList;\n      ;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          viewColumnListByRule,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.addComments = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let action = this.props.Login.action;\n      let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\n      let testparameter = this.props.Login.masterData.testCommentsTestCombo || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestgrouptestcode'] = {};\n      selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => {\n        return x.value === selectedParameterRulesEngine.ntestgrouptestcode;\n      })[0];\n      delete selectedRecord['nsampletestcommentscode'];\n      delete selectedRecord['ncommentsubtypecode'];\n      delete selectedRecord['ncommenttypecode'];\n      delete selectedRecord['sgeneralcomments'];\n      delete selectedRecord['sdescription'];\n\n      if (this.props.Login.addGroupList.length > 0) {\n        if (this.props.Login.activeTabIndex === 2) {\n          action = \"IDS_ADDTESTCOMMENTS\";\n        } else {\n          action = \"IDS_ADDREPORTCOMMENTS\";\n        }\n\n        openModalPopup = true;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup,\n            action,\n            selectedRecord,\n            openmodalsavePopup: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLEASEADDRULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.addModalSite = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\n      let testparameter = this.props.Login.masterData.testInitiateTestCombo || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestgrouptestcode'] = {};\n      selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => {\n        return x.value === selectedParameterRulesEngine.ntestgrouptestcode;\n      })[0];\n      selectedRecord['nfromsitecode'] && delete selectedRecord['nfromsitecode'];\n      selectedRecord['ntositecode'] && delete selectedRecord['ntositecode'];\n      openModalPopup = true;\n      let action = this.props.Login.action;\n      action = \"IDS_ADDSITE\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord,\n          openModalPopup,\n          action,\n          openmodalsavePopup: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onGradeEvent = (parameterResults, index, parameter) => {\n      if (parameterResults.length > 0 && parameterResults[index] !== undefined && parameterResults[index].sresult !== null) {\n        let selectedRecord = this.state.selectedRecord || [];\n        let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\n\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\n          selectedResultGrade[index] = {\n            ngradecode: parameterResults[index].sresult !== \"\" ? numericGrade(parameter, numberConversion(parseFloat(parameterResults[index].sresult), parseInt(parameter.nroundingdigits))) : -1\n          };\n        }\n\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n          if (parameterResults[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: parameterResults[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 0\n            };\n          }\n        }\n\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\n          if (parameterResults[index].sresult !== null && parameterResults[index].sresult.trim() !== \"\") {\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: -1\n            };\n          }\n        }\n\n        selectedRecord.selectedResultGrade = selectedResultGrade;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.addParameter = () => {\n      let openModalPopup = this.props.Login.openModalPopup;\n      let isServiceNeed = this.props.Login.isServiceNeed === undefined || this.props.Login.isServiceNeed === true ? true : false;\n      let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\n      let testparameter = this.props.Login.masterData.testInitiateTestCombo || [];\n      let selectedRecord = this.props.Login.selectedRecord || {};\n      selectedRecord['ntestgrouptestpredefsubcode'] && delete selectedRecord['ntestgrouptestpredefsubcode'];\n      selectedRecord['ntestgrouptestcode'] = {};\n      selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => {\n        return x.value === selectedParameterRulesEngine.ntestgrouptestcode;\n      })[0];\n      selectedRecord['ntestgrouprulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode'] ? this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode'] : 0;\n      selectedRecord['ParameterRulesEngine'] && delete selectedRecord['ParameterRulesEngine']; //    if(isServiceNeed){\n\n      this.props.getParameterRulesEngine(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo, this.state.activeTabIndex, \"IDS_ADDPARAMETER\"); // }else{\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             openModalPopup: true,\n      //                 modalParameterPopup:true,\n      //                 // masterData: {\n      //                 //     ...masterData,\n      //                 //     ...response.data,\n      //                 //     paremterResultcode\n      //                 // },\n      //                 // selectedRecord: {\n      //                 //     ...selectedRecord,\n      //                 //     additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\n      //                 //     selectedResultGrade: selectedResultGrade,\n      //                 //     ParameterRulesEngine: response.data.TestGroupTestParameterRulesEngine\n      //                 // },\n      //               ///  loading: false,\n      //                 action:\"IDS_ADDPARAMETER\",\n      //                 openmodalsavePopup:false\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // openModalPopup = true;\n      // let action = this.props.Login.action;\n      // action = \"IDS_ADDPARAMETER\"\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {\n      //         selectedRecord,\n      //         openModalPopup,\n      //         action,\n      //         modalParameterPopup :true,\n      //         openmodalsavePopup: false\n      //     }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.deletetestparameter = deleteparameter => {\n      let masterData = this.props.Login.masterData || {};\n      masterData['testParameter'].map(test => {\n        if (test['ParameterRulesEngine']) {\n          let parameters = test['ParameterRulesEngine'];\n          let tempparameters = [...test['ParameterRulesEngine']];\n          tempparameters.map((param, index) => {\n            if (param['ntestgrouptestparametercode'] === deleteparameter['ntestgrouptestparametercode']) {\n              //delete parameters[index];\n              let removeIndex = parameters.findIndex(x => x['ntestgrouptestparametercode'] === param['ntestgrouptestparametercode']);\n              parameters.splice(removeIndex, 1);\n              sortData(test['ParameterRulesEngine'], 'ascending', 'slNo').map((param, index) => {\n                param['slNo'] = index + 1;\n              });\n            }\n          });\n        }\n      });\n      this.setState({\n        masterData\n      });\n    };\n\n    this.modalsaveClick = () => {\n      let needoutsource = this.props.Login.needoutsource || {};\n      let selectedRecord = this.state.selectedRecord || {};\n      let masterData = this.props.Login.masterData || {};\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTestsTemp = [];\n      let testCommentsTestsTemp = [];\n      let reportCommentsTestsTemp = [];\n      let testInitiateSiteTemp = [];\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab || [];\n      let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab || [];\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab || [];\n      let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\n      let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\n      let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\n      let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\n      let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\n      let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\n      let updateInfo = {};\n\n      if (this.props.Login.action === 'IDS_ADDTEST') {\n        let npkAtestparametercode = 0;\n        let npkBtestparametercode = 0;\n        let npkCtestparametercode = 0;\n        let npkDtestparametercode = 0;\n\n        if (this.props.Login.activeTabIndex === 1) {\n          let isduplicate = {};\n          isduplicate = testInitiateTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameter'] = {};\n            npkAtestparametercode = testInitiateTests.length > 0 ? Math.max(...testInitiateTests.map(x => x.npkAtestparametercode)) : 0;\n            npkAtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkAtestparametercode'] = npkAtestparametercode; // selectedRecord['ParameterRulesEngine']=selectedRecord['ParameterRulesEngine'].filter(param=>param['sresult']&&param['sresult']!==\"\");\n            //  let slNo=1;\n            // selectedRecord['ParameterRulesEngine']\n            //      .map((resultData) => {\n            //         if (resultData.nparametertypecode===1) { \n            //             resultData[\"ngradecode\"] = resultData.sresult !== \"\" ?\n            //             numericGrade(resultData, resultData[\"sfinal\"]) : -1;\n            //          }\n            //         else if (resultData.nparametertypecode===2)\n            //          {\n            //             resultData[\"ngradecode\"] = resultData.ngradecode; \n            //             resultData[\"salertmessage\"] = resultData.salertmessage&&resultData.salertmessage;\n            //             resultData[\"additionalInfo\"] = resultData['additionalInfo'];\n            //             resultData[\"additionalInfoUidata\"] = resultData['additionalInfoUidata']===undefined?\"\":\n            //             resultData['additionalInfoUidata']; \n            //             resultData[\"ntestgrouptestpredefcode\"]=resultData['ntestgrouptestpredefcode']\n            //             resultData[\"sresultcomment\"]=resultData['sresultcomment']  \n            //          } \n            //          else if (resultData.nparametertypecode===3)\n            //          {\n            //             resultData[\"ngradecode\"] = resultData.sresult&&resultData.sresult.trim() === \"\" ? -1 : grade.FIO; \n            //          }\n            //          else if (resultData.nparametertypecode===4)\n            //          {\n            //             resultData[\"ngradecode\"] = resultData.sresult&&resultData.sresult.trim() === \"\" ? -1 : grade.FIO; \n            //          }   \n            //          resultData[\"slNo\"]=slNo;\n            //          slNo++;\n            //     });\n            // selectedRecord['ntestgrouptestcode'].item['ParameterRulesEngine']=sortData(selectedRecord['ParameterRulesEngine'],'descending','slNo')\n\n            if (selectedRecord['ntestgrouptestcode'].item['nrepeatcountno']) {\n              selectedRecord['ntestgrouptestcode'].item['nrepeatcountno'] = 0;\n            }\n\n            selectedRecord['ntestgrouptestcode'].item['ParameterRulesEngine'] && delete selectedRecord['ntestgrouptestcode'].item['ParameterRulesEngine'];\n            testInitiateTests.push({ ...selectedRecord['ntestgrouptestcode'].item,\n              \"nneedsample\": selectedRecord['nneedsample'] === 3 ? 3 : 4\n            });\n            masterData['testParameter'] = sortData(testInitiateTests, 'descending', 'npkAtestparametercode');\n            masterData['selectedParameterRulesEngine'] = { ...selectedRecord['ntestgrouptestcode'].item,\n              \"nneedsample\": selectedRecord['nneedsample'] ? 3 : 4\n            };\n            delete selectedRecord['ntestgrouptestcode'];\n            delete selectedRecord['nneedsample'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 2) {\n          let isduplicate = {};\n          isduplicate = testCommentsTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testParameterComments'] = {};\n            npkBtestparametercode = testCommentsTests.length > 0 ? Math.max(...testCommentsTests.map(x => x.npkBtestparametercode)) : 0;\n            npkBtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkBtestparametercode'] = npkBtestparametercode;\n            selectedRecord['ntestgrouptestcode'].item['sdescription'] = selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-';\n            testCommentsTests.push(selectedRecord['ntestgrouptestcode'].item);\n            masterData['testParameterComments'] = sortData(testCommentsTests, 'descending', 'npkBtestparametercode');\n            masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item; //delete selectedRecord['ntestgrouptestcode']\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 3) {\n          let isduplicate = {};\n          isduplicate = testRepeatTests.filter(x => x.ntestgrouptestcode === selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode']);\n\n          if (isduplicate.length === 0) {\n            masterData['testRepeat'] = {};\n            npkCtestparametercode = testRepeatTests.length > 0 ? Math.max(...testRepeatTests.map(x => x.npkCtestparametercode)) : 0;\n            npkCtestparametercode++;\n            selectedRecord['ntestgrouptestcode'].item['npkCtestparametercode'] = npkCtestparametercode;\n            selectedRecord['ntestgrouptestcode'].item['nrepeatcountno'] = selectedRecord['nrepeatcountno'] ? selectedRecord['nrepeatcountno'] : 1;\n            testRepeatTests.push({ ...selectedRecord['ntestgrouptestcode'].item,\n              \"nneedsample\": 4\n            });\n            masterData['testRepeatTestsTab'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode');\n            masterData['testRepeat'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode');\n            masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item;\n            delete selectedRecord['ntestgrouptestcode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        if (this.props.Login.activeTabIndex === 4) {\n          let isduplicate = {}; // isduplicate = testenforceTests.filter(x => x.ntestgrouptestcode ===\n          //     selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\n\n          isduplicate = testenforceTests.some(x => selectedRecord['ntestgrouptestcode'].value === x.ntestgrouptestcode && selectedRecord['ntestgrouptestparametercode'].value === x.ntestgrouptestparametercode);\n\n          if (!isduplicate) {\n            masterData['testenforceTests'] = {};\n            npkDtestparametercode = testenforceTests.length > 0 ? Math.max(...testenforceTests.map(x => x.npkDtestparametercode)) : 0;\n            npkDtestparametercode++; // selectedRecord['ntestgrouptestcode'].item['sparametersynonym'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label\n            // selectedRecord['ntestgrouptestcode'].item['ngradecode'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value\n            // selectedRecord['ntestgrouptestcode'].item['sgradename'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label\n            // selectedRecord['ntestgrouptestcode'].item['ntestgrouptestparametercode'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value\n            // selectedRecord['ntestgrouptestcode'].item['senforceresult'] = selectedRecord['senforceresult'] && selectedRecord['senforceresult']\n\n            let object = { ...selectedRecord['ntestgrouptestcode'].item,\n              'sparametersynonym': selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label,\n              'ngradecode': selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value,\n              'sgradename': selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label,\n              'ntestgrouptestparametercode': selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value,\n              'senforceresult': selectedRecord['senforceresult'] && selectedRecord['senforceresult'],\n              'npkDtestparametercode': npkDtestparametercode\n            }; // selectedRecord['ntestgrouptestcode'].item['npkDtestparametercode'] = npkDtestparametercode\n\n            testenforceTests.push(object);\n            masterData['testenforceTestsTab'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode');\n            masterData['testenforceTests'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode'); //  masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\n\n            delete selectedRecord['ntestgrouptestcode'];\n          } else {\n            return toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ALREADYEXISTS\"\n            }));\n          }\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testInitiateTests,\n            testCommentsTests,\n            reportCommentsTests,\n            npkAtestparametercode,\n            npkBtestparametercode,\n            npkCtestparametercode,\n            testInitiateTestOptions,\n            testInitiateTestdeletedOptions,\n            selectedRecord,\n            testRepeatTests,\n            testenforceTests\n          }\n        };\n      }\n\n      if (this.props.Login.action === 'IDS_ADDPARAMETER') {\n        let selectedntestgrouptestcode = masterData.selectedParameterRulesEngine.ntestgrouptestcode;\n        let selectedParameterRulesEngine = masterData.selectedParameterRulesEngine.ParameterRulesEngine;\n        selectedRecord['ParameterRulesEngine'] = selectedRecord['ParameterRulesEngine'].filter(param => param['sresult'] && param['sresult'] !== \"\");\n        let slNo = selectedParameterRulesEngine === undefined || selectedParameterRulesEngine && selectedParameterRulesEngine.length === 0 ? 1 : selectedParameterRulesEngine.length + 1;\n        selectedRecord['ParameterRulesEngine'].map(resultData => {\n          if (resultData.nparametertypecode === 1) {\n            resultData[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, resultData[\"sresult\"]) : -1;\n            resultData[\"sresult\"] = resultData.sresult;\n            resultData[\"sfinal\"] = resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n            resultData[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, resultData[\"sfinal\"]) : -1;\n          } else if (resultData.nparametertypecode === 2) {\n            resultData[\"ngradecode\"] = resultData.ngradecode;\n            resultData[\"salertmessage\"] = resultData.salertmessage && resultData.salertmessage;\n            resultData[\"additionalInfo\"] = resultData['additionalInfo'];\n            resultData[\"additionalInfoUidata\"] = resultData['additionalInfoUidata'] === undefined ? \"\" : resultData['additionalInfoUidata'];\n            resultData[\"ntestgrouptestpredefcode\"] = resultData['ntestgrouptestpredefcode'];\n            resultData[\"sresultcomment\"] = resultData['sresultcomment'];\n            resultData[\"sresultpredefinedname\"] = resultData['sresultpredefinedname'];\n            resultData[\"sfinal\"] = resultData['sfinal'];\n          } else if (resultData.nparametertypecode === 3) {\n            resultData[\"sresult\"] = resultData.sresult;\n            resultData[\"sfinal\"] = resultData.sresult;\n            resultData[\"ngradecode\"] = resultData.sresult && resultData.sresult.trim() === \"\" ? -1 : ResultEntry.RESULTSTATUS_FIO;\n          } else if (resultData.nparametertypecode === 4) {\n            resultData[\"ngradecode\"] = resultData.sresult && resultData.sresult.trim() === \"\" ? -1 : ResultEntry.RESULTSTATUS_FIO;\n          }\n\n          resultData['sgradename'] = this.props.Login.masterData.GradeValues[resultData[\"ngradecode\"]][0]['sgradename'];\n          resultData[\"slNo\"] = slNo;\n          slNo++;\n        });\n        masterData['testParameter'].map(param => {\n          if (param['ntestgrouptestcode'] === selectedntestgrouptestcode) {\n            if (param['ParameterRulesEngine']) {\n              param['ParameterRulesEngine'] = param['ParameterRulesEngine'].concat(sortData(selectedRecord['ParameterRulesEngine'], 'descending', 'slNo'));\n            } else {\n              param['ParameterRulesEngine'] = sortData(selectedRecord['ParameterRulesEngine'], 'descending', 'slNo');\n            }\n          }\n        });\n        testInitiateTests = masterData['testParameter'];\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testInitiateTests,\n            modalParameterPopup: false,\n            isServiceNeed: false\n          }\n        };\n      }\n\n      if (selectedRecord['nsampletestcommentscode'] || selectedRecord['sgeneralcomments']) {\n        masterData['testComments'] = {};\n        let npKAsampletestcommentscode = 0;\n        let nslno = 0;\n        let object = {\n          ncommentsubtypecode: selectedRecord['ncommentsubtypecode'],\n          scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\n          stestsynonym: selectedRecord['ntestgrouptestcode']['label'],\n          ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\n          scommenttype: selectedRecord['ncommenttypecode']['label'],\n          nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'] : -1,\n          // spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\n          // sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\n          spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\n          scomments: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-',\n          sdescription: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-',\n          stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n          ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode,\n          npkBtestparametercode: masterData.selectedParameterRulesEngine.npkBtestparametercode\n        };\n        nslno = testCommentsTestsTab.length > 0 ? Math.max(...testCommentsTestsTab.map(x => x.nslno)) : 0;\n        nslno++;\n\n        if (testCommentObject.hasOwnProperty(masterData.selectedParameterRulesEngine.npkBtestparametercode)) {\n          npKAsampletestcommentscode = Math.max(...testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode].map(x => x.npKAsampletestcommentscode));\n          npKAsampletestcommentscode++;\n          object = { ...object,\n            npKAsampletestcommentscode: npKAsampletestcommentscode,\n            nslno: nslno\n          };\n          testCommentsTestsTemp = testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode];\n          testCommentsTestsTemp.push(object);\n          testCommentsTestsTab.push(object);\n          let commentsArrayIndex = testCommentsTests.findIndex(x => x.npkBtestparametercode === masterData.selectedParameterRulesEngine.npkBtestparametercode);\n          testCommentsTests[commentsArrayIndex]['commentsArray'] = [];\n          testCommentsTests[commentsArrayIndex]['commentsArray'] = sortData(testCommentsTestsTemp, 'ascending', 'npKAsampletestcommentscode');\n          testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode');\n          delete selectedRecord['nsampletestcommentscode'];\n          delete selectedRecord['ncommentsubtypecode'];\n          delete selectedRecord['ncommenttypecode'];\n          delete selectedRecord['sgeneralcomments'];\n        } else {\n          npKAsampletestcommentscode++;\n          object = { ...object,\n            npKAsampletestcommentscode: npKAsampletestcommentscode,\n            nslno: nslno\n          };\n          testCommentsTestsTemp.push(object);\n          testCommentsTestsTab.push(object);\n          let commentsArrayIndex = testCommentsTests.findIndex(x => x.npkBtestparametercode === masterData.selectedParameterRulesEngine.npkBtestparametercode);\n          testCommentsTests[commentsArrayIndex]['commentsArray'] = [];\n          testCommentsTests[commentsArrayIndex]['commentsArray'] = sortData(testCommentsTestsTemp, 'ascending', 'npKAsampletestcommentscode');\n          testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode');\n          delete selectedRecord['nsampletestcommentscode'];\n          delete selectedRecord['ncommentsubtypecode'];\n          delete selectedRecord['ncommenttypecode'];\n          delete selectedRecord['sgeneralcomments'];\n        }\n\n        masterData['testComments'] = testCommentObject;\n        masterData['testCommentsTestsTab'] = testCommentsTestsTab;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModalPopup: false,\n            masterData,\n            testCommentObject,\n            npKAsampletestcommentscode,\n            selectedRecord\n          }\n        };\n      }\n\n      if (selectedRecord['nfromsitecode'] && selectedRecord['ntositecode']) {\n        if (selectedRecord['nfromsitecode'].value !== selectedRecord['ntositecode'].value) {\n          let siteseqnumber = 0;\n\n          if (siteObject.hasOwnProperty(masterData.selectedParameterRulesEngine.npkAtestparametercode)) {\n            let isalreadyExist = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode].some(x => selectedRecord['nfromsitecode'].value === x.nfromsitecode && selectedRecord['ntositecode'].value === x.ntositecode);\n\n            if (!isalreadyExist) {\n              masterData['testSite'] = {};\n              siteseqnumber = Math.max(...siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode].map(x => x.npksitecode));\n              siteseqnumber++;\n              let object = {\n                npksitecode: siteseqnumber,\n                sfromsitename: selectedRecord['nfromsitecode'].label,\n                stositename: selectedRecord['ntositecode'].label,\n                nfromsitecode: selectedRecord['nfromsitecode'].value,\n                ntositecode: selectedRecord['ntositecode'].value,\n                stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n                npkAtestparametercode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\n              };\n              testInitiateSiteTemp = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode];\n              testInitiateSiteTemp.push(object);\n              testInitiateSiteTab.push(object);\n              siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode');\n              delete selectedRecord['ntestgrouptestcode'];\n              delete selectedRecord['nfromsitecode'];\n              delete selectedRecord['ntositecode'];\n            } else {\n              return toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_FROMANDTOSITEALREADYEXIST\"\n              }));\n            }\n          } else {\n            masterData['testSite'] = {};\n            siteseqnumber++;\n            let object = {\n              npksitecode: siteseqnumber,\n              sfromsitename: selectedRecord['nfromsitecode'].label,\n              stositename: selectedRecord['ntositecode'].label,\n              nfromsitecode: selectedRecord['nfromsitecode'].value,\n              ntositecode: selectedRecord['ntositecode'].value,\n              stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\n              npkAtestparametercode: masterData.selectedParameterRulesEngine.npkAtestparametercode\n            };\n            testInitiateSiteTemp.push(object);\n            testInitiateSiteTab.push(object);\n            siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode');\n            delete selectedRecord['ntestgrouptestcode'];\n            delete selectedRecord['nfromsitecode'];\n            delete selectedRecord['ntositecode'];\n          }\n\n          masterData['testSite'] = siteObject;\n          masterData['testInitiateSiteTab'] = testInitiateSiteTab;\n          updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              openModalPopup: false,\n              masterData,\n              siteObject,\n              siteseqnumber\n            }\n          };\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FROMANDTOSITECANNOTBESAME\"\n          }));\n        }\n      }\n\n      if (Object.keys(updateInfo).length > 0) {\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.deletModalSite = (inputparam, action, row) => {\n      let temparray = [];\n      let index = 0;\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab;\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab;\n      let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab;\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let masterData = this.props.Login.masterData || {};\n\n      if (this.props.Login.activeTabIndex === 1) {\n        temparray = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode];\n        temparray.splice(row['dataIndex'], 1);\n        testInitiateSiteTab.splice(row['dataIndex'], 1);\n        siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = temparray;\n      }\n\n      if (this.props.Login.activeTabIndex === 2) {\n        temparray = testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode];\n        index = temparray.findIndex(x => x.npKAsampletestcommentscode === row['dataItem'].npKAsampletestcommentscode); // temparray.splice(row['dataIndex'], 1);\n\n        temparray.splice(index, 1);\n        index = testCommentsTestsTab.findIndex(x => x.nslno === row['dataItem'].nslno); //   testCommentsTestsTab.splice(row['dataIndex'], 1);\n\n        testCommentsTestsTab.splice(index, 1);\n        testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = temparray;\n      }\n\n      if (this.props.Login.activeTabIndex === 3) {\n        temparray = masterData.testRepeat;\n        temparray.splice(row['dataIndex'], 1);\n        reportCommentsTestsTab.splice(row['dataIndex'], 1);\n        reportCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray;\n      }\n\n      let updateInfo = {};\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          siteObject,\n          testCommentObject,\n          reportCommentObject,\n          testInitiateSiteTab,\n          reportCommentsTestsTab,\n          testCommentsTestsTab\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteModalTest = (inputparam, action, row) => {\n      let testInitiateTests = this.props.Login.testInitiateTests || [];\n      let testCommentsTests = this.props.Login.testCommentsTests || [];\n      let testRepeatTests = this.props.Login.testRepeatTests || [];\n      let testenforceTests = this.props.Login.testenforceTests || [];\n      let reportCommentsTests = this.props.Login.reportCommentsTests || [];\n      let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab;\n      let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab;\n      let testRepeatTestsTab = this.props.Login.masterData.testRepeatTestsTab;\n      let testenforceTestsTab = this.props.Login.masterData.testenforceTestsTab;\n      let siteObject = this.props.Login.siteObject || {};\n      let testCommentObject = this.props.Login.testCommentObject || {};\n      let reportCommentObject = this.props.Login.reportCommentObject || {};\n      let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\n      let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\n      let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\n      let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\n      let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\n      let masterData = this.props.Login.masterData || {};\n      let index = 0;\n\n      if (this.props.Login.activeTabIndex === 1) {\n        // index = this.props.Login.testInitiateTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)\n        index = this.props.Login.testInitiateTests.findIndex(x => x.npkAtestparametercode === inputparam.testParameter.npkAtestparametercode);\n        testInitiateTests.splice(index, 1); //   index =  masterData['testParameter'].findIndex(x => x.ntestgrouptestcode === inputparam.testParameter.ntestgrouptestcode)\n        //   masterData['testParameter'].splice(index, 1); \n\n        testInitiateSiteTab = testInitiateSiteTab.filter(function (obj) {\n          return obj.npkAtestparametercode !== inputparam.testParameter.npkAtestparametercode;\n        });\n        delete siteObject[inputparam.testParameter.npkAtestparametercode];\n      }\n\n      if (this.props.Login.activeTabIndex === 2) {\n        index = this.props.Login.testCommentsTests.findIndex(x => x.npkBtestparametercode === inputparam.testParameterComments.npkBtestparametercode);\n        testCommentsTests.splice(index, 1); // index =  testCommentsTestsTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameterComments.ntestgrouptestcode) \n        // testCommentsTestsTab.splice(index, 1);\n\n        testCommentsTestsTab = testCommentsTestsTab.filter(function (obj) {\n          return obj.npkBtestparametercode !== inputparam.testParameterComments.npkBtestparametercode;\n        });\n        delete testCommentObject[inputparam.testParameterComments.npkBtestparametercode];\n      }\n\n      if (this.props.Login.activeTabIndex === 3) {\n        //  index = this.props.Login.testRepeatTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode) \n        index = row['dataIndex'];\n        testRepeatTests.splice(index, 1);\n        testRepeatTestsTab.splice(index, 1);\n      }\n\n      if (this.props.Login.activeTabIndex === 4) {\n        //    index = this.props.Login.testenforceTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)  \n        index = row['dataIndex'];\n        testenforceTests.splice(index, 1);\n        testenforceTestsTab.splice(index, 1);\n      }\n\n      let updateInfo = {};\n      updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          testInitiateTests,\n          siteObject,\n          testCommentObject,\n          testCommentsTests,\n          reportCommentsTests,\n          reportCommentObject,\n          masterData: { ...masterData,\n            testCommentsTestsTab,\n            testInitiateSiteTab,\n            testRepeatTestsTab,\n            testenforceTestsTab\n          },\n          testRepeatTests,\n          testenforceTests\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onmodalComboChange = (comboData, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let isneedsgeneralcomments = this.state.isneedsgeneralcomments || {};\n      let action = this.props.Login.action;\n\n      if (fieldName === 'ncommentsubtypecode') {\n        if (comboData.value === 6) {\n          isneedsgeneralcomments = true;\n          delete selectedRecord['nsampletestcommentscode'];\n        } else {\n          isneedsgeneralcomments = false;\n          delete selectedRecord['sgeneralcomments'];\n        }\n      } else if (fieldName === 'nproductcatcode') {\n        selectedRecord[fieldName] = comboData;\n        this.props.getSpecificationTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo);\n      } else if (fieldName === 'ntestgrouptestcode' && this.state.activeTabIndex === 4 //||this.state.activeTabIndex === 1\n      ) {\n        if (selectedRecord['ntestgrouptestparametercode']) {\n          if (selectedRecord[fieldName].value !== comboData.value) {\n            delete selectedRecord['ntestgrouptestparametercode'];\n          }\n        }\n\n        selectedRecord[fieldName] = comboData;\n        selectedRecord['ntestgrouprulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode'] ? this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode'] : 0;\n        this.props.getParameterforEnforce(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo, this.state.activeTabIndex, action);\n      } //This is to Get Parameter Results from the User\n      else if (fieldName === 'ntestgrouptestparametercode' && this.state.activeTabIndex === 1) {\n        let updateInfo = {};\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName: 'IDS_TESTGROUPRESULTENTRY',\n            openModal: true\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else if (fieldName === 'nallottedspeccode') {\n        selectedRecord[fieldName] = comboData;\n        this.props.getComponentTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo);\n      }\n\n      if (fieldName === 'nsampletestcommentscode') {\n        selectedRecord['sdescription'] = comboData.item.sdescription;\n      }\n\n      selectedRecord[fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        isneedsgeneralcomments\n      });\n    };\n\n    this.onResultInputChange = (event, index, parameter) => {\n      let selectedRecord = this.state.selectedRecord || [];\n      let ParameterRulesEngine = this.state.selectedRecord.ParameterRulesEngine ? this.state.selectedRecord.ParameterRulesEngine : [];\n      let sresult = \"\";\n      let sfinal = \"\";\n      let sresultpredefinedname = \"\";\n      let salertmessage = \"\";\n      let sresultcomment = \"\";\n      let sgradename = \"\";\n      let value = -1;\n      let acceptedFile = [];\n      let ncalculatedresult;\n      let currentAlertResultCode = 0;\n      let currentntestgrouptestpredefcode = 0;\n      let inputData = {};\n\n      if (parameter.nparametertypecode === parameterType.NUMERIC) {\n        if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n          sresult = event.target.value;\n          ncalculatedresult = 4;\n        } else {\n          sresult = ParameterRulesEngine[index]['sresult'] === null ? \"\" : ParameterRulesEngine[index]['sresult'];\n          ncalculatedresult = ParameterRulesEngine[index]['ncalculatedresult'];\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n        currentAlertResultCode = event.item.ntestgrouptestparametercode;\n        currentntestgrouptestpredefcode = event.item.ntestgrouptestpredefcode;\n\n        if (event != null) {\n          sresult = event.item.spredefinedname;\n          sresultpredefinedname = event.item.sresultpredefinedname;\n          sfinal = event.item.spredefinedsynonym;\n          value = event.item.ngradecode;\n          salertmessage = event.item.salertmessage ? event.item.salertmessage : \"\";\n          sresultcomment = event.item.spredefinedcomments ? event.item.spredefinedcomments : \"\";\n          ncalculatedresult = 4;\n        } else {\n          sresult = \"\";\n          sfinal = \"\";\n          sresultpredefinedname = \"\";\n          value = -1;\n          ncalculatedresult = 4;\n        }\n\n        inputData = {\n          'ntestgrouptestpredefcode': event.item.ntestgrouptestpredefcode,\n          'salertmessage': salertmessage,\n          'nneedresultentryalert': event.item.nneedresultentryalert,\n          'nneedsubcodedresult': event.item.nneedsubcodedresult\n        };\n\n        if (event.item.nneedresultentryalert === transactionStatus.NO && event.item.nneedsubcodedresult === transactionStatus.NO) {\n          if (ParameterRulesEngine[index]['additionalInfo']) {\n            ParameterRulesEngine[index]['additionalInfo'] = \"\";\n          }\n\n          if (ParameterRulesEngine[index]['additionalInfoUidata']) {\n            ParameterRulesEngine[index]['additionalInfoUidata'] = \"\";\n          }\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.CHARACTER) {\n        sresult = event.target.value;\n\n        if (event.target.value.trim() === \"\") {\n          ncalculatedresult = -1;\n        } else {\n          ncalculatedresult = 4;\n        }\n      }\n\n      if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\n        sresult = event[0].name;\n        acceptedFile = event;\n        ncalculatedresult = 4;\n      }\n\n      ParameterRulesEngine[index]['sresult'] = sresult;\n      ParameterRulesEngine[index]['sfinal'] = sfinal;\n      ParameterRulesEngine[index]['sresultpredefinedname'] = sresultpredefinedname;\n      ParameterRulesEngine[index]['sresultcomment'] = sresultcomment;\n      ParameterRulesEngine[index]['salertmessage'] = salertmessage;\n      ParameterRulesEngine[index]['acceptedFile'] = acceptedFile;\n      ParameterRulesEngine[index]['editable'] = true;\n      ParameterRulesEngine[index]['ngradecode'] = value;\n      ParameterRulesEngine[index]['ncalculatedresult'] = ncalculatedresult;\n      selectedRecord.ParameterRulesEngine = ParameterRulesEngine;\n\n      if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n        this.props.getPredefinedDataRulesEngine(inputData, selectedRecord, currentAlertResultCode, this.props.Login.masterData);\n      }\n\n      this.setState({\n        selectedRecord: selectedRecord,\n        currentAlertResultCode,\n        currentntestgrouptestpredefcode\n      });\n    };\n\n    this.getOutcomeDetails = inputParam => {\n      let masterData = this.props.Login.masterData || {};\n      const testParameter = this.state.activeTabIndex === 1 ? inputParam.testParameter : this.state.activeTabIndex === 2 ? inputParam.testParameterComments : inputParam.testParameterreportComments;\n      masterData['selectedParameterRulesEngine'] = {};\n      masterData['selectedParameterRulesEngine'] = testParameter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.viewParameter = param => {\n      let masterData = this.props.Login.masterData || {};\n      masterData['ParameterRulesEngine'] = param['ParameterRulesEngine'];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showAlertGrid: true,\n          masterData,\n          showParameterGrid: true\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleExpandChange = () => {\n      let childListMap1 = new Map();\n      let childListMap2 = new Map();\n      let childListMap3 = new Map();\n      let childListMap = new Map();\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_Test') {\n        let keylst = this.props.Login.masterData.activeTabName === 'IDS_Test' ? Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) : this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ? Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) : Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\n        keylst.map(key => {\n          childListMap.set(parseInt(key), Object.values(this.props.Login.masterData.activeTabName === 'IDS_Test' ? this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] : this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ? this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] : this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n        });\n        this.setState({\n          childListMap\n        });\n      }\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_COMMENTS') {\n        let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']);\n        keylst.map(key => {\n          childListMap2.set(parseInt(key), Object.values(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key]));\n        });\n        this.setState({\n          childListMap2\n        });\n      }\n\n      if (this.props.Login.masterData.activeTabName === 'IDS_REPORTCOMMENTS') {\n        let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\n        keylst.map(key => {\n          childListMap3.set(parseInt(key), Object.values(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\n        });\n        this.setState({\n          childListMap3\n        });\n      }\n    };\n\n    this.viewOutcome = props => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        let masterData = this.props.Login.masterData;\n        masterData['SelectedRulesEngine'] = props['SelectedRulesEngine'][0];\n\n        if (masterData['SelectedRulesEngine']['jsonuidata'] && masterData['SelectedRulesEngine']['jsonuidata']['testInitiateTests']) {\n          masterData['SelectedRulesEngine']['jsonuidata']['testInitiateTests'].forEach(object => {\n            object['expanded'] && delete object['expanded'];\n          });\n        }\n\n        masterData['activeTabName'] = 'IDS_Test';\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName: \"IDS_VIEWOUTCOME\",\n            operation: \"IDS_VIEW\",\n            openModal: true,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOVIEWOUTCOME\"\n        }));\n      }\n    };\n\n    this.openflowview = props => {\n      if (this.props.Login.masterData['RulesEngine'] && this.props.Login.masterData['RulesEngine'].length > 0) {\n        let masterData = this.props.Login.masterData;\n        masterData['SelectedRulesEngine'] = props['SelectedRulesEngine'][0];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName: \"IDS_VIEWRULE\",\n            operation: \"IDS_VIEW\",\n            openModal: true,\n            masterData\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOVIEWRULE\"\n        }));\n      }\n    };\n\n    this.handlePageChangeRuleEngine = event => {\n      this.setState({\n        skipRulesEngine: event.skip,\n        takeRulesEngine: event.take\n      });\n    };\n\n    this.addGroup = () => {\n      const {\n        selectedRecord\n      } = this.state;\n      let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\n      const addGroupList = this.props.Login.addGroupList || [];\n      const arrayLength = addGroupList.length;\n      addGroupList[arrayLength] = 1;\n      viewColumnListByRule = this.props.Login.databaseviewList;\n\n      if (arrayLength === 0) {\n        selectedRecord[\"groupList\"] = [];\n        selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\n      }\n\n      if (selectedRecord[\"groupListJoins\"] === undefined) {\n        selectedRecord[\"groupListJoins\"] = [];\n      }\n\n      if (selectedRecord[\"groupListJoins\"][arrayLength - 1] === undefined) {\n        selectedRecord[\"groupListJoins\"][arrayLength - 1] = {};\n      }\n\n      selectedRecord[\"groupListJoins\"][arrayLength - 1][\"button_and\"] = true;\n      selectedRecord[\"groupList\"][arrayLength] = [];\n      selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\n      selectedRecord[\"groupList\"][arrayLength][0] = {};\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          viewColumnListByRule,\n          selectedRecord,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.getTestGroupRulesEngineAdd = () => {\n      //   if (this.state.selectedcombo['nproductcatcode']) {\n      //    const sqlQuery = false;\n      //this.setState({ selectedRecord: {} });\n      let selectedRecord = this.state.selectedRecord || {};\n      this.props.getTestGroupRulesEngineAdd(this.props.Login.userInfo, false, {\n        addRuleList: [],\n        addGroupList: [],\n        addAggregateList: [],\n        addOrderbyList: []\n      }, this.props.Login.masterData); //  } else {\n      //       toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPRODUCTCATEGORY\" }));\n      //   }\n    };\n\n    this.closePortalModal = () => {\n      let masterData = this.props.Login.masterData || {};\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      masterData['testComments'] = {};\n      masterData['reportComments'] = {};\n      masterData['testSite'] = {};\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: this.props.Login.operation !== 'update' ? {\n          activeTabIndex: 0,\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0,\n          masterData,\n          testInitiateTests: [],\n          reportCommentsTests: [],\n          testCommentsTests: [],\n          siteObject: {},\n          testCommentObject: {},\n          reportCommentObject: {},\n          npkAtestparametercode: 0,\n          npkBtestparametercode: 0,\n          npkCtestparametercode: 0,\n          testInitiateSiteTab: [],\n          testCommentsTestsTab: [],\n          reportCommentsTestsTab: []\n        } : {\n          activeTabIndex: 0,\n          openPortalModal: false,\n          selectedRecord: {},\n          addRuleList: [],\n          count: 0,\n          masterData,\n          //  testInitiateTests: [], reportCommentsTests: [],\n          // testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\n          npkAtestparametercode: 0,\n          npkBtestparametercode: 0,\n          npkCtestparametercode: 0 // ,\n          // testInitiateSiteTab: [],\n          // testCommentsTestsTab: [],\n          // reportCommentsTestsTab: []\n\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.changePropertyView = (index, event, status) => {\n      let id = false;\n      let activeTabIndex;\n      let activeTabId;\n      let masterData = this.props.Login.masterData || {};\n      let activeTestTab = this.props.Login.activeTestTab || \"\";\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (selectedRecord[\"groupList\"].length > 0) {\n        if (this.onsavevalidation(selectedRecord)) {\n          if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\n          }\n\n          if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n            if (index === 1) {\n              activeTestTab = 'IDS_Test';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests[0];\n            }\n\n            if (index === 2) {\n              activeTestTab = 'IDS_COMMENTS';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests[0];\n            }\n\n            if (index === 3) {\n              activeTestTab = 'IDS_REPEAT';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests[0];\n            }\n\n            if (index === 4) {\n              activeTestTab = 'IDS_ENFORCERESULT';\n              masterData['selectedParameterRulesEngine'] = this.props.Login.testEnforceTests && this.props.Login.testEnforceTests[0];\n            }\n\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                activeTabIndex: index === 0 ? 0 : this.state.activeTabIndex !== index ? index : id ? index : false,\n                activeTabId: id,\n                activeTestTab,\n                masterData\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_FILLTHERULETOADDOUTCOME\"\n          }));\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ATLEASTADDONERULETOADDOUTCOME\"\n        }));\n      }\n    };\n\n    this.deleteRule = (groupIndex, index) => {\n      let addGroupList = this.props.Login.addGroupList || [];\n      const selectedRecord = this.state.selectedRecord;\n      addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\n\n      if (addGroupList[groupIndex] === 0) {\n        addGroupList.splice(groupIndex, 1);\n        selectedRecord[\"groupList\"].splice(groupIndex, 1);\n\n        if (selectedRecord[\"groupListJoins\"]) {\n          selectedRecord[\"groupListJoins\"].splice(groupIndex - 1, 1);\n        }\n      } else {\n        selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addGroupList,\n          selectedRecord,\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteOutcome = index => {\n      let addOutcomeList = this.props.Login.addOutcomeList;\n      addOutcomeList.splice(index, 1);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addOutcomeList\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.clearRule = () => {\n      const sviewname = this.state.selectedRecord.sviewname || \"\";\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          selectedRecord: {\n            sviewname\n          },\n          sqlQuery: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.resetRule = () => {\n      let masterData = this.props.Login.masterData || {};\n      let selectedRecord = this.state.selectedRecord || {};\n      masterData['testParameter'] = {};\n      masterData['testParameterComments'] = {};\n      masterData['testParameterreportComments'] = {};\n      masterData['testComments'] = {};\n      masterData['reportComments'] = {};\n      masterData['testRepeat'] = [];\n      masterData['testenforceTests'] = [];\n      masterData['testSite'] = {};\n\n      if (selectedRecord[\"groupList\"]) {\n        selectedRecord[\"groupList\"] = [];\n      }\n\n      if (selectedRecord[\"groupListJoins\"]) {\n        selectedRecord[\"groupListJoins\"] = [];\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          addRuleList: [],\n          addGroupList: [],\n          masterData,\n          addAggregateList: [],\n          addOrderbyList: [],\n          testInitiateTests: [],\n          reportCommentsTests: [],\n          testCommentsTests: [],\n          siteObject: {},\n          testCommentObject: {},\n          reportCommentObject: {},\n          selectedRecord,\n          testRepeatTests: [],\n          testenforceTests: [],\n          activeTabIndex: 0\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onSymbolChange = (comboData, fieldName, groupIndex, index) => {\n      const {\n        selectedRecord\n      } = this.state;\n      const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\n      selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\n      this.setState({\n        selectedRecord,\n        groupIndex,\n        index\n      });\n    };\n\n    this.onInputChange = (event, type, groupIndex, index) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let needoutsource = this.state.needoutsource || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'needoutsource' && event.target.checked === true) {\n          needoutsource = true;\n        } else {\n          needoutsource = false;\n          delete selectedRecord['nfromsitecode'];\n          delete selectedRecord['ntositecode'];\n        }\n\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord,\n        needoutsource\n      });\n    };\n\n    this.onInputSwitchChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let testInitiateTests = [];\n      let selectedParameterRulesEngine = {};\n\n      if (event.target.type === 'checkbox') {\n        let testcode = this.props.Login.masterData.selectedParameterRulesEngine.ntestgrouptestcode;\n        let activeValue = this.props.Login.testInitiateTests;\n        activeValue.map(item => {\n          if (item.ntestgrouptestcode === testcode) {\n            testInitiateTests.push({ ...item,\n              'nneedsample': event.target.checked === true ? 3 : 4\n            });\n            selectedParameterRulesEngine = { ...item,\n              'nneedsample': event.target.checked === true ? 3 : 4\n            };\n          } else {\n            testInitiateTests.push({ ...item\n            });\n          }\n        });\n      } //selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      //this.setState({ selectedRecord });\n\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: { ...this.props.Login.masterData,\n            \"selectedParameterRulesEngine\": selectedParameterRulesEngine\n          },\n          testInitiateTests: testInitiateTests\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.viewColumnListByRule = list => {\n      let activeTabIndex = this.props.Login.activeTabIndex;\n\n      if (activeTabIndex !== 0) {\n        let selectedRecord = this.props.Login.selectedRecord && this.props.Login.selectedRecord;\n        let dynamicList = activeTabIndex === 1 ? this.props.Login.testInitiateTests : activeTabIndex === 2 ? this.props.Login.testCommentsTests : activeTabIndex === 3 ? this.props.Login.testRepeatTests : activeTabIndex === 4 ? this.props.Login.testenforceTests : \"\";\n        if (dynamicList !== undefined && dynamicList) list = list.filter(({\n          value\n        }) => !dynamicList.some(x => x.ntestgrouptestcode == value));\n      }\n\n      return list;\n    };\n\n    this.onConditionClick = (fieldName, index, isgroup) => {\n      let {\n        selectedRecord\n      } = this.state;\n      selectedRecord[\"groupListJoins\"] = selectedRecord[\"groupListJoins\"] || [];\n\n      if (index !== undefined && isgroup === false) {\n        if (fieldName === `button_and`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupList\"][index][`button_or`] = false;\n        } else if (fieldName === `button_or`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupList\"][index][`button_and`] = false;\n        } else if (fieldName === `button_not`) {\n          selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\n        } else {}\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (fieldName === `button_and`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupListJoins\"][index][`button_or`] = false;\n        }\n\n        if (fieldName === `button_or`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\n          selectedRecord[\"groupListJoins\"][index][`button_and`] = false;\n        }\n\n        if (fieldName === `button_not`) {\n          if (selectedRecord[\"groupListJoins\"][index] === undefined) {\n            selectedRecord[\"groupListJoins\"][index] = {};\n          }\n\n          selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? false : true;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterComboChange = (comboData, fieldName, caseNo) => {\n      let tempFilterData = this.state.tempFilterData || {};\n      let inputParam = {};\n\n      switch (caseNo) {\n        case 1:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getProductCategory\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 2:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: tempFilterData.nsampletypecode.item,\n              productcategory: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getProduct\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 3:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              sampletype: tempFilterData.nsampletypecode.item,\n              productcategory: tempFilterData.nproductcatcode.item,\n              product: comboData.item,\n              project: comboData.item,\n              tempFilterData\n            },\n            methodUrl: \"/getTreeVersionTemplate\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        case 4:\n          tempFilterData[fieldName] = comboData;\n          this.setState({\n            tempFilterData\n          });\n          break;\n\n        case 5:\n          const selectedRecord = this.state.selectedRecord;\n          selectedRecord[fieldName] = comboData;\n          const TestGroupSpecSampleType = this.props.Login.testGroupInputData.TestGroupSpecSampleType || {};\n          let testGroupSpecSampleType = {};\n\n          if (this.props.Login.screenName === (this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode])) {\n            testGroupSpecSampleType = selectedRecord[\"ncomponentcode\"] ? selectedRecord[\"ncomponentcode\"].item : TestGroupSpecSampleType[0].item;\n          } else {\n            testGroupSpecSampleType = this.props.Login.masterData.SelectedComponent;\n          }\n\n          inputParam = {\n            userinfo: this.props.Login.userInfo,\n            testcategory: comboData.item,\n            testgroupspecsampletype: testGroupSpecSampleType,\n            nallottedspeccode: this.props.Login.masterData.SelectedSpecification[\"nallottedspeccode\"],\n            selectedRecord\n          };\n          this.props.changeTestCategory(inputParam, this.props.Login.testGroupInputData);\n          break;\n\n        case 6:\n          tempFilterData[fieldName] = comboData;\n          inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              nprojecttypecode: tempFilterData.nprojecttypecode.value,\n              projecttype: tempFilterData.nprojecttypecode.item,\n              // sampletype: tempFilterData.nsampletypecode.item,\n              // productcategory: comboData.item,\n              tempFilterData\n            },\n            classUrl: \"/projectmaster\",\n            methodUrl: \"/getApprovedProjectByProjectType\"\n          };\n          this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let masterData = this.props.Login.masterData;\n      let clearSelectedRecordField = [];\n\n      if (this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\") {\n        inputParam = this.onSaveTree(saveType, formRef); // clearSelectedRecordField = [\n        //     { \"controlType\": \"textarea\", \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"sleveldescription\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        //     { \"controlType\": \"textarea\", \"idsName\": \"IDS_CODEDRESULTSYNONYM\", \"dataField\": \"spredefinedsynonym\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        //     { \"controlType\": \"textarea\", \"idsName\": \"IDS_RESULTPARAMETERCOMMENTS\", \"dataField\": \"spredefinedcomments\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        //     { \"controlType\": \"checkbox\", \"idsName\": \"IDS_AlERTFORRESULTENTRY\", \"dataField\": \"nneedresultentryalert\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\n        //     { \"controlType\": \"checkbox\", \"idsName\": \"IDS_SUBCODERESULTNEED\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\n        //     { \"controlType\": \"textarea\", \"idsName\": \"IDS_ALERTMESSAGE\", \"dataField\": \"salertmessage\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        // ]\n      } else if (this.props.Login.screenName === \"IDS_SPECIFICATION\") {\n        inputParam = this.onSaveSpecification(saveType, formRef); // ALPD-4757, Commented because, it is not required to make isCopy as false when save.\n        // if (masterData && masterData.selectedRecordCopy) {\n        //     masterData.selectedRecordCopy.isCopy = false;\n        // }\n\n        delete masterData.CopyOpenNodes; //ALPD-5279 Test Group - while adding a spec in test group with save & continue, the sample category name is not visible insted a numeric value is displayed.\n\n        clearSelectedRecordField = [//{ \"controlType\": \"textarea\", \"idsName\": \"IDS_SELECTEDPROFILE\", \"dataField\": \"sselectedprofilename\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_SPECNAME\", \"dataField\": \"scopyspecname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_PRODUCTCATNAME\", \"dataField\": \"sproductcatname\", \"width\": \"150px\",\"controlName\": \"sproductcatname\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true},\n        //{ \"controlType\": \"checkbox\", \"idsName\": \"IDS_PRODUCTCATNAME\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\n        {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_SPECNAME\",\n          \"dataField\": \"sspecname\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_ACTIVE\",\n          \"dataField\": \"ntransactionstatus\",\n          \"width\": \"150px\",\n          \"controlName\": \"ntransactionstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 1\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_COMPONENTREQUIRED\",\n          \"dataField\": \"ncomponentrequired\",\n          \"width\": \"150px\",\n          \"controlName\": \"ncomponentrequired\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_SELECTEDPROFILE\",\n          \"dataField\": \"sselectedprofilename\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_SPECNAME\",\n          \"dataField\": \"scopyspecname\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        } // { \"controlType\": \"textarea\", \"idsName\": \"IDS_SPECNAME\", \"dataField\": \"sspecname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        ];\n      } else if (this.props.Login.screenName === this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]) {\n        inputParam = this.onSaveComponent(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_COPYSPECIFICATION\") {\n        inputParam = this.onSaveCopySpecification(saveType, formRef);\n        clearSelectedRecordField = [{\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_SELECTEDPROFILE\",\n          \"dataField\": \"sselectedprofilename\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_SPECNAME\",\n          \"dataField\": \"scopyspecname\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, // { \"controlType\": \"textarea\", \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\n        // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_AlERTFORRESULTENTRY\", \"dataField\": \"sproductcatname\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\n        // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_PRODUCTCATNAME\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\n        {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_SPECNAME\",\n          \"dataField\": \"sspecname\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        } //{ \"controlType\": \"checkbox\", \"idsName\": \"IDS_ACTIVE\", \"dataField\": \"ntransactionstatus\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":1 },\n        //{ \"controlType\": \"checkbox\", \"idsName\": \"IDS_COMPONENTREQUIRED\", \"dataField\": \"ncomponentrequired\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\n        ];\n      } else if (this.props.Login.screenName === \"IDS_TEST\" || this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\") {\n        inputParam = this.onSaveTest(saveType, formRef);\n      } else if (this.props.Login.screenName === \"IDS_SPECFILE\") {\n        inputParam = this.onSaveSpecFile(saveType, formRef);\n        clearSelectedRecordField = [{\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_DESCRIPTION\",\n          \"dataField\": \"sdescription\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"textarea\",\n          \"idsName\": \"IDS_DESCRIPTION\",\n          \"dataField\": \"slinkdescription\",\n          \"width\": \"200px\",\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"isClearField\": true\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_DEFAULTSTATUS\",\n          \"dataField\": \"ndefaultstatus\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }, {\n          \"controlType\": \"checkbox\",\n          \"idsName\": \"IDS_DEFAULTSTATUS\",\n          \"dataField\": \"nlinkdefaultstatus\",\n          \"width\": \"150px\",\n          \"controlName\": \"ndefaultstatus\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"isClearField\": true,\n          \"preSetValue\": 4\n        }];\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        //ALPD-5444 Test Group - Copy the spec in test group and do save continue loading issue occurs.\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            openModal: true,\n            operation: this.props.Login.operation,\n            screenData: {\n              inputParam,\n              masterData,\n              clearSelectedRecordField\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        if (this.props.Login.screenName === \"IDS_SPECIFICATION\" || this.props.Login.screenName === \"IDS_COPYSPECIFICATION\" || this.props.Login.screenName === \"IDS_SPECFILE\") {\n          this.props.crudMaster(inputParam, masterData, \"openModal\", {}, \"\", clearSelectedRecordField);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n        }\n      }\n    };\n\n    this.onSaveTest = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      let inputData = {};\n      const userinfo = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (operation === \"create\") {\n        const testArray = selectedRecord.ntestcode.map(test => {\n          return { ...test.item,\n            nisvisible: transactionStatus.YES,\n            nisadhoctest: transactionStatus.NO\n          };\n        });\n        inputData = {\n          testgroupspecification: masterData.SelectedSpecification,\n          testgroupspecsampletype: [masterData.SelectedComponent],\n          testgrouptest: testArray,\n          userinfo\n        };\n      } else {\n        postParam = {\n          inputListName: \"TestGroupTest\",\n          selectedObject: \"SelectedTest\",\n          primaryKeyField: \"ntestgrouptestcode\",\n          primaryKeyValue: masterData.SelectedTest ? masterData.SelectedTest.ntestgrouptestcode : 0,\n          fetchUrl: \"testgroup/getTestGroupTest\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          },\n          masterData: this.props.Login.masterData,\n          searchFieldList,\n          changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\", \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"],\n          isSingleSelect: true\n        };\n        let testgrouptestfile = null;\n        let testGroupFile = selectedRecord.ntestfilecode;\n\n        if (testGroupFile) {\n          testGroupFile = testGroupFile.item;\n          testgrouptestfile = {\n            nlinkcode: testGroupFile.nlinkcode,\n            nattachmenttypecode: testGroupFile.nattachmenttypecode,\n            sdescription: testGroupFile.sdescription,\n            ssystemfilename: testGroupFile.ssystemfilename,\n            dcreateddate: testGroupFile.dcreateddate,\n            nfilesize: testGroupFile.nfilesize,\n            ntestgroupfilecode: selectedRecord.ntestgroupfilecode,\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            sfilename: testGroupFile.sfilename,\n            nstatus: transactionStatus.ACTIVE\n          };\n        }\n\n        inputData = {\n          testgroupspecification: masterData.SelectedSpecification,\n          testgrouptest: {\n            ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\n            nsectioncode: selectedRecord.nsectioncode.value,\n            //nsourcecode: selectedRecord.nsourcecode.value,\n            nmethodcode: selectedRecord.nmethodcode ? selectedRecord.nmethodcode.value : transactionStatus.NA,\n            ninstrumentcatcode: selectedRecord.ninstrumentcatcode ? selectedRecord.ninstrumentcatcode.value : transactionStatus.NA,\n            ncontainertypecode: selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : transactionStatus.NA,\n            stestsynonym: selectedRecord.stestsynonym,\n            ncost: selectedRecord.ncost,\n            nsorter: selectedRecord.nsorter,\n            nspecsampletypecode: selectedRecord.nspecsampletypecode,\n            nrepeatcountno: selectedRecord.nrepeatcountno,\n            ntestpackagecode: selectedRecord.ntestpackagecode ? selectedRecord.ntestpackagecode.value : transactionStatus.NA,\n            nisvisible: transactionStatus.YES,\n            nisadhoctest: transactionStatus.NO\n          },\n          testgrouptestfile,\n          userinfo\n        };\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Test\",\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        postParam\n      };\n      return inputParam;\n    };\n\n    this.onSaveTree = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n      let inputData = {\n        userinfo: this.props.Login.userInfo\n      };\n\n      if (operation === \"update\") {\n        const selectedNode = this.props.Login.masterData.selectedNode;\n        inputData[\"treetemplatemanipulation\"] = {\n          ntemplatemanipulationcode: selectedRecord.ntemplatemanipulationcode,\n          sleveldescription: selectedRecord.sleveldescription,\n          nsampletypecode: selectedNode.nsampletypecode,\n          ntreeversiontempcode: selectedNode.ntreeversiontempcode,\n          nproductcatcode: selectedNode.nproductcatcode,\n          nproductcode: selectedNode.nproductcode,\n          nprojectmastercode: selectedNode.nprojectmastercode\n        };\n        inputData[\"selectednode\"] = this.props.Login.masterData.ActiveKey;\n      } else {\n        const TreetempTranstestGroup = this.props.Login.TreetempTranstestGroup;\n        const filterData = this.state.filterData;\n        const selectedRecord = this.state.selectedRecord;\n        let treetemplatemanipulation = [];\n        let tempArray = filterRecordBasedOnTwoArrays(TreetempTranstestGroup, selectedRecord.treetemplatemanipulation, \"ntemptranstestgroupcode\");\n        tempArray.map(item => {\n          const treeData = {\n            ntreeversiontempcode: item.ntreeversiontempcode,\n            npositioncode: item.nlevelno - 1,\n            sleveldescription: item.sleveldescription,\n            ntemptranstestgroupcode: item.ntemptranstestgroupcode,\n            nformcode: 62,\n            schildnode: \"\",\n            nnextchildcode: item.schildnode,\n            ntemplatemanipulationcode: item.ntemplatemanipulationcode,\n            isreadonly: item.ntemplatemanipulationcode > 0 ? true : false,\n            slevelformat: item.slevelformat\n          };\n          return treetemplatemanipulation.push(treeData);\n        });\n        selectedRecord.treetemplatemanipulation.map(item => {\n          const treeTemplateManip = TreetempTranstestGroup.filter(temp => temp.ntemptranstestgroupcode === item.ntemptranstestgroupcode);\n\n          if (treeTemplateManip.length > 0) {\n            item[\"ntemplatemanipulationcode\"] = treeTemplateManip[\"ntemplatemanipulationcode\"];\n          } else {\n            item[\"ntemplatemanipulationcode\"] = 0;\n          }\n\n          return treetemplatemanipulation.push(item);\n        });\n        inputData[\"treetemplatemanipulation\"] = treetemplatemanipulation;\n        inputData[\"sampletype\"] = filterData.nsampletypecode.item;\n        inputData[\"ncategorycode\"] = filterData.nproductcatcode.value;\n        inputData[\"nproductcode\"] = filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : filterData.nproductcatcode.item.ncategorybasedflow == transactionStatus.YES ? -1 : filterData.nproductcode.value ? filterData.nproductcode.value : -1;\n        inputData[\"ntreeversiontempcode\"] = filterData.ntreeversiontempcode.value; //  inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nprojectmastercode.value:-1;\n\n        inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? filterData.nprojectmastercode.value : -1 : -1;\n      }\n\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Tree\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecification = (saveType, formRef) => {\n      const operation = this.props.Login.operation;\n      const selectedRecord = this.state.selectedRecord;\n      let selectedCopyNodeManipulationCode = this.state.selectedRecord.selectedCopyNodeManipulationCode || -1;\n      let testGroupSpec = {\n        napproveconfversioncode: -1,\n        sversion: '',\n        napprovalstatus: transactionStatus.DRAFT,\n        nstatus: transactionStatus.ACTIVE,\n        ntransactionstatus: selectedRecord[\"ntransactionstatus\"],\n        ncomponentrequired: selectedRecord[\"ncomponentrequired\"],\n        //   nclinicalspec: selectedRecord[\"nclinicalspec\"],\n        // nprojectcode: selectedRecord[\"nprojectcode\"] ? selectedRecord[\"nprojectcode\"] : -1,\n        nprojectmastercode: this.state.filterData.nprojectmastercode ? this.state.filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? this.state.filterData.nprojectmastercode.value : -1 : -1,\n        sspecname: operation === \"copy\" ? selectedRecord[\"scopyspecname\"] : selectedRecord[\"sspecname\"],\n        dexpirydate: selectedRecord[\"dexpirydate\"],\n        nallottedspeccode: selectedRecord[\"nallottedspeccode\"] ? selectedRecord[\"nallottedspeccode\"] : 0,\n        ntzexpirydate: selectedRecord[\"ntzexpirydate\"].value,\n        stzexpirydate: selectedRecord[\"ntzexpirydate\"].label\n      };\n      const dexpirydate = testGroupSpec[\"dexpirydate\"]; //need this conversion when the datatype of the field is 'Instant'\n\n      testGroupSpec[\"dexpirydate\"] = formatInputDate(dexpirydate, false);\n\n      if (operation === \"create\") {\n        testGroupSpec[\"ntemplatemanipulationcode\"] = this.props.Login.masterData.selectedNode.ntemplatemanipulationcode;\n      }\n\n      let ntreeversiontempcode = this.state.filterData.ntreeversiontempcode.value;\n      const inputData = {\n        userinfo: this.props.Login.userInfo,\n        testgroupspecification: testGroupSpec,\n        treetemplatemanipulation: this.props.Login.masterData.selectedNode,\n        selectedspecification: this.props.Login.masterData.SelectedSpecification,\n        ntreeversiontempcode: ntreeversiontempcode,\n        selectedCopyNodeManipulationCode: selectedCopyNodeManipulationCode\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: operation,\n        methodUrl: \"Specification\",\n        saveType,\n        formRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      return inputParam;\n    };\n\n    this.onSaveComponent = (saveType, formRef) => {\n      const masterData = this.props.Login.masterData;\n      const selectedRecord = this.state.selectedRecord;\n      const testArray = selectedRecord.ntestcode.map(test => {\n        return { ...test.item,\n          nisvisible: transactionStatus.YES,\n          nisadhoctest: transactionStatus.NO\n        };\n      });\n      const inputData = {\n        testgroupspecification: masterData.SelectedSpecification,\n        testgroupspecsampletype: [selectedRecord.ncomponentcode.item],\n        testgrouptest: testArray,\n        userinfo: this.props.Login.userInfo,\n        genericlabel: this.props.Login.genericLabel\n      };\n      const inputParam = {\n        inputData,\n        classUrl: \"testgroup\",\n        operation: this.props.Login.operation,\n        methodUrl: \"Component\",\n        saveType,\n        formRef\n      };\n      return inputParam;\n    };\n\n    this.onSaveSpecFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let specFileArray = [];\n      const selectedSpecification = this.props.Login.masterData.SelectedSpecification;\n      let specFile = {\n        nallottedspeccode: selectedSpecification.nallottedspeccode,\n        nspecfilecode: selectedRecord.nspecfilecode ? selectedRecord.nspecfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, specFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\n            tempData[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            specFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          specFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\n          specFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"), false);\n          specFile[\"nlinkcode\"] = transactionStatus.NA;\n          specFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          specFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          specFileArray.push(specFile);\n        }\n      } else {\n        specFile[\"sfilename\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkfilename.trim()), false);\n        specFile[\"sdescription\"] = Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\"), false);\n        specFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        specFile[\"ssystemfilename\"] = \"\";\n        specFile[\"nfilesize\"] = 0;\n        specFileArray.push(specFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"testgroupspecification\", JSON.stringify(selectedSpecification));\n      formData.append(\"testgroupspecfile\", JSON.stringify(specFileArray));\n      const inputParam = {\n        // inputData: { userinfo: this.props.Login.userInfo },\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n            smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\n            //ALPD-1628(while saving the file and link,audit trail is not captured the respective language)\n            slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\n          }\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: this.props.Login.operation,\n        classUrl: \"testgroup\",\n        saveType,\n        formRef,\n        methodUrl: \"SpecificationFile\",\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      return inputParam;\n    };\n\n    this.deleteSpecRecord = deleteParam => {\n      const selectedRecord = deleteParam.selectedRecord;\n      const masterData = this.props.Login.masterData;\n      const ntreeversiontempcode = masterData[\"TreeTemplateManipulation\"][0].ntreeversiontempcode;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === ntreeversiontempcode);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        if (selectedRecord.napprovalstatus === transactionStatus.DRAFT || selectedRecord.napprovalstatus === transactionStatus.CORRECTION) {\n          this.deleteRecord(deleteParam);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\n        const masterData = this.props.Login.masterData;\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n        if (templateVersionStatus === transactionStatus.RETIRED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n          }));\n        } else {\n          if (this.props.Login.masterData.selectedNode) {\n            const methodUrl = deleteParam.methodUrl;\n            let dataState = this.state.componentDataState;\n            const screenName = deleteParam.screenName;\n            const inputParam = {\n              inputData: {\n                [deleteParam.keyName]: deleteParam.selectedRecord,\n                userinfo: this.props.Login.userInfo,\n                genericlabel: this.props.Login.genericLabel,\n                testgroupspecification: this.props.Login.masterData.SelectedSpecification,\n                treetemplatemanipulation: this.props.Login.masterData.selectedNode,\n                ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\n              },\n              classUrl: \"testgroup\",\n              operation: deleteParam.operation,\n              methodUrl: methodUrl,\n              screenName,\n              dataState\n            };\n            const masterData = this.props.Login.masterData; //if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  openModal: true,\n                  screenName: screenName,\n                  operation: deleteParam.operation,\n                  selectedRecord: {}\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTPROFILENODE\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTPROFILENODE\"\n        }));\n      }\n    };\n\n    this.deleteMultipleRecord = deleteParam => {\n      //console.log(\"delete component:\", deleteParam, this.props.Login.masterData);\n      const masterData = this.props.Login.masterData;\n      const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n      const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n      if (templateVersionStatus === transactionStatus.RETIRED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n        }));\n      } else {\n        const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const inputParam = {\n            inputData: {\n              testgroupspecsampletype: deleteParam.props.testgroupspecsampletype,\n              userinfo: this.props.Login.userInfo,\n              genericlabel: this.props.Login.genericLabel,\n              testgroupspecification,\n              treetemplatemanipulation: this.props.Login.masterData.selectedNode\n            },\n            classUrl: \"testgroup\",\n            operation: \"delete\",\n            methodUrl: \"TestGroupComponent\",\n            screenName: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]\n          };\n          const masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                openModal: true,\n                screenName: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n                operation: \"delete\",\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      }\n    };\n\n    this.onDropSpecFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\" //fileToDelete:file.name \n\n      });\n    };\n\n    this.validateTestGroupComplete = (operation, inputValue, ncontrolCode) => {\n      if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\n        const masterData = this.props.Login.masterData;\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus;\n\n        if (templateVersionStatus === transactionStatus.RETIRED) {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTEDTEMPLATEISRETIRED\"\n          }));\n        } else {\n          if (inputValue.testgroupspecification) {\n            if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n              return rsapi.post(\"testgroup/validateTestGroupComplete\", {\n                nallottedspeccode: inputValue.testgroupspecification.nallottedspeccode,\n                \"userinfo\": this.props.Login.userInfo\n              }).then(response => {\n                if (response.data && response.data.length > 0) {\n                  const inactiveTestArray = [];\n                  response.data.map(item => inactiveTestArray.indexOf(item.stestname) === -1 ? inactiveTestArray.push(item.stestname) : \"\");\n                  const data = \" [\" + inactiveTestArray + \"] \" + this.props.intl.formatMessage({\n                    id: \"IDS_INACTIVETESTSATCOMPLETE\"\n                  });\n                  this.confirmMessage.confirm(this.props.intl.formatMessage({\n                    id: \"IDS_CONFIRMATION\"\n                  }), this.props.intl.formatMessage({\n                    id: \"IDS_CONFIRMATION\"\n                  }), data, this.props.intl.formatMessage({\n                    id: \"IDS_OK\"\n                  }), this.props.intl.formatMessage({\n                    id: \"IDS_CANCEL\"\n                  }), () => this.completeSpecification(operation, inputValue, ncontrolCode), false, undefined);\n                } else {\n                  this.completeSpecification(operation, inputValue, ncontrolCode);\n                }\n              }).catch(error => {\n                if (error.response.status === 500) {\n                  toast.error(this.props.intl.formatMessage({\n                    id: error.message\n                  }));\n                } else {\n                  toast.warn(this.props.intl.formatMessage({\n                    id: error.response\n                  }));\n                }\n              });\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n              }));\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_SELECTSPECIFICATION\"\n            }));\n          }\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.retireSpec = (operation, selectedSpecification, approvalRoleActionDetail, retireSpecId) => {\n      if (selectedSpecification.testgroupspecification.napprovalstatus !== transactionStatus.RETIRED) {\n        if (approvalRoleActionDetail.length > 0 && approvalRoleActionDetail[0].nlevelno === transactionStatus.ACTIVE) {\n          if (selectedSpecification.testgroupspecification[\"napprovalstatus\"] === approvalRoleActionDetail[0].ntransactionstatus) {\n            const inputParam = {\n              inputData: {\n                nallottedspeccode: selectedSpecification.testgroupspecification,\n                treetemplatemanipulation: selectedSpecification.treetemplatemanipulation,\n                approvalRoleActionDetail: approvalRoleActionDetail[0],\n                userinfo: this.props.Login.userInfo,\n                operation: operation\n              },\n              classUrl: \"testgroup\",\n              operation: operation,\n              methodUrl: \"Spec\",\n              screenName: \"IDS_STUDYPLAN\"\n            };\n            let masterData = this.props.Login.masterData;\n\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, retireSpecId)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  openModal: true,\n                  screenName: \"IDS_STUDYPLAN\",\n                  operation: operation,\n                  selectedRecord: {}\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.retireSpecification(inputParam.inputData, masterData);\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_RETIRECANBECONEAFTERFINAL\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_FINALLEVELAPPROVE\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ALREADYRETIRED\"\n        }));\n      }\n    };\n\n    this.onDownloadClick = reportSpecId => {\n      if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\n        const inputParam = {\n          Vnallottedspeccode: this.props.Login.masterData['SelectedSpecification'].nallottedspeccode,\n          ntransactionstatus: this.props.Login.masterData.SelectedSpecification.napprovalstatus\n        }; //this.props.reportSpecification(inputParam['inputData']);\n\n        this.props.generateControlBasedReport(reportSpecId, inputParam, this.props.Login, \"Vnallottedspeccode\", this.props.Login.masterData.SelectedComponent.nallottedspeccode);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\"\n        }));\n      }\n    };\n\n    this.specificationReport = (operation, ncontrolCode) => {\n      if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\n        const inputParam = {\n          inputData: {\n            sprimarykeyname: 'nallottedspeccode',\n            userinfo: this.props.Login.userInfo,\n            ncontrolcode: ncontrolCode,\n            nregtypecode: transactionStatus.NA,\n            nregsubtypecode: transactionStatus.NA,\n            nreportmodulecode: transactionStatus.NA,\n            nreporttypecode: REPORTTYPE.CONTROLBASED,\n            nreportdecisiontypecode: transactionStatus.NA,\n            certificatetypecode: transactionStatus.NA,\n            nsectioncode: transactionStatus.NA,\n            operation: operation,\n            nallottedspeccode: this.props.Login.masterData['SelectedSpecification']['nallottedspeccode'],\n            selectedComponent: this.props.Login.masterData[\"SelectedComponent\"],\n            selectedTest: this.props.Login.masterData[\"SelectedTest\"],\n            filterData: this.state.filterData\n          }\n        };\n        this.props.reportSpecification(inputParam['inputData']);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\"\n        }));\n      }\n    };\n\n    this.completeSpecification = (operation, inputValue, ncontrolCode) => {\n      if (inputValue.testgroupspecification) {\n        if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n          const inputParam = {\n            inputData: {\n              userinfo: this.props.Login.userInfo,\n              ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\n              testGroupTest: this.props.Login.masterData.TestGroupTest,\n              // ALPD-5329 - Gowtham R - In test group specification record getting Auto Approved when configuration for test group approval not done\n              isQualisLite: parseInt(this.props.Login.settings[71]),\n              ...inputValue\n            },\n            classUrl: \"testgroup\",\n            operation: operation,\n            methodUrl: \"Specification\",\n            screenName: \"IDS_SPECIFICATION\"\n          };\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: \"IDS_SPECIFICATION\",\n                operation: operation,\n                selectedRecord: {}\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.approveSpecification = (status, needEsign) => {\n      const masterData = this.props.Login.masterData;\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          treetemplatemanipulation: masterData.selectedNode,\n          ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\n          testgroupspecification: { ...masterData.SelectedSpecification,\n            napprovalstatus: status\n          }\n        },\n        classUrl: \"testgroup\",\n        operation: \"approve\",\n        methodUrl: \"Specification\",\n        screenName: \"IDS_SPECIFICATION\"\n      };\n\n      if (needEsign === transactionStatus.YES) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SPECIFICATION\",\n            operation: \"approve\",\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\", {});\n      }\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo, optional) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          if (fieldName === \"ntestcode\") {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          } else {\n            selectedRecord[fieldName] = comboData;\n            this.setState({\n              selectedRecord\n            });\n          }\n\n          break;\n\n        case 2:\n          selectedRecord[\"parameterTypeCode\"] = comboData.value;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 3:\n          selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    const componentDataState = {\n      skip: 0,\n      take: 10\n    };\n    const historyDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const clinicalspecDataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n      group: [{\n        field: 'sgendername'\n      }]\n    };\n    this.state = {\n      selectedRecord: {},\n      filterData: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      componentDataState,\n      historyDataState,\n      clinicalspecDataState,\n      tempFilterData: {},\n      showTest: true,\n      testskip: 0,\n      testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      skipRulesEngine: 0,\n      takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      fixefScrollHeight: window.outerHeight - 400,\n      initialVerticalWidth: \"20vh\",\n      testView: true,\n      //paneHeight:'calc(100vh - ' +window.outerHeight-847 + 'px)'\n      paneHeight: 'calc(100vh -183px)' // isCopySpecRender: true\n\n    };\n    this.componentColumnList = [{\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"ncomponentcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"mandatory\": true\n    }, {\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"ntestcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"mandatory\": true\n    }];\n    this.componentBreadcrumbs = [];\n    this.breadCrumbData = [];\n    this.searchRef = React.createRef();\n    this.specSubField = [{\n      [designProperties.VALUE]: \"stransdisplaystatus\"\n    }, {\n      [designProperties.VALUE]: \"sapprovalstatus\",\n      [designProperties.COLOUR]: true\n    }];\n    this.myRef = React.createRef();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        parentHeight: height - 50\n      });\n    }\n  } // shouldComponentUpdate (nextProps,nextState) {  \n  //     if(this.props.Login.operation===\"copy\" && nextProps.Login.openModal === false && this.state.isCopySpecRender === false){\n  //         this.setState({ isCopySpecRender: true});\n  //         return true;\n  //     }\n  //     if (this.props.Login.screenName === 'IDS_SPECIFICATION'\n  //         &&nextState.isCopySpecRender===false\n  //         // &&(nextState.selectedRecord.selectedCopyNodeManipulationCode !==this.state.selectedRecord.selectedCopyNodeManipulationCode)\n  //         ) {\n  //         return false;\n  //       }\n  //       else{\n  //         return true;\n  //       }\n  // }\n\n\n  render() {\n    console.log(\"Screen Name need\", this.props.Login.screenName);\n    const {\n      TestGroupSpecification,\n      SelectedSpecification,\n      SelectedTest,\n      OpenNodes,\n      selectedNode,\n      FocusKey,\n      ActiveKey,\n      SelectedComponent,\n      TestGroupTest,\n      TestGroupSpecSampleType,\n      searchedData,\n      TestGroupTestParameter,\n      CopyOpenNodes\n    } = this.props.Login.masterData; // const CopyOpenNodes = this.props.Login.masterData.OpenNodes;\n    // const deleteTree = {\n    //     methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\n    //     userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\"\n    // };\n\n    if (this.props.Login.masterData && this.props.Login.masterData.AgaramTree && this.props.Login.masterData.AgaramTree.length > 0) {\n      this.props.Login.masterData.AgaramTree[0][\"label\"] = this.props.Login.masterData.AgaramTree[0][\"label\"] === 'root' ? this.props.intl.formatMessage({\n        id: \"IDS_ROOT\"\n      }) : this.props.Login.masterData.AgaramTree[0][\"label\"];\n    } //ALPD-5173 French Lang : Test Group screen -> While select the sample type, root name is changed into English lang.\n\n\n    if (this.props.Login.masterData && this.props.Login.masterData.selectedRecordCopy !== undefined && this.props.Login.masterData.selectedRecordCopy && this.props.Login.masterData.selectedRecordCopy.AgaramTree !== undefined && this.props.Login.masterData.selectedRecordCopy.AgaramTree.length > 0) {\n      this.props.Login.masterData.selectedRecordCopy.AgaramTree[0][\"label\"] = this.props.Login.masterData.selectedRecordCopy.AgaramTree[0][\"label\"] === 'root' ? this.props.intl.formatMessage({\n        id: \"IDS_ROOT\"\n      }) : this.props.Login.masterData.selectedRecordCopy.AgaramTree[0][\"label\"];\n    } //  const testGroupTestData = searchedData || TestGroupTest || []\n\n\n    if (TestGroupTestParameter) {\n      sortData(TestGroupTestParameter, \"ascending\", \"nsorter\");\n    } // ALPD-3242 Commented sortData as tests are sorted unnecessarily everytime while clicking on the test in the tab\n    // if (testGroupTestData) {\n    //     sortData(testGroupTestData, \"descending\", \"nsorter\");\n    // }\n\n\n    const getComponent = {\n      screenName: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      operation: \"get\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"TestGroupComponent\",\n      keyName: \"testgroupspecification\"\n    };\n    const addSpecParam = {\n      testgroupspecification: SelectedSpecification,\n      selectedRecord: this.state.filterData,\n      userInfo: this.props.Login.userInfo,\n      selectedNode\n    };\n    const editSpecParam = {\n      selectedRecord: this.state.filterData,\n      userinfo: this.props.Login.userInfo,\n      selectedNode\n    };\n    const specDeleteParam = {\n      operation: \"delete\",\n      methodUrl: \"Specification\",\n      screenName: \"IDS_SPECIFICATION\",\n      keyName: \"testgroupspecification\",\n      filterData: this.state.filterData\n    };\n    const addSpecId = this.state.controlMap.has(\"AddSpecification\") && this.state.controlMap.get(\"AddSpecification\").ncontrolcode;\n    const addTreeId = this.state.controlMap.has(\"AddTree\") && this.state.controlMap.get(\"AddTree\").ncontrolcode;\n    const editTreeId = this.state.controlMap.has(\"EditTree\") && this.state.controlMap.get(\"EditTree\").ncontrolcode;\n    const deleteTreeId = this.state.controlMap.has(\"DeleteTree\") && this.state.controlMap.get(\"DeleteTree\").ncontrolcode;\n    const editSpecId = this.state.controlMap.has(\"EditSpecification\") && this.state.controlMap.get(\"EditSpecification\").ncontrolcode;\n    const deleteSpecId = this.state.controlMap.has(\"DeleteSpecification\") && this.state.controlMap.get(\"DeleteSpecification\").ncontrolcode;\n    const addComponentId = this.state.controlMap.has(\"AddComponent\") && this.state.controlMap.get(\"AddComponent\").ncontrolcode;\n    const deleteComponentId = this.state.controlMap.has(\"DeleteComponent\") && this.state.controlMap.get(\"DeleteComponent\").ncontrolcode;\n    const addTestId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\n    const deleteTestId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\n    const editTestId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\n    const viewFileId = this.state.controlMap.has(\"ViewTestFile\") && this.state.controlMap.get(\"ViewTestFile\").ncontrolcode;\n    const confirmMessage = new ConfirmMessage();\n    const deleteTree = {\n      methodUrl: \"Tree\",\n      operation: \"delete\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      screenName: \"IDS_TREE\",\n      ncontrolCode: deleteTreeId,\n      filterData: this.state.filterData\n    };\n    const getTest = {\n      screenName: \"IDS_TEST\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"TestGroupTest\",\n      keyName: \"ntestgrouptestcode\"\n    };\n    const filterParam = {\n      testskip: 0,\n      testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      inputListName: \"TestGroupTest\",\n      selectedObject: \"SelectedTest\",\n      primaryKeyField: \"ntestgrouptestcode\",\n      fetchUrl: \"testgroup/getTestGroupTest\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList,\n      changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\", \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"],\n      isSingleSelect: true\n    };\n    const filterParamRulesEngine = {\n      skipRulesEngine: 0,\n      takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\n      inputListName: \"RulesEngine\",\n      selectedObject: \"SelectedRulesEngine\",\n      primaryKeyField: \"ntestgrouprulesenginecode\",\n      fetchUrl: \"testgrouprulesengine/getSelectedTestGroupRulesEngine\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        ntestgrouptestcode: this.props.Login.masterData.SelectedTest && this.props.Login.masterData.SelectedTest.ntestgrouptestcode\n      },\n      masterData: this.props.Login.masterData,\n      'searchFieldList': [\"srulename\", \"stransdisplaystatus\"],\n      changeList: [],\n      isSingleSelect: true\n    };\n    const specMandatoryFields = []; //ALPD-4962 Test group screen -> while copy the spec and in spec name field without giving anything & save it blank page occurs.\n\n    const specCopyMandatoryFields = [];\n    const compMandatoryFields = [];\n    const editTestMandatoryFields = [];\n    const addTestMandatoryFields = [];\n    specificationColumnList.forEach(item => item.mandatory === true ? specMandatoryFields.push(item) : \"\"); //ALPD-4944, Added specCopyMandatoryFields to check mandatory fields for copy spec\n    //ALPD-4962 Test group screen -> while copy the spec and in spec name field without giving anything & save it blank page occurs.\n\n    specificationCopyColumnList.forEach(item => item.mandatory === true ? specCopyMandatoryFields.push(item) : \"\");\n    this.componentColumnList.forEach(item => item.mandatory === true ? compMandatoryFields.push(item) : \"\");\n    editTestColumnList.forEach(item => item.mandatory === true ? editTestMandatoryFields.push(item) : \"\");\n    addTestColumnList.forEach(item => item.mandatory === true ? addTestMandatoryFields.push(item) : \"\");\n\n    if (this.props.Login.masterData && Object.values(this.props.Login.masterData).length > 0) {\n      if (selectedNode && selectedNode.sleveldescription) {\n        const splitNode = this.props.Login.masterData.ActiveKey.split('/');\n        let treeNodeNames = [];\n        splitNode.forEach(nodeItem => {\n          this.props.Login.masterData.TreeTemplateManipulation.forEach(treeItem => {\n            if (treeItem.ntemplatemanipulationcode === parseInt(nodeItem)) treeNodeNames.push(treeItem.sleveldescription);\n          });\n        });\n        this.componentBreadcrumbs = treeNodeNames;\n\n        if (SelectedSpecification && SelectedSpecification !== null && SelectedSpecification.sspecname) {\n          this.componentBreadcrumbs.push(SelectedSpecification.sspecname);\n\n          if (SelectedComponent && SelectedComponent !== null && SelectedComponent.ncomponentcode !== -1) {\n            // this.componentBreadcrumbs[2] = this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }) + \": \" + SelectedComponent.scomponentname;\n            this.componentBreadcrumbs.push(SelectedComponent.scomponentname);\n          } else {// delete this.componentBreadcrumbs[2];\n          }\n        } else {// delete this.componentBreadcrumbs[1];\n        }\n      } else {\n        this.componentBreadcrumbs = []; // delete this.componentBreadcrumbs[0];\n      }\n    }\n\n    this.confirmMessage = new ConfirmMessage(); //New Design\n\n    const specDesign = /*#__PURE__*/React.createElement(React.Fragment, null, this.componentBreadcrumbs && this.componentBreadcrumbs.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"component_breadcrumbs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 25\n      }\n    }, this.componentBreadcrumbs.map(item => {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 40\n        }\n      }, item);\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      hidden: this.state.showTest,\n      className: \"mr-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card_group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\",\n        marginTop: \"1%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 37\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SPECIFICATIONINFO\"\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        float: \"right\",\n        marginRight: \"1rem\"\n      },\n      onClick: () => this.showSpecAndTestInfo1(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 37\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n      genericLabel: this.props.Login.genericLabel,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedSpecification: this.props.Login.masterData.SelectedSpecification,\n      userInfo: this.props.Login.userInfo,\n      selectedNode: this.props.Login.masterData.selectedNode,\n      selectedRecord: this.state.filterData,\n      approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n      screenName: \"IDS_SPECIFICATIONINFO\",\n      deleteRecord: this.deleteRecord,\n      addSpecification: this.props.addSpecification,\n      filterData: this.state.filterData //completeSpecification={this.completeSpecification}\n      ,\n      completeSpecification: this.validateTestGroupComplete,\n      approveSpecification: this.approveSpecification,\n      specificationReport: this.onDownloadClick,\n      retireSpec: this.retireSpec,\n      masterData: this.props.Login.masterData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 29\n      }\n    }))));\n    const testDesign = /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      className: \"sm-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"spec-info-title\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_TEST\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 17\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-primary\",\n      style: {\n        position: \"absolute\",\n        right: \"7px\",\n        top: \"7px\"\n      },\n      onClick: () => this.showSpecAndTestInfo(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 21\n      }\n    }), \"  \", this.props.intl.formatMessage({\n      id: \"IDS_SPECINFO\"\n    }))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: this.state.testView ? 'p-0' : 'no-pad-t',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      cardHead: 167,\n      componentBreadcrumbs: this.breadCrumbData ? this.breadCrumbData.length > 0 ? true : false : false // notSearchable={false}\n      ,\n      masterList: searchedData || TestGroupTest || [] //selectedMaster={[SelectedTest]}\n      ,\n      clickIconGroup: true,\n      selectedMaster: SelectedTest !== undefined ? [SelectedTest] : undefined,\n      primaryKeyField: \"ntestgrouptestcode\",\n      getMasterDetail: this.props.getTestGroupDetails,\n      inputParam: getTest,\n      additionalParam: [],\n      mainField: \"stestname\",\n      selectedListName: \"SelectedTest\",\n      objectName: \"testgrouptest\",\n      listName: \"IDS_TEST\",\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      subFields: testSubFields // moreField={testMoreFields}\n      ,\n      moreField: this.TestGroupMorefields(testMoreFields),\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      hidePaging: false,\n      filterParam: filterParam,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faCloudDownloadAlt\",\n        objectName: \"selectedTest\",\n        hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.viewTestFile(props),\n        needConditionalIcon: true,\n        conditionalIconFunction: this.fileViewIcon\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_VIEW\"\n        }),\n        controlname: \"faExternalLinkAlt\",\n        objectName: \"selectedTest\",\n        hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.viewTestFile(props),\n        needConditionalIcon: true,\n        conditionalIconFunction: this.linkViewIcon\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(editTestId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.props.editTestGroupTest(\"update\", props.SelectedTest[0], this.props.Login.userInfo, editTestId, SelectedSpecification, this.state.filterData, props.masterData)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"testgrouptest\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteTestId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteTest({\n          props,\n          ncontrolCode: deleteTestId,\n          filterData: this.state.filterData\n        }))\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addTestId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) // data-for=\"tooltip-list-wrap\"\n        ,\n        onClick: () => this.props.addTestGroupTest(SelectedComponent, this.props.Login.userInfo, addTestId, SelectedSpecification, this.state.filterData, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }\n    })));\n    const paramDesign = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ContentPanel, {\n      hidden: !this.state.showTest,\n      className: \"grouped-param\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TestGroupTestTab, {\n      paneHeight: this.state.paneHeight,\n      testView: this.state.testView,\n      isrulesenginerequired: this.props.Login.masterData.isrulesenginerequired && this.props.Login.masterData.isrulesenginerequired === transactionStatus.YES ? true : false,\n      masterData: this.props.Login.masterData,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenName: this.props.Login.screenName,\n      openChildModal: this.props.Login.openChildModal,\n      operation: this.props.Login.operation,\n      loadEsign: this.props.Login.loadEsign,\n      testGroupInputData: this.props.Login.testGroupInputData,\n      parameterData: this.props.Login.parameterData,\n      selectedRecord: this.state.selectedRecord,\n      selectedsubcodedresult: this.state.selectedsubcodedresult || [],\n      selectsubcodedelete: this.state.selectsubcodedelete,\n      screenData: this.props.Login.screenData,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      controlMap: this.state.controlMap,\n      testGroupCheckList: this.props.Login.testGroupCheckList,\n      openTemplateModal: this.props.Login.openTemplateModal,\n      editTestGroupTest: this.props.editTestGroupTest,\n      updateStore: this.props.updateStore,\n      crudMaster: this.props.crudMaster,\n      getTestGroupParameter: this.props.getTestGroupParameter,\n      editTestGroupParameter: this.props.editTestGroupParameter,\n      filterData: this.state.filterData,\n      addTestGroupCodedResult: this.props.addTestGroupCodedResult,\n      subCodedResultView: this.props.subCodedResultView,\n      addTestGroupNumericTab: this.props.addTestGroupNumericTab,\n      validateEsignCredential: this.props.validateEsignCredential,\n      filterColumnData: this.props.filterColumnData,\n      viewTestGroupCheckList: this.props.viewTestGroupCheckList,\n      getDataForTestMaterial: this.props.getDataForTestMaterial,\n      materialType: this.props.Login.materialType,\n      getMaterialCategoryBasedMaterialType: this.props.getMaterialCategoryBasedMaterialType,\n      materialCategoryList: this.props.Login.materialCategoryList,\n      materialList: this.props.Login.materialList,\n      getMaterialBasedMaterialCategory: this.props.getMaterialBasedMaterialCategory,\n      getTestGroupMaterial: this.props.getTestGroupMaterial,\n      getDataForEditTestMaterial: this.props.getDataForEditTestMaterial,\n      dataState: this.state.clinicalspecDataState,\n      dataStateChange: this.specDataStateChange,\n      getTestGroupRulesEngineAdd: this.getTestGroupRulesEngineAdd,\n      settings: this.props.Login.settings,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      getEditTestGroupRulesEngine: this.props.getEditTestGroupRulesEngine,\n      getSelectedTestGroupRulesEngine: this.props.getSelectedTestGroupRulesEngine,\n      ConfirmDeleteRule: this.ConfirmDeleteRule,\n      approveVersion: (masterdata, nflag) => this.approveVersion(masterdata, nflag),\n      openflowview: props => this.openflowview(props),\n      handlePageChangeRuleEngine: event => this.handlePageChangeRuleEngine(event),\n      skipRulesEngine: this.state.skipRulesEngine,\n      takeRulesEngine: this.state.takeRulesEngine,\n      viewOutcome: props => this.viewOutcome(props),\n      filterParamRulesEngine: filterParamRulesEngine,\n      filterTransactionList: this.props.filterTransactionList,\n      saveExecutionOrder: props => this.props.saveExecutionOrder(props, this.props.Login.masterData, this.props.Login.userInfo),\n      copyVersion: (masterData, ncontrolCode) => this.props.getCopyValues(masterData, ncontrolCode, this.props.Login.userInfo),\n      getProductCategory: this.props.Login.getProductCategory || [],\n      getSpecificationList: this.props.Login.getSpecificationList || [],\n      getComponentList: this.props.Login.getComponentList || [],\n      getProductList: this.props.Login.getProductList || [],\n      getProfileRoot: this.props.Login.getProfileRoot || [],\n      getComponentComboServices: methodparam => this.props.getComponentComboServices(methodparam),\n      getSpecificationComboServices: methodparam => this.props.getSpecificationComboServices(methodparam),\n      getRulesTestComboServices: methodparam => this.props.getRulesTestComboServices(methodparam),\n      getProductComboServices: methodparam => this.props.getProductComboServices(methodparam),\n      getProfileRootComboServices: methodparam => this.props.getProfileRootComboServices(methodparam),\n      getRulesList: this.props.Login.getRulesList || [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 25\n      }\n    }))));\n    const mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n      customClassName: this.state.testView ? \"detailed-inner\" : \"detailed-inner no-height \",\n      vertical: this.state.testView ? false : true,\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true //secondaryInitialSize={this.state.testView ? 600 : this.state.fixefScrollHeight}\n      ,\n      secondaryInitialSize: 37,\n      primaryMinSize: 30,\n      secondaryMinSize: 37,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 13\n      }\n    }, testDesign, paramDesign); // const testDesign = this.state.testView ?\n    //     <SplitterLayout\n    //         customClassName=\"detailed-inner\"\n    //         borderColor=\"#999\"\n    //         primaryIndex={1}>\n    //         {tempDesign}{paramDesign}\n    //     </SplitterLayout>\n    //     :\n    //     <SplitterLayout\n    //         customClassName=\"detailed-inner no-height\"\n    //         vertical\n    //         borderColor=\"#999\"\n    //         primaryIndex={1}\n    //         // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\n    //         secondaryInitialSize={this.state.fixefScrollHeight}\n    //     >\n    //         <ContentPanel>\n    //             {tempDesign}\n    //         </ContentPanel>\n    //         {paramDesign}\n    //     </SplitterLayout>\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 17\n      }\n    }, this.breadCrumbData && this.breadCrumbData.length > 0 && /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      ref: parentHeight => {\n        this.parentHeight = parentHeight;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: 30 //customClassName=\"fixed_list_height\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.showModalBg ? 'show_modal_bg fixed_list_height' : 'fixed_list_height'}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky_head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SearchAdd, {\n      className: \"border fixed_ico_list title_grp_custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 674,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_PROFILETREE\"\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"icon_group_right_aligned\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(AdvFilter, {\n      filterComponent: [{\n        \"IDS_SAMPLEFILTER\": /*#__PURE__*/React.createElement(SampleFilter, {\n          genericLabel: this.props.Login.genericLabel,\n          userInfo: this.props.Login.userInfo,\n          sampleType: this.state.sampleType,\n          treeVersionTemplate: this.state.treeVersionTemplate,\n          productCategory: this.state.productCategory,\n          product: this.state.product,\n          projectType: this.state.projectType,\n          project: this.state.project,\n          onFilterComboChange: this.onFilterComboChange,\n          tempFilterData: this.state.tempFilterData,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 679,\n            columnNumber: 61\n          }\n        }),\n        needActionStrip: false\n      }],\n      onFilterSubmit: this.onFilterSumbit,\n      showModalBg: e => this.setState({\n        showModalBg: e\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex product-category float-right icon-group-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 698,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-icon-rounded btn-circle solid-blue mr-1\",\n      role: \"button\",\n      hidden: this.state.userRoleControlRights.indexOf(addTreeId) === -1,\n      onClick: () => this.props.createTree(this.state.filterData, this.props.Login.userInfo, this.props.Login.masterData, addTreeId),\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_ADD\"\n      }) //  data-for=\"tooltip-list-wrap\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 706,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr0 mr-1\",\n      name: \"edittestname\",\n      hidden: this.state.userRoleControlRights.indexOf(editTreeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }) //  data-for=\"tooltip-list-wrap\"\n      ,\n      onClick: () => this.props.editTree(\"update\", selectedNode, this.props.Login.userInfo, editTreeId, this.state.filterData, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteLink\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteTreeId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }) // data-for=\"tooltip-list-wrap\"\n      ,\n      className: \"btn btn-circle outline-grey \",\n      onClick: () => this.ConfirmDelete({ ...deleteTree\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 57\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"btn btn-circle outline-grey ml-1 p-0\",\n      variant: \"link\",\n      onClick: () => this.reloadData() // data-for=\"tooltip-list-wrap\"\n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_REFRESH\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 735,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(RefreshIcon, {\n      className: \"custom_icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 739,\n        columnNumber: 61\n      }\n    })))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sticky_head_scroll_body\",\n      style: {\n        \"height\": this.state.parentHeight\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 747,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormTreeMenu, {\n      data: this.props.Login.masterData.AgaramTree,\n      hasSearch: false,\n      handleTreeClick: this.onTreeClick,\n      initialOpenNodes: OpenNodes,\n      focusKey: FocusKey || \"\",\n      activeKey: ActiveKey || \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 749,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(TransationListMaster, {\n      notSearchable: true,\n      titleHead: this.props.intl.formatMessage({\n        id: \"IDS_SPECIFICATION\"\n      }),\n      titleClasses: \"title_grp_custom fixed_ico_list\",\n      masterList: TestGroupSpecification || [],\n      selectedMaster: [SelectedSpecification],\n      needMultiSelect: false,\n      primaryKeyField: \"nallottedspeccode\",\n      getMasterDetail: spec => this.props.getComponentBySpecId({ ...getComponent,\n        selectedRecord: spec,\n        historyDataState: this.state.historyDataState\n      }, this.props.Login.masterData, this.searchRef),\n      mainField: \"sspecname\",\n      selectedListName: \"testgroupspecification\",\n      objectName: \"testgroupspecification\",\n      listName: \"IDS_SPECIFICATION\",\n      onFilterSumbit: this.onFilterSumbit,\n      subFields: this.specSubField,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDIT\"\n        }),\n        controlname: \"faPencilAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(editSpecId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => this.props.addSpecification(\"update\", { ...editSpecParam,\n          ...props\n        }, editSpecId)\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        controlname: \"faTrashAlt\",\n        objectName: \"testgroupspecification\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteSpecId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteSpecRecord({\n          props,\n          ...specDeleteParam,\n          selectedRecord: SelectedSpecification,\n          ncontrolCode: deleteSpecId\n        }))\n      }],\n      needFilter: false,\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addSpecId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) //  data-for=\"tooltip-list-wrap\"\n        ,\n        onClick: () => this.props.addSpecification(\"create\", { ...addSpecParam\n        }, addSpecId, this.props.Login.masterData),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 803,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 808,\n          columnNumber: 61\n        }\n      }))),\n      hideSearch: false,\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 45\n      }\n    }), this.props.Login.filterData && this.props.Login.filterData.nproductcatcode.item.nmaterialtypecode === MaterialType.IQCSTANDARDMATERIALTYPE ? \"\" : //{\n    SelectedSpecification && SelectedSpecification.ncomponentrequired === transactionStatus.YES && /*#__PURE__*/React.createElement(TransationListMaster, {\n      notSearchable: true,\n      titleHead: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      titleClasses: \"title_grp_custom fixed_ico_list\",\n      masterList: TestGroupSpecSampleType || [],\n      selectedMaster: [SelectedComponent],\n      needMultiSelect: false,\n      primaryKeyField: \"nspecsampletypecode\",\n      getMasterDetail: event => this.componentRowClick(event),\n      mainField: \"scomponentname\",\n      selectedListName: \"testgroupspecsampletype\",\n      objectName: \"testgroupspecsampletype\",\n      listName: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }),\n        // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        controlname: \"faTrashAlt\",\n        objectName: \"testgroupspecsampletype\",\n        hidden: this.state.userRoleControlRights.indexOf(deleteComponentId) === -1,\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        onClick: props => confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n          id: \"IDS_DELETE\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_DEFAULTCONFIRMMSG\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_OK\"\n        }), this.props.intl.formatMessage({\n          id: \"IDS_CANCEL\"\n        }), () => this.deleteMultipleRecord({\n          props,\n          ncontrolCode: deleteComponentId\n        }))\n      }],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        hidden: this.state.userRoleControlRights.indexOf(addComponentId) === -1,\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }) //  data-for=\"tooltip-list-wrap\"\n        // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\n        ,\n        onClick: () => this.props.addComponent(SelectedSpecification, this.props.Login.userInfo, addComponentId, { ...this.props.Login.masterData,\n          nsampletypecode: this.state.filterData.nsampletypecode\n        }, this.props.Login.genericLabel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 65\n        }\n      }))),\n      hidePaging: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 49\n      }\n    }) //}\n    ))), /*#__PURE__*/React.createElement(React.Fragment, null, this.state.testView ? /*#__PURE__*/React.createElement(React.Fragment, null, specDesign, this.state.showTest ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 883,\n        columnNumber: 49\n      }\n    }, mainDesign) : \"\") : /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 889,\n        columnNumber: 41\n      }\n    }, specDesign, this.state.showTest ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892,\n        columnNumber: 49\n      }\n    }, mainDesign) : \"\")))))), /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: this.props.Login.showAlertGrid,\n      modalTitle: this.props.Login.showParameterGrid ? \"IDS_VIEWPARAMETER\" : this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? this.props.intl.formatMessage({\n        id: \"IDS_ADDITIONALINFOREQURIED\"\n      }) : '',\n      closeModal: this.closeModalShowPredefAlert,\n      onSaveClick: this.onModalSavePredefAlert,\n      removeCancel: this.props.Login.showParameterGrid ? false : this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? true : false,\n      needSubmit: this.props.Login.showParameterGrid ? false : this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? true : false,\n      needSave: this.props.Login.showParameterGrid ? true : this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : true,\n      selectedRecord: this.state.selectedRecord || {},\n      size: this.props.Login.showParameterGrid ? \"lg\" : this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : 'lg',\n      showAlertMsg: this.props.Login.showAlertForPredefined ? true : false,\n      modalBody: this.props.Login.showParameterGrid ? /*#__PURE__*/React.createElement(DataGrid, {\n        key: \"testsectionkey\",\n        primaryKeyField: \"ntestgrouptestparametercode\",\n        dataResult: this.props.Login.masterData.ParameterRulesEngine && process(sortData(this.props.Login.masterData.ParameterRulesEngine, \"descending\", \"ntestgrouptestparametercode\") || [], this.state.dataStateChangeViewParameter ? this.state.dataStateChangeViewParameter : {\n          skip: 0,\n          take: 10\n        }),\n        dataState: this.state.dataStateChangeViewParameter ? this.state.dataStateChangeViewParameter : {\n          skip: 0,\n          take: 10\n        },\n        dataStateChange: this.dataStateChangeViewParameter,\n        extractedColumnList: [{\n          \"idsName\": \"IDS_PARAMETERNAME\",\n          \"dataField\": \"sparametersynonym\",\n          \"width\": \"200px\"\n        }, {\n          \"idsName\": \"IDS_RESULT\",\n          \"dataField\": \"sfinal\",\n          \"width\": \"200px\"\n        } // { \"idsName\": \"IDS_RESULTFLAG\", \"dataField\": \"sgradename\", \"width\": \"200px\" } \n        ],\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        pageable: true,\n        scrollable: 'scrollable',\n        hideColumnFilter: true,\n        selectedId: 0,\n        activeTabName: \"IDS_Test\",\n        gridHeight: '400px',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 927,\n          columnNumber: 32\n        }\n      }) : this.props.Login.additionalInfoView ? this.state.selectedRecord['additionalResultData'] : this.props.Login.showAlertForPredefined ? /*#__PURE__*/React.createElement(ResultEntryPredefinedComments, {\n        onlyAlertMsgAvailable: this.props.Login.onlyAlertMsgAvailable,\n        salertmessage: this.props.Login.masterData['salertmessage'],\n        showMultiSelectCombo: this.props.Login.showMultiSelectCombo,\n        testgrouptestpredefsubresultOptions: this.props.Login.masterData.testgrouptestpredefsubresultOptions || [],\n        selectedRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 957,\n          columnNumber: 24\n        }\n      }) : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 17\n      }\n    }), this.props.Login.openModal && this.props.Login.screenName && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      className: this.props.Login.screenName === \"IDS_VIEWRULE\" ? \"wide-popup\" : \"\",\n      operation: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? this.props.intl.formatMessage({\n        id: this.props.Login.screenName\n      }) + \" - \" + this.props.Login.masterData.SelectedTest.stestsynonym : this.props.Login.screenName,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign //ALPD-5444 Test Group - Copy the spec in test group and do save continue loading issue occurs.\n      ,\n      showSaveContinue: this.props.Login.screenName === \"IDS_SPECIFICATION\" || this.props.Login.screenName === \"IDS_SPECFILE\" ? this.props.Login.loadEsign ? false : true : false,\n      onSaveClick: this.onSaveClick,\n      hideSave: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" || this.props.Login.screenName === \"IDS_SUBCODERESULT\" ? true : false,\n      size: this.props.Login.screenName === \"IDS_VIEWRULE\" || this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? 'xl' : \"lg\",\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.screenName === \"IDS_SPECFILE\" ? this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord) : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? this.props.Login.operation === \"copy\" ? specCopyMandatoryFields : specMandatoryFields //ALPD-4944, Added condition to read which mandatory records\n      : this.props.Login.screenName === this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] ? compMandatoryFields : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? editTestMandatoryFields : this.props.Login.screenName === \"IDS_TEST\" ? addTestMandatoryFields : this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\" ? this.props.Login.treeMandatoryFields : [],\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 997,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? /*#__PURE__*/React.createElement(AddTestGroupSpecification, {\n        genericLabel: this.props.Login.genericLabel,\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {},\n        timeZoneList: this.props.Login.timeZoneList,\n        onInputOnChange: this.onInputOnChange,\n        handleDateChange: this.handleDateChange,\n        onComboChange: this.onComboChange,\n        screenName: this.props.Login.screenName,\n        operation: this.props.Login.operation,\n        nsampletypecode: this.props.Login.masterData.selectedNode.nsampletypecode,\n        settings: this.props.Login.settings,\n        tempFilterData: this.state.tempFilterData,\n        filterData: this.props.Login.filterData //For copy action --ALPD-4099 ,work done by Dhanushya R I\n        ,\n        focusKey: // this.props.Login.masterData && this.props.Login.masterData.selectedRecordCopy ? this.props.Login.masterData.selectedRecordCopy.CopyFocusKey :\n        this.state.selectedRecord.CopyFocusKey || \"\",\n        activeKey: // this.props.Login.masterData && this.props.Login.masterData.selectedRecordCopy ? this.props.Login.masterData.selectedRecordCopy.CopyActiveKey :\n        this.state.selectedRecord.CopyActiveKey || \"\",\n        copyProfileName: this.state.selectedRecord.selectedCopyProfileName,\n        onCopyTreeClick: this.onCopyTreeClick,\n        initialOpenNodes: CopyOpenNodes || OpenNodes,\n        data: this.props.Login.masterData.AgaramTree //For copy action --ALPD-4099 ,work done by Dhanushya R I\n        ,\n        Copydata: this.props.Login.masterData.selectedRecordCopy && this.props.Login.masterData.selectedRecordCopy.AgaramTree,\n        masterData: this.props.Login.masterData,\n        productCategory: this.state.productCategory,\n        product: this.state.product,\n        changeProductOrProductCategory: this.props.getSpecDetailsForCopy,\n        initialProfile: this.props.Login.masterData && this.props.Login.masterData.selectedNode && this.props.Login.masterData.selectedNode.sleveldescription,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1004,\n          columnNumber: 33\n        }\n      }) : this.props.Login.screenName === this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] ? /*#__PURE__*/React.createElement(AddTestGroupTest, {\n        genericLabel: this.props.Login.genericLabel,\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1038,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_SUBCODERESULT\" ? /*#__PURE__*/React.createElement(ViewSubCodedResult, {\n        selectedRecord: this.state.selectedsubcoderesult || {},\n        selectedsubcoderesult: this.props.Login.selectedsubcoderesult || [],\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1050,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === \"IDS_PROFILETREE\" ? /*#__PURE__*/React.createElement(AddProfileTree, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        treetempTranstestGroup: this.props.Login.TreetempTranstestGroup,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1059,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === \"IDS_SPECFILE\" ? /*#__PURE__*/React.createElement(AddFile, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        actionType: this.state.actionType,\n        onDrop: this.onDropSpecFile,\n        deleteAttachment: this.deleteAttachment,\n        linkMaster: this.props.Login.linkMaster,\n        editFiles: this.props.Login.editFiles,\n        maxSize: 20,\n        maxFiles: this.props.Login.operation === \"update\" ? 1 : 1,\n        multiple: this.props.Login.operation === \"update\" ? false : true,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_SPECFILE\"\n        }),\n        hideDefaultToggle: true,\n        name: \"specfilename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1065,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === \"IDS_EDITTREE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1081,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1082,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: \"sleveldescription\",\n        label: this.state.selectedRecord.slabelname,\n        type: \"text\",\n        onChange: event => this.onInputOnChange(event, 1),\n        placeholder: this.state.selectedRecord.slabelname,\n        value: this.state.selectedRecord ? this.state.selectedRecord[\"sleveldescription\"] : \"\",\n        isMandatory: \"*\",\n        required: true,\n        maxLength: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1083,\n          columnNumber: 57\n        }\n      }))) : this.props.Login.screenName === \"IDS_TEST\" ? /*#__PURE__*/React.createElement(AddTestGroupTest, {\n        genericLabel: this.props.Login.genericLabel,\n        userInfo: this.props.Login.userInfo,\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        screenName: this.props.Login.screenName,\n        onComboChange: this.onComboChange,\n        onFilterComboChange: this.onFilterComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1097,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? /*#__PURE__*/React.createElement(EditTestGroupTest, {\n        hideQualisForms: this.props.Login.hideQualisForms,\n        selectedRecord: this.state.selectedRecord || {},\n        testGroupInputData: this.props.Login.testGroupInputData,\n        onComboChange: this.onComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onNumericInputChange: this.onNumericInputChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1106,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === \"IDS_VIEWRULE\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1114,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1115,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(OrgTree, {\n        data: this.ruleflowobject(),\n        horizontal: true,\n        collapsable: true,\n        expandAll: true,\n        labelClassName: \"ruletree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1116,\n          columnNumber: 69\n        }\n      }))) : this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1127,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1128,\n          columnNumber: 65\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine && /*#__PURE__*/React.createElement(CustomTab, {\n        tabDetail: this.tabDetailRulesEngine(),\n        onTabChange: this.onTabChangeRulesEngine,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1130,\n          columnNumber: 65\n        }\n      }))) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 21\n      }\n    }), this.props.Login.openPortalModal && /*#__PURE__*/React.createElement(PortalModalSlideout, {\n      show: this.props.Login.openPortalModal,\n      closeModal: this.closePortalModal,\n      screenName: this.props.intl.formatMessage({\n        id: this.props.Login.screenName\n      }) + \" - \" + this.props.Login.masterData.SelectedTest.stestsynonym,\n      handleSaveClick: this.save,\n      addComponent: (this.props.Login.operation === 'update' ? this.state.selectedRecord['groupList'] : true) && /*#__PURE__*/React.createElement(AddTestGroupRule, {\n        productCategoryList: this.state.ProductCategoryList || [],\n        selectedRecord: this.state.selectedRecord || {},\n        databaseTableList: this.props.Login.databaseTableList,\n        tableColumnList: this.state.tableColumnList,\n        specificationOptions: this.state.TestGroupSpecificationList || [],\n        componentOptions: this.state.ComponentList || [],\n        foreignTableList: this.state.foreignTableList || [],\n        foreignTableColumnList: this.props.Login.foreignTableColumnList || [],\n        count: this.state.count,\n        foreignTableCount: this.state.foreignTableCount,\n        sqlQuery: this.state.sqlQuery,\n        userInfo: this.props.Login.userInfo,\n        onInputChange: this.onInputChange,\n        deleteRule: this.deleteRule,\n        clearRule: this.clearRule,\n        resetRule: this.resetRule,\n        onSymbolChange: this.onSymbolChange,\n        onRuleChange: this.onRuleChange,\n        addRule: this.addRule,\n        addTest: this.addTest,\n        onConditionClick: this.onConditionClick,\n        onMasterDataChange: this.onMasterDataChange,\n        databaseviewList: this.props.Login.databaseviewList,\n        addRuleList: this.props.Login.addRuleList || [],\n        rulesOption: this.props.Login.masterData.rulesOption && this.props.Login.masterData.rulesOption.filter(this.outComeTestsRemoveFromRules),\n        masterdata: this.props.Login.masterdata,\n        switchRecord: this.state.switchRecord,\n        data: this.state.data,\n        dataResult: this.state.dataResult || [],\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        gridColumnList: this.props.Login.gridColumnList || [],\n        queryType: this.state.queryType,\n        addAggregateList: this.props.Login.addAggregateList || [],\n        addOrderbyList: this.props.Login.addOrderbyList || [],\n        addGroup: this.addGroup,\n        addGroupList: this.props.Login.addGroupList || [],\n        onFilterComboChange: this.onFilterComboChange,\n        selectFields: this.props.Login.selectFields || [],\n        SelectedProductCategory: this.props.Login.masterData.SelectedProductCategory,\n        DiagnosticCaseList: this.props.Login.masterData.DiagnosticCaseList,\n        GradeList: this.props.Login.masterData.GradeList,\n        PredefinedParameterOptions: this.props.Login.masterData.PredefinedParameterOptions,\n        siteList: this.props.Login.masterData.siteList,\n        resultTypeList: this.props.Login.masterData.resultTypeList,\n        isResultorOrderType: this.state.isResultorOrderType,\n        optionsByRule: this.state.optionsByRule || this.props.Login.masterData.DiagnosticCaseList,\n        changePropertyView: this.changePropertyView,\n        splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n        activeTabIndex: this.props.Login.activeTabIndex,\n        enablePropertyPopup: this.state.enablePropertyPopup,\n        propertyPopupWidth: this.state.propertyPopupWidth,\n        controlMap: this.state.controlMap,\n        sectionDataState: this.state.sectionDataState,\n        masterData: this.props.Login.masterData,\n        intl: this.props.intl,\n        addOutcomeList: this.props.Login.addOutcomeList && this.props.Login.addOutcomeList || [],\n        deleteOutcome: this.deleteOutcome,\n        onmodalComboChange: this.onmodalComboChange,\n        openModalPopup: this.props.Login.openModalPopup,\n        closeModalShow: this.closeModalShow,\n        modalsaveClick: this.modalsaveClick,\n        getOutcomeDetails: this.getOutcomeDetails,\n        addModalSite: this.addModalSite,\n        action: this.props.Login.action,\n        deletModalSite: this.deletModalSite,\n        deleteModalTest: this.deleteModalTest,\n        activeTestTab: this.props.Login.activeTestTab,\n        testcomments: this.props.Login.testcomments,\n        reportcomments: this.props.Login.reportcomments,\n        addComments: this.addComments,\n        CommentType: this.props.Login.CommentType,\n        CommentSubType: this.props.Login.CommentSubType,\n        isneedsgeneralcomments: this.state.isneedsgeneralcomments,\n        predefcomments: this.props.Login.predefcomments,\n        needoutsource: this.state.selectedRecord['needoutsource'] && this.state.selectedRecord['needoutsource'] === 3 ? true : false,\n        openmodalsavePopup: this.props.Login.openmodalsavePopup,\n        save: this.save,\n        dataStateObject: this.state.dataStateObject,\n        paneSizeChange: this.paneSizeChange,\n        testInitiateTestCombo: this.props.Login.testInitiateTestCombo && this.viewColumnListByRule(this.props.Login.testInitiateTestCombo),\n        testCommentsTestCombo: this.props.Login.testCommentsTestCombo && this.viewColumnListByRule(this.props.Login.testCommentsTestCombo),\n        testRepeatTestCombo: this.props.Login.testRepeatTestCombo && this.viewColumnListByRule(this.props.Login.testRepeatTestCombo),\n        testenforceTestCombo: this.props.Login.testenforceTestCombo && this.props.Login.testenforceTestCombo,\n        dataStateChangetestRepeat: this.dataStateChangetestRepeat,\n        dataStateChangetestEnforce: this.dataStateChangetestEnforce,\n        dataStatetestEnforce: this.state.dataStatetestEnforce,\n        dataStatetestRepeat: this.state.dataStatetestRepeat,\n        testGroupTestParameterRulesEngine: this.props.Login.masterData.testGroupTestParameterRulesEngine || [],\n        ParameterRulesEngine: this.props.Login.masterData.ParameterRulesEngine || [],\n        onRuleInputChange: this.onRuleInputChange,\n        onRuleNumericInputOnChange: this.onRuleNumericInputOnChange,\n        onResultInputChange: this.onResultInputChange,\n        PredefinedValues: this.props.Login.masterData.PredefinedValues || {},\n        onGradeEvent: this.onGradeEvent,\n        deletetestparameter: this.deletetestparameter,\n        gradeValues: this.props.Login.masterData.GradeValues || [],\n        modalParameterPopup: this.props.Login.modalParameterPopup || false,\n        addParameter: this.addParameter,\n        onInputSwitchOnChange: this.onInputSwitchOnChange,\n        onInputSwitchChange: this.onInputSwitchChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1146,\n          columnNumber: 29\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  findMandatoryFields(screenName, selectedRecord) {\n    let mandyFields = [];\n\n    if (screenName === \"IDS_SPECFILE\") {\n      if (selectedRecord && selectedRecord.nattachmenttypecode === attachmentType.LINK) {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILENAME\",\n          \"dataField\": \"slinkfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }, {\n          \"idsName\": \"IDS_LINKNAME\",\n          \"dataField\": \"nlinkcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }];\n      } else {\n        //if (this.props.Login.operation === 'update') {\n        mandyFields = [{\n          \"idsName\": \"IDS_FILE\",\n          \"dataField\": \"sfilename\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_CHOOSE\",\n          \"controlType\": \"file\"\n        }]; // }\n      }\n    } else {\n      return [];\n    }\n\n    let finalMandyFields = [];\n    mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\n    return finalMandyFields;\n  }\n\n  showSpecAndTestInfo() {\n    this.setState({\n      showTest: !this.state.showTest,\n      testView: false\n    });\n    this.updateSpiltterLayout();\n  }\n\n  showSpecAndTestInfo1() {\n    this.setState({\n      showTest: !this.state.showTest,\n      testView: true\n    }); //this.updateSpiltterLayout()\n  }\n\n  //Rules Engine Functions Start\n  ruleflowobject() {\n    let object = {}; //const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\n    //const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\n    // const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\n\n    let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata'];\n    let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] && this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins'];\n    let children = [];\n    let parent = [];\n    let grandparent = [];\n    groupList.map((groupobject, index) => {\n      if (groupobject.hasOwnProperty('button_or')) {\n        children = [];\n        let rulesList = groupobject['button_or'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n\n        if (groupList.length === 1 ? rulesList.length > 1 : true) {\n          parent.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              className: \"btn btn-primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1687,\n                columnNumber: 50\n              }\n            }, this.props.intl.formatMessage({\n              id: \"IDS_OR\"\n            })),\n            children: children\n          });\n        }\n      }\n\n      if (groupobject.hasOwnProperty('button_and')) {\n        children = [];\n        let rulesList = groupobject['button_and'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n\n        if (groupList.length === 1 ? rulesList.length > 1 : true) {\n          parent.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              className: \"btn btn-primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1712,\n                columnNumber: 49\n              }\n            }, this.props.intl.formatMessage({\n              id: \"IDS_AND\"\n            })),\n            children: children\n          });\n        }\n      }\n\n      if (groupobject.hasOwnProperty('button_not_button_and')) {\n        children = [];\n        let rulesList = groupobject['button_not_button_and'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n        let notarray = [{\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1732,\n              columnNumber: 53\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_AND\"\n          })),\n          children: children\n        }];\n\n        if (groupList.length === 1 ? rulesList.length > 1 : true) {\n          parent.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              className: \"btn btn-primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1734,\n                columnNumber: 49\n              }\n            }, this.props.intl.formatMessage({\n              id: \"IDS_NOT\"\n            })),\n            children: notarray\n          });\n        }\n      }\n\n      if (groupobject.hasOwnProperty('button_not_button_or')) {\n        children = [];\n        let rulesList = groupobject['button_not_button_or'];\n        rulesList.map((rule, index) => {\n          children.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(React.Fragment, null, rule['stestname'].label + \" -> \" + rule['orderresulttype'].label + \" -> \" + rule['ssymbolname'].label + \" -> \" + (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label || rule['ngradecode'] && rule['ngradecode'].label || rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'] || rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] || rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\n          });\n        });\n        let notarray = [{\n          id: index,\n          label: /*#__PURE__*/React.createElement(\"div\", {\n            className: \"btn btn-primary\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1754,\n              columnNumber: 53\n            }\n          }, this.props.intl.formatMessage({\n            id: \"IDS_OR\"\n          })),\n          children: children\n        }];\n\n        if (groupList.length === 1 ? rulesList.length > 1 : true) {\n          parent.push({\n            id: index,\n            label: /*#__PURE__*/React.createElement(\"div\", {\n              className: \"btn btn-primary\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1756,\n                columnNumber: 49\n              }\n            }, this.props.intl.formatMessage({\n              id: \"IDS_NOT\"\n            })),\n            children: notarray\n          });\n        }\n      }\n    });\n\n    if (groupListJoins !== undefined) {\n      groupListJoins.map((join, index) => {\n        let parentjoins = [];\n\n        if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\n          let notarray = [];\n          parentjoins.push(parent[index]);\n          parentjoins.push(parent[index + 1]);\n\n          if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\n            notarray = [{\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1770,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_OR\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            }];\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1775,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_NOT\"\n              }), \" \") // 'button_or'\n              ,\n              children: notarray\n            });\n          } else {\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1782,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_OR\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            });\n          }\n        }\n\n        if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\n          let notarray = [];\n          parentjoins.push(parent[index]);\n          parentjoins.push(parent[index + 1]);\n\n          if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\n            notarray = [{\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1794,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_AND\"\n              }), \" \") // 'button_or'\n              ,\n              children: parentjoins\n            }];\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1799,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_NOT\"\n              }), \" \") // 'button_or'\n              ,\n              children: notarray\n            });\n          } else {\n            grandparent.push({\n              id: index,\n              label: /*#__PURE__*/React.createElement(\"div\", {\n                className: \"btn btn-primary\",\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 1806,\n                  columnNumber: 47\n                }\n              }, this.props.intl.formatMessage({\n                id: \"IDS_AND\"\n              })) // 'button_and'\n              ,\n              children: parentjoins\n            });\n          }\n        }\n      });\n    }\n\n    object = grandparent.length > 0 ? {\n      id: 0,\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1817,\n          columnNumber: 24\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine.srulename, \" \"),\n      children: grandparent\n    } : {\n      id: 0,\n      label: /*#__PURE__*/React.createElement(\"div\", {\n        className: \"btn btn-primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1822,\n          columnNumber: 24\n        }\n      }, this.props.Login.masterData.SelectedRulesEngine.srulename, \" \"),\n      children: parent.length !== 0 ? parent : children\n    };\n    return object;\n  }\n\n  handleClickDelete(masterData, ncontrolcode //, modalName\n  ) {\n    const fieldArray = [];\n    const inputParam = {\n      methodUrl: \"TestGroupRulesEngine\",\n      classUrl: \"testgrouprulesengine\",\n      inputData: {\n        \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\n        \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\n        \"userinfo\": this.props.Login.userInfo,\n        \"selectedValueForAudit\": {\n          sproductcatname: this.state.filterData.nproductcatcode && this.state.filterData.nproductcatcode.label || 'NA',\n          sproductname: this.state.filterData.nproductcode && this.state.filterData.nproductcode.label || 'NA',\n          sspecname: this.props.Login.masterData.SelectedSpecification.sspecname || 'NA',\n          scomponentname: this.props.Login.masterData.SelectedComponent.scomponentname || 'NA',\n          stestsynonym: this.props.Login.masterData.SelectedTest.stestsynonym || 'NA',\n          sleveldescription: this.props.Login.masterData.selectedNode.sleveldescription || 'NA',\n          srulename: this.props.Login.masterData.SelectedRulesEngine.srulename\n        }\n      },\n      operation: \"delete\",\n      //postParam,\n      displayName: \"RulesEngine\"\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          // [modalName]: true,\n          operation: 'delete',\n          screenName: \"IDS_RULESENGINE\",\n          id: \"RulesEngine\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.crudMaster(inputParam, masterData, undefined);\n    }\n  }\n\n  approveVersion(masterData, nflag, ncontrolcode //, modalName\n  ) {\n    if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\n      const fieldArray = [];\n      const inputParam = {\n        methodUrl: \"TestGroupRulesEngine\",\n        classUrl: \"testgrouprulesengine\",\n        inputData: {\n          \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\n          \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\n          \"userinfo\": this.props.Login.userInfo,\n          nflag: nflag,\n          \"selectedValueForAudit\": {\n            sproductcatname: this.state.filterData.nproductcatcode && this.state.filterData.nproductcatcode.label || 'NA',\n            sproductname: this.state.filterData.nproductcode && this.state.filterData.nproductcode.label || 'NA',\n            sspecname: this.props.Login.masterData.SelectedSpecification.sspecname || 'NA',\n            scomponentname: this.props.Login.masterData.SelectedComponent.scomponentname || 'NA',\n            stestsynonym: this.props.Login.masterData.SelectedTest.stestsynonym || 'NA',\n            sleveldescription: this.props.Login.masterData.selectedNode.sleveldescription || 'NA',\n            srulename: this.props.Login.masterData.SelectedRulesEngine.srulename\n          }\n        },\n        operation: \"approve\",\n        //postParam,\n        displayName: \"RulesEngine\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            // [modalName]: true,\n            operation: 'approve',\n            screenName: \"IDS_RULESENGINE\",\n            id: \"RulesEngine\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, undefined);\n      }\n    } else {\n      if (nflag == 1) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETOAPPROVE\"\n        }));\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRULETORETIRE\"\n        }));\n      }\n    }\n  }\n\n  clearSelectedRule(selectedRecord, index) {\n    selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\n    selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\n    selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\n    selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\n    selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\n    selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\n    selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\n  }\n\n  //ALPD-3418\n  TestGroupMorefields(testMoreFields) {\n    testMoreFields = this.props.Login.hideQualisForms && this.props.Login.hideQualisForms.findIndex(item => item.nformcode === formCode.TESTPACKAGE) === -1 ? testMoreFields : testMoreFields = testMoreFields && testMoreFields.filter(item => {\n      return item[1] !== 'IDS_TESTPACKAGE';\n    });\n    return testMoreFields;\n  }\n\n  generateBreadCrumData(filterData) {\n    if (filterData && Object.values(filterData).length > 0 && filterData.nsampletypecode && filterData.nsampletypecode.item) {\n      // if (filterData.nsampletypecode && filterData.nproductcatcode \n      //     && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES \n      //     && filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.NO) \n      if (filterData.nsampletypecode && filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.YES ? true : filterData.nproductcatcode && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? true : false) {\n        this.breadCrumbData = [{\n          \"label\": \"IDS_SAMPLETYPE\",\n          \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\n          \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\n        }, {\n          \"label\": \"IDS_TREETEMPLATEVERSION\",\n          \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\n        }];\n\n        if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE) {\n          if (filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\n            this.breadCrumbData.push({\n              \"label\": \"IDS_PROJECTTYPE\",\n              \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\n            }, {\n              \"label\": \"IDS_PROJECT\",\n              \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\n            });\n          }\n        }\n      } else {\n        this.breadCrumbData = [{\n          \"label\": \"IDS_SAMPLETYPE\",\n          \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\n          \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\n        }, {\n          \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? this.props.Login.genericLabel && this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] : filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" : filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : \"\",\n          \"value\": filterData.nproductcode ? filterData.nproductcode.label : \"\"\n        }, {\n          \"label\": \"IDS_TREETEMPLATEVERSION\",\n          \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\n        }];\n\n        if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE) {\n          if (filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\n            this.breadCrumbData.push({\n              \"label\": \"IDS_PROJECTTYPE\",\n              \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\n            }, {\n              \"label\": \"IDS_PROJECT\",\n              \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\n            });\n          }\n        }\n      }\n    } else {\n      this.breadCrumbData = [{\n        \"label\": \"IDS_SAMPLETYPE\",\n        \"value\": filterData && filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\n      }];\n    }\n  }\n\n  updateSpiltterLayout() {\n    if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\n      this.setState({\n        fixefScrollHeight: this.myRef.current.clientHeight + 20,\n        disableSplit: true\n      }); //console.log(this.myRef.current.clientHeight)\n\n      setTimeout(() => {\n        this.setState({\n          disableSplit: false\n        });\n      });\n    }\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    let selectedRecord = this.state.selectedRecord;\n    let selectedsubcodedresult = this.state.selectedsubcodedresult;\n    let selectsubcodedelete = this.state.selectsubcodedelete;\n    let filterData = this.state.filterData || {};\n    let isStateChanged = false;\n    let activeTabIndex = this.props.Login.activeTabIndex || 0;\n    let activeTabId = this.props.Login.activeTabId || false;\n    let selectedRecordCopy = this.props.Login.masterData.selectedRecordCopy; //let CopyActiveKey = this.state.selectedRecord && this.state.selectedRecord.CopyActiveKey ? this.state.selectedRecord.CopyActiveKey:\"\";\n    //let CopyFocusKey =  this.state.selectedRecord && this.state.selectedRecord.CopyFocusKey ? this.state.selectedRecord.CopyFocusKey:\"\";\n\n    this.updateSpiltterLayout();\n    let tempFilterData = this.state.tempFilterData || {};\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord; // if(CopyActiveKey!==\"\")\n      // {\n      // selectedRecord.CopyActiveKey=CopyActiveKey;\n      // selectedRecord.CopyFocusKey=CopyFocusKey;\n      // }\n\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.selectedsubcodedresult !== previousProps.Login.selectedsubcodedresult) {\n      selectedsubcodedresult = this.props.Login.selectedsubcodedresult; //selectedsubcodedresult = this.state.selectedsubcodedresult;\n\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.selectsubcodedelete !== previousProps.Login.selectsubcodedelete) {\n      selectsubcodedelete = this.props.Login.selectsubcodedelete; //selectedsubcodedresult = this.state.selectedsubcodedresult;\n\n      isStateChanged = true;\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n        activeTabIndex = this.props.Login.activeTabIndex;\n        activeTabId = this.props.Login.activeTabId;\n        isStateChanged = true; // this.setState({\n        //     activeTabIndex,\n        //     activeTabId\n        // });\n      }\n    }\n\n    if (this.props.Login.tempFilterData !== previousProps.Login.tempFilterData) {\n      tempFilterData = this.props.Login.tempFilterData || {};\n      isStateChanged = true;\n    }\n\n    let sampleType = this.state.sampleType || [];\n\n    if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\n      const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\n      sampleType = sampleTypeMap.get(\"OptionList\");\n      tempFilterData[\"nsampletypecode\"] = sampleType.length ? sampleType[0] : \"\";\n      isStateChanged = true;\n    }\n\n    let productCategory = this.state.productCategory || [];\n\n    if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\n      const productCatMap = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", \"nproductcatcode\", \"ascending\", false);\n      productCategory = productCatMap.get(\"OptionList\");\n      tempFilterData[\"nproductcatcode\"] = productCategory.length > 0 ? productCategory[0] : \"\";\n      isStateChanged = true;\n    }\n\n    let product = this.state.product || [];\n\n    if (this.props.Login.masterData.Product !== previousProps.Login.masterData.Product) {\n      const productMap = constructOptionList(this.props.Login.masterData.Product || [], \"nproductcode\", \"sproductname\", \"nproductcode\", \"ascending\", false);\n      product = productMap.get(\"OptionList\");\n      tempFilterData[\"nproductcode\"] = product.length > 0 ? product[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let projectType = this.state.projectType || [];\n\n    if (this.props.Login.masterData.ProjectTypeList !== previousProps.Login.masterData.ProjectTypeList) {\n      const projectTypeMap = constructOptionList(this.props.Login.masterData.ProjectTypeList || [], \"nprojecttypecode\", \"sprojecttypename\", \"nprojecttypecode\", \"ascending\", false);\n      projectType = projectTypeMap.get(\"OptionList\");\n      tempFilterData[\"nprojecttypecode\"] = projectType.length > 0 ? projectType[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let project = this.state.project || [];\n\n    if (this.props.Login.masterData.ProjectMasterList !== previousProps.Login.masterData.ProjectMasterList) {\n      const projectMasterMap = constructOptionList(this.props.Login.masterData.ProjectMasterList || [], \"nprojectmastercode\", \"sprojectcode\", \"nprojectmastercode\", \"ascending\", false);\n      project = projectMasterMap.get(\"OptionList\");\n      tempFilterData[\"nprojectmastercode\"] = project.length > 0 ? project[0] : undefined;\n      isStateChanged = true;\n    }\n\n    let treeVersionTemplate = this.state.treeVersionTemplate || [];\n\n    if (this.props.Login.masterData.TreeVersionTemplate !== previousProps.Login.masterData.TreeVersionTemplate) {\n      const templateMap = constructOptionList(this.props.Login.masterData.TreeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", \"ntreeversiontempcode\", \"ascending\", false);\n      treeVersionTemplate = templateMap.get(\"OptionList\");\n      tempFilterData[\"ntreeversiontempcode\"] = treeVersionTemplate.length > 0 ? treeVersionTemplate[treeVersionTemplate.length - 1] : \"\";\n      isStateChanged = true;\n    } // if (this.props.Login.masterData.TestGroupTestParameter && this.props.Login.masterData.TestGroupTestParameter !== previousProps.Login.masterData.TestGroupTestParameter) {\n    //     sortData(this.props.Login.masterData.TestGroupTestParameter, \"ascending\", \"nsorter\");\n    // }\n    // if (this.props.Login.masterData.TestGroupTesT && this.props.Login.masterData.TestGroupTesT !== previousProps.Login.masterData.TestGroupTesT) {\n    //     sortData(this.props.Login.masterData.TestGroupTesTest, \"ascending\", \"nsorter\");\n    // }\n\n\n    let userRoleControlRights = this.state.userRoleControlRights || [];\n    let controlMap = this.state.controlMap || [];\n\n    if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const nformCode = this.props.Login.userInfo.nformcode;\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\n      filterData = { ...tempFilterData\n      };\n      this.generateBreadCrumData(filterData);\n    }\n\n    if (this.props.Login.filterData !== previousProps.Login.filterData) {\n      filterData = { ...this.props.Login.filterData\n      };\n      this.generateBreadCrumData(filterData);\n      isStateChanged = true;\n    } else {\n      this.generateBreadCrumData(filterData);\n    } // else if (filterData !== previousState.filterData) {\n    //     filterData = { ...tempFilterData };\n    //     this.generateBreadCrumData(filterData);\n    // }\n\n\n    let historyDataState = this.state.historyDataState;\n\n    if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n      historyDataState = this.props.Login.historyDataState;\n      isStateChanged = true;\n    }\n\n    let {\n      testskip,\n      testtake\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = testtake ? testtake : this.props.Login.testtake;\n      isStateChanged = true;\n    }\n\n    let {\n      skipRulesEngine,\n      takeRulesEngine\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      skipRulesEngine = this.props.Login.skipRulesEngine === undefined ? skipRulesEngine : this.props.Login.skipRulesEngine;\n      takeRulesEngine = takeRulesEngine ? takeRulesEngine : this.props.Login.takeRulesEngine;\n      isStateChanged = true;\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        selectedRecord,\n        selectedRecordCopy,\n        tempFilterData,\n        filterData,\n        userRoleControlRights,\n        controlMap,\n        sampleType,\n        productCategory,\n        product,\n        treeVersionTemplate,\n        historyDataState,\n        testskip,\n        testtake,\n        projectType,\n        project,\n        activeTabIndex,\n        activeTabId,\n        skipRulesEngine,\n        takeRulesEngine,\n        selectedsubcodedresult,\n        selectsubcodedelete\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  filterTestGroup,\n  createTree,\n  editTree,\n  sampleTypeOnChange,\n  getTestGroupDetails,\n  validateEsignCredential,\n  updateStore,\n  addSpecification,\n  getSpecification,\n  addComponent,\n  changeTestCategory,\n  addTestGroupTest,\n  editTestGroupTest,\n  getTestGroupParameter,\n  editTestGroupParameter,\n  addTestFile,\n  editSpecFile,\n  getSpecificationDetails,\n  addTestGroupCodedResult,\n  getComponentBySpecId,\n  filterColumnData,\n  viewAttachment,\n  viewTestGroupCheckList,\n  getTestGroupComponentDetails,\n  filterTransactionList,\n  reportSpecification,\n  retireSpecification,\n  getDataForTestMaterial,\n  getEditTestGroupRulesEngine,\n  getMaterialCategoryBasedMaterialType,\n  getMaterialBasedMaterialCategory,\n  getTestGroupMaterial,\n  getDataForEditTestMaterial,\n  addTestGroupNumericTab,\n  getTestGroupRulesEngineAdd,\n  getSelectedTestGroupRulesEngine,\n  getParameterforEnforce,\n  getParameterRulesEngine,\n  getParameterResultValue,\n  subCodedResultView,\n  saveExecutionOrder,\n  getPredefinedDataRulesEngine,\n  getCopyValues,\n  generateControlBasedReport,\n  getSpecDetailsForCopy,\n  getSpecificationComboServices,\n  getComponentComboServices,\n  getRulesTestComboServices,\n  getProductComboServices,\n  getProfileRootComboServices\n})(injectIntl(TestGroup));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/testgroup/TestGroup.jsx"],"names":["React","Component","connect","injectIntl","rsapi","toast","Row","Col","Card","Button","Nav","PerfectScrollbar","FontAwesomeIcon","faPencilAlt","faPlus","SplitterLayout","faEye","faTrashAlt","process","DataGrid","OrgTree","SlideOutModal","Esign","callService","crudMaster","filterTestGroup","createTree","editTree","getTestGroupDetails","sampleTypeOnChange","validateEsignCredential","updateStore","addSpecification","getSpecification","addComponent","changeTestCategory","addTestGroupTest","editTestGroupTest","getTestGroupParameter","editTestGroupParameter","addTestFile","editSpecFile","getSpecificationDetails","addTestGroupCodedResult","getComponentBySpecId","filterColumnData","viewAttachment","viewTestGroupCheckList","getTestGroupComponentDetails","filterTransactionList","reportSpecification","retireSpecification","getDataForTestMaterial","getMaterialCategoryBasedMaterialType","getMaterialBasedMaterialCategory","getTestGroupMaterial","getDataForEditTestMaterial","addTestGroupNumericTab","getTestGroupRulesEngineAdd","getEditTestGroupRulesEngine","getSelectedTestGroupRulesEngine","getParameterforEnforce","getParameterRulesEngine","getParameterResultValue","subCodedResultView","saveExecutionOrder","getPredefinedDataRulesEngine","getCopyValues","generateControlBasedReport","getSpecDetailsForCopy","getSpecificationComboServices","getComponentComboServices","getRulesTestComboServices","getProductComboServices","getProfileRootComboServices","constructOptionList","formatInputDate","create_UUID","deleteAttachmentDropZone","filterRecordBasedOnTwoArrays","getControlMap","onDropAttachFileList","showEsign","sortData","Lims_JSON_stringify","replaceBackSlash","TestGroupTestTab","AddTestGroupSpecification","DEFAULT_RETURN","transactionStatus","REPORTTYPE","attachmentType","formCode","designProperties","parameterType","SampleType","MaterialType","ResultEntry","AddTestGroupTest","AddProfileTree","SampleFilter","AddFile","AdvFilter","SpecificationHistory","TestGroupSpecFile","SpecificationInfo","CustomTab","TransationListMaster","FormTreeMenu","FormInput","ConfirmMessage","BreadcrumbComponent","testMoreFields","testSubFields","searchFieldList","specificationColumnList","addTestColumnList","editTestColumnList","specificationCopyColumnList","EditTestGroupTest","ContentPanel","SearchAdd","ListWrapper","ProductList","TransactionListMasterJsonView","PortalModalSlideout","AddTestGroupRule","ViewSubCodedResult","numberConversion","numericGrade","ResultEntryPredefinedComments","ModalShow","TestGroup","constructor","props","reloadData","filterData","Login","state","nsampletypecode","undefined","warn","intl","formatMessage","id","nproductcatcode","item","nformcode","PRODUCTCATEGORY","INSTRUMENTCATEGORY","MATERIALCATEGORY","nproductcode","ncategorybasedflow","NO","ncategorybasedflowrequired","ntreeversiontempcode","inputParam","inputData","userinfo","userInfo","YES","value","nprojectmastercode","historyDataState","masterData","searchRef","ConfirmDelete","obj","confirmMessage","confirm","deleteRecord","handlePageChange","event","setState","testskip","skip","testtake","take","viewTestFile","viewParam","operation","methodUrl","classUrl","ntestgroupfilecode","selectedTest","testgroupspecification","SelectedSpecification","ntestgrouptestcode","fileViewIcon","master","nlinkcode","NA","linkViewIcon","onFilterSumbit","tempFilterData","PROJECTSAMPLETYPE","nprojectspecrequired","onCopyTreeClick","selectedCopyNodeManipulationCode","selectedCopyProfileName","CopyFocusKey","CopyActiveKey","selectedRecord","onTreeClick","screenName","keyName","activeKey","key","focusKey","primaryKey","tabDetail","tabMap","Map","set","controlMap","userRoleControlRights","addFile","defaultRecord","settings","TestGroupSpecificationHistory","historyDataStateChange","dataResult","dataState","specDataStateChange","TestGroupTestClinicalSpec","clinicalspecDataState","ncontrolCode","modalName","nflag","treeVersionTemplateIndex","findIndex","x","selectedNode","templateVersionStatus","ntransactionstatus","RETIRED","napprovalstatus","DRAFT","CORRECTION","onTabChange","tabProps","updateInfo","typeName","data","componentRowClick","testgroupspecsampletype","deleteTest","deleteParam","testgrouptest","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","fetchUrl","fecthInputObject","unchangeList","loadEsign","screenData","openModal","closeModal","selectedRecordCopy","CopyOpenNodes","onInputOnChange","caseNo","optional","target","type","name","checked","indexKey","Object","keys","values","treeData","npositioncode","nlevelno","sleveldescription","ntemptranstestgroupcode","schildnode","nnextchildcode","ntemplatemanipulationcode","isreadonly","slevelformat","treetemplatemanipulation","onEsignInputOnChange","onTabChangeRulesEngine","activeTabName","tabDetailRulesEngine","jsonuidata","SelectedRulesEngine","handleExpandChange","dataStatetestinitiate","dataStateChangetestinitiateTab","childListMap","title","controlname","hidden","objectName","onClick","viewParameter","dataStateChange","childListMap2","dataStaterepeatTab","dataStateChangeRepeatTab","dataStateChangenforceTab","ntestgrouptestparametercode","dataStateObject","dataStateChangetestRepeat","dataStatetestRepeat","dataStateChangetestEnforce","dataStatetestEnforce","dataStateChangeViewParameter","dataStateChangeMain","dataResultMain","queryDataMain","dataStateMain","ConfirmDeleteRule","deleteId","length","handleClickDelete","closeModalShow","openModalPopup","modalParameterPopup","onModalSavePredefAlert","currentAlertResultCode","currentntestgrouptestpredefcode","bool","ParameterRulesEngine","some","map","Parameter","ntestgrouptestpredefsubcode","label","join","substring","showAlertGrid","closeModalShowPredefAlert","onsavevalidation","grouplist","hasAll","i","rules","j","PREDEFINED","CHARACTER","NUMERIC","every","prop","hasOwnProperty","save","siteObject","testCommentObject","reportCommentObject","PredefinedParameterOptions","testInitiateTests","testCommentsTests","reportCommentsTests","testRepeatTests","testenforceTests","testsInvolvedInRules","testsNameInvolvedInRules","action","groupList","outcomeList","addGroupList","testInitiateSiteTab","testCommentsTestsTab","reportCommentsTestsTab","SelectedTest","ruleEngineLayout","ruleEngineLayoutObject","groupRuleObject","List","push","stestname","JSON","stringify","sproductcatname","sproductname","sspecname","scomponentname","SelectedComponent","stestsynonym","srulename","displayName","info","openmodalsavePopup","onOutcomeChange","comboData","index","writtenRules","activeTabIndex","boolean","y","selectedTestRemove","outComeTestsRemoveFromRules","addTest","tabName","rulesOption","testInitiateTestCombo","testCommentsTestCombo","testRepeatTestCombo","testenforceTestCombo","filter","selectedTestTempArray","duplicatePresent","onRuleChange","fieldName","groupIndex","clearSelectedRule","nparametertypecode","onRuleInputChange","onRuleNumericInputOnChange","onMasterDataChange","isResultorOrderType","optionsByRule","DiagnosticCaseList","GradeList","addRule","viewColumnListByRule","arrayLength","viewColumnList","databaseviewList","paneSizeChange","d","splitChangeWidthPercentage","addComments","selectedParameterRulesEngine","testparameter","addModalSite","onGradeEvent","parameterResults","parameter","sresult","selectedResultGrade","ngradecode","parseFloat","parseInt","nroundingdigits","trim","onInputSwitchOnChange","enablePropertyPopup","enableAutoClick","addParameter","isServiceNeed","deletetestparameter","deleteparameter","test","parameters","tempparameters","param","removeIndex","splice","modalsaveClick","needoutsource","testInitiateTestsTemp","testCommentsTestsTemp","reportCommentsTestsTemp","testInitiateSiteTemp","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","testInitiateTestdeletedOptions","testCommentsTestdeletedOptions","reportCommentsTestdeletedOptions","npkAtestparametercode","npkBtestparametercode","npkCtestparametercode","npkDtestparametercode","isduplicate","Math","max","object","selectedntestgrouptestcode","slNo","resultData","salertmessage","RESULTSTATUS_FIO","GradeValues","concat","npKAsampletestcommentscode","nslno","ncommentsubtypecode","scommentsubtype","ncommenttypecode","scommenttype","nsampletestcommentscode","spredefinedname","scomments","sdescription","stestparametersynonym","commentsArrayIndex","siteseqnumber","isalreadyExist","nfromsitecode","ntositecode","npksitecode","sfromsitename","stositename","deletModalSite","inputparam","row","temparray","testRepeat","deleteModalTest","testRepeatTestsTab","testenforceTestsTab","testParameter","testParameterComments","onmodalComboChange","isneedsgeneralcomments","getSpecificationTestGroupRulesEngine","getComponentTestGroupRulesEngine","onResultInputChange","sfinal","sresultpredefinedname","sresultcomment","sgradename","acceptedFile","ncalculatedresult","ntestgrouptestpredefcode","spredefinedsynonym","spredefinedcomments","nneedresultentryalert","nneedsubcodedresult","ATTACHMENT","getOutcomeDetails","testParameterreportComments","showParameterGrid","childListMap1","childListMap3","keylst","viewOutcome","forEach","openflowview","handlePageChangeRuleEngine","skipRulesEngine","takeRulesEngine","addGroup","selectFields","addRuleList","addAggregateList","addOrderbyList","closePortalModal","openPortalModal","count","changePropertyView","status","activeTabId","activeTestTab","window","innerWidth","testEnforceTests","deleteRule","deleteOutcome","addOutcomeList","clearRule","sviewname","sqlQuery","resetRule","onSymbolChange","oldSelectedRecord","onInputChange","onInputSwitchChange","testcode","activeValue","list","dynamicList","onConditionClick","isgroup","changePropertyViewClose","onFilterComboChange","sampletype","productcategory","product","project","TestGroupSpecSampleType","testGroupInputData","testGroupSpecSampleType","genericLabel","slanguagetypecode","testcategory","nallottedspeccode","nprojecttypecode","projecttype","handleDateChange","dateName","dateValue","Date","onNumericInputChange","onSaveClick","saveType","formRef","clearSelectedRecordField","onSaveTree","onSaveSpecification","onSaveComponent","onSaveCopySpecification","onSaveTest","onSaveSpecFile","testArray","ntestcode","nisvisible","nisadhoctest","changeList","isSingleSelect","testgrouptestfile","testGroupFile","ntestfilecode","nattachmenttypecode","ssystemfilename","dcreateddate","nfilesize","sfilename","nstatus","ACTIVE","nsectioncode","nmethodcode","ninstrumentcatcode","ncontainertypecode","ncost","nsorter","nspecsampletypecode","nrepeatcountno","ntestpackagecode","ActiveKey","TreetempTranstestGroup","tempArray","treeTemplateManip","temp","testGroupSpec","napproveconfversioncode","sversion","ncomponentrequired","dexpirydate","ntzexpirydate","stzexpirydate","selectedspecification","ncomponentcode","genericlabel","acceptedFiles","isFileEdited","specFileArray","selectedSpecification","specFile","nspecfilecode","formData","FormData","FTP","Array","isArray","file","tempData","assign","splittedFileName","split","fileExtension","uniquefilename","size","append","slinkfilename","slinkdescription","sformname","smodulename","slanguagename","isFileupload","deleteSpecRecord","componentDataState","deleteMultipleRecord","onDropSpecFile","attachedFiles","maxSize","actionType","deleteAttachment","validateTestGroupComplete","inputValue","post","then","response","inactiveTestArray","indexOf","completeSpecification","catch","error","message","retireSpec","approvalRoleActionDetail","retireSpecId","onDownloadClick","reportSpecId","Vnallottedspeccode","specificationReport","sprimarykeyname","ncontrolcode","nregtypecode","nregsubtypecode","nreportmodulecode","nreporttypecode","CONTROLBASED","nreportdecisiontypecode","certificatetypecode","selectedComponent","testGroupTest","TestGroupTest","isQualisLite","approveSpecification","needEsign","onComboChange","schecklistversionname","validateEsign","sreason","nreasoncode","spredefinedreason","password","group","field","showTest","fixefScrollHeight","outerHeight","initialVerticalWidth","testView","paneHeight","componentColumnList","componentBreadcrumbs","breadCrumbData","createRef","specSubField","VALUE","COLOUR","myRef","getDerivedStateFromProps","masterStatus","errorCode","componentDidMount","parentHeight","height","clientHeight","render","console","log","TestGroupSpecification","OpenNodes","FocusKey","searchedData","TestGroupTestParameter","AgaramTree","getComponent","addSpecParam","editSpecParam","specDeleteParam","addSpecId","has","get","addTreeId","editTreeId","deleteTreeId","editSpecId","deleteSpecId","addComponentId","deleteComponentId","addTestId","deleteTestId","editTestId","viewFileId","deleteTree","getTest","filterParam","filterParamRulesEngine","specMandatoryFields","specCopyMandatoryFields","compMandatoryFields","editTestMandatoryFields","addTestMandatoryFields","mandatory","splitNode","treeNodeNames","nodeItem","TreeTemplateManipulation","treeItem","specDesign","display","marginTop","float","marginRight","showSpecAndTestInfo1","ApprovalRoleActionDetail","testDesign","position","right","top","showSpecAndTestInfo","TestGroupMorefields","setting","needConditionalIcon","conditionalIconFunction","paramDesign","isrulesenginerequired","openChildModal","parameterData","selectedsubcodedresult","selectsubcodedelete","testGroupCheckList","openTemplateModal","materialType","materialCategoryList","materialList","masterdata","approveVersion","getProductCategory","getSpecificationList","getComponentList","getProductList","getProfileRoot","methodparam","getRulesList","mainDesign","showModalBg","sampleType","treeVersionTemplate","productCategory","projectType","needActionStrip","e","spec","nmaterialtypecode","IQCSTANDARDMATERIALTYPE","showAlertForPredefined","additionalInfoView","onlyAlertMsgAvailable","showMultiSelectCombo","testgrouptestpredefsubresultOptions","findMandatoryFields","treeMandatoryFields","timeZoneList","selectedsubcoderesult","linkMaster","editFiles","slabelname","hideQualisForms","ruleflowobject","ProductCategoryList","databaseTableList","tableColumnList","TestGroupSpecificationList","ComponentList","foreignTableList","foreignTableColumnList","foreignTableCount","switchRecord","gridColumnList","queryType","SelectedProductCategory","siteList","resultTypeList","propertyPopupWidth","sectionDataState","testcomments","reportcomments","CommentType","CommentSubType","predefcomments","testGroupTestParameterRulesEngine","PredefinedValues","mandyFields","LINK","finalMandyFields","updateSpiltterLayout","groupListJoins","children","parent","grandparent","groupobject","rulesList","rule","notarray","parentjoins","fieldArray","ntestgrouprulesenginecode","TESTPACKAGE","generateBreadCrumData","current","disableSplit","setTimeout","componentDidUpdate","previousProps","previousState","isStateChanged","sampleTypeMap","ProductCategory","productCatMap","Product","productMap","ProjectTypeList","projectTypeMap","ProjectMasterList","projectMasterMap","TreeVersionTemplate","templateMap","nformCode","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { Row, Col, Card, Button, Nav } from 'react-bootstrap';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPencilAlt, faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport { faEye, faTrashAlt } from '@fortawesome/free-regular-svg-icons';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport OrgTree from 'react-org-tree';\r\n\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport {\r\n    callService, crudMaster, filterTestGroup, createTree, editTree, getTestGroupDetails, sampleTypeOnChange,\r\n    validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent, changeTestCategory,\r\n    addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter, addTestFile,\r\n    editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData,\r\n    viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial,\r\n    getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd,\r\n    getEditTestGroupRulesEngine, getSelectedTestGroupRulesEngine, getParameterforEnforce, getParameterRulesEngine, getParameterResultValue, subCodedResultView, saveExecutionOrder, getPredefinedDataRulesEngine,getCopyValues,\r\n    generateControlBasedReport,getSpecDetailsForCopy,getSpecificationComboServices,getComponentComboServices,getRulesTestComboServices,getProductComboServices,getProfileRootComboServices\r\n} from '../../actions'\r\nimport { constructOptionList, formatInputDate, create_UUID, deleteAttachmentDropZone, filterRecordBasedOnTwoArrays, getControlMap, onDropAttachFileList, showEsign, sortData, Lims_JSON_stringify,replaceBackSlash } from '../../components/CommonScript';\r\nimport TestGroupTestTab from './TestGroupTestTab';\r\nimport AddTestGroupSpecification from './AddTestGroupSpecification';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, REPORTTYPE, attachmentType, formCode, designProperties,\r\n   // parameterType,SampleType, grade } from '../../components/Enumeration';\r\n   // parameterType,SampleType } from '../../components/Enumeration';\r\n    parameterType,SampleType,MaterialType , ResultEntry} from '../../components/Enumeration';\r\nimport AddTestGroupTest from './AddTestGroupTest';\r\nimport AddProfileTree from './AddProfileTree';\r\nimport SampleFilter from './SampleFilter';\r\nimport AddFile from '../testmanagement/AddFile';\r\nimport AdvFilter from '../../components/AdvFilter';\r\nimport SpecificationHistory from './SpecificationHistory';\r\nimport TestGroupSpecFile from './TestGroupSpecFile';\r\nimport SpecificationInfo from './SpecificationInfo';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport TransationListMaster from '../../components/TransactionListMaster';\r\n\r\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\r\n// import ConfirmDialog from '../../components/confirm-alert/confirm-alert.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\n\r\nimport {\r\n    testMoreFields, testSubFields, searchFieldList, specificationColumnList,\r\n    addTestColumnList, editTestColumnList, specificationCopyColumnList\r\n} from './TestGroupFields';\r\n\r\nimport EditTestGroupTest from './EditTestGroupTest';\r\nimport { ContentPanel, SearchAdd } from '../../components/App.styles';\r\nimport '../../pages/registration/registration.css';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { ProductList } from '../product/product.styled';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\n// import ReactTooltip from 'react-tooltip';\r\nimport PortalModalSlideout from '../../components/portal-modal/portal-modal-slideout';\r\nimport AddTestGroupRule from './AddTestGroupRule';\r\nimport ViewSubCodedResult from './ViewSubCodedResult';\r\nimport { numberConversion, numericGrade } from '../ResultEntryBySample/ResultEntryValidation';\r\nimport ResultEntryPredefinedComments from '../ResultEntryBySample/ResultEntryPredefinedComments';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\n\r\n\r\nclass TestGroup extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const componentDataState = { skip: 0, take: 10 };\r\n        const historyDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 };\r\n        const clinicalspecDataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5, group: [{ field: 'sgendername' }] };\r\n\r\n        this.state = {\r\n\r\n            selectedRecord: {},\r\n            filterData: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            componentDataState,\r\n            historyDataState,\r\n            clinicalspecDataState,\r\n            tempFilterData: {},\r\n            showTest: true,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            skipRulesEngine: 0,\r\n            takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            fixefScrollHeight: window.outerHeight - 400,\r\n            initialVerticalWidth: \"20vh\",\r\n            testView: true,\r\n            //paneHeight:'calc(100vh - ' +window.outerHeight-847 + 'px)'\r\n            paneHeight: 'calc(100vh -183px)',\r\n            // isCopySpecRender: true\r\n        }\r\n        this.componentColumnList = [{\r\n            \"idsName\":this.props.Login.genericLabel&& this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\r\n            \"dataField\": \"ncomponentcode\",\r\n            \"mandatoryLabel\": \"IDS_SELECT\",\r\n            \"mandatory\": true\r\n        },\r\n        {\r\n            \"idsName\": \"IDS_TEST\",\r\n            \"dataField\": \"ntestcode\",\r\n            \"mandatoryLabel\": \"IDS_SELECT\",\r\n            \"mandatory\": true\r\n        }\r\n    ];\r\n        this.componentBreadcrumbs = [];\r\n        this.breadCrumbData = [];\r\n        this.searchRef = React.createRef();\r\n        this.specSubField = [{ [designProperties.VALUE]: \"stransdisplaystatus\" },\r\n        { [designProperties.VALUE]: \"sapprovalstatus\", [designProperties.COLOUR]: true }];\r\n        this.myRef = React.createRef();\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n    \r\n\r\n    reloadData = () => {\r\n\r\n        const filterData = this.props.Login.filterData || this.state.filterData;\r\n        if (filterData.nsampletypecode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\" }));\r\n        }\r\n        else if (filterData.nproductcatcode === \"\") {\r\n            if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CATEGORYNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        else if (filterData.nproductcode === \"\" && (filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO)) {\r\n            if (filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY && filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO ) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTNOTAVAILABLE\" }));\r\n            } else if (filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            }\r\n        } else if (filterData.ntreeversiontempcode === \"\") {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        }\r\n        else {\r\n            const inputParam = {\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: filterData.nsampletypecode.item[\"nsampletypecode\"],\r\n                    nproductcatcode: filterData.nproductcatcode.item[\"nproductcatcode\"],\r\n                 //   nproductcode: filterData.nproductcode.item[\"nproductcode\"],\r\n                    nproductcode: filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 :\r\n                    filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : filterData.nproductcode ? filterData.nproductcode.value : -1,\r\n                    ntreeversiontempcode: filterData.ntreeversiontempcode.item[\"ntreeversiontempcode\"],\r\n                    nprojectmastercode: filterData.nprojectmastercode !== undefined ? filterData.nprojectmastercode.item[\"nprojectmastercode\"]:-1,\r\n                    filterData,//: { ...this.props.Login.filterData }\r\n                },\r\n                historyDataState: this.state.historyDataState\r\n\r\n            }\r\n            this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                parentHeight: height - 50\r\n            });\r\n        }\r\n    }\r\n    \r\n    // shouldComponentUpdate (nextProps,nextState) {  \r\n    //     if(this.props.Login.operation===\"copy\" && nextProps.Login.openModal === false && this.state.isCopySpecRender === false){\r\n    //         this.setState({ isCopySpecRender: true});\r\n    //         return true;\r\n    //     }\r\n    //     if (this.props.Login.screenName === 'IDS_SPECIFICATION'\r\n    //         &&nextState.isCopySpecRender===false\r\n    //         // &&(nextState.selectedRecord.selectedCopyNodeManipulationCode !==this.state.selectedRecord.selectedCopyNodeManipulationCode)\r\n    //         ) {\r\n    //         return false;\r\n    //       }\r\n    //       else{\r\n    //         return true;\r\n    //       }\r\n    // }\r\n    render() {\r\n        \r\n        console.log(\"Screen Name need\",this.props.Login.screenName);\r\n        const { TestGroupSpecification, SelectedSpecification, SelectedTest, OpenNodes, selectedNode, FocusKey,\r\n            ActiveKey, SelectedComponent, TestGroupTest, TestGroupSpecSampleType, searchedData,\r\n            TestGroupTestParameter, CopyOpenNodes } = this.props.Login.masterData;\r\n        // const CopyOpenNodes = this.props.Login.masterData.OpenNodes;\r\n        // const deleteTree = {\r\n        //     methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\r\n        //     userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\"\r\n        // };\r\n        if (this.props.Login.masterData && this.props.Login.masterData.AgaramTree && this.props.Login.masterData.AgaramTree.length > 0) {\r\n         this.props.Login.masterData.AgaramTree[0][\"label\"] = this.props.Login.masterData.AgaramTree[0][\"label\"] === 'root' ? \r\n         this.props.intl.formatMessage({ id: \"IDS_ROOT\" }) : this.props.Login.masterData.AgaramTree[0][\"label\"];\r\n        }\r\n        //ALPD-5173 French Lang : Test Group screen -> While select the sample type, root name is changed into English lang.\r\n       if (this.props.Login.masterData && this.props.Login.masterData.selectedRecordCopy !==undefined && this.props.Login.masterData.selectedRecordCopy &&\r\n          this.props.Login.masterData.selectedRecordCopy.AgaramTree !==undefined && this.props.Login.masterData.selectedRecordCopy.AgaramTree.length > 0) {\r\n          this.props.Login.masterData.selectedRecordCopy.AgaramTree[0][\"label\"] = this.props.Login.masterData.selectedRecordCopy.AgaramTree[0][\"label\"] === 'root' ? \r\n          this.props.intl.formatMessage({ id: \"IDS_ROOT\" }) : this.props.Login.masterData.selectedRecordCopy.AgaramTree[0][\"label\"];\r\n        }\r\n      //  const testGroupTestData = searchedData || TestGroupTest || []\r\n\r\n        if (TestGroupTestParameter) {\r\n            sortData(TestGroupTestParameter, \"ascending\", \"nsorter\");\r\n        }\r\n        // ALPD-3242 Commented sortData as tests are sorted unnecessarily everytime while clicking on the test in the tab\r\n        // if (testGroupTestData) {\r\n        //     sortData(testGroupTestData, \"descending\", \"nsorter\");\r\n        // }\r\n\r\n        const getComponent = {\r\n            screenName:this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], operation: \"get\", inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"TestGroupComponent\", keyName: \"testgroupspecification\"\r\n        };\r\n        const addSpecParam = { testgroupspecification: SelectedSpecification, selectedRecord: this.state.filterData, userInfo: this.props.Login.userInfo, selectedNode };\r\n        const editSpecParam = { selectedRecord: this.state.filterData, userinfo: this.props.Login.userInfo, selectedNode };\r\n        const specDeleteParam = { operation: \"delete\", methodUrl: \"Specification\", screenName: \"IDS_SPECIFICATION\", keyName: \"testgroupspecification\", filterData: this.state.filterData };\r\n        const addSpecId = this.state.controlMap.has(\"AddSpecification\") && this.state.controlMap.get(\"AddSpecification\").ncontrolcode;\r\n        const addTreeId = this.state.controlMap.has(\"AddTree\") && this.state.controlMap.get(\"AddTree\").ncontrolcode;\r\n        const editTreeId = this.state.controlMap.has(\"EditTree\") && this.state.controlMap.get(\"EditTree\").ncontrolcode;\r\n        const deleteTreeId = this.state.controlMap.has(\"DeleteTree\") && this.state.controlMap.get(\"DeleteTree\").ncontrolcode;\r\n        const editSpecId = this.state.controlMap.has(\"EditSpecification\") && this.state.controlMap.get(\"EditSpecification\").ncontrolcode;\r\n        const deleteSpecId = this.state.controlMap.has(\"DeleteSpecification\") && this.state.controlMap.get(\"DeleteSpecification\").ncontrolcode;\r\n        const addComponentId = this.state.controlMap.has(\"AddComponent\") && this.state.controlMap.get(\"AddComponent\").ncontrolcode;\r\n        const deleteComponentId = this.state.controlMap.has(\"DeleteComponent\") && this.state.controlMap.get(\"DeleteComponent\").ncontrolcode;\r\n        const addTestId = this.state.controlMap.has(\"AddTest\") && this.state.controlMap.get(\"AddTest\").ncontrolcode;\r\n        const deleteTestId = this.state.controlMap.has(\"DeleteTest\") && this.state.controlMap.get(\"DeleteTest\").ncontrolcode;\r\n        const editTestId = this.state.controlMap.has(\"EditTest\") && this.state.controlMap.get(\"EditTest\").ncontrolcode;\r\n        const viewFileId = this.state.controlMap.has(\"ViewTestFile\") && this.state.controlMap.get(\"ViewTestFile\").ncontrolcode;\r\n        const confirmMessage = new ConfirmMessage();\r\n\r\n        const deleteTree = {\r\n            methodUrl: \"Tree\", operation: \"delete\", inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo, screenName: \"IDS_TREE\", ncontrolCode: deleteTreeId, filterData: this.state.filterData\r\n        };\r\n\r\n        const getTest = {\r\n            screenName: \"IDS_TEST\", operation: \"get\", masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"TestGroupTest\", keyName: \"ntestgrouptestcode\"\r\n        };\r\n        const filterParam = {\r\n            testskip: 0, testtake: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n            fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo }, masterData: this.props.Login.masterData,\r\n            searchFieldList, changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\",\r\n                \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"], isSingleSelect: true\r\n        };\r\n        const filterParamRulesEngine = {\r\n            skipRulesEngine: 0, takeRulesEngine: this.props.Login.settings ? this.props.Login.settings[12] : 5,\r\n            inputListName: \"RulesEngine\", selectedObject: \"SelectedRulesEngine\", primaryKeyField: \"ntestgrouprulesenginecode\",\r\n            fetchUrl: \"testgrouprulesengine/getSelectedTestGroupRulesEngine\", fecthInputObject: { userinfo: this.props.Login.userInfo\r\n                ,ntestgrouptestcode:this.props.Login.masterData.SelectedTest&&this.props.Login.masterData.SelectedTest.ntestgrouptestcode }, masterData: this.props.Login.masterData,\r\n            'searchFieldList':[\"srulename\",\"stransdisplaystatus\" \r\n        ], changeList: [],  isSingleSelect: true\r\n        };\r\n        const specMandatoryFields = [];\r\n        //ALPD-4962 Test group screen -> while copy the spec and in spec name field without giving anything & save it blank page occurs.\r\n        const specCopyMandatoryFields = [];\r\n        const compMandatoryFields = [];\r\n        const editTestMandatoryFields = [];\r\n        const addTestMandatoryFields = [];\r\n        specificationColumnList.forEach(item => item.mandatory === true ?\r\n            specMandatoryFields.push(item) : \"\"\r\n        );\r\n        //ALPD-4944, Added specCopyMandatoryFields to check mandatory fields for copy spec\r\n        //ALPD-4962 Test group screen -> while copy the spec and in spec name field without giving anything & save it blank page occurs.\r\n        specificationCopyColumnList.forEach(item => item.mandatory === true ? \r\n            specCopyMandatoryFields.push(item) : \"\"\r\n        );\r\n        this.componentColumnList.forEach(item => item.mandatory === true ?\r\n            compMandatoryFields.push(item) : \"\"\r\n        );\r\n        editTestColumnList.forEach(item => item.mandatory === true ?\r\n            editTestMandatoryFields.push(item) : \"\"\r\n        );\r\n        addTestColumnList.forEach(item => item.mandatory === true ?\r\n            addTestMandatoryFields.push(item) : \"\"\r\n        );\r\n\r\n        if (this.props.Login.masterData && Object.values(this.props.Login.masterData).length > 0) {\r\n            if (selectedNode && selectedNode.sleveldescription) {\r\n                const splitNode = this.props.Login.masterData.ActiveKey.split('/');\r\n                let treeNodeNames = [];\r\n                splitNode.forEach(nodeItem => {\r\n                    this.props.Login.masterData.TreeTemplateManipulation.forEach(treeItem => {\r\n                        if (treeItem.ntemplatemanipulationcode === parseInt(nodeItem))\r\n                            treeNodeNames.push(treeItem.sleveldescription);\r\n                    })\r\n                })\r\n                this.componentBreadcrumbs = treeNodeNames;\r\n                if (SelectedSpecification && SelectedSpecification !== null && SelectedSpecification.sspecname) {\r\n                    this.componentBreadcrumbs.push(SelectedSpecification.sspecname);\r\n                    if (SelectedComponent && SelectedComponent !== null && SelectedComponent.ncomponentcode !== -1) {\r\n                        // this.componentBreadcrumbs[2] = this.props.intl.formatMessage({ id: \"IDS_COMPONENT\" }) + \": \" + SelectedComponent.scomponentname;\r\n                        this.componentBreadcrumbs.push(SelectedComponent.scomponentname);\r\n                    } else {\r\n                        // delete this.componentBreadcrumbs[2];\r\n                    }\r\n                } else {\r\n                    // delete this.componentBreadcrumbs[1];\r\n                }\r\n            } else {\r\n                this.componentBreadcrumbs = [];\r\n                // delete this.componentBreadcrumbs[0];\r\n            }\r\n        }\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n\r\n\r\n        //New Design\r\n        const specDesign =\r\n            <>\r\n                {this.componentBreadcrumbs && this.componentBreadcrumbs.length > 0 &&\r\n                    <div className=\"component_breadcrumbs\">\r\n                        <ul>\r\n                            {this.componentBreadcrumbs.map((item) => {\r\n                                return <li>{item}</li>\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n                }\r\n\r\n                <ContentPanel hidden={this.state.showTest} className='mr-2'>\r\n                    <div className='card_group'>\r\n                        <Card>\r\n                            <Card.Header>\r\n                                <span style={{ display: \"inline-block\", marginTop: \"1%\" }} >\r\n                                    <h4>{this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONINFO\" })}</h4>\r\n                                </span>\r\n                                {/* <button className=\"btn btn-primary\" style={{ float: \"right\" }}\r\n                                    onClick={() => this.showSpecAndTestInfo()}>\r\n                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                </button> */}\r\n                                <button className=\"btn btn-primary\" style={{ float: \"right\", marginRight: \"1rem\" }}\r\n                                    onClick={() => this.showSpecAndTestInfo1()}>\r\n                                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                                </button>\r\n                            </Card.Header>\r\n                            <Card.Body>\r\n                                <SpecificationInfo\r\n                                    genericLabel={this.props.Login.genericLabel}                             \r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    selectedSpecification={this.props.Login.masterData.SelectedSpecification}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    selectedNode={this.props.Login.masterData.selectedNode}\r\n                                    selectedRecord={this.state.filterData}\r\n                                    approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                                    screenName=\"IDS_SPECIFICATIONINFO\"\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    addSpecification={this.props.addSpecification}\r\n                                    filterData={this.state.filterData}\r\n                                    //completeSpecification={this.completeSpecification}\r\n                                    completeSpecification={this.validateTestGroupComplete}\r\n                                    approveSpecification={this.approveSpecification}\r\n                                    specificationReport={this.onDownloadClick}\r\n                                    retireSpec={this.retireSpec}\r\n                                    masterData={this.props.Login.masterData}\r\n\r\n                                />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </div>\r\n\r\n                        <div>\r\n                            <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />\r\n                        </div>\r\n                </ContentPanel>\r\n            </>\r\n\r\n\r\n        const testDesign = <Card>\r\n            <Card.Header className='sm-header'>\r\n                <h4 className='spec-info-title' data-tip={ this.props.intl.formatMessage({ id: \"IDS_TEST\" }) }>{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                <button className=\"btn btn-primary\" style={{ position: \"absolute\", right: \"7px\", top: \"7px\" }}\r\n                    onClick={() => this.showSpecAndTestInfo()}>\r\n                    <FontAwesomeIcon icon={faEye}></FontAwesomeIcon>{\"  \"}\r\n                    {this.props.intl.formatMessage({ id: \"IDS_SPECINFO\" })}\r\n                </button>\r\n            </Card.Header>\r\n            <Card.Body className={this.state.testView ? 'p-0' : 'no-pad-t'}>\r\n                <TransactionListMasterJsonView\r\n                    cardHead={167}\r\n                    componentBreadcrumbs={this.breadCrumbData ? this.breadCrumbData.length > 0 ? true : false : false}\r\n                    // notSearchable={false}\r\n                    masterList={searchedData || TestGroupTest || []}\r\n                    //selectedMaster={[SelectedTest]}\r\n                    clickIconGroup={true}\r\n                    selectedMaster={SelectedTest !== undefined ? [SelectedTest] : undefined}\r\n                    primaryKeyField=\"ntestgrouptestcode\"\r\n                    getMasterDetail={this.props.getTestGroupDetails}\r\n                    inputParam={getTest}\r\n                    additionalParam={[]}\r\n                    mainField=\"stestname\"\r\n                    selectedListName=\"SelectedTest\"\r\n                    objectName=\"testgrouptest\"\r\n                    listName=\"IDS_TEST\"\r\n                    showStatusLink={true}\r\n                    statusFieldName=\"stransdisplaystatus\"\r\n                    statusField=\"ntransactionstatus\"\r\n                    subFields={testSubFields}\r\n                   // moreField={testMoreFields}\r\n                   moreField={this.TestGroupMorefields(testMoreFields)}\r\n                    needValidation={false}\r\n                    needFilter={false}\r\n                    filterColumnData={this.props.filterTransactionList}\r\n                    searchListName=\"searchedData\"\r\n                    searchRef={this.searchRef}\r\n                    hidePaging={false}\r\n                    filterParam={filterParam}\r\n                    handlePageChange={this.handlePageChange}\r\n                    skip={this.state.testskip}\r\n                    take={this.state.testtake}\r\n                    pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                    actionIcons={\r\n                        [\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                controlname: \"faCloudDownloadAlt\",\r\n                                objectName: \"selectedTest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.viewTestFile(props),\r\n                                needConditionalIcon: true,\r\n                                conditionalIconFunction: this.fileViewIcon\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_VIEW\" }),\r\n                                controlname: \"faExternalLinkAlt\",\r\n                                objectName: \"selectedTest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(viewFileId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.viewTestFile(props),\r\n                                needConditionalIcon: true,\r\n                                conditionalIconFunction: this.linkViewIcon\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                controlname: \"faPencilAlt\",\r\n                                objectName: \"testgroupspecification\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(editTestId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => this.props.editTestGroupTest(\"update\", props.SelectedTest[0], this.props.Login.userInfo, editTestId, SelectedSpecification, this.state.filterData, props.masterData)\r\n                            },\r\n                            {\r\n                                title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                controlname: \"faTrashAlt\",\r\n                                objectName: \"testgrouptest\",\r\n                                hidden: this.state.userRoleControlRights.indexOf(deleteTestId) === -1,\r\n                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                onClick: (props) => confirmMessage.confirm(\r\n                                    \"deleteMessage\",\r\n                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                    () => this.deleteTest({ props, ncontrolCode: deleteTestId, filterData: this.state.filterData })\r\n                                )\r\n                            }\r\n                        ]\r\n                    }\r\n                    commonActions={\r\n                        <>\r\n\r\n                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                hidden={this.state.userRoleControlRights.indexOf(addTestId) === -1}\r\n                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                // data-for=\"tooltip-list-wrap\"\r\n                                onClick={() => this.props.addTestGroupTest(SelectedComponent, this.props.Login.userInfo, addTestId, SelectedSpecification, this.state.filterData, this.props.Login.masterData)}>\r\n                                <FontAwesomeIcon icon={faPlus} title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} />\r\n                            </Button>\r\n                        </>\r\n                    }\r\n                />\r\n            </Card.Body>\r\n        </Card>\r\n\r\n        const paramDesign =\r\n            <>\r\n                <ContentPanel hidden={!this.state.showTest} className=\"grouped-param\">\r\n                    <Card>\r\n                        {/* <Card.Header className='sm-header'>\r\n                            <span style={{ display: \"inline-block\" }} >\r\n                                <h4>{this.props.intl.formatMessage({ id: \"IDS_ADDPARAMETER\" })}</h4>\r\n                            </span>\r\n                        </Card.Header> */}\r\n                        {/* {TestGroupTestParameter && TestGroupTestParameter.length > 0 && */}\r\n                        {/* <PerfectScrollbar> */}\r\n                       \r\n                        <TestGroupTestTab\r\n                            paneHeight={this.state.paneHeight}\r\n                            testView={this.state.testView}\r\n                            isrulesenginerequired={this.props.Login.masterData.isrulesenginerequired&&\r\n                                this.props.Login.masterData.isrulesenginerequired===transactionStatus.YES?true:false}\r\n                            masterData={this.props.Login.masterData}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            esignRights={this.props.Login.userRoleControlRights}\r\n                            screenName={this.props.Login.screenName}\r\n                            openChildModal={this.props.Login.openChildModal}\r\n                            operation={this.props.Login.operation}\r\n                            loadEsign={this.props.Login.loadEsign}\r\n                            testGroupInputData={this.props.Login.testGroupInputData}\r\n                            parameterData={this.props.Login.parameterData}  \r\n                            selectedRecord={this.state.selectedRecord}\r\n                            selectedsubcodedresult={this.state.selectedsubcodedresult || []}\r\n                            selectsubcodedelete={this.state.selectsubcodedelete}\r\n                            screenData={this.props.Login.screenData}\r\n                            ncontrolCode={this.props.Login.ncontrolCode}\r\n                            controlMap={this.state.controlMap}\r\n                            testGroupCheckList={this.props.Login.testGroupCheckList}\r\n                            openTemplateModal={this.props.Login.openTemplateModal}\r\n                            editTestGroupTest={this.props.editTestGroupTest}\r\n                            updateStore={this.props.updateStore}\r\n                            crudMaster={this.props.crudMaster}\r\n                            getTestGroupParameter={this.props.getTestGroupParameter}\r\n                            editTestGroupParameter={this.props.editTestGroupParameter}\r\n                            filterData={this.state.filterData}\r\n                            addTestGroupCodedResult={this.props.addTestGroupCodedResult}\r\n                            subCodedResultView={this.props.subCodedResultView}\r\n                            addTestGroupNumericTab={this.props.addTestGroupNumericTab}\r\n                            validateEsignCredential={this.props.validateEsignCredential}\r\n                            filterColumnData={this.props.filterColumnData}\r\n                            viewTestGroupCheckList={this.props.viewTestGroupCheckList}\r\n                            getDataForTestMaterial={this.props.getDataForTestMaterial}\r\n                            materialType={this.props.Login.materialType}\r\n                            getMaterialCategoryBasedMaterialType={this.props.getMaterialCategoryBasedMaterialType}\r\n                            materialCategoryList={this.props.Login.materialCategoryList}\r\n                            materialList={this.props.Login.materialList}\r\n                            getMaterialBasedMaterialCategory={this.props.getMaterialBasedMaterialCategory}\r\n                            getTestGroupMaterial={this.props.getTestGroupMaterial}\r\n                            getDataForEditTestMaterial={this.props.getDataForEditTestMaterial}\r\n                            dataState={this.state.clinicalspecDataState}\r\n                            dataStateChange={this.specDataStateChange}\r\n                            getTestGroupRulesEngineAdd={this.getTestGroupRulesEngineAdd}\r\n                            settings={this.props.Login.settings}\r\n                            skip={this.state.testskip}\r\n                            take={this.state.testtake}\r\n                            getEditTestGroupRulesEngine={this.props.getEditTestGroupRulesEngine}\r\n                            getSelectedTestGroupRulesEngine={this.props.getSelectedTestGroupRulesEngine}\r\n                            ConfirmDeleteRule={this.ConfirmDeleteRule}\r\n                            approveVersion={(masterdata, nflag) => this.approveVersion(masterdata, nflag)}\r\n                            openflowview={(props)=>this.openflowview(props)}\r\n                            handlePageChangeRuleEngine={(event) => this.handlePageChangeRuleEngine(event)}\r\n                            skipRulesEngine={this.state.skipRulesEngine}\r\n                            takeRulesEngine={this.state.takeRulesEngine}\r\n                            viewOutcome={ (props)=>this.viewOutcome(props)}\r\n                            filterParamRulesEngine={ filterParamRulesEngine}\r\n                            filterTransactionList={this.props.filterTransactionList} \r\n                            saveExecutionOrder={(props)=>this.props.saveExecutionOrder(props,this.props.Login.masterData,this.props.Login.userInfo)} \r\n                            copyVersion={(masterData,ncontrolCode) => this.props.getCopyValues(masterData,ncontrolCode,this.props.Login.userInfo)} \r\n                            getProductCategory={this.props.Login.getProductCategory||[]}\r\n                            getSpecificationList={this.props.Login.getSpecificationList ||[]}\r\n                            getComponentList={this.props.Login.getComponentList||[]}\r\n                            getProductList={this.props.Login.getProductList||[]}\r\n                            getProfileRoot={this.props.Login.getProfileRoot||[]}\r\n                            getComponentComboServices={(methodparam)=>this.props.getComponentComboServices(methodparam)}\r\n                            getSpecificationComboServices={(methodparam)=>this.props.getSpecificationComboServices(methodparam)}\r\n                            getRulesTestComboServices={(methodparam)=>this.props.getRulesTestComboServices(methodparam)}\r\n                            getProductComboServices={(methodparam)=>this.props.getProductComboServices(methodparam)}\r\n                            getProfileRootComboServices={(methodparam)=>this.props.getProfileRootComboServices(methodparam)}\r\n                            getRulesList={this.props.Login.getRulesList||[]}\r\n                           \r\n                        />\r\n                        {/* </PerfectScrollbar>\r\n                     } */}\r\n                    </Card>\r\n                </ContentPanel>\r\n            </>\r\n\r\n        const mainDesign =\r\n            <SplitterLayout\r\n                customClassName={this.state.testView ? \"detailed-inner\" : \"detailed-inner no-height \"}\r\n                vertical={this.state.testView ? false : true}\r\n                borderColor=\"#999\"\r\n                primaryIndex={1}\r\n                percentage={true}\r\n                //secondaryInitialSize={this.state.testView ? 600 : this.state.fixefScrollHeight}\r\n                secondaryInitialSize={37}\r\n                primaryMinSize={30}\r\n                secondaryMinSize={37}\r\n            >\r\n                {testDesign}{paramDesign}\r\n            </SplitterLayout >\r\n\r\n\r\n        // const testDesign = this.state.testView ?\r\n        //     <SplitterLayout\r\n        //         customClassName=\"detailed-inner\"\r\n        //         borderColor=\"#999\"\r\n        //         primaryIndex={1}>\r\n        //         {tempDesign}{paramDesign}\r\n        //     </SplitterLayout>\r\n        //     :\r\n        //     <SplitterLayout\r\n        //         customClassName=\"detailed-inner no-height\"\r\n        //         vertical\r\n        //         borderColor=\"#999\"\r\n        //         primaryIndex={1}\r\n        //         // onSecondaryPaneSizeChange={this.verticalPaneSizeChange}\r\n        //         secondaryInitialSize={this.state.fixefScrollHeight}\r\n        //     >\r\n        //         <ContentPanel>\r\n        //             {tempDesign}\r\n        //         </ContentPanel>\r\n\r\n        //         {paramDesign}\r\n        //     </SplitterLayout>\r\n\r\n        return (\r\n            <>\r\n                {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip-list-wrap\" /> */}\r\n                {/* screen-height-window active_seperator */}\r\n                <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\">\r\n                    {this.breadCrumbData && this.breadCrumbData.length > 0 &&\r\n                        <BreadcrumbComponent\r\n                            breadCrumbItem={this.breadCrumbData}\r\n                        />}\r\n                    <Row noGutters>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" ref={(parentHeight) => { this.parentHeight = parentHeight }}>\r\n                            <SplitterLayout\r\n                                borderColor=\"#999\"\r\n                                primaryIndex={1}\r\n                                percentage={true}\r\n                                secondaryInitialSize={30}\r\n                            //customClassName=\"fixed_list_height\"\r\n                            >\r\n                                <div className={`${this.state.showModalBg ? 'show_modal_bg fixed_list_height' : 'fixed_list_height'}`}>\r\n                                    <div className=\"sticky_head\">\r\n                                        <SearchAdd className=\"border fixed_ico_list title_grp_custom\">\r\n                                            <h4>{this.props.intl.formatMessage({ id: \"IDS_PROFILETREE\" })}</h4>\r\n                                            <div className=\"icon_group_right_aligned\">\r\n                                                <AdvFilter\r\n                                                    filterComponent={[{\r\n                                                        \"IDS_SAMPLEFILTER\":\r\n                                                            <SampleFilter\r\n                                                                genericLabel={this.props.Login.genericLabel}\r\n                                                                userInfo={this.props.Login.userInfo} \r\n                                                                sampleType={this.state.sampleType}\r\n                                                                treeVersionTemplate={this.state.treeVersionTemplate}\r\n                                                                productCategory={this.state.productCategory}\r\n                                                                product={this.state.product}\r\n                                                                projectType={this.state.projectType}\r\n                                                                project={this.state.project}\r\n                                                                onFilterComboChange={this.onFilterComboChange}\r\n                                                                tempFilterData={this.state.tempFilterData}\r\n                                                            >\r\n                                                            </SampleFilter>,\r\n                                                        needActionStrip: false\r\n                                                    }]}\r\n                                                    onFilterSubmit={this.onFilterSumbit}\r\n                                                    showModalBg={(e) => this.setState({ showModalBg: e })}\r\n                                                />\r\n\r\n                                                <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <Button className=\"btn btn-icon-rounded btn-circle solid-blue mr-1\" role=\"button\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(addTreeId) === -1}\r\n                                                        onClick={() => this.props.createTree(this.state.filterData, this.props.Login.userInfo, this.props.Login.masterData, addTreeId)}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                    //  data-for=\"tooltip-list-wrap\"\r\n                                                    >\r\n                                                        <FontAwesomeIcon icon={faPlus} />\r\n                                                    </Button>\r\n\r\n                                                    <Nav.Link className=\"btn btn-circle outline-grey mr0 mr-1\" name=\"edittestname\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(editTreeId) === -1}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                        //  data-for=\"tooltip-list-wrap\"\r\n                                                        onClick={() => this.props.editTree(\"update\", selectedNode, this.props.Login.userInfo, editTreeId, this.state.filterData,\r\n                                                            this.props.Login.masterData)}>\r\n                                                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                                                    </Nav.Link>\r\n                                                    <Nav.Link name=\"deleteLink\"\r\n                                                        hidden={this.state.userRoleControlRights.indexOf(deleteTreeId) === -1}\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                        // data-for=\"tooltip-list-wrap\"\r\n                                                        className=\"btn btn-circle outline-grey \"\r\n                                                        onClick={() => this.ConfirmDelete({ ...deleteTree })}>\r\n                                                        <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                        {/* <ConfirmDialog\r\n                                                            name=\"deleteMessage\"\r\n                                                            message={this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" })}\r\n                                                            doLabel={this.props.intl.formatMessage({ id: \"IDS_OK\" })}\r\n                                                            doNotLabel={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                            icon={faTrashAlt}\r\n                                                            title={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(deleteTreeId) === -1}\r\n                                                            handleClickDelete={() => this.deleteRecord({ ...deleteTree })}\r\n                                                        /> */}\r\n                                                    </Nav.Link>\r\n                                                    <Button className=\"btn btn-circle outline-grey ml-1 p-0\" variant=\"link\"\r\n                                                        onClick={() => this.reloadData()}\r\n                                                        // data-for=\"tooltip-list-wrap\"\r\n                                                        data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                            <RefreshIcon className='custom_icons'/>\r\n                                                    </Button>\r\n                                                    {/* </Tooltip> */}\r\n                                                </ProductList>\r\n\r\n                                            </div>\r\n                                        </SearchAdd>\r\n                                    </div>\r\n                                    <div className=\"sticky_head_scroll_body\" style={{ \"height\": this.state.parentHeight }}>\r\n                                        <PerfectScrollbar>\r\n                                            <FormTreeMenu\r\n                                                data={this.props.Login.masterData.AgaramTree}\r\n                                                hasSearch={false}\r\n                                                handleTreeClick={this.onTreeClick}\r\n                                                initialOpenNodes={OpenNodes}\r\n                                                focusKey={FocusKey || \"\"}\r\n                                                activeKey={ActiveKey || \"\"}\r\n                                            />\r\n                                            <TransationListMaster\r\n                                                notSearchable={true}\r\n                                                titleHead={this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })}\r\n                                                titleClasses=\"title_grp_custom fixed_ico_list\"\r\n                                                masterList={TestGroupSpecification || []}\r\n                                                selectedMaster={[SelectedSpecification]}\r\n                                                needMultiSelect={false}\r\n                                                primaryKeyField=\"nallottedspeccode\"\r\n                                                getMasterDetail={(spec) => this.props.getComponentBySpecId({ ...getComponent, selectedRecord: spec, historyDataState: this.state.historyDataState }, this.props.Login.masterData, this.searchRef)}\r\n                                                mainField=\"sspecname\"\r\n                                                selectedListName=\"testgroupspecification\"\r\n                                                objectName=\"testgroupspecification\"\r\n                                                listName=\"IDS_SPECIFICATION\"\r\n                                                onFilterSumbit={this.onFilterSumbit}\r\n                                                subFields={this.specSubField}\r\n                                                actionIcons={\r\n                                                    [\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_EDIT\" }),\r\n                                                            controlname: \"faPencilAlt\",\r\n                                                            objectName: \"testgroupspecification\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(editSpecId) === -1,\r\n                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                            onClick: (props) => this.props.addSpecification(\"update\", { ...editSpecParam, ...props }, editSpecId)\r\n                                                        },\r\n                                                        {\r\n                                                            title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                            controlname: \"faTrashAlt\",\r\n                                                            objectName: \"testgroupspecification\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(deleteSpecId) === -1,\r\n                                                            inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                            onClick: (props) => confirmMessage.confirm(\r\n                                                                \"deleteMessage\",\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                () => this.deleteSpecRecord({ props, ...specDeleteParam, selectedRecord: SelectedSpecification, ncontrolCode: deleteSpecId })\r\n                                                            )\r\n                                                        }\r\n                                                    ]\r\n                                                }\r\n                                                needFilter={false}\r\n                                                commonActions={\r\n                                                    <>\r\n                                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                            hidden={this.state.userRoleControlRights.indexOf(addSpecId) === -1}\r\n                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                            //  data-for=\"tooltip-list-wrap\"\r\n                                                            onClick={() => this.props.addSpecification(\"create\", { ...addSpecParam }, addSpecId, this.props.Login.masterData)}>\r\n                                                            <FontAwesomeIcon icon={faPlus}\r\n                                                            // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                            />\r\n                                                        </Button>\r\n                                                    </>\r\n                                                }\r\n                                                hideSearch={false}\r\n                                                hidePaging={true}\r\n                                            />\r\n\r\n                                        { this.props.Login.filterData && this.props.Login.filterData.nproductcatcode.item.nmaterialtypecode === MaterialType.IQCSTANDARDMATERIALTYPE ? \"\" :\r\n                                            //{\r\n                                            SelectedSpecification && SelectedSpecification.ncomponentrequired === transactionStatus.YES &&\r\n                                              \r\n                                                <TransationListMaster\r\n                                                    notSearchable={true}\r\n                                                    titleHead={this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]}\r\n                                                    titleClasses=\"title_grp_custom fixed_ico_list\"\r\n                                                    masterList={TestGroupSpecSampleType || []}\r\n                                                    selectedMaster={[SelectedComponent]}\r\n                                                    needMultiSelect={false}\r\n                                                    primaryKeyField=\"nspecsampletypecode\"\r\n                                                    getMasterDetail={(event) => this.componentRowClick(event)}\r\n                                                    mainField=\"scomponentname\"\r\n                                                    selectedListName=\"testgroupspecsampletype\"\r\n                                                    objectName=\"testgroupspecsampletype\"\r\n                                                    listName={this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] }\r\n                                                    actionIcons={\r\n                                                        [\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                controlname: \"faTrashAlt\",\r\n                                                                objectName: \"testgroupspecsampletype\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(deleteComponentId) === -1,\r\n                                                                inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo },\r\n                                                                onClick: (props) => confirmMessage.confirm(\r\n                                                                    \"deleteMessage\",\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_DELETE\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                                                    this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                                                    () => this.deleteMultipleRecord({ props, ncontrolCode: deleteComponentId })\r\n                                                                )\r\n                                                            }\r\n                                                        ]\r\n                                                    }\r\n                                                    commonActions={\r\n                                                        <>\r\n                                                            {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                                            <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(addComponentId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                //  data-for=\"tooltip-list-wrap\"\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                                                onClick={() => this.props.addComponent(SelectedSpecification, this.props.Login.userInfo, addComponentId, {...this.props.Login.masterData,nsampletypecode:this.state.filterData.nsampletypecode},this.props.Login.genericLabel)}>\r\n                                                                <FontAwesomeIcon icon={faPlus}\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_ADD\" })} \r\n                                                                />\r\n                                                            </Button>\r\n\r\n                                                        </>\r\n                                                    }\r\n                                                    hidePaging={true}\r\n                                                />\r\n                                                //}\r\n                                            }\r\n                                        </PerfectScrollbar>\r\n                                    </div>\r\n                                </div>\r\n                                <>\r\n                                    {this.state.testView ?\r\n                                        <>\r\n                                            {specDesign}\r\n                                            {this.state.showTest ?\r\n                                                <div>\r\n                                                    {mainDesign}\r\n                                                </div>\r\n                                                : \"\"}\r\n                                        </>\r\n                                        :\r\n                                        <PerfectScrollbar>\r\n                                            {specDesign}\r\n                                            {this.state.showTest ?\r\n                                                <div>\r\n                                                    {mainDesign}\r\n                                                </div>\r\n                                                : \"\"}\r\n                                        </PerfectScrollbar>\r\n                                    }\r\n\r\n\r\n                                </>\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </ListWrapper>\r\n\r\n\r\n\r\n                <ModalShow\r\n                    modalShow={this.props.Login.showAlertGrid \r\n                    }\r\n                    modalTitle={  this.props.Login.showParameterGrid ? \"IDS_VIEWPARAMETER\":\r\n                        this.props.Login.showAlertForPredefined||\r\n                        this.props.Login.additionalInfoView?this.props.intl.formatMessage({ id: \"IDS_ADDITIONALINFOREQURIED\" }) \r\n                     :''}  \r\n                    closeModal={this.closeModalShowPredefAlert}\r\n                    onSaveClick ={this.onModalSavePredefAlert}\r\n                    removeCancel={this.props.Login.showParameterGrid?false:this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                    needSubmit={this.props.Login.showParameterGrid?false:this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                    needSave={this.props.Login.showParameterGrid?true:\r\n                        this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\"\":true}\r\n                    selectedRecord={this.state.selectedRecord || {}}  \r\n                    size={ this.props.Login.showParameterGrid?\"lg\":\r\n                        this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\"\":'lg'}\r\n                    showAlertMsg={this.props.Login.showAlertForPredefined?true:false}\r\n                    modalBody={ \r\n                              this.props.Login.showParameterGrid?\r\n                               <DataGrid\r\n                                       key=\"testsectionkey\"\r\n                                       primaryKeyField=\"ntestgrouptestparametercode\" \r\n                                       dataResult={this.props.Login.masterData.ParameterRulesEngine && process(\r\n                                               sortData(this.props.Login.masterData.ParameterRulesEngine,\r\n                                                \"descending\", \"ntestgrouptestparametercode\")\r\n                                               || [],\r\n                                               this.state.dataStateChangeViewParameter\r\n                                                   ? this.state.dataStateChangeViewParameter : { skip: 0, take: 10 })} \r\n                                       dataState={this.state.dataStateChangeViewParameter\r\n                                           ? this.state.dataStateChangeViewParameter : { skip: 0, take: 10 }} \r\n                                       dataStateChange={this.dataStateChangeViewParameter} \r\n                                       extractedColumnList={[\r\n                                           { \"idsName\": \"IDS_PARAMETERNAME\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" } ,\r\n                                            { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"200px\" } ,\r\n                                           // { \"idsName\": \"IDS_RESULTFLAG\", \"dataField\": \"sgradename\", \"width\": \"200px\" } \r\n                                       ]}\r\n                                       controlMap={this.state.controlMap}\r\n                                       userRoleControlRights={this.state.userRoleControlRights}\r\n                                       pageable={true} \r\n                                       scrollable={'scrollable'}\r\n                                       hideColumnFilter={true}\r\n                                       selectedId={0}  \r\n                                       activeTabName={\"IDS_Test\"}\r\n                                       gridHeight = {'400px'}\r\n                                   >\r\n                                   </DataGrid>  :\r\n                        this.props.Login.additionalInfoView?\r\n                        this.state.selectedRecord['additionalResultData'] :\r\n                         this.props.Login.showAlertForPredefined? \r\n                       <ResultEntryPredefinedComments \r\n                       onlyAlertMsgAvailable={this.props.Login.onlyAlertMsgAvailable}\r\n                       salertmessage={this.props.Login.masterData['salertmessage']}\r\n                       showMultiSelectCombo={this.props.Login.showMultiSelectCombo}\r\n                       testgrouptestpredefsubresultOptions={this.props.Login.masterData.testgrouptestpredefsubresultOptions||[]}\r\n                       selectedRecord={this.state.selectedRecord || {}} \r\n                       onInputChange = {this.onInputChange}\r\n                       onComboChange={this.onComboChange} \r\n                       />  :''\r\n                    }\r\n                />\r\n\r\n\r\n                {\r\n                    this.props.Login.openModal && this.props.Login.screenName &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        className={this.props.Login.screenName === \"IDS_VIEWRULE\"  ? \"wide-popup\" : \"\"}\r\n                        operation={this.props.Login.screenName === \"IDS_VIEWRULE\"||this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ? \"\" : this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={ this.props.Login.screenName === \"IDS_VIEWRULE\"||this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ?this.props.intl.formatMessage({id: this.props.Login.screenName})\r\n                        +\" - \"+this.props.Login.masterData.SelectedTest.stestsynonym:this.props.Login.screenName}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        //ALPD-5444 Test Group - Copy the spec in test group and do save continue loading issue occurs.\r\n                        showSaveContinue={this.props.Login.screenName === \"IDS_SPECIFICATION\" || this.props.Login.screenName === \"IDS_SPECFILE\"?this.props.Login.loadEsign ? false :true:false}\r\n                        onSaveClick={this.onSaveClick}\r\n                        hideSave={this.props.Login.screenName === \"IDS_VIEWRULE\"||this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ||this.props.Login.screenName === \"IDS_SUBCODERESULT\"  ? true : false}\r\n                        size={this.props.Login.screenName === \"IDS_VIEWRULE\" ||this.props.Login.screenName === \"IDS_VIEWOUTCOME\"  ? 'xl' : \"lg\"}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={\r\n                            this.props.Login.screenName === \"IDS_SPECFILE\" ? this.findMandatoryFields(this.props.Login.screenName, this.state.selectedRecord)\r\n                                : this.props.Login.screenName === \"IDS_SPECIFICATION\" ? this.props.Login.operation === \"copy\" ? specCopyMandatoryFields : specMandatoryFields   //ALPD-4944, Added condition to read which mandatory records\r\n                                    : this.props.Login.screenName ===this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] ? compMandatoryFields\r\n                                        : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ? editTestMandatoryFields\r\n                                            : this.props.Login.screenName === \"IDS_TEST\" ? addTestMandatoryFields\r\n                                                : this.props.Login.screenName === \"IDS_PROFILETREE\" || this.props.Login.screenName === \"IDS_EDITTREE\"\r\n                                                    ? this.props.Login.treeMandatoryFields : []}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.Login.screenName === \"IDS_SPECIFICATION\" ?\r\n                                <AddTestGroupSpecification\r\n                                   genericLabel={this.props.Login.genericLabel}\r\n                                     userInfo={this.props.Login.userInfo}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    onComboChange={this.onComboChange}\r\n                                    screenName={this.props.Login.screenName}\r\n                                    operation={this.props.Login.operation}\r\n                                    nsampletypecode={this.props.Login.masterData.selectedNode.nsampletypecode}\r\n                                    settings={this.props.Login.settings}\r\n                                    tempFilterData = {this.state.tempFilterData}\r\n                                    filterData ={this.props.Login.filterData}\r\n                                    //For copy action --ALPD-4099 ,work done by Dhanushya R I\r\n                                    focusKey={\r\n                                        // this.props.Login.masterData && this.props.Login.masterData.selectedRecordCopy ? this.props.Login.masterData.selectedRecordCopy.CopyFocusKey :\r\n                                            this.state.selectedRecord.CopyFocusKey || \"\"}\r\n                                    activeKey={\r\n                                        // this.props.Login.masterData && this.props.Login.masterData.selectedRecordCopy ? this.props.Login.masterData.selectedRecordCopy.CopyActiveKey :\r\n                                        this.state.selectedRecord.CopyActiveKey || \"\"}\r\n                                    copyProfileName = {this.state.selectedRecord.selectedCopyProfileName}\r\n                                    onCopyTreeClick={this.onCopyTreeClick}\r\n                                    initialOpenNodes = {CopyOpenNodes || OpenNodes}\r\n                                    data={this.props.Login.masterData.AgaramTree}\r\n                                    //For copy action --ALPD-4099 ,work done by Dhanushya R I\r\n                                    Copydata={this.props.Login.masterData.selectedRecordCopy&&this.props.Login.masterData.selectedRecordCopy.AgaramTree}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    productCategory={this.state.productCategory}\r\n                                    product={this.state.product}\r\n                                    changeProductOrProductCategory={this.props.getSpecDetailsForCopy}\r\n                                    initialProfile={this.props.Login.masterData&&this.props.Login.masterData.selectedNode&&this.props.Login.masterData.selectedNode.sleveldescription}\r\n                                /> :\r\n                                this.props.Login.screenName ===this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] ?\r\n                                    <AddTestGroupTest\r\n                                         genericLabel={this.props.Login.genericLabel}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        testGroupInputData={this.props.Login.testGroupInputData}\r\n                                        screenName={this.props.Login.screenName}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onFilterComboChange={this.onFilterComboChange}\r\n                                    /> :\r\n\r\n\r\n                                    this.props.Login.screenName === \"IDS_SUBCODERESULT\" ?\r\n                                    <ViewSubCodedResult\r\n                                        selectedRecord={this.state.selectedsubcoderesult || {}}\r\n                                        selectedsubcoderesult={this.props.Login.selectedsubcoderesult||[]}\r\n                                        screenName={this.props.Login.screenName}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onFilterComboChange={this.onFilterComboChange}\r\n                                    /> :\r\n\r\n                                    this.props.Login.screenName === \"IDS_PROFILETREE\" ?\r\n                                        <AddProfileTree\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            treetempTranstestGroup={this.props.Login.TreetempTranstestGroup}\r\n                                        /> :\r\n                                        this.props.Login.screenName === \"IDS_SPECFILE\" ?\r\n                                            <AddFile\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                actionType={this.state.actionType}\r\n                                                onDrop={this.onDropSpecFile}\r\n                                                deleteAttachment={this.deleteAttachment}\r\n                                                linkMaster={this.props.Login.linkMaster}\r\n                                                editFiles={this.props.Login.editFiles}\r\n                                                maxSize={20}\r\n                                                maxFiles={this.props.Login.operation === \"update\" ? 1 : 1}\r\n                                                multiple={this.props.Login.operation === \"update\" ? false : true}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_SPECFILE\" })}\r\n                                                hideDefaultToggle={true}\r\n                                                name=\"specfilename\"\r\n                                            /> :\r\n                                            this.props.Login.screenName === \"IDS_EDITTREE\" ?\r\n                                                <Row>\r\n                                                    <Col md={12}>\r\n                                                        <FormInput\r\n                                                            name={\"sleveldescription\"}\r\n                                                            label={this.state.selectedRecord.slabelname}\r\n                                                            type=\"text\"\r\n                                                            onChange={(event) => this.onInputOnChange(event, 1)}\r\n                                                            placeholder={this.state.selectedRecord.slabelname}\r\n                                                            value={this.state.selectedRecord ? this.state.selectedRecord[\"sleveldescription\"] : \"\"}\r\n                                                            isMandatory=\"*\"\r\n                                                            required={true}\r\n                                                            maxLength={100}\r\n                                                        />\r\n                                                    </Col>\r\n                                                </Row> :\r\n                                                this.props.Login.screenName === \"IDS_TEST\" ?\r\n                                                    <AddTestGroupTest\r\n                                                    genericLabel={this.props.Login.genericLabel}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                                        testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                        screenName={this.props.Login.screenName}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        onFilterComboChange={this.onFilterComboChange}\r\n                                                    /> : this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\" ?\r\n                                                        <EditTestGroupTest\r\n                                                             hideQualisForms={this.props.Login.hideQualisForms}\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                            testGroupInputData={this.props.Login.testGroupInputData}\r\n                                                            onComboChange={this.onComboChange}\r\n                                                            onInputOnChange={this.onInputOnChange}\r\n                                                            onNumericInputChange={this.onNumericInputChange}\r\n                                                        /> : this.props.Login.screenName === \"IDS_VIEWRULE\" ?\r\n                                                            <Row>\r\n                                                                <Col md={12}>\r\n                                                                    <OrgTree\r\n                                                                        data={this.ruleflowobject()}\r\n                                                                        horizontal={true}\r\n                                                                        collapsable={true}\r\n                                                                        expandAll={true}\r\n                                                                        labelClassName={\"ruletree\"}\r\n                                                                    /> \r\n                                                                </Col>\r\n                                                            </Row>\r\n                                                               \r\n                                                            :  this.props.Login.screenName === \"IDS_VIEWOUTCOME\" ?\r\n                                                            <Row>\r\n                                                                <Col md={12}> \r\n                                                                    {this.props.Login.masterData.SelectedRulesEngine &&\r\n                                                                <CustomTab tabDetail={this.tabDetailRulesEngine()} onTabChange={this.onTabChangeRulesEngine} /> }\r\n                                                                </Col>\r\n                                                            </Row> \r\n                                                            :\"\"\r\n                        }\r\n                    />\r\n                }\r\n                {\r\n                    this.props.Login.openPortalModal &&\r\n                    <PortalModalSlideout\r\n                        show={this.props.Login.openPortalModal}\r\n                        closeModal={this.closePortalModal}\r\n                        screenName={this.props.intl.formatMessage({ id:this.props.Login.screenName})+\" - \"+this.props.Login.masterData.SelectedTest.stestsynonym}\r\n                        handleSaveClick={this.save}\r\n                        addComponent={\r\n                            (this.props.Login.operation === 'update' ? this.state.selectedRecord['groupList'] : true) &&\r\n                            <AddTestGroupRule\r\n                                productCategoryList={this.state.ProductCategoryList || []}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                databaseTableList={this.props.Login.databaseTableList}\r\n                                tableColumnList={this.state.tableColumnList}\r\n                                specificationOptions={this.state.TestGroupSpecificationList || []}\r\n                                componentOptions={this.state.ComponentList || []}\r\n                                foreignTableList={this.state.foreignTableList || []}\r\n                                foreignTableColumnList={this.props.Login.foreignTableColumnList || []}\r\n                                count={this.state.count}\r\n                                foreignTableCount={this.state.foreignTableCount}\r\n                                sqlQuery={this.state.sqlQuery}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                onInputChange={this.onInputChange}\r\n                                deleteRule={this.deleteRule}\r\n                                clearRule={this.clearRule}\r\n                                resetRule={this.resetRule}\r\n                                onSymbolChange={this.onSymbolChange}\r\n                                onRuleChange={this.onRuleChange}\r\n                                addRule={this.addRule}\r\n                                addTest={this.addTest}\r\n                                onConditionClick={this.onConditionClick}\r\n                                onMasterDataChange={this.onMasterDataChange}\r\n                                databaseviewList={this.props.Login.databaseviewList}\r\n                                addRuleList={this.props.Login.addRuleList || []}\r\n                                rulesOption={this.props.Login.masterData.rulesOption&&this.props.Login.masterData.rulesOption.filter(this.outComeTestsRemoveFromRules)}\r\n                                masterdata={this.props.Login.masterdata}\r\n                                switchRecord={this.state.switchRecord}\r\n                                data={this.state.data}\r\n                                dataResult={this.state.dataResult || []}\r\n                                dataState={this.state.dataState}\r\n                                dataStateChange={this.dataStateChange}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                gridColumnList={this.props.Login.gridColumnList || []}\r\n                                queryType={this.state.queryType}\r\n                                addAggregateList={this.props.Login.addAggregateList || []}\r\n                                addOrderbyList={this.props.Login.addOrderbyList || []}\r\n                                addGroup={this.addGroup}\r\n                                addGroupList={this.props.Login.addGroupList || []}\r\n                                onFilterComboChange={this.onFilterComboChange}\r\n                                selectFields={this.props.Login.selectFields || []}\r\n                                SelectedProductCategory={this.props.Login.masterData.SelectedProductCategory}\r\n                                DiagnosticCaseList={this.props.Login.masterData.DiagnosticCaseList}\r\n                                GradeList={this.props.Login.masterData.GradeList}\r\n                                PredefinedParameterOptions={this.props.Login.masterData.PredefinedParameterOptions} \r\n                                siteList={this.props.Login.masterData.siteList}\r\n                                resultTypeList={this.props.Login.masterData.resultTypeList}\r\n                                isResultorOrderType={this.state.isResultorOrderType}\r\n                                optionsByRule={this.state.optionsByRule || this.props.Login.masterData.DiagnosticCaseList}\r\n                                changePropertyView={this.changePropertyView}\r\n                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                activeTabIndex={this.props.Login.activeTabIndex}\r\n                                enablePropertyPopup={this.state.enablePropertyPopup}\r\n                                propertyPopupWidth={this.state.propertyPopupWidth}\r\n                                controlMap={this.state.controlMap}\r\n                                sectionDataState={this.state.sectionDataState}\r\n                                masterData={this.props.Login.masterData}\r\n                                intl={this.props.intl}\r\n                                addOutcomeList={this.props.Login.addOutcomeList && this.props.Login.addOutcomeList || []}\r\n                                deleteOutcome={this.deleteOutcome}\r\n                                onmodalComboChange={this.onmodalComboChange}\r\n                                openModalPopup={this.props.Login.openModalPopup}\r\n                                closeModalShow={this.closeModalShow}\r\n                                modalsaveClick={this.modalsaveClick}\r\n                                getOutcomeDetails={this.getOutcomeDetails}\r\n                                addModalSite={this.addModalSite}\r\n                                action={this.props.Login.action}\r\n                                deletModalSite={this.deletModalSite}\r\n                                deleteModalTest={this.deleteModalTest}\r\n                                activeTestTab={this.props.Login.activeTestTab}\r\n                                testcomments={this.props.Login.testcomments}\r\n                                reportcomments={this.props.Login.reportcomments}\r\n                                addComments={this.addComments}\r\n                                CommentType={this.props.Login.CommentType}\r\n                                CommentSubType={this.props.Login.CommentSubType}\r\n                                isneedsgeneralcomments={this.state.isneedsgeneralcomments}\r\n                                predefcomments={this.props.Login.predefcomments}\r\n                                needoutsource={this.state.selectedRecord['needoutsource'] && this.state.selectedRecord['needoutsource'] === 3 ? true : false}\r\n                                openmodalsavePopup={this.props.Login.openmodalsavePopup}\r\n                                save={this.save}\r\n                                dataStateObject={this.state.dataStateObject}\r\n                                paneSizeChange={this.paneSizeChange}\r\n                                testInitiateTestCombo={this.props.Login.testInitiateTestCombo && this.viewColumnListByRule(this.props.Login.testInitiateTestCombo)}\r\n                                testCommentsTestCombo={this.props.Login.testCommentsTestCombo && this.viewColumnListByRule(this.props.Login.testCommentsTestCombo)}\r\n                                testRepeatTestCombo={this.props.Login.testRepeatTestCombo && this.viewColumnListByRule(this.props.Login.testRepeatTestCombo)}\r\n                                testenforceTestCombo={this.props.Login.testenforceTestCombo &&this.props.Login.testenforceTestCombo}\r\n                                dataStateChangetestRepeat={this.dataStateChangetestRepeat}\r\n                                dataStateChangetestEnforce={this.dataStateChangetestEnforce}\r\n                                dataStatetestEnforce={this.state.dataStatetestEnforce}\r\n                                dataStatetestRepeat={this.state.dataStatetestRepeat}\r\n                                testGroupTestParameterRulesEngine={this.props.Login.masterData.testGroupTestParameterRulesEngine||[]}\r\n                                ParameterRulesEngine={this.props.Login.masterData.ParameterRulesEngine||[]}\r\n                                onRuleInputChange={this.onRuleInputChange}\r\n                                onRuleNumericInputOnChange={this.onRuleNumericInputOnChange} \r\n                                onResultInputChange={this.onResultInputChange}\r\n                                PredefinedValues={this.props.Login.masterData.PredefinedValues||{}}\r\n                                onGradeEvent={this.onGradeEvent}\r\n                                deletetestparameter={this.deletetestparameter}\r\n                                gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                modalParameterPopup={this.props.Login.modalParameterPopup||false}\r\n                                addParameter={this.addParameter} \r\n                                onInputSwitchOnChange={this.onInputSwitchOnChange}\r\n                                onInputSwitchChange={this.onInputSwitchChange}\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteRecord(obj));\r\n    }\r\n\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            testskip: event.skip,\r\n            testtake: event.take\r\n        });\r\n    }\r\n\r\n    findMandatoryFields(screenName, selectedRecord) {\r\n        let mandyFields = [];\r\n        if (screenName === \"IDS_SPECFILE\") {\r\n            if (selectedRecord && selectedRecord.nattachmenttypecode === attachmentType.LINK) {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                    { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n                ];\r\n            } else {\r\n                //if (this.props.Login.operation === 'update') {\r\n                mandyFields = [\r\n                    { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                ];\r\n                // }\r\n            }\r\n        } else {\r\n            return [];\r\n        }\r\n        let finalMandyFields = [];\r\n        mandyFields.forEach(item => item.mandatory === true && finalMandyFields.push(item));\r\n        return finalMandyFields;\r\n    }\r\n\r\n    viewTestFile = (props) => {\r\n        const viewParam = {\r\n            operation: \"view\",\r\n            methodUrl: \"TestGroupTestFile\",\r\n            classUrl: \"testgroup\",\r\n            inputData: {\r\n                ntestgroupfilecode: props.selectedTest ? props.selectedTest.ntestgroupfilecode : 0,\r\n                userinfo: this.props.Login.userInfo,\r\n                testgroupspecification: this.props.Login.masterData.SelectedSpecification,\r\n                ntestgrouptestcode: props.selectedTest ? props.selectedTest.ntestgrouptestcode : 0\r\n            }\r\n        }\r\n        this.props.viewAttachment(viewParam)\r\n    }\r\n\r\n    fileViewIcon = (master) => {\r\n        if (master.ntestgroupfilecode > 0 && master.nlinkcode === transactionStatus.NA) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    linkViewIcon = (master) => {\r\n        if (master.ntestgroupfilecode > 0 && master.nlinkcode !== transactionStatus.NA) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    showSpecAndTestInfo() {\r\n        this.setState({ showTest: !this.state.showTest, testView: false })\r\n        this.updateSpiltterLayout()\r\n\r\n    }\r\n    showSpecAndTestInfo1() {\r\n        this.setState({ showTest: !this.state.showTest, testView: true })\r\n        //this.updateSpiltterLayout()\r\n\r\n    }\r\n\r\n    onFilterSumbit = () => {\r\n        const tempFilterData = this.state.tempFilterData;\r\n        if (tempFilterData.nsampletypecode === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENOTAVAILABLE\" }));\r\n        } else if (tempFilterData.nproductcatcode === \"\") {\r\n            if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTCATEGORYNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALCATEGORYNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_CATEGORYNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        // else if(tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO){\r\n        else if ((tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === \"\" && \r\n        tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) ||\r\n            (tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.NO && tempFilterData.nproductcode === undefined  && \r\n                tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) ) {\r\n            \r\n                if (tempFilterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY && tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO ) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_INSTRUMENTNOTAVAILABLE\" }));\r\n            } else if (tempFilterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_MATERIALNOTAVAILABLE\" }));\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_PRODUCTNOTAVAILABLE\" }));\r\n            }\r\n        }\r\n        // }\r\n        else if (tempFilterData.ntreeversiontempcode === \"\") {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_STUDYPLANTEMPLATEISNOTAVAILABLE\" }));\r\n        } else {\r\n            const inputParam = {\r\n                inputData: {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nsampletypecode: tempFilterData.nsampletypecode.value,\r\n                    nproductcatcode: tempFilterData.nproductcatcode.value,\r\n                    nproductcode: tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : \r\n                    \r\n                    tempFilterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? -1 : tempFilterData.nproductcode ? tempFilterData.nproductcode.value : -1,\r\n                    ntreeversiontempcode: tempFilterData.ntreeversiontempcode.value,\r\n                    nprojectmastercode: tempFilterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE ?  tempFilterData.nsampletypecode.item.nprojectspecrequired=== transactionStatus.YES ? tempFilterData.nprojectmastercode.value :-1 : -1,\r\n                    filterData: { ...tempFilterData },\r\n                },\r\n                historyDataState: this.state.historyDataState\r\n            }\r\n            this.props.filterTestGroup(inputParam, this.props.Login.masterData, this.searchRef);\r\n        }\r\n    }\r\n    onCopyTreeClick = (selectedCopyNodeManipulationCode, selectedCopyProfileName, CopyFocusKey, CopyActiveKey) =>{\r\n        let selectedRecord= {...this.state.selectedRecord} || {};\r\n       \r\n        selectedRecord['selectedCopyNodeManipulationCode'] = selectedCopyNodeManipulationCode\r\n        selectedRecord['selectedCopyProfileName'] = selectedCopyProfileName;\r\n        selectedRecord['CopyFocusKey'] = CopyFocusKey;\r\n        selectedRecord['CopyActiveKey'] = CopyActiveKey;\r\n        selectedRecord['scopyspecname'] = selectedCopyProfileName;\r\n            this.setState({ \r\n                            selectedRecord : {...selectedRecord},\r\n                            // isCopySpecRender: false\r\n                         });\r\n    }\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_SPECIFICATION\",\r\n            operation: \"get\",\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedRecord: event.item,\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            primaryKey: event.primaryKey,\r\n            historyDataState: this.state.historyDataState\r\n        };\r\n        this.props.getSpecification(inputParam, this.props.Login.masterData, this.searchRef);\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_FILE\",\r\n            <TestGroupSpecFile\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                deleteRecord={this.deleteRecord}\r\n                testGroupSpecFile={this.props.Login.masterData.TestGroupSpecFile || []}\r\n                selectedSpecification={this.props.Login.masterData.SelectedSpecification}\r\n                addTestFile={this.addFile}\r\n                editSpecFile={this.props.editSpecFile}\r\n                filterData={this.state.filterData}\r\n                viewTestFile={this.viewTestFile}\r\n                defaultRecord={this.defaultRecord}\r\n                screenName=\"IDS_FILE\"\r\n                viewAttachment={this.props.viewAttachment}\r\n                settings={this.props.Login.settings}\r\n                masterData={this.props.Login.masterData}\r\n            />);\r\n        tabMap.set(\"IDS_SPECIFICATIONHISTORY\",\r\n            <SpecificationHistory\r\n                data={this.props.Login.masterData.TestGroupSpecificationHistory}\r\n                dataResult={process(this.props.Login.masterData.TestGroupSpecificationHistory || [], this.state.historyDataState)}\r\n                dataState={this.state.historyDataState}\r\n                dataStateChange={this.historyDataStateChange}\r\n\r\n                // testGroupSpecificationHistory={this.props.Login.masterData.TestGroupSpecificationHistory}\r\n                // dataState={this.props.Login.screenName === \"IDS_SPECIFICATIONHISTORY\" ? this.state.historyDataState : { skip: 0, take: 10 }}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_SPECIFICATIONHISTORY\"\r\n            />);\r\n        return tabMap;\r\n    }\r\n\r\n    historyDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TestGroupSpecificationHistory || [], event.dataState),\r\n            historyDataState: event.dataState\r\n        });\r\n    }\r\n    specDataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TestGroupTestClinicalSpec || [], event.dataState),\r\n            clinicalspecDataState: event.dataState\r\n        });\r\n    }\r\n    addFile = (userInfo, operation, ncontrolCode, screenName, modalName, nflag) => {\r\n        // const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n        // if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n        //     || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n        //     this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName, nflag);\r\n        // } else {\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n        // }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                this.props.addTestFile(userInfo, operation, ncontrolCode, screenName, modalName);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    componentRowClick = (event) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData[\"SelectedComponent\"] = event.testgroupspecsampletype[0];\r\n        const inputParam = {\r\n            testgroupspecsampletype: event.testgroupspecsampletype[0],\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.getTestGroupComponentDetails(inputParam, masterData, this.searchRef);\r\n    }\r\n\r\n    deleteTest = (deleteParam) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const testgrouptest = deleteParam.props.testgrouptest;\r\n                const inputParam = {\r\n                    inputData: {\r\n                        testgrouptest,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        testgroupspecification,\r\n                        ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value,\r\n                        nprojectmastercode:masterData.selectedNode.nprojectmastercode?masterData.selectedNode.nprojectmastercode:-1\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: \"delete\",\r\n                    methodUrl: \"Test\",\r\n                    screenName: \"IDS_TEST\",\r\n                    postParam: {\r\n                        inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                        primaryKeyValue: testgrouptest.ntestgrouptestcode,\r\n                        fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                        masterData, searchFieldList, unchangeList: [\"TestGroupSpecification\", \"SelectedSpecification\",\r\n                            \"SampleType\", \"TreeVersionTemplate\", \"ProductCategory\", \"SelectedTest\", \"Product\",\r\n                            \"AgaramTree\", \"OpenNodes\", \"selectedNode\", \"FocusKey\", \"ActiveKey\", \"SelectedComponent\", \"TestGroupSpecSampleType\"]//, isSingleSelect: true\r\n                    }\r\n                }\r\n\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName: \"IDS_TEST\", operation: \"delete\", selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let masterData = this.props.Login.masterData;\r\n        if (loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"Default\"\r\n                || this.props.Login.operation === 'approve' || this.props.Login.operation === 'complete') {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                selectedRecord = {};\r\n                delete masterData.selectedRecordCopy;      \r\n                 } else {\r\n                loadEsign = false;\r\n                // selectedRecord[\"agree\"] = 4;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason'] = \"\"\r\n\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n            delete masterData.selectedRecordCopy;\r\n            delete masterData.CopyOpenNodes;\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event, caseNo, optional) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (event.target.type === 'checkbox') {\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? optional[0] : optional[1];\r\n                } else if (event.target.type === 'radio') {\r\n                    selectedRecord[event.target.name] = optional;\r\n                    // selectedRecord[\"sfilename\"] = \"\";\r\n                } else {\r\n                    selectedRecord[event.target.name] = event.target.value;\r\n                }\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[event.target.name] = event.target.value;\r\n\r\n                const indexKey = Object.keys(optional)[0];\r\n                const value = Object.values(optional)[0];\r\n                const treeData = {\r\n                    ntreeversiontempcode: value.ntreeversiontempcode,\r\n                    npositioncode: value.nlevelno - 1,\r\n                    sleveldescription: event.target.value,\r\n                    ntemptranstestgroupcode: value.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: \"\",\r\n                    nnextchildcode: value.schildnode !== null ? value.schildnode : -1,\r\n                    ntemplatemanipulationcode: value.ntemplatemanipulationcode,\r\n                    isreadonly: value.ntemplatemanipulationcode > 0 ? true : false,\r\n                    slevelformat: value.slevelformat\r\n                }\r\n                let treetemplatemanipulation = selectedRecord.treetemplatemanipulation || [];\r\n                treetemplatemanipulation[indexKey] = treeData;\r\n                selectedRecord[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    //Rules Engine Functions Start\r\n    ruleflowobject() {\r\n        let object = {};\r\n        //const labelColor = ['#e63109', '#2fb47d', '#eaa203', '#6554c0'];\r\n        //const labelBGColor = ['#fcd7cd', '#e5f8f1', '#fcf3dd', '#e7e6f5'];\r\n       // const borderColor = ['#e6310', '#c6f6e4', '#fde2a4', '#cbc5f7'];\r\n        let groupList = this.props.Login.masterData.SelectedRulesEngine['jsondata'];\r\n        let groupListJoins = this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] &&\r\n            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['groupListJoins'];\r\n        let children = [];\r\n        let parent = [];\r\n        let grandparent = [];\r\n        groupList.map((groupobject, index) => {\r\n            if (groupobject.hasOwnProperty('button_or')) {\r\n                children = [];\r\n                let rulesList = groupobject['button_or'];\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" + ( \r\n                                    (rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label) \r\n                                    || (rule['ngradecode'] && rule['ngradecode'].label ) \r\n                                    || (rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'])\r\n                                    || (rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'] )\r\n                                    || (rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                if(groupList.length===1?rulesList.length>1:true){\r\n                 parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_OR\" })}</div>, children: children }) \r\n                }\r\n            }\r\n            if (groupobject.hasOwnProperty('button_and')) {\r\n                children = [];\r\n                let rulesList = groupobject['button_and'];\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{\r\n\r\n                                (rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                                + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  \r\n                                ( (rule['ndiagnosticcasecode'] && rule['ndiagnosticcasecode'].label)\r\n                                 || (rule['ngradecode'] && rule['ngradecode'].label)\r\n                                 || (rule['ntestgrouptestnumericcode'] && rule['ntestgrouptestnumericcode'])\r\n                                 || (rule['ntestgrouptestcharcode'] && rule['ntestgrouptestcharcode'])\r\n                                 || (rule['ntestgrouptestpredefcode'] && rule['ntestgrouptestpredefcode'].label))\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                if(groupList.length===1?rulesList.length>1:true){\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>, children: children })\r\n                }\r\n            }\r\n            if (groupobject.hasOwnProperty('button_not_button_and')) {\r\n                children = [];\r\n                let rulesList = groupobject['button_not_button_and'];\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label) //+ \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                let notarray = [{ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>, children: children }]\r\n                if(groupList.length===1?rulesList.length>1:true){\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_NOT\" })}</div>, children: notarray })\r\n                }\r\n            }\r\n            if (groupobject.hasOwnProperty('button_not_button_or')) {\r\n                children = []\r\n                let rulesList = groupobject['button_not_button_or']\r\n                rulesList.map((rule, index) => {\r\n                    children.push(\r\n                        {\r\n                            id: index, label: <>{(rule['stestname'].label)// + \" -> \" + (this.props.intl.formatMessage({ id: \"IDS_WITH\" })) \r\n                            + \" -> \" +\r\n                                (rule['orderresulttype'].label) + \" -> \" +\r\n                                (rule['ssymbolname'].label) + \" -> \" +  ( rule['ndiagnosticcasecode']&& rule['ndiagnosticcasecode'].label ||\r\n                                rule['ngradecode']&&rule['ngradecode'].label||  rule['ntestgrouptestnumericcode']&&rule['ntestgrouptestnumericcode']||\r\n                                rule['ntestgrouptestcharcode']&&rule['ntestgrouptestcharcode']|| rule['ntestgrouptestpredefcode']&&rule['ntestgrouptestpredefcode'].label)\r\n\r\n                            }</>\r\n                        }\r\n                    )\r\n                })\r\n                let notarray = [{ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_OR\" })}</div>, children: children }]\r\n                if(groupList.length===1?rulesList.length>1:true){\r\n                parent.push({ id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_NOT\" })}</div>, children: notarray })\r\n                }\r\n            }\r\n        })\r\n\r\n        if (groupListJoins !== undefined) {\r\n            groupListJoins.map((join, index) => {\r\n                let parentjoins = []\r\n                if (join.hasOwnProperty('button_or') && join['button_or'] === true) {\r\n                    let notarray = []\r\n                    parentjoins.push(parent[index])\r\n                    parentjoins.push(parent[index + 1])\r\n                    if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\r\n                        notarray = [{\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_OR\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        }]\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NOT\" })} </div>// 'button_or'\r\n                            , children: notarray\r\n                        })\r\n                    }\r\n                    else {\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_OR\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        })\r\n                    }\r\n                }\r\n                if (join.hasOwnProperty('button_and') && join['button_and'] === true) {\r\n                    let notarray = []\r\n                    parentjoins.push(parent[index])\r\n                    parentjoins.push(parent[index + 1])\r\n                    if (join.hasOwnProperty('button_not') && join['button_not'] === true) {\r\n                        notarray = [{\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_AND\" })} </div>// 'button_or'\r\n                            , children: parentjoins\r\n                        }]\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >\r\n                                {this.props.intl.formatMessage({ id: \"IDS_NOT\" })} </div>// 'button_or'\r\n                            , children: notarray\r\n                        })\r\n                    }\r\n                    else {\r\n                        grandparent.push({\r\n                            id: index, label: <div className=\"btn btn-primary\" >{this.props.intl.formatMessage({ id: \"IDS_AND\" })}</div>// 'button_and'\r\n                            , children: parentjoins\r\n                        })\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n        object = grandparent.length > 0 ?\r\n            {\r\n                id: 0,\r\n                label: <div className=\"btn btn-primary\" >{this.props.Login.masterData.SelectedRulesEngine.srulename} </div>,\r\n                children: grandparent\r\n            }\r\n            : {\r\n                id: 0,\r\n                label: <div className=\"btn btn-primary\" >{this.props.Login.masterData.SelectedRulesEngine.srulename} </div>,\r\n                children: parent.length!==0?parent:children\r\n            }\r\n        return object\r\n    }\r\n    onTabChangeRulesEngine = (tabProps) => {\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['activeTabName'] = tabProps.activeTabName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    tabDetailRulesEngine = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        let jsonuidata = this.props.Login.masterData.SelectedRulesEngine && this.props.Login.masterData.SelectedRulesEngine['jsonuidata'] \r\n        const tabMap = new Map();\r\n        {\r\n            tabMap.set(\"IDS_Test\",\r\n                <DataGrid\r\n                    key=\"testsectionkey\"\r\n                    primaryKeyField=\"nresultusedmaterialcode\"\r\n                    expandField=\"expanded\"\r\n                    handleExpandChange={this.handleExpandChange} \r\n                    dataResult={this.props.Login.masterData.SelectedRulesEngine &&\r\n                        this.props.Login.masterData.SelectedRulesEngine && process(\r\n                            sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testInitiateTests'], \"descending\", \"npkAtestparametercode\")\r\n                            || [],\r\n                            this.state.dataStatetestinitiate\r\n                                ? this.state.dataStatetestinitiate : { skip: 0, take: 10 })} \r\n                    dataState={this.state.dataStatetestinitiate\r\n                        ? this.state.dataStatetestinitiate : { skip: 0, take: 10 }} \r\n                    dataStateChange={this.dataStateChangetestinitiateTab}\r\n\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" } \r\n                    ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    pageable={true} \r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={false}\r\n                    selectedId={0} \r\n                    deleteParam={{ operation: \"delete\" }} \r\n                    hasChild={true}\r\n                    childMappingField={'npkAtestparametercode'}\r\n                    childColumnList={[\r\n                        { \"idsName\": \"IDS_TOSITE\", \"dataField\": \"stositename\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_FROMSITE\", \"dataField\": \"sfromsitename\", \"width\": \"200px\" }\r\n                        \r\n                    ]}\r\n                    childList={this.state.childListMap}\r\n                    activeTabName={\"IDS_Test\"}\r\n                    //gridHeight = {'400px'}\r\n                    isActionRequired={true}\r\n                    actionIcons={[{\r\n                        title: this.props.intl.formatMessage({ id: \"IDS_VIEWPARAMETER\" }),\r\n                        controlname: \"faEye\",\r\n                        hidden: false,\r\n                        objectName: \"view\",\r\n                        onClick: this.viewParameter\r\n\r\n                    }]}\r\n                >\r\n                </DataGrid>); \r\n            tabMap.set(\"IDS_COMMENTS\",\r\n            <DataGrid\r\n                key=\"testsectionkey\"\r\n                primaryKeyField=\"nresultusedmaterialcode\" \r\n                handleExpandChange={this.handleExpandChange} \r\n                dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n                    sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentsTestsTab'], \"descending\", \"nslno\")\r\n                    || [],\r\n                    this.state.dataState\r\n                        ? this.state.dataState : { skip: 0, take: 10 })} \r\n                dataState={this.state.dataState\r\n                    ? this.state.dataState : { skip: 0, take: 10 }} \r\n                dataStateChange={this.dataStateChange} \r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                pageable={true} \r\n                scrollable={'scrollable'}\r\n                hideColumnFilter={false}\r\n                selectedId={0} \r\n                deleteParam={{ operation: \"delete\" }} \r\n                childMappingField={'npkBtestparametercode'} \r\n                extractedColumnList={[\r\n                    { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"spredefinedname\", \"width\": \"200px\" },\r\n                    { \"idsName\": \"IDS_COMMENTSUBTYPE\", \"dataField\": \"scommentsubtype\", \"width\": \"200px\" }, \r\n                    { \"idsName\": \"IDS_COMMENTTYPE\", \"dataField\": \"scommenttype\", \"width\": \"200px\" } ,\r\n                    { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }   \r\n                ]}\r\n                childList={this.state.childListMap2 && this.state.childListMap2}\r\n                activeTabName={\"IDS_COMMENTS\"}\r\n                //gridHeight = {'400px'}\r\n                >\r\n            </DataGrid>\r\n        ); \r\n        tabMap.set(\"IDS_REPEAT\",\r\n        <DataGrid\r\n            key=\"testsectionkey\"\r\n            primaryKeyField=\"nresultusedmaterialcode\"  \r\n            dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n                sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testRepeatTestsTab'], \"descending\", \"npkCtestparametercode\")\r\n                || [],\r\n                this.state.dataStaterepeatTab\r\n                    ? this.state.dataStaterepeatTab : { skip: 0, take: 10 })} \r\n            dataState={this.state.dataStaterepeatTab\r\n                ? this.state.dataStaterepeatTab : { skip: 0, take: 10 }} \r\n            dataStateChange={this.dataStateChangeRepeatTab} \r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            pageable={true} \r\n            scrollable={'scrollable'}\r\n            hideColumnFilter={false}\r\n            selectedId={0} \r\n            deleteParam={{ operation: \"delete\" }}  \r\n            extractedColumnList={[ \r\n                { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_REPEATCOUNT\", \"dataField\": \"nrepeatcountno\", \"width\": \"200px\" }  \r\n\r\n            ]} \r\n            activeTabName={\"IDS_COMMENTS\"}\r\n            //gridHeight = {'400px'}\r\n            >\r\n        </DataGrid>\r\n    ); \r\n    tabMap.set(\"IDS_ENFORCERESULT\",\r\n    <DataGrid\r\n        key=\"testsectionkey\"\r\n        primaryKeyField=\"nresultusedmaterialcode\"  \r\n        dataResult={this.props.Login.masterData.SelectedRulesEngine && process(\r\n            sortData(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testenforceTestsTab'], \"descending\", \"npkDtestparametercode\")\r\n            || [],\r\n            this.state.dataStateChangenforceTab\r\n                ? this.state.dataStateChangenforceTab : { skip: 0, take: 10 })} \r\n        dataState={this.state.dataStateChangenforceTab\r\n            ? this.state.dataStateChangenforceTab : { skip: 0, take: 10 }} \r\n        dataStateChange={this.dataStateChangenforceTab} \r\n        controlMap={this.state.controlMap}\r\n        userRoleControlRights={this.state.userRoleControlRights}\r\n        pageable={true} \r\n        scrollable={'scrollable'}\r\n        hideColumnFilter={false}\r\n        selectedId={0} \r\n        deleteParam={{ operation: \"delete\" }}  \r\n        extractedColumnList={[ \r\n            { \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \r\n            { \"idsName\": \"IDS_PARAMETERS\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_RESULTFLAG\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_RESULTS\", \"dataField\": \"senforceresult\", \"width\": \"200px\" }\r\n        ]} \r\n        activeTabName={\"IDS_COMMENTS\"}\r\n        //gridHeight = {'400px'}\r\n        >\r\n    </DataGrid>\r\n); \r\n        }\r\n        return tabMap;\r\n    }\r\n    dataStateChange = (event, ntestgrouptestparametercode) => {\r\n        let dataStateObject = this.state.dataStateObject || {}\r\n        if (ntestgrouptestparametercode) {\r\n            dataStateObject = {\r\n                ...dataStateObject,\r\n                [ntestgrouptestparametercode]: event.dataState\r\n            }\r\n            this.setState({\r\n                dataStateObject\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                dataState: event.dataState\r\n            });\r\n        }\r\n\r\n    }\r\n    dataStateChangetestRepeat = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestRepeat: event.dataState\r\n        });\r\n    }\r\n    dataStateChangetestEnforce = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestEnforce: event.dataState\r\n        });\r\n    }\r\n    dataStateChangetestinitiateTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStatetestinitiate: event.dataState\r\n        });\r\n    }\r\n    dataStateChangeViewParameter = (event) => {\r\n        this.setState({ \r\n            dataStateChangeViewParameter: event.dataState\r\n        });\r\n    }\r\n    dataStateChangeRepeatTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStaterepeatTab: event.dataState\r\n        });\r\n    } \r\n    dataStateChangenforceTab = (event) => {\r\n        this.setState({\r\n            //  dataResult: process(this.props.Login.queryData, event.dataState),\r\n            dataStateChangenforceTab: event.dataState\r\n        });\r\n    } \r\n    dataStateChangeMain = (event) => {\r\n        this.setState({\r\n            dataResultMain: process(this.props.Login.queryDataMain, event.dataStateMain),\r\n            dataStateMain: event.dataStateMain\r\n        });\r\n    }\r\n    ConfirmDeleteRule = (deleteId) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){ \r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n        }\r\n        else{\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETODELETE\" })); \r\n        }\r\n    }\r\n    handleClickDelete(masterData, ncontrolcode//, modalName\r\n    ) {\r\n        const fieldArray = [];\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupRulesEngine\",\r\n            classUrl: \"testgrouprulesengine\",\r\n            inputData: {\r\n                \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\r\n                \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\r\n                \"userinfo\": this.props.Login.userInfo,\r\n                \"selectedValueForAudit\":{\r\n            sproductcatname:this.state.filterData.nproductcatcode && this.state.filterData.nproductcatcode.label||'NA',\r\n            sproductname:this.state.filterData.nproductcode && this.state.filterData.nproductcode.label||'NA',\r\n            sspecname:this.props.Login.masterData.SelectedSpecification.sspecname||'NA',\r\n            scomponentname:this.props.Login.masterData.SelectedComponent.scomponentname||'NA',\r\n            stestsynonym:this.props.Login.masterData.SelectedTest.stestsynonym||'NA',\r\n            sleveldescription:this.props.Login.masterData.selectedNode.sleveldescription||'NA',\r\n            srulename:this.props.Login.masterData.SelectedRulesEngine.srulename\r\n        }\r\n            },\r\n            operation: \"delete\", //postParam,\r\n            displayName: \"RulesEngine\",\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },// [modalName]: true,\r\n                    operation: 'delete', screenName: \"IDS_RULESENGINE\", id: \"RulesEngine\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, undefined\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n    approveVersion(masterData, nflag, ncontrolcode//, modalName\r\n    ) {\r\n        if (masterData['RulesEngine']&&masterData['RulesEngine'].length > 0) {\r\n            const fieldArray = [];\r\n            const inputParam = {\r\n                methodUrl: \"TestGroupRulesEngine\",\r\n                classUrl: \"testgrouprulesengine\",\r\n                inputData: {\r\n                    \"ntestgrouptestcode\": this.props.Login.masterData.SelectedTest.ntestgrouptestcode,\r\n                    \"ntestgrouprulesenginecode\": this.props.Login.masterData.SelectedRulesEngine.ntestgrouprulesenginecode,\r\n                    \"userinfo\": this.props.Login.userInfo, nflag: nflag,\r\n                    \"selectedValueForAudit\":{\r\n                        sproductcatname:this.state.filterData.nproductcatcode && this.state.filterData.nproductcatcode.label||'NA',\r\n                        sproductname:this.state.filterData.nproductcode && this.state.filterData.nproductcode.label||'NA',\r\n                        sspecname:this.props.Login.masterData.SelectedSpecification.sspecname||'NA',\r\n                        scomponentname:this.props.Login.masterData.SelectedComponent.scomponentname||'NA',\r\n                        stestsynonym:this.props.Login.masterData.SelectedTest.stestsynonym||'NA',\r\n                        sleveldescription:this.props.Login.masterData.selectedNode.sleveldescription||'NA',\r\n                        srulename:this.props.Login.masterData.SelectedRulesEngine.srulename\r\n                    }\r\n                },\r\n                operation: \"approve\", //postParam,\r\n                displayName: \"RulesEngine\",\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },// [modalName]: true,\r\n                        operation: 'approve', screenName: \"IDS_RULESENGINE\", id: \"RulesEngine\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, undefined\r\n                );\r\n            }\r\n        }\r\n        else {\r\n            if(nflag==1)\r\n            { \r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOAPPROVE\" }));  \r\n            }\r\n            else\r\n            { \r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETORETIRE\" }));  \r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    closeModalShow = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let modalParameterPopup = this.props.Login.modalParameterPopup\r\n        let selectedRecord = this.props.Login.selectedRecord || {};\r\n        selectedRecord['srulename'] = \"\"\r\n        if( selectedRecord['ParameterRulesEngine']){\r\n            selectedRecord['ParameterRulesEngine']=[]\r\n        }\r\n        openModalPopup = false;\r\n        modalParameterPopup = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModalPopup, selectedRecord,modalParameterPopup }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onModalSavePredefAlert =()=>{\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode=this.state.currentAlertResultCode||0; \r\n        let currentntestgrouptestpredefcode=this.state.currentntestgrouptestpredefcode||0; \r\n        let bool=this.state.selectedRecord.ParameterRulesEngine.some(x=>x['ntestgrouptestparametercode']===currentAlertResultCode) \r\n        if(bool){\r\n          this.state.selectedRecord.ParameterRulesEngine.map(Parameter=>\r\n              {\r\n                  if(Parameter['ntestgrouptestparametercode']===currentAlertResultCode){ \r\n                      Parameter['additionalInfoUidata']={ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode']}\r\n                      if(selectedRecord['ntestgrouptestpredefsubcode']){\r\n                          if(typeof selectedRecord['ntestgrouptestpredefsubcode']==='string'){\r\n                              Parameter['additionalInfo']=selectedRecord['ntestgrouptestpredefsubcode']\r\n                          }else{\r\n                              Parameter['additionalInfo']=\"\" \r\n                              Parameter['additionalInfo']=selectedRecord['ntestgrouptestpredefsubcode'].map(x=>x.label+\",\").join('\\n')\r\n                                Parameter['additionalInfo']=Parameter['additionalInfo'].substring(0,\r\n                                   Parameter['additionalInfo'].length-1) \r\n                          } \r\n                      } else{\r\n                          Parameter['additionalInfo']=\"\"\r\n                          Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata']\r\n                      }\r\n                      Parameter['ntestgrouptestpredefcode']=currentntestgrouptestpredefcode\r\n                  }\r\n              }\r\n              );  \r\n        } \r\n        const updateInfo = {\r\n          typeName: DEFAULT_RETURN,\r\n          data: { selectedRecord: selectedRecord,showAlertGrid:false}\r\n      }\r\n      this.props.updateStore(updateInfo);\r\n      }\r\n  \r\n\r\n    closeModalShowPredefAlert = () => {\r\n        let showAlertGrid = this.props.Login.showAlertGrid;\r\n        let  selectedRecord=this.props.Login.selectedRecord; \r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        // masterData['RESelectedTest'].forEach(object => {\r\n        //     object['expanded']&&delete object['expanded'];\r\n        //   });\r\n          selectedRecord['ntestgrouptestpredefsubcode'] &&delete selectedRecord['ntestgrouptestpredefsubcode'] \r\n        showAlertGrid = false; \r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showAlertGrid   ,masterData,selectedRecord}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onsavevalidation = (selectedRecord) => {\r\n        let grouplist = selectedRecord[\"groupList\"]\r\n        let hasAll = true;\r\n        for (var i = 0; i < grouplist.length; i++) {\r\n            let rules = grouplist[i]\r\n            for (var j = 0; j < rules.length; j++) {\r\n                let props = []\r\n                if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\r\n                    props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\r\n                }\r\n                else if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 3) {\r\n                    if(rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.PREDEFINED)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestpredefcode\"]; \r\n\r\n                    }\r\n                    else if(rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.CHARACTER)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestcharcode\"]; \r\n\r\n                    }\r\n                    else if (rules[j][\"stestname\"] && rules[j][\"stestname\"]['item']['nparametertypecode'] === parameterType.NUMERIC)\r\n                    {\r\n                        props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ntestgrouptestnumericcode\"]; \r\n\r\n                    } \r\n                    else\r\n                    {\r\n                        if (rules[j][\"orderresulttype\"] && rules[j][\"orderresulttype\"].value === 1) {\r\n                            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ndiagnosticcasecode\"];\r\n                        }\r\n                        else {\r\n                            props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    props = [\"stestname\", \"ssymbolname\", \"orderresulttype\", \"ngradecode\"];\r\n                }\r\n                hasAll = props.every(prop => rules[j].hasOwnProperty(prop));\r\n                if (hasAll === false) {\r\n                    break;\r\n                }\r\n            }\r\n            if (hasAll === false) {\r\n                break;\r\n            }\r\n        }\r\n        return hasAll\r\n    }\r\n    save = () => {\r\n        let inputData = [];\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[]  \r\n\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n \r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n        let testsInvolvedInRules=[]\r\n        let testsNameInvolvedInRules=[]\r\n\r\n        const { selectedRecord } = this.state;\r\n        let rules = []\r\n        //  if (selectedRecord[\"nproductcatcode\"]) {\r\n            if(testInitiateTests.length > 0||testCommentsTests.length > 0||testRepeatTests.length > 0||testenforceTests.length > 0){\r\n        if (selectedRecord[\"groupList\"].length > 0) {\r\n            if (this.onsavevalidation(selectedRecord)) {\r\n                if (selectedRecord[\"srulename\"] && selectedRecord[\"srulename\"] !== \"\" && this.props.Login.action !== 'update'\r\n                    && this.props.Login.action !== 'IDS_ADDTESTCOMMENTS' && this.props.Login.action !== 'IDS_ADDREPORTCOMMENTS'\r\n                    && this.props.Login.action !== 'IDS_ADDTEST' && this.props.Login.action !== 'IDS_ADDSITE'\r\n                    && this.props.Login.action !== 'IDS_ADDPARAMETER'\r\n                ) {\r\n\r\n                    if (selectedRecord[\"groupList\"]) {\r\n                        let groupList = [];\r\n                        let outcomeList = {};\r\n                        groupList = selectedRecord[\"groupList\"];\r\n\r\n                        outcomeList['groupList'] = groupList\r\n                        outcomeList['addGroupList'] = this.props.Login.addGroupList\r\n                        outcomeList['testInitiateTests'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests\r\n                        outcomeList['testCommentsTests'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests\r\n                        outcomeList['testRepeatTests'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests\r\n                        outcomeList['testenforceTests'] = this.props.Login.testenforceTests && this.props.Login.testenforceTests\r\n\r\n                        outcomeList['reportCommentsTests'] = this.props.Login.reportCommentsTests && this.props.Login.reportCommentsTests\r\n                        outcomeList['siteObject'] = this.props.Login.siteObject && this.props.Login.siteObject\r\n                        outcomeList['testCommentObject'] = this.props.Login.testCommentObject && this.props.Login.testCommentObject\r\n                        outcomeList['reportCommentObject'] = this.props.Login.reportCommentObject && this.props.Login.reportCommentObject\r\n                        outcomeList['testInitiateSiteTab'] = this.props.Login.masterData.testInitiateSiteTab && this.props.Login.masterData.testInitiateSiteTab\r\n                        outcomeList['testCommentsTestsTab'] = this.props.Login.masterData.testCommentsTestsTab && this.props.Login.masterData.testCommentsTestsTab\r\n                        outcomeList['reportCommentsTestsTab'] = this.props.Login.reportCommentsTestsTab && this.props.Login.reportCommentsTestsTab\r\n                        outcomeList['testRepeatTestsTab'] =  this.props.Login.masterData['testRepeatTestsTab']&& this.props.Login.masterData['testRepeatTestsTab']\r\n                        outcomeList['testenforceTestsTab'] =  this.props.Login.masterData['testenforceTestsTab']&& this.props.Login.masterData['testenforceTestsTab']\r\n                        outcomeList['PredefinedParameterOptions']=PredefinedParameterOptions\r\n                        // outcomeList['nproductcatcode'] = selectedRecord['nproductcatcode']\r\n                        outcomeList['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode\r\n                        // outcomeList['nallottedspeccode'] = selectedRecord['nallottedspeccode']\r\n                        // outcomeList['ncomponentcode'] = selectedRecord['ncomponentcode'] \r\n                        outcomeList['groupListJoins'] = selectedRecord['groupListJoins']?selectedRecord['groupListJoins']:[]\r\n\r\n                        let ruleEngineLayout = []\r\n                        let ruleEngineLayoutObject = []\r\n                        let groupRuleObject = {}\r\n\r\n                        groupList.map((List) => \r\n                        List.map(x=>{\r\n                            testsInvolvedInRules.push(x.stestname.item.ntestgrouptestcode);\r\n                            testsNameInvolvedInRules.push(x.stestname.item);\r\n                        }) \r\n                        )\r\n                        outcomeList['testsNameInvolvedInRules'] = testsNameInvolvedInRules\r\n                        outcomeList['testsInvolvedInRules'] = testsInvolvedInRules\r\n                        groupList.map((List) => {\r\n                            if (List.hasOwnProperty('button_or') && List['button_or'] === true) {\r\n                                if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\r\n                                    groupRuleObject['button_not_button_or'] = List\r\n                                }\r\n                                else {\r\n                                    groupRuleObject['button_or'] = List\r\n                                }\r\n                                // groupRuleObject['button_or'] = List\r\n                                ruleEngineLayout.push(groupRuleObject)\r\n                                groupRuleObject = {}\r\n                            }\r\n                            if (List.hasOwnProperty('button_and') && List['button_and'] === true) {\r\n                                if (List.hasOwnProperty('button_not') && List['button_not'] === true) {\r\n                                    groupRuleObject['button_not_button_and'] = List\r\n                                }\r\n                                else {\r\n                                    groupRuleObject['button_and'] = List\r\n                                }\r\n                                //  groupRuleObject['button_and'] = List\r\n                                ruleEngineLayout.push(groupRuleObject)\r\n                                groupRuleObject = {}\r\n                            }\r\n                        })\r\n                        ruleEngineLayoutObject = groupList.hasOwnProperty('button_or') && groupList['button_or'] === true ?\r\n                            {\r\n                                'button_or': ruleEngineLayout\r\n                            } : {\r\n                                'button_and': ruleEngineLayout\r\n                            }\r\n                       // console.log('savelist--->', JSON.stringify(ruleEngineLayoutObject))\r\n                        //  inputData['nproductcatcode'] = this.props.Login.masterData.SelectedProductCategory.nproductcatcode\r\n                        //  inputData['nproductcatcode'] = selectedRecord['nproductcatcode'].value\r\n                        inputData['ntestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode\r\n                        // inputData['nallottedspeccode'] = selectedRecord['nallottedspeccode'].value\r\n                        // inputData['ncomponentcode'] = selectedRecord['ncomponentcode'].value\r\n                        inputData['srulename'] = selectedRecord['srulename']\r\n                     //   inputData['nruleexecorder'] = parseInt(selectedRecord['nruleexecorder'])\r\n                        inputData['outcomeList'] = JSON.stringify(outcomeList)\r\n                        inputData['jsondata'] = JSON.stringify(ruleEngineLayout)\r\n                        inputData['userinfo'] = this.props.Login.userInfo\r\n                        inputData['selectedValueForAudit']={\r\n                            sproductcatname:this.state.filterData.nproductcatcode && this.state.filterData.nproductcatcode.label||'NA',\r\n                            sproductname:this.state.filterData.nproductcode && this.state.filterData.nproductcode.label||'NA',\r\n                            sspecname:this.props.Login.masterData.SelectedSpecification.sspecname||'NA',\r\n                            scomponentname:this.props.Login.masterData.SelectedComponent.scomponentname||'NA',\r\n                            stestsynonym:this.props.Login.masterData.SelectedTest.stestsynonym||'NA',\r\n                            sleveldescription:this.props.Login.masterData.selectedNode.sleveldescription||'NA',\r\n                            srulename:selectedRecord['srulename']\r\n                        }\r\n                        if (this.props.Login.operation === 'update') {\r\n                            inputData['ntestgrouprulesenginecode'] = this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode']\r\n                        }\r\n                        const inputParam = {\r\n                            classUrl: \"testgrouprulesengine\",\r\n                            methodUrl: \"TestGroupRulesEngine\",\r\n                            displayName: this.props.Login.inputParam.displayName,\r\n                            inputData: inputData,\r\n                            operation: this.props.Login.operation === 'create' ? 'create' : 'update'\r\n                        }\r\n                        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openPortalModal\");\r\n                    }\r\n                    else {\r\n                        toast.info(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULE\" }));\r\n                    }\r\n\r\n                }\r\n                else {\r\n                    selectedRecord['srulename'] = selectedRecord['srulenamecopy'] || \"\"\r\n                  //  selectedRecord['nruleexecorder'] = selectedRecord['nruleexecordercopy'] || \"\"\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { openModalPopup: true, selectedRecord, action: \"IDS_SAVERULEMODAL\", openmodalsavePopup: true }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                    //   toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERRULESENGINENAME\" }));\r\n\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_COMPLETETHERULETOSAVE\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONERULE\" }));\r\n        } \r\n    }\r\n    else{\r\n        toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONEOUTCOME\" })); \r\n    }\r\n    } \r\n    onOutcomeChange = (comboData, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"outComeList\"] = []\r\n        selectedRecord[\"outComeList\"][index] = []\r\n        selectedRecord[\"outComeList\"][index] = comboData;\r\n        if (selectedRecord[\"outComeList\"][index]) {\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n        }\r\n    }\r\n    writtenRules = (data) => {\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        let grouplist = selectedRecord[\"groupList\"]\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        if (activeTabIndex === 1) {\r\n            let boolean = grouplist.every(x => x.every(y => y['stestname']['item'].ntestgrouptestcode !== data['item'].ntestgrouptestcode)\r\n            )\r\n            if (boolean) {\r\n                return data;\r\n            }\r\n        }\r\n        else {\r\n            let boolean = grouplist.some(x => x.some(y => y['stestname']['item'].ntestgrouptestcode === data['item'].ntestgrouptestcode)\r\n            )\r\n            if (boolean) {\r\n                return data;\r\n            }\r\n        } \r\n    } \r\n    selectedTestRemove = (data) => {\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        if (activeTabIndex === 1) {\r\n            if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode !== data['item'].ntestgrouptestcode) {\r\n                return data;\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.masterData.SelectedTest.ntestgrouptestcode === data['item'].ntestgrouptestcode) {\r\n                return data;\r\n            }\r\n        } \r\n    }\r\n    outComeTestsRemoveFromRules = (data) => { \r\n        let testInitiateTests=this.props.Login.testInitiateTests;\r\n        let boolean = testInitiateTests.every(x => x['ntestgrouptestcode']!== data['item'].ntestgrouptestcode)\r\n            if (boolean) {\r\n                return data;\r\n            } \r\n    }\r\n  \r\n\r\n    addTest = (tabName) => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let action = this.props.Login.action;\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n\r\n        let rulesOption = this.props.Login.masterData.rulesOption || [];\r\n        let testInitiateTestCombo = this.props.Login.masterData.testInitiateTestCombo || [];\r\n        let testCommentsTestCombo = this.props.Login.masterData.testCommentsTestCombo || [];\r\n        let testRepeatTestCombo = this.props.Login.masterData.testRepeatTestCombo || [];\r\n        let testenforceTestCombo = this.props.Login.masterData.testenforceTestCombo || [];\r\n\r\n        if (tabName == 'IDS_Test') {\r\n            testInitiateTestCombo = testInitiateTestCombo.filter(this.selectedTestRemove);\r\n            testInitiateTestCombo = testInitiateTestCombo.filter(this.writtenRules);\r\n            selectedRecord['ParameterRulesEngine']&& delete selectedRecord['ParameterRulesEngine'] \r\n        }\r\n        else if (tabName == 'IDS_COMMENTS') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testCommentsTestCombo.filter(this.selectedTestRemove);\r\n            testCommentsTestCombo = testCommentsTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testCommentsTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testCommentsTestCombo = testCommentsTestCombo\r\n            } else {\r\n                testCommentsTestCombo = [...testCommentsTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else if (tabName == 'IDS_REPEAT') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testRepeatTestCombo.filter(this.selectedTestRemove);\r\n            testRepeatTestCombo = testRepeatTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testRepeatTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testRepeatTestCombo = testRepeatTestCombo\r\n            } else {\r\n                testRepeatTestCombo = [...testRepeatTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else if (tabName == 'IDS_ENFORCERESULT') {\r\n            let selectedTestTempArray = []\r\n            selectedTestTempArray = testenforceTestCombo.filter(this.selectedTestRemove);\r\n            testenforceTestCombo = testenforceTestCombo.filter(this.writtenRules);\r\n            let duplicatePresent = selectedTestTempArray.some(x => testenforceTestCombo.some(y => y['item'].ntestgrouptestcode === x['item'].ntestgrouptestcode))\r\n            if (duplicatePresent) {\r\n                testenforceTestCombo = testenforceTestCombo\r\n            } else {\r\n                testenforceTestCombo = [...testenforceTestCombo, ...selectedTestTempArray];\r\n            }\r\n        }\r\n        else {\r\n\r\n        }\r\n        selectedRecord['ntestgrouptestcode']&& delete selectedRecord['ntestgrouptestcode']\r\n        selectedRecord['nsampletestcommentscode']&&delete selectedRecord['nsampletestcommentscode']\r\n        selectedRecord['ncommentsubtypecode']&&delete selectedRecord['ncommentsubtypecode']\r\n        selectedRecord['ncommenttypecode']&&delete selectedRecord['ncommenttypecode']\r\n        selectedRecord['sgeneralcomments']&&delete selectedRecord['sgeneralcomments']\r\n        selectedRecord['needoutsource']&&delete selectedRecord['needoutsource']\r\n        selectedRecord['sdescription']&&delete selectedRecord['sdescription']\r\n        selectedRecord['ntestgrouptestparametercode']&&delete selectedRecord['ntestgrouptestparametercode']\r\n        selectedRecord['senforceresult']&&delete selectedRecord['senforceresult']\r\n        selectedRecord['ngradecode']&&delete selectedRecord['ngradecode']\r\n        selectedRecord['nfromsitecode']&&delete selectedRecord['nfromsitecode']\r\n        selectedRecord['ntositecode']&&delete selectedRecord['ntositecode']\r\n        selectedRecord['nrepeatcountno']&&delete selectedRecord['nrepeatcountno']\r\n\r\n        if (this.props.Login.addGroupList.length > 0) {\r\n            action = \"IDS_ADDTEST\"\r\n            openModalPopup = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup,\r\n                    modalParameterPopup: false,\r\n                    action,\r\n                    selectedRecord,\r\n                    openmodalsavePopup: false,\r\n                    testInitiateTestCombo,\r\n                    testCommentsTestCombo,\r\n                    testRepeatTestCombo,\r\n                    testenforceTestCombo\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULETOADDOUTCOME\" }));\r\n        }\r\n\r\n    }\r\n    onRuleChange = (comboData, fieldName, groupIndex, index) => {\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[] \r\n        const { selectedRecord } = this.state;\r\n        this.clearSelectedRule(selectedRecord, index); \r\n        if(selectedRecord[\"groupList\"][groupIndex][index][fieldName]&&\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName].value!==comboData.value)\r\n        {\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']&& delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ngradecode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']  \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']   \r\n        } \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;  \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName]['nparenttestgrouptestcode'] = this.props.Login.masterData.SelectedTest.ntestgrouptestcode;  \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName]['nparentstestname'] = this.props.Login.masterData.SelectedTest.stestname;  \r\n        if(selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'])\r\n        {\r\n            if(selectedRecord[\"groupList\"][groupIndex][index]['orderresulttype'].value === 3)\r\n            {\r\n                let nparametertypecode=selectedRecord[\"groupList\"][groupIndex][index][fieldName]['item']['nparametertypecode'] \r\n                 if(nparametertypecode===parameterType.PREDEFINED)\r\n                {\r\n                    this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index],groupIndex,index,PredefinedParameterOptions,selectedRecord, this.props.Login.masterData, this.props.Login.userInfo) \r\n                }\r\n                else{\r\n                    if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                        this.setState({\r\n                            selectedRecord,\r\n                            groupIndex,\r\n                            index\r\n                        });\r\n                    }\r\n                }    \r\n            }      else{\r\n                if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                    this.setState({\r\n                        selectedRecord,\r\n                        groupIndex,\r\n                        index\r\n                    });\r\n                }\r\n            }  \r\n        }\r\n        else{\r\n            if (selectedRecord[\"groupList\"][groupIndex][index][fieldName]) {\r\n                this.setState({\r\n                    selectedRecord,\r\n                    groupIndex,\r\n                    index\r\n                });\r\n            }\r\n        }  \r\n    }\r\n    onRuleInputChange = (event, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = event.target.value;\r\n        selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = event.target.value; \r\n        this.setState({ selectedRecord });\r\n    }\r\n    onRuleNumericInputOnChange = (event, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        if(groupIndex===undefined&&index===undefined)\r\n        {\r\n            selectedRecord[fieldName] =  event;\r\n            this.setState({ selectedRecord }); \r\n        } \r\n        else\r\n        {\r\n            if(event!==0){ \r\n                selectedRecord[\"groupList\"][groupIndex][index][fieldName] =  event;\r\n                selectedRecord[\"groupList\"][groupIndex][index]['sfinal']=  event;\r\n                this.setState({ selectedRecord });\r\n            } \r\n        } \r\n    }\r\n    onMasterDataChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        let PredefinedParameterOptions= this.props.Login.masterData.PredefinedParameterOptions||[]  \r\n        let isResultorOrderType = [];\r\n        let optionsByRule = [];\r\n        if (this.state.optionsByRule && this.state.optionsByRule.length > 0) {\r\n            optionsByRule = this.state.optionsByRule\r\n        }\r\n        else {\r\n            optionsByRule[groupIndex] = [];\r\n            optionsByRule[groupIndex][index] = [];\r\n        }\r\n        if (this.state.isResultorOrderType && this.state.isResultorOrderType.length > 0) {\r\n            isResultorOrderType = this.state.isResultorOrderType\r\n        }\r\n        else {\r\n            isResultorOrderType[groupIndex] = [];\r\n            isResultorOrderType[groupIndex][index] = [];\r\n        }\r\n        if (fieldName !== 'ndiagnosticcasecode' && fieldName !== 'ngradecode'&&\r\n        fieldName !== 'ntestgrouptestpredefcode' && fieldName !== 'ntestgrouptestcharcode' && fieldName !== 'ntestgrouptestnumericcode') {\r\n            if(selectedRecord[\"groupList\"][groupIndex][index][fieldName]&&\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName].value!==comboData.value)\r\n        {\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']&& delete selectedRecord[\"groupList\"][groupIndex][index]['ndiagnosticcasecode']\r\n            selectedRecord[\"groupList\"][groupIndex][index]['ngradecode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ngradecode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestpredefcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestcharcode'] \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ntestgrouptestnumericcode']  \r\n            selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']&&delete selectedRecord[\"groupList\"][groupIndex][index]['ssymbolname']   \r\n        } \r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData; \r\n            if (isResultorOrderType[groupIndex] === undefined) {\r\n                isResultorOrderType[groupIndex] = [];\r\n                isResultorOrderType[groupIndex][index] = [];\r\n            }\r\n            isResultorOrderType[groupIndex][index] = comboData.value\r\n            if (optionsByRule[groupIndex] === undefined) {\r\n                optionsByRule[groupIndex] = [];\r\n                optionsByRule[groupIndex][index] = [];\r\n            }\r\n            if (isResultorOrderType[groupIndex][index] === 1) { \r\n                optionsByRule[groupIndex][index] = this.props.Login.masterData.DiagnosticCaseList\r\n            }\r\n            else if (isResultorOrderType[groupIndex][index] === 3) { \r\n                let nparametertypecode=selectedRecord[\"groupList\"][groupIndex][index]['stestname']['item']['nparametertypecode'] \r\n                 if(nparametertypecode===parameterType.PREDEFINED)\r\n                {\r\n                    this.props.getParameterResultValue(selectedRecord[\"groupList\"][groupIndex][index],groupIndex,index,PredefinedParameterOptions,selectedRecord, this.props.Login.masterData, this.props.Login.userInfo) \r\n                } \r\n                else\r\n                {\r\n                    optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList \r\n                }\r\n            }\r\n            else { \r\n                optionsByRule[groupIndex][index] = this.props.Login.masterData.GradeList\r\n            }\r\n            this.setState({ selectedRecord, isResultorOrderType, optionsByRule });\r\n        } \r\n        else {\r\n            selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData; \r\n            selectedRecord[\"groupList\"][groupIndex][index]['sfinal'] = comboData.label; \r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    addRule = (type, groupIndex) => {\r\n        const { selectedRecord } = this.state;\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n        const addGroupList = this.props.Login.addGroupList || [];\r\n        const arrayLength = addGroupList[groupIndex];\r\n        addGroupList[groupIndex] = arrayLength + 1;\r\n        selectedRecord[\"groupList\"][groupIndex][arrayLength] = {};\r\n        viewColumnListByRule = this.props.Login.viewColumnList || this.props.Login.databaseviewList;;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addGroupList,\r\n                viewColumnListByRule,\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n\r\n    addComments = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n        let action = this.props.Login.action;\r\n        let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\r\n        let testparameter = this.props.Login.masterData.testCommentsTestCombo || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestgrouptestcode'] = {}\r\n        selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => { return x.value === selectedParameterRulesEngine.ntestgrouptestcode })[0]\r\n\r\n        delete selectedRecord['nsampletestcommentscode']\r\n        delete selectedRecord['ncommentsubtypecode']\r\n        delete selectedRecord['ncommenttypecode']\r\n        delete selectedRecord['sgeneralcomments']\r\n        delete selectedRecord['sdescription']\r\n\r\n\r\n        if (this.props.Login.addGroupList.length > 0) {\r\n            if (this.props.Login.activeTabIndex === 2) {\r\n                action = \"IDS_ADDTESTCOMMENTS\"\r\n            }\r\n            else {\r\n                action = \"IDS_ADDREPORTCOMMENTS\"\r\n            }\r\n            openModalPopup = true;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup,\r\n                    action,\r\n                    selectedRecord,\r\n                    openmodalsavePopup: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLEASEADDRULETOADDOUTCOME\" }));\r\n        }\r\n\r\n    }\r\n    addModalSite = () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;\r\n\r\n        let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\r\n        let testparameter = this.props.Login.masterData.testInitiateTestCombo || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestgrouptestcode'] = {}\r\n        selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => { return x.value === selectedParameterRulesEngine.ntestgrouptestcode })[0]\r\n        selectedRecord['nfromsitecode']&&delete selectedRecord['nfromsitecode']\r\n        selectedRecord['ntositecode']&&delete selectedRecord['ntositecode']\r\n\r\n        openModalPopup = true;\r\n        let action = this.props.Login.action;\r\n        action = \"IDS_ADDSITE\"\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord,\r\n                openModalPopup,\r\n                action,\r\n                openmodalsavePopup: false\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onGradeEvent = (parameterResults, index, parameter) => {\r\n        if (parameterResults.length > 0 && parameterResults[index] !== undefined && parameterResults[index].sresult !== null) {\r\n            let selectedRecord = this.state.selectedRecord || [];\r\n            let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\r\n            if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n                selectedResultGrade[index] = {\r\n                    ngradecode: parameterResults[index].sresult !== \"\" ?\r\n                        numericGrade(parameter, numberConversion(parseFloat(parameterResults[index].sresult), parseInt(parameter.nroundingdigits))) : -1\r\n                };\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n                if (parameterResults[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: parameterResults[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 0 };\r\n                }\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n                if (parameterResults[index].sresult !== null && parameterResults[index].sresult.trim() !== \"\") { \r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: -1 };\r\n                }\r\n            } \r\n            selectedRecord.selectedResultGrade = selectedResultGrade;\r\n\r\n            this.setState({\r\n                selectedRecord\r\n            }); \r\n        }\r\n    }\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n    }\r\n    addParameter= () => {\r\n        let openModalPopup = this.props.Login.openModalPopup;  \r\n        let isServiceNeed=this.props.Login.isServiceNeed===undefined||this.props.Login.isServiceNeed===true?true:false ;\r\n        let selectedParameterRulesEngine = this.props.Login.masterData.selectedParameterRulesEngine || [];\r\n        let testparameter = this.props.Login.masterData.testInitiateTestCombo || [];\r\n        let selectedRecord = this.props.Login.selectedRecord || {}\r\n        selectedRecord['ntestgrouptestpredefsubcode'] &&delete selectedRecord['ntestgrouptestpredefsubcode'] \r\n        selectedRecord['ntestgrouptestcode'] = {}\r\n        selectedRecord['ntestgrouptestcode'] = testparameter.filter(x => \r\n            { return x.value === selectedParameterRulesEngine.ntestgrouptestcode })[0]\r\n        selectedRecord['ntestgrouprulesenginecode']=this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode']?\r\n        this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode']:0;\r\n        selectedRecord['ParameterRulesEngine']&& delete selectedRecord['ParameterRulesEngine'] \r\n    //    if(isServiceNeed){\r\n            this.props.getParameterRulesEngine(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo,\r\n                this.state.activeTabIndex,\"IDS_ADDPARAMETER\")\r\n        // }else{\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             openModalPopup: true,\r\n        //                 modalParameterPopup:true,\r\n        //                 // masterData: {\r\n        //                 //     ...masterData,\r\n        //                 //     ...response.data,\r\n        //                 //     paremterResultcode\r\n\r\n        //                 // },\r\n        //                 // selectedRecord: {\r\n        //                 //     ...selectedRecord,\r\n        //                 //     additionalInfo: additionalInfo.length > 0 ? additionalInfo : [],\r\n        //                 //     selectedResultGrade: selectedResultGrade,\r\n        //                 //     ParameterRulesEngine: response.data.TestGroupTestParameterRulesEngine\r\n        //                 // },\r\n        //               ///  loading: false,\r\n        //                 action:\"IDS_ADDPARAMETER\",\r\n        //                 openmodalsavePopup:false\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        \r\n     \r\n        // openModalPopup = true;\r\n        // let action = this.props.Login.action;\r\n        // action = \"IDS_ADDPARAMETER\"\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: {\r\n        //         selectedRecord,\r\n        //         openModalPopup,\r\n        //         action,\r\n        //         modalParameterPopup :true,\r\n        //         openmodalsavePopup: false\r\n        //     }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n    deletetestparameter = (deleteparameter) => { \r\n        let masterData = this.props.Login.masterData || {};  \r\n        masterData['testParameter'].map(test=>{\r\n            if(test['ParameterRulesEngine']){\r\n                let parameters=test['ParameterRulesEngine'];\r\n                let tempparameters=[...test['ParameterRulesEngine']]\r\n                tempparameters.map((param,index)=>{\r\n                    if(param['ntestgrouptestparametercode']===deleteparameter['ntestgrouptestparametercode']){\r\n                        //delete parameters[index];\r\n                        let removeIndex=parameters.findIndex(x=>x['ntestgrouptestparametercode']===param['ntestgrouptestparametercode'])\r\n    \r\n                        parameters.splice(removeIndex,1);\r\n                        sortData(test['ParameterRulesEngine'],'ascending','slNo').map((param,index)=>{\r\n                            param['slNo']=index+1;\r\n                        })\r\n                    }\r\n                })\r\n            \r\n            } \r\n        }); \r\n        \r\n        this.setState({masterData});\r\n    }\r\n    modalsaveClick = () => {\r\n        let needoutsource = this.props.Login.needoutsource || {};\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let masterData = this.props.Login.masterData || {};\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n\r\n\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n        let testInitiateTestsTemp = [];\r\n        let testCommentsTestsTemp = [];\r\n        let reportCommentsTestsTemp = [];\r\n        let testInitiateSiteTemp = [];\r\n\r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab || []; \r\n\r\n\r\n        let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab || [];\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab || [];\r\n\r\n        let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\r\n        let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\r\n        let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\r\n\r\n\r\n        let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\r\n        let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\r\n        let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\r\n\r\n        let updateInfo = {}\r\n        if (this.props.Login.action === 'IDS_ADDTEST') {\r\n            let npkAtestparametercode = 0;\r\n            let npkBtestparametercode = 0;\r\n            let npkCtestparametercode = 0;\r\n            let npkDtestparametercode = 0;\r\n            if (this.props.Login.activeTabIndex === 1) {\r\n                let isduplicate = {}\r\n                isduplicate = testInitiateTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameter'] = {}\r\n                    npkAtestparametercode = testInitiateTests.length>0?Math.max(...testInitiateTests.map(x => x.npkAtestparametercode)) : 0;\r\n                    npkAtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkAtestparametercode'] = npkAtestparametercode \r\n                    // selectedRecord['ParameterRulesEngine']=selectedRecord['ParameterRulesEngine'].filter(param=>param['sresult']&&param['sresult']!==\"\");\r\n                    //  let slNo=1;\r\n                    // selectedRecord['ParameterRulesEngine']\r\n                    //      .map((resultData) => {\r\n                    //         if (resultData.nparametertypecode===1) { \r\n                    //             resultData[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                    //             numericGrade(resultData, resultData[\"sfinal\"]) : -1;\r\n                    //          }\r\n                    //         else if (resultData.nparametertypecode===2)\r\n                    //          {\r\n                    //             resultData[\"ngradecode\"] = resultData.ngradecode; \r\n                    //             resultData[\"salertmessage\"] = resultData.salertmessage&&resultData.salertmessage;\r\n                    //             resultData[\"additionalInfo\"] = resultData['additionalInfo'];\r\n                    //             resultData[\"additionalInfoUidata\"] = resultData['additionalInfoUidata']===undefined?\"\":\r\n                    //             resultData['additionalInfoUidata']; \r\n                    //             resultData[\"ntestgrouptestpredefcode\"]=resultData['ntestgrouptestpredefcode']\r\n                    //             resultData[\"sresultcomment\"]=resultData['sresultcomment']  \r\n                    //          } \r\n                    //          else if (resultData.nparametertypecode===3)\r\n                    //          {\r\n                    //             resultData[\"ngradecode\"] = resultData.sresult&&resultData.sresult.trim() === \"\" ? -1 : grade.FIO; \r\n                    //          }\r\n                    //          else if (resultData.nparametertypecode===4)\r\n                    //          {\r\n                    //             resultData[\"ngradecode\"] = resultData.sresult&&resultData.sresult.trim() === \"\" ? -1 : grade.FIO; \r\n                    //          }   \r\n                    //          resultData[\"slNo\"]=slNo;\r\n                    //          slNo++;\r\n                    //     });\r\n                    // selectedRecord['ntestgrouptestcode'].item['ParameterRulesEngine']=sortData(selectedRecord['ParameterRulesEngine'],'descending','slNo')\r\n                    if( selectedRecord['ntestgrouptestcode'].item['nrepeatcountno']){\r\n                        selectedRecord['ntestgrouptestcode'].item['nrepeatcountno']=0;\r\n                    } \r\n                    selectedRecord['ntestgrouptestcode'].item['ParameterRulesEngine']&&\r\n                    delete selectedRecord['ntestgrouptestcode'].item['ParameterRulesEngine']\r\n                    testInitiateTests.push({...selectedRecord['ntestgrouptestcode'].item,\r\n                    \"nneedsample\":selectedRecord['nneedsample']===3?3:4});\r\n                    masterData['testParameter'] = sortData(testInitiateTests, 'descending', 'npkAtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = {...selectedRecord['ntestgrouptestcode'].item,\"nneedsample\":selectedRecord['nneedsample']?3:4}\r\n                    delete selectedRecord['ntestgrouptestcode'];\r\n                    delete selectedRecord['nneedsample'];\r\n\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n\r\n            }\r\n            if (this.props.Login.activeTabIndex === 2) {\r\n                let isduplicate = {}\r\n                isduplicate = testCommentsTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testParameterComments'] = {}\r\n                    npkBtestparametercode = testCommentsTests.length>0?Math.max(...testCommentsTests.map(x => x.npkBtestparametercode)) : 0;\r\n                    npkBtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkBtestparametercode'] = npkBtestparametercode\r\n                    selectedRecord['ntestgrouptestcode'].item['sdescription'] = selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-'\r\n                    testCommentsTests.push(selectedRecord['ntestgrouptestcode'].item);\r\n                    masterData['testParameterComments'] = sortData(testCommentsTests, 'descending', 'npkBtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    //delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            if (this.props.Login.activeTabIndex === 3) {\r\n                let isduplicate = {}\r\n                isduplicate = testRepeatTests.filter(x => x.ntestgrouptestcode ===\r\n                    selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                if (isduplicate.length === 0) {\r\n                    masterData['testRepeat'] = {}\r\n                    npkCtestparametercode = testRepeatTests.length>0? Math.max(...testRepeatTests.map(x => x.npkCtestparametercode)) : 0;\r\n                    npkCtestparametercode++;\r\n                    selectedRecord['ntestgrouptestcode'].item['npkCtestparametercode'] = npkCtestparametercode\r\n                    selectedRecord['ntestgrouptestcode'].item['nrepeatcountno'] = selectedRecord['nrepeatcountno']?selectedRecord['nrepeatcountno']:1\r\n                    testRepeatTests.push({...selectedRecord['ntestgrouptestcode'].item,\r\n                    \"nneedsample\":4});\r\n                    masterData['testRepeatTestsTab'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode')\r\n                    masterData['testRepeat'] = sortData(testRepeatTests, 'descending', 'npkCtestparametercode')\r\n                    masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            if (this.props.Login.activeTabIndex === 4) {\r\n                let isduplicate = {}\r\n                // isduplicate = testenforceTests.filter(x => x.ntestgrouptestcode ===\r\n                //     selectedRecord['ntestgrouptestcode'].item['ntestgrouptestcode'])\r\n                    isduplicate=testenforceTests.some(x=>selectedRecord['ntestgrouptestcode'].value===x.ntestgrouptestcode&&selectedRecord['ntestgrouptestparametercode'].value===x.ntestgrouptestparametercode)\r\n\r\n                if (!isduplicate) { \r\n                    masterData['testenforceTests'] = {}\r\n                    npkDtestparametercode = testenforceTests.length>0? Math.max(...testenforceTests.map(x => x.npkDtestparametercode)) : 0;\r\n                    npkDtestparametercode++;\r\n                    // selectedRecord['ntestgrouptestcode'].item['sparametersynonym'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label\r\n                    // selectedRecord['ntestgrouptestcode'].item['ngradecode'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value\r\n                    // selectedRecord['ntestgrouptestcode'].item['sgradename'] = selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label\r\n                    // selectedRecord['ntestgrouptestcode'].item['ntestgrouptestparametercode'] = selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value\r\n                    // selectedRecord['ntestgrouptestcode'].item['senforceresult'] = selectedRecord['senforceresult'] && selectedRecord['senforceresult']\r\n                    let object={...selectedRecord['ntestgrouptestcode'].item,\r\n                    'sparametersynonym':selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].label,\r\n                    'ngradecode':selectedRecord['ngradecode'] && selectedRecord['ngradecode'].value,\r\n                    'sgradename': selectedRecord['ngradecode'] && selectedRecord['ngradecode'].label,\r\n                    'ntestgrouptestparametercode':selectedRecord['ntestgrouptestparametercode'] && selectedRecord['ntestgrouptestparametercode'].value,\r\n                    'senforceresult':selectedRecord['senforceresult'] && selectedRecord['senforceresult'],\r\n                'npkDtestparametercode':npkDtestparametercode}\r\n                   // selectedRecord['ntestgrouptestcode'].item['npkDtestparametercode'] = npkDtestparametercode\r\n                    testenforceTests.push(object);\r\n                    masterData['testenforceTestsTab'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode') \r\n                    masterData['testenforceTests'] = sortData(testenforceTests, 'descending', 'npkDtestparametercode')\r\n                    //  masterData['selectedParameterRulesEngine'] = selectedRecord['ntestgrouptestcode'].item\r\n                    delete selectedRecord['ntestgrouptestcode']\r\n                }\r\n                else {\r\n                    return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYEXISTS\" }));\r\n                }\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                   \r\n                    masterData,\r\n                    testInitiateTests,\r\n                    testCommentsTests,\r\n                    reportCommentsTests,\r\n                    npkAtestparametercode,\r\n                    npkBtestparametercode,\r\n                    npkCtestparametercode,\r\n                    testInitiateTestOptions,\r\n                    testInitiateTestdeletedOptions,\r\n                    selectedRecord,\r\n                    testRepeatTests,\r\n                    testenforceTests\r\n                }\r\n            }\r\n        }\r\n        if(this.props.Login.action === 'IDS_ADDPARAMETER'){\r\n            let selectedntestgrouptestcode=masterData.selectedParameterRulesEngine.ntestgrouptestcode;\r\n            let selectedParameterRulesEngine=masterData.selectedParameterRulesEngine.ParameterRulesEngine; \r\n            selectedRecord['ParameterRulesEngine']=selectedRecord['ParameterRulesEngine'].filter(param=>param['sresult']&&param['sresult']!==\"\");\r\n          let slNo=selectedParameterRulesEngine===undefined||(selectedParameterRulesEngine&&selectedParameterRulesEngine.length===0)?1:selectedParameterRulesEngine.length+1;\r\n            selectedRecord['ParameterRulesEngine']\r\n                         .map((resultData) => {\r\n                            if (resultData.nparametertypecode===1) { \r\n                                resultData[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                numericGrade(resultData, resultData[\"sresult\"]) : -1;\r\n\r\n\r\n                                resultData[\"sresult\"] = resultData.sresult;\r\n                                resultData[\"sfinal\"] = resultData.sresult !== \"\" ?\r\n                                        numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                resultData[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                        numericGrade(resultData, resultData[\"sfinal\"]) : -1;\r\n\r\n                             }\r\n                            else if (resultData.nparametertypecode===2)\r\n                             {\r\n                                resultData[\"ngradecode\"] = resultData.ngradecode; \r\n                                resultData[\"salertmessage\"] = resultData.salertmessage&&resultData.salertmessage;\r\n                                resultData[\"additionalInfo\"] = resultData['additionalInfo'];\r\n                                resultData[\"additionalInfoUidata\"] = resultData['additionalInfoUidata']===undefined?\"\":\r\n                                resultData['additionalInfoUidata']; \r\n                                resultData[\"ntestgrouptestpredefcode\"]=resultData['ntestgrouptestpredefcode']\r\n                                resultData[\"sresultcomment\"]=resultData['sresultcomment']  \r\n                                resultData[\"sresultpredefinedname\"]=resultData['sresultpredefinedname']  \r\n                                resultData[\"sfinal\"]=resultData['sfinal']   \r\n\r\n                             } \r\n                             else if (resultData.nparametertypecode===3)\r\n                             {\r\n                                resultData[\"sresult\"] = resultData.sresult;\r\n                                resultData[\"sfinal\"] = resultData.sresult; \r\n                                resultData[\"ngradecode\"] = resultData.sresult&&resultData.sresult.trim() === \"\" ? -1 : ResultEntry.RESULTSTATUS_FIO; \r\n\r\n                             }\r\n                             else if (resultData.nparametertypecode===4)\r\n                             {\r\n                                resultData[\"ngradecode\"] = resultData.sresult&&resultData.sresult.trim() === \"\" ? -1 : ResultEntry.RESULTSTATUS_FIO; \r\n                             }   \r\n                             resultData['sgradename']=this.props.Login.masterData.GradeValues[resultData[\"ngradecode\"]][0]['sgradename'] \r\n                            resultData[\"slNo\"]=slNo;\r\n                         slNo++;\r\n                        });   \r\n                        masterData['testParameter'].map((param) => { \r\n                                if (param['ntestgrouptestcode'] ===selectedntestgrouptestcode) {\r\n                                    if(param['ParameterRulesEngine']){ \r\n                                        param['ParameterRulesEngine']= param['ParameterRulesEngine'].concat(sortData(selectedRecord['ParameterRulesEngine'],'descending','slNo'));\r\n\r\n                                    }else{\r\n                                        param['ParameterRulesEngine']= sortData(selectedRecord['ParameterRulesEngine'],'descending','slNo');\r\n\r\n                                    }\r\n                                }\r\n                            }); \r\n                            testInitiateTests=masterData['testParameter']\r\n                            updateInfo = {\r\n                                typeName: DEFAULT_RETURN,\r\n                                data: {\r\n                                    openModalPopup: false,\r\n                                    masterData,\r\n                                    testInitiateTests,\r\n                                    modalParameterPopup:false ,\r\n                                    isServiceNeed:false\r\n                                }\r\n                            }\r\n        }\r\n        if (selectedRecord['nsampletestcommentscode'] || selectedRecord['sgeneralcomments']\r\n        ) {\r\n            masterData['testComments'] = {}\r\n            let npKAsampletestcommentscode = 0;\r\n            let nslno = 0;\r\n\r\n            let object = {\r\n                ncommentsubtypecode: selectedRecord['ncommentsubtypecode'],\r\n                scommentsubtype: selectedRecord['ncommentsubtypecode']['label'],\r\n                stestsynonym: selectedRecord['ntestgrouptestcode']['label'], \r\n                ncommenttypecode: selectedRecord['ncommenttypecode']['value'],\r\n                scommenttype: selectedRecord['ncommenttypecode']['label'],\r\n                nsampletestcommentscode: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'] : -1,\r\n                // spredefinedname: selectedRecord['nsampletestcommentscode'] ? selectedRecord['nsampletestcommentscode'].label : \"-\",\r\n                // sgeneralcomments: selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\r\n                spredefinedname:selectedRecord['nsampletestcommentscode']? selectedRecord['nsampletestcommentscode'].label:\r\n                selectedRecord['sgeneralcomments'] ? selectedRecord['sgeneralcomments'] : \"-\",\r\n                scomments: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-',\r\n                sdescription: selectedRecord['sdescription'] ? selectedRecord['sdescription'] : '-'  \r\n                , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym,\r\n                ntestgrouptestcode: masterData.selectedParameterRulesEngine.ntestgrouptestcode,\r\n                npkBtestparametercode:masterData.selectedParameterRulesEngine.npkBtestparametercode\r\n            }\r\n            nslno= testCommentsTestsTab.length>0? Math.max(...testCommentsTestsTab.map(x => x.nslno)):0; \r\n            nslno++;\r\n            if (testCommentObject.hasOwnProperty(masterData.selectedParameterRulesEngine.npkBtestparametercode)) {\r\n                npKAsampletestcommentscode = Math.max(...testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode].map(x => x.npKAsampletestcommentscode));\r\n                npKAsampletestcommentscode++;\r\n                object = { ...object, npKAsampletestcommentscode: npKAsampletestcommentscode,nslno:nslno }\r\n                testCommentsTestsTemp = testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode]\r\n                testCommentsTestsTemp.push(object);\r\n                testCommentsTestsTab.push(object);\r\n                let commentsArrayIndex=testCommentsTests.findIndex(x=>x.npkBtestparametercode===masterData.selectedParameterRulesEngine.npkBtestparametercode)\r\n                testCommentsTests[commentsArrayIndex]['commentsArray']=[];\r\n                testCommentsTests[commentsArrayIndex]['commentsArray']=sortData(testCommentsTestsTemp, 'ascending', 'npKAsampletestcommentscode')\r\n                testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode')\r\n                delete selectedRecord['nsampletestcommentscode']\r\n                delete selectedRecord['ncommentsubtypecode']\r\n                delete selectedRecord['ncommenttypecode']\r\n                delete selectedRecord['sgeneralcomments']\r\n            }\r\n            else {\r\n                npKAsampletestcommentscode++;\r\n                object = { ...object, npKAsampletestcommentscode: npKAsampletestcommentscode,nslno:nslno }\r\n                testCommentsTestsTemp.push(object);\r\n                testCommentsTestsTab.push(object);\r\n                let commentsArrayIndex=testCommentsTests.findIndex(x=>x.npkBtestparametercode===masterData.selectedParameterRulesEngine.npkBtestparametercode)\r\n                testCommentsTests[commentsArrayIndex]['commentsArray']=[];\r\n                testCommentsTests[commentsArrayIndex]['commentsArray']=sortData(testCommentsTestsTemp, 'ascending', 'npKAsampletestcommentscode')\r\n                testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = sortData(testCommentsTestsTemp, 'descending', 'npKAsampletestcommentscode')\r\n                delete selectedRecord['nsampletestcommentscode']\r\n                delete selectedRecord['ncommentsubtypecode']\r\n                delete selectedRecord['ncommenttypecode']\r\n                delete selectedRecord['sgeneralcomments']\r\n            }\r\n            masterData['testComments'] = testCommentObject\r\n            masterData['testCommentsTestsTab'] = testCommentsTestsTab \r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    testCommentObject, \r\n                    npKAsampletestcommentscode,\r\n                    selectedRecord\r\n                }\r\n            }\r\n        }\r\n        if (selectedRecord['nfromsitecode'] && selectedRecord['ntositecode']) {\r\n          \r\n            if(selectedRecord['nfromsitecode'].value!==selectedRecord['ntositecode'].value){\r\n           \r\n            let siteseqnumber = 0;\r\n            if (siteObject.hasOwnProperty(masterData.selectedParameterRulesEngine.npkAtestparametercode)) {\r\n                let isalreadyExist=siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode].some(x=>selectedRecord['nfromsitecode'].value===x.nfromsitecode&&selectedRecord['ntositecode'].value===x.ntositecode)\r\n                if(!isalreadyExist){\r\n                    masterData['testSite'] = {}\r\n                siteseqnumber = Math.max(...siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode].map(x => x.npksitecode));\r\n                siteseqnumber++;\r\n                let object = {\r\n                    npksitecode: siteseqnumber, sfromsitename: selectedRecord['nfromsitecode'].label, stositename: selectedRecord['ntositecode'].label,\r\n                    nfromsitecode: selectedRecord['nfromsitecode'].value, ntositecode: selectedRecord['ntositecode'].value\r\n                    , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym, npkAtestparametercode: masterData.selectedParameterRulesEngine.ntestgrouptestcode\r\n                }\r\n                testInitiateSiteTemp = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode]\r\n                testInitiateSiteTemp.push(object);\r\n                testInitiateSiteTab.push(object);\r\n                siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode')\r\n                delete selectedRecord['ntestgrouptestcode']\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            else\r\n            {\r\n                return toast.warn(this.props.intl.formatMessage({ id: \"IDS_FROMANDTOSITEALREADYEXIST\" }));  \r\n            }\r\n\r\n            }\r\n            else {\r\n                masterData['testSite'] = {}\r\n                siteseqnumber++;\r\n                let object = {\r\n                    npksitecode: siteseqnumber, sfromsitename: selectedRecord['nfromsitecode'].label, stositename: selectedRecord['ntositecode'].label,\r\n                    nfromsitecode: selectedRecord['nfromsitecode'].value, ntositecode: selectedRecord['ntositecode'].value\r\n                    , stestparametersynonym: masterData.selectedParameterRulesEngine.stestparametersynonym, npkAtestparametercode: masterData.selectedParameterRulesEngine.npkAtestparametercode\r\n                }\r\n                testInitiateSiteTemp.push(object);\r\n                testInitiateSiteTab.push(object);\r\n                siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = sortData(testInitiateSiteTemp, 'descending', 'npksitecode')\r\n                delete selectedRecord['ntestgrouptestcode']\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            masterData['testSite'] = siteObject\r\n            masterData['testInitiateSiteTab'] = testInitiateSiteTab \r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openModalPopup: false,\r\n                    masterData,\r\n                    siteObject,\r\n                    siteseqnumber,\r\n                    \r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n           toast.warn(this.props.intl.formatMessage({ id: \"IDS_FROMANDTOSITECANNOTBESAME\" })); \r\n        }\r\n   \r\n        }\r\n        if (Object.keys(updateInfo).length > 0) {\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n    deletModalSite = (inputparam, action, row) => {\r\n        let temparray = [];\r\n        let index = 0;\r\n\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab\r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab\r\n        let reportCommentsTestsTab = this.props.Login.reportCommentsTestsTab\r\n\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n        let masterData = this.props.Login.masterData || {};\r\n\r\n\r\n\r\n        if (this.props.Login.activeTabIndex === 1) {\r\n            temparray = siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode]\r\n            temparray.splice(row['dataIndex'], 1);\r\n            testInitiateSiteTab.splice(row['dataIndex'], 1);\r\n            siteObject[masterData.selectedParameterRulesEngine.npkAtestparametercode] = temparray\r\n\r\n        }\r\n        if (this.props.Login.activeTabIndex === 2) {\r\n            temparray = testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode]\r\n            index = temparray.findIndex(x => x.npKAsampletestcommentscode === row['dataItem'].npKAsampletestcommentscode)\r\n            // temparray.splice(row['dataIndex'], 1);\r\n            temparray.splice(index, 1);\r\n            index = testCommentsTestsTab.findIndex(x => x.nslno === row['dataItem'].nslno)\r\n            //   testCommentsTestsTab.splice(row['dataIndex'], 1);\r\n            testCommentsTestsTab.splice(index, 1);\r\n            testCommentObject[masterData.selectedParameterRulesEngine.npkBtestparametercode] = temparray\r\n        }\r\n        if (this.props.Login.activeTabIndex === 3) {\r\n            temparray = masterData.testRepeat\r\n            temparray.splice(row['dataIndex'], 1);\r\n            reportCommentsTestsTab.splice(row['dataIndex'], 1);\r\n            reportCommentObject[masterData.selectedParameterRulesEngine.ntestgrouptestcode] = temparray\r\n        }\r\n        let updateInfo = {}\r\n        updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                siteObject,\r\n                testCommentObject,\r\n                reportCommentObject,\r\n                testInitiateSiteTab,\r\n                reportCommentsTestsTab,\r\n                testCommentsTestsTab\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    deleteModalTest = (inputparam, action, row) => {\r\n\r\n        let testInitiateTests = this.props.Login.testInitiateTests || [];\r\n        let testCommentsTests = this.props.Login.testCommentsTests || [];\r\n        let testRepeatTests = this.props.Login.testRepeatTests || [];\r\n        let testenforceTests = this.props.Login.testenforceTests || [];\r\n        let reportCommentsTests = this.props.Login.reportCommentsTests || [];\r\n        let testInitiateSiteTab = this.props.Login.masterData.testInitiateSiteTab \r\n        let testCommentsTestsTab = this.props.Login.masterData.testCommentsTestsTab\r\n        let testRepeatTestsTab = this.props.Login.masterData.testRepeatTestsTab\r\n        let testenforceTestsTab = this.props.Login.masterData.testenforceTestsTab\r\n\r\n        let siteObject = this.props.Login.siteObject || {};\r\n        let testCommentObject = this.props.Login.testCommentObject || {};\r\n        let reportCommentObject = this.props.Login.reportCommentObject || {};\r\n\r\n\r\n        let testInitiateTestOptions = this.props.Login.testInitiateTestOptions || [];\r\n        let testCommentsTestOptions = this.props.Login.testCommentsTestOptions || [];\r\n        let reportCommentsTestOptions = this.props.Login.reportCommentsTestOptions || [];\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n\r\n\r\n        let testInitiateTestdeletedOptions = this.props.Login.testInitiateTestdeletedOptions || [];\r\n        let testCommentsTestdeletedOptions = this.props.Login.testCommentsTestdeletedOptions || [];\r\n        let reportCommentsTestdeletedOptions = this.props.Login.reportCommentsTestdeletedOptions || [];\r\n\r\n        let masterData = this.props.Login.masterData || {};\r\n        let index = 0;\r\n        if (this.props.Login.activeTabIndex === 1) {\r\n           // index = this.props.Login.testInitiateTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)\r\n            index = this.props.Login.testInitiateTests.findIndex(x => x.npkAtestparametercode === inputparam.testParameter.npkAtestparametercode)\r\n            testInitiateTests.splice(index, 1);\r\n            //   index =  masterData['testParameter'].findIndex(x => x.ntestgrouptestcode === inputparam.testParameter.ntestgrouptestcode)\r\n            //   masterData['testParameter'].splice(index, 1); \r\n           \r\n            testInitiateSiteTab=testInitiateSiteTab.filter(function( obj ) {\r\n                return obj.npkAtestparametercode !== inputparam.testParameter.npkAtestparametercode;\r\n            }) \r\n            delete siteObject[inputparam.testParameter.npkAtestparametercode]\r\n        }\r\n        if (this.props.Login.activeTabIndex === 2) {\r\n            index = this.props.Login.testCommentsTests.findIndex(x => x.npkBtestparametercode === inputparam.testParameterComments.npkBtestparametercode)\r\n            testCommentsTests.splice(index, 1); \r\n            // index =  testCommentsTestsTab.findIndex(x => x.ntestgrouptestcode === inputparam.testParameterComments.ntestgrouptestcode) \r\n            // testCommentsTestsTab.splice(index, 1);\r\n            testCommentsTestsTab=testCommentsTestsTab.filter(function( obj ) {\r\n                return obj.npkBtestparametercode !== inputparam.testParameterComments.npkBtestparametercode;\r\n            }) \r\n            delete testCommentObject[inputparam.testParameterComments.npkBtestparametercode]\r\n        }\r\n        if (this.props.Login.activeTabIndex === 3) {\r\n          //  index = this.props.Login.testRepeatTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode) \r\n            index=row['dataIndex'] \r\n            testRepeatTests.splice(index, 1);\r\n            testRepeatTestsTab.splice(index, 1); \r\n        }\r\n        if (this.props.Login.activeTabIndex === 4) {\r\n        //    index = this.props.Login.testenforceTests.findIndex(x => x.ntestgrouptestcode === masterData.selectedParameterRulesEngine.ntestgrouptestcode)  \r\n            index=row['dataIndex']\r\n            testenforceTests.splice(index, 1);\r\n            testenforceTestsTab.splice(index, 1); \r\n        }\r\n        let updateInfo = {}\r\n        updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                testInitiateTests,\r\n                siteObject,\r\n                testCommentObject,\r\n                testCommentsTests,\r\n                reportCommentsTests,\r\n                reportCommentObject,\r\n                masterData:{...masterData,   testCommentsTestsTab,testInitiateSiteTab,\r\n                    testRepeatTestsTab,\r\n                    testenforceTestsTab},\r\n                testRepeatTests,\r\n                testenforceTests,\r\n             \r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onmodalComboChange = (comboData, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        let isneedsgeneralcomments = this.state.isneedsgeneralcomments || {} \r\n        let action=this.props.Login.action;\r\n        if (fieldName === 'ncommentsubtypecode') {\r\n            if (comboData.value === 6) {\r\n                isneedsgeneralcomments = true\r\n                delete selectedRecord['nsampletestcommentscode']\r\n            }\r\n            else {\r\n                isneedsgeneralcomments = false\r\n                delete selectedRecord['sgeneralcomments']\r\n\r\n            }\r\n        }\r\n        else if (fieldName === 'nproductcatcode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getSpecificationTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo)\r\n        }\r\n        else if (fieldName === 'ntestgrouptestcode' && (this.state.activeTabIndex === 4//||this.state.activeTabIndex === 1\r\n            ) ) {\r\n\r\n            if (selectedRecord['ntestgrouptestparametercode']) {\r\n                if (selectedRecord[fieldName].value !== comboData.value) {\r\n                    delete selectedRecord['ntestgrouptestparametercode']\r\n                }\r\n            }\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord['ntestgrouprulesenginecode']=this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode']?\r\n        this.props.Login.masterData.SelectedRulesEngine['ntestgrouprulesenginecode']:0;\r\n            this.props.getParameterforEnforce(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo\r\n                ,this.state.activeTabIndex,action)\r\n\r\n        }\r\n        //This is to Get Parameter Results from the User\r\n        else if (fieldName === 'ntestgrouptestparametercode' && (this.state.activeTabIndex === 1) ) { \r\n            let updateInfo = {}\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    screenName:'IDS_TESTGROUPRESULTENTRY', \r\n                    openModal:true\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n\r\n        }\r\n        else if (fieldName === 'nallottedspeccode') {\r\n            selectedRecord[fieldName] = comboData;\r\n            this.props.getComponentTestGroupRulesEngine(selectedRecord, this.props.Login.selectedRecord, true, this.props.Login.masterData, this.props.Login.userInfo)\r\n        }\r\n        if (fieldName === 'nsampletestcommentscode') {\r\n            selectedRecord['sdescription'] = comboData.item.sdescription;\r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        this.setState({ selectedRecord, isneedsgeneralcomments });\r\n    }\r\n\r\n  onResultInputChange = (event, index, parameter)=> {\r\n        let selectedRecord = this.state.selectedRecord || [];\r\n        let ParameterRulesEngine = this.state.selectedRecord.ParameterRulesEngine ? this.state.selectedRecord.ParameterRulesEngine : [];\r\n        let sresult = \"\";\r\n        let sfinal = \"\";\r\n        let sresultpredefinedname = \"\";\r\n        let salertmessage = \"\";\r\n        let sresultcomment = \"\";\r\n        let sgradename=\"\";\r\n        let value = -1;\r\n        let acceptedFile = [];\r\n        let ncalculatedresult;\r\n        let currentAlertResultCode = 0;\r\n        let currentntestgrouptestpredefcode = 0;\r\n        let inputData = {} \r\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n            if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n                sresult = event.target.value;\r\n                ncalculatedresult = 4\r\n            } else {\r\n                sresult = ParameterRulesEngine[index]['sresult'] === null ? \"\" : ParameterRulesEngine[index]['sresult'];\r\n                ncalculatedresult = ParameterRulesEngine[index]['ncalculatedresult'];\r\n            } \r\n        }\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n            currentAlertResultCode = event.item.ntestgrouptestparametercode;\r\n            currentntestgrouptestpredefcode = event.item.ntestgrouptestpredefcode;\r\n            if (event != null) {\r\n                sresult = event.item.spredefinedname;\r\n                sresultpredefinedname = event.item.sresultpredefinedname;\r\n                sfinal = event.item.spredefinedsynonym\r\n                value = event.item.ngradecode;\r\n                salertmessage = event.item.salertmessage ? event.item.salertmessage : \"\";\r\n                sresultcomment = event.item.spredefinedcomments ? event.item.spredefinedcomments : \"\";\r\n                ncalculatedresult = 4;\r\n            \r\n            }\r\n            else {\r\n                sresult = \"\";\r\n                sfinal = \"\";\r\n                sresultpredefinedname = \"\";\r\n                value = -1;\r\n                ncalculatedresult = 4\r\n            }\r\n            inputData = {\r\n                'ntestgrouptestpredefcode': event.item.ntestgrouptestpredefcode,\r\n                'salertmessage': salertmessage,\r\n                'nneedresultentryalert': event.item.nneedresultentryalert,\r\n                'nneedsubcodedresult': event.item.nneedsubcodedresult\r\n            }\r\n            if (event.item.nneedresultentryalert === transactionStatus.NO &&\r\n                event.item.nneedsubcodedresult === transactionStatus.NO) {\r\n                if (ParameterRulesEngine[index]['additionalInfo']) {\r\n                    ParameterRulesEngine[index]['additionalInfo'] = \"\"\r\n                }\r\n                if (ParameterRulesEngine[index]['additionalInfoUidata']) {\r\n                    ParameterRulesEngine[index]['additionalInfoUidata'] = \"\"\r\n                }\r\n            } \r\n        }\r\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n            sresult = event.target.value;\r\n            if (event.target.value.trim() === \"\"){\r\n                ncalculatedresult = -1;\r\n            }\r\n            else{\r\n                ncalculatedresult = 4;\r\n            }  \r\n        }\r\n        if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\r\n            sresult = event[0].name;\r\n            acceptedFile = event;\r\n            ncalculatedresult = 4 \r\n        }\r\n        ParameterRulesEngine[index]['sresult'] = sresult\r\n        ParameterRulesEngine[index]['sfinal'] = sfinal\r\n        ParameterRulesEngine[index]['sresultpredefinedname'] = sresultpredefinedname\r\n        ParameterRulesEngine[index]['sresultcomment'] = sresultcomment\r\n        ParameterRulesEngine[index]['salertmessage'] = salertmessage\r\n        ParameterRulesEngine[index]['acceptedFile'] = acceptedFile\r\n        ParameterRulesEngine[index]['editable'] = true\r\n        ParameterRulesEngine[index]['ngradecode'] = value\r\n        ParameterRulesEngine[index]['ncalculatedresult'] = ncalculatedresult\r\n\r\n        selectedRecord.ParameterRulesEngine = ParameterRulesEngine\r\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n            this.props.getPredefinedDataRulesEngine(inputData, selectedRecord, currentAlertResultCode, this.props.Login.masterData)\r\n        }\r\n        this.setState({\r\n            selectedRecord: selectedRecord,\r\n            currentAlertResultCode,\r\n            currentntestgrouptestpredefcode \r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    getOutcomeDetails = (inputParam) => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        const testParameter = this.state.activeTabIndex === 1 ? inputParam.testParameter : this.state.activeTabIndex === 2 ?\r\n            inputParam.testParameterComments : inputParam.testParameterreportComments;\r\n        masterData['selectedParameterRulesEngine'] = {}\r\n        masterData['selectedParameterRulesEngine'] = testParameter;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    viewParameter=(param)=>{\r\n        let masterData = this.props.Login.masterData || {};\r\n        masterData['ParameterRulesEngine']=param['ParameterRulesEngine']\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                showAlertGrid:true,\r\n                masterData,\r\n                showParameterGrid:true\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo); \r\n    }\r\n    handleExpandChange = () => {\r\n        let childListMap1 =  new Map();\r\n        let childListMap2 =   new Map();\r\n        let childListMap3 =  new Map();\r\n        let childListMap =  new Map(); \r\n        if (this.props.Login.masterData.activeTabName === 'IDS_Test') { \r\n            let keylst = this.props.Login.masterData.activeTabName === 'IDS_Test' ?\r\n                Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject']) :\r\n                this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ?\r\n                    Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject']) :\r\n                    Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'])\r\n            keylst.map(key => {\r\n                childListMap.set(parseInt(key),\r\n                    Object.values(this.props.Login.masterData.activeTabName === 'IDS_Test' ?\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['siteObject'][key] :\r\n                        this.props.Login.masterData.activeTabName === 'IDS_COMMENTS' ?\r\n                            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key] :\r\n                            this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap })\r\n        }\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_COMMENTS') {\r\n            let keylst = Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'])\r\n            keylst.map(key => {\r\n                childListMap2.set(parseInt(key),\r\n                    Object.values(\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['testCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap2 })\r\n        }\r\n        if (this.props.Login.masterData.activeTabName === 'IDS_REPORTCOMMENTS') {\r\n            let keylst =\r\n                Object.keys(this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject']);\r\n            keylst.map(key => {\r\n                childListMap3.set(parseInt(key),\r\n                    Object.values(\r\n                        this.props.Login.masterData.SelectedRulesEngine['jsonuidata']['reportCommentObject'][key]));\r\n            })\r\n            this.setState({ childListMap3 })\r\n        }\r\n    }\r\n    viewOutcome = (props) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){ \r\n            let  masterData= this.props.Login.masterData\r\n            masterData['SelectedRulesEngine']=props['SelectedRulesEngine'][0]\r\n            if(masterData['SelectedRulesEngine']['jsonuidata']&&masterData['SelectedRulesEngine']['jsonuidata']['testInitiateTests'])\r\n            {\r\n                 masterData['SelectedRulesEngine']['jsonuidata']['testInitiateTests'].forEach(object => {\r\n                    object['expanded']&&delete object['expanded'];\r\n                  });\r\n            } \r\n            masterData['activeTabName']='IDS_Test'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_VIEWOUTCOME\",\r\n                operation: \"IDS_VIEW\",\r\n                openModal: true,\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOVIEWOUTCOME\" })); \r\n    }\r\n    }\r\n    openflowview = (props) => {\r\n        if(this.props.Login.masterData['RulesEngine']&&this.props.Login.masterData['RulesEngine'].length>0){\r\n           let  masterData= this.props.Login.masterData \r\n        masterData['SelectedRulesEngine']=props['SelectedRulesEngine'][0]\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_VIEWRULE\",\r\n                operation: \"IDS_VIEW\",\r\n                openModal: true,\r\n                masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    else{\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRULETOVIEWRULE\" })); \r\n    }\r\n    } \r\n    handlePageChangeRuleEngine = (event) => {\r\n        this.setState({\r\n            skipRulesEngine: event.skip,\r\n            takeRulesEngine: event.take\r\n        });\r\n    }\r\n    addGroup = () => {\r\n\r\n        const { selectedRecord } = this.state;\r\n        let viewColumnListByRule = this.props.Login.viewColumnListByRule || [];\r\n        const addGroupList = this.props.Login.addGroupList || [];\r\n        const arrayLength = addGroupList.length;\r\n        addGroupList[arrayLength] = 1;\r\n\r\n        viewColumnListByRule = this.props.Login.databaseviewList;\r\n        if (arrayLength === 0) {\r\n            selectedRecord[\"groupList\"] = [];\r\n            selectedRecord[\"filtercolumns\"] = this.props.Login.selectFields;\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"] === undefined) {\r\n            selectedRecord[\"groupListJoins\"] = []\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"][arrayLength - 1] === undefined) {\r\n            selectedRecord[\"groupListJoins\"][arrayLength - 1] = {}\r\n        }\r\n        selectedRecord[\"groupListJoins\"][arrayLength - 1][\"button_and\"] = true;\r\n\r\n        selectedRecord[\"groupList\"][arrayLength] = [];\r\n        selectedRecord[\"groupList\"][arrayLength][\"button_and\"] = true;\r\n        selectedRecord[\"groupList\"][arrayLength][0] = {};\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addGroupList,\r\n                viewColumnListByRule,\r\n                selectedRecord,\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    getTestGroupRulesEngineAdd = () => {\r\n        //   if (this.state.selectedcombo['nproductcatcode']) {\r\n        //    const sqlQuery = false;\r\n        //this.setState({ selectedRecord: {} });\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        this.props.getTestGroupRulesEngineAdd(this.props.Login.userInfo, false, {\r\n            addRuleList: [], addGroupList: [],\r\n            addAggregateList: [], addOrderbyList: []\r\n        }, this.props.Login.masterData);\r\n        //  } else {\r\n        //       toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTPRODUCTCATEGORY\" }));\r\n\r\n        //   }\r\n\r\n\r\n    }\r\n    closePortalModal = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        masterData['testParameter'] = {}\r\n        masterData['testParameterComments'] = {}\r\n        masterData['testParameterreportComments'] = {}\r\n        masterData['testComments'] = {}\r\n        masterData['reportComments'] = {}\r\n        masterData['testSite'] = {}\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: this.props.Login.operation !== 'update' ? {\r\n                activeTabIndex: 0,\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0,\r\n                masterData, testInitiateTests: [], reportCommentsTests: [],\r\n                testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\r\n                npkAtestparametercode: 0,\r\n                npkBtestparametercode: 0,\r\n                npkCtestparametercode: 0,\r\n                testInitiateSiteTab: [],\r\n                testCommentsTestsTab: [],\r\n                reportCommentsTestsTab: []\r\n            } : {\r\n                activeTabIndex: 0,\r\n                openPortalModal: false, selectedRecord: {}, addRuleList: [], count: 0,\r\n                masterData,\r\n                //  testInitiateTests: [], reportCommentsTests: [],\r\n                // testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {},\r\n                npkAtestparametercode: 0,\r\n                npkBtestparametercode: 0,\r\n                npkCtestparametercode: 0\r\n                // ,\r\n                // testInitiateSiteTab: [],\r\n                // testCommentsTestsTab: [],\r\n                // reportCommentsTestsTab: []\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    changePropertyView = (index, event, status) => {\r\n\r\n        let id = false;\r\n        let activeTabIndex\r\n        let activeTabId\r\n        let masterData = this.props.Login.masterData || {};\r\n        let activeTestTab = this.props.Login.activeTestTab || \"\"\r\n        const { selectedRecord } = this.state;\r\n        if (selectedRecord[\"groupList\"].length > 0) {\r\n            if (this.onsavevalidation(selectedRecord)) {\r\n                if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n                    activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n                }\r\n                if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n                    if (index === 1) {\r\n                        activeTestTab = 'IDS_Test'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testInitiateTests && this.props.Login.testInitiateTests[0]\r\n                    }\r\n                    if (index === 2) {\r\n                        activeTestTab = 'IDS_COMMENTS'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testCommentsTests && this.props.Login.testCommentsTests[0]\r\n                    }\r\n                    if (index === 3) {\r\n                        activeTestTab = 'IDS_REPEAT'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testRepeatTests && this.props.Login.testRepeatTests[0]\r\n                    }\r\n                    if (index === 4) {\r\n                        activeTestTab = 'IDS_ENFORCERESULT'\r\n                        masterData['selectedParameterRulesEngine'] = this.props.Login.testEnforceTests && this.props.Login.testEnforceTests[0]\r\n                    }\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            activeTabIndex: index === 0 ? 0 : this.state.activeTabIndex !== index ? index : id ? index : false,\r\n                            activeTabId: id,\r\n                            activeTestTab,\r\n                            masterData\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            } else {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_FILLTHERULETOADDOUTCOME\" }));\r\n            }\r\n        }\r\n        else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ATLEASTADDONERULETOADDOUTCOME\" }));\r\n        }\r\n    }\r\n\r\n\r\n    deleteRule = (groupIndex, index) => {\r\n        let addGroupList = this.props.Login.addGroupList || [];\r\n        const selectedRecord = this.state.selectedRecord;\r\n        addGroupList[groupIndex] = addGroupList[groupIndex] - 1;\r\n\r\n        if (addGroupList[groupIndex] === 0) {\r\n            addGroupList.splice(groupIndex, 1);\r\n            selectedRecord[\"groupList\"].splice(groupIndex, 1);\r\n            if (selectedRecord[\"groupListJoins\"]) {\r\n                selectedRecord[\"groupListJoins\"].splice(groupIndex - 1, 1);\r\n            }\r\n        } else {\r\n            selectedRecord[\"groupList\"][groupIndex].splice(index, 1);\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addGroupList, selectedRecord,\r\n                activeTabIndex:0 }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    deleteOutcome = (index) => {\r\n        let addOutcomeList = this.props.Login.addOutcomeList;\r\n        addOutcomeList.splice(index, 1);\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addOutcomeList }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    clearSelectedRule(selectedRecord, index) {\r\n        selectedRecord[\"sinputname_\" + index] && delete selectedRecord[\"sinputname_\" + index];\r\n        selectedRecord[\"ssymbolname_\" + index] && delete selectedRecord[\"ssymbolname_\" + index];\r\n        selectedRecord[\"snumericinput_\" + index] && delete selectedRecord[\"snumericinput_\" + index];\r\n        selectedRecord[\"columnname_\" + index] && delete selectedRecord[\"columnname_\" + index];\r\n        selectedRecord[\"snumericinputtwo_\" + index] && delete selectedRecord[\"snumericinputtwo_\" + index];\r\n        selectedRecord[\"dateinput_\" + index] && delete selectedRecord[\"dateinput_\" + index];\r\n        selectedRecord[\"dateinputtwo_\" + index] && delete selectedRecord[\"dateinputtwo_\" + index];\r\n    }\r\n\r\n    clearRule = () => {\r\n        const sviewname = this.state.selectedRecord.sviewname || \"\";\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { addRuleList: [], selectedRecord: { sviewname }, sqlQuery: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    resetRule = () => {\r\n        let masterData = this.props.Login.masterData || {};\r\n        let selectedRecord = this.state.selectedRecord || {}\r\n        masterData['testParameter'] = {}\r\n        masterData['testParameterComments'] = {}\r\n        masterData['testParameterreportComments'] = {}\r\n        masterData['testComments'] = {}\r\n        masterData['reportComments'] = {}\r\n        masterData['testRepeat'] = []\r\n        masterData['testenforceTests'] = []\r\n        masterData['testSite'] = {}\r\n        if (selectedRecord[\"groupList\"]) {\r\n            selectedRecord[\"groupList\"] = []\r\n\r\n        }\r\n        if (selectedRecord[\"groupListJoins\"]) {\r\n            selectedRecord[\"groupListJoins\"] = []\r\n\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                addRuleList: [], addGroupList: [], masterData,\r\n                addAggregateList: [], addOrderbyList: [], testInitiateTests: [], reportCommentsTests: [],\r\n                testCommentsTests: [], siteObject: {}, testCommentObject: {}, reportCommentObject: {}, selectedRecord, testRepeatTests: [],\r\n                testenforceTests: [],\r\n                activeTabIndex:0\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onSymbolChange = (comboData, fieldName, groupIndex, index) => {\r\n        const { selectedRecord } = this.state;\r\n        const oldSelectedRecord = selectedRecord[\"groupList\"][groupIndex][index][fieldName] || {};\r\n        selectedRecord[\"groupList\"][groupIndex][index][fieldName] = comboData;\r\n        this.setState({ selectedRecord, groupIndex, index });\r\n    }\r\n\t//ALPD-3418\r\n      TestGroupMorefields( testMoreFields){\r\n        testMoreFields=this.props.Login.hideQualisForms && this.props.Login.hideQualisForms.findIndex(item=>item.nformcode === formCode.TESTPACKAGE) === -1?testMoreFields : testMoreFields=testMoreFields && testMoreFields.filter(item=>{ return item[1]!=='IDS_TESTPACKAGE'})\r\n        return testMoreFields;\r\n\r\n    }\r\n        \r\n    \r\n\r\n    onInputChange = (event, type, groupIndex, index) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let needoutsource = this.state.needoutsource || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'needoutsource' && event.target.checked === true) {\r\n                needoutsource = true\r\n            }\r\n            else {\r\n                needoutsource = false\r\n                delete selectedRecord['nfromsitecode'];\r\n                delete selectedRecord['ntositecode'];\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord, needoutsource });\r\n    }\r\n    onInputSwitchChange=(event)=>{\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let testInitiateTests=[];\r\n        let selectedParameterRulesEngine={};\r\n        if (event.target.type === 'checkbox') {\r\n            let testcode=this.props.Login.masterData.selectedParameterRulesEngine.ntestgrouptestcode;\r\n            let activeValue=this.props.Login.testInitiateTests;\r\n            activeValue.map(item=>{\r\n                if(item.ntestgrouptestcode===testcode){\r\n                    testInitiateTests.push({...item,'nneedsample':event.target.checked === true ? 3 : 4})\r\n                    selectedParameterRulesEngine={...item,'nneedsample':event.target.checked === true ? 3 : 4}\r\n                }else{\r\n                    testInitiateTests.push({...item})\r\n                }\r\n            })\r\n        }\r\n        //selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        //this.setState({ selectedRecord });\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData:{...this.props.Login.masterData,\"selectedParameterRulesEngine\":selectedParameterRulesEngine},\r\n                testInitiateTests:testInitiateTests\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n\r\n\r\n    viewColumnListByRule = (list) => {\r\n        let activeTabIndex = this.props.Login.activeTabIndex\r\n\r\n        if (activeTabIndex !== 0) {\r\n            let selectedRecord = this.props.Login.selectedRecord && this.props.Login.selectedRecord\r\n            let dynamicList = activeTabIndex === 1 ? this.props.Login.testInitiateTests : activeTabIndex === 2 ? this.props.Login.testCommentsTests\r\n                : activeTabIndex === 3 ? this.props.Login.testRepeatTests : activeTabIndex === 4 ? this.props.Login.testenforceTests : \"\"\r\n            if (dynamicList !== undefined && dynamicList)\r\n                list = list.filter(({ value }) => !dynamicList.some(x => x.ntestgrouptestcode == value))\r\n        }\r\n        return list\r\n    }\r\n    onConditionClick = (fieldName, index, isgroup) => {\r\n        let { selectedRecord } = this.state;\r\n        selectedRecord[\"groupListJoins\"] = selectedRecord[\"groupListJoins\"] || []\r\n        if (index !== undefined && isgroup === false) {\r\n            if (fieldName === `button_and`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupList\"][index][`button_or`] = false;\r\n            } else if (fieldName === `button_or`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupList\"][index][`button_and`] = false;\r\n            } else if (fieldName === `button_not`) {\r\n                selectedRecord[\"groupList\"][index][fieldName] = selectedRecord[\"groupList\"][index][fieldName] === true ? false : true;\r\n            }\r\n            else {\r\n\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (fieldName === `button_and`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupListJoins\"][index][`button_or`] = false;\r\n            }\r\n            if (fieldName === `button_or`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? true : true;\r\n                selectedRecord[\"groupListJoins\"][index][`button_and`] = false;\r\n            }\r\n            if (fieldName === `button_not`) {\r\n                if (selectedRecord[\"groupListJoins\"][index] === undefined) {\r\n                    selectedRecord[\"groupListJoins\"][index] = {}\r\n                }\r\n                selectedRecord[\"groupListJoins\"][index][fieldName] = selectedRecord[\"groupListJoins\"][index][fieldName] === true ? false : true;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //Rules Engine Functions End\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterComboChange = (comboData, fieldName, caseNo) => {\r\n        let tempFilterData = this.state.tempFilterData || {};\r\n        let inputParam = {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getProductCategory\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 2:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: tempFilterData.nsampletypecode.item,\r\n                        productcategory: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getProduct\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 3:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        sampletype: tempFilterData.nsampletypecode.item,\r\n                        productcategory: tempFilterData.nproductcatcode.item,\r\n                        product: comboData.item,\r\n                        project:comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    methodUrl: \"/getTreeVersionTemplate\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n\r\n            case 4:\r\n                tempFilterData[fieldName] = comboData;\r\n                this.setState({ tempFilterData });\r\n                break;\r\n\r\n            case 5:\r\n                const selectedRecord = this.state.selectedRecord;\r\n                selectedRecord[fieldName] = comboData;\r\n                const TestGroupSpecSampleType = this.props.Login.testGroupInputData.TestGroupSpecSampleType || {};\r\n                let testGroupSpecSampleType = {};\r\n                if (this.props.Login.screenName === (this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode])) {\r\n                    testGroupSpecSampleType = selectedRecord[\"ncomponentcode\"] ? selectedRecord[\"ncomponentcode\"].item : TestGroupSpecSampleType[0].item;\r\n                } else {\r\n                    testGroupSpecSampleType = this.props.Login.masterData.SelectedComponent;\r\n                }\r\n                inputParam = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    testcategory: comboData.item,\r\n                    testgroupspecsampletype: testGroupSpecSampleType,\r\n                    nallottedspeccode: this.props.Login.masterData.SelectedSpecification[\"nallottedspeccode\"],\r\n                    selectedRecord\r\n                }\r\n                this.props.changeTestCategory(inputParam, this.props.Login.testGroupInputData);\r\n                break;\r\n            case 6:\r\n                tempFilterData[fieldName] = comboData;\r\n                inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nprojecttypecode:tempFilterData.nprojecttypecode.value,\r\n                        projecttype:tempFilterData.nprojecttypecode.item,\r\n                       // sampletype: tempFilterData.nsampletypecode.item,\r\n                       // productcategory: comboData.item,\r\n                        tempFilterData\r\n                    },\r\n                    classUrl:\"/projectmaster\",\r\n                    methodUrl: \"/getApprovedProjectByProjectType\"\r\n                }\r\n                this.props.sampleTypeOnChange(inputParam, this.props.Login.masterData);\r\n                break;\r\n           \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericInputChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputParam = {};\r\n        let masterData=this.props.Login.masterData;\r\n        let clearSelectedRecordField = [];\r\n        if (this.props.Login.screenName === \"IDS_PROFILETREE\"\r\n            || this.props.Login.screenName === \"IDS_EDITTREE\") {\r\n            inputParam = this.onSaveTree(saveType, formRef);\r\n            // clearSelectedRecordField = [\r\n            //     { \"controlType\": \"textarea\", \"idsName\": \"IDS_CODEDRESULT\", \"dataField\": \"sleveldescription\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n            //     { \"controlType\": \"textarea\", \"idsName\": \"IDS_CODEDRESULTSYNONYM\", \"dataField\": \"spredefinedsynonym\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n            //     { \"controlType\": \"textarea\", \"idsName\": \"IDS_RESULTPARAMETERCOMMENTS\", \"dataField\": \"spredefinedcomments\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n            //     { \"controlType\": \"checkbox\", \"idsName\": \"IDS_AlERTFORRESULTENTRY\", \"dataField\": \"nneedresultentryalert\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n            //     { \"controlType\": \"checkbox\", \"idsName\": \"IDS_SUBCODERESULTNEED\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n            //     { \"controlType\": \"textarea\", \"idsName\": \"IDS_ALERTMESSAGE\", \"dataField\": \"salertmessage\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n            // ]\r\n        } else if (this.props.Login.screenName === \"IDS_SPECIFICATION\") {\r\n            inputParam = this.onSaveSpecification(saveType, formRef);\r\n            // ALPD-4757, Commented because, it is not required to make isCopy as false when save.\r\n            // if (masterData && masterData.selectedRecordCopy) {\r\n            //     masterData.selectedRecordCopy.isCopy = false;\r\n            // }\r\n            delete masterData.CopyOpenNodes;\r\n//ALPD-5279 Test Group - while adding a spec in test group with save & continue, the sample category name is not visible insted a numeric value is displayed.\r\n            clearSelectedRecordField = [\r\n                //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_SELECTEDPROFILE\", \"dataField\": \"sselectedprofilename\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_SPECNAME\", \"dataField\": \"scopyspecname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_PRODUCTCATNAME\", \"dataField\": \"sproductcatname\", \"width\": \"150px\",\"controlName\": \"sproductcatname\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true},\r\n                //{ \"controlType\": \"checkbox\", \"idsName\": \"IDS_PRODUCTCATNAME\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_SPECNAME\", \"dataField\": \"sspecname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_ACTIVE\", \"dataField\": \"ntransactionstatus\", \"width\": \"150px\",\"controlName\": \"ntransactionstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":1 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_COMPONENTREQUIRED\", \"dataField\": \"ncomponentrequired\", \"width\": \"150px\",\"controlName\": \"ncomponentrequired\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_SELECTEDPROFILE\", \"dataField\": \"sselectedprofilename\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_SPECNAME\", \"dataField\": \"scopyspecname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                \r\n                // { \"controlType\": \"textarea\", \"idsName\": \"IDS_SPECNAME\", \"dataField\": \"sspecname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n            ]\r\n\r\n        } else if (this.props.Login.screenName ===this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]) {\r\n            inputParam = this.onSaveComponent(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_COPYSPECIFICATION\") {\r\n            inputParam = this.onSaveCopySpecification(saveType, formRef);\r\n\r\n            clearSelectedRecordField = [\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_SELECTEDPROFILE\", \"dataField\": \"sselectedprofilename\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_SPECNAME\", \"dataField\": \"scopyspecname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                // { \"controlType\": \"textarea\", \"idsName\": \"IDS_PRODUCTNAME\", \"dataField\": \"sproductname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_AlERTFORRESULTENTRY\", \"dataField\": \"sproductcatname\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                // { \"controlType\": \"checkbox\", \"idsName\": \"IDS_PRODUCTCATNAME\", \"dataField\": \"nneedsubcodedresult\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                 { \"controlType\": \"textarea\", \"idsName\": \"IDS_SPECNAME\", \"dataField\": \"sspecname\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                //{ \"controlType\": \"checkbox\", \"idsName\": \"IDS_ACTIVE\", \"dataField\": \"ntransactionstatus\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":1 },\r\n                //{ \"controlType\": \"checkbox\", \"idsName\": \"IDS_COMPONENTREQUIRED\", \"dataField\": \"ncomponentrequired\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n            ]\r\n\r\n        } else if (this.props.Login.screenName === \"IDS_TEST\"\r\n            || this.props.Login.screenName === \"IDS_EDITTESTGROUPTEST\") {\r\n            inputParam = this.onSaveTest(saveType, formRef);\r\n        } else if (this.props.Login.screenName === \"IDS_SPECFILE\") {\r\n            inputParam = this.onSaveSpecFile(saveType, formRef);\r\n\r\n            clearSelectedRecordField = [\r\n                \r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"textarea\", \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"slinkdescription\", \"width\": \"200px\", \"mandatoryLabel\": \"IDS_ENTER\",\"isClearField\":true },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DEFAULTSTATUS\", \"dataField\": \"ndefaultstatus\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n                { \"controlType\": \"checkbox\", \"idsName\": \"IDS_DEFAULTSTATUS\", \"dataField\": \"nlinkdefaultstatus\", \"width\": \"150px\",\"controlName\": \"ndefaultstatus\", \"mandatoryLabel\": \"IDS_SELECT\",\"isClearField\":true,\"preSetValue\":4 },\r\n            ]\r\n\r\n        }\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            //ALPD-5444 Test Group - Copy the spec in test group and do save continue loading issue occurs.\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, openModal: true, operation: this.props.Login.operation,\r\n                    screenData: { inputParam, masterData,clearSelectedRecordField },\r\n                    saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            if(this.props.Login.screenName === \"IDS_SPECIFICATION\" || this.props.Login.screenName === \"IDS_COPYSPECIFICATION\" || \r\n               this.props.Login.screenName === \"IDS_SPECFILE\"\r\n            )\r\n            {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\", {},\"\",clearSelectedRecordField);\r\n            }\r\n            else\r\n            {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n        }\r\n    }\r\n    }\r\n\r\n    onSaveTest = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let inputData = {};\r\n        const userinfo = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        if (operation === \"create\") {\r\n            const testArray = selectedRecord.ntestcode.map(test => \r\n                { return {...test.item,nisvisible:transactionStatus.YES,nisadhoctest:transactionStatus.NO} });\r\n            inputData = {\r\n                testgroupspecification: masterData.SelectedSpecification,\r\n                testgroupspecsampletype: [masterData.SelectedComponent],\r\n                testgrouptest: testArray, userinfo\r\n            }\r\n        } else {\r\n            postParam = {\r\n                inputListName: \"TestGroupTest\", selectedObject: \"SelectedTest\", primaryKeyField: \"ntestgrouptestcode\",\r\n                primaryKeyValue: masterData.SelectedTest ? masterData.SelectedTest.ntestgrouptestcode : 0,\r\n                fetchUrl: \"testgroup/getTestGroupTest\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n                masterData: this.props.Login.masterData, searchFieldList, changeList: [\"TestGroupTestFormula\", \"TestGroupTestNumericParameter\",\r\n                    \"TestGroupTestPredefinedParameter\", \"TestGroupTestCharParameter\", \"TestGroupTestParameter\"], isSingleSelect: true\r\n            }\r\n            let testgrouptestfile = null;\r\n            let testGroupFile = selectedRecord.ntestfilecode;\r\n            if (testGroupFile) {\r\n                testGroupFile = testGroupFile.item;\r\n                testgrouptestfile = {\r\n                    nlinkcode: testGroupFile.nlinkcode,\r\n                    nattachmenttypecode: testGroupFile.nattachmenttypecode,\r\n                    sdescription: testGroupFile.sdescription,\r\n                    ssystemfilename: testGroupFile.ssystemfilename,\r\n                    dcreateddate: testGroupFile.dcreateddate,\r\n                    nfilesize: testGroupFile.nfilesize,\r\n                    ntestgroupfilecode: selectedRecord.ntestgroupfilecode,\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    sfilename: testGroupFile.sfilename,\r\n                    nstatus: transactionStatus.ACTIVE\r\n                };\r\n            }\r\n            inputData = {\r\n                testgroupspecification: masterData.SelectedSpecification,\r\n                testgrouptest: {\r\n                    ntestgrouptestcode: selectedRecord.ntestgrouptestcode,\r\n                    nsectioncode: selectedRecord.nsectioncode.value,\r\n                    //nsourcecode: selectedRecord.nsourcecode.value,\r\n                    nmethodcode: selectedRecord.nmethodcode ? selectedRecord.nmethodcode.value : transactionStatus.NA,\r\n                    ninstrumentcatcode: selectedRecord.ninstrumentcatcode ? selectedRecord.ninstrumentcatcode.value : transactionStatus.NA,\r\n                    ncontainertypecode: selectedRecord.ncontainertypecode ? selectedRecord.ncontainertypecode.value : transactionStatus.NA,\r\n                    stestsynonym: selectedRecord.stestsynonym,\r\n                    ncost: selectedRecord.ncost,\r\n                    nsorter: selectedRecord.nsorter,\r\n                    nspecsampletypecode: selectedRecord.nspecsampletypecode,\r\n                    nrepeatcountno: selectedRecord.nrepeatcountno,\r\n                    ntestpackagecode: selectedRecord.ntestpackagecode ? selectedRecord.ntestpackagecode.value : transactionStatus.NA,\r\n                    nisvisible:transactionStatus.YES,nisadhoctest:transactionStatus.NO\r\n\r\n                },\r\n                testgrouptestfile, userinfo\r\n            }\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Test\",\r\n            saveType, formRef, searchRef: this.searchRef,\r\n            postParam\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveTree = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let inputData = {\r\n            userinfo: this.props.Login.userInfo\r\n        };\r\n        if (operation === \"update\") {\r\n            const selectedNode = this.props.Login.masterData.selectedNode;\r\n            inputData[\"treetemplatemanipulation\"] = {\r\n                ntemplatemanipulationcode: selectedRecord.ntemplatemanipulationcode,\r\n                sleveldescription: selectedRecord.sleveldescription,\r\n                nsampletypecode: selectedNode.nsampletypecode,\r\n                ntreeversiontempcode: selectedNode.ntreeversiontempcode,\r\n                nproductcatcode: selectedNode.nproductcatcode,\r\n                nproductcode: selectedNode.nproductcode,\r\n                nprojectmastercode: selectedNode.nprojectmastercode,\r\n            }\r\n            inputData[\"selectednode\"] = this.props.Login.masterData.ActiveKey;\r\n        } else {\r\n            const TreetempTranstestGroup = this.props.Login.TreetempTranstestGroup;\r\n            const filterData = this.state.filterData;\r\n            const selectedRecord = this.state.selectedRecord;\r\n            let treetemplatemanipulation = [];\r\n            let tempArray = filterRecordBasedOnTwoArrays(TreetempTranstestGroup, selectedRecord.treetemplatemanipulation, \"ntemptranstestgroupcode\");\r\n\r\n            tempArray.map(item => {\r\n                const treeData = {\r\n                    ntreeversiontempcode: item.ntreeversiontempcode,\r\n                    npositioncode: item.nlevelno - 1,\r\n                    sleveldescription: item.sleveldescription,\r\n                    ntemptranstestgroupcode: item.ntemptranstestgroupcode,\r\n                    nformcode: 62,\r\n                    schildnode: \"\",\r\n                    nnextchildcode: item.schildnode,\r\n                    ntemplatemanipulationcode: item.ntemplatemanipulationcode,\r\n                    isreadonly: item.ntemplatemanipulationcode > 0 ? true : false,\r\n                    slevelformat: item.slevelformat\r\n                }\r\n                return treetemplatemanipulation.push(treeData);\r\n            });\r\n\r\n\r\n            selectedRecord.treetemplatemanipulation.map(item => {\r\n                const treeTemplateManip = TreetempTranstestGroup.filter(temp => temp.ntemptranstestgroupcode === item.ntemptranstestgroupcode);\r\n                if (treeTemplateManip.length > 0) {\r\n                    item[\"ntemplatemanipulationcode\"] = treeTemplateManip[\"ntemplatemanipulationcode\"];\r\n                } else {\r\n                    item[\"ntemplatemanipulationcode\"] = 0;\r\n                }\r\n                return treetemplatemanipulation.push(item);\r\n            });\r\n\r\n            inputData[\"treetemplatemanipulation\"] = treetemplatemanipulation;\r\n            inputData[\"sampletype\"] = filterData.nsampletypecode.item;\r\n            inputData[\"ncategorycode\"] = filterData.nproductcatcode.value;\r\n            inputData[\"nproductcode\"] = filterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? -1 : filterData.nproductcatcode.item.ncategorybasedflow == transactionStatus.YES ? -1 :\r\n                filterData.nproductcode.value ? filterData.nproductcode.value : -1;\r\n            inputData[\"ntreeversiontempcode\"] = filterData.ntreeversiontempcode.value;\r\n          //  inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nprojectmastercode.value:-1;\r\n            inputData[\"nprojectmastercode\"] = filterData.nprojectmastercode ? filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? filterData.nprojectmastercode.value :-1:-1;\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Tree\",\r\n            saveType, formRef\r\n            \r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecification = (saveType, formRef) => {\r\n        const operation = this.props.Login.operation;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        let selectedCopyNodeManipulationCode = this.state.selectedRecord.selectedCopyNodeManipulationCode || -1;\r\n\r\n        let testGroupSpec = {\r\n            napproveconfversioncode: -1,\r\n            sversion: '',\r\n            napprovalstatus: transactionStatus.DRAFT,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            ntransactionstatus: selectedRecord[\"ntransactionstatus\"],\r\n            ncomponentrequired: selectedRecord[\"ncomponentrequired\"],\r\n            //   nclinicalspec: selectedRecord[\"nclinicalspec\"],\r\n           // nprojectcode: selectedRecord[\"nprojectcode\"] ? selectedRecord[\"nprojectcode\"] : -1,\r\n            nprojectmastercode: this.state.filterData.nprojectmastercode ? this.state.filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES ? this.state.filterData.nprojectmastercode.value :-1 : -1,\r\n            sspecname: operation===\"copy\"?selectedRecord[\"scopyspecname\"]:selectedRecord[\"sspecname\"],\r\n            dexpirydate: selectedRecord[\"dexpirydate\"],\r\n            nallottedspeccode: selectedRecord[\"nallottedspeccode\"] ? selectedRecord[\"nallottedspeccode\"] : 0,\r\n            ntzexpirydate: selectedRecord[\"ntzexpirydate\"].value,\r\n            stzexpirydate: selectedRecord[\"ntzexpirydate\"].label\r\n        };\r\n\r\n        const dexpirydate = testGroupSpec[\"dexpirydate\"];\r\n        //need this conversion when the datatype of the field is 'Instant'\r\n        testGroupSpec[\"dexpirydate\"] = formatInputDate(dexpirydate, false);\r\n\r\n        if (operation === \"create\") {\r\n            testGroupSpec[\"ntemplatemanipulationcode\"] = this.props.Login.masterData.selectedNode.ntemplatemanipulationcode\r\n        }\r\n        let ntreeversiontempcode = this.state.filterData.ntreeversiontempcode.value;\r\n        \r\n        const inputData = {\r\n            userinfo: this.props.Login.userInfo,\r\n            testgroupspecification: testGroupSpec,\r\n            treetemplatemanipulation: this.props.Login.masterData.selectedNode,\r\n            selectedspecification: this.props.Login.masterData.SelectedSpecification,\r\n            ntreeversiontempcode: ntreeversiontempcode,\r\n            selectedCopyNodeManipulationCode : selectedCopyNodeManipulationCode\r\n        }\r\n        \r\n\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: operation,\r\n            methodUrl: \"Specification\",\r\n            saveType, formRef,\r\n            selectedRecord: {...this.state.selectedRecord}\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveComponent = (saveType, formRef) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const testArray = selectedRecord.ntestcode.map(test => { return {...test.item,nisvisible:transactionStatus.YES,nisadhoctest:transactionStatus.NO}});\r\n        const inputData = {\r\n            testgroupspecification: masterData.SelectedSpecification,\r\n            testgroupspecsampletype: [selectedRecord.ncomponentcode.item],\r\n            testgrouptest: testArray,\r\n            userinfo: this.props.Login.userInfo,\r\n            genericlabel:this.props.Login.genericLabel\r\n        }\r\n        const inputParam = {\r\n            inputData,\r\n            classUrl: \"testgroup\",\r\n            operation: this.props.Login.operation,\r\n            methodUrl: \"Component\",\r\n            saveType, formRef\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    onSaveSpecFile = (saveType, formRef) => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let specFileArray = [];\r\n        const selectedSpecification = this.props.Login.masterData.SelectedSpecification;\r\n        let specFile = {\r\n            nallottedspeccode: selectedSpecification.nallottedspeccode,\r\n            nspecfilecode: selectedRecord.nspecfilecode ? selectedRecord.nspecfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, specFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] =Lims_JSON_stringify(file.name,false);\r\n                    tempData[\"sdescription\"] =Lims_JSON_stringify(replaceBackSlash( selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"),false);\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    specFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                specFile[\"sfilename\"] =Lims_JSON_stringify(selectedRecord.sfilename,false);\r\n                specFile[\"sdescription\"] =Lims_JSON_stringify(replaceBackSlash(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\"),false) ;\r\n                specFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                specFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                specFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                specFileArray.push(specFile);\r\n            }\r\n        } else {\r\n            specFile[\"sfilename\"] =Lims_JSON_stringify( replaceBackSlash(selectedRecord.slinkfilename.trim()),false) ;\r\n            specFile[\"sdescription\"] =Lims_JSON_stringify(replaceBackSlash(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\"),false);\r\n            specFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            specFile[\"ssystemfilename\"] = \"\";\r\n            specFile[\"nfilesize\"] = 0;\r\n            specFileArray.push(specFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"testgroupspecification\", JSON.stringify(selectedSpecification));\r\n        formData.append(\"testgroupspecfile\", JSON.stringify(specFileArray));\r\n        const inputParam = {\r\n           // inputData: { userinfo: this.props.Login.userInfo },\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                    smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                    //ALPD-1628(while saving the file and link,audit trail is not captured the respective language)\r\n                    slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\r\n                }\r\n            },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: this.props.Login.operation,\r\n            classUrl: \"testgroup\",\r\n            saveType, formRef, methodUrl: \"SpecificationFile\",\r\n            selectedRecord: {...this.state.selectedRecord}\r\n        }\r\n        return inputParam;\r\n    }\r\n\r\n    deleteSpecRecord = (deleteParam) => {\r\n        const selectedRecord = deleteParam.selectedRecord;\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        const ntreeversiontempcode = masterData[\"TreeTemplateManipulation\"][0].ntreeversiontempcode;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === ntreeversiontempcode);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            if (selectedRecord.napprovalstatus === transactionStatus.DRAFT\r\n                || selectedRecord.napprovalstatus === transactionStatus.CORRECTION) {\r\n                this.deleteRecord(deleteParam);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    deleteRecord = (deleteParam) => {\r\n        if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\r\n            const masterData = this.props.Login.masterData;\r\n            const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n                x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n            const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n            if (templateVersionStatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n            }\r\n            else {\r\n                if (this.props.Login.masterData.selectedNode) {\r\n                    const methodUrl = deleteParam.methodUrl;\r\n                    let dataState = this.state.componentDataState;\r\n                    const screenName = deleteParam.screenName;\r\n                    const inputParam = {\r\n                        inputData: {\r\n                            [deleteParam.keyName]: deleteParam.selectedRecord,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            genericlabel: this.props.Login.genericLabel,\r\n                            testgroupspecification: this.props.Login.masterData.SelectedSpecification,\r\n                            treetemplatemanipulation: this.props.Login.masterData.selectedNode,\r\n                            ntreeversiontempcode: deleteParam.filterData.ntreeversiontempcode.value\r\n                        },\r\n                        classUrl: \"testgroup\",\r\n                        operation: deleteParam.operation,\r\n                        methodUrl: methodUrl,\r\n                        screenName, dataState\r\n                    }\r\n                    const masterData = this.props.Login.masterData;\r\n                    //if (showEsign(this.state.controlMap, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData },\r\n                                openModal: true, screenName: screenName, operation: deleteParam.operation, selectedRecord: {}\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROFILENODE\" }));\r\n                }\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTPROFILENODE\" }));\r\n        }\r\n    }\r\n\r\n    deleteMultipleRecord = (deleteParam) => {\r\n        //console.log(\"delete component:\", deleteParam, this.props.Login.masterData);\r\n        const masterData = this.props.Login.masterData;\r\n        const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n            x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n        const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n        if (templateVersionStatus === transactionStatus.RETIRED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n        }\r\n        else {\r\n            const testgroupspecification = this.props.Login.masterData.SelectedSpecification;\r\n            if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                const inputParam = {\r\n                    inputData: {\r\n                        testgroupspecsampletype: deleteParam.props.testgroupspecsampletype,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        genericlabel:this.props.Login.genericLabel,\r\n                        testgroupspecification,\r\n                        treetemplatemanipulation: this.props.Login.masterData.selectedNode\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: \"delete\",\r\n                    methodUrl: \"TestGroupComponent\",\r\n                    screenName:this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] \r\n                }\r\n                const masterData = this.props.Login.masterData;\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData },\r\n                            openModal: true, screenName:this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] , operation: \"delete\", selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    onDropSpecFile = (attachedFiles, fieldName, maxSize) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\" //fileToDelete:file.name \r\n        });\r\n    }\r\n\r\n    validateTestGroupComplete = (operation, inputValue, ncontrolCode) => {\r\n        if (this.props.Login.masterData.selectedNode !== undefined && this.props.Login.masterData.selectedNode !== null) {\r\n            const masterData = this.props.Login.masterData;\r\n            const treeVersionTemplateIndex = masterData[\"TreeVersionTemplate\"].findIndex(\r\n                x => x[\"ntreeversiontempcode\"] === masterData.selectedNode[\"ntreeversiontempcode\"]);\r\n\r\n            const templateVersionStatus = masterData[\"TreeVersionTemplate\"][treeVersionTemplateIndex].ntransactionstatus\r\n            if (templateVersionStatus === transactionStatus.RETIRED) {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDTEMPLATEISRETIRED\" }));\r\n            }\r\n            else {\r\n                if (inputValue.testgroupspecification) {\r\n                    if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                        || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                        return rsapi.post(\"testgroup/validateTestGroupComplete\", {\r\n                            nallottedspeccode: inputValue.testgroupspecification.nallottedspeccode,\r\n                            \"userinfo\": this.props.Login.userInfo\r\n                        })\r\n                            .then(response => {\r\n                                if (response.data && response.data.length > 0) {\r\n                                    const inactiveTestArray = [];\r\n                                    response.data.map(item => inactiveTestArray.indexOf(item.stestname) === -1 ? inactiveTestArray.push(item.stestname) : \"\");\r\n                                    const data = \" [\" + inactiveTestArray + \"] \" + this.props.intl.formatMessage({ id: \"IDS_INACTIVETESTSATCOMPLETE\" })\r\n                                    this.confirmMessage.confirm(this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                        this.props.intl.formatMessage({ id: \"IDS_CONFIRMATION\" }),\r\n                                        data,\r\n                                        this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n                                        this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n                                        () => this.completeSpecification(operation, inputValue, ncontrolCode),\r\n                                        false,\r\n                                        undefined);\r\n                                }\r\n                                else {\r\n                                    this.completeSpecification(operation, inputValue, ncontrolCode);\r\n                                }\r\n\r\n                            })\r\n                            .catch(error => {\r\n                                if (error.response.status === 500) {\r\n                                    toast.error(this.props.intl.formatMessage({ id: error.message }));\r\n                                }\r\n                                else {\r\n                                    toast.warn(this.props.intl.formatMessage({ id: error.response }));\r\n                                }\r\n                            })\r\n                    }\r\n                    else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n                    }\r\n                }\r\n                else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    retireSpec = (operation, selectedSpecification, approvalRoleActionDetail, retireSpecId) => {\r\n        if (selectedSpecification.testgroupspecification.napprovalstatus !== transactionStatus.RETIRED) {\r\n            if (approvalRoleActionDetail.length > 0 && approvalRoleActionDetail[0].nlevelno === transactionStatus.ACTIVE) {\r\n                if (selectedSpecification.testgroupspecification[\"napprovalstatus\"] === approvalRoleActionDetail[0].ntransactionstatus) {\r\n                    const inputParam = {\r\n                        inputData: {\r\n                            nallottedspeccode: selectedSpecification.testgroupspecification,\r\n                            treetemplatemanipulation: selectedSpecification.treetemplatemanipulation,\r\n                            approvalRoleActionDetail: approvalRoleActionDetail[0],\r\n                            userinfo: this.props.Login.userInfo,\r\n                            operation: operation\r\n                        },\r\n                        classUrl: \"testgroup\",\r\n                        operation: operation,\r\n                        methodUrl: \"Spec\",\r\n                        screenName: \"IDS_STUDYPLAN\"\r\n                    }\r\n\r\n\r\n                    let masterData = this.props.Login.masterData\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, retireSpecId)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData },\r\n                                openModal: true, screenName: \"IDS_STUDYPLAN\", operation: operation, selectedRecord: {}\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        this.props.retireSpecification(inputParam.inputData, masterData);\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_RETIRECANBECONEAFTERFINAL\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_FINALLEVELAPPROVE\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ALREADYRETIRED\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onDownloadClick = (reportSpecId) => {\r\n        if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\r\n        const inputParam = {\r\n    \r\n            Vnallottedspeccode:this.props.Login.masterData['SelectedSpecification'].nallottedspeccode,  \r\n            ntransactionstatus:this.props.Login.masterData.SelectedSpecification.napprovalstatus,\r\n\r\n        }\r\n        //this.props.reportSpecification(inputParam['inputData']);\r\n        this.props.generateControlBasedReport(reportSpecId,inputParam,this.props.Login,\"Vnallottedspeccode\",this.props.Login.masterData.SelectedComponent.nallottedspeccode);\r\n    } else {\r\n        toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\" }));\r\n    }\r\n    \r\n    }\r\n\r\n\r\n    specificationReport = (operation, ncontrolCode) => {\r\n        if (this.props.Login.masterData.SelectedComponent && this.props.Login.masterData.SelectedTest) {\r\n            const inputParam = {\r\n                inputData: {\r\n                    sprimarykeyname: 'nallottedspeccode',\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ncontrolcode: ncontrolCode,\r\n                    nregtypecode: transactionStatus.NA,\r\n                    nregsubtypecode: transactionStatus.NA,\r\n                    nreportmodulecode: transactionStatus.NA,\r\n                    nreporttypecode: REPORTTYPE.CONTROLBASED,\r\n                    nreportdecisiontypecode: transactionStatus.NA,\r\n                    certificatetypecode: transactionStatus.NA,\r\n                    nsectioncode: transactionStatus.NA,\r\n                    operation: operation,\r\n                    nallottedspeccode: this.props.Login.masterData['SelectedSpecification']['nallottedspeccode'],\r\n                    selectedComponent: this.props.Login.masterData[\"SelectedComponent\"],\r\n                    selectedTest: this.props.Login.masterData[\"SelectedTest\"],\r\n                    filterData: this.state.filterData\r\n\r\n                },\r\n            }\r\n            this.props.reportSpecification(inputParam['inputData']);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_REPORTCANNOTGENERATEFORCOMPWITHOUTTEST\" }));\r\n        }\r\n    }\r\n\r\n    completeSpecification = (operation, inputValue, ncontrolCode) => {\r\n        if (inputValue.testgroupspecification) {\r\n            if (inputValue.testgroupspecification.napprovalstatus === transactionStatus.DRAFT\r\n                || inputValue.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n\r\n                const inputParam = {\r\n                    inputData: {\r\n                        userinfo: this.props.Login.userInfo,\r\n                        ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\r\n                        testGroupTest: this.props.Login.masterData.TestGroupTest,\r\n                        // ALPD-5329 - Gowtham R - In test group specification record getting Auto Approved when configuration for test group approval not done\r\n                        isQualisLite:parseInt(this.props.Login.settings[71]),\r\n                        ...inputValue\r\n                    },\r\n                    classUrl: \"testgroup\",\r\n                    operation: operation,\r\n                    methodUrl: \"Specification\",\r\n                    screenName: \"IDS_SPECIFICATION\"\r\n                }\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                            openModal: true, screenName: \"IDS_SPECIFICATION\", operation: operation, selectedRecord: {}\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n    }\r\n\r\n    approveSpecification = (status, needEsign) => {\r\n        const masterData = this.props.Login.masterData;\r\n        const inputParam = {\r\n            inputData: {\r\n                userinfo: this.props.Login.userInfo,\r\n                treetemplatemanipulation: masterData.selectedNode,\r\n                ntreeversiontempcode: this.state.filterData.ntreeversiontempcode.value,\r\n                testgroupspecification: {\r\n                    ...masterData.SelectedSpecification,\r\n                    napprovalstatus: status\r\n                }\r\n            },\r\n            classUrl: \"testgroup\",\r\n            operation: \"approve\",\r\n            methodUrl: \"Specification\",\r\n            screenName: \"IDS_SPECIFICATION\"\r\n        }\r\n        if (needEsign === transactionStatus.YES) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_SPECIFICATION\", operation: \"approve\", selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\", {});\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo, optional) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                if (fieldName === \"ntestcode\") {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                } else {\r\n                    selectedRecord[fieldName] = comboData;\r\n                    this.setState({ selectedRecord });\r\n                }\r\n                break;\r\n\r\n            case 2:\r\n                selectedRecord[\"parameterTypeCode\"] = comboData.value;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            case 3:\r\n                selectedRecord[\"schecklistversionname\"] = comboData.item.schecklistversionname;\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n   \r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n    generateBreadCrumData(filterData) {\r\n        if (filterData && Object.values(filterData).length > 0 && filterData.nsampletypecode && filterData.nsampletypecode.item) {\r\n            // if (filterData.nsampletypecode && filterData.nproductcatcode \r\n            //     && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES \r\n            //     && filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.NO) \r\n            if (filterData.nsampletypecode && filterData.nsampletypecode.item.ncategorybasedflowrequired == transactionStatus.YES ? true : filterData.nproductcatcode \r\n                && filterData.nproductcatcode.item.ncategorybasedflow === transactionStatus.YES ? true:false) \r\n                {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ?this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]  :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\r\n                        \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_TREETEMPLATEVERSION\",\r\n                        \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\r\n                    }\r\n                ]\r\n                if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE)\r\n                {\r\n                 if ( filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\r\n                    this.breadCrumbData.push(  {\r\n                        \"label\": \"IDS_PROJECTTYPE\",\r\n                        \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_PROJECT\",\r\n                        \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\r\n                    })\r\n                }\r\n                }\r\n            } else {\r\n                this.breadCrumbData = [\r\n                    {\r\n                        \"label\": \"IDS_SAMPLETYPE\",\r\n                        \"value\": filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ?this.props.Login.genericLabel && this.props.Login.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode] :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENTCATEGORY\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIALCATEGORY\" : \"\",\r\n                        \"value\": filterData.nproductcatcode ? filterData.nproductcatcode.label : \"\"\r\n                    },\r\n\r\n                    {\r\n                        \"label\": filterData.nsampletypecode.item.nformcode === formCode.PRODUCTCATEGORY ? this.props.Login.genericLabel && this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]  :\r\n                            filterData.nsampletypecode.item.nformcode === formCode.INSTRUMENTCATEGORY ? \"IDS_INSTRUMENT\" :\r\n                                filterData.nsampletypecode.item.nformcode === formCode.MATERIALCATEGORY ? \"IDS_MATERIAL\" : \"\",\r\n                        \"value\": filterData.nproductcode ? filterData.nproductcode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_TREETEMPLATEVERSION\",\r\n                        \"value\": filterData.ntreeversiontempcode ? filterData.ntreeversiontempcode.label : \"\"\r\n                    }\r\n                ];\r\n                if (filterData.nsampletypecode.value === SampleType.PROJECTSAMPLETYPE)\r\n                {\r\n                    if ( filterData.nsampletypecode.item.nprojectspecrequired === transactionStatus.YES) {\r\n                    this.breadCrumbData.push(  {\r\n                        \"label\": \"IDS_PROJECTTYPE\",\r\n                        \"value\": filterData.nprojecttypecode ? filterData.nprojecttypecode.label : \"\"\r\n                    },\r\n                    {\r\n                        \"label\": \"IDS_PROJECT\",\r\n                        \"value\": filterData.nprojectmastercode ? filterData.nprojectmastercode.label : \"\"\r\n                    })\r\n                }\r\n                }\r\n            }\r\n\r\n        }else{\r\n            this.breadCrumbData = [\r\n                {\r\n                    \"label\": \"IDS_SAMPLETYPE\",\r\n                    \"value\":filterData && filterData.nsampletypecode ? filterData.nsampletypecode.label : \"\"\r\n                },\r\n            ]\r\n        }\r\n    }\r\n\r\n    updateSpiltterLayout() {\r\n        if (this.myRef && this.myRef.current && this.myRef.current.clientHeight + 20 !== this.state.fixefScrollHeight) {\r\n\r\n            this.setState({\r\n                fixefScrollHeight: this.myRef.current.clientHeight + 20,\r\n                disableSplit: true\r\n            })\r\n            //console.log(this.myRef.current.clientHeight)\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    disableSplit: false\r\n                })\r\n            })\r\n        }\r\n\r\n    }\r\n    componentDidUpdate(previousProps, previousState) {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        let selectedsubcodedresult = this.state.selectedsubcodedresult;\r\n        let selectsubcodedelete = this.state.selectsubcodedelete;\r\n        let filterData = this.state.filterData || {};\r\n        let isStateChanged = false;\r\n        let activeTabIndex = this.props.Login.activeTabIndex || 0;\r\n        let activeTabId = this.props.Login.activeTabId || false;\r\n        let selectedRecordCopy = this.props.Login.masterData.selectedRecordCopy;\r\n        //let CopyActiveKey = this.state.selectedRecord && this.state.selectedRecord.CopyActiveKey ? this.state.selectedRecord.CopyActiveKey:\"\";\r\n        //let CopyFocusKey =  this.state.selectedRecord && this.state.selectedRecord.CopyFocusKey ? this.state.selectedRecord.CopyFocusKey:\"\";\r\n        this.updateSpiltterLayout()\r\n        let tempFilterData = this.state.tempFilterData || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            // if(CopyActiveKey!==\"\")\r\n            // {\r\n            // selectedRecord.CopyActiveKey=CopyActiveKey;\r\n            // selectedRecord.CopyFocusKey=CopyFocusKey;\r\n            // }\r\n            isStateChanged = true;\r\n        }\r\n        if (this.props.Login.selectedsubcodedresult !== previousProps.Login.selectedsubcodedresult) {\r\n           selectedsubcodedresult = this.props.Login.selectedsubcodedresult;\r\n            //selectedsubcodedresult = this.state.selectedsubcodedresult;\r\n            isStateChanged = true;\r\n        }\r\n        if (this.props.Login.selectsubcodedelete !== previousProps.Login.selectsubcodedelete) {\r\n            selectsubcodedelete = this.props.Login.selectsubcodedelete;\r\n             //selectedsubcodedresult = this.state.selectedsubcodedresult;\r\n             isStateChanged = true;\r\n         }\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex || this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n                activeTabIndex = this.props.Login.activeTabIndex;\r\n                activeTabId = this.props.Login.activeTabId;\r\n                isStateChanged = true;\r\n                // this.setState({\r\n                //     activeTabIndex,\r\n                //     activeTabId\r\n                // });\r\n            }\r\n        }\r\n        if (this.props.Login.tempFilterData !== previousProps.Login.tempFilterData) {\r\n            tempFilterData = this.props.Login.tempFilterData || {};\r\n            isStateChanged = true;\r\n        }\r\n        let sampleType = this.state.sampleType || [];\r\n        if (this.props.Login.masterData.SampleType !== previousProps.Login.masterData.SampleType) {\r\n            const sampleTypeMap = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", \"nsorter\", \"ascending\", false);\r\n            sampleType = sampleTypeMap.get(\"OptionList\");\r\n            tempFilterData[\"nsampletypecode\"] = sampleType.length ? sampleType[0] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n        let productCategory = this.state.productCategory || [];\r\n        if (this.props.Login.masterData.ProductCategory !== previousProps.Login.masterData.ProductCategory) {\r\n            const productCatMap = constructOptionList(this.props.Login.masterData.ProductCategory || [], \"nproductcatcode\", \"sproductcatname\", \"nproductcatcode\", \"ascending\", false);\r\n            productCategory = productCatMap.get(\"OptionList\");\r\n            tempFilterData[\"nproductcatcode\"] = productCategory.length > 0 ? productCategory[0] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n        let product = this.state.product || [];\r\n        if (this.props.Login.masterData.Product !== previousProps.Login.masterData.Product) {\r\n            const productMap = constructOptionList(this.props.Login.masterData.Product || [], \"nproductcode\", \"sproductname\", \"nproductcode\", \"ascending\", false);\r\n            product = productMap.get(\"OptionList\");\r\n            tempFilterData[\"nproductcode\"] = product.length > 0 ? product[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let projectType = this.state.projectType || [];\r\n        if (this.props.Login.masterData.ProjectTypeList !== previousProps.Login.masterData.ProjectTypeList) {\r\n            const projectTypeMap = constructOptionList(this.props.Login.masterData.ProjectTypeList || [], \"nprojecttypecode\", \r\n                        \"sprojecttypename\", \"nprojecttypecode\", \"ascending\", false);\r\n            projectType = projectTypeMap.get(\"OptionList\");\r\n            tempFilterData[\"nprojecttypecode\"] = projectType.length > 0 ? projectType[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let project = this.state.project || [];\r\n        if (this.props.Login.masterData.ProjectMasterList !== previousProps.Login.masterData.ProjectMasterList) {\r\n            const projectMasterMap = constructOptionList(this.props.Login.masterData.ProjectMasterList || [], \"nprojectmastercode\", \r\n                        \"sprojectcode\", \"nprojectmastercode\", \"ascending\", false);\r\n            project = projectMasterMap.get(\"OptionList\");\r\n            tempFilterData[\"nprojectmastercode\"] = project.length > 0 ? project[0] : undefined;\r\n            isStateChanged = true;\r\n        }\r\n        let treeVersionTemplate = this.state.treeVersionTemplate || [];\r\n        if (this.props.Login.masterData.TreeVersionTemplate !== previousProps.Login.masterData.TreeVersionTemplate) {\r\n            const templateMap = constructOptionList(this.props.Login.masterData.TreeVersionTemplate || [], \"ntreeversiontempcode\", \"sversiondescription\", \"ntreeversiontempcode\", \"ascending\", false);\r\n            treeVersionTemplate = templateMap.get(\"OptionList\");\r\n            tempFilterData[\"ntreeversiontempcode\"] = treeVersionTemplate.length > 0 ? treeVersionTemplate[treeVersionTemplate.length - 1] : \"\";\r\n            isStateChanged = true;\r\n        }\r\n\r\n        // if (this.props.Login.masterData.TestGroupTestParameter && this.props.Login.masterData.TestGroupTestParameter !== previousProps.Login.masterData.TestGroupTestParameter) {\r\n        //     sortData(this.props.Login.masterData.TestGroupTestParameter, \"ascending\", \"nsorter\");\r\n        // }\r\n\r\n        // if (this.props.Login.masterData.TestGroupTesT && this.props.Login.masterData.TestGroupTesT !== previousProps.Login.masterData.TestGroupTesT) {\r\n        //     sortData(this.props.Login.masterData.TestGroupTesTest, \"ascending\", \"nsorter\");\r\n        // }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || [];\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            filterData = { ...tempFilterData };\r\n            this.generateBreadCrumData(filterData);\r\n        }\r\n\r\n        if (this.props.Login.filterData !== previousProps.Login.filterData) {\r\n            filterData = { ...this.props.Login.filterData };\r\n            this.generateBreadCrumData(filterData);\r\n            isStateChanged = true;\r\n        }\r\n        else{\r\n             this.generateBreadCrumData(filterData);\r\n        }\r\n        // else if (filterData !== previousState.filterData) {\r\n        //     filterData = { ...tempFilterData };\r\n        //     this.generateBreadCrumData(filterData);\r\n        // }\r\n\r\n        let historyDataState = this.state.historyDataState;\r\n        if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n            historyDataState = this.props.Login.historyDataState;\r\n            isStateChanged = true;\r\n        }\r\n\r\n        let { testskip, testtake } = this.state;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = testtake ? testtake : this.props.Login.testtake\r\n            isStateChanged = true;\r\n        } \r\n        let { skipRulesEngine, takeRulesEngine } = this.state;\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            skipRulesEngine = this.props.Login.skipRulesEngine === undefined ? skipRulesEngine : this.props.Login.skipRulesEngine\r\n            takeRulesEngine = takeRulesEngine ? takeRulesEngine : this.props.Login.takeRulesEngine\r\n            isStateChanged = true;\r\n        }\r\n        if (isStateChanged) {\r\n            this.setState({\r\n                selectedRecord,selectedRecordCopy, tempFilterData, filterData, userRoleControlRights, controlMap,\r\n                sampleType, productCategory, product, treeVersionTemplate, historyDataState,\r\n                testskip, testtake, projectType, project,activeTabIndex, activeTabId, skipRulesEngine, takeRulesEngine,selectedsubcodedresult,selectsubcodedelete\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, filterTestGroup, createTree, editTree, sampleTypeOnChange,\r\n    getTestGroupDetails, validateEsignCredential, updateStore, addSpecification, getSpecification, addComponent,\r\n    changeTestCategory, addTestGroupTest, editTestGroupTest, getTestGroupParameter, editTestGroupParameter,\r\n    addTestFile, editSpecFile, getSpecificationDetails, addTestGroupCodedResult, getComponentBySpecId, filterColumnData,\r\n    viewAttachment, viewTestGroupCheckList, getTestGroupComponentDetails, filterTransactionList, reportSpecification, retireSpecification, getDataForTestMaterial, getEditTestGroupRulesEngine,\r\n    getMaterialCategoryBasedMaterialType, getMaterialBasedMaterialCategory, getTestGroupMaterial, getDataForEditTestMaterial, addTestGroupNumericTab, getTestGroupRulesEngineAdd,\r\n    getSelectedTestGroupRulesEngine, getParameterforEnforce, getParameterRulesEngine, getParameterResultValue, subCodedResultView, saveExecutionOrder, getPredefinedDataRulesEngine,getCopyValues,\r\n    generateControlBasedReport,getSpecDetailsForCopy,getSpecificationComboServices,getComponentComboServices,getRulesTestComboServices,getProductComboServices,getProfileRootComboServices\r\n})(injectIntl(TestGroup));"]},"metadata":{},"sourceType":"module"}