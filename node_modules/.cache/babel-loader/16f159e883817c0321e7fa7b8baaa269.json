{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dashboard\\\\AddQuery.jsx\";\nimport React, { Component } from 'react'; //createRef\n\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { Grid, GridColumn, GridColumnMenuFilter } from '@progress/kendo-react-grid';\nimport { Draggable, Droppable } from 'react-drag-and-drop';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons';\nimport FormInput from '../../components/form-input/form-input.component';\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail, getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName } from '../../actions';\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { process } from '@progress/kendo-data-query';\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\nimport { tableType, queryTypeFilter } from '../../components/Enumeration';\n\nclass AddQuery extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.tableDataStateChange = event => {\n      this.setState({\n        dataStateTable: event.dataState\n      });\n    };\n\n    this.expandChange = event => {\n      event.dataItem.expanded = !event.dataItem.expanded;\n      this.forceUpdate();\n    };\n\n    this.detailBand = props => {\n      const columnName = this.props.tableList.filter(p => p.stable === props.dataItem.tableName);\n      return /*#__PURE__*/React.createElement(Grid, {\n        data: columnName //resizable\n        //scrollable={\"scrollable\"}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(GridColumn, {\n        width: \"48px\",\n        cell: row => /*#__PURE__*/React.createElement(\"td\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(Draggable, {\n          type: 'dragcolumn',\n          data: row.dataItem.stable + \".\" + row.dataItem.scolumn,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n          icon: faGripVertical,\n          className: \"dragicon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 33\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(GridColumn, {\n        width: \"336px\",\n        field: \"scolumn\",\n        title: this.props.intl.formatMessage({\n          id: \"IDS_COLUMN_NAME\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }\n      }));\n    };\n\n    this.state = {\n      dataStateTable: {\n        skip: 0\n      }\n    };\n  }\n\n  columnProps(field) {\n    if (!this.props.hideColumnFilter) {\n      return {\n        field: field,\n        columnMenu: ColumnMenu,\n        headerClassName: this.isColumnActive(field, this.state.dataStateTable) ? 'active' : ''\n      };\n    }\n  }\n\n  isColumnActive(field, dataState) {\n    return GridColumnMenuFilter.active(field, dataState.filter);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ntabletypecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_TABLETYPE\"\n      }),\n      isSearchable: false,\n      isDisabled: false,\n      isMulti: false,\n      placeholder: \"Please Select...\",\n      isMandatory: true,\n      options: this.props.tableType // optionId='ntabletypecode'\n      // optionValue='stabletype'\n      ,\n      defaultValue: this.props.selectedTableType[\"ntabletypecode\"],\n      showOption: true,\n      required: true,\n      value: this.props.selectedTableType[\"ntabletypecode\"] ? this.props.selectedTableType[\"ntabletypecode\"] : \"\",\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      onChange: event => this.props.onComboChange(event, 'ntabletypecode') //  sortField={\"ntabletypecode\"}\n      //  sortOrder={\"ascending\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }), this.props.tableTypeCode === tableType.ALL ? \"\" : /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nformcode\",\n      formLabel: this.props.intl.formatMessage({\n        id: this.props.tableTypeCode === tableType.MODULES ? \"IDS_MODULENAME\" : this.props.tableTypeCode === tableType.FORMS ? \"IDS_FORMNAME\" : \"IDS_FORMNAME\"\n      }),\n      isSearchable: true,\n      isDisabled: this.props.tableTypeCode === tableType.ALL ? true : false,\n      isMulti: false,\n      placeholder: \"Please Select...\",\n      isMandatory: true,\n      options: this.props.moduleFormName || [],\n      optionId: \"nformcode\",\n      optionValue: \"sformname\",\n      defaultValue: this.props.selectedRecord[\"nformcode\"],\n      showOption: true,\n      required: true,\n      value: this.props.selectedRecord[\"nformcode\"] ? this.props.selectedRecord[\"nformcode\"] : \"\",\n      closeMenuOnSelect: true //alphabeticalSort={true}\n      ,\n      onChange: event => this.props.onComboChange(event, 'nformcode') //sortField={\"nformcode\"}\n      //sortOrder={\"ascending\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      style: {\n        height: '600px'\n      },\n      data: process(this.props.tableName, this.state.dataStateTable) //{...this.dataStateTable}\n      ,\n      onDataStateChange: this.tableDataStateChange,\n      dataState: this.state.dataStateTable,\n      detail: this.detailBand,\n      expandField: \"expanded\",\n      onExpandChange: this.expandChange //data={process(this.props.tableList, this.props.dataStateTable)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(GridColumn, {\n      width: \"48px\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(Draggable, {\n        type: \"dragtable\",\n        data: row.dataItem.tableName,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faGripVertical,\n        className: \"dragicon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 53\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, Object.assign({\n      width: \"425px\",\n      field: \"tableName\"\n    }, this.columnProps(\"tableName\"), {\n      title: this.props.intl.formatMessage({\n        id: \"IDS_TABLE_NAME\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 37\n      }\n    }))))))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      name: \"ssqlqueryname\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SQLQUERYNAME\"\n      }),\n      type: \"text\",\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SQLQUERYNAME\"\n      }),\n      value: this.props.selectedRecord[\"ssqlqueryname\"],\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Droppable, {\n      types: ['dragcolumn', 'dragtable'],\n      onDrop: event => this.props.onDrop(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormTextarea, {\n      name: \"ssqlquery\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SQLQUERY\"\n      }),\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SQLQUERY\"\n      }),\n      value: this.props.selectedRecord[\"ssqlquery\"],\n      rows: 15,\n      isMandatory: true,\n      required: true,\n      maxLength: 10000,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 33\n      }\n    })), this.props.queryTypeCode === queryTypeFilter.LIMSALERTQUERY && /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sscreenheader\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SCREENHEADER\"\n      }),\n      type: \"text\",\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SCREENHEADER\"\n      }),\n      value: this.props.selectedRecord[\"sscreenheader\"],\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      isDisabled: this.props.queryTypeCode === 2 ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 33\n      }\n    }), this.props.queryTypeCode === queryTypeFilter.LIMSFILTERQUERY && /*#__PURE__*/React.createElement(FormInput, {\n      name: \"svaluemember\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SVALUEMEMBER\"\n      }),\n      type: \"text\",\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SVALUEMEMBER\"\n      }),\n      value: this.props.selectedRecord[\"svaluemember\"],\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 33\n      }\n    }), this.props.queryTypeCode === queryTypeFilter.LIMSFILTERQUERY && /*#__PURE__*/React.createElement(FormInput, {\n      name: \"sdisplaymember\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SDISPLAYMEMBER\"\n      }),\n      type: \"text\",\n      onChange: event => this.props.onInputOnChange(event),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_SDISPLAYMEMBER\"\n      }),\n      value: this.props.selectedRecord[\"sdisplaymember\"],\n      isMandatory: true,\n      required: true,\n      maxLength: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 33\n      }\n    }), this.props.queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY && /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ncharttypecode\",\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_CHARTTYPE\"\n      }),\n      isSearchable: true,\n      placeholder: \"Please Select...\",\n      isMandatory: true,\n      options: this.props.chartList,\n      optionId: \"ncharttypecode\",\n      optionValue: \"schartname\",\n      value: this.props.selectedRecord[\"ncharttypecode\"],\n      defaultValue: this.props.selectedRecord[\"ncharttypecode\"],\n      onChange: event => this.props.onComboChange(event, 'ncharttypecode'),\n      closeMenuOnSelect: true,\n      alphabeticalSort: true,\n      isDisabled: this.props.queryTypeCode === 1 ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 33\n      }\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  filterColumnData,\n  validateEsignCredential,\n  getSQLQueryDetail,\n  getSQLQueryComboService,\n  comboChangeQueryType,\n  executeUserQuery,\n  comboColumnValues,\n  getColumnNamesByTableName\n})(injectIntl(AddQuery));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dashboard/AddQuery.jsx"],"names":["React","Component","connect","injectIntl","Row","Col","Grid","GridColumn","GridColumnMenuFilter","Draggable","Droppable","FontAwesomeIcon","faGripVertical","FormInput","FormTextarea","FormSelectSearch","callService","crudMaster","validateEsignCredential","updateStore","getSQLQueryDetail","getSQLQueryComboService","filterColumnData","comboChangeQueryType","executeUserQuery","comboColumnValues","getColumnNamesByTableName","AtTableWrap","process","ColumnMenu","tableType","queryTypeFilter","AddQuery","constructor","props","tableDataStateChange","event","setState","dataStateTable","dataState","expandChange","dataItem","expanded","forceUpdate","detailBand","columnName","tableList","filter","p","stable","tableName","row","scolumn","intl","formatMessage","id","state","skip","columnProps","field","hideColumnFilter","columnMenu","headerClassName","isColumnActive","active","render","selectedTableType","onComboChange","tableTypeCode","ALL","MODULES","FORMS","moduleFormName","selectedRecord","height","onInputOnChange","onDrop","queryTypeCode","LIMSALERTQUERY","LIMSFILTERQUERY","LIMSDASHBOARDQUERY","chartList","mapStateToProps","Login"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';//createRef\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { Grid, GridColumn, GridColumnMenuFilter } from '@progress/kendo-react-grid';\r\nimport { Draggable, Droppable } from 'react-drag-and-drop';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGripVertical } from '@fortawesome/free-solid-svg-icons';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component'\r\nimport {\r\n    callService, crudMaster, validateEsignCredential, updateStore, getSQLQueryDetail,\r\n    getSQLQueryComboService, filterColumnData, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName\r\n} from '../../actions';\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ColumnMenu from '../../components/data-grid/ColumnMenu';\r\nimport { tableType,queryTypeFilter} from '../../components/Enumeration';\r\n\r\n\r\nclass AddQuery extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            dataStateTable: { skip: 0 },\r\n        });\r\n\r\n    }\r\n    tableDataStateChange = (event) => {\r\n        this.setState({\r\n            dataStateTable: event.dataState\r\n        });\r\n    }\r\n    expandChange = (event) => {\r\n        event.dataItem.expanded = !event.dataItem.expanded;\r\n        this.forceUpdate();\r\n    }\r\n\r\n    detailBand = (props) => {\r\n        const columnName = this.props.tableList.filter(p => p.stable === props.dataItem.tableName)\r\n\r\n        return (\r\n            <Grid\r\n                data={columnName}\r\n                //resizable\r\n                //scrollable={\"scrollable\"}\r\n            >\r\n\r\n                <GridColumn\r\n                    width=\"48px\"\r\n                    cell={(row) => (\r\n                        <td>\r\n                            <Draggable type={'dragcolumn'} data={row.dataItem.stable + \".\" + row.dataItem.scolumn}>\r\n                                <FontAwesomeIcon icon={faGripVertical} className=\"dragicon\" />\r\n                            </Draggable>\r\n                        </td>\r\n                    )}\r\n                />\r\n\r\n                <GridColumn\r\n                    width={\"336px\"}\r\n                    field=\"scolumn\"\r\n                    title={this.props.intl.formatMessage({ id: \"IDS_COLUMN_NAME\" })}\r\n                />\r\n\r\n            </Grid>\r\n        );\r\n    }\r\n    columnProps(field) {\r\n        if (!this.props.hideColumnFilter) {\r\n            return {\r\n                field: field,\r\n                columnMenu: ColumnMenu,\r\n                headerClassName: this.isColumnActive(field, this.state.dataStateTable) ? 'active' : ''\r\n            };\r\n        }\r\n    }\r\n\r\n    isColumnActive(field, dataState) {\r\n        return GridColumnMenuFilter.active(field, dataState.filter)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col md={6}>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                        <FormSelectSearch\r\n                        name={\"ntabletypecode\"}\r\n                        formLabel={this.props.intl.formatMessage({ id: \"IDS_TABLETYPE\" })}\r\n                        isSearchable={false}\r\n                        isDisabled={false}\r\n                        isMulti={false}\r\n                        placeholder=\"Please Select...\"\r\n                        isMandatory={true}\r\n                        options={this.props.tableType}\r\n                        // optionId='ntabletypecode'\r\n                        // optionValue='stabletype'\r\n                        defaultValue={this.props.selectedTableType[\"ntabletypecode\"]}\r\n                        showOption={true}\r\n                        required={true}\r\n                        value={this.props.selectedTableType[\"ntabletypecode\"] ? this.props.selectedTableType[\"ntabletypecode\"] : \"\"}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n                        onChange={(event) => this.props.onComboChange(event, 'ntabletypecode')}\r\n                        //  sortField={\"ntabletypecode\"}\r\n                        //  sortOrder={\"ascending\"}\r\n\r\n                    >\r\n                    </FormSelectSearch>\r\n                    {this.props.tableTypeCode === tableType.ALL ? \"\":\r\n                    <FormSelectSearch\r\n                        name={\"nformcode\"}\r\n                        formLabel={this.props.intl.formatMessage({ id: this.props.tableTypeCode === tableType.MODULES ? \"IDS_MODULENAME\": this.props.tableTypeCode === tableType.FORMS ? \"IDS_FORMNAME\" : \"IDS_FORMNAME\" })}\r\n                        isSearchable={true}\r\n                        isDisabled={this.props.tableTypeCode === tableType.ALL ? true : false}\r\n                        isMulti={false}\r\n                        placeholder=\"Please Select...\"\r\n                        isMandatory={true}\r\n                        options={this.props.moduleFormName || [] }\r\n                        optionId='nformcode'\r\n                        optionValue='sformname'\r\n                        defaultValue={this.props.selectedRecord[\"nformcode\"]}\r\n                        showOption={true}\r\n                        required={true}\r\n                        value={this.props.selectedRecord[\"nformcode\"] ? this.props.selectedRecord[\"nformcode\"] : \"\"}\r\n                        closeMenuOnSelect={true}\r\n                        //alphabeticalSort={true}\r\n                        onChange={(event) => this.props.onComboChange(event, 'nformcode')}\r\n                         //sortField={\"nformcode\"}\r\n                         //sortOrder={\"ascending\"}\r\n\r\n                    >\r\n                    </FormSelectSearch>\r\n                    }\r\n                            <AtTableWrap className=\"at-list-table\">\r\n                                <Grid\r\n                                    style={{ height: '600px' }}\r\n                                    data={process(this.props.tableName, this.state.dataStateTable)}\r\n                                    //{...this.dataStateTable}\r\n                                    onDataStateChange={this.tableDataStateChange}\r\n                                    dataState={this.state.dataStateTable}\r\n                                    detail={this.detailBand}\r\n                                    expandField=\"expanded\"\r\n                                    onExpandChange={this.expandChange}\r\n                                //data={process(this.props.tableList, this.props.dataStateTable)}\r\n\r\n                                >\r\n                                    <GridColumn\r\n                                        width=\"48px\"\r\n                                        cell={(row) => (\r\n                                            <td >\r\n                                                <Draggable type=\"dragtable\" data={row.dataItem.tableName}>\r\n                                                    <FontAwesomeIcon icon={faGripVertical} className=\"dragicon\"></FontAwesomeIcon>\r\n                                                </Draggable>\r\n                                            </td>\r\n                                        )}\r\n                                    />\r\n\r\n                                    <GridColumn\r\n                                        width={\"425px\"}\r\n                                        field=\"tableName\"\r\n                                        {...this.columnProps(\"tableName\")}\r\n                                        title={this.props.intl.formatMessage({ id: \"IDS_TABLE_NAME\" })}\r\n                                    />\r\n                                </Grid>\r\n                            </AtTableWrap>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n\r\n                <Col md={6}>\r\n                    <Row>\r\n                        <Col md={12}>\r\n                            <FormInput\r\n                                name={\"ssqlqueryname\"}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_SQLQUERYNAME\" })}\r\n                                type=\"text\"\r\n                                onChange={(event) => this.props.onInputOnChange(event)}\r\n                                placeholder={this.props.intl.formatMessage({ id: \"IDS_SQLQUERYNAME\" })}\r\n                                value={this.props.selectedRecord[\"ssqlqueryname\"]}\r\n                                isMandatory={true}\r\n                                required={true}\r\n                                maxLength={100}\r\n\r\n                            />\r\n\r\n                            <Droppable\r\n                                types={['dragcolumn', 'dragtable']}\r\n                                onDrop={event => this.props.onDrop(event)}\r\n                            >\r\n\r\n                                <FormTextarea\r\n                                    name={\"ssqlquery\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SQLQUERY\" })}\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SQLQUERY\" })}\r\n                                    value={this.props.selectedRecord[\"ssqlquery\"]}\r\n                                    rows={15}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={10000}\r\n                                />\r\n                            </Droppable>\r\n\r\n\r\n                            {/* {this.props.queryTypeCode === 12 &&\r\n                                <FormInput\r\n                                    name={\"sscreenrecordquery\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SCREENRECORDQUERY\" })}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SCREENRECORDQUERY\" })}\r\n                                    value={this.props.selectedRecord[\"sscreenrecordquery\"]}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n                                    isDisabled={this.props.queryTypeCode === 2 ? false : true}\r\n                                    isVisible={false}\r\n                                />\r\n                            } */}\r\n                            {this.props.queryTypeCode ===  queryTypeFilter.LIMSALERTQUERY &&\r\n                                <FormInput\r\n                                    name={\"sscreenheader\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SCREENHEADER\" })}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SCREENHEADER\" })}\r\n                                    value={this.props.selectedRecord[\"sscreenheader\"]}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n                                    isDisabled={this.props.queryTypeCode === 2 ? false : true}\r\n                                />\r\n                            }\r\n                            {this.props.queryTypeCode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                <FormInput\r\n                                    name={\"svaluemember\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SVALUEMEMBER\" })}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SVALUEMEMBER\" })}\r\n                                    value={this.props.selectedRecord[\"svaluemember\"]}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n\r\n                                />\r\n                            }\r\n                            {this.props.queryTypeCode === queryTypeFilter.LIMSFILTERQUERY &&\r\n                                <FormInput\r\n                                    name={\"sdisplaymember\"}\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_SDISPLAYMEMBER\" })}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.props.onInputOnChange(event)}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_SDISPLAYMEMBER\" })}\r\n                                    value={this.props.selectedRecord[\"sdisplaymember\"]}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={100}\r\n\r\n                                />\r\n                            }\r\n                            {this.props.queryTypeCode === queryTypeFilter.LIMSDASHBOARDQUERY &&\r\n                                <FormSelectSearch\r\n                                    name={\"ncharttypecode\"}\r\n                                    formLabel={this.props.intl.formatMessage({ id: \"IDS_CHARTTYPE\" })}\r\n                                    isSearchable={true}\r\n\r\n\r\n                                    placeholder=\"Please Select...\"\r\n                                    isMandatory={true}\r\n                                    options={this.props.chartList}\r\n                                    optionId='ncharttypecode'\r\n                                    optionValue='schartname'\r\n                                    value={this.props.selectedRecord[\"ncharttypecode\"]}\r\n                                    defaultValue={this.props.selectedRecord[\"ncharttypecode\"]}\r\n\r\n                                    onChange={(event) => this.props.onComboChange(event, 'ncharttypecode')}\r\n                                    closeMenuOnSelect={true}\r\n                                    alphabeticalSort={true}\r\n                                    isDisabled={this.props.queryTypeCode === 1 ? false : true}\r\n                                />\r\n                            }\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore, filterColumnData, validateEsignCredential, getSQLQueryDetail, getSQLQueryComboService, comboChangeQueryType, executeUserQuery, comboColumnValues, getColumnNamesByTableName\r\n})(injectIntl(AddQuery));"]},"metadata":{},"sourceType":"module"}