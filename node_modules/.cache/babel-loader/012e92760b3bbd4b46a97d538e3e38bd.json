{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\registrationtype\\\\RegistrationType.jsx\";\nimport React from 'react';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { Row, Col, Nav } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { callService, crudMaster, showRegTypeAddScreen, fetchRegTypeById, updateStore, validateEsignCredential } from '../../../actions';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\nimport Esign from '../../audittrail/Esign';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport { faLanguage } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport AddSynonym from '../../../components/droparea/AddSynonym';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass RegistrationType extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let selectedId = null;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let dataState = undefined;\n\n      if (this.state.showSynonym) {\n        this.setState({\n          showSynonym: false\n        });\n        return null;\n      }\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        selectedId = this.state.selectedRecord.nregtypecode;\n        dataState = this.state.dataState;\n        inputData[\"registrationtype\"] = {\n          \"nregtypecode\": this.state.selectedRecord.nregtypecode ? this.state.selectedRecord.nregtypecode : -1,\n          \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\n          \"jsondata\": {\n            \"sregtypename\": this.state.selectedRecord.sregtypename,\n            \"sdescription\": this.state.selectedRecord.sdescription\n          }\n        };\n      } else {\n        //add               \n        inputData[\"registrationtype\"] = {\n          \"nsampletypecode\": this.state.selectedRecord.nsampletypecode ? this.state.selectedRecord.nsampletypecode : -1,\n          \"jsondata\": {\n            \"sregtypename\": this.state.selectedRecord.sregtypename,\n            \"sdescription\": this.state.selectedRecord.sdescription\n          }\n        };\n      }\n\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        dataState,\n        selectedId\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.deleteRecord = deleteParam => {\n      const inputParam = {\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        dataState: this.state.dataState,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: {\n          \"registrationtype\": deleteParam.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: deleteParam.operation\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: deleteParam.operation,\n            openModal: true,\n            screenName: this.props.Login.inputParam.displayName,\n            optionsSampleType: this.props.Login.optionsSampleType //,\n\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        classUrl: this.props.Login.inputParam.classUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\n      } else {\n        if (name === 'synonym') {\n          selectedRecord['sregtypename'] = { ...selectedRecord['sregtypename'],\n            [event.target.name]: event.target.value\n          };\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const {\n        selectedRecord\n      } = this.state || {};\n\n      if (comboData) {\n        fieldName = 'nsampletypecode';\n        selectedRecord['SampleTypes'] = comboData;\n        selectedRecord[fieldName] = comboData.value;\n      } else {\n        fieldName = 'nsampletypecode';\n        selectedRecord['SampleTypes'] = comboData;\n        selectedRecord[fieldName] = \"\";\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.formRef = React.createRef();\n    this.extractedColumnList = [];\n    this.handleClose = this.handleClose.bind(this);\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      dataResult: [],\n      dataState: _dataState,\n      action: \"\",\n      mandatoryFields: [{\n        \"idsName\": \"IDS_SAMPLETYPENAME\",\n        \"dataField\": \"SampleTypes\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPENAME\",\n        \"dataField\": \"sregtypename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      } //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\n      ]\n    };\n  }\n\n  //to close side out\n  handleClose() {\n    let loadEsign = this.props.Login.loadEsign;\n    let openModal = this.props.Login.openModal;\n    let selectedRecord = this.props.Login.selectedRecord;\n\n    if (this.state.showSynonym) {\n      this.setState({\n        showSynonym: false\n      });\n      return null;\n    }\n\n    if (this.props.Login.loadEsign) {\n      if (this.props.Login.operation === \"delete\") {\n        loadEsign = false;\n        openModal = false;\n      } else {\n        loadEsign = false;\n      }\n    } else {\n      openModal = false;\n      selectedRecord = {};\n    }\n\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        openModal,\n        loadEsign,\n        selectedRecord,\n        optionsChecklistComponent: [],\n        optionsSampleType: []\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"idsName\": \"IDS_SAMPLETYPENAME\",\n        \"dataField\": \"ssampletypename\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPENAME\",\n        \"dataField\": \"sregtypename\",\n        \"width\": \"250px\"\n      }, {\n        \"idsName\": \"IDS_DESCRIPTION\",\n        \"dataField\": \"sdescription\",\n        \"width\": \"150px\"\n      }];\n      primaryKeyField = \"nregtypecode\";\n    }\n\n    const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddRegistrationType\") && this.state.controlMap.get('AddRegistrationType').ncontrolcode;\n    const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditRegistrationType\") && this.state.controlMap.get('EditRegistrationType').ncontrolcode;\n    const editParam = {\n      screenName: \"RegistrationType\",\n      operation: \"update\",\n      primaryKeyField: primaryKeyField,\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId\n    };\n    const deleteParam = {\n      screenName: \"RegistrationType\",\n      methodUrl: \"RegistrationType\",\n      operation: \"delete\",\n      key: 'registrationtype'\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.fetchRegTypeById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      gridHeight: '600px',\n      scrollable: \"scrollable\",\n      selectedId: this.props.Login.selectedId,\n      addRecord: () => this.props.showRegTypeAddScreen(this.props.Login.userInfo, addID),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      onSaveClick: this.onSaveClick,\n      operation: this.props.Login.operation,\n      screenName: this.props.Login.inputParam.displayName,\n      closeModal: this.handleClose,\n      show: this.props.Login.openModal,\n      showSaveContinue: false,\n      hideSave: this.state.showSynonym,\n      closeLabel: this.state.showSynonym ? \"IDS_CLOSE\" : undefined,\n      inputParam: this.props.Login.inputParam,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord,\n      mandatoryFields: this.state.mandatoryFields,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation ? this.props.Login.operation : '',\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 29\n        }\n      }) : this.state.showSynonym ? /*#__PURE__*/React.createElement(AddSynonym, {\n        selectedFieldRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        languages: this.props.Login.languageList || [],\n        fieldName: \"sregtypename\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 33\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n        name: \"nsampletypecode\",\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_SAMPLETYPENAME\"\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        value: this.state.selectedRecord.SampleTypes ? this.state.selectedRecord.SampleTypes : [],\n        options: this.props.Login.optionsSampleType ? this.props.Login.optionsSampleType : [],\n        optionId: \"nsampletypecode\",\n        optionValue: \"ssampletypename\",\n        isMandatory: true,\n        required: true,\n        as: \"select\",\n        onChange: event => this.onComboChange(event, \"nsampletypecode\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 11,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        name: this.props.Login.language,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONTYPENAME\"\n        }),\n        onChange: event => this.onInputOnChange(event, 'synonym'),\n        className: \"\",\n        isMandatory: true,\n        label: this.props.intl.formatMessage({\n          id: \"IDS_REGISTRATIONTYPENAME\"\n        }),\n        required: true,\n        value: this.state.selectedRecord.sregtypename ? this.state.selectedRecord.sregtypename[this.props.Login.language] : \"\",\n        maxLength: \"100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 41\n        }\n      })), /*#__PURE__*/React.createElement(Col, {\n        md: 1,\n        className: \"p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Nav.Link, {\n        name: \"addsynonym\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADDSYNONYMN\"\n        }),\n        \"data-for\": \"tooltip_list_wrap\" // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\n        ,\n        className: \"btn btn-circle outline-grey mr-2\",\n        onClick: e => this.setState({\n          showSynonym: true\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faLanguage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 45\n        }\n      }))), /*#__PURE__*/React.createElement(Col, {\n        md: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormTextarea, {\n        name: \"sdescription\",\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        onChange: event => this.onInputOnChange(event),\n        isMandatory: false,\n        rows: \"1\",\n        label: this.props.intl.formatMessage({\n          id: \"IDS_DESCRIPTION\"\n        }),\n        type: \"textarea\",\n        value: this.state.selectedRecord ? this.state.selectedRecord.sdescription : \"\",\n        maxLength: \"255\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 41\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2) {\n          this.props.Login.inputParam.formRef.current.reset();\n        }\n\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, dataState),\n          dataState,\n          selectedRecord: {\n            sregtypename: '',\n            sdescription: ''\n          }\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      let mandatoryFields = this.props.Login.mandatoryFields ? this.props.Login.mandatoryFields : [{\n        \"idsName\": \"IDS_SAMPLETYPENAME\",\n        \"dataField\": \"SampleTypes\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPENAME\",\n        \"dataField\": \"sregtypename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\"\n      } //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\n      ];\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord,\n        mandatoryFields\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  showRegTypeAddScreen,\n  fetchRegTypeById,\n  updateStore,\n  validateEsignCredential\n})(injectIntl(RegistrationType));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/registrationtype/RegistrationType.jsx"],"names":["React","ListWrapper","Row","Col","Nav","toast","process","connect","injectIntl","callService","crudMaster","showRegTypeAddScreen","fetchRegTypeById","updateStore","validateEsignCredential","DEFAULT_RETURN","DataGrid","FormTextarea","FormSelectSearch","SlideOutModal","showEsign","getControlMap","Esign","FormInput","faLanguage","FontAwesomeIcon","AddSynonym","mapStateToProps","state","Login","RegistrationType","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","onSaveClick","saveType","formRef","inputData","selectedId","userInfo","undefined","showSynonym","operation","selectedRecord","nregtypecode","nsampletypecode","sregtypename","sdescription","inputParam","methodUrl","classUrl","displayName","userRoleControlRights","nformcode","ncontrolcode","updateInfo","typeName","data","loadEsign","screenData","deleteRecord","deleteParam","ncontrolCode","openModal","screenName","optionsSampleType","reloadData","userinfo","validateEsign","sreason","password","onInputOnChange","name","target","type","checked","value","onComboChange","comboData","fieldName","createRef","extractedColumnList","handleClose","bind","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","action","mandatoryFields","optionsChecklistComponent","getDerivedStateFromProps","warn","render","primaryKeyField","addID","has","get","editId","editParam","key","languageList","intl","formatMessage","id","SampleTypes","language","e","componentDidUpdate","previousProps","Object","values","map","item","push","current","reset","componentWillUnmount","modalName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,yCAA5B;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,QAA8B,iBAA9B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,oBAAlC,EAAwDC,gBAAxD,EAA0EC,WAA1E,EAAuFC,uBAAvF,QAAsH,kBAAtH;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,OAAOC,QAAP,MAAqB,mDAArB;AACA,OAAOC,YAAP,MAAyB,2DAAzB;AACA,OAAOC,gBAAP,MAA6B,qEAA7B;AACA,OAAOC,aAAP,MAA0B,mDAA1B;AACA,SAASC,SAAT,EAAoBC,aAApB,QAAyC,kCAAzC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,SAAP,MAAsB,qDAAtB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,OAAOC,UAAP,MAAuB,yCAAvB;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,gBAAN,SAA+B9B,KAAK,CAAC+B,SAArC,CAA+C;AAC3CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAqBnBC,eArBmB,GAqBAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAE/B,OAAO,CAAC,KAAK2B,KAAL,CAAWJ,KAAX,CAAiBS,UAAlB,EAA8BH,KAAK,CAACI,SAApC,CADT;AAEVA,QAAAA,SAAS,EAAEJ,KAAK,CAACI;AAFP,OAAd;AAIH,KA1BkB;;AAAA,SA8DnBC,WA9DmB,GA8DL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAIC,SAAS,GAAG,EAAhB;AACA,UAAIC,UAAU,GAAG,IAAjB;AACAD,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKV,KAAL,CAAWJ,KAAX,CAAiBgB,QAAzC;AACA,UAAIN,SAAS,GAAGO,SAAhB;;AACA,UAAI,KAAKlB,KAAL,CAAWmB,WAAf,EAA4B;AACxB,aAAKX,QAAL,CAAc;AAAEW,UAAAA,WAAW,EAAE;AAAf,SAAd;AACA,eAAO,IAAP;AACH;;AACD,UAAI,KAAKd,KAAL,CAAWJ,KAAX,CAAiBmB,SAAjB,KAA+B,QAAnC,EAA6C;AACzC;AACAJ,QAAAA,UAAU,GAAG,KAAKhB,KAAL,CAAWqB,cAAX,CAA0BC,YAAvC;AACAX,QAAAA,SAAS,GAAG,KAAKX,KAAL,CAAWW,SAAvB;AACAI,QAAAA,SAAS,CAAC,kBAAD,CAAT,GAAgC;AAC5B,0BAAgB,KAAKf,KAAL,CAAWqB,cAAX,CAA0BC,YAA1B,GAAyC,KAAKtB,KAAL,CAAWqB,cAAX,CAA0BC,YAAnE,GAAkF,CAAC,CADvE;AAE5B,6BAAmB,KAAKtB,KAAL,CAAWqB,cAAX,CAA0BE,eAFjB;AAG5B,sBAAY;AACR,4BAAgB,KAAKvB,KAAL,CAAWqB,cAAX,CAA0BG,YADlC;AAER,4BAAgB,KAAKxB,KAAL,CAAWqB,cAAX,CAA0BI;AAFlC;AAHgB,SAAhC;AAQH,OAZD,MAaK;AACD;AACAV,QAAAA,SAAS,CAAC,kBAAD,CAAT,GACA;AACI,6BAAmB,KAAKf,KAAL,CAAWqB,cAAX,CAA0BE,eAA1B,GAA4C,KAAKvB,KAAL,CAAWqB,cAAX,CAA0BE,eAAtE,GAAwF,CAAC,CADhH;AAEI,sBAAY;AACR,4BAAgB,KAAKvB,KAAL,CAAWqB,cAAX,CAA0BG,YADlC;AAER,4BAAgB,KAAKxB,KAAL,CAAWqB,cAAX,CAA0BI;AAFlC;AAFhB,SADA;AAQH;;AAED,YAAMC,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BC,SADxB;AAEfC,QAAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BE,QAFvB;AAGfC,QAAAA,WAAW,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BG,WAA5B,GAA0C,KAAKxB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BG,WAAtE,GAAoF,EAHlF;AAIfd,QAAAA,SAAS,EAAEA,SAJI;AAKfK,QAAAA,SAAS,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB,SALb;AAMfP,QAAAA,QANe;AAMLC,QAAAA,OANK;AAMIH,QAAAA,SANJ;AAMeK,QAAAA;AANf,OAAnB;AAQA,YAAMN,UAAU,GAAG,KAAKL,KAAL,CAAWJ,KAAX,CAAiBS,UAApC;;AAEA,UAAIlB,SAAS,CAAC,KAAKa,KAAL,CAAWJ,KAAX,CAAiB6B,qBAAlB,EAAyC,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBgB,QAAjB,CAA0Bc,SAAnE,EAA8E,KAAK1B,KAAL,CAAWJ,KAAX,CAAiB+B,YAA/F,CAAb,EAA2H;AACvH,cAAMC,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE/C,cADK;AAEfgD,UAAAA,IAAI,EAAE;AACFC,YAAAA,SAAS,EAAE,IADT;AACeC,YAAAA,UAAU,EAAE;AAAEX,cAAAA,UAAF;AAAchB,cAAAA;AAAd,aAD3B;AACuDG,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAKR,KAAL,CAAWpB,WAAX,CAAuBgD,UAAvB;AACH,OARD,MASK;AACD,aAAK5B,KAAL,CAAWvB,UAAX,CAAsB4C,UAAtB,EAAkChB,UAAlC,EAA8C,WAA9C;AACH;AAEJ,KAvHkB;;AAAA,SA2HnB4B,YA3HmB,GA2HHC,WAAD,IAAiB;AAC5B,YAAMb,UAAU,GAAG;AACfC,QAAAA,SAAS,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BC,SADxB;AAEfC,QAAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BE,QAFvB;AAGfjB,QAAAA,SAAS,EAAE,KAAKX,KAAL,CAAWW,SAHP;AAIfkB,QAAAA,WAAW,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BG,WAA5B,GAA0C,KAAKxB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BG,WAAtE,GAAoF,EAJlF;AAKfd,QAAAA,SAAS,EAAE;AACP,8BAAoBwB,WAAW,CAAClB,cADzB;AAEP,sBAAY,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBgB;AAFtB,SALI;AASfG,QAAAA,SAAS,EAAEmB,WAAW,CAACnB;AATR,OAAnB;AAYA,YAAMV,UAAU,GAAG,KAAKL,KAAL,CAAWJ,KAAX,CAAiBS,UAApC;;AAEA,UAAIlB,SAAS,CAAC,KAAKa,KAAL,CAAWJ,KAAX,CAAiB6B,qBAAlB,EAAyC,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBgB,QAAjB,CAA0Bc,SAAnE,EAA8EQ,WAAW,CAACC,YAA1F,CAAb,EAAsH;AAClH,cAAMP,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE/C,cADK;AAEfgD,UAAAA,IAAI,EAAE;AACFC,YAAAA,SAAS,EAAE,IADT;AACeC,YAAAA,UAAU,EAAE;AAAEX,cAAAA,UAAF;AAAchB,cAAAA;AAAd,aAD3B;AACuDU,YAAAA,SAAS,EAAEmB,WAAW,CAACnB,SAD9E;AACyFqB,YAAAA,SAAS,EAAE,IADpG;AAEFC,YAAAA,UAAU,EAAE,KAAKrC,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BG,WAFtC;AAEmDc,YAAAA,iBAAiB,EAAE,KAAKtC,KAAL,CAAWJ,KAAX,CAAiB0C,iBAFvF,CAEwG;;AAFxG;AAFS,SAAnB;AAOA,aAAKtC,KAAL,CAAWpB,WAAX,CAAuBgD,UAAvB;AACH,OATD,MAUK;AACD,aAAK5B,KAAL,CAAWvB,UAAX,CAAsB4C,UAAtB,EAAkChB,UAAlC,EAA8C,WAA9C;AACH;AACJ,KAvJkB;;AAAA,SA0JnBkC,UA1JmB,GA0JN,MAAM;AACf,YAAMlB,UAAU,GAAG;AACfX,QAAAA,SAAS,EAAE;AAAE8B,UAAAA,QAAQ,EAAE,KAAKxC,KAAL,CAAWJ,KAAX,CAAiBgB;AAA7B,SADI;AAEfU,QAAAA,SAAS,EAAE,KAAKtB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BC,SAFxB;AAGfC,QAAAA,QAAQ,EAAE,KAAKvB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BE,QAHvB;AAIfC,QAAAA,WAAW,EAAE,KAAKxB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BG,WAA5B,GAA0C,KAAKxB,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BG,WAAtE,GAAoF,EAJlF;AAKfZ,QAAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBgB;AALZ,OAAnB;AAQA,WAAKZ,KAAL,CAAWxB,WAAX,CAAuB6C,UAAvB;AACH,KApKkB;;AAAA,SAsKnBoB,aAtKmB,GAsKH,MAAM;AAClB,YAAMpB,UAAU,GAAG;AACfX,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBgB,QADZ;AAER8B,YAAAA,OAAO,EAAE,KAAK/C,KAAL,CAAWqB,cAAX,CAA0B,eAA1B;AAFD,WADL;AAKP2B,UAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWqB,cAAX,CAA0B,eAA1B;AALH,SADI;AAQfgB,QAAAA,UAAU,EAAE,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBoC;AARd,OAAnB;AAUA,WAAKhC,KAAL,CAAWnB,uBAAX,CAAmCwC,UAAnC,EAA+C,WAA/C;AACH,KAlLkB;;AAAA,SAsYnBuB,eAtYmB,GAsYD,CAAC1C,KAAD,EAAQ2C,IAAR,KAAiB;AAC/B,YAAM7B,cAAc,GAAG,KAAKrB,KAAL,CAAWqB,cAAX,IAA6B,EAApD;;AACA,UAAId,KAAK,CAAC4C,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClC/B,QAAAA,cAAc,CAACd,KAAK,CAAC4C,MAAN,CAAaD,IAAd,CAAd,GAAoC3C,KAAK,CAAC4C,MAAN,CAAaE,OAAb,KAAyB,IAAzB,GAAgC,CAAhC,GAAoC,CAAxE;AACH,OAFD,MAGK;AACD,YAAIH,IAAI,KAAK,SAAb,EAAwB;AACpB7B,UAAAA,cAAc,CAAC,cAAD,CAAd,GAAiC,EAC7B,GAAGA,cAAc,CAAC,cAAD,CADY;AAE7B,aAACd,KAAK,CAAC4C,MAAN,CAAaD,IAAd,GAAqB3C,KAAK,CAAC4C,MAAN,CAAaG;AAFL,WAAjC;AAIH,SALD,MAKO;AACHjC,UAAAA,cAAc,CAACd,KAAK,CAAC4C,MAAN,CAAaD,IAAd,CAAd,GAAoC3C,KAAK,CAAC4C,MAAN,CAAaG,KAAjD;AACH;AACJ;;AACD,WAAK9C,QAAL,CAAc;AAAEa,QAAAA;AAAF,OAAd;AACH,KAtZkB;;AAAA,SAwZnBkC,aAxZmB,GAwZH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,YAAM;AAAEpC,QAAAA;AAAF,UAAqB,KAAKrB,KAAL,IAAc,EAAzC;;AACA,UAAIwD,SAAJ,EAAe;AAEXC,QAAAA,SAAS,GAAG,iBAAZ;AACApC,QAAAA,cAAc,CAAC,aAAD,CAAd,GAAgCmC,SAAhC;AACAnC,QAAAA,cAAc,CAACoC,SAAD,CAAd,GAA4BD,SAAS,CAACF,KAAtC;AACH,OALD,MAMK;AACDG,QAAAA,SAAS,GAAG,iBAAZ;AACApC,QAAAA,cAAc,CAAC,aAAD,CAAd,GAAgCmC,SAAhC;AACAnC,QAAAA,cAAc,CAACoC,SAAD,CAAd,GAA4B,EAA5B;AACH;;AAED,WAAKjD,QAAL,CAAc;AAAEa,QAAAA;AAAF,OAAd;AACH,KAvakB;;AAEf,SAAKP,OAAL,GAAe1C,KAAK,CAACsF,SAAN,EAAf;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,UAAMlD,UAAS,GAAG;AACdmD,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiB+D,QAAjB,GAA4BC,QAAQ,CAAC,KAAK5D,KAAL,CAAWJ,KAAX,CAAiB+D,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAF9D,KAAlB;AAIA,SAAKhE,KAAL,GAAa;AACTmC,MAAAA,IAAI,EAAE,EADG;AACC+B,MAAAA,YAAY,EAAE,EADf;AACmBC,MAAAA,KAAK,EAAE,EAD1B;AAC8B9C,MAAAA,cAAc,EAAE,EAD9C;AACkDS,MAAAA,qBAAqB,EAAE,EADzE;AAC6EsC,MAAAA,UAAU,EAAE,IAAIC,GAAJ,EADzF;AAET5D,MAAAA,UAAU,EAAE,EAFH;AAGTE,MAAAA,SAAS,EAAEA,UAHF;AAIT2D,MAAAA,MAAM,EAAE,EAJC;AAKTC,MAAAA,eAAe,EAAE,CACb;AAAE,mBAAW,oBAAb;AAAmC,qBAAa,aAAhD;AAA+D,0BAAkB,WAAjF;AAA8F,uBAAe;AAA7G,OADa,EAEb;AAAE,mBAAW,0BAAb;AAAyC,qBAAa,cAAtD;AAAsE,0BAAkB,WAAxF;AAAqG,uBAAe;AAApH,OAFa,CAGb;AAHa;AALR,KAAb;AAWH;;AAQD;AACAX,EAAAA,WAAW,GAAG;AAEV,QAAIxB,SAAS,GAAG,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBmC,SAAjC;AACA,QAAIK,SAAS,GAAG,KAAKpC,KAAL,CAAWJ,KAAX,CAAiBwC,SAAjC;AACA,QAAIpB,cAAc,GAAG,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBoB,cAAtC;;AACA,QAAI,KAAKrB,KAAL,CAAWmB,WAAf,EAA4B;AACxB,WAAKX,QAAL,CAAc;AAAEW,QAAAA,WAAW,EAAE;AAAf,OAAd;AACA,aAAO,IAAP;AACH;;AACD,QAAI,KAAKd,KAAL,CAAWJ,KAAX,CAAiBmC,SAArB,EAAgC;AAC5B,UAAI,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBmB,SAAjB,KAA+B,QAAnC,EAA6C;AACzCgB,QAAAA,SAAS,GAAG,KAAZ;AACAK,QAAAA,SAAS,GAAG,KAAZ;AACH,OAHD,MAIK;AACDL,QAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,KARD,MASK;AACDK,MAAAA,SAAS,GAAG,KAAZ;AACApB,MAAAA,cAAc,GAAG,EAAjB;AACH;;AAED,UAAMY,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAE/C,cADK;AAEfgD,MAAAA,IAAI,EAAE;AAAEM,QAAAA,SAAF;AAAaL,QAAAA,SAAb;AAAwBf,QAAAA,cAAxB;AAAwCmD,QAAAA,yBAAyB,EAAE,EAAnE;AAAuE7B,QAAAA,iBAAiB,EAAE;AAA1F;AAFS,KAAnB;AAIA,SAAKtC,KAAL,CAAWpB,WAAX,CAAuBgD,UAAvB;AACH;;AA0H8B,SAAxBwC,wBAAwB,CAACpE,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYiE,YAAZ,KAA6BlE,KAAK,CAACkE,YAAvC,EAAqD;AACjDzF,MAAAA,KAAK,CAACiG,IAAN,CAAWrE,KAAK,CAACJ,KAAN,CAAYiE,YAAvB;AACA7D,MAAAA,KAAK,CAACJ,KAAN,CAAYiE,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAI7D,KAAK,CAACJ,KAAN,CAAYkE,KAAZ,KAAsBnE,KAAK,CAACmE,KAAhC,EAAuC;AACnC1F,MAAAA,KAAK,CAAC0F,KAAN,CAAY9D,KAAK,CAACJ,KAAN,CAAYkE,KAAxB;AACA9D,MAAAA,KAAK,CAACJ,KAAN,CAAYkE,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,QAAIC,eAAe,GAAG,EAAtB;;AACA,QAAI,KAAKvE,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,KAAgCR,SAApC,EAA+C;AAC3C,WAAKyC,mBAAL,GAA2B,CACvB;AAAE,mBAAW,oBAAb;AAAmC,qBAAa,iBAAhD;AAAmE,iBAAS;AAA5E,OADuB,EAEvB;AAAE,mBAAW,0BAAb;AAAyC,qBAAa,cAAtD;AAAsE,iBAAS;AAA/E,OAFuB,EAGvB;AAAE,mBAAW,iBAAb;AAAgC,qBAAa,cAA7C;AAA6D,iBAAS;AAAtE,OAHuB,CAA3B;AAKAiB,MAAAA,eAAe,GAAG,cAAlB;AACH;;AAED,UAAMC,KAAK,GAAG,KAAKxE,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,IAA+B,KAAK1B,KAAL,CAAWoE,UAAX,CAAsBU,GAAtB,CAA0B,qBAA1B,CAA/B,IACP,KAAK9E,KAAL,CAAWoE,UAAX,CAAsBW,GAAtB,CAA0B,qBAA1B,EAAiD/C,YADxD;AAEA,UAAMgD,MAAM,GAAG,KAAK3E,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,IAA+B,KAAK1B,KAAL,CAAWoE,UAAX,CAAsBU,GAAtB,CAA0B,sBAA1B,CAA/B,IACR,KAAK9E,KAAL,CAAWoE,UAAX,CAAsBW,GAAtB,CAA0B,sBAA1B,EAAkD/C,YADzD;AAEA,UAAMiD,SAAS,GAAG;AACdvC,MAAAA,UAAU,EAAE,kBADE;AACkBtB,MAAAA,SAAS,EAAE,QAD7B;AACuCwD,MAAAA,eAAe,EAAEA,eADxD;AAEdlE,MAAAA,UAAU,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBS,UAFf;AAE2BO,MAAAA,QAAQ,EAAE,KAAKZ,KAAL,CAAWJ,KAAX,CAAiBgB,QAFtD;AAEgEuB,MAAAA,YAAY,EAAEwC;AAF9E,KAAlB;AAKA,UAAMzC,WAAW,GAAG;AAAEG,MAAAA,UAAU,EAAE,kBAAd;AAAkCf,MAAAA,SAAS,EAAE,kBAA7C;AAAiEP,MAAAA,SAAS,EAAE,QAA5E;AAAsF8D,MAAAA,GAAG,EAAE;AAA3F,KAApB;AAEA,wBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKlF,KAAL,CAAWmC,IAAX,gBACG,oBAAC,QAAD;AACI,MAAA,eAAe,EAAEyC,eADrB;AAEI,MAAA,IAAI,EAAE,KAAK5E,KAAL,CAAWmC,IAFrB;AAGI,MAAA,UAAU,EAAE,KAAKnC,KAAL,CAAWS,UAH3B;AAII,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWW,SAJ1B;AAKI,MAAA,eAAe,EAAE,KAAKL,eAL1B;AAMI,MAAA,mBAAmB,EAAE,KAAKqD,mBAN9B;AAOI,MAAA,WAAW,EAAE,KAAKtD,KAAL,CAAWrB,gBAP5B;AAQI,MAAA,YAAY,EAAE,KAAKsD,YARvB;AASI,MAAA,UAAU,EAAE,KAAKM,UATrB;AAUI,MAAA,UAAU,EAAE,KAAK5C,KAAL,CAAWoE,UAV3B;AAWI,MAAA,qBAAqB,EAAE,KAAKpE,KAAL,CAAW8B,qBAXtC;AAYI,MAAA,UAAU,EAAE,KAAKzB,KAAL,CAAWJ,KAAX,CAAiByB,UAZjC;AAaI,MAAA,QAAQ,EAAE,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBgB,QAb/B;AAcI,MAAA,SAAS,EAAEgE,SAdf;AAeI,MAAA,WAAW,EAAE1C,WAfjB;AAgBI,MAAA,QAAQ,EAAE,IAhBd;AAiBI,MAAA,gBAAgB,EAAE,IAjBtB;AAkBI,MAAA,iBAAiB,EAAE,IAlBvB;AAmBI,MAAA,UAAU,EAAE,OAnBhB;AAoBI,MAAA,UAAU,EAAE,YApBhB;AAqBI,MAAA,UAAU,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBe,UArBjC;AAsBI,MAAA,SAAS,EAAE,MAAM,KAAKX,KAAL,CAAWtB,oBAAX,CAAgC,KAAKsB,KAAL,CAAWJ,KAAX,CAAiBgB,QAAjD,EAA2D4D,KAA3D,CAtBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAyBK,EA1BV,CADJ,CADJ,CADJ,EAkCK,KAAKxE,KAAL,CAAWJ,KAAX,CAAiBwC,SAAjB,gBACG,oBAAC,aAAD;AACI,MAAA,WAAW,EAAE,KAAK7B,WADtB;AAEI,MAAA,SAAS,EAAE,KAAKP,KAAL,CAAWJ,KAAX,CAAiBmB,SAFhC;AAGI,MAAA,UAAU,EAAE,KAAKf,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BG,WAH5C;AAII,MAAA,UAAU,EAAE,KAAK+B,WAJrB;AAKI,MAAA,IAAI,EAAE,KAAKvD,KAAL,CAAWJ,KAAX,CAAiBwC,SAL3B;AAMI,MAAA,gBAAgB,EAAE,KANtB;AAOI,MAAA,QAAQ,EAAE,KAAKzC,KAAL,CAAWmB,WAPzB;AAQI,MAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWmB,WAAX,GAAyB,WAAzB,GAAuCD,SARvD;AASI,MAAA,UAAU,EAAE,KAAKb,KAAL,CAAWJ,KAAX,CAAiByB,UATjC;AAUI,MAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWJ,KAAX,CAAiBmC,SAV5B;AAWI,MAAA,aAAa,EAAE,KAAKU,aAXxB;AAYI,MAAA,cAAc,EAAE,KAAK9C,KAAL,CAAWqB,cAZ/B;AAaI,MAAA,eAAe,EAAE,KAAKrB,KAAL,CAAWuE,eAbhC;AAcI,MAAA,YAAY,EAAE,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBmC,SAAjB,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAK/B,KAAL,CAAWJ,KAAX,CAAiBmB,SAAjB,GAA6B,KAAKf,KAAL,CAAWJ,KAAX,CAAiBmB,SAA9C,GAA0D,EAA5E;AACI,QAAA,eAAe,EAAE,KAAK6B,eAD1B;AAEI,QAAA,UAAU,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiByB,UAFjC;AAGI,QAAA,cAAc,EAAE,KAAK1B,KAAL,CAAWqB,cAAX,IAA6B,EAHjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAMR,KAAKrB,KAAL,CAAWmB,WAAX,gBACE,oBAAC,UAAD;AACI,QAAA,mBAAmB,EAAE,KAAKnB,KAAL,CAAWqB,cADpC;AAEI,QAAA,eAAe,EAAE,KAAK4B,eAF1B;AAGI,QAAA,SAAS,EAAE,KAAK5C,KAAL,CAAWJ,KAAX,CAAiBkF,YAAjB,IAAiC,EAHhD;AAII,QAAA,SAAS,EAAC,cAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,gBAQE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,gBAAD;AACI,QAAA,IAAI,EAAE,iBADV;AAEI,QAAA,SAAS,EAAE,KAAK9E,KAAL,CAAW+E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFf;AAGI,QAAA,WAAW,EAAE,KAAKjF,KAAL,CAAW+E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAHjB;AAII,QAAA,KAAK,EAAE,KAAKtF,KAAL,CAAWqB,cAAX,CAA0BkE,WAA1B,GAAwC,KAAKvF,KAAL,CAAWqB,cAAX,CAA0BkE,WAAlE,GAAgF,EAJ3F;AAKI,QAAA,OAAO,EAAE,KAAKlF,KAAL,CAAWJ,KAAX,CAAiB0C,iBAAjB,GAAqC,KAAKtC,KAAL,CAAWJ,KAAX,CAAiB0C,iBAAtD,GAA0E,EALvF;AAMI,QAAA,QAAQ,EAAC,iBANb;AAOI,QAAA,WAAW,EAAC,iBAPhB;AAQI,QAAA,WAAW,EAAE,IARjB;AASI,QAAA,QAAQ,EAAE,IATd;AAUI,QAAA,EAAE,EAAE,QAVR;AAWI,QAAA,QAAQ,EAAGpC,KAAD,IAAW,KAAKgD,aAAL,CAAmBhD,KAAnB,EAA0B,iBAA1B,CAXzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,eAgBI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,SAAD;AACI,QAAA,IAAI,EAAE,KAAKF,KAAL,CAAWJ,KAAX,CAAiBuF,QAD3B;AAEI,QAAA,WAAW,EAAE,KAAKnF,KAAL,CAAW+E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFjB;AAGI,QAAA,QAAQ,EAAG/E,KAAD,IAAW,KAAK0C,eAAL,CAAqB1C,KAArB,EAA4B,SAA5B,CAHzB;AAII,QAAA,SAAS,EAAC,EAJd;AAKI,QAAA,WAAW,EAAE,IALjB;AAMI,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAW+E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CANX;AAOI,QAAA,QAAQ,EAAE,IAPd;AAQI,QAAA,KAAK,EAAE,KAAKtF,KAAL,CAAWqB,cAAX,CAA0BG,YAA1B,GAAyC,KAAKxB,KAAL,CAAWqB,cAAX,CAA0BG,YAA1B,CAAuC,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBuF,QAAxD,CAAzC,GAA6G,EARxH;AASI,QAAA,SAAS,EAAE,KATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAhBJ,eA6BI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,CAAT;AAAY,QAAA,SAAS,EAAC,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,GAAD,CAAK,IAAL;AAAU,QAAA,IAAI,EAAC,YAAf;AACI,oBAAU,KAAKnF,KAAL,CAAW+E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CADd;AAEI,oBAAS,mBAFb,CAGI;AAHJ;AAII,QAAA,SAAS,EAAC,kCAJd;AAKI,QAAA,OAAO,EAAGG,CAAD,IAAO,KAAKjF,QAAL,CAAc;AAAEW,UAAAA,WAAW,EAAE;AAAf,SAAd,CALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAOI,oBAAC,eAAD;AAAiB,QAAA,IAAI,EAAEvB,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPJ,CADJ,CA7BJ,eAwCI,oBAAC,GAAD;AAAK,QAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,YAAD;AACI,QAAA,IAAI,EAAE,cADV;AAEI,QAAA,WAAW,EAAE,KAAKS,KAAL,CAAW+E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CAFjB;AAGI,QAAA,QAAQ,EAAG/E,KAAD,IAAW,KAAK0C,eAAL,CAAqB1C,KAArB,CAHzB;AAII,QAAA,WAAW,EAAE,KAJjB;AAKI,QAAA,IAAI,EAAC,GALT;AAMI,QAAA,KAAK,EAAE,KAAKF,KAAL,CAAW+E,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,UAAAA,EAAE,EAAE;AAAN,SAA9B,CANX;AAOI,QAAA,IAAI,EAAC,UAPT;AAQI,QAAA,KAAK,EAAE,KAAKtF,KAAL,CAAWqB,cAAX,GAA4B,KAAKrB,KAAL,CAAWqB,cAAX,CAA0BI,YAAtD,GAAqE,EARhF;AASI,QAAA,SAAS,EAAE,KATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAxCJ,CA5BZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAqFK,EAvHV,CADJ;AA4HH;;AAEDiE,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAKtF,KAAL,CAAWJ,KAAX,CAAiBS,UAAjB,KAAgCiF,aAAa,CAAC1F,KAAd,CAAoBS,UAAxD,EAAoE;AAChE,UAAI,KAAKL,KAAL,CAAWJ,KAAX,CAAiBgB,QAAjB,CAA0Bc,SAA1B,KAAwC4D,aAAa,CAAC1F,KAAd,CAAoBgB,QAApB,CAA6Bc,SAAzE,EAAoF;AAChF,cAAMD,qBAAqB,GAAG,EAA9B;;AACA,YAAI,KAAKzB,KAAL,CAAWJ,KAAX,CAAiB6B,qBAArB,EAA4C;AACxC,eAAKzB,KAAL,CAAWJ,KAAX,CAAiB6B,qBAAjB,CAAuC,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBgB,QAAjB,CAA0Bc,SAAjE,KAA+E6D,MAAM,CAACC,MAAP,CAAc,KAAKxF,KAAL,CAAWJ,KAAX,CAAiB6B,qBAAjB,CAAuC,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBgB,QAAjB,CAA0Bc,SAAjE,CAAd,EAA2F+D,GAA3F,CAA+FC,IAAI,IAC9KjE,qBAAqB,CAACkE,IAAtB,CAA2BD,IAAI,CAAC/D,YAAhC,CAD2E,CAA/E;AAEH;;AACD,cAAMoC,UAAU,GAAG3E,aAAa,CAAC,KAAKY,KAAL,CAAWJ,KAAX,CAAiB6B,qBAAlB,EAAyC,KAAKzB,KAAL,CAAWJ,KAAX,CAAiBgB,QAAjB,CAA0Bc,SAAnE,CAAhC;AACA,aAAKvB,QAAL,CAAc;AACVsB,UAAAA,qBADU;AACasC,UAAAA,UADb;AACyBjC,UAAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBS,UADhD;AAEVD,UAAAA,UAAU,EAAE/B,OAAO,CAAC,KAAK2B,KAAL,CAAWJ,KAAX,CAAiBS,UAAlB,EAA8B,KAAKV,KAAL,CAAWW,SAAzC;AAFT,SAAd;AAIH,OAXD,MAYK;AACD,YAAI,KAAKN,KAAL,CAAWJ,KAAX,CAAiBmB,SAAjB,KAA+B,QAA/B,IAA2C,KAAKf,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4Bb,QAA5B,KAAyC,CAAxF,EAA2F;AACvF,eAAKR,KAAL,CAAWJ,KAAX,CAAiByB,UAAjB,CAA4BZ,OAA5B,CAAoCmF,OAApC,CAA4CC,KAA5C;AACH;;AACD,YAAI;AAAEvF,UAAAA;AAAF,YAAgB,KAAKX,KAAzB;;AACA,YAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiBU,SAAjB,KAA+BO,SAAnC,EAA8C;AAC1CP,UAAAA,SAAS,GAAG;AAAEmD,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE,KAAK1D,KAAL,CAAWJ,KAAX,CAAiB+D,QAAjB,GAA4BC,QAAQ,CAAC,KAAK5D,KAAL,CAAWJ,KAAX,CAAiB+D,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,WAAZ;AACH;;AACD,aAAKxD,QAAL,CAAc;AACV2B,UAAAA,IAAI,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBS,UADb;AAEVD,UAAAA,UAAU,EAAE/B,OAAO,CAAC,KAAK2B,KAAL,CAAWJ,KAAX,CAAiBS,UAAlB,EAA8BC,SAA9B,CAFT;AAGVA,UAAAA,SAHU;AAIVU,UAAAA,cAAc,EAAE;AAAEG,YAAAA,YAAY,EAAE,EAAhB;AAAoBC,YAAAA,YAAY,EAAE;AAAlC;AAJN,SAAd;AAMH;AACJ,KA5BD,MA6BK,IAAI,KAAKpB,KAAL,CAAWJ,KAAX,CAAiBoB,cAAjB,KAAoCsE,aAAa,CAAC1F,KAAd,CAAoBoB,cAA5D,EAA4E;AAC7E,UAAIkD,eAAe,GAAG,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,eAAjB,GAAoC,KAAKlE,KAAL,CAAWJ,KAAX,CAAiBsE,eAArD,GAAwE,CAC1F;AAAE,mBAAW,oBAAb;AAAmC,qBAAa,aAAhD;AAA+D,0BAAkB,WAAjF;AAA8F,uBAAe;AAA7G,OAD0F,EAE1F;AAAE,mBAAW,0BAAb;AAAyC,qBAAa,cAAtD;AAAsE,0BAAkB,WAAxF;AAAqG,uBAAe;AAApH,OAF0F,CAG1F;AAH0F,OAA9F;AAKA,WAAK/D,QAAL,CAAc;AAAEa,QAAAA,cAAc,EAAE,KAAKhB,KAAL,CAAWJ,KAAX,CAAiBoB,cAAnC;AAAmDkD,QAAAA;AAAnD,OAAd;AACH;AACJ;;AACD4B,EAAAA,oBAAoB,GAAG;AACnB,UAAMlE,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAE/C,cADK;AAEfgD,MAAAA,IAAI,EAAE;AACFzB,QAAAA,UAAU,EAAE,EADV;AACcgB,QAAAA,UAAU,EAAER,SAD1B;AACqCE,QAAAA,SAAS,EAAE,IADhD;AACsDgF,QAAAA,SAAS,EAAElF;AADjE;AAFS,KAAnB;AAMA,SAAKb,KAAL,CAAWpB,WAAX,CAAuBgD,UAAvB;AACH;;AArY0C;;AA0a/C,eAAetD,OAAO,CAACoB,eAAD,EAAkB;AACpClB,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACXC,EAAAA,oBADW;AACWC,EAAAA,gBADX;AAEpCC,EAAAA,WAFoC;AAEvBC,EAAAA;AAFuB,CAAlB,CAAP,CAGZN,UAAU,CAACsB,gBAAD,CAHE,CAAf","sourcesContent":["import React from 'react'\r\nimport { ListWrapper } from '../../../components/client-group.styles'\r\nimport { Row, Col, Nav } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { callService, crudMaster, showRegTypeAddScreen, fetchRegTypeById, updateStore, validateEsignCredential } from '../../../actions';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { showEsign, getControlMap } from '../../../components/CommonScript';\r\nimport Esign from '../../audittrail/Esign';\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport { faLanguage } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport AddSynonym from '../../../components/droparea/AddSynonym';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass RegistrationType extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.formRef = React.createRef();\r\n        this.extractedColumnList = [];\r\n        this.handleClose = this.handleClose.bind(this);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {}, userRoleControlRights: [], controlMap: new Map(),\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            action: \"\",\r\n            mandatoryFields: [\r\n                { \"idsName\": \"IDS_SAMPLETYPENAME\", \"dataField\": \"SampleTypes\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_REGISTRATIONTYPENAME\", \"dataField\": \"sregtypename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n        };\r\n    }\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    //to close side out\r\n    handleClose() {\r\n\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, optionsChecklistComponent: [], optionsSampleType: [] }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    };\r\n\r\n    //to open side out\r\n\r\n    //to perform save action for both add and edit\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let selectedId = null;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let dataState = undefined;\r\n        if (this.state.showSynonym) {\r\n            this.setState({ showSynonym: false })\r\n            return null;\r\n        }\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            selectedId = this.state.selectedRecord.nregtypecode\r\n            dataState = this.state.dataState\r\n            inputData[\"registrationtype\"] = {\r\n                \"nregtypecode\": this.state.selectedRecord.nregtypecode ? this.state.selectedRecord.nregtypecode : -1,\r\n                \"nsampletypecode\": this.state.selectedRecord.nsampletypecode,\r\n                \"jsondata\": {\r\n                    \"sregtypename\": this.state.selectedRecord.sregtypename,\r\n                    \"sdescription\": this.state.selectedRecord.sdescription,\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            //add               \r\n            inputData[\"registrationtype\"] =\r\n            {\r\n                \"nsampletypecode\": this.state.selectedRecord.nsampletypecode ? this.state.selectedRecord.nsampletypecode : -1,\r\n                \"jsondata\": {\r\n                    \"sregtypename\": this.state.selectedRecord.sregtypename,\r\n                    \"sdescription\": this.state.selectedRecord.sdescription,\r\n                }\r\n            };\r\n        }\r\n\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, dataState, selectedId\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n\r\n    }\r\n    //to get the edit record\r\n\r\n    //to delete a recoed\r\n    deleteRecord = (deleteParam) => {\r\n        const inputParam = {\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            dataState: this.state.dataState,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: {\r\n                \"registrationtype\": deleteParam.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: deleteParam.operation\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, operation: deleteParam.operation, openModal: true,\r\n                    screenName: this.props.Login.inputParam.displayName, optionsSampleType: this.props.Login.optionsSampleType//,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    //to reload data\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n        let primaryKeyField = \"\";\r\n        if (this.props.Login.inputParam !== undefined) {\r\n            this.extractedColumnList = [\r\n                { \"idsName\": \"IDS_SAMPLETYPENAME\", \"dataField\": \"ssampletypename\", \"width\": \"250px\" },\r\n                { \"idsName\": \"IDS_REGISTRATIONTYPENAME\", \"dataField\": \"sregtypename\", \"width\": \"250px\" },\r\n                { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"150px\" },\r\n            ]\r\n            primaryKeyField = \"nregtypecode\";\r\n        }\r\n\r\n        const addID = this.props.Login.inputParam && this.state.controlMap.has(\"AddRegistrationType\")\r\n            && this.state.controlMap.get('AddRegistrationType').ncontrolcode;\r\n        const editId = this.props.Login.inputParam && this.state.controlMap.has(\"EditRegistrationType\")\r\n            && this.state.controlMap.get('EditRegistrationType').ncontrolcode;\r\n        const editParam = {\r\n            screenName: \"RegistrationType\", operation: \"update\", primaryKeyField: primaryKeyField,\r\n            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, ncontrolCode: editId\r\n        };\r\n\r\n        const deleteParam = { screenName: \"RegistrationType\", methodUrl: \"RegistrationType\", operation: \"delete\", key: 'registrationtype' };\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.fetchRegTypeById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    gridHeight={'600px'}\r\n                                    scrollable={\"scrollable\"}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    addRecord={() => this.props.showRegTypeAddScreen(this.props.Login.userInfo, addID)}\r\n                                />\r\n                                : \"\"}\r\n\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal ?\r\n                    <SlideOutModal\r\n                        onSaveClick={this.onSaveClick}\r\n                        operation={this.props.Login.operation}\r\n                        screenName={this.props.Login.inputParam.displayName}\r\n                        closeModal={this.handleClose}\r\n                        show={this.props.Login.openModal}\r\n                        showSaveContinue={false}\r\n                        hideSave={this.state.showSynonym}\r\n                        closeLabel={this.state.showSynonym ? \"IDS_CLOSE\" : undefined}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord}\r\n                        mandatoryFields={this.state.mandatoryFields}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation ? this.props.Login.operation : ''}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : this.state.showSynonym ?\r\n                                <AddSynonym\r\n                                    selectedFieldRecord={this.state.selectedRecord}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    languages={this.props.Login.languageList || []}\r\n                                    fieldName=\"sregtypename\"\r\n                                />\r\n                                :\r\n                                <Row>\r\n                                    <Col md={12}>\r\n                                        <FormSelectSearch\r\n                                            name={\"nsampletypecode\"}\r\n                                            formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLETYPENAME\" })}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                                            value={this.state.selectedRecord.SampleTypes ? this.state.selectedRecord.SampleTypes : []}\r\n                                            options={this.props.Login.optionsSampleType ? this.props.Login.optionsSampleType : []}\r\n                                            optionId=\"nsampletypecode\"\r\n                                            optionValue=\"ssampletypename\"\r\n                                            isMandatory={true}\r\n                                            required={true}\r\n                                            as={\"select\"}\r\n                                            onChange={(event) => this.onComboChange(event, \"nsampletypecode\")}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col md={11}>\r\n                                        <FormInput\r\n                                            name={this.props.Login.language}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONTYPENAME\" })}\r\n                                            onChange={(event) => this.onInputOnChange(event, 'synonym')}\r\n                                            className=\"\"\r\n                                            isMandatory={true}\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_REGISTRATIONTYPENAME\" })}\r\n                                            required={true}\r\n                                            value={this.state.selectedRecord.sregtypename ? this.state.selectedRecord.sregtypename[this.props.Login.language] : \"\"}\r\n                                            maxLength={\"100\"}\r\n                                        />\r\n                                    </Col>\r\n                                    <Col md={1} className=\"p-0\">\r\n                                        <Nav.Link name=\"addsynonym\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDSYNONYMN\" })}\r\n                                            data-for=\"tooltip_list_wrap\"\r\n                                            // hidden={this.state.userRoleControlRights.indexOf(this.state.previewId) === -1}\r\n                                            className=\"btn btn-circle outline-grey mr-2\"\r\n                                            onClick={(e) => this.setState({ showSynonym: true })}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faLanguage} />\r\n                                        </Nav.Link>\r\n                                    </Col>\r\n                                    <Col md={12}>\r\n                                        <FormTextarea\r\n                                            name={\"sdescription\"}\r\n                                            placeholder={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                            onChange={(event) => this.onInputOnChange(event)}\r\n                                            isMandatory={false}\r\n                                            rows=\"1\"\r\n                                            label={this.props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                                            type=\"textarea\"\r\n                                            value={this.state.selectedRecord ? this.state.selectedRecord.sdescription : \"\"}\r\n                                            maxLength={\"255\"}\r\n                                        />\r\n\r\n                                    </Col>\r\n                                </Row>\r\n                        } />\r\n                    : \"\"}\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState)\r\n                });\r\n            }\r\n            else {\r\n                if (this.props.Login.operation === \"create\" && this.props.Login.inputParam.saveType === 2) {\r\n                    this.props.Login.inputParam.formRef.current.reset();\r\n                }\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, dataState),\r\n                    dataState,\r\n                    selectedRecord: { sregtypename: '', sdescription: '' }\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            let mandatoryFields = this.props.Login.mandatoryFields ? (this.props.Login.mandatoryFields) : [\r\n                { \"idsName\": \"IDS_SAMPLETYPENAME\", \"dataField\": \"SampleTypes\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                { \"idsName\": \"IDS_REGISTRATIONTYPENAME\", \"dataField\": \"sregtypename\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"},\r\n            ]\r\n            this.setState({ selectedRecord: this.props.Login.selectedRecord, mandatoryFields });\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onInputOnChange = (event, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? 3 : 4;\r\n        }\r\n        else {\r\n            if (name === 'synonym') {\r\n                selectedRecord['sregtypename'] = {\r\n                    ...selectedRecord['sregtypename'],\r\n                    [event.target.name]: event.target.value\r\n                }\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const { selectedRecord } = this.state || {};\r\n        if (comboData) {\r\n\r\n            fieldName = 'nsampletypecode';\r\n            selectedRecord['SampleTypes'] = comboData;\r\n            selectedRecord[fieldName] = comboData.value;\r\n        }\r\n        else {\r\n            fieldName = 'nsampletypecode';\r\n            selectedRecord['SampleTypes'] = comboData;\r\n            selectedRecord[fieldName] = \"\";\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, showRegTypeAddScreen, fetchRegTypeById,\r\n    updateStore, validateEsignCredential\r\n})(injectIntl(RegistrationType));"]},"metadata":{},"sourceType":"module"}