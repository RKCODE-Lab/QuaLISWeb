{"ast":null,"code":"import React from'react';import{Row,Col}from'react-bootstrap';import FormSelectSearch from'../../components/form-select-search/form-select-search.component';import{injectIntl}from'react-intl';import FormMultiSelect from'../../components/form-multi-select/form-multi-select.component';var AddTestGroupTest=function AddTestGroupTest(props){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"12\"},props.screenName===props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]&&/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],isSearchable:true,name:\"ncomponentcode\",placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),isMandatory:true,showOption:true,options:props.testGroupInputData.TestGroupSpecSampleType||[],optionId:\"ncomponentcode\",optionValue:\"scomponentname\",value:props.selectedRecord[\"ncomponentcode\"]?props.selectedRecord[\"ncomponentcode\"]||[]:[],onChange:function onChange(value){return props.onComboChange(value,\"ncomponentcode\",1);},alphabeticalSort:true}),/*#__PURE__*/React.createElement(FormSelectSearch,{formLabel:props.intl.formatMessage({id:\"IDS_TESTCATEGORY\"}),isSearchable:true,name:\"ntestcategorycode\",placeholder:props.intl.formatMessage({id:\"IDS_SELECTRECORD\"}),showOption:true,options:props.testGroupInputData.TestCategory||[],optionId:\"ntestcategorycode\",optionValue:\"stestcategoryname\",value:props.selectedRecord[\"ntestcategorycode\"]?props.selectedRecord[\"ntestcategorycode\"]||[]:[],onChange:function onChange(value){return props.onFilterComboChange(value,\"ntestcategorycode\",5);},alphabeticalSort:true}),/*#__PURE__*/React.createElement(FormMultiSelect,{name:\"ntestcode\",label:props.intl.formatMessage({id:\"IDS_TEST\"}),options:props.testGroupInputData.TestGroupTest||[],optionId:\"ntestcode\",optionValue:\"stestname\",value:props.selectedRecord[\"ntestcode\"]?props.selectedRecord[\"ntestcode\"]||[]:[],isMandatory:true,isClearable:true,alphabeticalSort:true,onChange:function onChange(value){return props.onComboChange(value,\"ntestcode\",1);}}))));};export default injectIntl(AddTestGroupTest);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/testgroup/AddTestGroupTest.jsx"],"names":["React","Row","Col","FormSelectSearch","injectIntl","FormMultiSelect","AddTestGroupTest","props","screenName","genericLabel","userInfo","slanguagetypecode","intl","formatMessage","id","testGroupInputData","TestGroupSpecSampleType","selectedRecord","value","onComboChange","TestCategory","onFilterComboChange","TestGroupTest"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\n\r\nconst AddTestGroupTest = (props) => {\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    {props.screenName === props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] &&\r\n                        <FormSelectSearch\r\n                            formLabel={props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]}\r\n                            isSearchable={true}\r\n                            name={\"ncomponentcode\"}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={true}\r\n                            showOption={true}\r\n                            options={props.testGroupInputData.TestGroupSpecSampleType || []}\r\n                            optionId='ncomponentcode'\r\n                            optionValue='scomponentname'\r\n                            value={props.selectedRecord[\"ncomponentcode\"]?props.selectedRecord[\"ncomponentcode\"]||[]:[]}\r\n                            onChange={value => props.onComboChange(value, \"ncomponentcode\", 1)}\r\n                            alphabeticalSort={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                    }\r\n                    <FormSelectSearch\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_TESTCATEGORY\" })}\r\n                        isSearchable={true}\r\n                        name={\"ntestcategorycode\"}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        showOption={true}\r\n                        options={props.testGroupInputData.TestCategory || []}\r\n                        optionId='ntestcategorycode'\r\n                        optionValue='stestcategoryname'\r\n                        value={props.selectedRecord[\"ntestcategorycode\"]?props.selectedRecord[\"ntestcategorycode\"]||[]:[]}\r\n                        onChange={value => props.onFilterComboChange(value, \"ntestcategorycode\", 5)}\r\n                        alphabeticalSort={true}\r\n                    >\r\n                    </FormSelectSearch>\r\n                    <FormMultiSelect\r\n                        name={\"ntestcode\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_TEST\" })}\r\n                        options={props.testGroupInputData.TestGroupTest || []}\r\n                        optionId=\"ntestcode\"\r\n                        optionValue=\"stestname\"\r\n                        value={props.selectedRecord[\"ntestcode\"] ? props.selectedRecord[\"ntestcode\"] ||[]: []}\r\n                        isMandatory={true}\r\n                        isClearable={true}\r\n                        alphabeticalSort={true}\r\n                        onChange={(value) => props.onComboChange(value, \"ntestcode\", 1)}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(AddTestGroupTest);"]},"metadata":{},"sourceType":"module"}