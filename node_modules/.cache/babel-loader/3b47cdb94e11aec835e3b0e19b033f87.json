{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\certificatetype\\\\AddCertificateType.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport FormInput from '../../../components/form-input/form-input.component';\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\n\nconst AddCertificateType = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_CERTIFICATETYPE\"\n    }),\n    name: \"scertificatetype\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_CERTIFICATETYPE\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"scertificatetype\"] : \"\",\n    isMandatory: true,\n    required: true,\n    maxLength: \"20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ncertificatereporttypecode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_REPORTBATCHTYPE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.reportBatchTypeList,\n    value: props.selectedRecord[\"ncertificatereporttypecode\"],\n    isMandatory: true,\n    isClearable: false,\n    isMulti: false,\n    isSearchable: true,\n    isDisabled: false,\n    closeMenuOnSelect: true,\n    onChange: event => props.onComboChange(event, 'ncertificatereporttypecode'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(FormTextarea, {\n    label: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    name: \"sdescription\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_DESCRIPTION\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sdescription\"] : \"\",\n    rows: \"2\",\n    isMandatory: false,\n    required: false,\n    maxLength: \"255\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CustomSwitch, {\n    label: props.intl.formatMessage({\n      id: \"IDS_EDQM\"\n    }),\n    type: \"switch\",\n    name: \"nedqm\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_EDQM\"\n    }),\n    defaultValue: props.selectedRecord ? props.selectedRecord[\"nedqm\"] === transactionStatus.NO ? false : true : true,\n    isMandatory: false,\n    rows: \"3\",\n    required: false,\n    checked: props.selectedRecord ? props.selectedRecord[\"nedqm\"] === transactionStatus.NO ? false : true : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CustomSwitch, {\n    label: props.intl.formatMessage({\n      id: \"IDS_ACCREDITED\"\n    }),\n    type: \"switch\",\n    name: \"naccredited\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ACCREDITED\"\n    }),\n    defaultValue: props.selectedRecord ? props.selectedRecord[\"naccredited\"] === transactionStatus.NO ? false : true : true,\n    isMandatory: false,\n    rows: \"3\",\n    required: false,\n    checked: props.selectedRecord ? props.selectedRecord[\"naccredited\"] === transactionStatus.NO ? false : true : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(CustomSwitch, {\n    label: props.intl.formatMessage({\n      id: \"IDS_ACTIVE\"\n    }),\n    type: \"switch\",\n    name: \"ntransactionstatus\",\n    onChange: event => props.onInputOnChange(event),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ACTIVE\"\n    }),\n    defaultValue: props.selectedRecord ? props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.NO ? false : true : true,\n    isMandatory: false,\n    rows: \"3\",\n    required: false,\n    checked: props.selectedRecord ? props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.NO ? false : true : true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default injectIntl(AddCertificateType);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/basemaster/certificatetype/AddCertificateType.jsx"],"names":["React","Row","Col","injectIntl","FormInput","FormTextarea","CustomSwitch","transactionStatus","FormSelectSearch","AddCertificateType","props","intl","formatMessage","id","event","onInputOnChange","selectedRecord","reportBatchTypeList","onComboChange","NO"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport {injectIntl } from 'react-intl';\r\n\r\nimport FormInput from '../../../components/form-input/form-input.component';\r\nimport FormTextarea from '../../../components/form-textarea/form-textarea.component';\r\nimport CustomSwitch from '../../../components/custom-switch/custom-switch.component';\r\nimport {transactionStatus} from '../../../components/Enumeration';\r\nimport FormSelectSearch from '../../../components/form-select-search/form-select-search.component';\r\n\r\nconst AddCertificateType = (props) => {\r\n    return (\r\n        <Row>\r\n            <Col md={12}>\r\n                <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_CERTIFICATETYPE\" })}\r\n                    name={\"scertificatetype\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_CERTIFICATETYPE\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"scertificatetype\"] : \"\"}\r\n                    isMandatory={true}\r\n                    required={true}\r\n                    maxLength={\"20\"}\r\n                />\r\n\r\n                <FormSelectSearch\r\n                        name={\"ncertificatereporttypecode\"}\r\n                        formLabel={ props.intl.formatMessage({ id:\"IDS_REPORTBATCHTYPE\"})}                                \r\n                        placeholder={props.intl.formatMessage({ id:\"IDS_SELECTRECORD\"})}                                \r\n                        options={ props.reportBatchTypeList}\r\n                        value = { props.selectedRecord[\"ncertificatereporttypecode\"] }\r\n                        isMandatory={true}\r\n                        isClearable={false}\r\n                        isMulti={false}\r\n                        isSearchable={true}                               \r\n                        isDisabled={false}\r\n                        closeMenuOnSelect={true}\r\n                        onChange = {(event)=> props.onComboChange(event, 'ncertificatereporttypecode')}                               \r\n                    />\r\n\r\n                {/* <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_VERSIONNO\" })}\r\n                    name={\"sversionno\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_VERSIONNO\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"sversionno\"] : \"\"}\r\n                    isMandatory={true}\r\n                    required={true}\r\n                    maxLength={\"20\"}\r\n                /> */}\r\n\r\n\r\n           \r\n                <FormTextarea\r\n                    label={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                    name={\"sdescription\"}\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_DESCRIPTION\" })}\r\n                    value={props.selectedRecord ? props.selectedRecord[\"sdescription\"] : \"\"}\r\n                    rows=\"2\"\r\n                    isMandatory={false}\r\n                    required={false}\r\n                    maxLength={\"255\"}\r\n                >\r\n                </FormTextarea>\r\n           \r\n                <CustomSwitch\r\n                    label={props.intl.formatMessage({ id: \"IDS_EDQM\" })}\r\n                    type=\"switch\"\r\n                    name={\"nedqm\"}\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_EDQM\" })}\r\n                    defaultValue={props.selectedRecord ? props.selectedRecord[\"nedqm\"] === transactionStatus.NO ? false : true : true}\r\n                    isMandatory={false}\r\n                    rows=\"3\"\r\n                    required={false}\r\n                    checked={props.selectedRecord ? props.selectedRecord[\"nedqm\"] === transactionStatus.NO ? false : true : true}\r\n\r\n                />\r\n            \r\n                <CustomSwitch\r\n                    label={props.intl.formatMessage({ id: \"IDS_ACCREDITED\" })}\r\n                    type=\"switch\"\r\n                    name={\"naccredited\"}\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_ACCREDITED\" })}\r\n                    defaultValue={props.selectedRecord ? props.selectedRecord[\"naccredited\"] === transactionStatus.NO ? false : true : true}\r\n                    isMandatory={false}\r\n                    rows=\"3\"\r\n                    required={false}\r\n                    checked={props.selectedRecord ? props.selectedRecord[\"naccredited\"] === transactionStatus.NO ? false : true : true}\r\n\r\n                />\r\n           \r\n                <CustomSwitch\r\n                    label={props.intl.formatMessage({ id: \"IDS_ACTIVE\" })}\r\n                    type=\"switch\"\r\n                    name={\"ntransactionstatus\"}\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_ACTIVE\" })}\r\n                    defaultValue={props.selectedRecord ? props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.NO ? false : true : true}\r\n                    isMandatory={false}\r\n                    rows=\"3\"\r\n                    required={false}\r\n                    checked={props.selectedRecord ? props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.NO ? false : true : true}\r\n                />\r\n\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\nexport default injectIntl(AddCertificateType);"]},"metadata":{},"sourceType":"module"}