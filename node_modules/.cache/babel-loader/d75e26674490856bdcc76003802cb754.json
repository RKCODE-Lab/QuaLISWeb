{"ast":null,"code":"import _defineProperty from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';//import { sortData, getComboLabelValue, searchData } from '../components/CommonScript'\nimport{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';//export function getClientComboService(screenName, operation, primaryKeyName, primaryKeyValue, userInfo, ncontrolCode) {\n//export function getClientComboService(screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode) {\nexport function getClientComboService(clientparam){return function(dispatch){if(clientparam.operation===\"create\"||clientparam.operation===\"update\"){var countryService=rsapi.post(\"country/getCountry\",{userinfo:clientparam.userInfo});var urlArray=[];var selectedId=null;if(clientparam.operation===\"create\"){urlArray=[countryService];}else{var _rsapi$post;var clientById=rsapi.post(\"client/getActiveClientById\",(_rsapi$post={},_defineProperty(_rsapi$post,clientparam.primaryKeyField,clientparam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",clientparam.userInfo),_rsapi$post));urlArray=[countryService,clientById];selectedId=clientparam.primaryKeyValue;}dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var country=[];var selectedRecord={};if(clientparam.operation===\"update\"){selectedRecord=response[1].data;country.push({\"value\":response[1].data[\"ncountrycode\"],\"label\":response[1].data[\"scountryname\"]});selectedRecord[\"ncountrycode\"]=country[0];}else{selectedRecord[\"ntransactionstatus\"]=1;}dispatch({type:DEFAULT_RETURN,payload:{countryList:response[0].data||[],selectedRecord:selectedRecord,openModal:true,operation:clientparam.operation,screenName:clientparam.screenName,ncontrolCode:clientparam.ncontrolCode,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}// else {\n//     toast.warn(this.props.formatMessage({ id: masterData.SelectedMAHolder.stranstatus }));\n// }\n};}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/ClientAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","getClientComboService","clientparam","dispatch","operation","countryService","post","userinfo","userInfo","urlArray","selectedId","clientById","primaryKeyField","primaryKeyValue","all","then","response","country","selectedRecord","data","push","type","payload","countryList","openModal","screenName","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\n//import { sortData, getComboLabelValue, searchData } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n\r\n//export function getClientComboService(screenName, operation, primaryKeyName, primaryKeyValue, userInfo, ncontrolCode) {\r\n//export function getClientComboService(screenName, primaryKeyName, primaryKeyValue, operation, inputParam, userInfo, ncontrolCode) {\r\nexport function getClientComboService(clientparam) {\r\n    return function (dispatch) {\r\n        if (clientparam.operation === \"create\" || clientparam.operation === \"update\") {\r\n            const countryService = rsapi.post(\"country/getCountry\", { userinfo: clientparam.userInfo });\r\n            let urlArray = [];\r\n            let selectedId = null;\r\n            if (clientparam.operation === \"create\") {\r\n\r\n                urlArray = [countryService];\r\n            }\r\n            else {\r\n                const clientById = rsapi.post(\"client/getActiveClientById\", { [clientparam.primaryKeyField]: clientparam.primaryKeyValue, \"userinfo\": clientparam.userInfo });\r\n\r\n                urlArray = [countryService, clientById];\r\n                selectedId = clientparam.primaryKeyValue;\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let country = [];\r\n                    let selectedRecord = {};\r\n                    if (clientparam.operation === \"update\") {\r\n                        selectedRecord = response[1].data;\r\n                        country.push({ \"value\": response[1].data[\"ncountrycode\"], \"label\": response[1].data[\"scountryname\"] });\r\n                        selectedRecord[\"ncountrycode\"] = country[0];\r\n                    } else {\r\n                        selectedRecord[\"ntransactionstatus\"] = 1;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            countryList: response[0].data || [],\r\n\r\n                            selectedRecord, openModal: true,\r\n                            operation: clientparam.operation, screenName: clientparam.screenName,\r\n                            ncontrolCode: clientparam.ncontrolCode, loading: false, selectedId\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n        // else {\r\n        //     toast.warn(this.props.formatMessage({ id: masterData.SelectedMAHolder.stranstatus }));\r\n        // }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}