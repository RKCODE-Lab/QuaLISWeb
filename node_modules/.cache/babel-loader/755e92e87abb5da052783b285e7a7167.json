{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { transactionStatus } from '../components/Enumeration';\nimport { intl } from \"../components/App\";\nexport function getTechniqueDetail(technique, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"technique/getTechnique\", {\n      ntechniquecode: technique.ntechniquecode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditTechniqueService(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"technique/getActiveTechniqueById\", {\n      [inputParam.primaryKeyName]: inputParam.masterData.SelectedTechnique[inputParam.primaryKeyName]\n    }).then(response => {\n      //const masterData = {...inputParam.masterData, SelectedTestPriceVersion: response.data};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          operation: inputParam.operation,\n          loading: false,\n          screenName: inputParam.screenName,\n          selectedRecord: response.data,\n          ncontrolCode: inputParam.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAddTestService(screenName, operation, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    //if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \n    dispatch(initRequest(true));\n    rsapi.post(\"technique/getTechniqueTest\", {\n      \"ntechniquecode\": masterData.SelectedTechnique[\"ntechniquecode\"],\n      userinfo: userInfo\n    }).then(response => {\n      // const testMap = constructOptionList(response.data || [], \"ntestcode\", \"stestname\",\n      //              undefined, undefined, true) ;\n      // const testList = testMap.get(\"OptionList\");                          \n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          //pricingTestList:testList, \n          techniqueTestList: response.data,\n          // openModal:true,\n          openChildModal: true,\n          operation,\n          screenName,\n          ncontrolCode,\n          //selectedRecord, \n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    }); // }\n    // else{\n    //     toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"}));\n    // }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TechniqueAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","toast","initRequest","transactionStatus","intl","getTechniqueDetail","technique","userInfo","masterData","dispatch","post","ntechniquecode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","getEditTechniqueService","inputParam","primaryKeyName","SelectedTechnique","openModal","screenName","selectedRecord","ncontrolCode","ncontrolcode","getAddTestService","techniqueTestList","openChildModal"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { sortData} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { intl } from \"../components/App\";\r\n\r\n\r\nexport function getTechniqueDetail (technique, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"technique/getTechnique\", {ntechniquecode:technique.ntechniquecode, \r\n                                                          userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\nexport function getEditTechniqueService(inputParam){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"technique/getActiveTechniqueById\",{[inputParam.primaryKeyName]:inputParam.masterData.SelectedTechnique[inputParam.primaryKeyName] \r\n                                                                    })\r\n        .then(response=>{\r\n            //const masterData = {...inputParam.masterData, SelectedTestPriceVersion: response.data};\r\n            \r\n            \r\n            dispatch({type: DEFAULT_RETURN, payload:{ openModal:true,\r\n                                                       operation:inputParam.operation, \r\n                                                       loading:false,\r\n                                                       screenName:inputParam.screenName,   \r\n                                                       selectedRecord:response.data,\r\n                                                       ncontrolCode:inputParam.ncontrolcode,}})\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })\r\n    }\r\n}\r\n\r\nexport function getAddTestService(screenName, operation, masterData, userInfo, ncontrolCode){\r\n    return function (dispatch) {    \r\n        //if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \r\n        \r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"technique/getTechniqueTest\",{\"ntechniquecode\":masterData.SelectedTechnique[\"ntechniquecode\"], \r\n            userinfo:userInfo})\r\n\r\n        .then(response=>{\r\n\r\n                // const testMap = constructOptionList(response.data || [], \"ntestcode\", \"stestname\",\r\n                //              undefined, undefined, true) ;\r\n\r\n                // const testList = testMap.get(\"OptionList\");                          \r\n                dispatch({type: DEFAULT_RETURN, payload:{//pricingTestList:testList, \r\n                                                        techniqueTestList:response.data,\r\n                                                       // openModal:true,\r\n                                                        openChildModal:true,\r\n                                                        operation, screenName, ncontrolCode,\r\n                                                        //selectedRecord, \r\n                                                        loading:false}});\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }      \r\n            }) \r\n    // }\r\n    // else{\r\n    //     toast.warn(intl.formatMessage({id: \"IDS_SELECTDRAFTTESTPRICEVERSION\"}));\r\n    // }\r\n}}"]},"metadata":{},"sourceType":"module"}