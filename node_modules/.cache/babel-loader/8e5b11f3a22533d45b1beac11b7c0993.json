{"ast":null,"code":"import _classCallCheck from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _inherits from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";import React from'react';import{AtTableWrap}from'../client-group.styles';import{FormattedMessage,injectIntl}from'react-intl';import{Grid,GridColumn as Column,GridNoRecords}from'@progress/kendo-react-grid';import{process}from'@progress/kendo-data-query';import ReactTooltip from'react-tooltip';import{Card,Col,FormGroup,FormLabel,Row}from'react-bootstrap';import{FormControlStatic}from'./data-grid.styles';import{parse}from'@fortawesome/fontawesome-svg-core';import SingleSelectionDataGrid from'./SingleSelectionDataGrid';var SimpleGridWithSelection=/*#__PURE__*/function(_React$Component){_inherits(SimpleGridWithSelection,_React$Component);var _super=_createSuper(SimpleGridWithSelection);function SimpleGridWithSelection(_props){var _this;_classCallCheck(this,SimpleGridWithSelection);_this=_super.call(this,_props);_this.expandChange=function(event){var isExpanded=true;//     event.dataItem.expanded === undefined ?\n//         event.dataItem.aggregates : event.dataItem.expanded;\n// if (this.props.hasSubChild && event.value === true) {\nevent.dataItem.expanded=true;_this.props.childHandleExpandChange(event,_this.props.dataState);// }\n// else {\n//     event.dataItem.expanded = !isExpanded;\n_this.setState({isExpanded:isExpanded});// }\n};_this.detailBand=function(props){return/*#__PURE__*/React.createElement(Row,{bsPrefix:\"margin_class\"},/*#__PURE__*/React.createElement(Col,{md:12},_this.props.hasSubChild?/*#__PURE__*/React.createElement(SingleSelectionDataGrid,{hasSubChild:_this.props.hasSubChild,subChildDataResult:_this.props.subChildDataResult&&_this.props.subChildDataResult||[],extractedColumnList:_this.props.subChildColumnList,subChildSelectionChange:_this.props.subChildSelectionChange,subChildList:_this.props.subChildList[props.dataItem[_this.props.subChildMappingField]]||[],subChildHeaderSelectionChange:_this.props.subChildHeaderSelectionChange,subChildSelectAll:_this.props.subChildSelectAll,abc:props.dataItem.ntransactionsamplecode,selectedsubcild:_this.props.selectedsubcild}):\"\"),\" \");};_this.subChildColumnList=[{\"idsName\":\"IDS_TESTNAME\",\"dataField\":\"ssamplearno\",\"width\":\"150px\",\"mandatoryLabel\":\"IDS_SELECT\",\"controlType\":\"selectbox\"}// { \"idsName\": \"IDS_SAMPLENAME\", \"dataField\": \"Sample Name\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\n//  { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"Container Type\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\n];return _this;}_createClass(SimpleGridWithSelection,[{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(AtTableWrap,{className:\"at-list-table\"},/*#__PURE__*/React.createElement(ReactTooltip,{place:\"bottom\",globalEventOff:\"click\",id:\"tooltip-samplegrid-wrap\"}),/*#__PURE__*/React.createElement(Grid//    data={this.props.childDataResult}\n,{data:process(this.props.childList,{skip:0,take:this.props.childList.length}),selectedField:\"selected\"// expandField={this.props.expandField ? this.props.expandField : false}\n,detail:this.props.hideDetailBand?false:this.detailBand// onExpandChange={this.expandChange}\n,onSelectionChange:this.props.childSelectionChange,onHeaderSelectionChange:this.props.headerSelectionChange,scrollable:this.props.scrollable,selectable:{enabled:true,drag:false,cell:false,mode:'multiple'},onRowClick:this.props.rowClick},/*#__PURE__*/React.createElement(Column,{field:\"selected\",width:\"50px\",title:this.props.title//   headerSelectionValue={this.props.selectAll}\n,headerSelectionValue:Object.values(this.props.childList).every(function(dd){return dd.selected===true;})?true:false}),this.props.extractedColumnList.map(function(item,index){return/*#__PURE__*/React.createElement(Column,{key:index,title:_this2.props.intl.formatMessage({id:item.idsName}),cell:function cell(row){return/*#__PURE__*/React.createElement(\"td\",{\"data-for\":\"tooltip-samplegrid-wrap\",\"data-tip\":row[\"dataItem\"][item.dataField]},item.isIdsField?/*#__PURE__*/React.createElement(FormattedMessage,{id:row[\"dataItem\"][item.dataField],defaultMessage:row[\"dataItem\"][item.dataField]}):row[\"dataItem\"][item.dataField]);}});})));}}]);return SimpleGridWithSelection;}(React.Component);export default injectIntl(SimpleGridWithSelection);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/components/data-grid/SimpleGridWithSelection.jsx"],"names":["React","AtTableWrap","FormattedMessage","injectIntl","Grid","GridColumn","Column","GridNoRecords","process","ReactTooltip","Card","Col","FormGroup","FormLabel","Row","FormControlStatic","parse","SingleSelectionDataGrid","SimpleGridWithSelection","props","expandChange","event","isExpanded","dataItem","expanded","childHandleExpandChange","dataState","setState","detailBand","hasSubChild","subChildDataResult","subChildColumnList","subChildSelectionChange","subChildList","subChildMappingField","subChildHeaderSelectionChange","subChildSelectAll","ntransactionsamplecode","selectedsubcild","childList","skip","take","length","hideDetailBand","childSelectionChange","headerSelectionChange","scrollable","enabled","drag","cell","mode","rowClick","title","Object","values","every","dd","selected","extractedColumnList","map","item","index","intl","formatMessage","id","idsName","row","dataField","isIdsField","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { AtTableWrap } from '../client-group.styles';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Grid, GridColumn as Column, GridNoRecords } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { Card, Col, FormGroup, FormLabel, Row } from 'react-bootstrap';\r\nimport { FormControlStatic } from './data-grid.styles';\r\nimport { parse } from '@fortawesome/fontawesome-svg-core';\r\nimport SingleSelectionDataGrid from './SingleSelectionDataGrid';\r\n\r\nclass SimpleGridWithSelection extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.subChildColumnList = [{ \"idsName\": \"IDS_TESTNAME\", \"dataField\": \"ssamplearno\", \"width\": \"150px\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            // { \"idsName\": \"IDS_SAMPLENAME\", \"dataField\": \"Sample Name\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            //  { \"idsName\": \"IDS_CONTAINERTYPE\", \"dataField\": \"Container Type\", \"width\": \"100px\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n        ];\r\n    }\r\n    expandChange = (event) => {\r\n         const isExpanded =true\r\n        //     event.dataItem.expanded === undefined ?\r\n        //         event.dataItem.aggregates : event.dataItem.expanded;\r\n\r\n        // if (this.props.hasSubChild && event.value === true) {\r\n            event.dataItem.expanded = true;\r\n            this.props.childHandleExpandChange(event, this.props.dataState)\r\n        // }\r\n        // else {\r\n        //     event.dataItem.expanded = !isExpanded;\r\n             this.setState({ isExpanded });\r\n        // }\r\n    }\r\n    detailBand = (props) => {\r\n        return (\r\n            <Row bsPrefix=\"margin_class\">\r\n                <Col md={12}>\r\n                    { this.props.hasSubChild ?\r\n                            <SingleSelectionDataGrid \r\n                                hasSubChild={this.props.hasSubChild}\r\n                                subChildDataResult={this.props.subChildDataResult && this.props.subChildDataResult || []}\r\n                                extractedColumnList={this.props.subChildColumnList}\r\n                                subChildSelectionChange={this.props.subChildSelectionChange}\r\n                                subChildList={this.props.subChildList[(props.dataItem[this.props.subChildMappingField])] || []}\r\n                                subChildHeaderSelectionChange={this.props.subChildHeaderSelectionChange}\r\n                            subChildSelectAll={this.props.subChildSelectAll}\r\n                            abc={props.dataItem.ntransactionsamplecode}\r\n                            selectedsubcild={this.props.selectedsubcild}\r\n\r\n                            />\r\n                            \r\n                           :\"\" }\r\n                </Col> </Row>\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <AtTableWrap className=\"at-list-table\">\r\n                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip-samplegrid-wrap\" />\r\n                {/* <Tooltip openDelay={100} position=\"auto\" tooltipClassName=\"ad-tooltip\" anchorElement=\"element\" parentTitle={true}> */}\r\n                <Grid\r\n                //    data={this.props.childDataResult}\r\n                    data={process(this.props.childList, { skip: 0, take: this.props.childList.length })}\r\n                    selectedField=\"selected\"\r\n                   // expandField={this.props.expandField ? this.props.expandField : false}\r\n                    detail={this.props.hideDetailBand ? false : this.detailBand}\r\n                   // onExpandChange={this.expandChange}\r\n                    onSelectionChange={this.props.childSelectionChange}\r\n                    onHeaderSelectionChange={this.props.headerSelectionChange}\r\n                    scrollable={this.props.scrollable}\r\n                    selectable={{\r\n                        enabled: true,\r\n                        drag: false,\r\n                        cell: false,\r\n                        mode: 'multiple'\r\n                      }} \r\n                     onRowClick={this.props.rowClick}>\r\n                    <Column\r\n                        field=\"selected\"\r\n                        width=\"50px\"\r\n                        title={this.props.title}\r\n                        //   headerSelectionValue={this.props.selectAll}\r\n                        headerSelectionValue={Object.values(this.props.childList).every((dd) => {\r\n                            return dd.selected === true\r\n                        }) ? true : false\r\n                        }\r\n                    />\r\n                    {/* <Column type='checkbox' width='50'></Column> */}\r\n\r\n                    {this.props.extractedColumnList.map((item, index) =>\r\n                        <Column key={index}\r\n                            title={this.props.intl.formatMessage({ id: item.idsName })}\r\n                            cell={(row) => (\r\n                                <td data-for=\"tooltip-samplegrid-wrap\"\r\n                                    data-tip={row[\"dataItem\"][item.dataField]}>\r\n                                    {/* title={row[\"dataItem\"][item.dataField]}> */}\r\n                                    {item.isIdsField ? <FormattedMessage id={row[\"dataItem\"][item.dataField]} defaultMessage={row[\"dataItem\"][item.dataField]} />\r\n                                        : row[\"dataItem\"][item.dataField]}\r\n                                </td>)}\r\n                        />\r\n                    )}\r\n                </Grid>\r\n                {/* </Tooltip>           */}\r\n            </AtTableWrap>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(SimpleGridWithSelection);"]},"metadata":{},"sourceType":"module"}