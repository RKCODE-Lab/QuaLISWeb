{"ast":null,"code":"import _objectWithoutProperties from\"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"name\",\"formLabel\",\"label\",\"placeholder\",\"isMandatory\",\"optionId\",\"optionValue\",\"options\",\"value\",\"defaultValue\",\"isMulti\",\"isSearchable\",\"isDisabled\",\"onChange\",\"onBlur\",\"closeMenuOnSelect\",\"className\",\"classNamePrefix\",\"minMenuHeight\",\"maxMenuHeight\",\"openMenuOnFocus\",\"menuPlacement\",\"menuPortalTarget\",\"menuPosition\",\"errors\",\"touched\",\"setFieldValue\",\"setFieldTouched\",\"isInvalid\",\"required\",\"onKeyUp\"];import React from'react';import Select from'react-select';import{Form}from'react-bootstrap';var FormSelectSearch=function FormSelectSearch(_ref){var name=_ref.name,formLabel=_ref.formLabel,label=_ref.label,placeholder=_ref.placeholder,isMandatory=_ref.isMandatory,optionId=_ref.optionId,optionValue=_ref.optionValue,options=_ref.options,value=_ref.value,defaultValue=_ref.defaultValue,isMulti=_ref.isMulti,isSearchable=_ref.isSearchable,isDisabled=_ref.isDisabled,onChange=_ref.onChange,onBlur=_ref.onBlur,closeMenuOnSelect=_ref.closeMenuOnSelect,className=_ref.className,classNamePrefix=_ref.classNamePrefix,minMenuHeight=_ref.minMenuHeight,maxMenuHeight=_ref.maxMenuHeight,openMenuOnFocus=_ref.openMenuOnFocus,menuPlacement=_ref.menuPlacement,menuPortalTarget=_ref.menuPortalTarget,menuPosition=_ref.menuPosition,errors=_ref.errors,touched=_ref.touched,setFieldValue=_ref.setFieldValue,setFieldTouched=_ref.setFieldTouched,isInvalid=_ref.isInvalid,required=_ref.required,onKeyUp=_ref.onKeyUp,props=_objectWithoutProperties(_ref,_excluded);// const optionList =Object.values(\n//                                 (props.sortField ? (\n//                                                     (props.sortOrder === \"ascending\" ?\n//                                                         options.sort((itemA, itemB) => itemA[props.sortField] < itemB[props.sortField] ? -1 : 1)\n//                                                         : options.sort((itemA, itemB) => itemA[props.sortField] > itemB[props.sortField] ? -1 : 1))\n//                                                     )\n//                                 : (props.alphabeticalSort ?\n//                                     options.sort((itemA, itemB) => itemA[optionValue] < itemB[optionValue] ? -1 : 1) : options)\n//                                 )\n//                             ).map(item =>(\n//                                 item.ndefaultstatus === transactionStatus.YES ? (defaultValue ={label: item[optionValue], value: item[optionId], item: item}) : \"\",\n//                                 { label: item[optionValue], value: item[optionId], item: item }\n//                             ));\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Form.Group,{onKeyUp:onKeyUp,className:\"form-select w-100 floating-label react-select-wrap\",controlId:name},/*#__PURE__*/React.createElement(Select,{inputId:name,id:name,name:name,placeholder:placeholder,options:options,value:value,isInvalid:isInvalid,required:required,defaultValue:defaultValue,isMulti:isMulti,isSearchable:isSearchable,isDisabled:isDisabled,isClearable:props.isClearable,onChange:onChange,onBlur:onBlur,closeMenuOnSelect:closeMenuOnSelect,className:className,classNamePrefix:\"react-select\",minMenuHeight:minMenuHeight,maxMenuHeight:maxMenuHeight,openMenuOnFocus:true,menuPlacement:\"auto\",autoComplete:\"off\",menuPosition:menuPosition// menuPortalTarget={document.querySelector('body')}\n// menuPosition=\"absolute\"\n// styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\n}),/*#__PURE__*/React.createElement(Form.Label,{htmlFor:name},formLabel,isMandatory&&/*#__PURE__*/React.createElement(\"sup\",null,\"*\")),/*#__PURE__*/React.createElement(Form.Control.Feedback,{type:\"invalid\"},errors)));};export default FormSelectSearch;","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/components/form-select-search/form-select-search.component.jsx"],"names":["React","Select","Form","FormSelectSearch","name","formLabel","label","placeholder","isMandatory","optionId","optionValue","options","value","defaultValue","isMulti","isSearchable","isDisabled","onChange","onBlur","closeMenuOnSelect","className","classNamePrefix","minMenuHeight","maxMenuHeight","openMenuOnFocus","menuPlacement","menuPortalTarget","menuPosition","errors","touched","setFieldValue","setFieldTouched","isInvalid","required","onKeyUp","props","isClearable"],"mappings":"4lBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,OAASC,IAAT,KAAqB,iBAArB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,MAiCnB,IAhCFC,CAAAA,IAgCE,MAhCFA,IAgCE,CA/BFC,SA+BE,MA/BFA,SA+BE,CA9BFC,KA8BE,MA9BFA,KA8BE,CA7BFC,WA6BE,MA7BFA,WA6BE,CA5BFC,WA4BE,MA5BFA,WA4BE,CA3BFC,QA2BE,MA3BFA,QA2BE,CA1BFC,WA0BE,MA1BFA,WA0BE,CAzBFC,OAyBE,MAzBFA,OAyBE,CAxBFC,KAwBE,MAxBFA,KAwBE,CAvBFC,YAuBE,MAvBFA,YAuBE,CAtBFC,OAsBE,MAtBFA,OAsBE,CArBFC,YAqBE,MArBFA,YAqBE,CApBFC,UAoBE,MApBFA,UAoBE,CAnBFC,QAmBE,MAnBFA,QAmBE,CAlBFC,MAkBE,MAlBFA,MAkBE,CAjBFC,iBAiBE,MAjBFA,iBAiBE,CAhBFC,SAgBE,MAhBFA,SAgBE,CAfFC,eAeE,MAfFA,eAeE,CAdFC,aAcE,MAdFA,aAcE,CAbFC,aAaE,MAbFA,aAaE,CAZFC,eAYE,MAZFA,eAYE,CAXFC,aAWE,MAXFA,aAWE,CAVFC,gBAUE,MAVFA,gBAUE,CATFC,YASE,MATFA,YASE,CARFC,MAQE,MARFA,MAQE,CAPFC,OAOE,MAPFA,OAOE,CANFC,aAME,MANFA,aAME,CALFC,eAKE,MALFA,eAKE,CAJFC,SAIE,MAJFA,SAIE,CAHFC,QAGE,MAHFA,QAGE,CAFFC,OAEE,MAFFA,OAEE,CADCC,KACD,0CACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,mBACI,oBAAC,KAAD,CAAO,QAAP,mBACI,oBAAC,IAAD,CAAM,KAAN,EAAY,OAAO,CAAED,OAArB,CAA8B,SAAS,CAAC,oDAAxC,CAA6F,SAAS,CAAE9B,IAAxG,eACI,oBAAC,MAAD,EACI,OAAO,CAAEA,IADb,CAEI,EAAE,CAAEA,IAFR,CAGI,IAAI,CAAEA,IAHV,CAII,WAAW,CAAEG,WAJjB,CAKI,OAAO,CAAEI,OALb,CAMI,KAAK,CAAEC,KANX,CAOI,SAAS,CAAEoB,SAPf,CAQI,QAAQ,CAAEC,QARd,CASI,YAAY,CAAEpB,YATlB,CAUI,OAAO,CAAEC,OAVb,CAWI,YAAY,CAAEC,YAXlB,CAYI,UAAU,CAAEC,UAZhB,CAaI,WAAW,CAAEmB,KAAK,CAACC,WAbvB,CAcI,QAAQ,CAAEnB,QAdd,CAeI,MAAM,CAAEC,MAfZ,CAgBI,iBAAiB,CAAEC,iBAhBvB,CAiBI,SAAS,CAAEC,SAjBf,CAkBI,eAAe,CAAC,cAlBpB,CAmBI,aAAa,CAAEE,aAnBnB,CAoBI,aAAa,CAAEC,aApBnB,CAqBI,eAAe,CAAE,IArBrB,CAsBI,aAAa,CAAE,MAtBnB,CAuBI,YAAY,CAAC,KAvBjB,CAwBI,YAAY,CAAEI,YAClB;AACA;AACA;AA3BA,EADJ,cA+BI,oBAAC,IAAD,CAAM,KAAN,EAAY,OAAO,CAAEvB,IAArB,EAA4BC,SAA5B,CAAuCG,WAAW,eAAI,mCAAtD,CA/BJ,cAgCI,oBAAC,IAAD,CAAM,OAAN,CAAc,QAAd,EAAuB,IAAI,CAAC,SAA5B,EACKoB,MADL,CAhCJ,CADJ,CADJ,CA0CH,CA1FD,CA2FA,cAAezB,CAAAA,gBAAf","sourcesContent":["import React from 'react';\r\nimport Select from 'react-select';\r\nimport { Form } from 'react-bootstrap';\r\n\r\nconst FormSelectSearch = ({\r\n    name,\r\n    formLabel,\r\n    label,\r\n    placeholder,\r\n    isMandatory,\r\n    optionId,\r\n    optionValue,\r\n    options,\r\n    value,\r\n    defaultValue,\r\n    isMulti,\r\n    isSearchable,\r\n    isDisabled,\r\n    onChange,\r\n    onBlur,\r\n    closeMenuOnSelect,\r\n    className,\r\n    classNamePrefix,\r\n    minMenuHeight,\r\n    maxMenuHeight,\r\n    openMenuOnFocus,\r\n    menuPlacement,\r\n    menuPortalTarget,\r\n    menuPosition,\r\n    errors,\r\n    touched,\r\n    setFieldValue,\r\n    setFieldTouched,\r\n    isInvalid,\r\n    required,\r\n    onKeyUp,\r\n    ...props\r\n}) => {\r\n    // const optionList =Object.values(\r\n    //                                 (props.sortField ? (\r\n    //                                                     (props.sortOrder === \"ascending\" ?\r\n    //                                                         options.sort((itemA, itemB) => itemA[props.sortField] < itemB[props.sortField] ? -1 : 1)\r\n    //                                                         : options.sort((itemA, itemB) => itemA[props.sortField] > itemB[props.sortField] ? -1 : 1))\r\n    //                                                     )\r\n    //                                 : (props.alphabeticalSort ?\r\n    //                                     options.sort((itemA, itemB) => itemA[optionValue] < itemB[optionValue] ? -1 : 1) : options)\r\n\r\n    //                                 )\r\n    //                             ).map(item =>(\r\n    //                                 item.ndefaultstatus === transactionStatus.YES ? (defaultValue ={label: item[optionValue], value: item[optionId], item: item}) : \"\",\r\n    //                                 { label: item[optionValue], value: item[optionId], item: item }\r\n    //                             ));\r\n    return (\r\n        <React.Fragment>\r\n            <Form.Group onKeyUp={onKeyUp} className=\"form-select w-100 floating-label react-select-wrap\" controlId={name}>\r\n                <Select\r\n                    inputId={name}\r\n                    id={name}\r\n                    name={name}\r\n                    placeholder={placeholder}\r\n                    options={options}\r\n                    value={value}\r\n                    isInvalid={isInvalid}\r\n                    required={required}\r\n                    defaultValue={defaultValue}\r\n                    isMulti={isMulti}\r\n                    isSearchable={isSearchable}\r\n                    isDisabled={isDisabled}\r\n                    isClearable={props.isClearable}\r\n                    onChange={onChange}\r\n                    onBlur={onBlur}\r\n                    closeMenuOnSelect={closeMenuOnSelect}\r\n                    className={className}\r\n                    classNamePrefix=\"react-select\"\r\n                    minMenuHeight={minMenuHeight}\r\n                    maxMenuHeight={maxMenuHeight}\r\n                    openMenuOnFocus={true}\r\n                    menuPlacement={\"auto\"}\r\n                    autoComplete=\"off\"\r\n                    menuPosition={menuPosition}\r\n                // menuPortalTarget={document.querySelector('body')}\r\n                // menuPosition=\"absolute\"\r\n                // styles={{ menuPortal: base => ({ ...base, zIndex: 9999 }) }}\r\n\r\n                />\r\n                <Form.Label htmlFor={name}>{formLabel}{isMandatory && <sup>*</sup>}</Form.Label>\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    {errors}\r\n                </Form.Control.Feedback>\r\n            </Form.Group>\r\n        </React.Fragment>\r\n    )\r\n\r\n\r\n};\r\nexport default FormSelectSearch;"]},"metadata":{},"sourceType":"module"}