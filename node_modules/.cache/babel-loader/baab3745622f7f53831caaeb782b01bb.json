{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport Axios from 'axios';\nimport { numericGrade } from '../pages/ResultEntryBySample/ResultEntryValidation';\nimport { constructOptionList, fillRecordBasedOnCheckBoxSelection, filterRecordBasedOnTwoArrays, getRecordBasedOnPrimaryKeyName, getSameRecordFromTwoArrays, replaceUpdatedObject, sortData, updatedObjectWithNewElement, rearrangeDateFormat, filterRecordBasedOnPrimaryKeyName, reArrangeArrays } from '../components/CommonScript';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntype: 2,\n      nflag: inputData.nflag || 2,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntranscode: String(inputData.ntransactionstatus),\n      ntransactiontestcode: 0,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      napprovalversioncode: inputData.napprovalversioncode,\n      fromdate: inputData.fromdate,\n      todate: inputData.todate,\n      activeTestKey: inputData.activeTestKey,\n      activeSampleKey: inputData.activeSampleKey,\n      nneedsubsample: inputData.masterData.nneedsubsample,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData,\n        checkBoxOperation: inputData.checkBoxOperation\n      }).then(response => {\n        // if (response.data.DynamicGetSamples) {\n        //     sortData(response.data.DynamicGetSamples, \"\", \"\");\n        // }\n        // if (response.data.DynamicGetTests) {\n        //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\n        // }\n        sortData(response.data); // let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\n        // responseData = sortData(responseData)\n\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let RESelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample;\n        RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample\n        }; // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\n        //     inputData.searchSampleRef.current.value = \"\";\n        //     masterData['searchedSample'] = undefined\n        // }\n\n        if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\n          inputData.searchSubSampleRef.current.value = \"\";\n          masterData['searchedSubSample'] = undefined;\n        }\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTest'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedMaterial = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } // else if(inputData.checkBoxOperation === 7){\n        //     getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n        //     let list = []\n        //     switch (inputData.activeTestKey) {\n        //         case \"IDS_RESULTS\":\n        //             list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n        //             TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n        //             activeName = \"TestParameters\"\n        //             dataStateName = \"resultDataState\"\n        //             break;\n        //         case \"IDS_INSTRUMENT\":\n        //             list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n        //             ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n        //             activeName = \"ResultUsedInstrument\"\n        //             dataStateName = \"instrumentDataState\"\n        //             break;\n        //         case \"IDS_MATERIAL\":\n        //             list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n        //             ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n        //             activeName = \"ResultUsedMaterial\"\n        //             dataStateName = \"materialDataState\"\n        //             break;\n        //         case \"IDS_TASK\":\n        //             list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n        //             list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n        //             ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n        //             activeName = \"ResultUsedTasks\"\n        //             dataStateName = \"taskDataState\"\n        //             break;\n        //         case \"IDS_TESTATTACHMENTS\":\n        //             list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n        //             RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n        //             activeName = \"RegistrationTestAttachment\"\n        //             break;\n        //         case \"IDS_RESULTCHANGEHISTORY\":\n        //             list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n        //             ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n        //             activeName = \"ResultChangeHistory\"\n        //             dataStateName = \"resultChangeDataState\"\n        //             break;\n        //         case \"IDS_TESTCOMMENTS\":\n        //             list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n        //             RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n        //             activeName = \"RegistrationTestComment\"\n        //             dataStateName = \"testCommentDataState\"\n        //             break;\n        //         default:\n        //             list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n        //             TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\n        //             activeName = \"TestParameters\"\n        //             dataStateName = \"resultDataState\"\n        //             break;\n        //     }\n        // } \n        else {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          ResultUsedMaterial,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            skip: undefined,\n            take: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      let oldSelectedTest = inputData.masterData.RESelectedTest; //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      //let isGrandChildGetRequired = false;\n\n      let oldSelectedSubSample = inputData.masterData.RESelectedSubSample;\n      let {\n        subsampletake,\n        subsampleskip\n      } = inputData;\n      let skipInfo = {};\n      let TestSelected = [];\n      let subSampleSelected = [];\n\n      if (inputData[\"statusNone\"]) {\n        TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      } else {\n        TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n        subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n      }\n\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSample = inputData.RESelectedSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\n        let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE;\n\n        if (inputData.masterData.nneedsubsample) {\n          let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n          RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\n\n          if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampletake,\n              subsampleskip\n            };\n          }\n        }\n\n        let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\n        let masterData = { ...inputData.masterData,\n          RESelectedSample,\n          RESelectedSubSample,\n          RESelectedTest\n        };\n        inputData = { ...inputData,\n          ntransactiontestcode,\n          ntransactionsamplecode,\n          RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey,\n          masterData\n        };\n\n        if (RESelectedTest.length > 0) {\n          inputData = { ...inputData,\n            childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"]\n          };\n          dispatch(getTestChildTabREDetail(inputData, true));\n        } else {\n          inputData = { ...inputData,\n            masterData,\n            childTabsKey: [\"RE_TEST\"]\n          };\n          dispatch(getTestREDetail(inputData, true));\n        }\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          // RESelectedSample: inputData.RESelectedSample,\n          // RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\n          RESelectedTest: TestSelected ? TestSelected : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.RESelectedSample,\n          RESelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RE_SUBSAMPLE.length > 0 ? [inputData.masterData.RE_SUBSAMPLE[0]] : []\n        };\n        let subsamplecheck = true;\n\n        if (inputData.masterData.nneedsubsample) {\n          let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\n\n          if (SubSampleSelected.length > 0) {\n            let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\n\n            if (filterSelectedSubSample.length === 0) {\n              let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n              oldSelectedSubSample.forEach((test, index) => {\n                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                  oldSelectedSubSample.splice(index, 1);\n                }\n\n                return null;\n              });\n\n              if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0 && masterData.selectedTest.length === 0) {\n                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\n                masterData = { ...masterData,\n                  RESelectedSubSample: selectedSubSample1,\n                  selectedTest: []\n                };\n                inputData = { ...inputData,\n                  ...masterData\n                };\n                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\");\n                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\");\n                inputData[\"checkBoxOperation\"] = 3;\n                inputData[\"childTabsKey\"] = [\"RE_TEST\"];\n                subsamplecheck = false;\n                dispatch(getTestREDetail(inputData, true));\n              }\n            } else {\n              oldSelectedSubSample = filterSelectedSubSample;\n            }\n          } else {\n            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode);\n            oldSelectedSubSample.forEach((test, index) => {\n              if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\n                oldSelectedSubSample.splice(index, 1);\n              }\n\n              return null;\n            });\n          }\n\n          if (subsamplecheck) {\n            masterData = { ...masterData,\n              RESelectedSubSample: oldSelectedSubSample\n            };\n          }\n\n          if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\n            subsampleskip = 0;\n            skipInfo = {\n              subsampleskip,\n              subsampletake\n            };\n          }\n        }\n\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = inputData.masterData.RE_TEST[0].ntransactiontestcode; // ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\n        } //const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n        //ntransactiontestcode, \"ntransactiontestcode\");\n\n\n        const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSample: inputData.RESelectedSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedMaterial,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\n\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getTestREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let activeName = \"\";\n    let dataStateName = \"\";\n    let inputParamData = {\n      nflag: 3,\n      ntype: 3,\n      nsampletypecode: inputData.nsampletypecode,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      npreregno: inputData.npreregno,\n      ntransactiontestcode: 0,\n      ntranscode: inputData.ntransactionstatus.toString(),\n      ntransactionsamplecode: inputData.ntransactionsamplecode,\n      userinfo: inputData.userinfo,\n      ntestcode: inputData.ntestcode,\n      activeTestKey: inputData.activeTestKey,\n      ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n      checkBoxOperation: inputData.checkBoxOperation\n    }; // dispatch(initRequest(true));\n    // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\n\n    if (isServiceRequired) {\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData).then(response => {\n        // let responseData = {\n        //     ...response.data,\n        //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n        //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\n        //     // RESelectedTest: inputData.masterData.RESelectedTest\n        // }\n        let responseData = { ...response.data\n        };\n        responseData = sortData(responseData, 'descending', 'npreregno');\n        let oldSelectedTest = inputData.masterData.RESelectedTest;\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          // ...response.data,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSample: inputData.masterData.RESelectedSample,\n          RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample\n        };\n\n        if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\n          inputData.searchTestRef.current.value = \"\";\n          masterData['searchedTests'] = undefined;\n        }\n\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        let TestParameters = [];\n        let ResultUsedInstrument = [];\n        let ResultUsedMaterial = [];\n        let ResultUsedTasks = [];\n        let RegistrationTestAttachment = [];\n        let ResultChangeHistory = [];\n        let RegistrationTestComment = [];\n\n        if (inputData.checkBoxOperation === 1) {\n          //added by sudharshanan for test select issue while sample click\n          let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n          oldSelectedTest.map((test, index) => {\n            if (!wholeTestList.includes(test.ntransactiontestcode)) {\n              oldSelectedTest.splice(index, 1);\n            }\n\n            return null;\n          });\n          let keepOld = false;\n          let ntransactiontestcode;\n\n          if (oldSelectedTest.length > 0) {\n            keepOld = true;\n            masterData = { ...masterData,\n              RESelectedTest: oldSelectedTest\n            };\n          } else {\n            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode;\n          }\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 5) {\n          let list = [];\n          let dbData = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else if (inputData.checkBoxOperation === 7) {\n          let list = [];\n          let dbData = [];\n          let testList = reArrangeArrays(inputData.masterData.RE_SUBSAMPLE, responseData.RE_TEST, \"ntransactionsamplecode\");\n          masterData = { ...masterData,\n            RESelectedTest: [testList[0]],\n            RE_TEST: testList // ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\n\n          };\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              dbData = response.data.TestParameters || [];\n              list = [...response.data.TestParameters];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, testList.length > 0 ? testList[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TASK\":\n              dbData = response.data.ResultUsedTasks || [];\n              list = [...inputData.masterData.ResultUsedTasks, ...dbData];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              dbData = response.data.RegistrationTestAttachment || [];\n              list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              dbData = response.data.ResultChangeHistory || [];\n              list = [...inputData.masterData.ResultChangeHistory, ...dbData];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              dbData = response.data.RegistrationTestComment || [];\n              list = [...inputData.masterData.RegistrationTestComment, ...dbData];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n\n            default:\n              dbData = response.data.TestParameters || [];\n              list = [...inputData.masterData.TestParameters, ...dbData];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              break;\n          }\n        } else {\n          let list = [];\n\n          switch (inputData.activeTestKey) {\n            case \"IDS_RESULTS\":\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n\n            case \"IDS_INSTRUMENT\":\n              list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\n              ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedInstrument\";\n              dataStateName = \"instrumentDataState\";\n              break;\n\n            case \"IDS_MATERIAL\":\n              list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\n              ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedMaterial\";\n              dataStateName = \"materialDataState\";\n              break;\n\n            case \"IDS_TASK\":\n              list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\n              list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n              ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultUsedTasks\";\n              dataStateName = \"taskDataState\";\n              break;\n\n            case \"IDS_TESTATTACHMENTS\":\n              list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\n              RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestAttachment\";\n              break;\n\n            case \"IDS_RESULTCHANGEHISTORY\":\n              list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\n              ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"ResultChangeHistory\";\n              dataStateName = \"resultChangeDataState\";\n              break;\n\n            case \"IDS_TESTCOMMENTS\":\n              list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\n              RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"RegistrationTestComment\";\n              dataStateName = \"testCommentDataState\";\n              break;\n\n            default:\n              list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\n              TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\");\n              activeName = \"TestParameters\";\n              dataStateName = \"resultDataState\";\n              break;\n          }\n        }\n\n        masterData = { ...masterData,\n          // wholeApprovalParameter,\n          TestParameters,\n          // wholeResultUsedInstrument,\n          ResultUsedInstrument,\n          ResultUsedMaterial,\n          // wholeResultUsedTasks,\n          ResultUsedTasks,\n          // wholeRegistrationTestAttachment,\n          RegistrationTestAttachment,\n          // wholeResultChangeHistory,\n          ResultChangeHistory,\n          // wholeRegistrationTestComments,\n          RegistrationTestComment\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            showFilter: false,\n            activeTestKey: inputData.activeTestKey,\n            screenName: inputData.screenName,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      let oldSelectedTest = inputData.masterData.RESelectedTest; //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      // let isGrandChildGetRequired = false;\n      // if (TestSelected.length > 0) {\n      //     isGrandChildGetRequired = true;\n      // } else {\n      //     isGrandChildGetRequired = false;\n      // }\n\n      let TestSelected = inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\") : filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\n      let isGrandChildGetRequired = false;\n\n      if (TestSelected.length > 0) {\n        isGrandChildGetRequired = false;\n      } else {\n        isGrandChildGetRequired = true;\n      }\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\n\n      if (isGrandChildGetRequired) {\n        let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\n        let RESelectedSubSample = inputData.RESelectedSubSample;\n        let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : []; // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\n\n        inputData = { ...inputData,\n          childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"],\n          ntransactiontestcode,\n          RESelectedSample: inputData.masterData.RESelectedSample,\n          RESelectedTest,\n          RESelectedSubSample,\n          checkBoxOperation: 3,\n          activeTestKey: inputData.activeTestKey\n        };\n        dispatch(getTestChildTabREDetail(inputData, true));\n      } else {\n        //added by sudharshanan for test select issue while sample click\n        let masterData = { ...inputData.masterData,\n          RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n          RESelectedSubSample: inputData.RESelectedSubSample\n        };\n        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode);\n        oldSelectedTest.map((test, index) => {\n          if (!wholeTestList.includes(test.ntransactiontestcode)) {\n            oldSelectedTest.splice(index, 1);\n          }\n\n          return null;\n        });\n        let keepOld = false;\n        let ntransactiontestcode;\n\n        if (oldSelectedTest.length > 0) {\n          keepOld = true;\n          masterData = { ...masterData,\n            RESelectedTest: oldSelectedTest\n          };\n        } else {\n          ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode;\n        } // const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\n        //     ntransactiontestcode, \"ntransactiontestcode\");\n\n\n        const TestParameters = keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, inputData.removeElementFromArray[0].ntransactionsamplecode, 'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [], ntransactiontestcode, \"ntransactiontestcode\");\n        const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [], ntransactiontestcode, \"ntransactiontestcode\");\n        let {\n          testskip,\n          testtake\n        } = inputData;\n        let bool = false;\n        let skipInfo = {};\n\n        if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\n          testskip = 0;\n          bool = true;\n        }\n\n        if (bool) {\n          skipInfo = {\n            testskip,\n            testtake\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              RESelectedSubSample: inputData.RESelectedSubSample,\n              // selectedPreregno: inputData.npreregno,\n              // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\n              //     searchedTest[0]\n              // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\n              //     RE_TEST[0]\n              // ] : [],\n              // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\n              TestParameters,\n              ResultUsedInstrument,\n              ResultUsedMaterial,\n              ResultUsedTasks,\n              RegistrationTestAttachment,\n              RegistrationTestComment,\n              ResultChangeHistory\n            },\n            loading: false,\n            showFilter: false,\n            activeSampleTab: inputData.activeSampleTab,\n            activeTestKey: inputData.activeTestKey,\n            ...skipInfo\n          }\n        });\n      }\n    }\n  };\n}\nexport function getSampleChildTabREDetail(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let url = \"\";\n\n    switch (inputData.activeSampleKey) {\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLECOMMENTS\":\n        url = \"comments/getSampleComment\";\n        break;\n\n      default:\n        url = \"attachment/getSampleAttachment\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n    rsapi.post(url, inputParamData).then(response => {\n      let responseData = { ...response.data\n      }; //responseData = sortData(responseData)\n\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            RESelectedSample: inputData.RESelectedSample\n          },\n          loading: false,\n          activeSampleKey: inputData.activeSampleKey,\n          screenName: inputData.screenName\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\n      npreregno: inputData.npreregno,\n      userinfo: inputData.userinfo\n    };\n    let activeName = \"\";\n    let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n    //     documentDataState, testCommentDataState } = inputData\n\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (inputData.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        activeName = \"ResultUsedInstrument\";\n        dataStateName = \"instrumentDataState\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        activeName = \"ResultUsedMaterial\";\n        dataStateName = \"materialDataState\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        activeName = \"ResultUsedTasks\";\n        dataStateName = \"taskDataState\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        activeName = \"RegistrationTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        activeName = \"RegistrationTestComment\";\n        dataStateName = \"testCommentDataState\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"documentDataState\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        activeName = \"ResultChangeHistory\";\n        dataStateName = \"resultChangeDataState\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        activeName = \"\";\n        dataStateName = \"resultDataState\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        activeName = \"TestParameters\";\n        dataStateName = \"resultDataState\";\n        break;\n    }\n\n    dispatch(initRequest(true));\n\n    if (isServiceRequired) {\n      rsapi.post(url, inputParamData).then(response => {\n        sortData(response.data, 'ascending', 'ntransactiontestcode');\n        let responseData = { ...response.data,\n          RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\n          RESelectedTest: inputData.RESelectedTest\n        };\n        let skipInfo = {}; //responseData = sortData(responseData)\n\n        fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          RESelectedTest: inputData.RESelectedTest\n        };\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = {\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false,\n            activeTestKey: inputData.activeTestKey,\n            screenName: inputData.activeTestKey,\n            testskip: undefined,\n            testtake: undefined,\n            ...skipInfo\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\n      fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\n      let skipInfo = {};\n      let masterData = { ...inputData.masterData,\n        RESelectedTest: inputData.RESelectedTest\n      };\n\n      if (masterData[activeName].length <= inputData[dataStateName].skip) {\n        skipInfo = {\n          [dataStateName]: { ...inputData[dataStateName],\n            skip: 0,\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      } else {\n        skipInfo = { ...skipInfo,\n          [dataStateName]: { ...inputData[dataStateName],\n            sort: undefined,\n            filter: undefined\n          }\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          activeTestKey: inputData.activeTestKey,\n          screenName: inputData.screenName,\n          ...skipInfo\n        }\n      });\n    }\n  };\n}\nexport function getRERegistrationType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getRERegistrationSubType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultFilterStatus: inputData.masterData.defaultFilterStatus,\n            defaultRegistrationType: inputData.defaultRegistrationType\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREApprovalConfigVersion(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultRegistrationSubType: inputData.defaultRegistrationSubType // fromDate: inputData.fromdate,\n            //  toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREFilterStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFilterStatus\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultjobstatus: inputData.defaultjobstatus // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREJobStatus(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getJobStatus\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion // fromDate: inputData.fromdate,\n            // toDate: inputData.todate\n\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getResultEntryDetails(inputParamData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData,\n      nneedsubsample: inputParamData.masterData.nneedsubsample\n    }).then(response => {\n      let masterData = { ...inputParamData.masterData\n      };\n\n      if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\n        inputParamData.refs.searchSampleRef.current.value = \"\";\n        masterData['searchedSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\n        inputParamData.refs.searchSubSampleRef.current.value = \"\";\n        masterData['searchedSubSample'] = undefined;\n      }\n\n      if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\n        inputParamData.refs.searchTestRef.current.value = \"\"; // masterData['searchedTests'] = undefined\n\n        masterData['searchedTest'] = undefined;\n      }\n\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            realFromDate: response.data[\"fromDate\"],\n            realToDate: response.data[\"toDate\"]\n          },\n          loading: false,\n          showTest: inputParamData.inputData.showTest,\n          showSample: inputParamData.inputData.showSample,\n          activeTestKey: inputParamData.inputData.activeTestKey,\n          skip: 0,\n          take: inputParamData.inputData.take,\n          testskip: 0,\n          testtake: inputParamData.inputData.testtake,\n          resultDataState: { ...inputParamData.resultDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          instrumentDataState: { ...inputParamData.instrumentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          materialDataState: { ...inputParamData.materialDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          taskDataState: { ...inputParamData.taskDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          documentDataState: { ...inputParamData.documentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          resultChangeDataState: { ...inputParamData.resultChangeDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          testCommentDataState: { ...inputParamData.testCommentDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          historyDataState: { ...inputParamData.historyDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          },\n          sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\n  return function (dispatch) {\n    let TestList = [...inputData.RE_TEST];\n    TestList = TestList.splice(testskip, testskip + testtake);\n    let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\n\n    if (acceptTestList && acceptTestList.length > 0) {\n      if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\n        let inputParamData = {\n          ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n          userinfo: userInfo\n        };\n        dispatch(initRequest(true));\n        rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData).then(response => {\n          let selectedResultGrade = [];\n          let paremterResultcode = [];\n          const parameterResults = response.data.ResultParameter;\n          let predefDefaultFlag = false;\n          parameterResults.map((param, index) => {\n            selectedResultGrade[index] = {\n              ngradecode: param.ngradecode\n            };\n            paremterResultcode[index] = param.ntransactionresultcode;\n            predefDefaultFlag = false;\n            response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\n              if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\n                if (!predefDefaultFlag) {\n                  predefDefaultFlag = true;\n                  response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n                } // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\n                //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n                //         undefined, undefined).get(\"OptionList\");\n\n\n                if (response.data.ResultParameter[index].sresult === null) {\n                  response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\n                  response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\n                  response.data.ResultParameter[index].editable = true;\n                  response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\n                }\n              } else {\n                if (!predefDefaultFlag) {\n                  predefDefaultFlag = true;\n                  response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] = constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined, undefined, undefined).get(\"OptionList\");\n                }\n              } //return null;\n\n            }); //return null;\n            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\n            // undefined, undefined).get(\"OptionList\");\n          });\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              masterData: { ...inputData,\n                ...response.data,\n                paremterResultcode //,\n                //selectedResultGrade ,\n\n              },\n              selectedRecord: {\n                selectedResultGrade: selectedResultGrade,\n                ResultParameter: response.data.ResultParameter\n              },\n              loading: false,\n              screenName: \"IDS_RESULTENTRY\",\n              openModal: true,\n              operation: \"update\",\n              activeTestKey: \"IDS_RESULTS\",\n              ncontrolcode: ncontrolcode\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        }); //}\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTTESTTOENTERRESULT\"\n        }));\n      }\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTTESTTOENTERRESULT\"\n      }));\n    }\n  };\n}\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\n  if (acceptList !== undefined && acceptList.length > 0) {\n    return function (dispatch) {\n      let inputData = inputParam.testChildGetREParam;\n      let inputParamData = {\n        ntype: 3,\n        nflag: 3,\n        nsampletypecode: inputData.nsampletypecode,\n        nregtypecode: inputData.nregtypecode,\n        nregsubtypecode: inputData.nregsubtypecode,\n        npreregno: inputData.npreregno,\n        ntranscode: String(inputData.ntransactionstatus),\n        napprovalversioncode: inputData.napprovalversioncode,\n        napprovalconfigcode: inputData.napprovalconfigcode,\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: userInfo,\n        fromdate: inputData.fromdate,\n        todate: inputData.todate,\n        ntestcode: inputData.ntestcode,\n        transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        activeTestKey: inputData.activeTestKey,\n        ncontrolcode: inputParam.inputData.ncontrolcode,\n        nneedsubsample: inputData.masterData.nneedsubsample,\n        ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\n      };\n      let activeName = \"\";\n      let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n      //     documentDataState, testCommentDataState } = inputData\n      // let url = \"resultentrybysample/getTestbasedParameter\"\n\n      switch (inputData.activeTestKey) {\n        case \"IDS_RESULTS\":\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          activeName = \"ResultUsedMaterial\";\n          dataStateName = \"materialDataState\";\n          break;\n\n        case \"IDS_TASK\":\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          activeName = \"\";\n          dataStateName = \"documentDataState\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          activeName = \"ResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          activeName = \"\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        default:\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/completeTest\", inputParamData).then(response => {\n        let RE_SAMPLE = [];\n        let RE_SUBSAMPLE = [];\n        let RE_TEST = [];\n        let responseData = response.data;\n\n        if (responseData[\"RE_TEST\"].length > 0) {\n          if (inputData.masterData.nneedsubsample) RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");else RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\n        } else {\n          RE_TEST = inputData.masterData[\"RE_TEST\"];\n        }\n\n        RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\n\n        if (RE_SUBSAMPLE.length > 0) {\n          RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\n        } else {\n          RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\n        }\n\n        const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\n        const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\n        let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\n        let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest);\n        let searchedSample = undefined;\n\n        if (inputData.masterData[\"searchedSample\"]) {\n          searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\n        }\n\n        let masterData = { ...inputData.masterData,\n          ...responseData,\n          RE_SAMPLE,\n          RE_SUBSAMPLE,\n          RESelectedSubSample,\n          searchedSample,\n          RESelectedSample,\n          RESelectedTest: RESelectedTest2,\n          RE_TEST: responseData[\"RE_TEST\"]\n        };\n        let skipInfo = {};\n\n        if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\n          skipInfo = { ...skipInfo,\n            skip: 0,\n            take: inputParam.take\n          };\n        }\n\n        if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\n          skipInfo = { ...skipInfo,\n            testskip: 0,\n            testtake: inputParam.testtake\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        let respObject = { ...inputParamData.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          //selectedRecord: undefined,\n          loading: false,\n          screenName: inputData.activeTestKey,\n          ...skipInfo\n        };\n\n        if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [searchedSample[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [RE_SAMPLE[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else {\n          respObject = { ...respObject,\n            masterData\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n}\nexport function testStart(inputParam, acceptList, userInfo, completeResultId) {\n  if (acceptList !== undefined && acceptList.length > 0) {\n    return function (dispatch) {\n      let inputData = inputParam.testChildGetREParam;\n      let inputParamData = {\n        ntype: 3,\n        nflag: 3,\n        nsampletypecode: inputData.nsampletypecode,\n        nregtypecode: inputData.nregtypecode,\n        nregsubtypecode: inputData.nregsubtypecode,\n        npreregno: inputData.npreregno,\n        ntranscode: String(inputData.ntransactionstatus),\n        napprovalversioncode: inputData.napprovalversioncode,\n        napprovalconfigcode: inputData.napprovalconfigcode,\n        ntransactionsamplecode: inputData.ntransactionsamplecode,\n        userinfo: userInfo,\n        fromdate: inputData.fromdate,\n        todate: inputData.todate,\n        ntestcode: inputData.ntestcode,\n        transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntransactiontestcode: 0,\n        activeTestKey: inputData.activeTestKey,\n        ncontrolcode: inputParam.inputData.ncontrolcode,\n        nneedsubsample: inputData.masterData.nneedsubsample,\n        ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\n      };\n      let activeName = \"\";\n      let dataStateName = \"\"; // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\n      //     documentDataState, testCommentDataState } = inputData\n      // let url = \"resultentrybysample/getTestbasedParameter\"\n\n      switch (inputData.activeTestKey) {\n        case \"IDS_RESULTS\":\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          activeName = \"ResultUsedInstrument\";\n          dataStateName = \"instrumentDataState\";\n          break;\n\n        case \"IDS_MATERIAL\":\n          activeName = \"ResultUsedMaterial\";\n          dataStateName = \"materialDataState\";\n          break;\n\n        case \"IDS_TASK\":\n          activeName = \"ResultUsedTasks\";\n          dataStateName = \"taskDataState\";\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          activeName = \"RegistrationTestAttachment\";\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          activeName = \"RegistrationTestComment\";\n          dataStateName = \"testCommentDataState\";\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          activeName = \"\";\n          dataStateName = \"documentDataState\";\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          activeName = \"ResultChangeHistory\";\n          dataStateName = \"resultChangeDataState\";\n          break;\n\n        case \"IDS_SAMPLEATTACHMENTS\":\n          activeName = \"\";\n          dataStateName = \"resultDataState\";\n          break;\n\n        default:\n          activeName = \"TestParameters\";\n          dataStateName = \"resultDataState\";\n          break;\n      }\n\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/testInitiated\", inputParamData).then(response => {\n        let RE_SAMPLE = [];\n        let RE_SUBSAMPLE = [];\n        let RE_TEST = [];\n        let responseData = response.data;\n\n        if (responseData[\"RE_TEST\"].length > 0) {\n          if (inputData.masterData.nneedsubsample) RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");else RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\n        } else {\n          RE_TEST = inputData.masterData[\"RE_TEST\"];\n        }\n\n        RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\n\n        if (RE_SUBSAMPLE.length > 0) {\n          RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\n        } else {\n          RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\n        }\n\n        const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\n        const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\n        let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\n        let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest);\n        RESelectedTest2 = replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode');\n        let searchedSample = undefined;\n\n        if (inputData.masterData[\"searchedSample\"]) {\n          searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\n        }\n\n        let masterData = { ...inputData.masterData,\n          //...responseData,\n          //RE_SAMPLE,\n          //RE_SUBSAMPLE,\n          //RESelectedSubSample,\n          searchedSample,\n          RE_TEST: replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode') //RESelectedSample,\n          //RESelectedTest: RESelectedTest2,\n          //RE_TEST: responseData[\"RE_TEST\"]\n\n        };\n        let skipInfo = {};\n\n        if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\n          skipInfo = { ...skipInfo,\n            skip: 0,\n            take: inputParam.take\n          };\n        }\n\n        if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\n          skipInfo = { ...skipInfo,\n            testskip: 0,\n            testtake: inputParam.testtake\n          };\n        }\n\n        if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              skip: 0,\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        } else {\n          skipInfo = { ...skipInfo,\n            [dataStateName]: { ...inputData[dataStateName],\n              sort: undefined,\n              filter: undefined\n            }\n          };\n        }\n\n        let respObject = { ...inputParamData.inputData,\n          openModal: false,\n          loadEsign: false,\n          showConfirmAlert: false,\n          //selectedRecord: undefined,\n          loading: false,\n          screenName: inputData.activeTestKey,\n          ...skipInfo\n        };\n\n        if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [searchedSample[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\n          const paramList = inputParam.postParamList[0];\n          const inputParameter = { ...paramList.fecthInputObject.fecthInputObject,\n            fetchUrl: paramList.fetchUrl,\n            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\n            ntype: 2,\n            nflag: 2\n          };\n          respObject = { ...respObject,\n            masterData: { ...masterData,\n              RESelectedSample: [RE_SAMPLE[0]]\n            }\n          };\n          dispatch(fetchSelectedData({ ...inputParameter,\n            checkBoxOperation: 3\n          }, respObject));\n        } else {\n          respObject = { ...respObject,\n            masterData\n          };\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              loading: false\n            }\n          });\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n} //Compare two array and return the first array which is available in second array\n\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\n  const filterArray = firstArray.filter(function (x) {\n    return secondArray.some(function (y) {\n      return x[PrimaryKey] === y[PrimaryKey];\n    });\n  });\n  return filterArray;\n}\n\nfunction fetchSelectedData(inputParam, respObject) {\n  return dispatch => {\n    rsapi.post(inputParam.fetchUrl, { ...inputParam\n    }).then(response => {\n      const masterData = { ...respObject.masterData,\n        ...response.data,\n        RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\n      }; //sortData(masterData);\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: { ...respObject,\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n\nexport function testMethodSourceEdit(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.test.ntransactiontestcode,\n      ntestgrouptestcode: inputData.test.ntestgrouptestcode,\n      ntestcode: inputData.test.ntestcode,\n      ncontrolcode: inputData.editSourceMethodId,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData).then(response => {\n      const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\", \"ssourcename\", undefined, undefined, undefined);\n      const TagListSource = TagSource.get(\"OptionList\");\n      const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\", \"smethodname\", undefined, undefined, undefined);\n      const TagListMethod = TagMethod.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            SourceData: TagListSource,\n            MethodData: TagListMethod,\n            RESelectedSubSample: inputData.masterData.RESelectedSubSample\n          },\n          selectedRecord: {\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            stestsynonym: inputData.test.jsondata.stestsynonym,\n            nsourcecode: response.data.SourceDataValue,\n            nmethodcode: response.data.MethodDataValue\n          },\n          loading: false,\n          screenName: \"IDS_TESTMETHODSOURCE\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.editSourceMethodId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateParameterComments(inputData, masterData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: inputData.ntransactiontestcode,\n      ntransactionresultcode: inputData.ntransactionresultcode,\n      sresultcomment: inputData.sresultcomment,\n      transactiontestcode: inputData.transactiontestcode,\n      userinfo: inputData.userinfo,\n      nregtypecode: inputData.nregtypecode,\n      nregsubtypecode: inputData.nregsubtypecode,\n      ncontrolcode: inputData.ncontrolcode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          loading: false,\n          loadEsign: false,\n          screenName: \"IDS_RESULT\",\n          openModal: false,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode //ncontrolcode:inputData.editSourceMethodId\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREInstrument(inputData) {\n  return function (dispatch) {\n    let urlArray = [];\n    const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\n      userinfo: inputData.userInfo\n    });\n    const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n    const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n      userinfo: inputData.userInfo\n    });\n    urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory\n          },\n          selectedId: null,\n          selectedRecord: {\n            sarno: inputData.test.sarno,\n            ssamplearno: inputData.test.ssamplearno,\n            stestsynonym: inputData.test.stestsynonym,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\n            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\n            npreregno: inputData.test.npreregno,\n            //dtodate: new Date(response[2].data),//new Date(),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            //dfromdate: new Date(response[2].data),//new Date(),\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),\n            //new Date(),\n            ntzfromdate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            },\n            ntztodate: {\n              \"value\": inputData.userInfo.ntimezonecode,\n              \"label\": inputData.userInfo.stimezoneid\n            }\n          },\n          timeZoneList: TagListTimeZone || [],\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function addREMaterial(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", {\n      userinfo: inputData.userInfo,\n      nsectioncode: inputData.test.nsectioncode\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: {\n            sarno: inputData.test.sarno,\n            ssamplearno: inputData.test.ssamplearno,\n            stestsynonym: inputData.test.stestsynonym,\n            nsectioncode: inputData.test.nsectioncode,\n            ssectionname: inputData.test.ssectionname,\n            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\n            npreregno: inputData.test.npreregno,\n            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\"),\n            nmaterialcatcode: materialCatMap.get(\"DefaultValue\"),\n            nmaterialcode: materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\n            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length > 0 ? materialInventoryMap.get(\"OptionList\")[0] : \"\",\n            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname : \"\",\n            savailablequantity: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity : \"\"\n          },\n          materialType,\n          materialCat,\n          material,\n          materialInventory,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedMaterailId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialCategoryByType(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\n      nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {}\n          },\n          materialCat,\n          material,\n          materialInventory,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialByCategory(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\n      nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\n      nmaterialcatcode: inputData.selectedRecord.nmaterialcatcode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            nmaterialcode: materialMap.get(\"OptionList\")[0],\n            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\n            savailablequantity: response.data.MaterialInventory[0].savailablequatity,\n            sunitname: response.data.MaterialInventory[0].sunitname\n          },\n          material,\n          materialInventory,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getREMaterialInvertoryByMaterial(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\n      nmaterialcode: inputData.selectedRecord.nmaterialcode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            sunitname: response.data.MaterialInventory[0].sunitname,\n            savailablequantity: response.data.MaterialInventory[0].savailablequatity\n          },\n          materialInventory,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          //operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAvailableMaterialQuantity(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\n      nmaterialinventorycode: inputData.selectedRecord.nmaterialinventorycode.value,\n      nsectioncode: inputData.selectedRecord.nsectioncode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: null,\n          selectedRecord: { ...inputData.selectedRecord,\n            savailablequantity: response.data.inventory.savailablequatity,\n            sunitname: response.data.inventory.jsondata.Unit\n          },\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          //operation: \"create\",\n          //activeTestKey: \"IDS_INSTRUMENT\",\n          ncontrolcode: inputData.addResultUsedInstrumentId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function deleteInstrumentRecord(inputData) {\n//     return function (dispatch) {\n//         let inputParamData = {\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\n//             userinfo: inputData.userInfo,\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n//         }\n//         dispatch(initRequest(true));\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\n//             .then(response => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         masterData: {\n//                             ...inputData.masterData,\n//                             ...response.data\n//                         },\n//                         loading: false,\n//                         operation: \"delete\",\n//                         openModal: false,\n//                         loadEsign: false\n//                     }\n//                 })\n//             })\n//             .catch(error => {\n//                 dispatch({\n//                     type: DEFAULT_RETURN,\n//                     payload: {\n//                         loading: false\n//                     }\n//                 })\n//                 if (error.response.status === 500) {\n//                     toast.error(error.message);\n//                 } else {\n//                     toast.warn(error.response.data);\n//                 }\n//             })\n//     }\n// }\n\nexport function fetchInstrumentRecord(inputData) {\n  return function (dispatch) {\n    let urlArray = []; //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\n\n    const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\n      nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n      userinfo: inputData.userInfo\n    });\n    const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\n    urlArray = [timeZoneService, getResultUsedInstrument];\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n      const TagListInstrument = TagInstrument.get(\"OptionList\");\n      const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", undefined, undefined, undefined);\n      const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\n      const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, undefined);\n      const TagListTimeZone = TagTimeZone.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            Instrument: TagListInstrument,\n            InstrumentCategory: TagListInstrumentCategory,\n            // ...response[0].data,\n            ...response[1].data //...response[2].data\n\n          },\n          selectedId: inputData.editRow.nresultusedinstrumentcode,\n          selectedRecord: {\n            stestsynonym: inputData.editRow.stestsynonym,\n            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\n            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n            ninstrumentcatcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\n            },\n            ninstrumentcode: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\n              \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\n            },\n            ntzfromdate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\n            },\n            ntztodate: {\n              \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\n              \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\n            },\n            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\n            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\n            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\n            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\n          },\n          timeZoneList: TagListTimeZone || [],\n          ncontrolcode: inputData.ncontrolCode,\n          loading: false,\n          screenName: \"IDS_INSTRUMENT\",\n          openModal: true,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchMaterialRecord(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedMaterial\", {\n      nresultusedmaterialcode: inputData.editRow.nresultusedmaterialcode,\n      userinfo: inputData.userInfo\n    }).then(response => {\n      const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n      const materialType = materialTypeMap.get(\"OptionList\");\n      const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      const materialCat = materialCatMap.get(\"OptionList\");\n      const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      const material = materialMap.get(\"OptionList\");\n      const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\n      const materialInventory = materialInventoryMap.get(\"OptionList\");\n      const EditResultUsedMaterial = response.data.EditResultUsedMaterial[0];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedId: inputData.editRow.nresultusedinstrumentcode,\n          materialType,\n          materialCat,\n          material,\n          materialInventory,\n          selectedRecord: { ...EditResultUsedMaterial,\n            stestsynonym: inputData.editRow.jsondata.stestsynonym,\n            npreregno: EditResultUsedMaterial.npreregno,\n            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\n            nmaterialtypecode: {\n              label: EditResultUsedMaterial.jsondata.smaterialtypename,\n              value: EditResultUsedMaterial.nmaterialtypecode\n            },\n            nmaterialcatcode: {\n              \"value\": EditResultUsedMaterial.nmaterialcategorycode,\n              \"label\": EditResultUsedMaterial.jsondata.smaterialcatname\n            },\n            nmaterialcode: {\n              \"value\": EditResultUsedMaterial.nmaterialcode,\n              \"label\": EditResultUsedMaterial.jsondata.smaterialname\n            },\n            nmaterialinventorycode: {\n              \"value\": EditResultUsedMaterial.ninventorycode,\n              \"label\": EditResultUsedMaterial.jsondata.sinventoryid\n            },\n            ntztodate: {\n              \"value\": EditResultUsedMaterial.ntztodate,\n              \"label\": EditResultUsedMaterial.stztodate\n            },\n            susedquantity: EditResultUsedMaterial.jsondata.nqtyused,\n            scarriergas: EditResultUsedMaterial.jsondata.scarriergas,\n            smobilephase: EditResultUsedMaterial.jsondata.smobilephase,\n            sremarks: EditResultUsedMaterial.jsondata.sremarks,\n            savailablequantity: response.data.inventory.savailablequatity,\n            sunitname: response.data.inventory.sunitname\n          },\n          ncontrolcode: inputData.ncontrolCode,\n          loading: false,\n          screenName: \"IDS_MATERIAL\",\n          openModal: true,\n          operation: \"update\"\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function deleteTaskRecord(inputData, userInfo) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\n      userinfo: inputData.userInfo,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n      nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\n      nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          loading: false,\n          operation: \"delete\",\n          openModal: false,\n          loadEsign: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchTaskRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\n          selectedRecord: {\n            npreregno: response.data.EditResultUsedTasks[0].npreregno,\n            stestsynonym: inputData.editRow.stestsynonym,\n            sanalysistime: response.data.EditResultUsedTasks[0].jsondata.sanalysistime,\n            smisctime: response.data.EditResultUsedTasks[0].jsondata.smisctime,\n            spreanalysistime: response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,\n            spreparationtime: response.data.EditResultUsedTasks[0].jsondata.spreparationtime,\n            scomments: response.data.EditResultUsedTasks[0].jsondata.scomments,\n            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\n          },\n          loading: false,\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          operation: \"update\",\n          ncontrolcode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function parameterRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n      ncontrolcode: inputData.controlcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData\n          },\n          selectedId: response.data.ParameterComments.ntransactionresultcode,\n          selectedRecord: {\n            sresultcomment: response.data.ParameterComments.sresultcomment,\n            stestsynonym: inputData.selectedRecord.stestsynonym,\n            sparametersynonym: inputData.selectedRecord.sparametersynonym,\n            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\n            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n            ncontrolcode: inputData.controlcode\n          },\n          loading: false,\n          screenName: \"IDS_PARAMETERCOMMENTS\",\n          openModal: true,\n          operation: \"updateParameterComments\",\n          ncontrolcode: inputData.controlcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function checkListRecord(inputData) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n      napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\n      nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\n      ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\n      ncontrolcode: inputData.ncontrolcode,\n      userinfo: inputData.userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData).then(response => {\n      let selectedRecord = {};\n      let lsteditedQB = [];\n      selectedRecord = {\n        sarno: inputData.selectedRecord.sarno,\n        ssamplearno: inputData.selectedRecord.ssamplearno,\n        npreregno: inputData.selectedRecord.npreregno,\n        stestsynonym: inputData.selectedRecord.stestsynonym,\n        sparametersynonym: inputData.selectedRecord.sparametersynonym,\n        ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\n        ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\n        transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\n      };\n      response.data.ChecklistData.map(checklist => {\n        selectedRecord[checklist.nchecklistversionqbcode] = {\n          nchecklistqbcode: checklist.nchecklistqbcode,\n          nchecklistversioncode: checklist.nchecklistversioncode,\n          nchecklistversionqbcode: checklist.nchecklistversionqbcode,\n          sdefaultvalue: checklist.sdefaultvalue,\n          sarno: inputData.selectedRecord.sarno,\n          ssamplearno: inputData.selectedRecord.ssamplearno,\n          stestsynonym: inputData.selectedRecord.stestsynonym,\n          sparametersynonym: inputData.selectedRecord.sparametersynonym\n        };\n        lsteditedQB.push(checklist.nchecklistversionqbcode);\n        return null;\n      });\n      response.data.ChecklistData.map(checklist => {\n        selectedRecord['jsondata'] = { ...selectedRecord['jsondata'],\n          [checklist.nchecklistversionqbcode]: checklist.sdefaultvalue\n        };\n        return null;\n      });\n      selectedRecord[\"editedQB\"] = lsteditedQB;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data\n          },\n          selectedId: response.data.selectedId,\n          selectedRecord: selectedRecord,\n          loading: false,\n          screenName: \"IDS_CHECKLISTRESULT\",\n          openTemplateModal: true,\n          needSaveButton: inputData.needSaveButton,\n          operation: \"create\",\n          ncontrolCode: inputData.ncontrolcode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\n  return function (dispatch) {\n    let listResultCheckList = [];\n\n    if (selectedRecord && selectedRecord.jsondata) {\n      selectedRecord.editedQB.map(qbcode => listResultCheckList.push(selectedRecord[qbcode]));\n      let inputParamData = {\n        ntransactionresultcode: selectedRecord.ntransactionresultcode,\n        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n        transactiontestcode: selectedRecord.transactiontestcode,\n        npreregno: selectedRecord.npreregno,\n        ResultCheckList: {\n          nchecklistversioncode: listResultCheckList[0].nchecklistversioncode,\n          nchecklistqbcode: listResultCheckList[0].nchecklistqbcode,\n          jsondata: selectedRecord.jsondata,\n          npreregno: selectedRecord.npreregno,\n          ntransactionresultcode: selectedRecord.ntransactionresultcode\n        },\n        //jsondata: selectedRecord.jsondata,\n        userinfo: userInfo,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ncontrolcode: -1\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord: {},\n            templateData: undefined,\n            openTemplateModal: false,\n            openModal: false,\n            loading: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: false,\n          selectedRecord: {},\n          loading: false,\n          loadEsign: false\n        }\n      });\n    }\n  };\n}\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\n  if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\n    return function (dispatch) {\n      let inputParamData = {\n        userinfo: inputData.userinfo,\n        ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\n        ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\n        npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ncontrolcode: inputData.ncontrolcode\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...inputData.masterData,\n              ...response.data,\n              TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\n              RESelectedSubSample: inputData.masterData.RESelectedSubSample\n            },\n            loading: false,\n            activeTestKey: \"IDS_RESULTS\",\n            openModal: false,\n            loadEsign: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            openModal: false,\n            loadEsign: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    };\n  } else {\n    toast.warn(intl.formatMessage({\n      id: \"IDS_SELECTTESTTOCOMPLETE\"\n    }));\n  }\n}\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\n  return function (dispatch) {\n    let inputParamData = {\n      ntransactiontestcode: parameterData.ntransactiontestcode,\n      nformulacode: parameterData.ntestgrouptestformulacode,\n      userinfo: userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData).then(response => {\n      const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\n        return {\n          \"idsName\": \"IDS_FILLALLFIELDS\",\n          \"dataField\": index,\n          \"mandatory\": true\n        };\n      });\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data\n          },\n          selectedRecord: { ...selectedRecord,\n            parameterData: parameterData,\n            sformulacalculationdetail: response.data.query,\n            formulainput: response.data.Formula,\n            resultindex: index,\n            selectedForumulaInput: []\n          },\n          validateFormulaMandyFields,\n          loading: false,\n          screenName: \"IDS_RESULTFORMULA\",\n          showFormula: true,\n          operation: \"validate\",\n          showValidate: true\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function calculateFormula(inputDataValue) {\n  return function (dispatch) {\n    const inputData = {\n      ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\n      sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\n      nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\n      userinfo: inputDataValue.userInfo,\n      dynamicformulafields: inputDataValue.lstDynamicFields\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"testmaster/calculateFormula\", inputData).then(response => {\n      // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\n      // {\n      //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\n      //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\n      //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\n      //     sresult: response.data.Result,\n      //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\n      //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\n      //     parameter: inputDataValue.selectedRecord.parameterData\n      // }\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\n      inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\n      inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\n        ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputDataValue.masterData //selectedResultData: inputDataValue.selectedResultData,\n            //selectedResultGrade: inputDataValue.selectedResultGrade,\n            //ResultParameter: inputDataValue.ResultParameter\n\n          },\n          selectedRecord: {\n            selectedResultGrade: inputDataValue.selectedResultGrade,\n            ResultParameter: inputDataValue.ResultParameter\n          },\n          loading: false,\n          screenName: \"IDS_RESULTENTRY\",\n          showFormula: false,\n          operation: \"update\",\n          showValidate: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        //toast.warn(error.response.data);\n        toast.warn(error.response.data[\"Result\"]);\n      }\n    });\n  };\n}\nexport function getREFilterTestData(inputData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputData.masterData,\n            ...response.data,\n            //defaultFilterStatus: inputData.defaultFilterStatus,\n            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,\n            //inputData.defaultRegistrationSubType,\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\n            DesignTemplateMappingValue: inputData.DesignTemplateMappingValue\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function updateTestMethodSource(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\n          },\n          loading: false,\n          openModal: false,\n          loadEsign: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function resultImportFile(inputData, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData\n          },\n          loading: false,\n          openModal: false // activeTestKey: \"IDS_RESULTS\"\n\n        }\n      });\n\n      if (response.data.returnStatus && response.data.returnStatus !== \"\") {\n        toast.info(response.data.returnStatus);\n      } else {\n        toast.warn(response.data.returnStatus);\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function validateEsignCredentialComplete(inputParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = \"performaction\";\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] && inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n        }\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\n          dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\n          dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\n          dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\n          dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\n          dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]));\n        } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\n          dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]));\n        } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\n          let {\n            selectedRecord,\n            userInfo,\n            nregtypecode,\n            nregsubtypecode\n          } = inputParam[\"screenData\"];\n          delete selectedRecord.esignpassword;\n          delete selectedRecord.esigncomments;\n          delete selectedRecord.agree;\n          delete inputParam.inputData.password;\n          userInfo = inputParam.inputData.userinfo;\n          dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode));\n        }\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getMeanCalculationTestParameter(meanParam) {\n  return dispatch => {\n    dispatch(initRequest(true));\n    const inputData = {\n      npreregno: meanParam.selectedRecord.npreregno,\n      ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\n      userinfo: meanParam.userInfo\n    };\n    return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData).then(response => {\n      const list = response.data || []; // const optionList = [];\n      // list.map(item=>{\n      //     console.log(\"item:\", item);\n      //         optionList.push({item:item, \n      //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \n      //                         value:item.ntransactionresultcode})\n      //     })\n      // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          openModal: true,\n          meanTestParameterList: list,\n          screenName: \"IDS_MEANPARAMETER\",\n          ncontrolcode: meanParam.ncontrolCode,\n          selectedTestParameterMean: meanParam.selectedRecord\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\n/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ResultEntryAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","initRequest","intl","Axios","numericGrade","constructOptionList","fillRecordBasedOnCheckBoxSelection","filterRecordBasedOnTwoArrays","getRecordBasedOnPrimaryKeyName","getSameRecordFromTwoArrays","replaceUpdatedObject","sortData","updatedObjectWithNewElement","rearrangeDateFormat","filterRecordBasedOnPrimaryKeyName","reArrangeArrays","transactionStatus","getsubSampleREDetail","inputData","isServiceRequired","dispatch","inputParamData","ntype","nflag","nsampletypecode","nregtypecode","nregsubtypecode","npreregno","ntranscode","String","ntransactionstatus","ntransactiontestcode","userinfo","ntestcode","napprovalversioncode","fromdate","todate","activeTestKey","activeSampleKey","nneedsubsample","masterData","ndesigntemplatemappingcode","activeName","dataStateName","post","checkBoxOperation","then","response","data","oldSelectedTest","RESelectedTest","childTabsKey","removeElementFromArray","RESelectedSubSample","RE_SUBSAMPLE","RE_TEST","length","RESelectedSample","searchSubSampleRef","undefined","current","value","searchTestRef","testskip","testtake","bool","skipInfo","TestParameters","ResultUsedInstrument","ResultUsedMaterial","ResultUsedTasks","RegistrationTestAttachment","ResultChangeHistory","RegistrationTestComment","wholeTestList","map","b","test","index","includes","splice","keepOld","list","dbData","reduce","unique","item","skip","sort","filter","type","payload","loading","take","catch","error","status","message","warn","oldSelectedSubSample","subsampletake","subsampleskip","TestSelected","subSampleSelected","isGrandChildGetRequired","toString","filterSelectedSubSample","ntransactionsamplecode","subsample","join","getTestChildTabREDetail","getTestREDetail","subsamplecheck","SubSampleSelected","wholeSubSample","forEach","selectedTest","selectedSubSample1","x","showFilter","activeSampleTab","responseData","testList","screenName","getSampleChildTabREDetail","url","getRERegistrationType","getRERegistrationSubType","defaultFilterStatus","defaultRegistrationType","getREApprovalConfigVersion","defaultRegistrationSubType","getREFilterStatus","defaultjobstatus","getREJobStatus","defaultApprovalConfigVersion","getResultEntryDetails","refs","searchSampleRef","realFromDate","realToDate","showTest","showSample","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","samplePrintHistoryDataState","sampleHistoryDataState","resultGetModule","userInfo","ncontrolcode","TestList","acceptTestList","Object","values","selectedResultGrade","paremterResultcode","parameterResults","ResultParameter","predefDefaultFlag","param","ngradecode","ntransactionresultcode","PredefinedValues","predefinedvalue","ndefaultstatus","YES","get","sresult","spredefinedname","sfinal","editable","selectedRecord","openModal","operation","formatMessage","id","completeTest","inputParam","acceptList","completeResultId","testChildGetREParam","napprovalconfigcode","transactiontestcode","RE_SAMPLE","RESelectedTest1","RESelectedTest2","searchedSample","respObject","loadEsign","showConfirmAlert","paramList","postParamList","inputParameter","fecthInputObject","fetchUrl","primaryKeyField","fetchSelectedData","testStart","compareTwoArray","firstArray","secondArray","PrimaryKey","filterArray","some","y","testMethodSourceEdit","ntestgrouptestcode","editSourceMethodId","TagSource","SourceData","TagListSource","TagMethod","MethodData","TagListMethod","stestsynonym","jsondata","nsourcecode","SourceDataValue","nmethodcode","MethodDataValue","updateParameterComments","sresultcomment","addREInstrument","urlArray","resultusedinstrument","timeZoneService","UTCtimeZoneService","all","TagInstrument","Instrument","TagListInstrument","TagInsturmentcategory","InstrumentCategory","TagListInstrumentCategory","TagTimeZone","TagListTimeZone","selectedId","sarno","ssamplearno","ninstrumentcatcode","ninstrumentcode","dtodate","dfromdate","ntzfromdate","ntimezonecode","stimezoneid","ntztodate","timeZoneList","addResultUsedInstrumentId","addREMaterial","nsectioncode","materialTypeMap","MaterialType","materialType","materialCatMap","MaterialCategory","materialCat","materialMap","Material","material","materialInventoryMap","MaterialInventory","materialInventory","ssectionname","nmaterialtypecode","nmaterialcatcode","nmaterialcode","nmaterialinventorycode","sunitname","savailablequantity","savailablequatity","addResultUsedMaterailId","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","getAvailableMaterialQuantity","inventory","Unit","deleteInstrumentRecord","nresultusedinstrumentcode","fetchInstrumentRecord","editRow","getResultUsedInstrument","EditResultUsedInstrument","sinstrumentcatname","sinstrumentid","stzfromdate","stztodate","sfromdate","stodate","ncontrolCode","fetchMaterialRecord","nresultusedmaterialcode","EditResultUsedMaterial","label","smaterialtypename","nmaterialcategorycode","smaterialcatname","smaterialname","ninventorycode","sinventoryid","susedquantity","nqtyused","scarriergas","smobilephase","sremarks","deleteTaskRecord","nresultusedtaskcode","fetchTaskRecord","EditResultUsedTasks","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","parameterRecord","controlcode","ParameterComments","sparametersynonym","checkListRecord","napprovalparametercode","nchecklistversioncode","lsteditedQB","ChecklistData","checklist","nchecklistversionqbcode","nchecklistqbcode","sdefaultvalue","push","openTemplateModal","needSaveButton","onSaveCheckList","listResultCheckList","editedQB","qbcode","ResultCheckList","templateData","defaultTest","preregno","getFormula","parameterData","nformulacode","ntestgrouptestformulacode","validateFormulaMandyFields","DynamicFormulaFields","sformulacalculationdetail","query","formulainput","Formula","resultindex","selectedForumulaInput","showFormula","showValidate","calculateFormula","inputDataValue","sformulacalculationcode","dynamicformulafields","lstDynamicFields","Result","parseInt","getREFilterTestData","DesignTemplateMappingValue","updateTestMethodSource","resultImportFile","returnStatus","info","validateEsignCredentialComplete","methodUrl","toLowerCase","esignpassword","esigncomments","agree","password","getMeanCalculationTestParameter","meanParam","meanTestParameterList","selectedTestParameterMean"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport Axios from 'axios';\r\nimport {\r\n    numericGrade\r\n} from '../pages/ResultEntryBySample/ResultEntryValidation';\r\nimport {\r\n    constructOptionList,\r\n    fillRecordBasedOnCheckBoxSelection,\r\n    filterRecordBasedOnTwoArrays,\r\n    getRecordBasedOnPrimaryKeyName,\r\n    getSameRecordFromTwoArrays,\r\n    replaceUpdatedObject,\r\n    sortData,\r\n    updatedObjectWithNewElement, rearrangeDateFormat,filterRecordBasedOnPrimaryKeyName, reArrangeArrays\r\n} from '../components/CommonScript';\r\nimport {\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\n\r\nexport function getsubSampleREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntype: 2,\r\n            nflag: inputData.nflag || 2,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntranscode: String(inputData.ntransactionstatus),\r\n            ntransactiontestcode: 0,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            napprovalversioncode: inputData.napprovalversioncode,\r\n            fromdate: inputData.fromdate,\r\n            todate: inputData.todate,\r\n            activeTestKey: inputData.activeTestKey,\r\n            activeSampleKey: inputData.activeSampleKey,\r\n            nneedsubsample: inputData.masterData.nneedsubsample,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData, checkBoxOperation: inputData.checkBoxOperation })\r\n                .then(response => {\r\n                    // if (response.data.DynamicGetSamples) {\r\n                    //     sortData(response.data.DynamicGetSamples, \"\", \"\");\r\n                    // }\r\n                    // if (response.data.DynamicGetTests) {\r\n                    //     sortData(response.data.DynamicGetTests, \"descending\", \"npreregno\");\r\n                    // }\r\n                    sortData(response.data);\r\n                    // let responseData = { ...response.data, RESelectedSubSample: inputData.RESelectedSubSample }\r\n                    // responseData = sortData(responseData)\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let RESelectedSubSample = inputData.checkBoxOperation === 3 || inputData.checkBoxOperation === 7 ? response.data.RESelectedSubSample : inputData.masterData.RESelectedSubSample\r\n                    RESelectedSubSample = inputData.masterData.nneedsubsample ? RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE;\r\n                    \r\n                    \r\n                    \r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.RESelectedSample,\r\n                        RESelectedSubSample\r\n                    }\r\n                    // if (inputData.searchSampleRef !== undefined && inputData.searchSampleRef.current !== null) {\r\n                    //     inputData.searchSampleRef.current.value = \"\";\r\n                    //     masterData['searchedSample'] = undefined\r\n                    // }\r\n                    if (inputData.searchSubSampleRef !== undefined && inputData.searchSubSampleRef.current !== null) {\r\n                        inputData.searchSubSampleRef.current.value = \"\";\r\n                        masterData['searchedSubSample'] = undefined\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTest'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                     }\r\n                    // else if(inputData.checkBoxOperation === 7){\r\n\r\n                    //     getSameRecordFromTwoArrays( inputData.masterData.RE_SAMPLE, responseData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n\r\n                    //     let list = []\r\n                    //     switch (inputData.activeTestKey) {\r\n                    //         case \"IDS_RESULTS\":\r\n                    //             list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                    //             TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"TestParameters\"\r\n                    //             dataStateName = \"resultDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_INSTRUMENT\":\r\n                    //             list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                    //             ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"ResultUsedInstrument\"\r\n                    //             dataStateName = \"instrumentDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_MATERIAL\":\r\n                    //             list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                    //             ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"ResultUsedMaterial\"\r\n                    //             dataStateName = \"materialDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_TASK\":\r\n                    //             list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                    //             list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                    //             ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"ResultUsedTasks\"\r\n                    //             dataStateName = \"taskDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_TESTATTACHMENTS\":\r\n                    //             list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                    //             RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"RegistrationTestAttachment\"\r\n                    //             break;\r\n                    //         case \"IDS_RESULTCHANGEHISTORY\":\r\n                    //             list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                    //             ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"ResultChangeHistory\"\r\n                    //             dataStateName = \"resultChangeDataState\"\r\n                    //             break;\r\n                    //         case \"IDS_TESTCOMMENTS\":\r\n                    //             list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                    //             RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"RegistrationTestComment\"\r\n                    //             dataStateName = \"testCommentDataState\"\r\n                    //             break;\r\n                    //         default:\r\n                    //             list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                    //             TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                    //             activeName = \"TestParameters\"\r\n                    //             dataStateName = \"resultDataState\"\r\n                    //             break;\r\n                    \r\n                    //     }\r\n                    \r\n                    // } \r\n                    else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            skip: undefined,\r\n                            take: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            //let isGrandChildGetRequired = false;\r\n            let oldSelectedSubSample = inputData.masterData.RESelectedSubSample\r\n            let { subsampletake, subsampleskip } = inputData;\r\n            let skipInfo = {};\r\n            let TestSelected = [];\r\n            let subSampleSelected = [];\r\n            if(inputData[\"statusNone\"])\r\n            {\r\n             TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n             subSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n            else\r\n            {\r\n                TestSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                subSampleSelected = filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n            }\r\n          \r\n            let isGrandChildGetRequired = false;\r\n            if (TestSelected.length > 0) {\r\n                isGrandChildGetRequired = false;\r\n            } else {\r\n                isGrandChildGetRequired = true;\r\n            }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSample, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSample = inputData.RESelectedSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                    RESelectedSubSample = filterSelectedSubSample.length > 0 ? filterSelectedSubSample : [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampletake, subsampleskip }\r\n                    }\r\n                }\r\n                let ntransactionsamplecode = RESelectedSubSample.map(subsample => subsample.ntransactionsamplecode).join(',');\r\n                let masterData = { ...inputData.masterData, RESelectedSample, RESelectedSubSample, RESelectedTest }\r\n                inputData = {\r\n                    ...inputData,\r\n                    ntransactiontestcode,\r\n                    ntransactionsamplecode,\r\n                    RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey,masterData\r\n                }\r\n                \r\n                if (RESelectedTest.length > 0) {\r\n                    inputData = {\r\n                        ...inputData,\r\n                        childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                        ]\r\n                    }\r\n                    dispatch(getTestChildTabREDetail(inputData, true));\r\n                } else {\r\n                    inputData = {\r\n                        ...inputData,masterData,\r\n                        childTabsKey: [\"RE_TEST\"]\r\n                    }\r\n                    dispatch(getTestREDetail(inputData, true));\r\n                }\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    // RESelectedSample: inputData.RESelectedSample,\r\n                    // RESelectedSubSample: inputData.masterData.nneedsubsample && inputData.masterData.RE_SUBSAMPLE.length > 0 ? inputData.masterData.RESelectedSubSample : inputData.masterData.RE_SUBSAMPLE\r\n                    RESelectedTest: TestSelected ? TestSelected :inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSample: inputData.RESelectedSample,\r\n                    RESelectedSubSample: subSampleSelected ? subSampleSelected : inputData.masterData.RE_SUBSAMPLE.length>0 ? [inputData.masterData.RE_SUBSAMPLE[0]]:[]\r\n\r\n                }\r\n                let subsamplecheck = true;\r\n                if (inputData.masterData.nneedsubsample) {\r\n                    let SubSampleSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedSubSample, inputData.removeElementFromArray[0].npreregno, \"npreregno\");\r\n                    if (SubSampleSelected.length > 0) {\r\n                        let filterSelectedSubSample = getSameRecordFromTwoArrays(oldSelectedSubSample, inputData.masterData.RE_SUBSAMPLE, \"ntransactionsamplecode\");\r\n                        if (filterSelectedSubSample.length === 0) {\r\n                            let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                            oldSelectedSubSample.forEach((test, index) => {\r\n                                if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                    oldSelectedSubSample.splice(index, 1)\r\n                                }\r\n                                return null;\r\n                            })\r\n                            if (oldSelectedSubSample.length === 0 && wholeSubSample.length > 0\r\n                                && masterData.selectedTest.length === 0) {\r\n                                const selectedSubSample1 = [inputData.masterData.RE_SUBSAMPLE[0]];\r\n                                masterData = {\r\n                                    ...masterData,\r\n                                    RESelectedSubSample: selectedSubSample1,\r\n                                    selectedTest: []\r\n                                }\r\n                                inputData = { ...inputData, ...masterData }\r\n                                inputData[\"npreregno\"] = selectedSubSample1.map(x => x.npreregno).join(\",\")\r\n                                inputData[\"ntransactionsamplecode\"] = selectedSubSample1.map(x => x.ntransactionsamplecode).join(\",\")\r\n                                inputData[\"checkBoxOperation\"] = 3\r\n                                inputData[\"childTabsKey\"] = [\"RE_TEST\"]\r\n                                subsamplecheck = false;\r\n                                dispatch(getTestREDetail(inputData, true));\r\n\r\n                            }\r\n                        } else {\r\n                            oldSelectedSubSample = filterSelectedSubSample\r\n                        }\r\n\r\n                    } else {\r\n                        let wholeSubSample = masterData.RE_SUBSAMPLE.map(b => b.ntransactionsamplecode)\r\n                        oldSelectedSubSample.forEach((test, index) => {\r\n                            if (!wholeSubSample.includes(test.ntransactionsamplecode)) {\r\n                                oldSelectedSubSample.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n\r\n                    if (subsamplecheck) {\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedSubSample: oldSelectedSubSample\r\n                        }\r\n                    }\r\n                    if (inputData.masterData.RE_SUBSAMPLE.length <= inputData.subsampleskip) {\r\n                        subsampleskip = 0;\r\n                        skipInfo = { subsampleskip, subsampletake }\r\n                    }\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = inputData.masterData.RE_TEST[0].ntransactiontestcode\r\n                   // ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                //const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters =  keepOld ? inputData[\"statusNone\"] ? getRecordBasedOnPrimaryKeyName (inputData.masterData.TestParameters,inputData.removeElementFromArray[0].npreregno, \"npreregno\"): filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].npreregno, \"npreregno\") : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\") \r\n                \r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSample: inputData.RESelectedSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                            // RESelectedSubSample: inputData.masterData.RE_SUBSAMPLE\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTestREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        let inputParamData = {\r\n            nflag: 3,\r\n            ntype: 3,\r\n            nsampletypecode: inputData.nsampletypecode,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: 0,\r\n            ntranscode: inputData.ntransactionstatus.toString(),\r\n            ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n            userinfo: inputData.userinfo,\r\n            ntestcode: inputData.ntestcode,\r\n            activeTestKey: inputData.activeTestKey,\r\n            ndesigntemplatemappingcode: inputData.ndesigntemplatemappingcode,\r\n            checkBoxOperation: inputData.checkBoxOperation\r\n        }\r\n        // dispatch(initRequest(true));\r\n        // rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n        if (isServiceRequired) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/getResultEntrySubSampleDetails\", inputParamData)\r\n                .then(response => {\r\n                    // let responseData = {\r\n                    //     ...response.data,\r\n                    //     RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                    //     RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    //     // RESelectedTest: inputData.masterData.RESelectedTest\r\n                    // }\r\n                    let responseData = { ...response.data }\r\n                    responseData = sortData(responseData,'descending', 'npreregno')\r\n                    let oldSelectedTest = inputData.masterData.RESelectedTest\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        // ...response.data,\r\n                        RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                        RESelectedSample: inputData.masterData.RESelectedSample,\r\n                        RESelectedSubSample: inputData.RESelectedSubSample || inputData.masterData.RESelectedSubSample,\r\n                    }\r\n                    if (inputData.searchTestRef !== undefined && inputData.searchTestRef.current !== null) {\r\n                        inputData.searchTestRef.current.value = \"\"\r\n                        masterData['searchedTests'] = undefined\r\n                    }\r\n                    let {\r\n                        testskip,\r\n                        testtake\r\n                    } = inputData\r\n                    let bool = false;\r\n                    let skipInfo = {}\r\n                    if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                        testskip = 0;\r\n                        bool = true\r\n                    }\r\n                    if (bool) {\r\n                        skipInfo = {\r\n                            testskip,\r\n                            testtake\r\n                        }\r\n                    }\r\n                    let TestParameters = [];\r\n                    let ResultUsedInstrument = [];\r\n                    let ResultUsedMaterial = [];\r\n                    let ResultUsedTasks = [];\r\n                    let RegistrationTestAttachment = [];\r\n                    let ResultChangeHistory = [];\r\n                    let RegistrationTestComment = [];\r\n\r\n                    if (inputData.checkBoxOperation === 1) {\r\n                        //added by sudharshanan for test select issue while sample click\r\n                        let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                        oldSelectedTest.map((test, index) => {\r\n                            if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                                oldSelectedTest.splice(index, 1)\r\n                            }\r\n                            return null;\r\n                        })\r\n                        let keepOld = false;\r\n                        let ntransactiontestcode;\r\n                        if (oldSelectedTest.length > 0) {\r\n                            keepOld = true\r\n                            masterData = {\r\n                                ...masterData,\r\n                                RESelectedTest: oldSelectedTest\r\n                            }\r\n                        } else {\r\n                            ntransactiontestcode = masterData.RESelectedTest[0].ntransactiontestcode\r\n                        }\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n\r\n                    } else if (inputData.checkBoxOperation === 5) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n                    } else if (inputData.checkBoxOperation === 7) {\r\n                        let list = []\r\n                        let dbData = [];\r\n                        let testList = reArrangeArrays( inputData.masterData.RE_SUBSAMPLE, responseData.RE_TEST, \"ntransactionsamplecode\");\r\n                        masterData = {\r\n                            ...masterData,\r\n                            RESelectedTest:[testList[0]],\r\n                            RE_TEST:testList,\r\n                           // ApprovalParameter:responseData.ApprovalParameter ? responseData.ApprovalParameter.length > 0  ? responseData.ApprovalParameter : masterData.ApprovalParameter: masterData.ApprovalParameter\r\n                        }\r\n\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...response.data.TestParameters];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, testList.length > 0 ? testList[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.ResultUsedInstrument, ...response.data.ResultUsedInstrument];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = [...inputData.masterData.ResultUsedMaterial, ...response.data.ResultUsedMaterial];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                dbData = response.data.ResultUsedTasks || []\r\n                                list = [...inputData.masterData.ResultUsedTasks, ...dbData];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                dbData = response.data.RegistrationTestAttachment || []\r\n                                list = [...inputData.masterData.RegistrationTestAttachment, ...dbData];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                dbData = response.data.ResultChangeHistory || []\r\n                                list = [...inputData.masterData.ResultChangeHistory, ...dbData];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                dbData = response.data.RegistrationTestComment || []\r\n                                list = [...inputData.masterData.RegistrationTestComment, ...dbData];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                            default:\r\n                                dbData = response.data.TestParameters || []\r\n                                list = [...inputData.masterData.TestParameters, ...dbData];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                break;\r\n                        }\r\n\r\n                    }else {\r\n                        let list = []\r\n                        switch (inputData.activeTestKey) {\r\n                            case \"IDS_RESULTS\":\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                            case \"IDS_INSTRUMENT\":\r\n                                list = response.data.ResultUsedInstrument ? sortData(response.data.ResultUsedInstrument, 'descending', 'nresultusedinstrumentcode') : [];\r\n                                ResultUsedInstrument = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedInstrument\"\r\n                                dataStateName = \"instrumentDataState\"\r\n                                break;\r\n                            case \"IDS_MATERIAL\":\r\n                                list = response.data.ResultUsedMaterial ? sortData(response.data.ResultUsedMaterial, 'descending', 'nresultusedmaterialcode') : [];\r\n                                ResultUsedMaterial = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedMaterial\"\r\n                                dataStateName = \"materialDataState\"\r\n                                break;\r\n                            case \"IDS_TASK\":\r\n                                list = response.data.ResultUsedTasks ? sortData(response.data.ResultUsedTasks, 'descending', 'nresultusedtaskcode') : [];\r\n                                list.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\r\n                                ResultUsedTasks = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultUsedTasks\"\r\n                                dataStateName = \"taskDataState\"\r\n                                break;\r\n                            case \"IDS_TESTATTACHMENTS\":\r\n                                list = response.data.RegistrationTestAttachment ? sortData(response.data.RegistrationTestAttachment, 'descending', 'ntestattachmentcode') : [];\r\n                                RegistrationTestAttachment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestAttachment\"\r\n                                break;\r\n                            case \"IDS_RESULTCHANGEHISTORY\":\r\n                                list = response.data.ResultChangeHistory ? sortData(response.data.ResultChangeHistory, 'descending', 'nresultchangehistorycode') : [];\r\n                                ResultChangeHistory = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"ResultChangeHistory\"\r\n                                dataStateName = \"resultChangeDataState\"\r\n                                break;\r\n                            case \"IDS_TESTCOMMENTS\":\r\n                                list = response.data.RegistrationTestComment ? sortData(response.data.RegistrationTestComment, 'descending', 'ntestcommentcode') : [];\r\n                                RegistrationTestComment = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"RegistrationTestComment\"\r\n                                dataStateName = \"testCommentDataState\"\r\n                                break;\r\n                            default:\r\n                                list = response.data.TestParameters ? sortData(response.data.TestParameters, 'ascending', 'ntransactionresultcode') : [];\r\n                                TestParameters = getRecordBasedOnPrimaryKeyName(list, inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode : \"\", \"ntransactiontestcode\")\r\n                                activeName = \"TestParameters\"\r\n                                dataStateName = \"resultDataState\"\r\n                                break;\r\n                        }\r\n                    }\r\n\r\n                    masterData = {\r\n                        ...masterData,\r\n                        // wholeApprovalParameter,\r\n                        TestParameters,\r\n                        // wholeResultUsedInstrument,\r\n                        ResultUsedInstrument,\r\n                        ResultUsedMaterial,\r\n                        // wholeResultUsedTasks,\r\n                        ResultUsedTasks,\r\n                        // wholeRegistrationTestAttachment,\r\n                        RegistrationTestAttachment,\r\n                        // wholeResultChangeHistory,\r\n                        ResultChangeHistory,\r\n                        // wholeRegistrationTestComments,\r\n                        RegistrationTestComment\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            showFilter: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.screenName,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n            let oldSelectedTest = inputData.masterData.RESelectedTest\r\n            //let TestSelected = getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n            // let isGrandChildGetRequired = false;\r\n            // if (TestSelected.length > 0) {\r\n            //     isGrandChildGetRequired = true;\r\n            // } else {\r\n            //     isGrandChildGetRequired = false;\r\n            // }\r\n\r\n            let TestSelected = \r\n            inputData[\"statusNone\"] ?\r\n               getRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\"):\r\n              filterRecordBasedOnPrimaryKeyName(inputData.masterData.RESelectedTest, inputData.removeElementFromArray[0].ntransactionsamplecode, \"ntransactionsamplecode\");\r\n              let isGrandChildGetRequired = false;\r\n              if (TestSelected.length > 0) {\r\n                  isGrandChildGetRequired = false;\r\n              } else {\r\n                  isGrandChildGetRequired = true;\r\n              }\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedSubSample, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactionsamplecode\", inputData.removeElementFromArray);\r\n            if (isGrandChildGetRequired) {\r\n                let ntransactiontestcode = inputData.masterData.RE_TEST.length > 0 ? inputData.masterData.RE_TEST[0].ntransactiontestcode.toString() : \"\";\r\n                let RESelectedSubSample = inputData.RESelectedSubSample;\r\n                let RESelectedTest = inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [];\r\n                // let RESelectedSubSample = inputData.masterData.RE_SUBSAMPLE\r\n\r\n                inputData = {\r\n                    ...inputData,\r\n                    childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedMaterial\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                        \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                    ],\r\n                    ntransactiontestcode,\r\n                    RESelectedSample: inputData.masterData.RESelectedSample,\r\n                    RESelectedTest,\r\n                    RESelectedSubSample,\r\n                    checkBoxOperation: 3,\r\n                    activeTestKey: inputData.activeTestKey\r\n                }\r\n                dispatch(getTestChildTabREDetail(inputData, true));\r\n            } else {\r\n                //added by sudharshanan for test select issue while sample click\r\n                let masterData = {\r\n                    ...inputData.masterData,\r\n                    RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                    RESelectedSubSample: inputData.RESelectedSubSample\r\n                }\r\n                let wholeTestList = masterData.RE_TEST.map(b => b.ntransactiontestcode)\r\n                oldSelectedTest.map((test, index) => {\r\n                    if (!wholeTestList.includes(test.ntransactiontestcode)) {\r\n                        oldSelectedTest.splice(index, 1)\r\n                    }\r\n                    return null;\r\n                })\r\n                let keepOld = false;\r\n                let ntransactiontestcode;\r\n                if (oldSelectedTest.length > 0) {\r\n                    keepOld = true\r\n                    masterData = {\r\n                        ...masterData,\r\n                        RESelectedTest: oldSelectedTest\r\n                    }\r\n                } else {\r\n                    ntransactiontestcode = masterData.RE_TEST[0].ntransactiontestcode\r\n                }\r\n                // const TestParameters = keepOld ? inputData.masterData.TestParameters : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,\r\n                //     ntransactiontestcode, \"ntransactiontestcode\");\r\n                const TestParameters = keepOld ? \r\n                inputData[\"statusNone\"] ?\r\n                getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode'):\r\n                filterRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters,inputData.removeElementFromArray[0].ntransactionsamplecode,'ntransactionsamplecode') : getRecordBasedOnPrimaryKeyName(inputData.masterData.TestParameters, ntransactiontestcode, \"ntransactiontestcode\")\r\n\r\n                const ResultUsedInstrument = keepOld ? inputData.masterData.ResultUsedInstrument : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedInstrument || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedMaterial = keepOld ? inputData.masterData.ResultUsedMaterial : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedMaterial || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultUsedTasks = keepOld ? inputData.masterData.ResultUsedTasks : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultUsedTasks || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestAttachment = keepOld ? inputData.masterData.RegistrationTestAttachment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestAttachment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const RegistrationTestComment = keepOld ? inputData.masterData.RegistrationTestComment : getRecordBasedOnPrimaryKeyName(inputData.masterData.RegistrationTestComment || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                const ResultChangeHistory = keepOld ? inputData.masterData.ResultChangeHistory : getRecordBasedOnPrimaryKeyName(inputData.masterData.ResultChangeHistory || [],\r\n                    ntransactiontestcode, \"ntransactiontestcode\");\r\n                let { testskip, testtake } = inputData\r\n                let bool = false;\r\n                let skipInfo = {}\r\n                if (inputData.masterData.RE_TEST.length <= inputData.testskip) {\r\n                    testskip = 0;\r\n                    bool = true\r\n                }\r\n                if (bool) {\r\n                    skipInfo = {\r\n                        testskip,\r\n                        testtake\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RESelectedSubSample: inputData.RESelectedSubSample,\r\n                            // selectedPreregno: inputData.npreregno,\r\n                            // RESelectedTest: inputData.masterData.searchedTest && inputData.masterData.searchedTest.length > 0 ? [inputData.masterData.\r\n                            //     searchedTest[0]\r\n                            // ] : inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.\r\n                            //     RE_TEST[0]\r\n                            // ] : [],\r\n                            // RESelectedTest: inputData.masterData.RE_TEST.length > 0 ? [inputData.masterData.RE_TEST[0]] : [],\r\n                            TestParameters,\r\n                            ResultUsedInstrument,\r\n                            ResultUsedMaterial,\r\n                            ResultUsedTasks,\r\n                            RegistrationTestAttachment,\r\n                            RegistrationTestComment,\r\n                            ResultChangeHistory,\r\n                        },\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        activeSampleTab: inputData.activeSampleTab,\r\n                        activeTestKey: inputData.activeTestKey,\r\n                        ...skipInfo,\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport function getSampleChildTabREDetail(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let url = \"\"\r\n        switch (inputData.activeSampleKey) {\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n           case \"IDS_SAMPLECOMMENTS\":\r\n                    url = \"comments/getSampleComment\"\r\n                    break;\r\n            default:\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(url, inputParamData)\r\n            .then(response => {\r\n                let responseData = {\r\n                    ...response.data\r\n                }\r\n                //responseData = sortData(responseData)\r\n                fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            RESelectedSample: inputData.RESelectedSample\r\n                        },\r\n                        loading: false,\r\n                        activeSampleKey: inputData.activeSampleKey,\r\n                        screenName: inputData.screenName\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getTestChildTabREDetail(inputData, isServiceRequired) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\"),\r\n            npreregno: inputData.npreregno,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let activeName = \"\";\r\n        let dataStateName = \"\";\r\n        // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n        //     documentDataState, testCommentDataState } = inputData\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (inputData.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                activeName = \"ResultUsedInstrument\"\r\n                dataStateName = \"instrumentDataState\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\";\r\n                activeName = \"ResultUsedMaterial\"\r\n                dataStateName = \"materialDataState\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                activeName = \"ResultUsedTasks\"\r\n                dataStateName = \"taskDataState\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                activeName = \"RegistrationTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                activeName = \"RegistrationTestComment\"\r\n                dataStateName = \"testCommentDataState\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"documentDataState\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                activeName = \"ResultChangeHistory\"\r\n                dataStateName = \"resultChangeDataState\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                activeName = \"\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                activeName = \"TestParameters\"\r\n                dataStateName = \"resultDataState\"\r\n                break;\r\n        }\r\n        dispatch(initRequest(true));\r\n        if (isServiceRequired) {\r\n            rsapi.post(url, inputParamData)\r\n                .then(response => {\r\n                    sortData(response.data,'ascending','ntransactiontestcode');\r\n                    let responseData = {\r\n                        ...response.data,\r\n                        RESelectedSample: inputData.RESelectedSample || inputData.masterData.RESelectedSample,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    let skipInfo = {};\r\n                    //responseData = sortData(responseData)\r\n                    fillRecordBasedOnCheckBoxSelection(inputData.masterData, responseData, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RESelectedTest: inputData.RESelectedTest\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false,\r\n                            activeTestKey: inputData.activeTestKey,\r\n                            screenName: inputData.activeTestKey,\r\n                            testskip: undefined,\r\n                            testtake: undefined,\r\n                            ...skipInfo\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            //fillRecordBasedOnCheckBoxSelection(inputData.masterData, response.data, inputData.childTabsKey, inputData.checkBoxOperation, \"npreregno\", inputData.removeElementFromArray);\r\n            fillRecordBasedOnCheckBoxSelection(inputData.masterData, inputData.RESelectedTest, inputData.childTabsKey, inputData.checkBoxOperation, \"ntransactiontestcode\", inputData.removeElementFromArray);\r\n            let skipInfo = {};\r\n            let masterData = {\r\n                ...inputData.masterData,\r\n                RESelectedTest: inputData.RESelectedTest\r\n            }\r\n            if (masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                skipInfo = {\r\n\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        skip: 0,\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            } else {\r\n                skipInfo = {\r\n                    ...skipInfo,\r\n                    [dataStateName]: {\r\n                        ...inputData[dataStateName],\r\n                        sort: undefined,\r\n                        filter: undefined\r\n                    }\r\n                }\r\n            }\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData,\r\n                    loading: false,\r\n                    showFilter: false,\r\n                    activeTestKey: inputData.activeTestKey,\r\n                    screenName: inputData.screenName,\r\n                    ...skipInfo\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function getRERegistrationType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getRERegistrationSubType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getRegistrationsubType\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultFilterStatus:inputData.masterData.defaultFilterStatus,\r\n                            defaultRegistrationType: inputData.defaultRegistrationType\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREApprovalConfigVersion(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getApprovalConfigVersion\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultRegistrationSubType: inputData.defaultRegistrationSubType,\r\n                            // fromDate: inputData.fromdate,\r\n                            //  toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFilterStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultjobstatus: inputData.defaultjobstatus,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getREJobStatus(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getJobStatus\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            defaultApprovalConfigVersion: inputData.defaultApprovalConfigVersion,\r\n                            // fromDate: inputData.fromdate,\r\n                            // toDate: inputData.todate\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getResultEntryDetails(inputParamData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultEntryDetails\", { ...inputParamData.inputData, nneedsubsample: inputParamData.masterData.nneedsubsample })\r\n            .then(response => {\r\n                let masterData = { ...inputParamData.masterData }\r\n                if (inputParamData.refs.searchSampleRef !== undefined && inputParamData.refs.searchSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSampleRef.current.value = \"\";\r\n                    masterData['searchedSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchSubSampleRef !== undefined && inputParamData.refs.searchSubSampleRef.current !== null) {\r\n                    inputParamData.refs.searchSubSampleRef.current.value = \"\";\r\n                    masterData['searchedSubSample'] = undefined\r\n                }\r\n                if (inputParamData.refs.searchTestRef !== undefined && inputParamData.refs.searchTestRef.current !== null) {\r\n                    inputParamData.refs.searchTestRef.current.value = \"\"\r\n                    // masterData['searchedTests'] = undefined\r\n                    masterData['searchedTest'] = undefined\r\n                }\r\n                sortData(response.data)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            realFromDate: response.data[\"fromDate\"],\r\n                            realToDate: response.data[\"toDate\"]\r\n                        },\r\n                        loading: false,\r\n                        showTest: inputParamData.inputData.showTest,\r\n                        showSample: inputParamData.inputData.showSample,\r\n                        activeTestKey: inputParamData.inputData.activeTestKey,\r\n                        skip: 0,\r\n                        take: inputParamData.inputData.take,\r\n                        testskip: 0,\r\n                        testtake: inputParamData.inputData.testtake,\r\n                        resultDataState: { ...inputParamData.resultDataState, sort: undefined, filter: undefined },\r\n                        instrumentDataState: { ...inputParamData.instrumentDataState, sort: undefined, filter: undefined },\r\n                        materialDataState: { ...inputParamData.materialDataState, sort: undefined, filter: undefined },\r\n                        taskDataState: { ...inputParamData.taskDataState, sort: undefined, filter: undefined },\r\n                        documentDataState: { ...inputParamData.documentDataState, sort: undefined, filter: undefined },\r\n                        resultChangeDataState: { ...inputParamData.resultChangeDataState, sort: undefined, filter: undefined },\r\n                        testCommentDataState: { ...inputParamData.testCommentDataState, sort: undefined, filter: undefined },\r\n                        historyDataState: { ...inputParamData.historyDataState, sort: undefined, filter: undefined },\r\n                        samplePrintHistoryDataState: { ...inputParamData.samplePrintHistoryDataState, sort: undefined, filter: undefined },\r\n                        sampleHistoryDataState: { ...inputParamData.sampleHistoryDataState, sort: undefined, filter: undefined }\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultGetModule(inputData, userInfo, ncontrolcode, testskip, testtake) {\r\n    return function (dispatch) {\r\n        let TestList = [...inputData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, inputData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            if (Object.values(inputData).length > 0 && inputData.RESelectedTest.length > 0) {\r\n                let inputParamData = {\r\n                    ntransactiontestcode: acceptTestList ? acceptTestList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                    userinfo: userInfo\r\n                }\r\n                dispatch(initRequest(true));\r\n                rsapi.post(\"resultentrybysample/getResultEntryResults\", inputParamData)\r\n                    .then(response => {\r\n                        let selectedResultGrade = [];\r\n                        let paremterResultcode = [];\r\n                        const parameterResults = response.data.ResultParameter\r\n                        let predefDefaultFlag = false;\r\n                        parameterResults.map((param, index) => {\r\n                            selectedResultGrade[index] = { ngradecode: param.ngradecode };\r\n                            paremterResultcode[index] = param.ntransactionresultcode;\r\n                            predefDefaultFlag = false;\r\n                            (response.data.PredefinedValues && response.data.PredefinedValues[parameterResults[index].ntransactionresultcode]) &&\r\n                                response.data.PredefinedValues[parameterResults[index].ntransactionresultcode].map(predefinedvalue => {\r\n                                    if (predefinedvalue.ndefaultstatus === transactionStatus.YES) {\r\n                                        if(!predefDefaultFlag)\r\n                                        {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                            undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n                                        // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =\r\n                                        //     constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                        //         undefined, undefined).get(\"OptionList\");\r\n                                        if (response.data.ResultParameter[index].sresult === null) {\r\n                                            response.data.ResultParameter[index].sresult = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].sfinal = predefinedvalue.spredefinedname;\r\n                                            response.data.ResultParameter[index].editable = true;\r\n                                            response.data.ResultParameter[index].ngradecode = predefinedvalue.ngradecode;\r\n                                        }\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                         if(!predefDefaultFlag)\r\n                                         {\r\n                                            predefDefaultFlag = true;\r\n                                            response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                                            undefined, undefined).get(\"OptionList\");\r\n                                        }\r\n                                       \r\n                                    }\r\n                                    //return null;\r\n                                  \r\n                                });\r\n                            //return null;\r\n                            // response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] =  constructOptionList(response.data.PredefinedValues[parameterResults[index].ntransactionresultcode] || [], 'spredefinedname', 'spredefinedname', undefined,\r\n                            // undefined, undefined).get(\"OptionList\");\r\n                        });\r\n                       \r\n                        \r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                masterData: {\r\n                                    ...inputData,\r\n                                    ...response.data,\r\n                                    paremterResultcode//,\r\n                                    //selectedResultGrade ,\r\n\r\n                                },\r\n                                selectedRecord: {\r\n                                    selectedResultGrade: selectedResultGrade,\r\n                                    ResultParameter: response.data.ResultParameter\r\n                                },\r\n                                loading: false,\r\n                                screenName: \"IDS_RESULTENTRY\",\r\n                                openModal: true,\r\n                                operation: \"update\",\r\n                                activeTestKey: \"IDS_RESULTS\",\r\n                                ncontrolcode: ncontrolcode\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                loading: false\r\n                            }\r\n                        })\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n                //}\r\n            } else {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n                }));\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    loading: false\r\n                }\r\n            })\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTTESTTOENTERRESULT\"\r\n            }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport function completeTest(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/completeTest\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        ...responseData,\r\n                        RE_SAMPLE,\r\n                        RE_SUBSAMPLE,\r\n                        RESelectedSubSample,\r\n                        searchedSample,\r\n                        RESelectedSample,\r\n                        RESelectedTest: RESelectedTest2,\r\n                        RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function testStart(inputParam, acceptList, userInfo, completeResultId) {\r\n    if (acceptList !== undefined && acceptList.length > 0) {\r\n        return function (dispatch) {\r\n            let inputData = inputParam.testChildGetREParam\r\n            let inputParamData = {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                nsampletypecode: inputData.nsampletypecode,\r\n                nregtypecode: inputData.nregtypecode,\r\n                nregsubtypecode: inputData.nregsubtypecode,\r\n                npreregno: inputData.npreregno,\r\n                ntranscode: String(inputData.ntransactionstatus),\r\n                napprovalversioncode: inputData.napprovalversioncode,\r\n                napprovalconfigcode: inputData.napprovalconfigcode,\r\n                ntransactionsamplecode: inputData.ntransactionsamplecode,\r\n                userinfo: userInfo,\r\n                fromdate: inputData.fromdate,\r\n                todate: inputData.todate,\r\n                ntestcode: inputData.ntestcode,\r\n                transactiontestcode: acceptList ? acceptList.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntransactiontestcode: 0,\r\n                activeTestKey: inputData.activeTestKey,\r\n                ncontrolcode: inputParam.inputData.ncontrolcode,\r\n                nneedsubsample: inputData.masterData.nneedsubsample,\r\n                ndesigntemplatemappingcode: inputData.masterData.ndesigntemplatemappingcode\r\n            }\r\n            let activeName = \"\";\r\n            let dataStateName = \"\";\r\n            // let { resultDataState, materialDataState, instrumentDataState, taskDataState, resultChangeDataState,\r\n            //     documentDataState, testCommentDataState } = inputData\r\n            // let url = \"resultentrybysample/getTestbasedParameter\"\r\n            switch (inputData.activeTestKey) {\r\n                case \"IDS_RESULTS\":\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                case \"IDS_INSTRUMENT\":\r\n                    activeName = \"ResultUsedInstrument\"\r\n                    dataStateName = \"instrumentDataState\"\r\n                    break;\r\n                case \"IDS_MATERIAL\":\r\n                    activeName = \"ResultUsedMaterial\"\r\n                    dataStateName = \"materialDataState\"\r\n                    break;\r\n                case \"IDS_TASK\":\r\n                    activeName = \"ResultUsedTasks\"\r\n                    dataStateName = \"taskDataState\"\r\n                    break;\r\n                case \"IDS_TESTATTACHMENTS\":\r\n                    activeName = \"RegistrationTestAttachment\"\r\n                    break;\r\n                case \"IDS_TESTCOMMENTS\":\r\n                    activeName = \"RegistrationTestComment\"\r\n                    dataStateName = \"testCommentDataState\"\r\n                    break;\r\n                case \"IDS_DOCUMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"documentDataState\"\r\n                    break;\r\n                case \"IDS_RESULTCHANGEHISTORY\":\r\n                    activeName = \"ResultChangeHistory\"\r\n                    dataStateName = \"resultChangeDataState\"\r\n                    break;\r\n                case \"IDS_SAMPLEATTACHMENTS\":\r\n                    activeName = \"\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n                default:\r\n                    activeName = \"TestParameters\"\r\n                    dataStateName = \"resultDataState\"\r\n                    break;\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/testInitiated\", inputParamData)\r\n                .then(response => {\r\n                    let RE_SAMPLE = [];\r\n                    let RE_SUBSAMPLE = [];\r\n                    let RE_TEST = [];\r\n                    let responseData = response.data\r\n                    if (responseData[\"RE_TEST\"].length > 0) {\r\n                        if (inputData.masterData.nneedsubsample)\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"ntransactionsamplecode\");\r\n                        else\r\n                            RE_TEST = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_TEST\"], responseData[\"RE_TEST\"], \"npreregno\");\r\n                    } else {\r\n                        RE_TEST = inputData.masterData[\"RE_TEST\"];\r\n                    }\r\n\r\n                    RE_SUBSAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SUBSAMPLE\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    if (RE_SUBSAMPLE.length > 0) {\r\n                        RE_SAMPLE = inputData.masterData[\"RE_SAMPLE\"];\r\n                    } else {\r\n                        RE_SAMPLE = filterRecordBasedOnTwoArrays(inputData.masterData[\"RE_SAMPLE\"], RE_TEST, \"npreregno\");\r\n                    }\r\n                    const RESelectedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSample\"], RE_TEST, \"npreregno\");\r\n                    const RESelectedSubSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedSubSample\"], RE_TEST, \"ntransactionsamplecode\");\r\n                    let RESelectedTest1 = filterRecordBasedOnTwoArrays(inputData.masterData[\"RESelectedTest\"], acceptList, \"ntransactiontestcode\");\r\n                    let RESelectedTest2 = updatedObjectWithNewElement(RESelectedTest1, responseData.RESelectedTest)\r\n                    RESelectedTest2= replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n\r\n                    let searchedSample = undefined;\r\n                    if (inputData.masterData[\"searchedSample\"]) {\r\n                        searchedSample = filterRecordBasedOnTwoArrays(inputData.masterData[\"searchedSample\"], RE_TEST, \"npreregno\");\r\n                    }\r\n\r\n                    let masterData = {\r\n                        ...inputData.masterData,\r\n                        //...responseData,\r\n                        //RE_SAMPLE,\r\n                        //RE_SUBSAMPLE,\r\n                        //RESelectedSubSample,\r\n                        searchedSample,\r\n                        RE_TEST:replaceUpdatedObject(responseData[\"RE_TEST\"], inputData.masterData.RE_TEST, 'ntransactiontestcode')\r\n                        //RESelectedSample,\r\n                        //RESelectedTest: RESelectedTest2,\r\n                        //RE_TEST: responseData[\"RE_TEST\"]\r\n                    }\r\n                    let skipInfo = {};\r\n                    if (masterData.RE_SAMPLE && masterData.RE_SAMPLE.length <= inputParam.skip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            skip: 0,\r\n                            take: inputParam.take\r\n                        }\r\n                    }\r\n                    if (masterData.RE_TEST && masterData.RE_TEST.length <= inputParam.testskip) {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            testskip: 0,\r\n                            testtake: inputParam.testtake\r\n                        }\r\n                    }\r\n                    if (inputData[dataStateName] && masterData[activeName].length <= inputData[dataStateName].skip) {\r\n\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                skip: 0,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    } else {\r\n                        skipInfo = {\r\n                            ...skipInfo,\r\n                            [dataStateName]: {\r\n                                ...inputData[dataStateName],\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    }\r\n                    let respObject = {\r\n                        ...inputParamData.inputData,\r\n                        openModal: false,\r\n                        loadEsign: false,\r\n                        showConfirmAlert: false,\r\n                        //selectedRecord: undefined,\r\n                        loading: false,\r\n                        screenName: inputData.activeTestKey,\r\n                        ...skipInfo\r\n                    }\r\n                    if (searchedSample && RESelectedSample.length === 0 && searchedSample.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(searchedSample[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [searchedSample[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else if (!searchedSample && RESelectedSample.length === 0 && RE_SAMPLE.length > 0) {\r\n                        const paramList = inputParam.postParamList[0];\r\n                        const inputParameter = {\r\n                            ...paramList.fecthInputObject.fecthInputObject,\r\n                            fetchUrl: paramList.fetchUrl,\r\n                            [paramList.primaryKeyField]: String(RE_SAMPLE[0][paramList.primaryKeyField]),\r\n                            ntype: 2,\r\n                            nflag: 2\r\n                        };\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                RESelectedSample: [RE_SAMPLE[0]]\r\n                            }\r\n                        }\r\n                        dispatch(fetchSelectedData({ ...inputParameter, checkBoxOperation: 3 }, respObject));\r\n                    } else {\r\n                        respObject = {\r\n                            ...respObject,\r\n                            masterData\r\n                        };\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                ...respObject,\r\n                                loading: false\r\n                            }\r\n                        });\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n//Compare two array and return the first array which is available in second array\r\nexport function compareTwoArray(firstArray, secondArray, PrimaryKey) {\r\n    const filterArray = firstArray.filter(function (x) {\r\n        return secondArray.some(function (y) {\r\n            return x[PrimaryKey] === y[PrimaryKey]\r\n        })\r\n    });\r\n    return filterArray;\r\n}\r\n\r\nfunction fetchSelectedData(inputParam, respObject) {\r\n    return (dispatch) => {\r\n        rsapi.post(inputParam.fetchUrl, {\r\n            ...inputParam\r\n        })\r\n            .then(response => {\r\n                const masterData = {\r\n                    ...respObject.masterData,\r\n                    ...response.data,\r\n                    RESelectedSample: response.data.RESelectedSample || respObject.masterData.RESelectedSample || []\r\n                };\r\n                //sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        ...respObject,\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport function testMethodSourceEdit(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n            ntestgrouptestcode: inputData.test.ntestgrouptestcode,\r\n            ntestcode: inputData.test.ntestcode,\r\n            ncontrolcode: inputData.editSourceMethodId,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestMethodSource\", inputParamData)\r\n            .then(response => {\r\n\r\n                const TagSource = constructOptionList(response.data.SourceData || [], \"nsourcecode\",\r\n                    \"ssourcename\", undefined, undefined, undefined);\r\n                const TagListSource = TagSource.get(\"OptionList\");\r\n\r\n                const TagMethod = constructOptionList(response.data.MethodData || [], \"nmethodcode\",\r\n                    \"smethodname\", undefined, undefined, undefined);\r\n                const TagListMethod = TagMethod.get(\"OptionList\");\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            SourceData: TagListSource,\r\n                            MethodData: TagListMethod,\r\n                            RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                        },\r\n                        selectedRecord: {\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            stestsynonym: inputData.test.jsondata.stestsynonym,\r\n                            nsourcecode: response.data.SourceDataValue,\r\n                            nmethodcode: response.data.MethodDataValue\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TESTMETHODSOURCE\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateParameterComments(inputData, masterData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            ntransactionresultcode: inputData.ntransactionresultcode,\r\n            sresultcomment: inputData.sresultcomment,\r\n            transactiontestcode: inputData.transactiontestcode,\r\n            userinfo: inputData.userinfo,\r\n            nregtypecode: inputData.nregtypecode,\r\n            nregsubtypecode: inputData.nregsubtypecode,\r\n            ncontrolcode: inputData.ncontrolcode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        screenName: \"IDS_RESULT\",\r\n                        openModal: false,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode\r\n                        //ncontrolcode:inputData.editSourceMethodId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function addREInstrument(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        const resultusedinstrument = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", {\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n        const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: inputData.userInfo });\r\n        urlArray = [resultusedinstrument, timeZoneService, UTCtimeZoneService];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n\r\n\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory\r\n\r\n                        },\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            ninstrumentcatcode: TagInsturmentcategory.get(\"DefaultValue\") ? TagInsturmentcategory.get(\"DefaultValue\") : [],\r\n                            ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n                            npreregno: inputData.test.npreregno,\r\n                            //dtodate: new Date(response[2].data),//new Date(),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            //dfromdate: new Date(response[2].data),//new Date(),\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[2].data),//new Date(),\r\n                            ntzfromdate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": inputData.userInfo.ntimezonecode,\r\n                                \"label\": inputData.userInfo.stimezoneid\r\n                            }\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function addREMaterial(inputData) {\r\n    return function (dispatch) {\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterialCombo\", { userinfo: inputData.userInfo,nsectioncode:inputData.test.nsectioncode})\r\n            .then(response => {\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            sarno: inputData.test.sarno,\r\n                            ssamplearno: inputData.test.ssamplearno,\r\n                            stestsynonym: inputData.test.stestsynonym,\r\n                            nsectioncode: inputData.test.nsectioncode,\r\n                            ssectionname: inputData.test.ssectionname,\r\n                            transactiontestcode: inputData.RESelectedTest ? inputData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                            ntransactiontestcode: inputData.test.ntransactiontestcode,\r\n                            npreregno: inputData.test.npreregno,\r\n                            nmaterialtypecode: materialTypeMap.get(\"DefaultValue\"),\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\"),\r\n                             nmaterialcode:  materialMap.get(\"OptionList\").length > 0 ? materialMap.get(\"OptionList\")[0] : \"\",\r\n                             nmaterialinventorycode: materialInventoryMap.get(\"OptionList\").length >0? materialInventoryMap.get(\"OptionList\")[0]:\"\",\r\n                            sunitname: response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].sunitname:\"\",\r\n                            savailablequantity:response.data.MaterialInventory !== undefined ? response.data.MaterialInventory[0].savailablequatity:\"\"\r\n                        },\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedMaterailId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialCategoryByType(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialCategoryByType\", {\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            nmaterialcatcode: materialCatMap.get(\"DefaultValue\") || {},\r\n                        },\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialByCategory(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialByCategory\", {\r\n            nmaterialtypecode: inputData.selectedRecord.nmaterialtypecode.value,\r\n            nmaterialcatcode: inputData.selectedRecord.nmaterialcatcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                             nmaterialcode: materialMap.get(\"OptionList\")[0],\r\n                            nmaterialinventorycode: materialInventoryMap.get(\"OptionList\")[0],\r\n                            savailablequantity:response.data.MaterialInventory[0].savailablequatity,\r\n                            sunitname:response.data.MaterialInventory[0].sunitname\r\n                        },\r\n                        material,\r\n                        materialInventory,\r\n                        loading: false,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getREMaterialInvertoryByMaterial(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getREMaterialInvertoryByMaterial\", {\r\n            nmaterialcode: inputData.selectedRecord.nmaterialcode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            sunitname: response.data.MaterialInventory[0].sunitname,\r\n                            savailablequantity:response.data.MaterialInventory[0].savailablequatity\r\n                        },\r\n                        materialInventory,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getAvailableMaterialQuantity(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getAvailableMaterialQuantity\", {\r\n            nmaterialinventorycode: inputData.selectedRecord.nmaterialinventorycode.value,\r\n            nsectioncode: inputData.selectedRecord.nsectioncode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: null,\r\n                        selectedRecord: {\r\n                            ...inputData.selectedRecord,\r\n                            savailablequantity: response.data.inventory.savailablequatity,\r\n                            sunitname: response.data.inventory.jsondata.Unit\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        //operation: \"create\",\r\n                        //activeTestKey: \"IDS_INSTRUMENT\",\r\n                        ncontrolcode: inputData.addResultUsedInstrumentId\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function deleteInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n// export function deleteInstrumentRecord(inputData) {\r\n//     return function (dispatch) {\r\n//         let inputParamData = {\r\n//             nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n//             userinfo: inputData.userInfo,\r\n//             ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n//                 inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n//             nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n//             nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n//         }\r\n//         dispatch(initRequest(true));\r\n//         rsapi.post(\"resultentrybysample/deleteResultUsedInstrument\", inputParamData)\r\n//             .then(response => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         masterData: {\r\n//                             ...inputData.masterData,\r\n//                             ...response.data\r\n//                         },\r\n//                         loading: false,\r\n//                         operation: \"delete\",\r\n//                         openModal: false,\r\n//                         loadEsign: false\r\n//                     }\r\n//                 })\r\n//             })\r\n//             .catch(error => {\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN,\r\n//                     payload: {\r\n//                         loading: false\r\n//                     }\r\n//                 })\r\n//                 if (error.response.status === 500) {\r\n//                     toast.error(error.message);\r\n//                 } else {\r\n//                     toast.warn(error.response.data);\r\n//                 }\r\n//             })\r\n//     }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function fetchInstrumentRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n        let urlArray = [];\r\n        //const resultUsedInstrumentCombo = rsapi.post(\"resultentrybysample/getResultUsedInstrumentCombo\", { userinfo: inputData.userInfo });\r\n        const timeZoneService = rsapi.post(\"resultentrybysample/getResultUsedInstrument\", {\r\n            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo\r\n        });\r\n        const getResultUsedInstrument = rsapi.post(\"timezone/getTimeZone\");\r\n        urlArray = [timeZoneService, getResultUsedInstrument];\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n\r\n                const TagInstrument = constructOptionList(response[0].data.Instrument || [], \"ninstrumentcode\",\r\n                    \"sinstrumentid\", undefined, undefined, undefined);\r\n                const TagListInstrument = TagInstrument.get(\"OptionList\");\r\n\r\n\r\n                const TagInsturmentcategory = constructOptionList(response[0].data.InstrumentCategory || [], \"ninstrumentcatcode\",\r\n                    \"sinstrumentcatname\", undefined, undefined, undefined);\r\n                const TagListInstrumentCategory = TagInsturmentcategory.get(\"OptionList\");\r\n\r\n                const TagTimeZone = constructOptionList(response[1].data || [], \"ntimezonecode\",\r\n                    \"stimezoneid\", undefined, undefined, undefined);\r\n                const TagListTimeZone = TagTimeZone.get(\"OptionList\")\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            Instrument: TagListInstrument,\r\n                            InstrumentCategory: TagListInstrumentCategory,\r\n                            // ...response[0].data,\r\n                            ...response[1].data,\r\n                            //...response[2].data\r\n                        },\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        selectedRecord: {\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            npreregno: response[0].data.EditResultUsedInstrument[0].npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            ninstrumentcatcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcatcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentcatname\r\n                            },\r\n                            ninstrumentcode: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ninstrumentcode,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].sinstrumentid\r\n                            },\r\n                            ntzfromdate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntzfromdate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stzfromdate\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": response[0].data.EditResultUsedInstrument[0].ntztodate,\r\n                                \"label\": response[0].data.EditResultUsedInstrument[0].stztodate\r\n                            },\r\n                            //dfromdate: new Date(response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            //dtodate: new Date(response[0].data.EditResultUsedInstrument[0].stodate)\r\n                            dfromdate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].sfromdate),\r\n                            dtodate: rearrangeDateFormat(inputData.userInfo, response[0].data.EditResultUsedInstrument[0].stodate)\r\n                        },\r\n                        timeZoneList: TagListTimeZone || [],\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_INSTRUMENT\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function fetchMaterialRecord(inputData) {\r\n    return function (dispatch) {\r\n\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedMaterial\", {\r\n            nresultusedmaterialcode: inputData.editRow.nresultusedmaterialcode,\r\n            userinfo: inputData.userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                const materialTypeMap = constructOptionList(response.data.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\r\n                const materialType = materialTypeMap.get(\"OptionList\");\r\n                const materialCatMap = constructOptionList(response.data.MaterialCategory || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\r\n                const materialCat = materialCatMap.get(\"OptionList\");\r\n                const materialMap = constructOptionList(response.data.Material || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\r\n                const material = materialMap.get(\"OptionList\");\r\n                const materialInventoryMap = constructOptionList(response.data.MaterialInventory || [], \"nmaterialinventorycode\", \"sinventoryid\", undefined, undefined, undefined);\r\n                const materialInventory = materialInventoryMap.get(\"OptionList\");\r\n                const EditResultUsedMaterial = response.data.EditResultUsedMaterial[0]\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedId: inputData.editRow.nresultusedinstrumentcode,\r\n                        materialType,\r\n                        materialCat,\r\n                        material,\r\n                        materialInventory,\r\n                        selectedRecord: {\r\n                            ...EditResultUsedMaterial,\r\n                            stestsynonym: inputData.editRow.jsondata.stestsynonym,\r\n                            npreregno: EditResultUsedMaterial.npreregno,\r\n                            ntransactiontestcode: inputData.editRow.ntransactiontestcode,\r\n                            nresultusedinstrumentcode: inputData.editRow.nresultusedinstrumentcode,\r\n                            nmaterialtypecode: {\r\n                                label: EditResultUsedMaterial.jsondata.smaterialtypename,\r\n                                value: EditResultUsedMaterial.nmaterialtypecode\r\n                            },\r\n                            nmaterialcatcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcategorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialcatname\r\n                            },\r\n                            nmaterialcode: {\r\n                                \"value\": EditResultUsedMaterial.nmaterialcode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.smaterialname,\r\n                            },\r\n                            nmaterialinventorycode: {\r\n                                \"value\": EditResultUsedMaterial.ninventorycode,\r\n                                \"label\": EditResultUsedMaterial.jsondata.sinventoryid\r\n                            },\r\n                            ntztodate: {\r\n                                \"value\": EditResultUsedMaterial.ntztodate,\r\n                                \"label\": EditResultUsedMaterial.stztodate\r\n                            },\r\n                            susedquantity: EditResultUsedMaterial.jsondata.nqtyused,\r\n                            scarriergas: EditResultUsedMaterial.jsondata.scarriergas,\r\n                            smobilephase: EditResultUsedMaterial.jsondata.smobilephase,\r\n                            sremarks: EditResultUsedMaterial.jsondata.sremarks,\r\n                            savailablequantity: response.data.inventory.savailablequatity,\r\n                            sunitname: response.data.inventory.sunitname\r\n                        },\r\n                        ncontrolcode: inputData.ncontrolCode,\r\n                        loading: false,\r\n                        screenName: \"IDS_MATERIAL\",\r\n                        openModal: true,\r\n                        operation: \"update\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function deleteTaskRecord(inputData, userInfo) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.selectedRecord.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedTasks\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchTaskRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedtaskcode: inputData.editRow.nresultusedtaskcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getResultUsedTask\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.EditResultUsedTasks[0].nresultusedtaskcode,\r\n                        selectedRecord: {\r\n                            npreregno: response.data.EditResultUsedTasks[0].npreregno,\r\n                            stestsynonym: inputData.editRow.stestsynonym,\r\n                            sanalysistime: response.data.EditResultUsedTasks[0].jsondata.sanalysistime,\r\n                            smisctime: response.data.EditResultUsedTasks[0].jsondata.smisctime,\r\n                            spreanalysistime: response.data.EditResultUsedTasks[0].jsondata.spreanalysistime,\r\n                            spreparationtime: response.data.EditResultUsedTasks[0].jsondata.spreparationtime,\r\n                            scomments: response.data.EditResultUsedTasks[0].jsondata.scomments,\r\n                            nresultusedtaskcode: response.data.EditResultUsedTasks[0].nresultusedtaskcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_TASK\",\r\n                        openModal: true,\r\n                        operation: \"update\",\r\n                        ncontrolcode: inputData.ncontrolcode,\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function parameterRecord(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n            ncontrolcode: inputData.controlcode,\r\n            userinfo: inputData.userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getParameterComments\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                        },\r\n                        selectedId: response.data.ParameterComments.ntransactionresultcode,\r\n                        selectedRecord: {\r\n                            sresultcomment: response.data.ParameterComments.sresultcomment,\r\n                            stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                            sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                            transactiontestcode: response.data.ParameterComments.ntransactiontestcode,\r\n                            ntransactionresultcode: response.data.ParameterComments.ntransactionresultcode,\r\n                            ntransactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                            ncontrolcode: inputData.controlcode\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_PARAMETERCOMMENTS\",\r\n                        openModal: true,\r\n                        operation: \"updateParameterComments\",\r\n                        ncontrolcode: inputData.controlcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function checkListRecord(inputData) {\r\n\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n            napprovalparametercode: inputData.selectedRecord.napprovalparametercode,\r\n            nchecklistversioncode: inputData.selectedRecord.nchecklistversioncode,\r\n            ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode.toString(),\r\n            ncontrolcode: inputData.ncontrolcode,\r\n            userinfo: inputData.userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getChecklistdesign\", inputParamData)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let lsteditedQB = [];\r\n                selectedRecord = {\r\n                    sarno:inputData.selectedRecord.sarno,\r\n                    ssamplearno:inputData.selectedRecord.ssamplearno,\r\n                    npreregno: inputData.selectedRecord.npreregno,\r\n                    stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    ntransactiontestcode: inputData.selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: inputData.selectedRecord.ntransactionresultcode,\r\n                    transactiontestcode: inputData.masterData.RESelectedTest ? inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                }\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord[checklist.nchecklistversionqbcode] = {\r\n                        nchecklistqbcode: checklist.nchecklistqbcode,\r\n                        nchecklistversioncode: checklist.nchecklistversioncode,\r\n                        nchecklistversionqbcode: checklist.nchecklistversionqbcode,\r\n                        sdefaultvalue: checklist.sdefaultvalue,\r\n                        sarno:inputData.selectedRecord.sarno,\r\n                        ssamplearno:inputData.selectedRecord.ssamplearno,\r\n                        stestsynonym: inputData.selectedRecord.stestsynonym,\r\n                    sparametersynonym: inputData.selectedRecord.sparametersynonym,\r\n                    }\r\n                    lsteditedQB.push(checklist.nchecklistversionqbcode);\r\n                    return null;\r\n                });\r\n\r\n                response.data.ChecklistData.map(checklist => {\r\n                    selectedRecord['jsondata']={\r\n                        ...selectedRecord['jsondata'],\r\n                        [checklist.nchecklistversionqbcode]:checklist.sdefaultvalue\r\n                    }\r\n                    return null;\r\n                });\r\n                selectedRecord[\"editedQB\"] = lsteditedQB;\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        selectedId: response.data.selectedId,\r\n                        selectedRecord: selectedRecord,\r\n                        loading: false,\r\n                        screenName: \"IDS_CHECKLISTRESULT\",\r\n                        openTemplateModal: true,\r\n                        needSaveButton: inputData.needSaveButton,\r\n                        operation: \"create\",\r\n                        ncontrolCode: inputData.ncontrolcode\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        let listResultCheckList = [];\r\n        if (selectedRecord && selectedRecord.jsondata) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listResultCheckList.push(selectedRecord[qbcode]))\r\n\r\n            let inputParamData = {\r\n                ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                transactiontestcode: selectedRecord.transactiontestcode,\r\n                npreregno: selectedRecord.npreregno,\r\n                ResultCheckList: {\r\n                    nchecklistversioncode:listResultCheckList[0].nchecklistversioncode,\r\n                    nchecklistqbcode:listResultCheckList[0].nchecklistqbcode,\r\n                    jsondata: selectedRecord.jsondata,\r\n                    npreregno: selectedRecord.npreregno,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                },\r\n                //jsondata: selectedRecord.jsondata,\r\n                userinfo: userInfo,\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: -1\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/createResultEntryChecklist\", inputParamData)\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            openModal: false,\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    openTemplateModal: false,\r\n                    selectedRecord: {},\r\n                    loading: false,\r\n                    loadEsign: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function defaultTest(inputData, RESelectedTest, RESelectedSample, nregtypecode, nregsubtypecode) {\r\n    if (RESelectedTest !== undefined && RESelectedTest.length > 0) {\r\n        return function (dispatch) {\r\n            let inputParamData = {\r\n                userinfo: inputData.userinfo,\r\n                ntransactiontestcode: RESelectedTest ? RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\",\r\n                ntestgrouptestcode: RESelectedTest ? RESelectedTest.map(test => test.ntestgrouptestcode).join(\",\") : \"\",\r\n                npreregno: RESelectedTest ? RESelectedTest.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                //RESelectedSample ? RESelectedSample.map(preregno => preregno.npreregno).join(\",\") : \"\",\r\n                nregtypecode: nregtypecode,\r\n                nregsubtypecode: nregsubtypecode,\r\n                ncontrolcode: inputData.ncontrolcode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"resultentrybysample/updateDefaultValue\", inputParamData)\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...inputData.masterData,\r\n                                ...response.data,\r\n                                TestParameters: replaceUpdatedObject(response.data.TestParameters, inputData.masterData.TestParameters, 'ntransactionresultcode'),\r\n                                RESelectedSubSample: inputData.masterData.RESelectedSubSample\r\n                            },\r\n                            loading: false,\r\n                            activeTestKey: \"IDS_RESULTS\",\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            openModal: false,\r\n                            loadEsign: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    } else {\r\n        toast.warn(intl.formatMessage({\r\n            id: \"IDS_SELECTTESTTOCOMPLETE\"\r\n        }));\r\n    }\r\n\r\n}\r\n\r\nexport function getFormula(parameterData, userInfo, masterData, index, selectedRecord) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            ntransactiontestcode: parameterData.ntransactiontestcode,\r\n            nformulacode: parameterData.ntestgrouptestformulacode,\r\n            userinfo: userInfo,\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getFormulaInputs\", inputParamData)\r\n            .then(response => {\r\n\r\n                const validateFormulaMandyFields = response.data.DynamicFormulaFields.map((item, index) => {\r\n                    return {\r\n                        \"idsName\": \"IDS_FILLALLFIELDS\",\r\n                        \"dataField\": index,\r\n                        \"mandatory\": true\r\n                    }\r\n                });\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecord,\r\n                            parameterData: parameterData,\r\n                            sformulacalculationdetail: response.data.query,\r\n                            formulainput: response.data.Formula,\r\n                            resultindex: index,\r\n                            selectedForumulaInput: []\r\n                        },\r\n                        validateFormulaMandyFields,\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTFORMULA\",\r\n                        showFormula: true,\r\n                        operation: \"validate\",\r\n                        showValidate: true\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function calculateFormula(inputDataValue) {\r\n    return function (dispatch) {\r\n        const inputData = {\r\n            ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n            ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n            npreregno: inputDataValue.selectedRecord.parameterData.npreregno,\r\n            sformulacalculationcode: inputDataValue.selectedRecord.sformulacalculationdetail,\r\n            nformulacode: inputDataValue.selectedRecord.parameterData.ntestgrouptestformulacode,\r\n            userinfo: inputDataValue.userInfo,\r\n            dynamicformulafields: inputDataValue.lstDynamicFields,\r\n        }\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/calculateFormula\", inputData)\r\n            .then(response => {\r\n\r\n                // inputDataValue.selectedResultData[inputDataValue.selectedRecord.resultindex] =\r\n                // {\r\n                //     ntransactionresultcode: inputDataValue.selectedRecord.parameterData.ntransactionresultcode,\r\n                //     ntransactiontestcode: inputDataValue.selectedRecord.parameterData.ntransactiontestcode,\r\n                //     nparametertypecode: inputDataValue.selectedRecord.parameterData.nparametertypecode,\r\n                //     sresult: response.data.Result,\r\n                //     nroundingdigit: inputDataValue.selectedRecord.parameterData.nroundingdigits,\r\n                //     value: inputDataValue.selectedRecord.parameterData.ngradecode,\r\n                //     parameter: inputDataValue.selectedRecord.parameterData\r\n                // }\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sfinal\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"sresult\"] = response.data.Result;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex]['editable'] = true;\r\n                inputDataValue.ResultParameter[inputDataValue.selectedRecord.resultindex][\"ncalculatedresult\"] = 3;\r\n                inputDataValue.selectedResultGrade[inputDataValue.selectedRecord.resultindex] = {\r\n                    ngradecode: numericGrade(inputDataValue.selectedRecord.parameterData, parseInt(response.data.Result))\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputDataValue.masterData,\r\n                            //selectedResultData: inputDataValue.selectedResultData,\r\n                            //selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            //ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        selectedRecord: {\r\n                            selectedResultGrade: inputDataValue.selectedResultGrade,\r\n                            ResultParameter: inputDataValue.ResultParameter\r\n                        },\r\n                        loading: false,\r\n                        screenName: \"IDS_RESULTENTRY\",\r\n                        showFormula: false,\r\n                        operation: \"update\",\r\n                        showValidate: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    //toast.warn(error.response.data);\r\n                    toast.warn(error.response.data[\"Result\"]);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getREFilterTestData(inputData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getTestBasedOnCombo\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data,\r\n                            //defaultFilterStatus: inputData.defaultFilterStatus,\r\n                            defaultRegistrationSubType: inputData.masterData.defaultRegistrationSubType,//inputData.defaultRegistrationSubType,\r\n                            ndesigntemplatemappingcode:inputData.ndesigntemplatemappingcode,\r\n                            DesignTemplateMappingValue:inputData.DesignTemplateMappingValue\r\n                        },\r\n                        loading: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function updateTestMethodSource(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/updateTestMethodSource\", inputData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            RE_TEST: replaceUpdatedObject(response.data.RE_TEST, masterData.RE_TEST, 'ntransactiontestcode')\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        loadEsign: false\r\n\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function resultImportFile(inputData, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/getImportResultEntry\", inputData)\r\n            .then(response => {\r\n\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData\r\n                        },\r\n                        loading: false,\r\n                        openModal: false,\r\n                        // activeTestKey: \"IDS_RESULTS\"\r\n                    }\r\n                })\r\n\r\n                if (response.data.returnStatus && response.data.returnStatus !== \"\") {\r\n                    toast.info(response.data.returnStatus);\r\n                }\r\n                else {\r\n                    toast.warn(response.data.returnStatus);\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function validateEsignCredentialComplete(inputParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n            .then(response => {\r\n                if (response.data === \"Success\") {\r\n\r\n\r\n\r\n                    const methodUrl = \"performaction\"\r\n                    inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()] &&\r\n                        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]) {\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"]\r\n                        delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"]\r\n                    }\r\n                    if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"complete\") {\r\n                        dispatch(completeTest(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam.inputData.userinfo))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"default\") {\r\n                        dispatch(defaultTest(inputParam[\"screenData\"][\"inputParam\"][\"testChildGetREParam\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedTest\"], inputParam[\"screenData\"][\"inputParam\"][\"RESelectedSample\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregtypecode\"], inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"nregsubtypecode\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteInstrument\") {\r\n                        dispatch(deleteInstrumentRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"createMethod\") {\r\n                        dispatch(updateTestMethodSource(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"deleteTask\") {\r\n                        dispatch(deleteTaskRecord(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"inputParam\"][\"operation\"] === \"updateParameterComments\") {\r\n                        dispatch(updateParameterComments(inputParam[\"screenData\"][\"inputParam\"][\"inputData\"], inputParam[\"screenData\"][\"inputParam\"][\"masterData\"]))\r\n                    } else if (inputParam[\"screenData\"][\"operation\"] === \"updatechecklist\") {\r\n                        let { selectedRecord, userInfo, nregtypecode, nregsubtypecode } = inputParam[\"screenData\"];\r\n                        delete selectedRecord.esignpassword;\r\n                        delete selectedRecord.esigncomments;\r\n                        delete selectedRecord.agree;\r\n                        delete inputParam.inputData.password;\r\n                        userInfo = inputParam.inputData.userinfo;\r\n                        dispatch(onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode))\r\n                    }\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\nexport function getMeanCalculationTestParameter(meanParam) {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const inputData = {\r\n            npreregno: meanParam.selectedRecord.npreregno,\r\n            ntransactionresultcode: meanParam.selectedRecord.ntransactionresultcode,\r\n            userinfo: meanParam.userInfo\r\n        }\r\n        return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n            .then(response => {\r\n\r\n                const list = response.data || [];\r\n                // const optionList = [];\r\n                // list.map(item=>{\r\n                //     console.log(\"item:\", item);\r\n                //         optionList.push({item:item, \r\n                //                         label:\"[\"+item.stestsynonym+\"]-[\"+item.sparametersynonym+\"]-[\"+item.sresult+\"]\", \r\n                //                         value:item.ntransactionresultcode})\r\n                //     })\r\n                // const masterData = {...masterData, ResultParameter:meanParam.selectedRecord}\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        loading: false, openModal: true,\r\n                        meanTestParameterList: list,\r\n                        screenName: \"IDS_MEANPARAMETER\",\r\n                        ncontrolcode: meanParam.ncontrolCode,\r\n                        selectedTestParameterMean: meanParam.selectedRecord\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    };\r\n}\r\n\r\n/*export function deleteResultUsedMaterial(inputData) {\r\n    return function (dispatch) {\r\n        let inputParamData = {\r\n            nresultusedinstrumentcode: inputData.selectedRecord.nresultusedinstrumentcode,\r\n            userinfo: inputData.userInfo,\r\n            ntransactiontestcode: inputData.masterData.RESelectedTest ?\r\n                inputData.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n            nregtypecode: inputData.masterData.defaultRegistrationType.nregtypecode,\r\n            nregsubtypecode: inputData.masterData.defaultRegistrationSubType.nregsubtypecode\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"resultentrybysample/deleteResultUsedMaterial\", inputParamData)\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputData.masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false,\r\n                        operation: \"delete\",\r\n                        openModal: false,\r\n                        loadEsign: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}*/"]},"metadata":{},"sourceType":"module"}