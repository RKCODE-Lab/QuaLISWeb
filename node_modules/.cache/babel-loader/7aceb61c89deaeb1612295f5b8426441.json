{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport { sortData } from \"../components/CommonScript\";\nimport rsapi from \"../rsapi\";\nimport { initRequest } from \"./LoginAction\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nexport function getSubSampleBySample(methodParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"coarelease/getSubSampleBySample\", {\n      nsitecode: methodParam.nsitecode,\n      nusercode: methodParam.primaryKeyValue,\n      userinfo: methodParam.userInfo\n    }).then(response => {\n      let releaseSubSample = response.data[\"RS_SubSample\"]; // releaseSubSample.set(parseInt(Object.keys(response.data[\"RS_SubSample\"])[0]), Object.values(response.data[\"RS_SubSample\"])[0]);\n\n      const masterData = methodParam.masterData;\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          data: methodParam.data,\n          releaseSubSample,\n          dataState: methodParam.dataState,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/COAReleaseAction.js"],"names":["toast","sortData","rsapi","initRequest","DEFAULT_RETURN","getSubSampleBySample","methodParam","dispatch","post","nsitecode","nusercode","primaryKeyValue","userinfo","userInfo","then","response","releaseSubSample","data","masterData","type","payload","dataState","loading","catch","error","status","message","warn"],"mappings":"AAAA,SAASA,KAAT,QAAsB,gBAAtB;AACA,SAASC,QAAT,QAAyB,4BAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,cAAT,QAA+B,cAA/B;AAEA,OAAO,SAASC,oBAAT,CAA+BC,WAA/B,EAA4C;AAC/C,SAAO,UAAUC,QAAV,EAAoB;AAC3BA,IAAAA,QAAQ,CAACJ,WAAW,CAAC,IAAD,CAAZ,CAAR;AACA,WAAOD,KAAK,CAACM,IAAN,CAAW,iCAAX,EACyB;AAACC,MAAAA,SAAS,EAACH,WAAW,CAACG,SAAvB;AAAkCC,MAAAA,SAAS,EAACJ,WAAW,CAACK,eAAxD;AACAC,MAAAA,QAAQ,EAACN,WAAW,CAACO;AADrB,KADzB,EAGNC,IAHM,CAGDC,QAAQ,IAAE;AACR,UAAIC,gBAAgB,GAAED,QAAQ,CAACE,IAAT,CAAc,cAAd,CAAtB,CADQ,CAET;;AACC,YAAMC,UAAU,GAAGZ,WAAW,CAACY,UAA/B;AACAjB,MAAAA,QAAQ,CAACiB,UAAD,CAAR;AACAX,MAAAA,QAAQ,CAAC;AAACY,QAAAA,IAAI,EAAEf,cAAP;AAAuBgB,QAAAA,OAAO,EAAC;AAACF,UAAAA,UAAD;AAC5BD,UAAAA,IAAI,EAAEX,WAAW,CAACW,IADU;AACJD,UAAAA,gBADI;AAE5BK,UAAAA,SAAS,EAACf,WAAW,CAACe,SAFM;AAG5BC,UAAAA,OAAO,EAAC;AAHoB;AAA/B,OAAD,CAAR;AAKH,KAbE,EAcFC,KAdE,CAcIC,KAAK,IAAE;AACVjB,MAAAA,QAAQ,CAAC;AAACY,QAAAA,IAAI,EAAEf,cAAP;AAAuBgB,QAAAA,OAAO,EAAE;AAACE,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACT,QAAN,CAAeU,MAAf,KAA0B,GAA9B,EAAkC;AAC9BzB,QAAAA,KAAK,CAACwB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACA1B,QAAAA,KAAK,CAAC2B,IAAN,CAAWH,KAAK,CAACT,QAAN,CAAeE,IAA1B;AACH;AACJ,KAtBE,CAAP;AAuBC,GAzBD;AA0BH","sourcesContent":["import { toast } from \"react-toastify\";\r\nimport { sortData } from \"../components/CommonScript\";\r\nimport rsapi from \"../rsapi\";\r\nimport { initRequest } from \"./LoginAction\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\n\r\nexport function getSubSampleBySample (methodParam) {            \r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"coarelease/getSubSampleBySample\", \r\n                                    {nsitecode:methodParam.nsitecode, nusercode:methodParam.primaryKeyValue,\r\n                                    userinfo:methodParam.userInfo})\r\n    .then(response=>{ \r\n            let releaseSubSample =response.data[\"RS_SubSample\"];           \r\n           // releaseSubSample.set(parseInt(Object.keys(response.data[\"RS_SubSample\"])[0]), Object.values(response.data[\"RS_SubSample\"])[0]);\r\n            const masterData = methodParam.masterData;\r\n            sortData(masterData);\r\n            dispatch({type: DEFAULT_RETURN, payload:{masterData,\r\n                        data: methodParam.data, releaseSubSample,\r\n                        dataState:methodParam.dataState,\r\n                        loading:false\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}