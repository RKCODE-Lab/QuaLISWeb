{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\SyncHistory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Card, FormGroup, FormLabel } from 'react-bootstrap'; //import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { callService, crudMaster, updateStore, getSyncHistoryDetail, SyncRecords, filterColumnData } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { getControlMap } from '../../components/CommonScript';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { ReadOnlyText, ContentPanel } from '../../components/App.styles';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass SyncHistory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.reloadData = () => {\n      //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\n      if (this.searchRef && this.searchRef.current) {\n        this.searchRef.current.value = \"\";\n      }\n\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: \"synchistory\",\n        methodUrl: \"SyncHistory\",\n        displayName: this.props.intl.formatMessage({\n          id: \"IDS_SYNCHISTORY\"\n        }),\n        userInfo: this.props.Login.userInfo,\n        isClearSearch: this.props.Login.isClearSearch\n      };\n      this.props.callService(inputParam);\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[4]) : 10\n    };\n    this.state = {\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      operation: \"\",\n      SelectedSyncBatchHistory: undefined,\n      screenName: undefined,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      isClearSearch: false,\n      sidebarview: false,\n      data: [],\n      dataResult: [],\n      dataState: dataState\n    };\n    this.searchRef = React.createRef();\n    this.userFieldList = [];\n    this.searchFieldList = [\"stransfertype\", \"sbatchfinalstatus\", \"sbatchtransferstatus\", \"sdestinationsitename\", \"sbatchtransferid\"];\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_TRANSFERID\",\n      \"dataField\": \"stransferid\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"stransferstatus\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_ITEM\",\n      \"dataField\": \"stablename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TRANSFERTYPE\",\n      \"dataField\": \"stransfertype\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DATETIME\",\n      \"dataField\": \"stransactiondatetime\",\n      \"width\": \"200px\"\n    } // { \"idsName\": \"IDS_FAILUREMSG\", \"dataField\": \"serrormsg\", \"width\": \"200px\" }\n    ];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null;\n  }\n\n  render() {\n    let syncStatusCSS = \"outline-secondary\"; //let activeIconCSS = \"fa fa-check\";\n\n    let activeIconCSS = \"\";\n\n    if (this.props.Login.masterData.SelectedSyncBatchHistory && this.props.Login.masterData.SelectedSyncBatchHistory.nbatchtransferstatus === transactionStatus.SENT) {\n      syncStatusCSS = \"outline-success\";\n    } else if (this.props.Login.masterData.SelectedSyncBatchHistory && this.props.Login.masterData.SelectedSyncBatchHistory.nbatchtransferstatus === transactionStatus.COMPLETED) {\n      syncStatusCSS = \"outline-success\";\n      activeIconCSS = \"\";\n    } else if (this.props.Login.masterData.SelectedSyncBatchHistory && this.props.Login.masterData.SelectedSyncBatchHistory.nbatchtransferstatus === transactionStatus.FAIL_43) {\n      activeIconCSS = \"\";\n    }\n\n    const filterParam = {\n      inputListName: \"SyncBatchHistory\",\n      selectedObject: \"SelectedSyncBatchHistory\",\n      primaryKeyField: \"nsyncbatchcode\",\n      fetchUrl: \"synchistory/getSyncHistory\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.searchFieldList\n    };\n    const syncId = this.state.controlMap.has(\"StartSync\") && this.state.controlMap.get(\"StartSync\").ncontrolcode; //console.log(\"syncID:\", this.props.Login.userRoleControlRights, this.state.controlMap, syncId);\n    // console.log(\"data:\", this.props.Login.masterData);\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_SYNCHISTORY\"\n      }),\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.SyncBatchHistory,\n      getMasterDetail: syncData => this.props.getSyncHistoryDetail(syncData, this.props.Login.userInfo, this.props.Login.masterData),\n      selectedMaster: this.props.Login.masterData.SelectedSyncBatchHistory,\n      primaryKeyField: \"nsyncbatchcode\",\n      mainField: \"sdestinationsitename\" //firstField=\"sbatchtransferid\"\n      ,\n      firstField: \"sbatchstartdatetime\",\n      secondField: \"sbatchfinalstatus\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      syncId: syncId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      openModal: () => this.props.SyncRecords(this.props.Login.userInfo),\n      isMultiSelecct: false,\n      hidePaging: false,\n      isClearSearch: this.props.Login.isClearSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, this.props.Login.masterData.SyncBatchHistory && this.props.Login.masterData.SyncBatchHistory.length > 0 && this.props.Login.masterData.SelectedSyncBatchHistory ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.sdestinationsitename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: `btn btn-outlined ${syncStatusCSS} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 57\n      }\n    }, activeIconCSS !== \"\" ? /*#__PURE__*/React.createElement(\"i\", {\n      class: activeIconCSS,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 85\n      }\n    }) : \"\", this.props.Login.masterData.SelectedSyncBatchHistory.sbatchtransferstatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 53\n      }\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.Synchronization === null ? \"\" : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 54\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_LASTSYNCDATETIME\",\n      message: \"Last Successful Sync Date & Time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.Synchronization.slastsyncdatetime))), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SYNCDATETIME\",\n      message: \"Sync Date & Time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.Synchronization.ssyncdatetime)))), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_BATCHTRANSFERID\",\n      message: \"Batch Transfer ID\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 72\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.sbatchtransferid)))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_BATCHTRANSFERSTATUS\",\n      message: \"Batch Transfer Status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.sbatchtransferstatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SYNCTYPE\",\n      message: \"Sync Type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.ssynctype))), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_BATCHFINALSTATUS\",\n      message: \"Batch Final Status\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.sbatchfinalstatus))), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_BATCHSTARTDATETIME\",\n      message: \"Batch Start Date & Time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.sbatchstartdatetime))), /*#__PURE__*/React.createElement(Col, {\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_BATCHENDDATETIME\",\n      message: \"Batch End Date & Time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.sbatchenddatetime)))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 45\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.serrormsg !== '' ? /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_FAILUREMSG\",\n      message: \"Failure Message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 68\n      }\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedSyncBatchHistory.serrormsg))) : \"\"), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsynchistorycode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult //dataResult={this.props.Login.masterData[\"SyncHistory\"]||[]}\n      ,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo // gridHeight = {'600px'}\n      //  methodUrl=\"SyncHistory\"\n      //  fetchRecord={props.getUserMultiRoleComboDataService}\n      //   editParam={roleEditParam}\n      //   deleteRecord={props.deleteRecord} \n      //  deleteParam={roleDeleteParam}                                                                                          \n      ,\n      pageable: true,\n      scrollable: \"auto\",\n      isActionRequired: false,\n      isToolBarRequired: false,\n      selectedId: this.props.Login.selectedId,\n      hideColumnFilter: false,\n      groupable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 53\n      }\n    }))))) : \"\"))))));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData[\"SyncHistory\"],\n        dataResult: process(this.props.Login.masterData[\"SyncHistory\"] || [], this.state.dataState)\n      });\n    } else {\n      if (this.props.Login.masterData !== previousProps.Login.masterData) {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.state.dataState.take\n          };\n        }\n\n        if (this.state.dataResult.data) {\n          if (this.state.dataResult.data.length === 1) {\n            let skipcount = this.state.dataState.skip > 0 ? this.state.dataState.skip - this.state.dataState.take : this.state.dataState.skip;\n            dataState = {\n              skip: skipcount,\n              take: this.state.dataState.take\n            };\n          }\n        }\n\n        this.setState({\n          data: this.props.Login.masterData[\"SyncHistory\"] || [],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: process(this.props.Login.masterData[\"SyncHistory\"] || [], dataState),\n          dataState\n        });\n      } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n        this.setState({\n          selectedRecord: this.props.Login.selectedRecord\n        });\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  } // componentDidUpdate(previousProps) {        \n  //     if (this.props.Login.masterData !== previousProps.Login.masterData) {\n  //         if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n  //             const userRoleControlRights = [];\n  //             if (this.props.Login.userRoleControlRights) {\n  //                 this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\n  //                     userRoleControlRights.push(item.ncontrolcode))\n  //             }\n  //             const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\n  //             this.setState({\n  //                 userRoleControlRights, controlMap, data: this.props.Login.masterData[\"SyncHistory\"],\n  //                 dataResult: process(this.props.Login.masterData[\"SyncHistory\"]||[], this.state.dataState),\n  //             });\n  //         }\n  //         else {        \n  //             let {dataState} = this.state;\n  //             if(this.props.Login.dataState === undefined){\n  //                 dataState = {skip:0, take:this.state.dataState.take}\n  //             }\n  //              if(this.state.dataResult.data){\n  //                  if(this.state.dataResult.data.length ===1){\n  //                     let skipcount = this.state.dataState.skip > 0 ?(this.state.dataState.skip-this.state.dataState.take):\n  //                     this.state.dataState.skip\n  //                      dataState={skip:skipcount,take:this.state.dataState.take}\n  //                  }\n  //              }\n  //             this.setState({\n  //                 data: this.props.Login.masterData[\"SyncHistory\"] ||[], selectedRecord: this.props.Login.selectedRecord,\n  //                 dataResult: process(this.props.Login.masterData[\"SyncHistory\"] || [], dataState),\n  //                 dataState\n  //             });\n  //         }  \n  //     }\n  //     else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n  //         this.setState({ selectedRecord: this.props.Login.selectedRecord });\n  //     }\n  // }\n\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  filterColumnData,\n  callService,\n  crudMaster,\n  updateStore,\n  getSyncHistoryDetail,\n  SyncRecords\n})(injectIntl(SyncHistory));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/pages/configurationmaster/SyncHistory.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Card","FormGroup","FormLabel","callService","crudMaster","updateStore","getSyncHistoryDetail","SyncRecords","filterColumnData","DEFAULT_RETURN","getControlMap","ListMaster","transactionStatus","ReadOnlyText","ContentPanel","DataGrid","process","mapStateToProps","state","Login","SyncHistory","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","dataStateChange","event","dataResult","data","dataState","handleDateChange","dateName","dateValue","selectedRecord","reloadData","searchRef","current","value","inputParam","inputData","userInfo","classUrl","methodUrl","displayName","intl","formatMessage","id","isClearSearch","skip","take","settings","parseInt","masterStatus","error","operation","SelectedSyncBatchHistory","undefined","screenName","userRoleControlRights","controlMap","Map","createRef","userFieldList","searchFieldList","extractedColumnList","getDerivedStateFromProps","warn","render","syncStatusCSS","activeIconCSS","masterData","nbatchtransferstatus","SENT","COMPLETED","FAIL_43","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userinfo","syncId","has","get","ncontrolcode","searchedData","SyncBatchHistory","syncData","parentFunction","length","sdestinationsitename","sbatchtransferstatus","Synchronization","slastsyncdatetime","ssyncdatetime","sbatchtransferid","ssynctype","sbatchfinalstatus","sbatchstartdatetime","sbatchenddatetime","serrormsg","selectedId","componentDidUpdate","previousProps","nformcode","Object","values","map","item","push","skipcount","componentWillUnmount","updateInfo","typeName","modalName"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Card, FormGroup, FormLabel} from 'react-bootstrap';\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport {callService, crudMaster, updateStore, getSyncHistoryDetail, SyncRecords, filterColumnData } from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { getControlMap } from '../../components/CommonScript';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport {  ReadOnlyText, ContentPanel } from '../../components/App.styles';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass SyncHistory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[4]) : 10,\r\n        };\r\n        this.state = {\r\n\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            selectedRecord: {},\r\n            operation: \"\",\r\n            SelectedSyncBatchHistory: undefined,\r\n            screenName: undefined,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            isClearSearch: false,\r\n            sidebarview: false,\r\n            data: [],\r\n            dataResult: [],\r\n            dataState: dataState            \r\n\r\n        };\r\n      \r\n       \r\n        this.searchRef = React.createRef();      \r\n\r\n        this.userFieldList = [];\r\n        this.searchFieldList = [\"stransfertype\", \"sbatchfinalstatus\",\"sbatchtransferstatus\", \"sdestinationsitename\", \"sbatchtransferid\"];\r\n\r\n        this.extractedColumnList = [\r\n                                { \"idsName\": \"IDS_TRANSFERID\", \"dataField\": \"stransferid\", \"width\": \"200px\" },\r\n                                { \"idsName\": \"IDS_STATUS\", \"dataField\": \"stransferstatus\", \"width\": \"200px\" },\r\n                                { \"idsName\": \"IDS_ITEM\", \"dataField\": \"stablename\", \"width\": \"200px\" },\r\n                                { \"idsName\": \"IDS_TRANSFERTYPE\", \"dataField\": \"stransfertype\", \"width\": \"200px\" },\r\n                                { \"idsName\": \"IDS_DATETIME\", \"dataField\": \"stransactiondatetime\", \"width\": \"200px\" },\r\n                               // { \"idsName\": \"IDS_FAILUREMSG\", \"dataField\": \"serrormsg\", \"width\": \"200px\" }\r\n                            ]\r\n    }\r\n\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })          \r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        let syncStatusCSS = \"outline-secondary\";\r\n        //let activeIconCSS = \"fa fa-check\";\r\n        let activeIconCSS = \"\";\r\n        if (this.props.Login.masterData.SelectedSyncBatchHistory && this.props.Login.masterData.SelectedSyncBatchHistory.nbatchtransferstatus === transactionStatus.SENT) {\r\n            syncStatusCSS = \"outline-success\";\r\n        }\r\n        else if (this.props.Login.masterData.SelectedSyncBatchHistory && this.props.Login.masterData.SelectedSyncBatchHistory.nbatchtransferstatus === transactionStatus.COMPLETED) {\r\n            syncStatusCSS = \"outline-success\";\r\n            activeIconCSS = \"\";\r\n        }\r\n        else if (this.props.Login.masterData.SelectedSyncBatchHistory && this.props.Login.masterData.SelectedSyncBatchHistory.nbatchtransferstatus === transactionStatus.FAIL_43) {\r\n            activeIconCSS = \"\";\r\n        }\r\n        const filterParam = {\r\n            inputListName: \"SyncBatchHistory\", selectedObject: \"SelectedSyncBatchHistory\", primaryKeyField: \"nsyncbatchcode\",\r\n            fetchUrl: \"synchistory/getSyncHistory\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, searchFieldList: this.searchFieldList\r\n        };\r\n\r\n        const syncId = this.state.controlMap.has(\"StartSync\") && this.state.controlMap.get(\"StartSync\").ncontrolcode;\r\n        //console.log(\"syncID:\", this.props.Login.userRoleControlRights, this.state.controlMap, syncId);\r\n       \r\n       // console.log(\"data:\", this.props.Login.masterData);\r\n        return (<>\r\n            {/* Start of get display*/}\r\n            <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\">\r\n                <Row noGutters>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                        <ListMaster\r\n                            screenName={this.props.intl.formatMessage({ id: \"IDS_SYNCHISTORY\" })}\r\n                            masterData={this.props.Login.masterData}\r\n                            userInfo={this.props.Login.userInfo}\r\n                            masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.SyncBatchHistory}\r\n                            getMasterDetail={(syncData) => this.props.getSyncHistoryDetail(syncData, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                            selectedMaster={this.props.Login.masterData.SelectedSyncBatchHistory}\r\n                            primaryKeyField=\"nsyncbatchcode\"\r\n                            mainField=\"sdestinationsitename\"\r\n                            //firstField=\"sbatchtransferid\"\r\n                            firstField='sbatchstartdatetime'\r\n                            secondField=\"sbatchfinalstatus\"\r\n                            filterColumnData={this.props.filterColumnData}\r\n                            filterParam={filterParam}\r\n                            userRoleControlRights={this.state.userRoleControlRights}\r\n                            syncId={syncId}\r\n                            searchRef={this.searchRef}\r\n                            reloadData={this.reloadData}\r\n                            openModal={() => this.props.SyncRecords(this.props.Login.userInfo)}\r\n                            isMultiSelecct={false}\r\n                            hidePaging={false}\r\n                            isClearSearch={this.props.Login.isClearSearch}\r\n                        />\r\n                        {/* </div>\r\n                        </Col></Row> */}\r\n                    </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        {/* <Row>\r\n                            <Col md={12}> */}\r\n                        <ContentPanel className=\"panel-main-content\">\r\n                            <Card className=\"border-0\">\r\n                                {this.props.Login.masterData.SyncBatchHistory && this.props.Login.masterData.SyncBatchHistory.length > 0 && this.props.Login.masterData.SelectedSyncBatchHistory ?\r\n                                    <>\r\n                                        <Card.Header>\r\n                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {this.props.Login.masterData.SelectedSyncBatchHistory.sdestinationsitename}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                                <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                        <span className={`btn btn-outlined ${syncStatusCSS} btn-sm ml-3`}>\r\n                                                            {activeIconCSS !== \"\" ? <i class={activeIconCSS}></i> : \"\"}\r\n                                                            {this.props.Login.masterData.SelectedSyncBatchHistory.sbatchtransferstatus}\r\n                                                            {/* <FormattedMessage id= {this.props.Login.masterData.SelectedSyncBatchHistory.sactivestatus}/> */}\r\n\r\n                                                        </span>\r\n                                                    </h2>\r\n                                                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                    <div className=\"d-inline\">\r\n                                                       \r\n\r\n                                                   \r\n                                                    </div>\r\n                                                    {/* </Tooltip> */}\r\n                                                </div>\r\n\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">  \r\n                                            <Row> \r\n                                            {this.props.Login.masterData.Synchronization === null? \"\":\r\n                                                    <>\r\n                                                     <Col md={3}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_LASTSYNCDATETIME\" message=\"Last Successful Sync Date & Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.Synchronization.slastsyncdatetime}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                                    <Col md={3}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_SYNCDATETIME\" message=\"Sync Date & Time\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.Synchronization.ssyncdatetime}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col></>\r\n                                                }       \r\n                                                    <Col md={6}>\r\n                                                        <FormGroup>\r\n                                                            <FormLabel><FormattedMessage id=\"IDS_BATCHTRANSFERID\" message=\"Batch Transfer ID\" /></FormLabel>\r\n                                                            <ReadOnlyText>\r\n                                                                {this.props.Login.masterData.SelectedSyncBatchHistory.sbatchtransferid}\r\n                                                            </ReadOnlyText>\r\n                                                        </FormGroup>\r\n                                                    </Col>\r\n                                               \r\n                                                </Row>    \r\n                                            \r\n                                                                            \r\n                                            <Row>\r\n                                                <Col md={3}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_BATCHTRANSFERSTATUS\" message=\"Batch Transfer Status\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedSyncBatchHistory.sbatchtransferstatus}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md={3}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_SYNCTYPE\" message=\"Sync Type\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedSyncBatchHistory.ssynctype}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md={3}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_BATCHFINALSTATUS\" message=\"Batch Final Status\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedSyncBatchHistory.sbatchfinalstatus}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md={3}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_BATCHSTARTDATETIME\" message=\"Batch Start Date & Time\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedSyncBatchHistory.sbatchstartdatetime}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md={3}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_BATCHENDDATETIME\" message=\"Batch End Date & Time\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedSyncBatchHistory.sbatchenddatetime}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                            {this.props.Login.masterData.SelectedSyncBatchHistory.serrormsg !== '' ?\r\n                                            <Col md={12}>\r\n                                                    <FormGroup>\r\n                                                        <FormLabel><FormattedMessage id=\"IDS_FAILUREMSG\" message=\"Failure Message\" /></FormLabel>\r\n                                                        <ReadOnlyText>\r\n                                                            {this.props.Login.masterData.SelectedSyncBatchHistory.serrormsg}\r\n                                                        </ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            :\"\"}\r\n                                            </Row>\r\n                                          \r\n                                            <Row noGutters={true}>\r\n                                                <Col md={12}>\r\n                                                    <DataGrid\r\n                                                        primaryKeyField={\"nsynchistorycode\"}\r\n                                                        data={this.state.data}\r\n                                                        dataResult={this.state.dataResult}\r\n                                                        //dataResult={this.props.Login.masterData[\"SyncHistory\"]||[]}\r\n                                                        dataState={this.state.dataState}\r\n                                                        dataStateChange={this.dataStateChange}\r\n                                                        extractedColumnList={this.extractedColumnList}\r\n                                                        controlMap={this.state.controlMap}\r\n                                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                                        inputParam={this.props.Login.inputParam}\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                       // gridHeight = {'600px'}\r\n                                                      //  methodUrl=\"SyncHistory\"\r\n                                                      //  fetchRecord={props.getUserMultiRoleComboDataService}\r\n                                                     //   editParam={roleEditParam}\r\n                                                     //   deleteRecord={props.deleteRecord} \r\n                                                      //  deleteParam={roleDeleteParam}                                                                                          \r\n                                                        pageable={true}\r\n                                                        scrollable={\"auto\"}\r\n                                                        isActionRequired={false}\r\n                                                        isToolBarRequired={false}\r\n                                                        selectedId={this.props.Login.selectedId}\r\n                                                        hideColumnFilter={false}\r\n                                                        groupable={true}\r\n                                                    />\r\n                                                </Col>\r\n                                            </Row>\r\n\r\n                                        </Card.Body>\r\n                                    </>\r\n                                    : \"\"\r\n                                }\r\n                            </Card>\r\n                        </ContentPanel>\r\n                    </Col></Row>\r\n                {/* </Col>\r\n                </Row> */}\r\n            </div>\r\n\r\n            {/* End of get display*/}          \r\n        </>\r\n        );\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n      \r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n       \r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData[\"SyncHistory\"],\r\n                dataResult: process(this.props.Login.masterData[\"SyncHistory\"]||[], this.state.dataState),\r\n            });\r\n        }\r\n        else {   \r\n            if (this.props.Login.masterData !== previousProps.Login.masterData) {     \r\n                let {dataState} = this.state;\r\n                if(this.props.Login.dataState === undefined){\r\n                    dataState = {skip:0, take:this.state.dataState.take}\r\n                }\r\n                if(this.state.dataResult.data){\r\n                    if(this.state.dataResult.data.length ===1){\r\n                        let skipcount = this.state.dataState.skip > 0 ?(this.state.dataState.skip-this.state.dataState.take):\r\n                        this.state.dataState.skip\r\n                        dataState={skip:skipcount,take:this.state.dataState.take}\r\n                    }\r\n                }\r\n                this.setState({\r\n                    data: this.props.Login.masterData[\"SyncHistory\"] ||[], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult: process(this.props.Login.masterData[\"SyncHistory\"] || [], dataState),\r\n                    dataState\r\n                });\r\n            }\r\n            else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n                        this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n                    }\r\n        }  \r\n    }     \r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    // componentDidUpdate(previousProps) {        \r\n    //     if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n    //         if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n    //             const userRoleControlRights = [];\r\n    //             if (this.props.Login.userRoleControlRights) {\r\n    //                 this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n    //                     userRoleControlRights.push(item.ncontrolcode))\r\n    //             }\r\n    //             const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n    //             this.setState({\r\n    //                 userRoleControlRights, controlMap, data: this.props.Login.masterData[\"SyncHistory\"],\r\n    //                 dataResult: process(this.props.Login.masterData[\"SyncHistory\"]||[], this.state.dataState),\r\n    //             });\r\n    //         }\r\n    //         else {        \r\n    //             let {dataState} = this.state;\r\n    //             if(this.props.Login.dataState === undefined){\r\n    //                 dataState = {skip:0, take:this.state.dataState.take}\r\n    //             }\r\n    //              if(this.state.dataResult.data){\r\n    //                  if(this.state.dataResult.data.length ===1){\r\n    //                     let skipcount = this.state.dataState.skip > 0 ?(this.state.dataState.skip-this.state.dataState.take):\r\n    //                     this.state.dataState.skip\r\n    //                      dataState={skip:skipcount,take:this.state.dataState.take}\r\n    //                  }\r\n    //              }\r\n    //             this.setState({\r\n    //                 data: this.props.Login.masterData[\"SyncHistory\"] ||[], selectedRecord: this.props.Login.selectedRecord,\r\n    //                 dataResult: process(this.props.Login.masterData[\"SyncHistory\"] || [], dataState),\r\n    //                 dataState\r\n    //             });\r\n    //         }  \r\n    //     }\r\n    //     else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n    //         this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n    //     }\r\n    // }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData = () => {\r\n        //ALPD-4803 done by Dhanushya RI,To check searchref key is present or not\r\n        if (this.searchRef && this.searchRef.current) {\r\n            this.searchRef.current.value = \"\";\r\n          }\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: \"synchistory\",\r\n            methodUrl: \"SyncHistory\",\r\n            displayName: this.props.intl.formatMessage({id:\"IDS_SYNCHISTORY\"}),\r\n            userInfo: this.props.Login.userInfo,\r\n            isClearSearch: this.props.Login.isClearSearch\r\n\r\n        };\r\n\r\n        this.props.callService(inputParam);\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {filterColumnData,\r\n    callService, crudMaster, updateStore, getSyncHistoryDetail, SyncRecords\r\n})(injectIntl(SyncHistory));\r\n\r\n"]},"metadata":{},"sourceType":"module"}