{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\configurationmaster\\\\HolidayPlannerTab.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { process } from '@progress/kendo-data-query';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport AddCommonHolidays from '../configurationmaster/AddCommonHolidays';\nimport AddPublicHolidays from '../configurationmaster/AddPublicHolidays';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, formatInputDate } from '../../components/CommonScript';\nimport Esign from '../audittrail/Esign';\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\nimport HolidayPlannerTabsAccordion from '../configurationmaster/HolidayPlannerTabsAccordion';\nimport CommonHolidaysTab from '../configurationmaster/CommonHolidaysTab';\nimport PublicHolidaysTab from '../configurationmaster/PublicHolidaysTab';\nimport { transactionStatus } from '../../components/Enumeration';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport ReactTooltip from 'react-tooltip';\n\nclass HolidayPlannerTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.PublicHolidays, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.ConfirmDelete = obj => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.Delete(obj));\n    };\n\n    this.holidayYearVersionAccordion = yearVersion => {\n      const accordionMap = new Map();\n      yearVersion.map(version => accordionMap.set(version.nholidayyearversion, /*#__PURE__*/React.createElement(HolidayPlannerTabsAccordion, {\n        version: version,\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        userInfo: this.props.userInfo,\n        sendApproveYearVersion: this.approveVersion,\n        ConfirmDelete: this.ConfirmDelete,\n        masterData: this.props.masterData // deleteRecord={this.Delete}\n        ,\n        tabDetail: this.tabDetail(version),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 17\n        }\n      })));\n      return accordionMap;\n    };\n\n    this.tabDetail = version => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_COMMONHOLIDAYS\", /*#__PURE__*/React.createElement(CommonHolidaysTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \"IDS_COMMONHOLIDAYS\",\n        getCommonHolidays: this.sendCommonHolidays,\n        masterData: this.props.masterData,\n        version: version,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 42\n        }\n      }));\n      tabMap.set(\"IDS_PUBLICHOLIDAYS\", /*#__PURE__*/React.createElement(PublicHolidaysTab, {\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        userInfo: this.props.userInfo,\n        screenName: \"IDS_PUBLICHOLIDAYS\",\n        getPublicHolidays: this.getPublicHolidays,\n        masterData: this.props.masterData,\n        version: version,\n        dataResult: process(this.state.PublicHolidays || [], this.state.dataState),\n        dataState: this.state.dataState,\n        dataStateChange: this.dataStateChange,\n        publicHolidaysColumns: this.publicHolidaysColumns,\n        deleteRecord: this.Delete,\n        selectedId: this.props.selectedId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 42\n        }\n      }));\n      return tabMap;\n    };\n\n    this.getPublicHolidays = inputParam => {\n      if (this.props.masterData.selectedYearVersion.ntransactionstatus === transactionStatus.DRAFT) {\n        this.props.getPublicHolidays(inputParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTVERSION\"\n        }));\n      }\n    };\n\n    this.sendCommonHolidays = (screenName, operation, masterData, userInfo, editID) => {\n      // if (masterData.selectedYearVersion && masterData.selectedYearVersion.ntransactionstatus === transactionStatus.APPROVED) {\n      //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\n      // }\n      // else {\n      this.props.getCommonHolidays(screenName, operation, masterData, userInfo, editID); // }\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (fieldName === \"ntzddate\") {\n        if (comboData === null) {\n          selectedRecord[\"ntzddate\"] = 0;\n          selectedRecord[\"stzddate\"] = \"\";\n        } else {\n          selectedRecord[\"stzddate\"] = comboData.label;\n        }\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.loadEsign;\n      let openChildModal = this.props.openChildModal;\n      let selectedRecord = this.props.selectedRecord;\n\n      if (this.props.loadEsign) {\n        if (this.props.operation === \"delete\") {\n          loadEsign = false;\n          openChildModal = false;\n        } else {\n          if (this.props.screenName === \"HolidayYearVersion\") {\n            openChildModal = false;\n          }\n\n          loadEsign = false;\n        }\n      } else {\n        openChildModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === 'ntransactionstatus') {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\n        } else if (event.target.name === \"agree\") {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        }\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.approveVersion = (yearVersion, approveYearVersion) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.userInfo;\n      inputData[\"holidayyearversion\"] = {\n        \"nyearcode\": yearVersion.nyearcode,\n        \"nholidayyearversion\": yearVersion.nholidayyearversion,\n        \"ntransactionstatus\": yearVersion.ntransactionstatus\n      };\n      const inputParam = {\n        classUrl: this.props.inputParam.classUrl,\n        methodUrl: \"HolidayYearVersion\",\n        inputData: inputData,\n        operation: approveYearVersion.operation\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, approveYearVersion.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: approveYearVersion.screenName,\n            operation: approveYearVersion.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputParam = {};\n      let validDate = false; // if (this.props.masterData.selectedYearVersion && this.props.masterData.selectedYearVersion.stransdisplaystatus === intl.formatMessage({ id: \"IDS_APPROVED\" })) {\n      //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\n      // }\n      // else {\n\n      if (this.props.screenName === \"IDS_COMMONHOLIDAYS\") {\n        validDate = true;\n        inputParam = this.UpdateCommonHolidays(saveType, formRef);\n      } else if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\") {\n        let year = new Date(this.state.selectedRecord[\"ddate\"]).getFullYear();\n        validDate = String(year).length === 4 && String(year) === this.props.masterData.selectedYear.syear ? true : false;\n        inputParam = this.SavePublicHolidays(saveType, formRef);\n      }\n\n      if (validDate) {\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_INVALIDDATE\"\n        }));\n      } // }\n\n    };\n\n    this.addVersion = addParam => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.userInfo;\n      let fieldList = [\"nholidayyearversion\", \"nversioncode\"];\n\n      if (this.props.operation === \"update\") {\n        inputData[\"holidayyearversion\"] = {\n          \"nyearcode\": this.props.masterData.selectedYear.nyearcode\n        };\n        fieldList.map(item => {\n          return inputData[\"holidayyearversion\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n        });\n      } else {\n        inputData[\"holidayyearversion\"] = {\n          \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n          \"nversioncode\": 0\n        };\n      }\n\n      const inputParam = {\n        classUrl: this.props.inputParam.classUrl,\n        methodUrl: \"HolidayYearVersion\",\n        inputData: inputData,\n        operation: \"create\",\n        saveType: addParam.saveType\n      };\n\n      if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, addParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.masterData\n            },\n            openChildModal: true,\n            screenName: addParam.screenName,\n            operation: addParam.operation,\n            saveType: addParam.saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n      } // this.props.crudMaster(inputParam, this.props.masterData);\n\n    };\n\n    this.Delete = deleteParam => {\n      let inputData = [];\n\n      if (this.props.masterData.selectedYearVersion && this.props.masterData.selectedYearVersion.ntransactionstatus !== transactionStatus.DRAFT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\"\n        }));\n      } else {\n        inputData[deleteParam.methodUrl.toLowerCase()] = deleteParam.selectedRecord;\n        inputData[\"userinfo\"] = this.props.userInfo;\n        const inputParam = {\n          methodUrl: deleteParam.methodUrl,\n          classUrl: this.props.inputParam.classUrl,\n          inputData: inputData,\n          operation: \"delete\",\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.masterData\n              },\n              openChildModal: true,\n              screenName: deleteParam.screenName,\n              operation: deleteParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.masterData\n                },\n                openChildModal: true,\n                screenName: deleteParam.screenName,\n                operation: deleteParam.operation\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\n          }\n        }\n      } //this.props.crudMaster(inputParam, this.props.masterData);\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openChildModal\");\n    };\n\n    const dataState = {\n      skip: 0,\n      take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n    };\n    this.state = {\n      versionSelectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      CommonHolidays: this.props.masterData.CommonHolidays,\n      PublicHolidays: this.props.masterData.PublicHolidays,\n      Country: [],\n      CurrentYearVersion: this.props.masterData.CurrentYearVersion,\n      activeTab: 'common-tab',\n      selectedRecord: {}\n    };\n    this.publicHolidaysColumns = [{\n      \"idsName\": \"IDS_DATE\",\n      \"dataField\": \"sdate\",\n      \"width\": \"150px\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"width\": \"400px\"\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  render() {\n    this.mandatoryPublicHolidaysColumns = [{\n      \"idsName\": \"IDS_DATE\",\n      \"dataField\": \"ddate\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntzddate\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_DESCRIPTION\",\n      \"dataField\": \"sdescription\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const addYearVersionId = this.props.controlMap.has(\"AddHolidayYearVersion\") && this.props.controlMap.get(\"AddHolidayYearVersion\").ncontrolcode; // const deleteYearVersionId = this.props.controlMap.has(\"DeleteHolidayYearVersion\") && this.props.controlMap.get(\"DeleteHolidayYearVersion\").ncontrolcode\n    // const addCommonHolidaysId = this.props.controlMap.has(\"AddCommonHolidays\") && this.props.controlMap.get(\"AddCommonHolidays\").ncontrolcode\n    // const editCommonHolidaysId = this.props.controlMap.has(\"EditCommonHolidays\") && this.props.controlMap.get(\"EditCommonHolidays\").ncontrolcode;\n    // const deleteCommonHolidaysId = this.props.controlMap.has(\"DeleteCommonHolidays\") && this.props.controlMap.get(\"DeleteCommonHolidays\").ncontrolcode\n    // const addPublicHolidaysId = this.props.controlMap.has(\"AddPublicHolidays\") && this.props.controlMap.get(\"AddPublicHolidays\").ncontrolcode\n    // const editPublicHolidaysId = this.props.controlMap.has(\"EditPublicHolidays\") && this.props.controlMap.get(\"EditPublicHolidays\").ncontrolcode;\n    // const deletePublicHolidaysId = this.props.controlMap.has(\"DeletePublicHolidays\") && this.props.controlMap.get(\"DeletePublicHolidays\").ncontrolcode\n\n    const AddYearVersionParam = {\n      screenName: \"HolidayYearVersion\",\n      operation: \"create\",\n      inputParam: this.props.inputParam,\n      userInfo: this.props.userInfo,\n      ncontrolCode: addYearVersionId,\n      saveType: 1\n    };\n    const mandatoryFields = [];\n\n    if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\") {\n      this.mandatoryPublicHolidaysColumns.forEach(item => item.mandatory === true ? mandatoryFields.push(item) : \"\");\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"add-txt-btn\" // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDVERSION\" })}\n      ,\n      hidden: this.props.userRoleControlRights.indexOf(addYearVersionId) === -1,\n      onClick: e => this.addVersion(AddYearVersionParam),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 37\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_VERSION\",\n      defaultMessage: \"Version\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 37\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, this.props.masterData.YearVersion && this.props.masterData.YearVersion.length > 0 ? /*#__PURE__*/React.createElement(CustomAccordion, {\n      key: \"filter\",\n      accordionTitle: \"sversionno\",\n      accordionComponent: this.holidayYearVersionAccordion(this.props.masterData.YearVersion),\n      inputParam: {\n        masterData: this.props.masterData,\n        userInfo: this.props.userInfo\n      },\n      accordionClick: this.props.getCommonAndPublicHolidays,\n      accordionPrimaryKey: \"nholidayyearversion\",\n      accordionObjectName: \"version\",\n      selectedKey: this.props.masterData.selectedYearVersion.nholidayyearversion,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.openChildModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.openChildModal,\n      closeModal: this.closeModal,\n      operation: this.props.operation,\n      inputParam: this.props.inputParam,\n      screenName: this.props.screenName,\n      onSaveClick: this.onSaveClick,\n      updateStore: this.props.updateStore,\n      esign: this.props.loadEsign,\n      showSaveContinue: this.props.screenName === \"IDS_PUBLICHOLIDAYS\" ? true : false,\n      validateEsign: this.validateEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      addComponent: this.props.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }\n      }) : this.props.screenName === \"IDS_COMMONHOLIDAYS\" ? /*#__PURE__*/React.createElement(AddCommonHolidays, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.inputParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 33\n        }\n      }) : this.props.screenName === \"IDS_PUBLICHOLIDAYS\" ? /*#__PURE__*/React.createElement(AddPublicHolidays, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        handleDateChange: this.handleDateChange,\n        onComboChange: this.onComboChange,\n        timeZoneList: this.props.timeZoneList || [],\n        userInfo: this.props.userInfo,\n        minDate: new Date(\"01-01-\" + this.props.masterData.selectedYear.syear),\n        maxDate: new Date(\"12-31-\" + this.props.masterData.selectedYear.syear),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 37\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  UpdateCommonHolidays(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo;\n    let fieldList = [\"nmonday\", \"ntuesday\", \"nwednesday\", \"nthursday\", \"nfriday\", \"nsaturday\", \"nsunday\"];\n\n    if (this.props.operation === \"update\") {\n      inputData[\"commonholidays\"] = {\n        \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n        \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion,\n        \"ncommonholidaycode\": this.props.masterData.CommonHolidays[0].ncommonholidaycode\n      };\n      fieldList.map(item => {\n        return inputData[\"commonholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      });\n    }\n\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"CommonHolidays\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef\n    };\n    return inputParam;\n  }\n\n  SavePublicHolidays(saveType, formRef) {\n    let inputData = [];\n    inputData[\"userinfo\"] = this.props.userInfo; // let fieldList = [\"npublicholidaycode\", \"ddate\", \"sdescription\"];\n\n    if (this.props.operation === \"update\") {\n      inputData[\"publicholidays\"] = {\n        \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n        \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\n      }; // fieldList.map(item => {\n      //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\n      // })\n\n      inputData[\"publicholidays\"][\"npublicholidaycode\"] = this.state.selectedRecord[\"npublicholidaycode\"] ? this.state.selectedRecord[\"npublicholidaycode\"] : 0;\n      inputData[\"publicholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\n      inputData[\"publicholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\n      inputData[\"publicholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\n      inputData[\"publicholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\n    } else {\n      inputData[\"publicholidays\"] = {\n        \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\n        \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\n      }; // fieldList.map(item => {\n      //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item]\n      // })\n\n      inputData[\"publicholidays\"][\"npublicholidaycode\"] = this.state.selectedRecord[\"npublicholidaycode\"] ? this.state.selectedRecord[\"npublicholidaycode\"] : 0;\n      inputData[\"publicholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\n      inputData[\"publicholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\n      inputData[\"publicholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\n      inputData[\"publicholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\n    }\n\n    const publicHolidayDate = inputData[\"publicholidays\"][\"ddate\"]; //need this conversion when the datatype of the field is 'Instant'\n\n    inputData[\"publicholidays\"][\"ddate\"] = formatInputDate(publicHolidayDate, false);\n    const inputParam = {\n      classUrl: this.props.inputParam.classUrl,\n      methodUrl: \"PublicHolidays\",\n      inputData: inputData,\n      operation: this.props.operation,\n      saveType,\n      formRef\n    };\n    return inputParam; //this.props.crudMaster(inputParam, this.props.masterData);\n  } // Delete = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\n\n\n  componentDidUpdate(previousProps) {\n    if (this.props.masterData !== previousProps.masterData) {\n      let selectedRecord = this.props.selectedRecord || this.state.selectedRecord;\n      let {\n        dataState\n      } = this.state;\n\n      if (this.props.dataState === undefined) {\n        dataState = {\n          skip: 0,\n          take: this.props.settings ? parseInt(this.props.settings[14]) : 5\n        };\n      }\n\n      if (this.props.operation === \"create\" && this.props.inputParam.saveType === 2) {\n        this.props.inputParam.formRef && this.props.inputParam.formRef.current.reset();\n        selectedRecord = {\n          ddate: new Date(),\n          sdescription: '',\n          ntzddate: {\n            \"value\": this.props.userInfo.ntimezonecode,\n            \"label\": this.props.userInfo.stimezoneid\n          },\n          stzddate: this.props.userInfo.stimezoneid\n        };\n      }\n\n      this.setState({\n        YearVersion: this.props.masterData.YearVersion,\n        CommonHolidays: this.props.masterData.CommonHolidays,\n        CurrentYearVersion: this.props.masterData.CurrentYearVersion,\n        PublicHolidays: this.props.masterData.PublicHolidays,\n        dataState,\n        selectedRecord\n      });\n    } else if (this.props.selectedRecord !== previousProps.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.selectedRecord\n      });\n    }\n  }\n\n}\n\nexport default injectIntl(HolidayPlannerTab);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/configurationmaster/HolidayPlannerTab.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormattedMessage","injectIntl","FontAwesomeIcon","faPlus","process","SlideOutModal","AddCommonHolidays","AddPublicHolidays","DEFAULT_RETURN","showEsign","formatInputDate","Esign","CustomAccordion","HolidayPlannerTabsAccordion","CommonHolidaysTab","PublicHolidaysTab","transactionStatus","toast","ConfirmMessage","ReactTooltip","HolidayPlannerTab","constructor","props","dataStateChange","event","setState","dataResult","state","PublicHolidays","dataState","ConfirmDelete","obj","confirmMessage","confirm","intl","formatMessage","id","Delete","holidayYearVersionAccordion","yearVersion","accordionMap","Map","map","version","set","nholidayyearversion","userRoleControlRights","controlMap","userInfo","approveVersion","masterData","tabDetail","onTabChange","tabMap","inputParam","sendCommonHolidays","getPublicHolidays","publicHolidaysColumns","selectedId","selectedYearVersion","ntransactionstatus","DRAFT","warn","screenName","operation","editID","getCommonHolidays","onComboChange","comboData","fieldName","selectedRecord","label","tabProps","updateInfo","typeName","data","updateStore","closeModal","loadEsign","openChildModal","handleDateChange","dateName","dateValue","onInputOnChange","target","type","name","checked","ACTIVE","DEACTIVE","YES","NO","value","approveYearVersion","inputData","nyearcode","classUrl","methodUrl","esignRights","nformcode","ncontrolCode","screenData","crudMaster","onSaveClick","saveType","formRef","validDate","UpdateCommonHolidays","year","Date","getFullYear","String","length","selectedYear","syear","SavePublicHolidays","addVersion","addParam","fieldList","item","deleteParam","toLowerCase","validateEsign","sreason","password","validateEsignCredential","skip","take","settings","parseInt","versionSelectedRecord","CommonHolidays","Country","CurrentYearVersion","activeTab","render","mandatoryPublicHolidaysColumns","addYearVersionId","has","get","ncontrolcode","AddYearVersionParam","mandatoryFields","forEach","mandatory","push","indexOf","e","YearVersion","getCommonAndPublicHolidays","timeZoneList","ncommonholidaycode","publicHolidayDate","componentDidUpdate","previousProps","undefined","current","reset","ddate","sdescription","ntzddate","ntimezonecode","stimezoneid","stzddate"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport AddCommonHolidays from '../configurationmaster/AddCommonHolidays';\r\nimport AddPublicHolidays from '../configurationmaster/AddPublicHolidays';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign, formatInputDate } from '../../components/CommonScript';\r\nimport Esign from '../audittrail/Esign';\r\nimport CustomAccordion from '../../components/custom-accordion/custom-accordion.component';\r\nimport HolidayPlannerTabsAccordion from '../configurationmaster/HolidayPlannerTabsAccordion';\r\nimport CommonHolidaysTab from '../configurationmaster/CommonHolidaysTab';\r\nimport PublicHolidaysTab from '../configurationmaster/PublicHolidaysTab';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nclass HolidayPlannerTab extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.settings ? parseInt(this.props.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            versionSelectedRecord: {}, dataResult: [],\r\n            dataState: dataState, CommonHolidays: this.props.masterData.CommonHolidays,\r\n            PublicHolidays: this.props.masterData.PublicHolidays, Country: [],\r\n            CurrentYearVersion: this.props.masterData.CurrentYearVersion,\r\n            activeTab: 'common-tab', selectedRecord: {}\r\n        };\r\n        this.publicHolidaysColumns = [\r\n            { \"idsName\": \"IDS_DATE\", \"dataField\": \"sdate\", \"width\": \"150px\" },\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"width\": \"400px\" }\r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.PublicHolidays, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        this.mandatoryPublicHolidaysColumns = [\r\n            { \"idsName\": \"IDS_DATE\", \"dataField\": \"ddate\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            { \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzddate\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"},\r\n            { \"idsName\": \"IDS_DESCRIPTION\", \"dataField\": \"sdescription\", \"mandatory\": true , \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\"}\r\n        ];\r\n\r\n        const addYearVersionId = this.props.controlMap.has(\"AddHolidayYearVersion\") && this.props.controlMap.get(\"AddHolidayYearVersion\").ncontrolcode\r\n\r\n        // const deleteYearVersionId = this.props.controlMap.has(\"DeleteHolidayYearVersion\") && this.props.controlMap.get(\"DeleteHolidayYearVersion\").ncontrolcode\r\n\r\n\r\n        // const addCommonHolidaysId = this.props.controlMap.has(\"AddCommonHolidays\") && this.props.controlMap.get(\"AddCommonHolidays\").ncontrolcode\r\n        // const editCommonHolidaysId = this.props.controlMap.has(\"EditCommonHolidays\") && this.props.controlMap.get(\"EditCommonHolidays\").ncontrolcode;\r\n        // const deleteCommonHolidaysId = this.props.controlMap.has(\"DeleteCommonHolidays\") && this.props.controlMap.get(\"DeleteCommonHolidays\").ncontrolcode\r\n\r\n        // const addPublicHolidaysId = this.props.controlMap.has(\"AddPublicHolidays\") && this.props.controlMap.get(\"AddPublicHolidays\").ncontrolcode\r\n        // const editPublicHolidaysId = this.props.controlMap.has(\"EditPublicHolidays\") && this.props.controlMap.get(\"EditPublicHolidays\").ncontrolcode;\r\n        // const deletePublicHolidaysId = this.props.controlMap.has(\"DeletePublicHolidays\") && this.props.controlMap.get(\"DeletePublicHolidays\").ncontrolcode\r\n\r\n        const AddYearVersionParam = {\r\n            screenName: \"HolidayYearVersion\", operation: \"create\",\r\n            inputParam: this.props.inputParam, userInfo: this.props.userInfo, ncontrolCode: addYearVersionId,\r\n            saveType: 1\r\n        };\r\n\r\n        const mandatoryFields = [];\r\n        if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\") {\r\n            this.mandatoryPublicHolidaysColumns.forEach(item => item.mandatory === true ?\r\n                mandatoryFields.push(item) : \"\"\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                {/* <Row className=\"no-gutters\">\r\n                    <Col md={12}> */}\r\n                <Card className=\"at-tabs border-0\">\r\n                    <Row noGutters={true} >\r\n                        <Col md={12}>\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                                <Nav.Link className=\"add-txt-btn\"\r\n                                    // data-tip={this.props.intl.formatMessage({ id: \"IDS_ADDVERSION\" })}\r\n                                    hidden={this.props.userRoleControlRights.indexOf(addYearVersionId) === -1}\r\n                                    onClick={(e) => this.addVersion(AddYearVersionParam)}\r\n                                >\r\n                                    <FontAwesomeIcon icon={faPlus} /> { }\r\n                                    <FormattedMessage id='IDS_VERSION' defaultMessage='Version' />\r\n                                </Nav.Link>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/* <Row className=\"no-gutters text-right border-bottom pt-2 pb-2\" > */}\r\n                    {/* <Col md={4}> */}\r\n                    {/* <Nav.Link className=\"add-txt-btn\"\r\n                                        onClick={(e) => this.addVersion(AddYearVersionParam)}\r\n                                    >\r\n                                        <FontAwesomeIcon icon={faPlus} /> { }\r\n                                        <FormattedMessage id='IDS_ADDVERSION' defaultMessage='Add Version' />\r\n                                    </Nav.Link> */}\r\n                    {/* </Col> */}\r\n                    {/* </Row> */}\r\n                    <Row className=\"no-gutters\">\r\n                        <Col md={12}>\r\n                            {this.props.masterData.YearVersion && this.props.masterData.YearVersion.length > 0 ?\r\n                                <CustomAccordion key=\"filter\"\r\n                                    accordionTitle={\"sversionno\"}\r\n                                    accordionComponent={this.holidayYearVersionAccordion(this.props.masterData.YearVersion)}\r\n                                    inputParam={{ masterData: this.props.masterData, userInfo: this.props.userInfo }}\r\n                                    accordionClick={this.props.getCommonAndPublicHolidays}\r\n                                    accordionPrimaryKey={\"nholidayyearversion\"}\r\n                                    accordionObjectName={\"version\"}\r\n                                    selectedKey={this.props.masterData.selectedYearVersion.nholidayyearversion}\r\n                                />\r\n                                : \"\"}\r\n                        </Col>\r\n                    </Row>\r\n                </Card>\r\n                {/* </Col>\r\n                </Row> */}\r\n                {this.props.openChildModal &&\r\n                    <SlideOutModal show={this.props.openChildModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.operation}\r\n                        inputParam={this.props.inputParam}\r\n                        screenName={this.props.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        updateStore={this.props.updateStore}\r\n                        esign={this.props.loadEsign}\r\n                        showSaveContinue={this.props.screenName === \"IDS_PUBLICHOLIDAYS\" ? true : false}\r\n                        validateEsign={this.validateEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        addComponent={this.props.loadEsign ?\r\n                            <Esign operation={this.props.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.screenName === \"IDS_COMMONHOLIDAYS\" ?\r\n                                <AddCommonHolidays selectedRecord={this.state.selectedRecord || {}}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.inputParam}\r\n                                />\r\n                                : this.props.screenName === \"IDS_PUBLICHOLIDAYS\" ?\r\n                                    <AddPublicHolidays\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        timeZoneList={this.props.timeZoneList || []}\r\n                                        userInfo={this.props.userInfo}\r\n                                        minDate= {new Date(\"01-01-\"+this.props.masterData.selectedYear.syear)}\r\n                                        maxDate={new Date(\"12-31-\"+this.props.masterData.selectedYear.syear)}\r\n                                    />\r\n                                    : <></>\r\n                        }\r\n                    />}\r\n            </>\r\n        );\r\n    }\r\n    ConfirmDelete = (obj) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.Delete(obj));\r\n    }\r\n\r\n    holidayYearVersionAccordion = (yearVersion) => {\r\n        const accordionMap = new Map();\r\n        yearVersion.map((version) =>\r\n            accordionMap.set(version.nholidayyearversion,\r\n                <HolidayPlannerTabsAccordion version={version}\r\n                    userRoleControlRights={this.props.userRoleControlRights}\r\n                    controlMap={this.props.controlMap}\r\n                    userInfo={this.props.userInfo}\r\n                    sendApproveYearVersion={this.approveVersion}\r\n                    ConfirmDelete={this.ConfirmDelete}\r\n                    masterData={this.props.masterData}\r\n                    // deleteRecord={this.Delete}\r\n                    tabDetail={this.tabDetail(version)}\r\n                    onTabChange={this.onTabChange}\r\n                />)\r\n        )\r\n        return accordionMap;\r\n    }\r\n    tabDetail = (version) => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_COMMONHOLIDAYS\", <CommonHolidaysTab userRoleControlRights={this.props.userRoleControlRights}\r\n            controlMap={this.props.controlMap}\r\n            inputParam={this.props.inputParam}\r\n            userInfo={this.props.userInfo}\r\n            screenName={\"IDS_COMMONHOLIDAYS\"}\r\n            getCommonHolidays={this.sendCommonHolidays}\r\n            masterData={this.props.masterData}\r\n            version={version}\r\n        />)\r\n        tabMap.set(\"IDS_PUBLICHOLIDAYS\", <PublicHolidaysTab userRoleControlRights={this.props.userRoleControlRights}\r\n            controlMap={this.props.controlMap}\r\n            inputParam={this.props.inputParam}\r\n            userInfo={this.props.userInfo}\r\n            screenName={\"IDS_PUBLICHOLIDAYS\"}\r\n            getPublicHolidays={this.getPublicHolidays}\r\n            masterData={this.props.masterData}\r\n            version={version}\r\n            dataResult={process(this.state.PublicHolidays || [], this.state.dataState)}\r\n            dataState={this.state.dataState}\r\n            dataStateChange={this.dataStateChange}\r\n            publicHolidaysColumns={this.publicHolidaysColumns}\r\n            deleteRecord={this.Delete}\r\n            selectedId={this.props.selectedId}\r\n        />)\r\n        return tabMap;\r\n    }\r\n    getPublicHolidays = (inputParam) => {\r\n\r\n        if (this.props.masterData.selectedYearVersion.ntransactionstatus === transactionStatus.DRAFT) {\r\n            this.props.getPublicHolidays(inputParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTVERSION\" }))\r\n        }\r\n    }\r\n    sendCommonHolidays = (screenName, operation, masterData, userInfo, editID) => {\r\n        // if (masterData.selectedYearVersion && masterData.selectedYearVersion.ntransactionstatus === transactionStatus.APPROVED) {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\r\n        // }\r\n        // else {\r\n        this.props.getCommonHolidays(screenName, operation, masterData, userInfo, editID);\r\n        // }\r\n\r\n    }\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        if (fieldName === \"ntzddate\") {\r\n            if (comboData === null) {\r\n                selectedRecord[\"ntzddate\"] = 0;\r\n                selectedRecord[\"stzddate\"] = \"\";\r\n            }\r\n            else {\r\n                selectedRecord[\"stzddate\"] = comboData.label;\r\n            }\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.loadEsign;\r\n        let openChildModal = this.props.openChildModal;\r\n        let selectedRecord = this.props.selectedRecord;\r\n        if (this.props.loadEsign) {\r\n            if (this.props.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openChildModal = false;\r\n            }\r\n            else {\r\n                if (this.props.screenName === \"HolidayYearVersion\") {\r\n                    openChildModal = false;\r\n                }\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openChildModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openChildModal, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === 'ntransactionstatus') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            }\r\n            else if (event.target.name === \"agree\") {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n\r\n        }\r\n\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    approveVersion = (yearVersion, approveYearVersion) => {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        inputData[\"holidayyearversion\"] = { \"nyearcode\": yearVersion.nyearcode, \"nholidayyearversion\": yearVersion.nholidayyearversion, \"ntransactionstatus\": yearVersion.ntransactionstatus };\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"HolidayYearVersion\",\r\n            inputData: inputData,\r\n            operation: approveYearVersion.operation\r\n        }\r\n\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, approveYearVersion.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: approveYearVersion.screenName, operation: approveYearVersion.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n        }\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        let inputParam = {};\r\n        let validDate = false;\r\n        // if (this.props.masterData.selectedYearVersion && this.props.masterData.selectedYearVersion.stransdisplaystatus === intl.formatMessage({ id: \"IDS_APPROVED\" })) {\r\n        //     toast.warn(intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\r\n        // }\r\n        // else {\r\n        if (this.props.screenName === \"IDS_COMMONHOLIDAYS\") {\r\n            validDate = true;\r\n            inputParam = this.UpdateCommonHolidays(saveType, formRef);\r\n        }\r\n        else if (this.props.screenName === \"IDS_PUBLICHOLIDAYS\") {\r\n            \r\n            let year= new Date(this.state.selectedRecord[\"ddate\"]).getFullYear()\r\n            validDate =  String(year).length===4 && String(year) === this.props.masterData.selectedYear.syear ? true : false;\r\n            inputParam = this.SavePublicHolidays(saveType, formRef);\r\n        }\r\n        if(validDate){\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, this.props.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n            }\r\n        }else{\r\n            toast.warn(this.props.intl.formatMessage({id:\"IDS_INVALIDDATE\"}))\r\n        }\r\n        // }\r\n    }\r\n    addVersion = (addParam) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nholidayyearversion\", \"nversioncode\"];\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"holidayyearversion\"] = { \"nyearcode\": this.props.masterData.selectedYear.nyearcode };\r\n            fieldList.map(item => {\r\n                return inputData[\"holidayyearversion\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n        }\r\n        else {\r\n\r\n            inputData[\"holidayyearversion\"] = { \"nyearcode\": this.props.masterData.selectedYear.nyearcode, \"nversioncode\": 0 };\r\n\r\n        }\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"HolidayYearVersion\",\r\n            inputData: inputData,\r\n            operation: \"create\", saveType: addParam.saveType\r\n        }\r\n\r\n\r\n        if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, addParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                    openChildModal: true, screenName: addParam.screenName, operation: addParam.operation, saveType: addParam.saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n        }\r\n        // this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    UpdateCommonHolidays(saveType, formRef) {\r\n\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        let fieldList = [\"nmonday\", \"ntuesday\", \"nwednesday\",\r\n            \"nthursday\", \"nfriday\", \"nsaturday\", \"nsunday\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"commonholidays\"] = {\r\n                \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\r\n                \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion, \"ncommonholidaycode\": this.props.masterData.CommonHolidays[0].ncommonholidaycode\r\n            };\r\n\r\n            fieldList.map(item => {\r\n                return inputData[\"commonholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            })\r\n        }\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"CommonHolidays\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef\r\n        }\r\n        return inputParam;\r\n\r\n    }\r\n    SavePublicHolidays(saveType, formRef) {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.userInfo;\r\n        // let fieldList = [\"npublicholidaycode\", \"ddate\", \"sdescription\"];\r\n\r\n        if (this.props.operation === \"update\") {\r\n\r\n            inputData[\"publicholidays\"] = {\r\n                \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\r\n                \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\r\n            };\r\n            // fieldList.map(item => {\r\n            //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item] ? this.state.selectedRecord[item] : \"\";\r\n            // })\r\n            inputData[\"publicholidays\"][\"npublicholidaycode\"] = this.state.selectedRecord[\"npublicholidaycode\"] ? this.state.selectedRecord[\"npublicholidaycode\"] : 0;\r\n            inputData[\"publicholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\r\n            inputData[\"publicholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\r\n\r\n            inputData[\"publicholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\r\n            inputData[\"publicholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\r\n        }\r\n        else {\r\n\r\n            inputData[\"publicholidays\"] = {\r\n                \"nyearcode\": this.props.masterData.selectedYear.nyearcode,\r\n                \"nholidayyearversion\": this.props.masterData.CommonHolidays[0].nholidayyearversion\r\n            };\r\n\r\n            // fieldList.map(item => {\r\n            //     return inputData[\"publicholidays\"][item] = this.state.selectedRecord[item]\r\n            // })\r\n\r\n            inputData[\"publicholidays\"][\"npublicholidaycode\"] = this.state.selectedRecord[\"npublicholidaycode\"] ? this.state.selectedRecord[\"npublicholidaycode\"] : 0;\r\n            inputData[\"publicholidays\"][\"ddate\"] = this.state.selectedRecord[\"ddate\"] ? this.state.selectedRecord[\"ddate\"] : 0;\r\n            inputData[\"publicholidays\"][\"sdescription\"] = this.state.selectedRecord[\"sdescription\"] ? this.state.selectedRecord[\"sdescription\"] : 0;\r\n\r\n            inputData[\"publicholidays\"][\"ntzddate\"] = this.state.selectedRecord[\"ntzddate\"] ? this.state.selectedRecord[\"ntzddate\"].value : -1;\r\n            inputData[\"publicholidays\"][\"stzddate\"] = this.state.selectedRecord[\"stzddate\"] || \"\";\r\n        }\r\n\r\n        const publicHolidayDate = inputData[\"publicholidays\"][\"ddate\"];\r\n        //need this conversion when the datatype of the field is 'Instant'\r\n        inputData[\"publicholidays\"][\"ddate\"] = formatInputDate(publicHolidayDate, false);\r\n\r\n        const inputParam = {\r\n            classUrl: this.props.inputParam.classUrl,\r\n            methodUrl: \"PublicHolidays\",\r\n            inputData: inputData,\r\n            operation: this.props.operation, saveType, formRef\r\n        }\r\n        return inputParam;\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    // Delete = (e, selectedRecord, Type, methodURL,operation,screenName, ncontrolCode) => {\r\n    Delete = (deleteParam) => {\r\n        let inputData = [];\r\n\r\n        if (this.props.masterData.selectedYearVersion && this.props.masterData.selectedYearVersion.ntransactionstatus !== transactionStatus.DRAFT) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTEDYEARVERSIONMUSTBEDRAFT\" }));\r\n        }\r\n        else {\r\n            inputData[deleteParam.methodUrl.toLowerCase()] = deleteParam.selectedRecord;\r\n            inputData[\"userinfo\"] = this.props.userInfo;\r\n            const inputParam = {\r\n                methodUrl: deleteParam.methodUrl,\r\n                classUrl: this.props.inputParam.classUrl,\r\n                inputData: inputData,\r\n                operation: \"delete\",\r\n                dataState: this.state.dataState\r\n            }\r\n            if (showEsign(this.props.esignRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                        openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                if (showEsign(this.props.userRoleControlRights, this.props.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData: this.props.masterData },\r\n                            openChildModal: true, screenName: deleteParam.screenName, operation: deleteParam.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.masterData, \"openChildModal\");\r\n                }\r\n            }\r\n        }\r\n        //this.props.crudMaster(inputParam, this.props.masterData);\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.masterData !== previousProps.masterData) {\r\n\r\n            let selectedRecord = this.props.selectedRecord || this.state.selectedRecord;\r\n            let { dataState } = this.state;\r\n            if (this.props.dataState === undefined) {\r\n                dataState = { skip: 0, take: this.props.settings ? parseInt(this.props.settings[14]) : 5 }\r\n            }\r\n            if (this.props.operation === \"create\" && this.props.inputParam.saveType === 2) {\r\n\r\n                this.props.inputParam.formRef && this.props.inputParam.formRef.current.reset();\r\n                selectedRecord = {\r\n                    ddate: new Date(), sdescription: '',\r\n                    ntzddate: {\r\n                        \"value\": this.props.userInfo.ntimezonecode,\r\n                        \"label\": this.props.userInfo.stimezoneid\r\n                    },\r\n                    stzddate: this.props.userInfo.stimezoneid\r\n                };\r\n            }\r\n            this.setState({\r\n                YearVersion: this.props.masterData.YearVersion,\r\n                CommonHolidays: this.props.masterData.CommonHolidays,\r\n                CurrentYearVersion: this.props.masterData.CurrentYearVersion, PublicHolidays: this.props.masterData.PublicHolidays,\r\n                dataState, selectedRecord\r\n\r\n\r\n\r\n\r\n            });\r\n        }\r\n        else if (this.props.selectedRecord !== previousProps.selectedRecord) {\r\n            this.setState({ selectedRecord: this.props.selectedRecord });\r\n        }\r\n    }\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openChildModal\");\r\n    }\r\n}\r\nexport default injectIntl(HolidayPlannerTab);"]},"metadata":{},"sourceType":"module"}