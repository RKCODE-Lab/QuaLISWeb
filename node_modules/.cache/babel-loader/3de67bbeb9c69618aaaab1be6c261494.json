{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList, getComboLabelValue } from '../components/CommonScript';\nexport function getPortalRegistrationType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('plantportalregistrationmapping/getPortalRegistrationType', {\n      \"userinfo\": inputParam.userInfo\n    }).then(response => {\n      let selectedRecord = {};\n      let plantList = {};\n      let portalRegistrationTypeList = {};\n      let SelectedPortalRegistrationType = {};\n      let masterData = {};\n      const portalRegistrationType = constructOptionList(response.data.PortalRegistrationType || [], \"nportalregtypecode\", \"sportalregtypename\", undefined, undefined, false);\n      portalRegistrationTypeList = portalRegistrationType.get(\"OptionList\");\n      const plant = constructOptionList(response.data.PlantList || [], \"ndeptcode\", \"sdeptname\", undefined, undefined, false);\n      plantList = plant.get(\"OptionList\");\n      selectedRecord = {\n        nportalregtypecode: {\n          'label': response.data.SelectedPortalRegistrationType.sportalregtypename,\n          'value': response.data.SelectedPortalRegistrationType.nportalregtypecode\n        }\n      };\n      SelectedPortalRegistrationType = response.data.SelectedPortalRegistrationType;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          selectedRecord,\n          operation: inputParam.operation,\n          ncontrolcode: inputParam.ncontrolCode,\n          loading: false,\n          portalRegistrationTypeList,\n          plantList,\n          SelectedPortalRegistrationType\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getPlant(methodParam) {\n  return function (dispatch) {\n    let URL = [];\n    URL = rsapi.post(\"/plantportalregistrationmapping/getPlant\", {\n      \"userinfo\": methodParam.inputData.userinfo,\n      \"nportalregtypecode\": methodParam.inputData.nportalregtypecode\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL]).then(response => {\n      let plantList = {};\n      const plant = constructOptionList(response[0].data.PlantList || [], \"ndeptcode\", \"sdeptname\", undefined, undefined, false);\n      plantList = plant.get(\"OptionList\");\n      let selectedRecord = {\n        nportalregtypecode: methodParam.inputData.SelectedPortalRegistrationType\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          plantList,\n          SelectedPortalRegistrationType: methodParam.inputData.SelectedPortalRegistrationType,\n          selectedRecord,\n          loading: false,\n          data: undefined,\n          dataState: undefined\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getActivePortalRegistrationType(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let urlArray = [];\n    const getPortalregType = rsapi.post('plantportalregistrationmapping/getPortalRegistrationTypeFromActiveID', {\n      \"plantportalregistrationmapping\": { ...inputParam.editRow\n      },\n      \"userinfo\": inputParam.userInfo\n    });\n    const getActiveValue = rsapi.post('plantportalregistrationmapping/getActivePlantPortalRegistrationMappingById', {\n      \"userinfo\": inputParam.userInfo,\n      nportalregmappingcode: inputParam.primaryKeyValue\n    });\n    urlArray = [getPortalregType, getActiveValue];\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      let plantList = {};\n      let portalRegistrationTypeList = {};\n      let SelectedPortalRegistrationType = {};\n      const portalRegistrationType = constructOptionList(response[0].data.PortalRegistrationType || [], \"nportalregtypecode\", \"sportalregtypename\", undefined, undefined, false);\n      portalRegistrationTypeList = portalRegistrationType.get(\"OptionList\");\n      const plant = constructOptionList(response[0].data.PlantList || [], \"ndeptcode\", \"sdeptname\", undefined, undefined, false);\n      plantList = plant.get(\"OptionList\");\n      selectedRecord = {\n        nportalregtypecode: {\n          'label': response[1].data.sportalregtypename,\n          'value': response[1].data.nportalregtypecode\n        },\n        ndeptcode: {\n          'label': response[1].data.sdeptname,\n          'value': response[1].data.ndeptcode\n        }\n      };\n      SelectedPortalRegistrationType = response[1].data;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openModal: true,\n          selectedRecord,\n          operation: inputParam.operation,\n          ncontrolcode: inputParam.ncontrolCode,\n          loading: false,\n          portalRegistrationTypeList,\n          plantList,\n          SelectedPortalRegistrationType,\n          selectedId: inputParam.primaryKeyValue\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/PlantPortalRegistrationMappingAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","constructOptionList","getComboLabelValue","getPortalRegistrationType","inputParam","dispatch","post","userInfo","then","response","selectedRecord","plantList","portalRegistrationTypeList","SelectedPortalRegistrationType","masterData","portalRegistrationType","data","PortalRegistrationType","undefined","get","plant","PlantList","nportalregtypecode","sportalregtypename","type","payload","openModal","operation","ncontrolcode","ncontrolCode","loading","catch","error","status","message","warn","getPlant","methodParam","URL","inputData","userinfo","all","dataState","getActivePortalRegistrationType","urlArray","getPortalregType","editRow","getActiveValue","nportalregmappingcode","primaryKeyValue","ndeptcode","sdeptname","selectedId"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios'\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList, getComboLabelValue } from '../components/CommonScript';\r\n\r\n\r\nexport function getPortalRegistrationType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post('plantportalregistrationmapping/getPortalRegistrationType', { \"userinfo\": inputParam.userInfo })\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let plantList = {};\r\n                let portalRegistrationTypeList = {};\r\n                let SelectedPortalRegistrationType = {};\r\n                let masterData = {};\r\n                const portalRegistrationType = constructOptionList(response.data.PortalRegistrationType || [], \"nportalregtypecode\",\r\n                    \"sportalregtypename\", undefined, undefined, false);\r\n                portalRegistrationTypeList = portalRegistrationType.get(\"OptionList\");\r\n                const plant = constructOptionList(response.data.PlantList || [], \"ndeptcode\",\r\n                    \"sdeptname\", undefined, undefined, false);\r\n                plantList = plant.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    nportalregtypecode: { 'label': response.data.SelectedPortalRegistrationType.sportalregtypename, 'value': response.data.SelectedPortalRegistrationType.nportalregtypecode }\r\n                }\r\n                SelectedPortalRegistrationType = response.data.SelectedPortalRegistrationType\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        selectedRecord,\r\n                        operation: inputParam.operation,\r\n                        ncontrolcode: inputParam.ncontrolCode, loading: false, portalRegistrationTypeList, plantList, SelectedPortalRegistrationType\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getPlant(methodParam) {\r\n    return function (dispatch) {\r\n        let URL = [];\r\n        URL = rsapi.post(\"/plantportalregistrationmapping/getPlant\", { \"userinfo\": methodParam.inputData.userinfo, \"nportalregtypecode\": methodParam.inputData.nportalregtypecode })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL])\r\n            .then(response => {\r\n                let plantList = {};\r\n                const plant = constructOptionList(response[0].data.PlantList || [], \"ndeptcode\",\r\n                    \"sdeptname\", undefined, undefined, false);\r\n                plantList = plant.get(\"OptionList\");\r\n                let selectedRecord = {\r\n                    nportalregtypecode: methodParam.inputData.SelectedPortalRegistrationType,\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:\r\n                        { plantList, SelectedPortalRegistrationType: methodParam.inputData.SelectedPortalRegistrationType, selectedRecord, loading: false, data: undefined, dataState: undefined }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getActivePortalRegistrationType(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [];\r\n        const getPortalregType = rsapi.post('plantportalregistrationmapping/getPortalRegistrationTypeFromActiveID', { \"plantportalregistrationmapping\": { ...inputParam.editRow }, \"userinfo\": inputParam.userInfo })\r\n        const getActiveValue = rsapi.post('plantportalregistrationmapping/getActivePlantPortalRegistrationMappingById', { \"userinfo\": inputParam.userInfo, nportalregmappingcode: inputParam.primaryKeyValue })\r\n        urlArray = [getPortalregType, getActiveValue]\r\n\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                let plantList = {};\r\n                let portalRegistrationTypeList = {};\r\n                let SelectedPortalRegistrationType = {};\r\n                const portalRegistrationType = constructOptionList(response[0].data.PortalRegistrationType || [], \"nportalregtypecode\",\r\n                    \"sportalregtypename\", undefined, undefined, false);\r\n                portalRegistrationTypeList = portalRegistrationType.get(\"OptionList\");\r\n                const plant = constructOptionList(response[0].data.PlantList || [], \"ndeptcode\",\r\n                    \"sdeptname\", undefined, undefined, false);\r\n                plantList = plant.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    nportalregtypecode: { 'label': response[1].data.sportalregtypename, 'value': response[1].data.nportalregtypecode },\r\n                    ndeptcode: { 'label': response[1].data.sdeptname, 'value': response[1].data.ndeptcode }\r\n                }\r\n                SelectedPortalRegistrationType = response[1].data\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openModal: true,\r\n                        selectedRecord,\r\n                        operation: inputParam.operation,\r\n                        ncontrolcode: inputParam.ncontrolCode, loading: false, portalRegistrationTypeList, plantList, SelectedPortalRegistrationType,\r\n                        selectedId: inputParam.primaryKeyValue\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}