{"ast":null,"code":"import { toast } from \"react-toastify\";\nimport rsapi from \"../rsapi\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport { attachmentType, parameterType, transactionStatus } from \"../components/Enumeration\";\nimport { constructOptionList, rearrangeDateFormat, //formatInputDate,\nsortData } from \"../components/CommonScript\";\nimport Axios from \"axios\";\nimport { intl } from \"../components/App\";\nimport { initRequest } from \"./LoginAction\";\nexport const sampleTypeOnChange = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup\" + inputParam.methodUrl, inputParam.inputData).then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          tempFilterData: inputParam.inputData.tempFilterData,\n          masterData: { ...masterData,\n            ...response.data\n          },\n          loading: false\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        masterData[\"ExistingLinkTable\"] = [];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n        toast.warn(error.response.data);\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const filterTestGroup = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgroup/filterTestGroup\", inputParam.inputData).then(response => {\n      sortData(response.data);\n      searchRef.current.value = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          filterData: inputParam.inputData.filterData,\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          loading: false,\n          historyDataState: { ...inputParam.historyDataState,\n            sort: undefined,\n            filter: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const createTree = (selectedRecord, userInfo, selectedNode, ncontrolCode) => {\n  return dispatch => {\n    if (selectedRecord.nproductcode) {\n      const inputParam = {\n        sampletype: selectedRecord.nsampletypecode.item,\n        ncategorycode: selectedRecord.nproductcatcode.value,\n        ntreeversiontempcode: selectedRecord.ntreeversiontempcode.value,\n        userinfo: userInfo,\n        treetemplatemanipulation: selectedNode\n      };\n      dispatch(initRequest(true));\n      rsapi.post(\"/testgroup/getTemplateMasterDetails\", { ...inputParam\n      }).then(response => {\n        const treetempTranstestGroup = response.data[\"TreetempTranstestGroup\"] || []; // const treeMandatoryFields = treetempTranstestGroup.map((item, index) => {\n        //         return {\n        //             \"idsName\": item.slabelname,\n        //             \"dataField\": \"sleveldescription_\" + index,\n        //             \"mandatory\": true\n        //         }\n        // });\n        //  const selectedNodeLevel = selectedNode ? selectedNode.slevelcode.split(\"/1\").length-2 : -1;\n\n        const mandatoryFields = [];\n        treetempTranstestGroup.forEach((item, index) => {\n          if (item.sleveldescription === null) {\n            mandatoryFields.push({\n              \"idsName\": item.slabelname,\n              \"dataField\": \"sleveldescription_\" + index,\n              \"mandatory\": true\n            });\n          }\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: \"create\",\n            screenName: \"IDS_PROFILETREE\",\n            TreetempTranstestGroup: treetempTranstestGroup,\n            treeMandatoryFields: mandatoryFields,\n            //selectedRecord,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_PRODUCTNOTAVAILABLE\"\n      }));\n    }\n  };\n};\nexport const editTree = (operation, selectedNode, userinfo, ncontrolCode) => {\n  return dispatch => {\n    if (selectedNode) {\n      dispatch(initRequest(true));\n      rsapi.post(\"/testgroup/getTreeById\", {\n        userinfo,\n        treetemplatemanipulation: selectedNode\n      }).then(response => {\n        const treetempTranstestGroup = response.data;\n        const treeMandatoryFields = treetempTranstestGroup && [{\n          \"idsName\": treetempTranstestGroup.slabelname,\n          \"dataField\": \"sleveldescription\",\n          \"mandatory\": true\n        }];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: operation,\n            screenName: \"IDS_EDITTREE\",\n            selectedRecord: { ...treetempTranstestGroup\n            },\n            treeMandatoryFields,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTPROFILENODETOEDIT\"\n      }));\n    }\n  };\n};\nexport const addSpecification = (operation, inputParam, ncontrolCode) => {\n  return dispatch => {\n    //if (inputParam.selectedNode != null && inputParam.selectedNode.schildnode === \"\") {\n    if (inputParam.selectedNode != null && inputParam.selectedNode.nnextchildcode === -1) {\n      let urlArray = [rsapi.post(\"timezone/getTimeZone\")];\n\n      if (operation === \"update\") {\n        const testgroupspecification = inputParam.testgroupspecification[0];\n\n        if (testgroupspecification.napprovalstatus === transactionStatus.CORRECTION || testgroupspecification.napprovalstatus === transactionStatus.DRAFT) {\n          urlArray.push(rsapi.post(\"/testgroup/getActiveSpecificationById\", {\n            testgroupspecification,\n            userinfo: inputParam.userinfo\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n          }));\n          return;\n        }\n      } else {\n        urlArray.push(rsapi.post(\"/testgroup/getAddSpecification\", {\n          userinfo: inputParam.userInfo //currentdate: formatInputDate(new Date(), true)\n\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n\n        if (operation === \"update\") {\n          selectedRecord = {\n            sproductname: inputParam.selectedRecord.nproductcode.label,\n            ...response[1].data,\n            //dexpirydate: new Date(response[1].data[\"sexpirydate\"]),\n            dexpirydate: rearrangeDateFormat(inputParam.userinfo, response[1].data[\"sexpirydate\"]),\n            ntzexpirydate: {\n              \"label\": response[1].data.stimezoneid,\n              \"value\": response[1].data.ntzexpirydate\n            }\n          };\n        } else {\n          selectedRecord = {\n            sproductname: inputParam.selectedRecord.nproductcode.label,\n            sspecname: inputParam.selectedNode.sleveldescription,\n            //dexpirydate: new Date(response[1].data.ExpiryDate),\n            dexpirydate: rearrangeDateFormat(inputParam.userInfo, response[1].data.ExpiryDate),\n            ncomponentrequired: transactionStatus.YES,\n            ntransactionstatus: transactionStatus.ACTIVE,\n            ntzexpirydate: {\n              \"label\": inputParam.userInfo.stimezoneid,\n              \"value\": inputParam.userInfo.ntimezonecode\n            }\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: operation,\n            screenName: \"IDS_SPECIFICATION\",\n            selectedRecord,\n            timeZoneList: constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", false, false, true).get(\"OptionList\"),\n            ncontrolCode\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      if (operation === \"copy\") {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SELECTLASTLEVELNODETOADDSPEC\"\n        }));\n      }\n    }\n  };\n};\nexport const addComponent = (SelectedSpecification, userInfo, ncontrolCode) => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getAvailableComponent\", {\n      userinfo: userInfo,\n      testgroupspecification: SelectedSpecification\n    }).then(response => {\n      const testGroupSpecSampleType = response.data[\"TestGroupSpecSampleType\"] || [];\n\n      if (testGroupSpecSampleType.length > 0) {\n        const testCategory = constructOptionList(response.data[\"TestCategory\"] || [], \"ntestcategorycode\", \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\n        const sampleTypeMap = constructOptionList(testGroupSpecSampleType, \"ncomponentcode\", \"scomponentname\", false, false, true); // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: \"create\",\n            screenName: \"IDS_COMPONENT\",\n            testGroupInputData: {\n              TestCategory: testCategory.get(\"OptionList\"),\n              TestGroupSpecSampleType: sampleTypeMap.get(\"OptionList\"),\n              TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\n\n            },\n            selectedRecord: {\n              ncomponentcode: sampleTypeMap.get(\"DefaultValue\"),\n              ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\n            },\n            ncontrolCode\n          }\n        });\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_COMPONENTNOTAVAILABLE\"\n        }));\n      }\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const addTestGroupTest = (selectedComponent, userInfo, ncontrolCode, selectedSpecification) => {\n  return dispatch => {\n    if (selectedSpecification) {\n      if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n        if (selectedComponent) {\n          rsapi.post(\"/testgroup/getAvailableTest\", {\n            userinfo: userInfo,\n            testgroupspecsampletype: selectedComponent\n          }).then(response => {\n            const testCategory = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false); // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\n\n            dispatch({\n              type: DEFAULT_RETURN,\n              payload: {\n                openModal: true,\n                operation: \"create\",\n                screenName: \"IDS_TEST\",\n                testGroupInputData: {\n                  TestCategory: testCategory.get(\"OptionList\"),\n                  TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\n\n                },\n                selectedRecord: {\n                  ntestcategorycode: {\n                    label: response.data[\"SelectedTestCategory\"].stestcategoryname,\n                    value: response.data[\"SelectedTestCategory\"].stestcategorycode,\n                    item: response.data[\"SelectedTestCategory\"]\n                  } //ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\n\n                },\n                ncontrolCode\n              }\n            });\n          }).catch(error => {\n            if (error.response.status === 409 || error.response.status === 417) {\n              toast.warn(error.response.data);\n            } else {\n              toast.error(error.message);\n            }\n          });\n        } else {\n          toast.warn(intl.formatMessage({\n            id: \"IDS_NEEDCOMPONENTTOADDTEST\"\n          }));\n        }\n      } else {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n        }));\n      }\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTSPECIFICATION\"\n      }));\n    }\n  };\n};\nexport const editTestGroupTest = (operation, selectedTest, userInfo, ncontrolCode, selectedSpecification) => {\n  return dispatch => {\n    if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n      const ntestcode = selectedTest.ntestcode;\n      const urlArray = [rsapi.post(\"/testgroup/getActiveTestById\", {\n        userinfo: userInfo,\n        testgrouptest: selectedTest\n      }), rsapi.post(\"/source/getSource\", {\n        userinfo: userInfo\n      }), rsapi.post(\"/testmaster/getSection\", {\n        ntestcode,\n        userinfo: userInfo\n      }), rsapi.post(\"/testmaster/getMethod\", {\n        ntestcode,\n        userinfo: userInfo\n      }), rsapi.post(\"/testmaster/getInstrumentCategory\", {\n        ntestcode,\n        userinfo: userInfo\n      }), rsapi.post(\"/testmaster/getTestAttachment\", {\n        ntestcode,\n        userinfo: userInfo\n      })];\n      Axios.all(urlArray).then(response => {\n        const editObject = response[0].data.TestGroupTest;\n        const testFileItem = response[0].data.TestGroupTestFile;\n        const selectedRecord = { ...editObject,\n          nsourcecode: {\n            \"label\": editObject.ssourcename,\n            \"value\": editObject.nsourcecode\n          },\n          nsectioncode: {\n            \"label\": editObject.ssectionname,\n            \"value\": editObject.nsectioncode\n          } // nmethodcode: {\n          //     \"label\": editObject.smethodname,\n          //     \"value\": editObject.nmethodcode\n          // },\n          // ninstrumentcatcode: {\n          //     \"label\": editObject.sinstrumentcatname,\n          //     \"value\": editObject.ninstrumentcatcode\n          // }\n\n        };\n\n        if (testFileItem) {\n          selectedRecord[\"ntestfilecode\"] = {\n            \"label\": testFileItem.sfilename,\n            \"value\": testFileItem.ntestgroupfilecode,\n            item: testFileItem\n          };\n          selectedRecord[\"ntestgroupfilecode\"] = testFileItem.ntestgroupfilecode;\n        }\n\n        if (editObject.nmethodcode !== -1) {\n          selectedRecord[\"nmethodcode\"] = {\n            \"label\": editObject.smethodname,\n            \"value\": editObject.nmethodcode\n          };\n        } else {\n          selectedRecord[\"nmethodcode\"] = undefined;\n        }\n\n        if (editObject.ninstrumentcatcode !== -1) {\n          selectedRecord[\"ninstrumentcatcode\"] = {\n            \"label\": editObject.sinstrumentcatname,\n            \"value\": editObject.ninstrumentcatcode\n          };\n        } else {\n          selectedRecord[\"ninstrumentcatcode\"] = undefined;\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: operation,\n            screenName: \"IDS_EDITTESTGROUPTEST\",\n            testGroupInputData: {\n              source: constructOptionList(response[1].data || [], \"nsourcecode\", \"ssourcename\", false, false, true).get(\"OptionList\"),\n              section: constructOptionList(response[2].data || [], \"nsectioncode\", \"ssectionname\", false, false, true).get(\"OptionList\"),\n              method: constructOptionList(response[3].data || [], \"nmethodcode\", \"smethodname\", false, false, true).get(\"OptionList\"),\n              instrumentCategory: constructOptionList(response[4].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true).get(\"OptionList\"),\n              testFile: constructOptionList(response[5].data || [], \"ntestfilecode\", \"sfilename\", false, false, true).get(\"OptionList\")\n            },\n            selectedRecord,\n            ncontrolCode\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n      }));\n    }\n  };\n};\nexport const editTestGroupParameter = (operation, selectedParameter, userInfo, ncontrolCode, selectedSpecification) => {\n  return dispatch => {\n    if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT || selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\n      dispatch(initRequest(true));\n      const urlArray = [rsapi.post(\"/testgroup/getActiveParameterById\", {\n        userinfo: userInfo,\n        testgrouptestparameter: selectedParameter\n      }), rsapi.post(\"/parametertype/getParameterType\", {\n        userinfo: userInfo\n      }), rsapi.post(\"unit/getUnit\", {\n        userinfo: userInfo\n      }), rsapi.post(\"grade/getGrade\", {\n        userinfo: userInfo\n      }), rsapi.post(\"checklist/getApprovedChecklist\", {\n        \"userinfo\": userInfo\n      })];\n      Axios.all(urlArray).then(response => {\n        const parameterObject = response[0].data.TestGroupTestParameter[0];\n        const predefinedObject = response[0].data.TestGroupTestPredefinedParameter;\n        const characterObject = response[0].data.TestGroupTestCharParameter;\n        const numericObject = response[0].data.TestGroupTestNumericParameter && response[0].data.TestGroupTestNumericParameter.length > 0 ? response[0].data.TestGroupTestNumericParameter[0] : {};\n        const selectedRecord = { ...parameterObject,\n          nunitcode: {\n            \"label\": parameterObject.sunitname,\n            \"value\": parameterObject.nunitcode\n          },\n          nparametertypecode: {\n            \"label\": parameterObject.sdisplaystatus,\n            \"value\": parameterObject.nparametertypecode\n          },\n          parameterTypeCode: parameterObject.nparametertypecode,\n          nchecklistversioncode: {\n            \"label\": parameterObject.schecklistname,\n            \"value\": parameterObject.nchecklistversioncode\n          },\n          schecklistversionname: parameterObject.schecklistversionname,\n          ntestformulacode: parameterObject.ntestformulacode > 0 ? {\n            \"label\": parameterObject.sformulacalculationdetail,\n            \"value\": parameterObject.ntestformulacode,\n            item: {\n              sformulacalculationdetail: parameterObject.sformulacalculationdetail,\n              ntestformulacode: parameterObject.ntestformulacode,\n              sformulacalculationcode: parameterObject.sformulacalculationcode\n            }\n          } : \"\"\n        };\n\n        if (characterObject) {\n          selectedRecord[\"scharname\"] = characterObject.scharname;\n          selectedRecord[\"ntestgrouptestcharcode\"] = characterObject.ntestgrouptestcharcode;\n        }\n\n        if (predefinedObject) {\n          selectedRecord[\"ntestgrouptestpredefcode\"] = predefinedObject.ntestgrouptestpredefcode;\n          selectedRecord[\"spredefinedname\"] = predefinedObject.spredefinedname;\n          selectedRecord[\"ndefaultstatus\"] = predefinedObject.ndefaultstatus;\n          selectedRecord[\"ngradecode\"] = {\n            \"label\": predefinedObject.sdisplaystatus,\n            \"value\": predefinedObject.ngradecode\n          };\n        }\n\n        if (numericObject) {\n          selectedRecord[\"ntestgrouptestnumericcode\"] = numericObject.ntestgrouptestnumericcode;\n          selectedRecord[\"sminlod\"] = numericObject.sminlod;\n          selectedRecord[\"smaxlod\"] = numericObject.smaxlod;\n          selectedRecord[\"sminb\"] = numericObject.sminb;\n          selectedRecord[\"smina\"] = numericObject.smina;\n          selectedRecord[\"smaxa\"] = numericObject.smaxa;\n          selectedRecord[\"smaxb\"] = numericObject.smaxb;\n          selectedRecord[\"sminloq\"] = numericObject.sminloq;\n          selectedRecord[\"smaxloq\"] = numericObject.smaxloq;\n          selectedRecord[\"sdisregard\"] = numericObject.sdisregard;\n          selectedRecord[\"sresultvalue\"] = numericObject.sresultvalue;\n        }\n\n        const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n        const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\n        const grade = gradeMap.get(\"OptionList\");\n        const unit = unitMap.get(\"OptionList\");\n        const disabled = parameterObject.nparametertypecode === parameterType.NUMERIC ? false : true;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openChildModal: true,\n            operation: operation,\n            screenName: \"IDS_PARAMETER\",\n            testGroupInputData: {\n              unit,\n              grade,\n              testFormula: constructOptionList(response[0].data.TestFormula || [], \"ntestformulacode\", \"sformulacalculationdetail\", false, false, true).get(\"OptionList\"),\n              parameterType: constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true).get(\"OptionList\"),\n              checkListVersion: constructOptionList(response[4].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true).get(\"OptionList\"),\n              needRoundingDigit: disabled,\n              needUnit: disabled\n            },\n            parameterData: {\n              grade\n            },\n            selectedRecord,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n      }));\n    }\n  };\n}; // export const addTestGroupFormula = (selectedParameter, userInfo, ncontrolCode, optionalData) => {\n//     return dispatch => {\n//         const testgroupspecification = optionalData.testgroupspecification;\n//         if(testgroupspecification.napprovalstatus === transactionStatus.DRAFT || \n//             testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n//             dispatch(initRequest(true));\n//             rsapi.post(\"/testgroup/getTestGroupFormula\", {userinfo: userInfo, testgrouptestparameter: selectedParameter, testgroupspecification})\n//             .then(response=>{\n//                 dispatch({\n//                     type: DEFAULT_RETURN, \n//                     payload:{\n//                         openChildModal: true,\n//                         operation: \"create\",\n//                         screenName: \"IDS_FORMULA\",\n//                         testGroupInputData: {testFormula: response.data},\n//                         selectedRecord: {},\n//                         ncontrolCode\n//                 }});\n//             })\n//             .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}});\n//                 if(error.response.status === 409 || error.response.status === 417) {\n//                     toast.warn(error.response.data);\n//                 } else {\n//                     toast.error(error.message)\n//                 }\n//             });\n//         } else {\n//             toast.warn(intl.formatMessage({id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));\n//         }\n//     }\n// }\n\nexport const getTestGroupParameter = inputParam => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getTestGroupTestParameter\", { ...inputParam\n    }).then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const getComponentBySpecId = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\n      [inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0],\n      userinfo: inputParam.userInfo\n    }).then(response => {\n      sortData(response.data);\n      searchRef.current.value = \"\";\n      const historyDataState = { ...inputParam.historyDataState,\n        sort: undefined,\n        filter: undefined\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          historyDataState\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getTestGroupDetails = inputParam => {\n  return dispatch => {\n    //...inputParam, \n    rsapi.post(\"/testgroup/getTestGroupTest\", {\n      ntestgrouptestcode: parseInt(inputParam['ntestgrouptestcode']),\n      userinfo: inputParam.userInfo\n    }) // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \n    //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\n    .then(response => {\n      sortData(response.data);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...inputParam.masterData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getTestGroupComponentDetails = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    //...inputParam, \n    rsapi.post(\"/testgroup/getTestByComponentId\", {\n      testgroupspecsampletype: inputParam['testgroupspecsampletype'],\n      userinfo: inputParam.userInfo\n    }) // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \n    //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\n    .then(response => {\n      sortData(response.data);\n      searchRef.current.value = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getSpecification = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    if (inputParam.selectedRecord !== null) {\n      rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam,\n        [inputParam.keyName]: inputParam.selectedRecord\n      }).then(response => {\n        sortData(response.data);\n        searchRef.current.value = \"\";\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: { ...masterData,\n              ActiveKey: inputParam.activeKey,\n              FocusKey: inputParam.focusKey,\n              primaryKey: inputParam.primaryKey,\n              ...response.data,\n              selectedNode: inputParam.selectedRecord,\n              searchedData: undefined\n            },\n            historyDataState: { ...inputParam.historyDataState,\n              sort: undefined,\n              filter: undefined\n            }\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            selectedNode: inputParam.selectedRecord,\n            TestGroupSpecification: [],\n            SelectedSpecification: {},\n            TestGroupTest: [],\n            TestGroupTestParameter: [],\n            TestGroupTestNumericParameter: [],\n            TestGroupTestFormula: [],\n            TestGroupTestPredefinedParameter: [],\n            TestGroupTestCharParameter: [],\n            ActiveKey: inputParam.activeKey,\n            FocusKey: inputParam.focusKey,\n            SelectedTest: {},\n            selectedParameter: {},\n            TestGroupSpecFile: [],\n            TestGroupSpecificationHistory: [],\n            SelectedComponent: undefined\n          }\n        }\n      });\n    }\n  };\n};\nexport const changeTestCategory = (inputParam, testGroupInputData) => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/getTestMasterByCategory\", { ...inputParam\n    }).then(response => {\n      sortData(response.data);\n      inputParam.selectedRecord.ntestcode = [];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: inputParam.selectedRecord,\n          testGroupInputData: { ...testGroupInputData,\n            ...response.data\n          }\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const getSpecificationDetails = (inputParam, masterData, searchRef) => {\n  return dispatch => {\n    rsapi.post(\"/testgroup/get\" + inputParam.methodUrl, { ...inputParam.inputData\n    }).then(response => {\n      searchRef.current.value = \"\";\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData: { ...masterData,\n            ...response.data,\n            searchedData: undefined\n          },\n          screenName: inputParam.screenName\n        }\n      });\n    }).catch(error => {\n      if (error.response.status === 409 || error.response.status === 417) {\n        toast.warn(error.response.data);\n      } else {\n        toast.error(error.message);\n      }\n    });\n  };\n};\nexport const editSpecFile = inputParam => {\n  return dispatch => {\n    if (inputParam.testgroupspecification.napprovalstatus === transactionStatus.DRAFT || inputParam.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n      let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\n        userinfo: inputParam.userInfo\n      }), rsapi.post(\"/testgroup/getActiveSpecFileById\", {\n        userinfo: inputParam.userInfo,\n        testgroupspecfile: inputParam.selectedRecord\n      })];\n      Axios.all(urlArray).then(response => {\n        const linkmaster = response[0].data.LinkMaster;\n        const defaultLink = linkmaster.filter(item => item.ndefaultlink === transactionStatus.YES);\n        const editObject = response[1].data;\n        let nlinkcode = {};\n        let link = {};\n\n        if (editObject.nattachmenttypecode === attachmentType.LINK) {\n          nlinkcode = {\n            \"label\": editObject.slinkname,\n            \"value\": editObject.nlinkcode\n          };\n          link = {\n            slinkfilename: editObject.sfilename,\n            slinkdescription: editObject.sdescription,\n            nlinkdefaultstatus: editObject.ndefaultstatus,\n            sfilesize: '',\n            nfilesize: 0,\n            ndefaultstatus: 4,\n            sfilename: ''\n          };\n        } else {\n          nlinkcode = defaultLink.length > 0 ? {\n            \"label\": defaultLink[0].slinkname,\n            \"value\": defaultLink[0].nlinkcode\n          } : \"\";\n          link = {\n            slinkfilename: '',\n            slinkdescription: '',\n            sdescription: editObject.sdescription,\n            nlinkdefaultstatus: 4,\n            sfilesize: editObject.sfilesize,\n            nfilesize: editObject.nfilesize,\n            ndefaultstatus: editObject.ndefaultstatus,\n            sfilename: editObject.sfilename\n          };\n        }\n\n        const selectedRecord = { // ...editObject,\n          ...link,\n          nallotedspeccode: editObject.nallotedspeccode,\n          nspecfilecode: editObject.nspecfilecode,\n          stypename: editObject.stypename,\n          nattachmenttypecode: editObject.nattachmenttypecode,\n          nlinkcode // disabled: true\n\n        };\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openModal: true,\n            operation: \"update\",\n            screenName: \"IDS_SPECFILE\",\n            editFiles: Object.values(editObject).length > 0 && editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {},\n            selectedRecord,\n            ncontrolCode: inputParam.ncontrolCode\n          }\n        });\n      }).catch(error => {\n        if (error.response.status === 409 || error.response.status === 417) {\n          toast.warn(error.response.data);\n        } else {\n          toast.error(error.message);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n      }));\n    }\n  };\n};\nexport const addTestGroupCodedResult = (operation, paramdata, userInfo, ncontrolCode, optionalData) => {\n  return dispatch => {\n    const testgroupspecification = optionalData.testgroupspecification;\n\n    if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT || testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\n      dispatch(initRequest(true));\n      const urlArray = [rsapi.post(\"grade/getGrade\", {\n        \"userinfo\": userInfo\n      })];\n\n      if (operation === \"update\") {\n        urlArray.push(rsapi.post(\"testgroup/getActivePredefinedParameterById\", {\n          testgrouptestpredefinedparameter: paramdata,\n          \"userinfo\": userInfo,\n          testgroupspecification\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        const gradeMap = constructOptionList(response[0].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\n        const grade = gradeMap.get(\"OptionList\");\n\n        if (operation === \"update\") {\n          const editCodedResult = response[1].data;\n          selectedRecord = {\n            ntestgrouptestpredefcode: paramdata[\"ntestgrouptestpredefcode\"],\n            ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\n            ngradecode: {\n              \"label\": editCodedResult[\"sdisplaystatus\"],\n              \"value\": editCodedResult[\"ngradecode\"]\n            },\n            spredefinedname: editCodedResult[\"spredefinedname\"]\n          };\n        } else {\n          selectedRecord = {\n            ngradecode: gradeMap.get(\"DefaultValue\") // {\n            //     \"value\": grade[0].ngradecode,\n            //     \"label\": grade[0][\"sdisplaystatus\"]\n            // }\n\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            openChildModal: true,\n            showSaveContinue: false,\n            operation: operation,\n            screenName: \"IDS_CODEDRESULT\",\n            parameterData: {\n              grade,\n              needCodedResult: false\n            },\n            selectedRecord,\n            ncontrolCode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\n      }));\n    }\n  };\n};\nexport const viewTestGroupCheckList = (inputParam, userInfo) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"checklist/viewTemplate\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: true,\n          testGroupCheckList: {\n            templateData: response.data\n          },\n          loading: false,\n          selectedRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const reportSpecification = inputParam => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"testgroup/specReportGenerate\", { ...inputParam\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false,\n          loadEsign: false,\n          openModal: false,\n          showConfirmAlert: false\n        }\n      });\n      document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\n      document.getElementById(\"download_data\").click();\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};\nexport const retireSpecification = (inputParam, masterData) => {\n  return dispatch => {\n    dispatch(initRequest(true));\n    rsapi.post(\"testgroup/retireSpec\", { ...inputParam\n    }).then(response => {\n      // const TestGroupSpecification = response.data.TestGroupSpecificationHistory ;\n      sortData(response.data);\n      masterData = { ...masterData,\n        ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/TestGroupAction.js"],"names":["toast","rsapi","DEFAULT_RETURN","attachmentType","parameterType","transactionStatus","constructOptionList","rearrangeDateFormat","sortData","Axios","intl","initRequest","sampleTypeOnChange","inputParam","masterData","dispatch","post","methodUrl","inputData","then","response","data","type","payload","tempFilterData","loading","catch","error","status","warn","message","filterTestGroup","searchRef","current","value","filterData","searchedData","undefined","historyDataState","sort","filter","createTree","selectedRecord","userInfo","selectedNode","ncontrolCode","nproductcode","sampletype","nsampletypecode","item","ncategorycode","nproductcatcode","ntreeversiontempcode","userinfo","treetemplatemanipulation","treetempTranstestGroup","mandatoryFields","forEach","index","sleveldescription","push","slabelname","openModal","operation","screenName","TreetempTranstestGroup","treeMandatoryFields","formatMessage","id","editTree","addSpecification","nnextchildcode","urlArray","testgroupspecification","napprovalstatus","CORRECTION","DRAFT","all","sproductname","label","dexpirydate","ntzexpirydate","stimezoneid","sspecname","ExpiryDate","ncomponentrequired","YES","ntransactionstatus","ACTIVE","ntimezonecode","timeZoneList","get","addComponent","SelectedSpecification","testGroupSpecSampleType","length","testCategory","sampleTypeMap","testGroupInputData","TestCategory","TestGroupSpecSampleType","TestGroupTest","ncomponentcode","ntestcategorycode","addTestGroupTest","selectedComponent","selectedSpecification","testgroupspecsampletype","stestcategoryname","stestcategorycode","editTestGroupTest","selectedTest","ntestcode","testgrouptest","editObject","testFileItem","TestGroupTestFile","nsourcecode","ssourcename","nsectioncode","ssectionname","sfilename","ntestgroupfilecode","nmethodcode","smethodname","ninstrumentcatcode","sinstrumentcatname","source","section","method","instrumentCategory","testFile","editTestGroupParameter","selectedParameter","testgrouptestparameter","parameterObject","TestGroupTestParameter","predefinedObject","TestGroupTestPredefinedParameter","characterObject","TestGroupTestCharParameter","numericObject","TestGroupTestNumericParameter","nunitcode","sunitname","nparametertypecode","sdisplaystatus","parameterTypeCode","nchecklistversioncode","schecklistname","schecklistversionname","ntestformulacode","sformulacalculationdetail","sformulacalculationcode","scharname","ntestgrouptestcharcode","ntestgrouptestpredefcode","spredefinedname","ndefaultstatus","ngradecode","ntestgrouptestnumericcode","sminlod","smaxlod","sminb","smina","smaxa","smaxb","sminloq","smaxloq","sdisregard","sresultvalue","gradeMap","unitMap","grade","unit","disabled","NUMERIC","openChildModal","testFormula","TestFormula","checkListVersion","needRoundingDigit","needUnit","parameterData","getTestGroupParameter","getComponentBySpecId","keyName","getTestGroupDetails","ntestgrouptestcode","parseInt","getTestGroupComponentDetails","getSpecification","ActiveKey","activeKey","FocusKey","focusKey","primaryKey","TestGroupSpecification","TestGroupTestFormula","SelectedTest","TestGroupSpecFile","TestGroupSpecificationHistory","SelectedComponent","changeTestCategory","getSpecificationDetails","editSpecFile","testgroupspecfile","linkmaster","LinkMaster","defaultLink","ndefaultlink","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","slinkdescription","sdescription","nlinkdefaultstatus","sfilesize","nfilesize","nallotedspeccode","nspecfilecode","stypename","editFiles","Object","values","FTP","addTestGroupCodedResult","paramdata","optionalData","testgrouptestpredefinedparameter","editCodedResult","ntestgrouptestparametercode","showSaveContinue","needCodedResult","viewTestGroupCheckList","openTemplateModal","testGroupCheckList","templateData","reportSpecification","loadEsign","showConfirmAlert","document","getElementById","setAttribute","filepath","click","retireSpecification"],"mappings":"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","sourcesContent":["import {\r\n    toast\r\n} from \"react-toastify\";\r\nimport rsapi from \"../rsapi\";\r\nimport {\r\n    DEFAULT_RETURN\r\n} from \"./LoginTypes\";\r\nimport {\r\n    attachmentType,\r\n    parameterType,\r\n    transactionStatus\r\n} from \"../components/Enumeration\";\r\nimport {\r\n    constructOptionList,\r\n    rearrangeDateFormat,\r\n    //formatInputDate,\r\n    sortData\r\n} from \"../components/CommonScript\";\r\nimport Axios from \"axios\";\r\nimport {\r\n    intl\r\n} from \"../components/App\";\r\nimport {\r\n    initRequest\r\n} from \"./LoginAction\";\r\n\r\n\r\nexport const sampleTypeOnChange = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        tempFilterData: inputParam.inputData.tempFilterData,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data\r\n                        },\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    masterData[\"ExistingLinkTable\"] = [];\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const filterTestGroup = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgroup/filterTestGroup\", inputParam.inputData)\r\n            .then(response => {\r\n                sortData(response.data);\r\n                searchRef.current.value = \"\";\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        filterData: inputParam.inputData.filterData,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        loading: false,\r\n                        historyDataState: {\r\n                            ...inputParam.historyDataState,\r\n                            sort: undefined,\r\n                            filter: undefined\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const createTree = (selectedRecord, userInfo, selectedNode, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        if (selectedRecord.nproductcode) {\r\n            const inputParam = {\r\n                sampletype: selectedRecord.nsampletypecode.item,\r\n                ncategorycode: selectedRecord.nproductcatcode.value,\r\n                ntreeversiontempcode: selectedRecord.ntreeversiontempcode.value,\r\n                userinfo: userInfo,\r\n                treetemplatemanipulation: selectedNode\r\n            }\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/testgroup/getTemplateMasterDetails\", {\r\n                    ...inputParam\r\n                })\r\n                .then(response => {\r\n                    const treetempTranstestGroup = response.data[\"TreetempTranstestGroup\"] || [];\r\n\r\n                    // const treeMandatoryFields = treetempTranstestGroup.map((item, index) => {\r\n                    //         return {\r\n                    //             \"idsName\": item.slabelname,\r\n                    //             \"dataField\": \"sleveldescription_\" + index,\r\n                    //             \"mandatory\": true\r\n                    //         }\r\n                    // });\r\n\r\n                    //  const selectedNodeLevel = selectedNode ? selectedNode.slevelcode.split(\"/1\").length-2 : -1;\r\n                    const mandatoryFields = [];\r\n                    treetempTranstestGroup.forEach((item, index) => {\r\n                        if (item.sleveldescription === null) {\r\n                            mandatoryFields.push({\r\n                                \"idsName\": item.slabelname,\r\n                                \"dataField\": \"sleveldescription_\" + index,\r\n                                \"mandatory\": true\r\n                            })\r\n                        }\r\n                    });\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openModal: true,\r\n                            operation: \"create\",\r\n                            screenName: \"IDS_PROFILETREE\",\r\n                            TreetempTranstestGroup: treetempTranstestGroup,\r\n                            treeMandatoryFields: mandatoryFields,\r\n                            //selectedRecord,\r\n                            ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_PRODUCTNOTAVAILABLE\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTree = (operation, selectedNode, userinfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        if (selectedNode) {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"/testgroup/getTreeById\", {\r\n                    userinfo,\r\n                    treetemplatemanipulation: selectedNode\r\n                })\r\n                .then(response => {\r\n                    const treetempTranstestGroup = response.data;\r\n                    const treeMandatoryFields = treetempTranstestGroup && [{\r\n                        \"idsName\": treetempTranstestGroup.slabelname,\r\n                        \"dataField\": \"sleveldescription\",\r\n                        \"mandatory\": true\r\n                    }];\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openModal: true,\r\n                            operation: operation,\r\n                            screenName: \"IDS_EDITTREE\",\r\n                            selectedRecord: {\r\n                                ...treetempTranstestGroup\r\n                            },\r\n                            treeMandatoryFields,\r\n                            ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTPROFILENODETOEDIT\"\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\nexport const addSpecification = (operation, inputParam, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        //if (inputParam.selectedNode != null && inputParam.selectedNode.schildnode === \"\") {\r\n        if (inputParam.selectedNode != null && inputParam.selectedNode.nnextchildcode === -1) {\r\n            let urlArray = [rsapi.post(\"timezone/getTimeZone\")];\r\n            if (operation === \"update\") {\r\n                const testgroupspecification = inputParam.testgroupspecification[0];\r\n                if (testgroupspecification.napprovalstatus === transactionStatus.CORRECTION ||\r\n                    testgroupspecification.napprovalstatus === transactionStatus.DRAFT) {\r\n                    urlArray.push(rsapi.post(\"/testgroup/getActiveSpecificationById\", {\r\n                        testgroupspecification,\r\n                        userinfo: inputParam.userinfo\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                    }));\r\n                    return;\r\n                }\r\n            } else {\r\n                urlArray.push(rsapi.post(\"/testgroup/getAddSpecification\", {\r\n                    userinfo: inputParam.userInfo,\r\n                    //currentdate: formatInputDate(new Date(), true)\r\n                }));\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    if (operation === \"update\") {\r\n                        selectedRecord = {\r\n                            sproductname: inputParam.selectedRecord.nproductcode.label,\r\n                            ...response[1].data,\r\n                            //dexpirydate: new Date(response[1].data[\"sexpirydate\"]),\r\n                            dexpirydate: rearrangeDateFormat(inputParam.userinfo, response[1].data[\"sexpirydate\"]),\r\n                            ntzexpirydate: {\r\n                                \"label\": response[1].data.stimezoneid,\r\n                                \"value\": response[1].data.ntzexpirydate\r\n                            }\r\n                        };\r\n                    } else {\r\n                        selectedRecord = {\r\n                            sproductname: inputParam.selectedRecord.nproductcode.label,\r\n                            sspecname: inputParam.selectedNode.sleveldescription,\r\n                            //dexpirydate: new Date(response[1].data.ExpiryDate),\r\n                            dexpirydate: rearrangeDateFormat(inputParam.userInfo, response[1].data.ExpiryDate),\r\n                            ncomponentrequired: transactionStatus.YES,\r\n                            ntransactionstatus: transactionStatus.ACTIVE,\r\n                            ntzexpirydate: {\r\n                                \"label\": inputParam.userInfo.stimezoneid,\r\n                                \"value\": inputParam.userInfo.ntimezonecode\r\n                            }\r\n                        };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openModal: true,\r\n                            operation: operation,\r\n                            screenName: \"IDS_SPECIFICATION\",\r\n                            selectedRecord,\r\n                            timeZoneList: constructOptionList(response[0].data || [], \"ntimezonecode\", \"stimezoneid\", false, false, true).get(\"OptionList\"),\r\n                            ncontrolCode\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            if (operation === \"copy\") {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTSPECIFICATION\"\r\n                }));\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SELECTLASTLEVELNODETOADDSPEC\"\r\n                }));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const addComponent = (SelectedSpecification, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getAvailableComponent\", {\r\n                userinfo: userInfo,\r\n                testgroupspecification: SelectedSpecification\r\n            })\r\n            .then(response => {\r\n                const testGroupSpecSampleType = response.data[\"TestGroupSpecSampleType\"] || [];\r\n                if (testGroupSpecSampleType.length > 0) {\r\n                    const testCategory = constructOptionList(response.data[\"TestCategory\"] || [], \"ntestcategorycode\", \"stestcategoryname\", 'ntestcategorycode', 'ascending', false);\r\n                    const sampleTypeMap = constructOptionList(testGroupSpecSampleType, \"ncomponentcode\", \"scomponentname\", false, false, true);\r\n                    // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openModal: true,\r\n                            operation: \"create\",\r\n                            screenName: \"IDS_COMPONENT\",\r\n                            testGroupInputData: {\r\n                                TestCategory: testCategory.get(\"OptionList\"),\r\n                                TestGroupSpecSampleType: sampleTypeMap.get(\"OptionList\"),\r\n                                TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\r\n                            },\r\n                            selectedRecord: {\r\n                                ncomponentcode: sampleTypeMap.get(\"DefaultValue\"),\r\n                                ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\r\n                            },\r\n                            ncontrolCode\r\n                        }\r\n                    });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_COMPONENTNOTAVAILABLE\"\r\n                    }));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTestGroupTest = (selectedComponent, userInfo, ncontrolCode, selectedSpecification) => {\r\n    return dispatch => {\r\n        if (selectedSpecification) {\r\n            if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n                selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n                if (selectedComponent) {\r\n                    rsapi.post(\"/testgroup/getAvailableTest\", {\r\n                            userinfo: userInfo,\r\n                            testgroupspecsampletype: selectedComponent\r\n                        })\r\n                        .then(response => {\r\n                            const testCategory = constructOptionList(response.data[\"TestCategory\"], \"ntestcategorycode\", \"stestcategoryname\", \"ntestcategorycode\", \"ascending\", false);\r\n                            // const TestGroupTestMap = constructOptionList(response.data[\"TestGroupTest\"]||[], \"ntestcode\", \"stestname\", false, false, true);\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    openModal: true,\r\n                                    operation: \"create\",\r\n                                    screenName: \"IDS_TEST\",\r\n                                    testGroupInputData: {\r\n                                        TestCategory: testCategory.get(\"OptionList\"),\r\n                                        TestGroupTest: response.data[\"TestGroupTest\"] || [] //TestGroupTestMap.get(\"OptionList\"),\r\n                                    },\r\n                                    selectedRecord: {\r\n                                        ntestcategorycode: {\r\n                                            label: response.data[\"SelectedTestCategory\"].stestcategoryname,\r\n                                            value: response.data[\"SelectedTestCategory\"].stestcategorycode,\r\n                                            item: response.data[\"SelectedTestCategory\"]\r\n                                        }\r\n                                        //ntestcategorycode: testCategory.get(\"DefaultValue\") ? testCategory.get(\"DefaultValue\") : testCategory.get(\"OptionList\")[0]\r\n                                    },\r\n                                    ncontrolCode\r\n                                }\r\n                            });\r\n                        })\r\n                        .catch(error => {\r\n                            if (error.response.status === 409 || error.response.status === 417) {\r\n                                toast.warn(error.response.data);\r\n                            } else {\r\n                                toast.error(error.message);\r\n                            }\r\n                        });\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: \"IDS_NEEDCOMPONENTTOADDTEST\"\r\n                    }));\r\n                }\r\n            } else {\r\n                toast.warn(intl.formatMessage({\r\n                    id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n                }));\r\n            }\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SELECTSPECIFICATION\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTestGroupTest = (operation, selectedTest, userInfo, ncontrolCode, selectedSpecification) => {\r\n    return dispatch => {\r\n        if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n            selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            const ntestcode = selectedTest.ntestcode;\r\n            const urlArray = [\r\n                rsapi.post(\"/testgroup/getActiveTestById\", {\r\n                    userinfo: userInfo,\r\n                    testgrouptest: selectedTest\r\n                }),\r\n                rsapi.post(\"/source/getSource\", {\r\n                    userinfo: userInfo\r\n                }),\r\n                rsapi.post(\"/testmaster/getSection\", {\r\n                    ntestcode,\r\n                    userinfo: userInfo\r\n                }),\r\n                rsapi.post(\"/testmaster/getMethod\", {\r\n                    ntestcode,\r\n                    userinfo: userInfo\r\n                }),\r\n                rsapi.post(\"/testmaster/getInstrumentCategory\", {\r\n                    ntestcode,\r\n                    userinfo: userInfo\r\n                }),\r\n                rsapi.post(\"/testmaster/getTestAttachment\", {\r\n                    ntestcode,\r\n                    userinfo: userInfo\r\n                })\r\n            ]\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const editObject = response[0].data.TestGroupTest;\r\n                    const testFileItem = response[0].data.TestGroupTestFile;\r\n\r\n\r\n                    const selectedRecord = {\r\n                        ...editObject,\r\n                        nsourcecode: {\r\n                            \"label\": editObject.ssourcename,\r\n                            \"value\": editObject.nsourcecode\r\n                        },\r\n                        nsectioncode: {\r\n                            \"label\": editObject.ssectionname,\r\n                            \"value\": editObject.nsectioncode\r\n                        },\r\n                        // nmethodcode: {\r\n                        //     \"label\": editObject.smethodname,\r\n                        //     \"value\": editObject.nmethodcode\r\n                        // },\r\n                        // ninstrumentcatcode: {\r\n                        //     \"label\": editObject.sinstrumentcatname,\r\n                        //     \"value\": editObject.ninstrumentcatcode\r\n                        // }\r\n                    };\r\n                    if (testFileItem) {\r\n                        selectedRecord[\"ntestfilecode\"] = {\r\n                            \"label\": testFileItem.sfilename,\r\n                            \"value\": testFileItem.ntestgroupfilecode,\r\n                            item: testFileItem\r\n                        };\r\n                        selectedRecord[\"ntestgroupfilecode\"] = testFileItem.ntestgroupfilecode\r\n                    }\r\n                    if (editObject.nmethodcode !== -1) {\r\n                        selectedRecord[\"nmethodcode\"] = {\r\n                            \"label\": editObject.smethodname,\r\n                            \"value\": editObject.nmethodcode\r\n                        }\r\n                    } else {\r\n                        selectedRecord[\"nmethodcode\"] = undefined;\r\n                    }\r\n                    if (editObject.ninstrumentcatcode !== -1) {\r\n                        selectedRecord[\"ninstrumentcatcode\"] = {\r\n                            \"label\": editObject.sinstrumentcatname,\r\n                            \"value\": editObject.ninstrumentcatcode\r\n                        }\r\n                    } else {\r\n                        selectedRecord[\"ninstrumentcatcode\"] = undefined;\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openModal: true,\r\n                            operation: operation,\r\n                            screenName: \"IDS_EDITTESTGROUPTEST\",\r\n                            testGroupInputData: {\r\n                                source: constructOptionList(response[1].data || [], \"nsourcecode\", \"ssourcename\", false, false, true).get(\"OptionList\"),\r\n                                section: constructOptionList(response[2].data || [], \"nsectioncode\", \"ssectionname\", false, false, true).get(\"OptionList\"),\r\n                                method: constructOptionList(response[3].data || [], \"nmethodcode\", \"smethodname\", false, false, true).get(\"OptionList\"),\r\n                                instrumentCategory: constructOptionList(response[4].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true).get(\"OptionList\"),\r\n                                testFile: constructOptionList(response[5].data || [], \"ntestfilecode\", \"sfilename\", false, false, true).get(\"OptionList\")\r\n                            },\r\n                            selectedRecord,\r\n                            ncontrolCode\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport const editTestGroupParameter = (operation, selectedParameter, userInfo, ncontrolCode, selectedSpecification) => {\r\n    return dispatch => {\r\n        if (selectedSpecification.napprovalstatus === transactionStatus.DRAFT ||\r\n            selectedSpecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = [\r\n                rsapi.post(\"/testgroup/getActiveParameterById\", {\r\n                    userinfo: userInfo,\r\n                    testgrouptestparameter: selectedParameter\r\n                }),\r\n                rsapi.post(\"/parametertype/getParameterType\", {\r\n                    userinfo: userInfo\r\n                }),\r\n                rsapi.post(\"unit/getUnit\", {\r\n                    userinfo: userInfo\r\n                }),\r\n                rsapi.post(\"grade/getGrade\", {\r\n                    userinfo: userInfo\r\n                }),\r\n                rsapi.post(\"checklist/getApprovedChecklist\", {\r\n                    \"userinfo\": userInfo\r\n                })\r\n            ]\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const parameterObject = response[0].data.TestGroupTestParameter[0];\r\n                    const predefinedObject = response[0].data.TestGroupTestPredefinedParameter;\r\n                    const characterObject = response[0].data.TestGroupTestCharParameter;\r\n                    const numericObject = response[0].data.TestGroupTestNumericParameter && response[0].data.TestGroupTestNumericParameter.length > 0 ? response[0].data.TestGroupTestNumericParameter[0] : {};\r\n                    const selectedRecord = {\r\n                        ...parameterObject,\r\n                        nunitcode: {\r\n                            \"label\": parameterObject.sunitname,\r\n                            \"value\": parameterObject.nunitcode\r\n                        },\r\n                        nparametertypecode: {\r\n                            \"label\": parameterObject.sdisplaystatus,\r\n                            \"value\": parameterObject.nparametertypecode\r\n                        },\r\n                        parameterTypeCode: parameterObject.nparametertypecode,\r\n                        nchecklistversioncode: {\r\n                            \"label\": parameterObject.schecklistname,\r\n                            \"value\": parameterObject.nchecklistversioncode\r\n                        },\r\n                        schecklistversionname: parameterObject.schecklistversionname,\r\n                        ntestformulacode: parameterObject.ntestformulacode > 0 ? {\r\n                            \"label\": parameterObject.sformulacalculationdetail,\r\n                            \"value\": parameterObject.ntestformulacode,\r\n                            item: {\r\n                                sformulacalculationdetail: parameterObject.sformulacalculationdetail,\r\n                                ntestformulacode: parameterObject.ntestformulacode,\r\n                                sformulacalculationcode: parameterObject.sformulacalculationcode\r\n                            }\r\n                        } : \"\"\r\n                    };\r\n                    if (characterObject) {\r\n                        selectedRecord[\"scharname\"] = characterObject.scharname;\r\n                        selectedRecord[\"ntestgrouptestcharcode\"] = characterObject.ntestgrouptestcharcode;\r\n                    }\r\n                    if (predefinedObject) {\r\n                        selectedRecord[\"ntestgrouptestpredefcode\"] = predefinedObject.ntestgrouptestpredefcode;\r\n                        selectedRecord[\"spredefinedname\"] = predefinedObject.spredefinedname;\r\n                        selectedRecord[\"ndefaultstatus\"] = predefinedObject.ndefaultstatus;\r\n                        selectedRecord[\"ngradecode\"] = {\r\n                            \"label\": predefinedObject.sdisplaystatus,\r\n                            \"value\": predefinedObject.ngradecode\r\n                        };\r\n                    }\r\n                    if (numericObject) {\r\n                        selectedRecord[\"ntestgrouptestnumericcode\"] = numericObject.ntestgrouptestnumericcode;\r\n                        selectedRecord[\"sminlod\"] = numericObject.sminlod;\r\n                        selectedRecord[\"smaxlod\"] = numericObject.smaxlod;\r\n                        selectedRecord[\"sminb\"] = numericObject.sminb;\r\n                        selectedRecord[\"smina\"] = numericObject.smina;\r\n                        selectedRecord[\"smaxa\"] = numericObject.smaxa;\r\n                        selectedRecord[\"smaxb\"] = numericObject.smaxb;\r\n                        selectedRecord[\"sminloq\"] = numericObject.sminloq;\r\n                        selectedRecord[\"smaxloq\"] = numericObject.smaxloq;\r\n                        selectedRecord[\"sdisregard\"] = numericObject.sdisregard;\r\n                        selectedRecord[\"sresultvalue\"] = numericObject.sresultvalue;\r\n                    }\r\n                    const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                    const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                    const grade = gradeMap.get(\"OptionList\");\r\n                    const unit = unitMap.get(\"OptionList\");\r\n                    const disabled = parameterObject.nparametertypecode === parameterType.NUMERIC ? false : true;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openChildModal: true,\r\n                            operation: operation,\r\n                            screenName: \"IDS_PARAMETER\",\r\n                            testGroupInputData: {\r\n                                unit,\r\n                                grade,\r\n                                testFormula: constructOptionList(response[0].data.TestFormula || [], \"ntestformulacode\", \"sformulacalculationdetail\", false, false, true).get(\"OptionList\"),\r\n                                parameterType: constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true).get(\"OptionList\"),\r\n                                checkListVersion: constructOptionList(response[4].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true).get(\"OptionList\"),\r\n                                needRoundingDigit: disabled,\r\n                                needUnit: disabled\r\n                            },\r\n                            parameterData: {\r\n                                grade\r\n                            },\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message);\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\n// export const addTestGroupFormula = (selectedParameter, userInfo, ncontrolCode, optionalData) => {\r\n//     return dispatch => {\r\n//         const testgroupspecification = optionalData.testgroupspecification;\r\n//         if(testgroupspecification.napprovalstatus === transactionStatus.DRAFT || \r\n//             testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n//             dispatch(initRequest(true));\r\n//             rsapi.post(\"/testgroup/getTestGroupFormula\", {userinfo: userInfo, testgrouptestparameter: selectedParameter, testgroupspecification})\r\n//             .then(response=>{\r\n//                 dispatch({\r\n//                     type: DEFAULT_RETURN, \r\n//                     payload:{\r\n//                         openChildModal: true,\r\n//                         operation: \"create\",\r\n//                         screenName: \"IDS_FORMULA\",\r\n//                         testGroupInputData: {testFormula: response.data},\r\n//                         selectedRecord: {},\r\n//                         ncontrolCode\r\n//                 }});\r\n//             })\r\n//             .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}});\r\n//                 if(error.response.status === 409 || error.response.status === 417) {\r\n//                     toast.warn(error.response.data);\r\n//                 } else {\r\n//                     toast.error(error.message)\r\n//                 }\r\n//             });\r\n//         } else {\r\n//             toast.warn(intl.formatMessage({id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"}));\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const getTestGroupParameter = (inputParam) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getTestGroupTestParameter\", {\r\n                ...inputParam\r\n            })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getComponentBySpecId = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\r\n                [inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0],\r\n                userinfo: inputParam.userInfo\r\n            })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                searchRef.current.value = \"\";\r\n                const historyDataState = {\r\n                    ...inputParam.historyDataState,\r\n                    sort: undefined,\r\n                    filter: undefined\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        historyDataState\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getTestGroupDetails = (inputParam) => {\r\n    return (dispatch) => { //...inputParam, \r\n        rsapi.post(\"/testgroup/getTestGroupTest\", {\r\n                ntestgrouptestcode: parseInt(inputParam['ntestgrouptestcode']),\r\n                userinfo: inputParam.userInfo\r\n            })\r\n            // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \r\n            //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\r\n            .then(response => {\r\n                sortData(response.data);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...inputParam.masterData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getTestGroupComponentDetails = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => { //...inputParam, \r\n        rsapi.post(\"/testgroup/getTestByComponentId\", {\r\n                testgroupspecsampletype: inputParam['testgroupspecsampletype'],\r\n                userinfo: inputParam.userInfo\r\n            })\r\n            // rsapi.post(\"/testgroup/\"+inputParam.operation+inputParam.methodUrl, \r\n            //     {[inputParam.keyName]: inputParam.selectedRecord.testgroupspecification[0], userinfo: inputParam.userInfo})\r\n            .then(response => {\r\n                sortData(response.data);\r\n                searchRef.current.value = \"\";\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getSpecification = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        if (inputParam.selectedRecord !== null) {\r\n            rsapi.post(\"/testgroup/\" + inputParam.operation + inputParam.methodUrl, {\r\n                    ...inputParam,\r\n                    [inputParam.keyName]: inputParam.selectedRecord\r\n                })\r\n                .then(response => {\r\n                    sortData(response.data);\r\n                    searchRef.current.value = \"\";\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            masterData: {\r\n                                ...masterData,\r\n                                ActiveKey: inputParam.activeKey,\r\n                                FocusKey: inputParam.focusKey,\r\n                                primaryKey: inputParam.primaryKey,\r\n                                ...response.data,\r\n                                selectedNode: inputParam.selectedRecord,\r\n                                searchedData: undefined,\r\n\r\n                            },\r\n                            historyDataState: {\r\n                                ...inputParam.historyDataState,\r\n                                sort: undefined,\r\n                                filter: undefined\r\n                            }\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN,\r\n                payload: {\r\n                    masterData: {\r\n                        ...masterData,\r\n                        selectedNode: inputParam.selectedRecord,\r\n                        TestGroupSpecification: [],\r\n                        SelectedSpecification: {},\r\n                        TestGroupTest: [],\r\n                        TestGroupTestParameter: [],\r\n                        TestGroupTestNumericParameter: [],\r\n                        TestGroupTestFormula: [],\r\n                        TestGroupTestPredefinedParameter: [],\r\n                        TestGroupTestCharParameter: [],\r\n                        ActiveKey: inputParam.activeKey,\r\n                        FocusKey: inputParam.focusKey,\r\n                        SelectedTest: {},\r\n                        selectedParameter: {},\r\n                        TestGroupSpecFile: [],\r\n                        TestGroupSpecificationHistory: [],\r\n                        SelectedComponent: undefined\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeTestCategory = (inputParam, testGroupInputData) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/getTestMasterByCategory\", {\r\n                ...inputParam\r\n            })\r\n            .then(response => {\r\n                sortData(response.data);\r\n                inputParam.selectedRecord.ntestcode = [];\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        selectedRecord: inputParam.selectedRecord,\r\n                        testGroupInputData: {\r\n                            ...testGroupInputData,\r\n                            ...response.data\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getSpecificationDetails = (inputParam, masterData, searchRef) => {\r\n    return (dispatch) => {\r\n        rsapi.post(\"/testgroup/get\" + inputParam.methodUrl, {\r\n                ...inputParam.inputData\r\n            })\r\n            .then(response => {\r\n                searchRef.current.value = \"\";\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData: {\r\n                            ...masterData,\r\n                            ...response.data,\r\n                            searchedData: undefined\r\n                        },\r\n                        screenName: inputParam.screenName\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 409 || error.response.status === 417) {\r\n                    toast.warn(error.response.data);\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const editSpecFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        if (inputParam.testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n            inputParam.testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n                    userinfo: inputParam.userInfo\r\n                }),\r\n                rsapi.post(\"/testgroup/getActiveSpecFileById\", {\r\n                    userinfo: inputParam.userInfo,\r\n                    testgroupspecfile: inputParam.selectedRecord\r\n                })\r\n            ]\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    const linkmaster = response[0].data.LinkMaster;\r\n                    const defaultLink = linkmaster.filter(item => item.ndefaultlink === transactionStatus.YES);\r\n                    const editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject.slinkname,\r\n                            \"value\": editObject.nlinkcode\r\n                        }\r\n                        link = {\r\n                            slinkfilename: editObject.sfilename,\r\n                            slinkdescription: editObject.sdescription,\r\n                            nlinkdefaultstatus: editObject.ndefaultstatus,\r\n                            sfilesize: '',\r\n                            nfilesize: 0,\r\n                            ndefaultstatus: 4,\r\n                            sfilename: '',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? {\r\n                            \"label\": defaultLink[0].slinkname,\r\n                            \"value\": defaultLink[0].nlinkcode\r\n                        } : \"\"\r\n\r\n                        link = {\r\n                            slinkfilename: '',\r\n                            slinkdescription: '',\r\n                            sdescription: editObject.sdescription,\r\n                            nlinkdefaultstatus: 4,\r\n                            sfilesize: editObject.sfilesize,\r\n                            nfilesize: editObject.nfilesize,\r\n                            ndefaultstatus: editObject.ndefaultstatus,\r\n                            sfilename: editObject.sfilename,\r\n                        }\r\n                    }\r\n                    const selectedRecord = {\r\n                        // ...editObject,\r\n                        ...link,\r\n                        nallotedspeccode: editObject.nallotedspeccode,\r\n                        nspecfilecode: editObject.nspecfilecode,\r\n                        stypename: editObject.stypename,\r\n                        nattachmenttypecode: editObject.nattachmenttypecode,\r\n                        nlinkcode,\r\n                        // disabled: true\r\n                    };\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openModal: true,\r\n                            operation: \"update\",\r\n                            screenName: \"IDS_SPECFILE\",\r\n                            editFiles: Object.values(editObject).length > 0 && editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {},\r\n                            selectedRecord,\r\n                            ncontrolCode: inputParam.ncontrolCode\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 409 || error.response.status === 417) {\r\n                        toast.warn(error.response.data);\r\n                    } else {\r\n                        toast.error(error.message)\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport const addTestGroupCodedResult = (operation, paramdata, userInfo, ncontrolCode, optionalData) => {\r\n    return (dispatch) => {\r\n        const testgroupspecification = optionalData.testgroupspecification;\r\n        if (testgroupspecification.napprovalstatus === transactionStatus.DRAFT ||\r\n            testgroupspecification.napprovalstatus === transactionStatus.CORRECTION) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = [\r\n                rsapi.post(\"grade/getGrade\", {\r\n                    \"userinfo\": userInfo\r\n                })\r\n            ];\r\n            if (operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"testgroup/getActivePredefinedParameterById\", {\r\n                    testgrouptestpredefinedparameter: paramdata,\r\n                    \"userinfo\": userInfo,\r\n                    testgroupspecification\r\n                }));\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    const gradeMap = constructOptionList(response[0].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                    const grade = gradeMap.get(\"OptionList\");\r\n                    if (operation === \"update\") {\r\n                        const editCodedResult = response[1].data;\r\n                        selectedRecord = {\r\n                            ntestgrouptestpredefcode: paramdata[\"ntestgrouptestpredefcode\"],\r\n                            ntestgrouptestparametercode: paramdata[\"ntestgrouptestparametercode\"],\r\n                            ngradecode: {\r\n                                \"label\": editCodedResult[\"sdisplaystatus\"],\r\n                                \"value\": editCodedResult[\"ngradecode\"]\r\n                            },\r\n                            spredefinedname: editCodedResult[\"spredefinedname\"]\r\n                        }\r\n                    } else {\r\n                        selectedRecord = {\r\n                            ngradecode: gradeMap.get(\"DefaultValue\")\r\n                            // {\r\n                            //     \"value\": grade[0].ngradecode,\r\n                            //     \"label\": grade[0][\"sdisplaystatus\"]\r\n                            // }\r\n                        }\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            openChildModal: true,\r\n                            showSaveContinue: false,\r\n                            operation: operation,\r\n                            screenName: \"IDS_CODEDRESULT\",\r\n                            parameterData: {\r\n                                grade,\r\n                                needCodedResult: false\r\n                            },\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_SPECIFICATIONSTATUSMUSTBEDRAFTCORRECTION\"\r\n            }));\r\n        }\r\n    }\r\n}\r\n\r\nexport const viewTestGroupCheckList = (inputParam, userInfo) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"checklist/viewTemplate\", {\r\n                ...inputParam\r\n            })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openTemplateModal: true,\r\n                        testGroupCheckList: {\r\n                            templateData: response.data\r\n                        },\r\n                        loading: false,\r\n                        selectedRecord: {}\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\nexport const reportSpecification = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testgroup/specReportGenerate\", {\r\n                ...inputParam\r\n            })\r\n            .then(response => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        loadEsign: false,\r\n                        openModal: false,\r\n                        showConfirmAlert: false\r\n                    }\r\n                })\r\n                document.getElementById(\"download_data\").setAttribute(\"href\", response.data.filepath);\r\n                document.getElementById(\"download_data\").click();\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport const retireSpecification = (inputParam, masterData) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testgroup/retireSpec\", {\r\n                ...inputParam\r\n            })\r\n            .then(response => {\r\n\r\n                // const TestGroupSpecification = response.data.TestGroupSpecificationHistory ;\r\n                sortData(response.data);\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n\r\n                };\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                })\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}