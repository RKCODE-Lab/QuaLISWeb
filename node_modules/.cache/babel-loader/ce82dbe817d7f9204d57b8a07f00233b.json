{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nexport function getChecklistVersion(checklist, userInfo, masterData) {\n  return function (dispatch) {\n    const inputData = {\n      \"nchecklistcode\": checklist.nchecklistcode,\n      userinfo: userInfo\n    };\n    dispatch(initRequest(true));\n    rsapi.post(\"checklist/getChecklistVersion\", inputData).then(response => {\n      masterData = { ...masterData,\n        ...response.data,\n        selectedchecklist: checklist\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getVersionQB(versionObject) {\n  let {\n    version,\n    masterData,\n    userInfo\n  } = versionObject;\n  return function (dispatch) {\n    if (!(masterData.selectedversion.nchecklistversioncode === version.nchecklistversioncode)) {\n      const inputData = {\n        nchecklistversioncode: version.nchecklistversioncode,\n        userinfo: userInfo\n      }; //const url1=rsapi.post('checklist/getActiveChecklistVersionById',inputData)\n\n      const url2 = rsapi.post('checklist/getChecklistVersionQB', inputData);\n      dispatch(initRequest(true));\n      Axios.all([url2]).then(response => {\n        masterData = { ...masterData,\n          checklistversionqb: response[0].data.checklistversionqb,\n          selectedversion: version\n        };\n        sortData(masterData);\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function viewVersionTemplate(version, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"checklist/viewTemplate\", {\n      \"nchecklistversioncode\": version.nchecklistversioncode,\n      \"flag\": 1,\n      \"ntransactionresultcode\": 1,\n      \"userinfo\": userInfo\n    }).then(response => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: true,\n          templateData: response.data,\n          loading: false,\n          ncontrolcode: ncontrolCode,\n          selectedRecord: {}\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n} // export function filterChecklistColumnData(filterValue, masterData, userInfo) {\n//     return function(dispatch){\n//         let checklistCode = 0;   \n//         let searchedData = undefined;\n//         if (filterValue === \"\"){\n//             checklistCode = masterData[\"checklist\"][0].nchecklistcode;\n//         } \n//         else{\n//             searchedData = searchData(filterValue, masterData[\"checklist\"]);\n//             if (searchedData.length > 0){\n//                 checklistCode = searchedData[0].nchecklistcode; \n//             }\n//         }\n//         if (checklistCode !== 0){\n//             dispatch(initRequest(true));\n//             rsapi.post(\"checklist/getChecklistVersion\", {nchecklistcode:checklistCode,userinfo:userInfo})\n//             .then(response=>{                \n//                 masterData[\"checklistversion\"] = sortData(response.data[\"checklistversion\"]);\n//                 masterData[\"selectedversion\"] = response.data[\"selectedversion\"];\n//                 masterData[\"checklistversionqb\"] =  sortData(response.data[\"checklistversionqb\"]);\n//                 masterData[\"selectedchecklist\"] =searchedData?searchedData[0]:masterData[\"checklist\"][0];\n//                 masterData[\"searchedData\"] = searchedData;\n//                 dispatch({type: DEFAULT_RETURN, payload:{masterData,   loading:false}});\n//             })\n//             .catch(error=>{\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\n//                 if (error.response.status === 500){\n//                     toast.error(error.message);\n//                 } \n//                 else{               \n//                     toast.warn(error.response.data);\n//                 }  \n//             }) \n//         }else{\n//             masterData[\"checklistversion\"] = [];\n//             masterData[\"selectedversion\"] = [];\n//             masterData[\"checklistversionqb\"] = [];\n//             masterData[\"selectedchecklist\"] =[];\n//             masterData[\"searchedData\"] = [];\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,   loading:false}});\n//         }\n//     }\n// }   \n\nexport function onSaveTemplate(selectedRecord, userInfo) {\n  return function (dispatch) {\n    let listChecklistVersionTemplate = [];\n\n    if (selectedRecord && selectedRecord.editedQB) {\n      selectedRecord.editedQB.map(qbcode => listChecklistVersionTemplate.push(selectedRecord[qbcode]));\n      dispatch(initRequest(true));\n      rsapi.post(\"checklist/createUpdateChecklistVersionTemplate\", {\n        checklistversiontemplate: listChecklistVersionTemplate,\n        \"userinfo\": userInfo\n      }).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            selectedRecord: {},\n            templateData: undefined,\n            openTemplateModal: false,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          openTemplateModal: false,\n          selectedRecord: {},\n          templateData: undefined,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function showChecklistAddScreen(nchecklistversioncode, id, ncontrolcode, userInfo) {\n  return function (dispatch) {\n    let modalName = id === 'checklist' ? 'openModal' : 'openChildModal';\n\n    if (id === \"checklistversionqb\") {\n      dispatch(initRequest(true));\n      rsapi.post(\"checklist/getVersionQBAddEditData\", {\n        \"nchecklistversioncode\": nchecklistversioncode,\n        \"userinfo\": userInfo\n      }).then(response => {\n        const optionsQBCategoryMap = constructOptionList(response.data.qbcategory || [], \"nchecklistqbcategorycode\", \"schecklistqbcategoryname\", undefined, undefined, true);\n        const availableQBCategory = optionsQBCategoryMap.get(\"OptionList\");\n        let listQbObj = {\n          listQb: {}\n        };\n        let optionsChecklistComponentMap;\n        availableQBCategory.map(cat => {\n          optionsChecklistComponentMap = constructOptionList(response.data.checklistqb[cat.label] || [], \"nchecklistqbcode\", \"squestion\", undefined, undefined, true);\n          listQbObj = {\n            listQb: { ...listQbObj.listQb,\n              [cat.label]: optionsChecklistComponentMap.get(\"OptionList\")\n            }\n          };\n          return null;\n        });\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            [modalName]: true,\n            selectedRecord: {},\n            operation: \"create\",\n            id,\n            QBCategory: undefined,\n            QB: undefined,\n            availableQBCategory,\n            listQb: listQbObj.listQb,\n            availableQB: [],\n            ncontrolcode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          [modalName]: true,\n          selectedRecord: {},\n          operation: \"create\",\n          id,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }\n  };\n}\nexport function fetchChecklistRecordByID(editParam) {\n  return function (dispatch) {\n    if (editParam.screenName.toLowerCase() === \"checklist\" || editParam.screenName.toLowerCase() === \"checklistversion\") {\n      let modalName = editParam.screenName.toLowerCase() === \"checklist\" ? 'openModal' : 'openChildModal';\n      dispatch(initRequest(true));\n      rsapi.post(\"checklist/getActive\" + editParam.screenName + \"ById\", {\n        [editParam.primaryKeyField]: editParam.primaryKeyValue,\n        \"userinfo\": editParam.userInfo\n      }).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            [modalName]: true,\n            selectedRecord: response.data,\n            operation: editParam.operation,\n            id: editParam.screenName.toLowerCase(),\n            ncontrolcode: editParam.ncontrolCode,\n            masterData: editParam.masterData,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      const url1 = rsapi.post(\"checklist/getVersionQBAddEditData\", {\n        \"nchecklistversioncode\": editParam.masterData.selectedversion.nchecklistversioncode,\n        \"userinfo\": editParam.userInfo\n      });\n      const url2 = rsapi.post(\"checklist/getActive\" + editParam.screenName + \"ById\", {\n        [editParam.primaryKeyField]: editParam.primaryKeyValue,\n        \"userinfo\": editParam.userInfo\n      });\n      dispatch(initRequest(true));\n      Axios.all([url1, url2]).then(response => {\n        let selectedId = editParam.primaryKeyValue; // const optionsQBCategoryMap = constructOptionList(response[0].data.qbcategory || [], \"nchecklistqbcategorycode\", \"schecklistqbcategoryname\", undefined, undefined, true);\n        // const optionsChecklistComponentMap = constructOptionList(response[0].data.checklistqb || [], \"nchecklistqbcode\", \"squestion\", undefined, undefined, true);\n        // const availableQBCategory = optionsQBCategoryMap.get(\"OptionList\");\n        // const availableQB = optionsChecklistComponentMap.get(\"OptionList\");\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            masterData: editParam.masterData,\n            openChildModal: true,\n            selectedRecord: response[1].data,\n            operation: \"update\",\n            id: editParam.screenName.toLowerCase(),\n            // availableQBCategory ,\n            // availableQB ,\n            QBCategory: {\n              \"value\": response[1].data[\"nchecklistqbcategorycode\"],\n              \"label\": response[1].data[\"schecklistqbcategoryname\"]\n            },\n            QB: {\n              \"value\": response[1].data[\"nchecklistqbcode\"],\n              \"label\": response[1].data[\"squestion\"]\n            },\n            ncontrolcode: editParam.ncontrolCode,\n            loading: false,\n            selectedId\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    }\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/ChecklistAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","getChecklistVersion","checklist","userInfo","masterData","dispatch","inputData","nchecklistcode","userinfo","post","then","response","data","selectedchecklist","type","payload","loading","catch","error","status","message","warn","getVersionQB","versionObject","version","selectedversion","nchecklistversioncode","url2","all","checklistversionqb","viewVersionTemplate","ncontrolCode","openTemplateModal","templateData","ncontrolcode","selectedRecord","onSaveTemplate","listChecklistVersionTemplate","editedQB","map","qbcode","push","checklistversiontemplate","undefined","showChecklistAddScreen","id","modalName","optionsQBCategoryMap","qbcategory","availableQBCategory","get","listQbObj","listQb","optionsChecklistComponentMap","cat","checklistqb","label","operation","QBCategory","QB","availableQB","fetchChecklistRecordByID","editParam","screenName","toLowerCase","primaryKeyField","primaryKeyValue","url1","selectedId","openChildModal"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,mBAAT,EAA8BC,QAA9B,QAA8C,4BAA9C;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AAGA,OAAO,SAASC,mBAAT,CAA6BC,SAA7B,EAAwCC,QAAxC,EAAkDC,UAAlD,EAA8D;AAEjE,SAAO,UAAUC,QAAV,EAAoB;AACvB,UAAMC,SAAS,GAAG;AAAE,wBAAkBJ,SAAS,CAACK,cAA9B;AAA8CC,MAAAA,QAAQ,EAAEL;AAAxD,KAAlB;AACAE,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,IAAAA,KAAK,CAACe,IAAN,CAAW,+BAAX,EAA4CH,SAA5C,EACKI,IADL,CACUC,QAAQ,IAAI;AAEdP,MAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAET,WAAGO,QAAQ,CAACC,IAFH;AAGTC,QAAAA,iBAAiB,EAAEX;AAHV,OAAb;AAKAL,MAAAA,QAAQ,CAACO,UAAD,CAAR;AACAC,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEnB,cADD;AACiBoB,QAAAA,OAAO,EAAE;AAAEX,UAAAA,UAAF;AAAcY,UAAAA,OAAO,EAAE;AAAvB;AAD1B,OAAD,CAAR;AAGH,KAZL,EAaKC,KAbL,CAaWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEnB,cAAR;AAAwBoB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/BrB,QAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDtB,QAAAA,KAAK,CAACuB,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAeC,IAA1B;AACH;AACJ,KArBL;AAsBH,GAzBD;AA0BH;AAED,OAAO,SAASU,YAAT,CAAsBC,aAAtB,EAAqC;AACxC,MAAI;AAAEC,IAAAA,OAAF;AAAWpB,IAAAA,UAAX;AAAuBD,IAAAA;AAAvB,MAAoCoB,aAAxC;AACA,SAAO,UAAUlB,QAAV,EAAoB;AACvB,QAAI,EAAED,UAAU,CAACqB,eAAX,CAA2BC,qBAA3B,KAAqDF,OAAO,CAACE,qBAA/D,CAAJ,EAA2F;AACvF,YAAMpB,SAAS,GAAG;AAAEoB,QAAAA,qBAAqB,EAAEF,OAAO,CAACE,qBAAjC;AAAwDlB,QAAAA,QAAQ,EAAEL;AAAlE,OAAlB,CADuF,CAEvF;;AACA,YAAMwB,IAAI,GAAGjC,KAAK,CAACe,IAAN,CAAW,iCAAX,EAA8CH,SAA9C,CAAb;AACAD,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,MAAAA,KAAK,CAAC6B,GAAN,CAAU,CAACD,IAAD,CAAV,EACKjB,IADL,CACUC,QAAQ,IAAI;AACdP,QAAAA,UAAU,GAAG,EACT,GAAGA,UADM;AAETyB,UAAAA,kBAAkB,EAAElB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiBiB,kBAF5B;AAGTJ,UAAAA,eAAe,EAAED;AAHR,SAAb;AAKA3B,QAAAA,QAAQ,CAACO,UAAD,CAAR;AACAC,QAAAA,QAAQ,CAAC;AACLS,UAAAA,IAAI,EAAEnB,cADD;AACiBoB,UAAAA,OAAO,EAAE;AAC3BX,YAAAA,UAD2B;AAE3BY,YAAAA,OAAO,EAAE;AAFkB;AAD1B,SAAD,CAAR;AAMH,OAdL,EAeKC,KAfL,CAeWC,KAAK,IAAI;AACZb,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAEnB,cAAR;AAAwBoB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/BrB,UAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACDtB,UAAAA,KAAK,CAACuB,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAeC,IAA1B;AACH;AACJ,OAvBL;AAwBH,KA7BD,MA6BO;AACHP,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEnB,cADD;AACiBoB,QAAAA,OAAO,EAAE;AAAEX,UAAAA,UAAF;AAAcY,UAAAA,OAAO,EAAE;AAAvB;AAD1B,OAAD,CAAR;AAGH;AACJ,GAnCD;AAoCH;AAED,OAAO,SAASc,mBAAT,CAA6BN,OAA7B,EAAsCrB,QAAtC,EAAgD4B,YAAhD,EAA8D;AAEjE,SAAO,UAAU1B,QAAV,EAAoB;AAEvBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,IAAAA,KAAK,CAACe,IAAN,CAAW,wBAAX,EAAqC;AACjC,+BAAyBe,OAAO,CAACE,qBADA;AACuB,cAAQ,CAD/B;AACkC,gCAA0B,CAD5D;AAE/B,kBAAYvB;AAFmB,KAArC,EAIKO,IAJL,CAIUC,QAAQ,IAAI;AAEdN,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEnB,cADD;AACiBoB,QAAAA,OAAO,EAAE;AAC3BiB,UAAAA,iBAAiB,EAAE,IADQ;AAE3BC,UAAAA,YAAY,EAAEtB,QAAQ,CAACC,IAFI;AAG3BI,UAAAA,OAAO,EAAE,KAHkB;AAI3BkB,UAAAA,YAAY,EAACH,YAJc;AAK3BI,UAAAA,cAAc,EAAE;AALW;AAD1B,OAAD,CAAR;AASH,KAfL,EAgBKlB,KAhBL,CAgBWC,KAAK,IAAI;AACZb,MAAAA,QAAQ,CAAC;AAAES,QAAAA,IAAI,EAAEnB,cAAR;AAAwBoB,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAAjC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/BrB,QAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGK;AACDtB,QAAAA,KAAK,CAACuB,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAeC,IAA1B;AACH;AACJ,KAxBL;AAyBH,GA5BD;AA6BH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,OAAO,SAASwB,cAAT,CAAwBD,cAAxB,EAAwChC,QAAxC,EAAkD;AAErD,SAAO,UAAUE,QAAV,EAAoB;AAGvB,QAAIgC,4BAA4B,GAAG,EAAnC;;AACA,QAAIF,cAAc,IAAIA,cAAc,CAACG,QAArC,EAA+C;AAC3CH,MAAAA,cAAc,CAACG,QAAf,CAAwBC,GAAxB,CAA4BC,MAAM,IAC9BH,4BAA4B,CAACI,IAA7B,CAAkCN,cAAc,CAACK,MAAD,CAAhD,CADJ;AAEAnC,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,MAAAA,KAAK,CAACe,IAAN,CAAW,gDAAX,EACI;AAAEiC,QAAAA,wBAAwB,EAAEL,4BAA5B;AAA0D,oBAAYlC;AAAtE,OADJ,EAGKO,IAHL,CAGUC,QAAQ,IAAI;AAEdN,QAAAA,QAAQ,CAAC;AACLS,UAAAA,IAAI,EAAEnB,cADD;AACiBoB,UAAAA,OAAO,EAAE;AAC3BoB,YAAAA,cAAc,EAAE,EADW;AAE3BF,YAAAA,YAAY,EAAEU,SAFa;AAG3BX,YAAAA,iBAAiB,EAAE,KAHQ;AAI3BhB,YAAAA,OAAO,EAAE;AAJkB;AAD1B,SAAD,CAAR;AAQH,OAbL,EAcKC,KAdL,CAcWC,KAAK,IAAI;AACZb,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAEnB,cAAR;AAAwBoB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/BrB,UAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACDtB,UAAAA,KAAK,CAACuB,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAeC,IAA1B;AACH;AACJ,OAtBL;AAuBH,KA3BD,MA2BO;AAEHP,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEnB,cADD;AACiBoB,QAAAA,OAAO,EAAE;AAC3BiB,UAAAA,iBAAiB,EAAE,KADQ;AACDG,UAAAA,cAAc,EAAE,EADf;AACkBF,UAAAA,YAAY,EAAEU,SADhC;AAC2C3B,UAAAA,OAAO,EAAE;AADpD;AAD1B,OAAD,CAAR;AAKH;AACJ,GAvCD;AAwCH;AAGD,OAAO,SAAS4B,sBAAT,CAAgClB,qBAAhC,EAAuDmB,EAAvD,EAA2DX,YAA3D,EAAyE/B,QAAzE,EAAmF;AACtF,SAAO,UAAUE,QAAV,EAAoB;AACvB,QAAIyC,SAAS,GAAID,EAAE,KAAK,WAAR,GAAuB,WAAvB,GAAqC,gBAArD;;AACA,QAAIA,EAAE,KAAK,oBAAX,EAAiC;AAC7BxC,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,MAAAA,KAAK,CAACe,IAAN,CAAW,mCAAX,EACI;AAAE,iCAAyBiB,qBAA3B;AAAkD,oBAAYvB;AAA9D,OADJ,EAEKO,IAFL,CAEUC,QAAQ,IAAI;AACd,cAAMoC,oBAAoB,GAAGnD,mBAAmB,CAACe,QAAQ,CAACC,IAAT,CAAcoC,UAAd,IAA4B,EAA7B,EAAiC,0BAAjC,EAA6D,0BAA7D,EAAyFL,SAAzF,EAAoGA,SAApG,EAA+G,IAA/G,CAAhD;AACA,cAAMM,mBAAmB,GAAGF,oBAAoB,CAACG,GAArB,CAAyB,YAAzB,CAA5B;AACA,YAAIC,SAAS,GAAC;AAACC,UAAAA,MAAM,EAAC;AAAR,SAAd;AACA,YAAIC,4BAAJ;AACAJ,QAAAA,mBAAmB,CAACV,GAApB,CAAwBe,GAAG,IACvB;AACAD,UAAAA,4BAA4B,GAAGzD,mBAAmB,CAACe,QAAQ,CAACC,IAAT,CAAc2C,WAAd,CAA0BD,GAAG,CAACE,KAA9B,KAAwC,EAAzC,EAA6C,kBAA7C,EAAiE,WAAjE,EAA8Eb,SAA9E,EAAyFA,SAAzF,EAAoG,IAApG,CAAlD;AACAQ,UAAAA,SAAS,GAAC;AAACC,YAAAA,MAAM,EAAC,EAAC,GAAGD,SAAS,CAACC,MAAd;AAAqB,eAACE,GAAG,CAACE,KAAL,GAAaH,4BAA4B,CAACH,GAA7B,CAAiC,YAAjC;AAAlC;AAAR,WAAV;AACA,iBAAO,IAAP;AACC,SALL;AAQA7C,QAAAA,QAAQ,CAAC;AACLS,UAAAA,IAAI,EAAEnB,cADD;AACiBoB,UAAAA,OAAO,EAAE;AAC3B,aAAC+B,SAAD,GAAa,IADc;AAE3BX,YAAAA,cAAc,EAAE,EAFW;AAG3BsB,YAAAA,SAAS,EAAE,QAHgB;AAI3BZ,YAAAA,EAJ2B;AAK3Ba,YAAAA,UAAU,EAAEf,SALe;AAM3BgB,YAAAA,EAAE,EAAEhB,SANuB;AAO3BM,YAAAA,mBAP2B;AAQ3BG,YAAAA,MAAM,EAACD,SAAS,CAACC,MARU;AAS3BQ,YAAAA,WAAW,EAAE,EATc;AAU3B1B,YAAAA,YAV2B;AAUblB,YAAAA,OAAO,EAAE;AAVI;AAD1B,SAAD,CAAR;AAcH,OA7BL,EA8BKC,KA9BL,CA8BWC,KAAK,IAAI;AACZb,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAEnB,cAAR;AAAwBoB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/BrB,UAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACDtB,UAAAA,KAAK,CAACuB,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAeC,IAA1B;AACH;AACJ,OAtCL;AAuCH,KAzCD,MAyCO;AACHP,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEnB,cADD;AACiBoB,QAAAA,OAAO,EAAE;AAC3B,WAAC+B,SAAD,GAAa,IADc;AAE3BX,UAAAA,cAAc,EAAE,EAFW;AAG3BsB,UAAAA,SAAS,EAAE,QAHgB;AAI3BZ,UAAAA,EAJ2B;AAK3BX,UAAAA,YAL2B;AAM3BlB,UAAAA,OAAO,EAAE;AANkB;AAD1B,OAAD,CAAR;AAUH;AACJ,GAvDD;AAwDH;AAED,OAAO,SAAS6C,wBAAT,CAAkCC,SAAlC,EAA6C;AAChD,SAAO,UAAUzD,QAAV,EAAoB;AAEvB,QAAIyD,SAAS,CAACC,UAAV,CAAqBC,WAArB,OAAuC,WAAvC,IAAsDF,SAAS,CAACC,UAAV,CAAqBC,WAArB,OAAuC,kBAAjG,EAAqH;AACjH,UAAIlB,SAAS,GAAGgB,SAAS,CAACC,UAAV,CAAqBC,WAArB,OAAuC,WAAvC,GAAqD,WAArD,GAAmE,gBAAnF;AACA3D,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAN,MAAAA,KAAK,CAACe,IAAN,CAAW,wBAAwBqD,SAAS,CAACC,UAAlC,GAA+C,MAA1D,EACI;AAAE,SAACD,SAAS,CAACG,eAAX,GAA6BH,SAAS,CAACI,eAAzC;AAA0D,oBAAYJ,SAAS,CAAC3D;AAAhF,OADJ,EAGKO,IAHL,CAGUC,QAAQ,IAAI;AACdN,QAAAA,QAAQ,CAAC;AACLS,UAAAA,IAAI,EAAEnB,cADD;AACiBoB,UAAAA,OAAO,EAAE;AAC3B,aAAC+B,SAAD,GAAa,IADc;AAE3BX,YAAAA,cAAc,EAAExB,QAAQ,CAACC,IAFE;AAG3B6C,YAAAA,SAAS,EAAEK,SAAS,CAACL,SAHM;AAI3BZ,YAAAA,EAAE,EAAEiB,SAAS,CAACC,UAAV,CAAqBC,WAArB,EAJuB;AAK3B9B,YAAAA,YAAY,EAAE4B,SAAS,CAAC/B,YALG;AAM3B3B,YAAAA,UAAU,EAAE0D,SAAS,CAAC1D,UANK;AAO3BY,YAAAA,OAAO,EAAE;AAPkB;AAD1B,SAAD,CAAR;AAYH,OAhBL,EAiBKC,KAjBL,CAiBWC,KAAK,IAAI;AACZb,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAEnB,cAAR;AAAwBoB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/BrB,UAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACDtB,UAAAA,KAAK,CAACuB,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAeC,IAA1B;AACH;AACJ,OAzBL;AA0BH,KA7BD,MA6BO;AACH,YAAMuD,IAAI,GAAGzE,KAAK,CAACe,IAAN,CAAW,mCAAX,EACT;AAAE,iCAAyBqD,SAAS,CAAC1D,UAAV,CAAqBqB,eAArB,CAAqCC,qBAAhE;AAAuF,oBAAYoC,SAAS,CAAC3D;AAA7G,OADS,CAAb;AAEA,YAAMwB,IAAI,GAAGjC,KAAK,CAACe,IAAN,CAAW,wBAAwBqD,SAAS,CAACC,UAAlC,GAA+C,MAA1D,EACT;AAAE,SAACD,SAAS,CAACG,eAAX,GAA6BH,SAAS,CAACI,eAAzC;AAA0D,oBAAYJ,SAAS,CAAC3D;AAAhF,OADS,CAAb;AAEAE,MAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,MAAAA,KAAK,CAAC6B,GAAN,CAAU,CAACuC,IAAD,EAAOxC,IAAP,CAAV,EACKjB,IADL,CACUC,QAAQ,IAAI;AACd,YAAIyD,UAAU,GAAGN,SAAS,CAACI,eAA3B,CADc,CAEd;AACA;AACA;AACA;;AACA7D,QAAAA,QAAQ,CAAC;AACLS,UAAAA,IAAI,EAAEnB,cADD;AACiBoB,UAAAA,OAAO,EAAE;AAC3BX,YAAAA,UAAU,EAAE0D,SAAS,CAAC1D,UADK;AAE3BiE,YAAAA,cAAc,EAAE,IAFW;AAG3BlC,YAAAA,cAAc,EAAExB,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAHD;AAI3B6C,YAAAA,SAAS,EAAE,QAJgB;AAK3BZ,YAAAA,EAAE,EAAEiB,SAAS,CAACC,UAAV,CAAqBC,WAArB,EALuB;AAM3B;AACA;AACAN,YAAAA,UAAU,EAAE;AAAE,uBAAS/C,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,0BAAjB,CAAX;AAAyD,uBAASD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,0BAAjB;AAAlE,aARe;AAS3B+C,YAAAA,EAAE,EAAE;AAAE,uBAAShD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,kBAAjB,CAAX;AAAiD,uBAASD,QAAQ,CAAC,CAAD,CAAR,CAAYC,IAAZ,CAAiB,WAAjB;AAA1D,aATuB;AAU3BsB,YAAAA,YAAY,EAAE4B,SAAS,CAAC/B,YAVG;AAUWf,YAAAA,OAAO,EAAE,KAVpB;AAU2BoD,YAAAA;AAV3B;AAD1B,SAAD,CAAR;AAcH,OArBL,EAsBKnD,KAtBL,CAsBWC,KAAK,IAAI;AACZb,QAAAA,QAAQ,CAAC;AAAES,UAAAA,IAAI,EAAEnB,cAAR;AAAwBoB,UAAAA,OAAO,EAAE;AAAEC,YAAAA,OAAO,EAAE;AAAX;AAAjC,SAAD,CAAR;;AACA,YAAIE,KAAK,CAACP,QAAN,CAAeQ,MAAf,KAA0B,GAA9B,EAAmC;AAC/BrB,UAAAA,KAAK,CAACoB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,SAFD,MAGK;AACDtB,UAAAA,KAAK,CAACuB,IAAN,CAAWH,KAAK,CAACP,QAAN,CAAeC,IAA1B;AACH;AACJ,OA9BL;AA+BH;AACJ,GArED;AAsEH","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { constructOptionList, sortData } from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n\r\n\r\nexport function getChecklistVersion(checklist, userInfo, masterData) {\r\n\r\n    return function (dispatch) {\r\n        const inputData = { \"nchecklistcode\": checklist.nchecklistcode, userinfo: userInfo }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"checklist/getChecklistVersion\", inputData)\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data,\r\n                    selectedchecklist: checklist,\r\n                }\r\n                sortData(masterData)\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: { masterData, loading: false }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getVersionQB(versionObject) {\r\n    let { version, masterData, userInfo } = versionObject\r\n    return function (dispatch) {\r\n        if (!(masterData.selectedversion.nchecklistversioncode === version.nchecklistversioncode)) {\r\n            const inputData = { nchecklistversioncode: version.nchecklistversioncode, userinfo: userInfo }\r\n            //const url1=rsapi.post('checklist/getActiveChecklistVersionById',inputData)\r\n            const url2 = rsapi.post('checklist/getChecklistVersionQB', inputData)\r\n            dispatch(initRequest(true));\r\n            Axios.all([url2])\r\n                .then(response => {\r\n                    masterData = {\r\n                        ...masterData,\r\n                        checklistversionqb: response[0].data.checklistversionqb,\r\n                        selectedversion: version\r\n                    }\r\n                    sortData(masterData)\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData,\r\n                            loading: false\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: { masterData, loading: false }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function viewVersionTemplate(version, userInfo, ncontrolCode) {\r\n\r\n    return function (dispatch) {\r\n\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"checklist/viewTemplate\", {\r\n            \"nchecklistversioncode\": version.nchecklistversioncode, \"flag\": 1, \"ntransactionresultcode\": 1\r\n            , \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        openTemplateModal: true,\r\n                        templateData: response.data,\r\n                        loading: false,\r\n                        ncontrolcode:ncontrolCode,\r\n                        selectedRecord: {}\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n// export function filterChecklistColumnData(filterValue, masterData, userInfo) {\r\n//     return function(dispatch){\r\n//         let checklistCode = 0;   \r\n//         let searchedData = undefined;\r\n//         if (filterValue === \"\"){\r\n//             checklistCode = masterData[\"checklist\"][0].nchecklistcode;\r\n//         } \r\n//         else{\r\n\r\n//             searchedData = searchData(filterValue, masterData[\"checklist\"]);\r\n\r\n//             if (searchedData.length > 0){\r\n//                 checklistCode = searchedData[0].nchecklistcode; \r\n//             }\r\n\r\n//         }\r\n//         if (checklistCode !== 0){\r\n\r\n//             dispatch(initRequest(true));\r\n//             rsapi.post(\"checklist/getChecklistVersion\", {nchecklistcode:checklistCode,userinfo:userInfo})\r\n//             .then(response=>{                \r\n//                 masterData[\"checklistversion\"] = sortData(response.data[\"checklistversion\"]);\r\n//                 masterData[\"selectedversion\"] = response.data[\"selectedversion\"];\r\n//                 masterData[\"checklistversionqb\"] =  sortData(response.data[\"checklistversionqb\"]);\r\n//                 masterData[\"selectedchecklist\"] =searchedData?searchedData[0]:masterData[\"checklist\"][0];\r\n//                 masterData[\"searchedData\"] = searchedData;\r\n//                 dispatch({type: DEFAULT_RETURN, payload:{masterData,   loading:false}});\r\n//             })\r\n//             .catch(error=>{\r\n//                 dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n//                 if (error.response.status === 500){\r\n//                     toast.error(error.message);\r\n//                 } \r\n//                 else{               \r\n//                     toast.warn(error.response.data);\r\n//                 }  \r\n//             }) \r\n\r\n//         }else{\r\n//             masterData[\"checklistversion\"] = [];\r\n//             masterData[\"selectedversion\"] = [];\r\n//             masterData[\"checklistversionqb\"] = [];\r\n//             masterData[\"selectedchecklist\"] =[];\r\n//             masterData[\"searchedData\"] = [];\r\n//             dispatch({type: DEFAULT_RETURN, payload:{masterData,   loading:false}});\r\n\r\n//         }\r\n//     }\r\n// }   \r\n\r\nexport function onSaveTemplate(selectedRecord, userInfo) {\r\n\r\n    return function (dispatch) {\r\n\r\n        \r\n        let listChecklistVersionTemplate = [];\r\n        if (selectedRecord && selectedRecord.editedQB) {\r\n            selectedRecord.editedQB.map(qbcode =>\r\n                listChecklistVersionTemplate.push(selectedRecord[qbcode]))\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"checklist/createUpdateChecklistVersionTemplate\",\r\n                { checklistversiontemplate: listChecklistVersionTemplate, \"userinfo\": userInfo })\r\n\r\n                .then(response => {\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            selectedRecord: {},\r\n                            templateData: undefined,\r\n                            openTemplateModal: false,\r\n                            loading: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    openTemplateModal: false, selectedRecord: {},templateData: undefined, loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function showChecklistAddScreen(nchecklistversioncode, id, ncontrolcode, userInfo) {\r\n    return function (dispatch) {\r\n        let modalName = (id === 'checklist') ? 'openModal' : 'openChildModal'\r\n        if (id === \"checklistversionqb\") {\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"checklist/getVersionQBAddEditData\",\r\n                { \"nchecklistversioncode\": nchecklistversioncode, \"userinfo\": userInfo })\r\n                .then(response => {\r\n                    const optionsQBCategoryMap = constructOptionList(response.data.qbcategory || [], \"nchecklistqbcategorycode\", \"schecklistqbcategoryname\", undefined, undefined, true);\r\n                    const availableQBCategory = optionsQBCategoryMap.get(\"OptionList\");\r\n                    let listQbObj={listQb:{}};\r\n                    let optionsChecklistComponentMap;\r\n                    availableQBCategory.map(cat=>\r\n                        {\r\n                        optionsChecklistComponentMap = constructOptionList(response.data.checklistqb[cat.label] || [], \"nchecklistqbcode\", \"squestion\", undefined, undefined, true);\r\n                        listQbObj={listQb:{...listQbObj.listQb,[cat.label]: optionsChecklistComponentMap.get(\"OptionList\")}};\r\n                        return null;\r\n                        }\r\n                    )\r\n                    \r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            [modalName]: true,\r\n                            selectedRecord: {},\r\n                            operation: \"create\",\r\n                            id, \r\n                            QBCategory: undefined, \r\n                            QB: undefined,\r\n                            availableQBCategory,\r\n                            listQb:listQbObj.listQb,\r\n                            availableQB: [],\r\n                            ncontrolcode, loading: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload: {\r\n                    [modalName]: true,\r\n                    selectedRecord: {},\r\n                    operation: \"create\",\r\n                    id,\r\n                    ncontrolcode,\r\n                    loading: false\r\n                }\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchChecklistRecordByID(editParam) {\r\n    return function (dispatch) {\r\n\r\n        if (editParam.screenName.toLowerCase() === \"checklist\" || editParam.screenName.toLowerCase() === \"checklistversion\") {\r\n            let modalName = editParam.screenName.toLowerCase() === \"checklist\" ? 'openModal' : 'openChildModal'\r\n            dispatch(initRequest(true));\r\n            rsapi.post(\"checklist/getActive\" + editParam.screenName + \"ById\",\r\n                { [editParam.primaryKeyField]: editParam.primaryKeyValue, \"userinfo\": editParam.userInfo })\r\n\r\n                .then(response => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            [modalName]: true,\r\n                            selectedRecord: response.data,\r\n                            operation: editParam.operation,\r\n                            id: editParam.screenName.toLowerCase(),\r\n                            ncontrolcode: editParam.ncontrolCode,\r\n                            masterData: editParam.masterData,\r\n                            loading: false\r\n\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            const url1 = rsapi.post(\"checklist/getVersionQBAddEditData\",\r\n                { \"nchecklistversioncode\": editParam.masterData.selectedversion.nchecklistversioncode, \"userinfo\": editParam.userInfo })\r\n            const url2 = rsapi.post(\"checklist/getActive\" + editParam.screenName + \"ById\",\r\n                { [editParam.primaryKeyField]: editParam.primaryKeyValue, \"userinfo\": editParam.userInfo })\r\n            dispatch(initRequest(true));\r\n            Axios.all([url1, url2])\r\n                .then(response => {\r\n                    let selectedId = editParam.primaryKeyValue\r\n                    // const optionsQBCategoryMap = constructOptionList(response[0].data.qbcategory || [], \"nchecklistqbcategorycode\", \"schecklistqbcategoryname\", undefined, undefined, true);\r\n                    // const optionsChecklistComponentMap = constructOptionList(response[0].data.checklistqb || [], \"nchecklistqbcode\", \"squestion\", undefined, undefined, true);\r\n                    // const availableQBCategory = optionsQBCategoryMap.get(\"OptionList\");\r\n                    // const availableQB = optionsChecklistComponentMap.get(\"OptionList\");\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            masterData: editParam.masterData,\r\n                            openChildModal: true,\r\n                            selectedRecord: response[1].data,\r\n                            operation: \"update\",\r\n                            id: editParam.screenName.toLowerCase(),\r\n                            // availableQBCategory ,\r\n                            // availableQB ,\r\n                            QBCategory: { \"value\": response[1].data[\"nchecklistqbcategorycode\"], \"label\": response[1].data[\"schecklistqbcategoryname\"] },\r\n                            QB: { \"value\": response[1].data[\"nchecklistqbcode\"], \"label\": response[1].data[\"squestion\"] },\r\n                            ncontrolcode: editParam.ncontrolCode, loading: false, selectedId\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}