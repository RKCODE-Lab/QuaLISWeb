{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\ResultEntryBySample\\\\ResultEntry.jsx\";\nimport React, { Component } from 'react';\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync, faBorderAll, faLink, faComment, faComments, faPaperclip, faCommentDots, faChevronRight, faMicroscope, faFlask, faHistory, faBookMedical, faNotesMedical } from '@fortawesome/free-solid-svg-icons';\nimport { Card, Col, Row, Nav, Button, Modal } from 'react-bootstrap';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { connect } from 'react-redux';\nimport Axios from \"axios\";\nimport { ListWrapper } from '../../components/client-group.styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFileInvoice } from '@fortawesome/free-solid-svg-icons';\nimport SplitterLayout from \"react-splitter-layout\";\nimport { ContentPanel } from '../../components/App.styles';\nimport PortalModal from '../../PortalModal';\nimport Iframe from 'react-iframe';\nimport ReactTooltip from 'react-tooltip';\nimport { crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord, completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile, filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate, getAverageResult, getREMaterialComboGet, getPredefinedData, getELNTestValidation //,deleteResultUsedMaterial\n, getConfigurationFilter, getTestBasedBatchWorklist, addREAdhocParamter, createAdhocParamter // ,getPredefinedData,getConfigurationFilter,getTestBasedBatchWorklist//,deleteResultUsedMaterial\n, enforceResult //,deleteResultUsedMaterial\n, ResultEntryViewPatientDetails, resultEntryGetParameter, resultEntryGetSpec, resultEntryGetComponent } from '../../actions'; //import { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone,CF_encryptionData } from '../../components/CommonScript';\n\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone, Lims_JSON_stringify, CF_encryptionData, onSaveMandatoryValidation, replaceBackSlash } from '../../components/CommonScript';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport { SampleType, parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties, SideBarSeqno, SideBarTabIndex } from '../../components/Enumeration';\nimport { ProductList } from '../product/product.styled';\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component';\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ResultEntryFilter from './ResultEntryFilter';\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\nimport ResultEntryForm from './ResultEntryForm';\nimport ResultEntryParameterForm from './ResultEntryParameterForm';\nimport TestEditForm from './TestEditForm';\nimport SampleInfoView from '../approval/SampleInfoView';\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\nimport TemplateForm from '../checklist/checklist/TemplateForm';\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\nimport Attachments from '../attachmentscomments/attachments/Attachments';\nimport Comments from '../attachmentscomments/comments/Comments';\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\nimport ResultEntryImport from './ResultEntryImport';\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'; // import ReactTooltip from 'react-tooltip';\n\nimport ResultEntryMean from './ResultEntryMean';\nimport ScrollBar from 'react-perfect-scrollbar';\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\nimport AddAdhocParameter from './AddAdhocParameter';\nimport ResultUsedMaterial from './UsedMaterial';\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\nimport ModalShow from '../../components/ModalShow';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { process } from '@progress/kendo-data-query';\nimport ResultEntryPredefinedComments from './ResultEntryPredefinedComments';\nimport ResultEntryEnforceResult from './ResultEntryEnforceResult';\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\nimport fullviewExpand from \"../../assets/image/fullview-expand.svg\";\nimport fullviewCollapse from \"../../assets/image/fullview-collapse.svg\";\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\n\nclass ResultEntry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.props.Login.masterData.selectedImportFile;\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: { ...this.props.Login.masterData,\n            selectedImportFile: selectedRecord\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.deleteAttachmentParameterFile = (event, file, fieldName, index) => {\n      let selectedRecordParameter = this.state.selectedRecord.ResultParameter[index];\n      selectedRecordParameter[fieldName] = deleteAttachmentDropZone(selectedRecordParameter[fieldName], file);\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord['ResultParameter'][index]['editable'] = true; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { masterData: { ...this.props.Login.masterData, ResultParameter.editable\n      //         //selectedImportFile: selectedRecord \n      //     } }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      this.setState({\n        selectedRecord: selectedRecord //fileToDelete:file.name \n\n      });\n    };\n\n    this.closeModalShow = () => {\n      let showAlertGrid = this.props.Login.showAlertGrid;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['RESelectedTest'].forEach(object => {\n        object['expanded'] && delete object['expanded'];\n      });\n      selectedRecord['ntestgrouptestpredefsubcode'] && delete selectedRecord['ntestgrouptestpredefsubcode'];\n      showAlertGrid = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showAlertGrid,\n          masterData,\n          selectedRecord\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onTabChangeRulesEngine = tabProps => {\n      let masterData = this.props.Login.masterData && this.props.Login.masterData;\n      masterData['RESelectedTest'].forEach(object => {\n        object['expanded'] && delete object['expanded'];\n      });\n      masterData['activeTabName'] = tabProps.activeTabName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleExpandChange = mapobject => {\n      let childListMap = new Map();\n      let keylst = Object.keys(mapobject);\n      keylst.map(key => {\n        childListMap.set(parseInt(key), Object.values(mapobject[key]));\n      });\n      this.setState({\n        childListMap\n      });\n    };\n\n    this.availableTestFilter = data => {\n      let lstntransactionsamplecode = [];\n\n      if (this.props.Login.RegistrationTestAlert) {\n        let keylst = Object.keys(this.props.Login.RegistrationTestAlert); // keylst.map(x=>{ \n        //    this.props.Login.RegistrationTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \n        // }); \n        // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\n\n        let boolean1 = keylst.includes(data.ntransactiontestcode.toString()); //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\n\n        if (boolean1 //&&boolean2\n        ) {\n          return data;\n        }\n      }\n    };\n\n    this.unavailableTestFilter = data => {\n      let lstntransactionsamplecode = [];\n\n      if (this.props.Login.NewTestGroupTestAlert) {\n        let keylst = Object.keys(this.props.Login.NewTestGroupTestAlert); // keylst.map(x=>{ \n        //     this.props.Login.NewTestGroupTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \n        // });\n        // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\n\n        let boolean1 = keylst.includes(data.ntransactiontestcode.toString()); //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\n\n        if (boolean1 //&&boolean2\n        ) {\n          return data;\n        }\n      }\n    };\n\n    this.dataStateAvailabletestAlert = event => {\n      this.setState({\n        dataStateavailabletest: event.dataState\n      });\n    };\n\n    this.dataStateUnAvailabletestAlert = event => {\n      this.setState({\n        dataStateunavailabletest: event.dataState\n      });\n    };\n\n    this.tabAlertRulesEngine = () => {\n      const tabMap = new Map();\n      {\n        this.props.Login.RegistrationTestAlert && this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter).length > 0 && //this.props.Login.RegistrationTestAlert.length>0 &&\n        tabMap.set(\"IDS_AVAILABLETESTUNDERSAMPLE\", /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"ntransactiontestcode\",\n          dataResult: process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter), 'descending', 'ntransactiontestcode') || [], this.state.dataStateavailabletest ? this.state.dataStateavailabletest : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateavailabletest ? this.state.dataStateavailabletest : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateAvailabletestAlert,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: true,\n          selectedId: 0,\n          gridHeight: '350px',\n          gridWidth: '700px',\n          expandField: \"expanded\",\n          handleExpandChange: () => {\n            this.handleExpandChange(this.props.Login.RegistrationTestAlert);\n          },\n          hasChild: true,\n          childMappingField: 'ntransactiontestcode',\n          childColumnList: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_SAMPLEARNO\",\n            \"dataField\": \"samplearno\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_ARNO\",\n            \"dataField\": \"sarno\",\n            \"width\": \"200px\"\n          }] : [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }, {\n            \"idsName\": \"IDS_ARNO\",\n            \"dataField\": \"sarno\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_AVAILABLETESTUNDERSAMPLE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 17\n          }\n        }));\n        this.props.Login.NewTestGroupTestAlert && this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter).length > 0 && //this.props.Login.NewTestGroupTestAlert.length>0  &&\n        tabMap.set(\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\", /*#__PURE__*/React.createElement(DataGrid, {\n          primaryKeyField: \"ntransactiontestcode\",\n          dataResult: process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter), 'descending', 'ntransactiontestcode') || [], this.state.dataStateunavailabletest ? this.state.dataStateunavailabletest : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.state.dataStateunavailabletest ? this.state.dataStateunavailabletest : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: this.dataStateUnAvailabletestAlert,\n          extractedColumnList: [{\n            \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          pageable: true,\n          scrollable: 'scrollable',\n          hideColumnFilter: true,\n          selectedId: 0,\n          expandField: \"expanded\",\n          handleExpandChange: () => {\n            this.handleExpandChange(this.props.Login.NewTestGroupTestAlert);\n          },\n          gridHeight: '350px',\n          gridWidth: '700px',\n          hasChild: true,\n          childMappingField: 'ntransactiontestcode',\n          childColumnList: [{\n            \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\",\n            \"dataField\": \"stestsynonym\",\n            \"width\": \"200px\"\n          }],\n          childList: this.state.childListMap,\n          activeTabName: \"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 17\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openTemplateModal = this.props.Login.openTemplateModal;\n      let selectedRecord = this.props.Login.selectedRecord; //let additionInfo=this.props.Login.additionInfo ||{};\n\n      let screenName = this.props.Login.screenName;\n      let operation = this.props.Login.operation;\n      let loadFile = this.props.Login.loadFile;\n      let selectedId = this.props.Login.selectedId;\n      let updateInfo = {}; //additionInfo={...selectedRecord};\n\n      if (screenName === \"IDS_RESULTFORMULA\") {\n        screenName = \"IDS_RESULTENTRY\";\n        operation = \"update\";\n        let showValidate = !this.props.Login.showValidate;\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            operation,\n            showValidate,\n            validateFormulaMandyFields: []\n          }\n        };\n      } else {\n        if (this.props.Login.loadEsign) {\n          if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"complete\" || this.props.Login.operation === \"default\" || this.props.Login.operation === \"deleteTask\" || this.props.Login.operation === \"deleteInstrument\" || this.props.Login.operation === \"deleteMaterial\") {\n            loadEsign = false;\n            openModal = false;\n            selectedRecord = {};\n          } else if (this.props.Login.operation === \"updatechecklist\") {\n            loadEsign = false;\n            openModal = false;\n          } else {\n            loadEsign = false;\n            selectedRecord['esignpassword'] = \"\";\n            selectedRecord['esigncomments'] = \"\";\n            selectedRecord['esignreason'] = \"\";\n          }\n        } else {\n          openModal = false;\n          openTemplateModal = false;\n          selectedRecord = {};\n          loadFile = false;\n          selectedId = null;\n        }\n\n        updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal,\n            loadEsign,\n            openTemplateModal,\n            screenName,\n            selectedRecord,\n            loadFile,\n            selectedId\n          }\n        };\n      }\n\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            todate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 2,\n            fromdate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 2,\n            nsampletypecode: parseInt(event.value),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"] || this.props.Login.masterData.fromDate, this.state.selectedRecord && this.state.selectedRecord[\"toDate\"] || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 3,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromdate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getRERegistrationSubType(inputData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realDesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMapping,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realDesignTemplateMappingList: this.props.Login.masterData.realDesignTemplateMappingList,\n            realFilterStatusList: this.props.Login.masterData.realFilterStatusList,\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realTestvaluesList: this.props.Login.masterData.realTestvaluesList,\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultRegistrationSubType: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREApprovalConfigVersion(inputData);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getREFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 4,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultApprovalConfigVersion: event.item,\n            masterData: this.props.Login.masterData,\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType\n          };\n          this.props.getREJobStatus(inputData);\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData\n          };\n          this.props.getREFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: 1,\n            // parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\n            ntranscode: event.value === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(event.value),\n            userinfo: this.props.Login.userInfo,\n            defaultFilterStatus: event.item,\n            masterData: this.props.Login.masterData,\n            DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\n          };\n          this.props.getREFilterTestData(inputData);\n        } else if (fieldname === \"test\") {\n          let defaultTestvalues = event.item;\n          this.props.Login.masterData.defaultTestvalues = defaultTestvalues; // const updateInfo = {\n          //     typeName: DEFAULT_RETURN,\n          //     data: { masterData: { ...this.props.Login.masterData } }\n          // }\n          // this.props.updateStore(updateInfo);\n\n          inputData = {\n            defaultTestvalues,\n            ntestcode: this.props.Login.masterData.defaultTestvalues.ntestcode,\n            masterData: this.props.Login.masterData,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            userinfo: this.props.Login.userInfo,\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode)\n          };\n          this.props.getConfigurationFilter(inputData);\n        } else if (fieldname === \"nconfigfiltercode\") {\n          let defaultConfigurationFilterValue = event.item;\n          this.props.Login.masterData.defaultConfigurationFilterValue = defaultConfigurationFilterValue;\n          this.props.Login.masterData.realdefaultConfigurationFilterValue = defaultConfigurationFilterValue;\n          inputData = {\n            defaultConfigurationFilterValue,\n            nconfigfiltercode: parseInt(this.props.Login.masterData.defaultConfigurationFilterValue.nconfigfiltercode),\n            ntestcode: this.props.Login.masterData.defaultTestvalues.ntestcode,\n            masterData: this.props.Login.masterData,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            //ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode)\n          };\n          this.props.getTestBasedBatchWorklist(inputData);\n        } else if (fieldname === \"nworklistcode\") {\n          let defaultWorklistvalue = event.item;\n          this.props.Login.masterData.defaultWorklistvalue = defaultWorklistvalue;\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          if (fieldname === \"nbatchmastercode\") {\n            let defaultBatchvalue = event.item;\n            this.props.Login.masterData.defaultBatchvalue = defaultBatchvalue;\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                masterData: { ...this.props.Login.masterData\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        }\n      } else {\n        if (fieldname === \"nconfigfiltercode\") {\n          this.props.Login.masterData.defaultConfigurationFilterValue = [];\n          this.props.Login.masterData.defaultWorklistvalue = [];\n          this.props.Login.masterData.defaultBatchvalue = [];\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData\n              }\n            }\n          };\n          this.props.updateStore(updateInfo);\n        }\n      }\n    };\n\n    this.OnDateConverstion = (date, fieldname) => {\n      const month = validateTwoDigitDate(String(date.getMonth() + 1));\n      const day = validateTwoDigitDate(String(date.getDate()));\n\n      if (fieldname === \"fromDate\") {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\n      } else {\n        date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\n      }\n\n      return date;\n    };\n\n    this.onReload = () => {\n      let {\n        realFromDate,\n        realToDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realApproveConfigVersion,\n        realFilterStatusValue,\n        realTestcodeValue,\n        realWorklistCodeValue\n      } = this.props.Login.masterData; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue\n      };\n      let inputData = {\n        nsampletypecode: realSampleTypeValue && realSampleTypeValue.nsampletypecode || -1,\n        nregtypecode: realRegTypeValue && realRegTypeValue.nregtypecode || -1,\n        nregsubtypecode: realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode || -1,\n        napprovalversioncode: realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\n        ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        nworlistcode: realWorklistCodeValue && realWorklistCodeValue.nworklistcode || -1\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onDesignTemplateChange = (event, fieldName, labelname) => {\n      let masterData = this.props.Login.masterData;\n      masterData = { ...masterData,\n        [labelname]: { ...event.item\n        }\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onREFilterSubmit = event => {\n      // let realFromDate = new Date(this.props.Login.masterData.fromDate)\n      // let realToDate = new Date(this.props.Login.masterData.toDate)\n      let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\n      let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\n      let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType;\n      let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType;\n      let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType;\n      let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion;\n      let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus;\n      let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues;\n      let realWorklistCodeValue = this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue;\n      let realBatchCodeValue = this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue;\n      let realDesignTemplateMapping = this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue;\n      let realDesignTemplateMappingList = this.props.Login.masterData.DesignTemplateMapping && this.props.Login.masterData.DesignTemplateMapping;\n      let realApprovalConfigVersionList = this.props.Login.masterData.ApprovalConfigVersion && this.props.Login.masterData.ApprovalConfigVersion;\n      let realFilterStatusList = this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.REFilterStatus;\n      let realRegistrationTypeList = this.props.Login.masterData.RegistrationType && this.props.Login.masterData.RegistrationType;\n      let realRegistrationSubTypeList = this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType; // let realBatchvaluesList=this.props.Login.masterData.RegistrationType\n      // let  RealWorklistvaluesList=this.props.Login.masterData.RegistrationType\n\n      let realConfigurationFilterValuesList = this.props.Login.masterData.ConfigurationFilterValues && this.props.Login.masterData.ConfigurationFilterValues; //let obj = this.covertDatetoString(realFromDate, realToDate)\n\n      let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\n      let masterData = { ...this.props.Login.masterData,\n        realFromDate: obj.fromDate,\n        realToDate: obj.toDate,\n        realSampleTypeValue,\n        realRegTypeValue,\n        realRegSubTypeValue,\n        realFilterStatusValue,\n        realApproveConfigVersion,\n        realTestcodeValue,\n        realWorklistCodeValue,\n        realBatchCodeValue,\n        realDesignTemplateMapping,\n        realDesignTemplateMappingList,\n        realApprovalConfigVersionList,\n        realFilterStatusList,\n        realRegistrationTypeList,\n        realRegistrationSubTypeList,\n        realConfigurationFilterValuesList\n      };\n      let inputData = {\n        nsampletypecode: this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode || -1,\n        nregtypecode: this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode || -1,\n        nregsubtypecode: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode || -1,\n        napprovalversioncode: this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode || -1,\n        ntranscode: this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n        //ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\n        ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\n        ntransactiontestcode: 0,\n        njobstatuscode: this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode || 1,\n        fromdate: obj.fromDate,\n        todate: obj.toDate,\n        userinfo: this.props.Login.userInfo,\n        activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\n        showTest: true,\n        showSample: false,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode || -1,\n        nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n        nworlistcode: this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue.nbatchmastercode || -1\n      };\n      const inpuParamData = {\n        inputData,\n        masterData,\n        refs: {\n          searchSampleRef: this.searchSampleRef,\n          searchSubSampleRef: this.searchSubSampleRef,\n          searchTestRef: this.searchTestRef\n        },\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        historyDataState: this.state.historyDataState\n      };\n\n      if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1 && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\n        this.props.getResultEntryDetails(inpuParamData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\"\n        }));\n      }\n    };\n\n    this.onSecondaryPaneSizeChange = (e, val) => {// let hGrand = this.state.grandparentheight\n      // let check = e - 400;\n      // if (check > 1) {\n      //     hGrand = this.state.parentHeight + check\n      // }\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: hGrand - e - 70,\n      //     grandparentheight: hGrand\n      // })\n      // this.setState({\n      //     paneHeight: e - val,\n      //     secondPaneHeight: this.state.parentHeight - e - 70\n      // })\n    };\n\n    this.onComboCategoryChange = (event, fieldname) => {\n      if (event !== null) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\n\n        if (fieldname === \"ninstrumentcatcode\") {\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            nflag: 2,\n            ninstrumentcatcode: event.value,\n            ncalibrationRequired: event.item.ncalibrationreq\n          };\n        }\n\n        rsapi.post(uRL, inputData).then(response => {\n          const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\", \"sinstrumentid\", undefined, undefined, undefined);\n          const TagListInstrument = TagInstrument.get(\"OptionList\");\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              masterData: { ...this.props.Login.masterData,\n                Instrument: TagListInstrument\n              },\n              selectedRecord: { ...this.props.Login.selectedRecord,\n                [fieldname]: event,\n                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : []\n              }\n            }\n          };\n          this.props.updateStore(updateInfo); // const selectedRecord = this.state.selectedRecord || {};\n          // selectedRecord[fieldname] = event;\n          // this.setState({ selectedRecord });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.testRETabDetail = () => {\n      const testTabMap = new Map(); //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      testTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        editpredefinedcomments: this.editpredefinedcomments,\n        enforceResult: this.enforceResult,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1014,\n          columnNumber: 39\n        }\n      }));\n      testTabMap.set(\"IDS_INSTRUMENT\", /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 42\n        }\n      }));\n      testTabMap.set(\"IDS_MATERIAL\", /*#__PURE__*/React.createElement(ResultUsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1053,\n          columnNumber: 40\n        }\n      }));\n      testTabMap.set(\"IDS_TASK\", /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1071,\n          columnNumber: 36\n        }\n      }));\n      testTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"dcreateddate\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        isneedReport: false,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1096,\n          columnNumber: 47\n        }\n      }));\n      testTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        isSampleTestComment: true,\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        masterData: this.props.Login.masterData,\n        isTestComment: true,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedTest,\n          ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1139,\n          columnNumber: 44\n        }\n      }));\n      testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1189,\n          columnNumber: 51\n        }\n      }));\n      return testTabMap;\n    };\n\n    this.sampleDataStateChange = event => {\n      switch (this.props.Login.activeSampleKey) {\n        case \"IDS_APPROVALHISTORY\":\n          this.setState({\n            sampleHistoryDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            sampleGridDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.sampleGridDataStateChange = event => {\n      this.setState({\n        sampleGridDataState: event.dataState\n      });\n    };\n\n    this.dataStateChange = event => {\n      switch (this.props.Login.activeTestKey) {\n        case \"IDS_RESULTS\":\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_INSTRUMENT\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_MATERIAL\":\n          this.setState({\n            materialDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TASK\":\n          this.setState({\n            taskDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            instrumentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_DOCUMENTS\":\n          this.setState({\n            documentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_RESULTCHANGEHISTORY\":\n          this.setState({\n            resultChangeDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SAMPLECOMMENTS\":\n          this.setState({\n            sampleChangeDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            resultDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.dataResultStateChange = event => {\n      this.setState({\n        dataState: event.dataState\n      });\n    };\n\n    this.subsampleTabDetail = () => {\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      const tabMap = new Map();\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      let {\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1436,\n          columnNumber: 48\n        }\n      }));\n      tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"RESelectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1478,\n          columnNumber: 45\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onSampleTabChange = tabProps => {\n      const activeSampleTab = tabProps.screenName;\n\n      if (activeSampleTab !== this.props.Login.activeSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          RESelectedSample: this.props.Login.masterData.RESelectedSample,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSampleTab,\n          activeSampleTab,\n          activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n        };\n        this.props.getSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.onTestTabChange = tabProps => {\n      const activeTestKey = tabProps.screenName;\n\n      if (activeTestKey !== this.props.Login.activeTestKey) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\n            //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\n            //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestKey,\n            screenName: activeTestKey,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            sampleChangeDataState: this.state.sampleChangeDataState\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      }\n    };\n\n    this.openClosePortal = test => {\n      if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\n        this.props.Login.masterData.enlLink = \"\"; // if(test.RESelectedTest.length === 1)\n        // {           \n\n        this.props.getELNTestValidation(test, this.props.Login.integrationSettings); // }\n        // else{\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\n        // }\n      } else {\n        //this.props.Login.masterData.enlLink=undefined;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openELNSheet: false,\n            masterData: {\n              openELNSheet: false,\n              ...this.props.Login.masterData,\n              enlLink: \"\"\n            }\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n      /*openClosePortal = (test) => {\r\n          if(this.state.openELNSheet === false )\r\n          {\r\n              this.props.Login.masterData.enlLink=\"\";\r\n          // if(test.RESelectedTest.length === 1)\r\n          // {           \r\n                  this.props.getELNTestValidation(test,this.props.Login.integrationSettings);            \r\n          // }\r\n          // else{\r\n          //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\r\n          // }\r\n      }\r\n          else{\r\n             //this.props.Login.masterData.enlLink=undefined;\r\n                // const updateInfo = {\r\n              //    typeName: DEFAULT_RETURN,\r\n              //     data: {\r\n              //         openELNSheet: false,\r\n              //         masterData: {\r\n              //             openELNSheet: false,\r\n              //             ...this.props.Login.masterData,  \r\n              //             enlLink:\"\"\r\n              //         },\r\n              //         enlLink:\"\"                 \r\n              //     }\r\n                  \r\n              // }\r\n              //this.props.updateStore(updateInfo);\r\n              this.setState({ openELNSheet: false,  enlLink:\"\" })\r\n          }\r\n          // if (this.state.openELNSheet === false) {\r\n              // if (test.test.selensheetname !== null) {\r\n                  /*let enlLink = \"\";\r\n                     const elnuser= {\r\n                       usercode: test.elnUserInfo.nelncode,\r\n                       username: test.elnUserInfo.selnusername,\r\n                       userfullname: test.elnUserInfo.selnusername,\r\n                      lsusergroup: {\r\n                       usergroupcode: test.elnUserInfo.nelnusergroupcode,\r\n                       usergroupname: test.elnUserInfo.nelnusergroupcode,\r\n                       },\r\n                      //  lssitemaster:{ sitecode:sitecode }\r\n                      }\r\n                        const user = CF_encryptionData(elnuser).EncryptData;\r\n                  const enlcredential = {\r\n                      ElnUser: CF_encryptionData(this.props.Login.settings[20]).EncryptData,\r\n                      Elntenant: CF_encryptionData(\"-1\").EncryptData,\r\n                      Elnloginfrom: CF_encryptionData(\"-1\").EncryptData,\r\n                      //Elntoken: CF_encryptionData(\"\").EncryptData,\r\n                      Elnpassword: CF_encryptionData(this.props.Login.settings[21]).EncryptData,\r\n                      Elnsitecode: CF_encryptionData(this.props.Login.settings[22]).EncryptData,\r\n                      Elnsitename: CF_encryptionData(this.props.Login.settings[23]).EncryptData,\r\n                      Elnusergroupname: CF_encryptionData(this.props.Login.settings[24]).EncryptData,\r\n                      Elnusergroupcode: CF_encryptionData(this.props.Login.settings[25]).EncryptData,\r\n                  }\r\n                    //Axios.post(\"http://5.189.171.17:8095/ELN-0.0.1-SNAPSHOT/authenticate\",inputou)\r\n                  //Axios.post(this.props.Login.settings[27], inputou)\r\n                  // Axios.post(\"https://logilabelntesting.azurewebsites.net/\", user)\r\n                  //     .then(response => {\r\n                          const testname = test.test.stestname.substring(0, test.test.stestname.indexOf(\"[\")).trim();\r\n                            //const batchId = test.test.sarno+'-'+test.test.stestname;\r\n                          const batchId = test.test.sarno + '-' + testname;\r\n                          const ntransactiontestcode = CF_encryptionData(batchId//test.RESelectedTest[0].ntransactiontestcode\r\n                          ).EncryptData;\r\n                          // const Elntoken = CF_encryptionData(\"Bearer \" + response.data.token).EncryptData;\r\n                              // const link =\r\n                          //     //window.location.href.toString() \r\n                          //     \"\" +\r\n                          //     '#{\"orderid\":\"' +\r\n                          //     ntransactiontestcode +\r\n                          //     '\",\"u\":\"' +\r\n                          //     enlcredential.ElnUser +\r\n                          //     '\",\"t\":\"' +\r\n                          //     enlcredential.Elntenant +\r\n                          //     '\",\"l\":\"' +\r\n                          //     enlcredential.Elnloginfrom +\r\n                          //     '\",\"k\":\"' +\r\n                          //     Elntoken +\r\n                          //     //response.data.token+\r\n                          //     '\",\"uc\":\"' +\r\n                          //     enlcredential.Elnusergroupcode +\r\n                          //     '\",\"ug\":\"' +\r\n                          //     enlcredential.Elnusergroupname +\r\n                          //     '\",\"sc\":\"' +\r\n                          //     enlcredential.Elnsitecode +\r\n                          //     '\",\"sn\":\"' +\r\n                          //     enlcredential.Elnsitename +\r\n                          //     '\",\"LO\":\"' +\r\n                          //     ntransactiontestcode +\r\n                          //     '\"}';\r\n                            const link =\r\n                              //window.location.href.toString() \r\n                              \"\" +\r\n                              '#{\"orderid\":\"' +\r\n                              ntransactiontestcode +\r\n                              '\",\"user\":\"' +\r\n                              user +\r\n                              '\",\"batchid\":\"' +\r\n                              ntransactiontestcode +\r\n                              '\"}';\r\n                          \r\n                          //enlLink = \"https://logilabelntest.azurewebsites.net/vieworder\".concat(link);\r\n                          enlLink=\"https://logilabelntesting.azurewebsites.net/\";\r\n                          console.log(\"eln link:\", enlLink);\r\n                          //}\r\n                          // this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1, enlLink })\r\n                          this.setState({ openELNSheet: true, nflag: 1, enlLink })\r\n                          //this.props.encryptionData(test);\r\n                      // })\r\n                      //this.getActiveTestURL() \r\n                      // .catch(response => { })\r\n              // }\r\n              // else {\r\n              //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOSHEETFORTHISTEST\" }));\r\n                // }\r\n      /*}\r\n      else {\r\n              this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1 })\r\n                let testChildGetREParam = {\r\n                  masterData: this.props.Login.masterData,\r\n                  userinfo: this.props.Login.userInfo,\r\n                  nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                  nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                  nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                  napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                  ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                  ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                  npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                  ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                  activeTestKey: 'IDS_RESULTS',\r\n                  testskip: this.state.testskip,\r\n                  testtake: this.state.testtake,\r\n                  resultDataState: this.state.resultDataState,\r\n                  instrumentDataState: this.state.instrumentDataState,\r\n                  materialDataState: this.state.materialDataState,\r\n                  taskDataState: this.state.taskDataState,\r\n                  documentDataState: this.state.documentDataState,\r\n                  resultChangeDataState: this.state.resultChangeDataState,\r\n                  testCommentDataState: this.state.testCommentDataState,\r\n                  RESelectedTest: this.props.Login.masterData.RESelectedTest\r\n              }\r\n                this.props.getTestChildTabREDetail(testChildGetREParam, true)\r\n      \r\n              //this.filterTestParam\r\n          }*/\n\n    };\n\n    this.onSubSampleTabChange = tabProps => {\n      const activeSubSampleTab = tabProps.screenName;\n\n      if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n          userinfo: this.props.Login.userInfo,\n          screenName: activeSubSampleTab,\n          activeSubSampleTab,\n          subSampleCommentDataState: this.state.subSampleCommentDataState,\n          subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\n          activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n        };\n        this.props.getSubSampleChildTabDetail(inputData);\n      }\n    };\n\n    this.viewSample = viewdetails => {\n      this.props.ResultEntryViewPatientDetails(this.props.Login.masterData, \"IDS_PREVIOUSRESULTVIEW\", this.props.Login.userInfo, viewdetails);\n    };\n\n    this.subSampledataStateChange = event => {\n      switch (this.props.Login.activeSubSampleTab) {\n        case \"IDS_SUBSAMPLECOMMENTS\":\n          this.setState({\n            subSampleCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_SUBSAMPLEATTACHMENTS\":\n          this.setState({\n            subSampleAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.testMethodSourceEdit = test => {\n      this.props.testMethodSourceEdit(test);\n    };\n\n    this.addREInstrument = test => {\n      this.props.addREInstrument(test);\n    };\n\n    this.adhocTestParameter = test => {\n      const inputData = {\n        ntestcode: test.test.ntestcode,\n        ntestgrouptestcode: test.test.ntestgrouptestcode,\n        ntransactiontestcode: test.test.ntransactiontestcode,\n        npreregno: test.test.npreregno,\n        masterData: this.props.Login.masterData,\n        userinfo: test.userInfo,\n        adhocId: test.adhocId\n      };\n      this.props.addREAdhocParamter(inputData);\n    };\n\n    this.deleteInstrumentRecord = test => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        'ndesigntemplatemappingcode': ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test,\n          'ndesigntemplatemappingcode': ndesigntemplatemappingcode,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteInstrument\",\n        screenName: \"deleteInstrumentAction\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteInstrumentAction\",\n            operation: \"deleteInstrument\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteInstrumentRecord(test);\n      }\n    };\n\n    this.fetchInstrumentRecord = test => {\n      this.props.fetchInstrumentRecord(test);\n    };\n\n    this.fetchMaterialRecord = test => {\n      this.props.fetchMaterialRecord(test);\n    };\n\n    this.deleteMaterialRecord = test => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        nregtypecode: nregtypecode,\n        nregsubtypecode: nregsubtypecode,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test.selectedRecord,\n          nregtypecode: nregtypecode,\n          nregsubtypecode: nregsubtypecode,\n          ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n          ntransactiontestcode: test.masterData.RESelectedTest ? test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n          userinfo: this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        classUrl: 'resultentrybysample',\n        methodUrl: \"ResultUsedMaterial\",\n        operation: \"delete\",\n        //screenName: \"deleteMaterialAction\",\n        displayName: this.props.Login.inputParam.displayName,\n        //, postParam,\n        //test: test\n        nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteMaterialAction\",\n            operation: \"deleteMaterial\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\"); //this.props.deleteResultUsedMaterial(test)\n      }\n    };\n\n    this.deleteTaskRecord = test => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      test = { ...test,\n        ndesigntemplatemappingcode: ndesigntemplatemappingcode\n      };\n      let inputParam = {\n        inputData: { ...test,\n          'userinfo': this.props.Login.userInfo\n        },\n        // formData: formData,\n        // isFileupload: true,\n        operation: \"deleteTask\",\n        displayName: this.props.Login.inputParam.displayName //, postParam,\n        //test: test\n\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"deleteTaskaction\",\n            operation: \"deleteTask\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.deleteTaskRecord(test);\n      }\n    };\n\n    this.fetchTaskRecord = test => {\n      this.props.fetchTaskRecord(test);\n    };\n\n    this.addResultEntryTask = inputData => {\n      let selectedRecord = {};\n      let selectedRecordTaskForm = {};\n      selectedRecord = {\n        npreregno: inputData.npreregno,\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        stestsynonym: inputData.stestsynonym\n      };\n      selectedRecordTaskForm = {\n        npreregno: inputData.npreregno,\n        ntransactiontestcode: inputData.ntransactiontestcode,\n        stestsynonym: inputData.stestsynonym\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          selectedRecordTaskForm: selectedRecordTaskForm,\n          operation: \"create\",\n          screenName: \"IDS_TASK\",\n          openModal: true,\n          activeTestKey: \"IDS_TASK\",\n          isTaskInitialRender: true,\n          ncontrolcode: inputData.addResultUsedTaskId,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.checkListRecord = parameterData => {\n      this.props.checkListRecord(parameterData, this.props.Login.userInfo);\n    };\n\n    this.getFormula = (parameterData, userInfo, masterData, index, event) => {\n      this.setState({\n        modalEvent: event.currentTarget\n      });\n      this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord);\n    };\n\n    this.getAverageResult = (event, parameterData, index, selectedForumulaInput, masterData, selectedRecord) => {\n      if (!selectedRecord.selectedForumulaInput[index].senableAverage) {\n        this.props.getAverageResult(parameterData, index, selectedForumulaInput, this.props.Login.userInfo, masterData, selectedRecord);\n      } else {\n        selectedForumulaInput[index].senableAverage = !selectedRecord.selectedForumulaInput[index].senableAverage;\n        selectedForumulaInput[index].svalues = selectedForumulaInput[index].soldvalue;\n        this.setState({\n          selectedRecord: { ...selectedRecord,\n            selectedForumulaInput\n          }\n        });\n      }\n    };\n\n    this.calculateFormula = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const selectedForumulaInput = selectedRecord.selectedForumulaInput || [];\n      let lstDynamicFields = [];\n\n      if (selectedForumulaInput) {\n        selectedForumulaInput.map(dynamicfields => lstDynamicFields.push(dynamicfields));\n        const inputData = {\n          masterData: this.props.Login.masterData,\n          lstDynamicFields: lstDynamicFields,\n          userInfo: this.props.Login.userInfo,\n          selectedRecord: selectedRecord,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\n          ResultParameter: this.state.selectedRecord.ResultParameter || {}\n        };\n        this.props.calculateFormula(inputData);\n      }\n    };\n\n    this.resultImport = () => {\n      this.props.Login.masterData.selectedImportFile = [];\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          operation: \"create\",\n          screenName: \"IDS_RESULTIMPORTFILE\",\n          openModal: true,\n          loadFile: true,\n          activeTestKey: \"IDS_RESULTS\",\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      let inputValues = {\n        SampleType: this.props.Login.masterData.realSampleTypeList || [],\n        SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || {},\n        RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\n        RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\n        RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\n        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\n        DesignTemplateMappingValue: this.props.Login.masterData.realDesignTemplateMapping || {},\n        DesignTemplateMapping: this.props.Login.masterData.realDesignTemplateMappingList || [],\n        REFilterStatus: this.props.Login.masterData.realFilterStatusList || [],\n        FilterStatusValue: this.props.Login.masterData.realFilterStatusValue || {},\n        ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\n        ApprovalVersionValue: this.props.Login.masterData.realApproveConfigVersion || {},\n        // REJobStatus:this.state.REJobStatus || [],\n        JobStatusValue: this.props.Login.masterData.defaultjobstatus || {},\n        Testvalues: this.props.Login.masterData.realTestvaluesList || [],\n        Batchvalues: this.props.Login.masterData.realBatchvaluesList || [],\n        BatchValue: this.props.Login.masterData.realBatchvalue || {},\n        Worklistvalues: this.props.Login.masterData.RealWorklistvaluesList || [],\n        WorklistValue: this.props.Login.masterData.realWorklistvalue || {},\n        TestValue: this.props.Login.masterData.realTestcodeValue || {},\n        ConfigurationFilterValues: this.props.Login.masterData.realConfigurationFilterValuesList || [],\n        ConfigurationFilterValue: this.props.Login.masterData.realdefaultConfigurationFilterValue || {},\n        defaultSampleType: this.props.Login.masterData.realSampleTypeValue || {},\n        defaultRegistrationType: this.props.Login.masterData.realRegTypeValue || {},\n        defaultRegistrationSubType: this.props.Login.masterData.realRegSubTypeValue || {},\n        defaultFilterStatus: this.props.Login.masterData.realFilterStatusValue || {},\n        defaultApprovalConfigVersion: this.props.Login.masterData.realApproveConfigVersion || {},\n        defaultBatchvalue: this.props.Login.masterData.realBatchvalue || {},\n        defaultWorklistvalue: this.props.Login.masterData.realWorklistvalue || {},\n        defaultTestvalues: this.props.Login.masterData.realTestcodeValue || {},\n        defaultConfigurationFilterValue: this.props.Login.masterData.realdefaultConfigurationFilterValue || {},\n        fromDate: this.props.Login.masterData.realFromDate || new Date(),\n        toDate: this.props.Login.masterData.realToDate || new Date() // DynamicDesignMapping:this.state.stateDynamicDesign || []\n\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false,\n          masterData: { ...this.props.Login.masterData,\n            ...inputValues\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.handleSubSamplePageChange = e => {\n      this.setState({\n        subSampleSkip: e.skip,\n        subSampleTake: e.take\n      }); //setTimeout(() => { this._scrollBarRef.updateScroll() })\n    };\n\n    this.handleTestPageChange = e => {\n      this.setState({\n        testskip: e.skip,\n        testtake: e.take,\n        sampletakeDataState: e.take\n      });\n    };\n\n    this.verticalPaneSizeChange = val => {\n      if (this.state.enableAutoHeight) {\n        this.setState({\n          initialVerticalWidth: val - 150\n        });\n      }\n    };\n\n    this.changeSplitterOption = () => {\n      this.setState({\n        enableAutoHeight: !this.state.enableAutoHeight,\n        initialVerticalWidth: \"57vh\"\n      });\n    };\n\n    this.sideNavDetail = screenName => {\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\"); // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      return screenName == \"IDS_RESULTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_RESULTS\",\n        tabDetail: this.resultTabDetail(),\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2188,\n          columnNumber: 17\n        }\n      }) : screenName == \"IDS_ATTACHMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\",\n        tabDetail: this.attachmentTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2190,\n          columnNumber: 21\n        }\n      }) : screenName == \"IDS_COMMENTS\" ? /*#__PURE__*/React.createElement(CustomTabs, {\n        activeKey: this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\",\n        tabDetail: this.commentTabDetail(),\n        destroyInactiveTabPane: true,\n        onTabChange: this.onTabChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2192,\n          columnNumber: 25\n        }\n      }) : screenName == \"IDS_INSTRUMENT\" ? /*#__PURE__*/React.createElement(ApprovalInstrumentTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedInstrument\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.instrumentDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteInstrumentRecord,\n        fetchRecord: this.fetchInstrumentRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_INSTRUMENT\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2195,\n          columnNumber: 29\n        }\n      }) : screenName == \"IDS_MATERIAL\" ? /*#__PURE__*/React.createElement(ResultUsedMaterial, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedMaterial\",\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        dataState: this.state.materialDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteMaterialRecord,\n        fetchRecord: this.props.fetchMaterialRecord,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_MATERIAL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2215,\n          columnNumber: 33\n        }\n      }) : screenName == \"IDS_TASK\" ? /*#__PURE__*/React.createElement(ResultEntryTaskTab, {\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        methodUrl: \"ResultUsedTask\",\n        addResultEntryTask: this.addResultEntryTask,\n        controlMap: this.state.controlMap,\n        deleteParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\n        },\n        editParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\n        },\n        dataState: this.state.taskDataState,\n        selectedId: this.props.Login.selectedId || null,\n        isActionRequired: true,\n        dataStateChange: this.dataStateChange,\n        deleteRecord: this.deleteTaskRecord,\n        fetchRecord: this.fetchTaskRecord //fetchRecord={this.fetchInstrumentRecord}\n        ,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_TASK\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2235,\n          columnNumber: 37\n        }\n      }) : screenName == \"IDS_SAMPLEDETAILS\" ? this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ? /*#__PURE__*/React.createElement(SampleInfoView, {\n        data: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {},\n        SingleItem: this.state.SingleItem,\n        screenName: \"IDS_SAMPLEINFO\",\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2263,\n          columnNumber: 45\n        }\n      }) : /*#__PURE__*/React.createElement(SampleInfoGrid, {\n        selectedSample: this.props.Login.masterData.RESelectedSample,\n        dataState: this.state.sampleGridDataState,\n        dataStateChange: this.sampleGridDataStateChange,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreField) || [],\n        userInfo: this.props.Login.userInfo,\n        inputParam: this.props.Login.inputParam,\n        screenName: \"IDS_SAMPLEGRID\",\n        jsonField: \"jsondata\",\n        expandField: \"expanded\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2271,\n          columnNumber: 45\n        }\n      }) : \"\";\n    };\n\n    this.resultTabDetail = () => {\n      const resultTabMap = new Map(); //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      // let { testskip, testtake } = this.state\n      // let testList = this.props.Login.masterData.RE_TEST || [];\n      // testList = testList.slice(testskip, testskip + testtake);\n\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode; //let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      resultTabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(ResultEntryResultsTab, {\n        tabSequence: SideBarSeqno.TEST,\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        masterData: this.props.Login.masterData,\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultDataState,\n        dataStateChange: this.dataStateChange,\n        fetchRecord: this.props.parameterRecord,\n        controlMap: this.state.controlMap,\n        parameterParam: {\n          primaryKeyField: \"ntransactionresultcode\",\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        checkListRecord: this.checkListRecord,\n        editpredefinedcomments: this.editpredefinedcomments,\n        enforceResult: this.enforceResult,\n        checklistParam: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        },\n        selectedId: this.props.Login.selectedId || null,\n        viewFile: this.props.viewAttachment,\n        userRoleControlRights: this.state.userRoleControlRights,\n        screenName: \"IDS_RESULTS\",\n        getMeanTestParameter: this.props.getMeanCalculationTestParameter,\n        meanParam: {\n          \"userInfo\": this.props.Login.userInfo,\n          ncontrolCode: meanControlId\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2299,\n          columnNumber: 41\n        }\n      }));\n      resultTabMap.set(\"IDS_RESULTCHANGEHISTORY\", /*#__PURE__*/React.createElement(ResultChangeHistoryTab, {\n        tabSequence: SideBarSeqno.TEST,\n        userInfo: this.props.Login.userInfo,\n        genericLabel: this.props.Login.genericLabel,\n        ApprovalResultChangeHistory: this.props.Login.masterData.ResultChangeHistory || [],\n        inputParam: this.props.Login.inputParam,\n        dataState: this.state.resultChangeDataState,\n        dataStateChange: this.dataStateChange,\n        screenName: \"IDS_RESULTCHANGEHISTORY\",\n        controlMap: this.state.controlMap,\n        masterData: this.props.Login.masterData,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedId: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2323,\n          columnNumber: 13\n        }\n      }));\n      return resultTabMap;\n    };\n\n    this.attachmentTabDetail = () => {\n      const attachmentTabMap = new Map();\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let {\n        testskip,\n        testtake,\n        subsampleskip,\n        subsampletake\n      } = this.state;\n      let testList = this.props.Login.masterData.RE_TEST || [];\n      testList = testList.slice(testskip, testskip + testtake);\n      const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode;\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        tabSequence: SideBarSeqno.TEST,\n        screenName: \"IDS_TESTATTACHMENTS\",\n        selectedMaster: \"RESelectedTest\",\n        onSaveClick: this.onAttachmentSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDATTACHEMENT\",\n        attachments: this.props.Login.masterData.RegistrationTestAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddTestAttachment\",\n        editName: \"EditTestAttachment\",\n        deleteName: \"DeleteTestAttachment\",\n        viewName: \"ViewTestAttachment\",\n        methodUrl: \"TestAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        subFields: [{\n          [designProperties.VALUE]: \"stestsynonym\"\n        }, {\n          [designProperties.VALUE]: \"screateddate\"\n        }],\n        userInfo: this.props.Login.userInfo,\n        isneedReport: false,\n        deleteParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestAttachment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTATTACHMENTS\",\n          masterList: selectedTestList //this.props.Login.masterData.RESelectedTest\n\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2358,\n          columnNumber: 53\n        }\n      }));\n      this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample && attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        screenName: \"IDS_SUBSAMPLEATTACHMENTS\",\n        onSaveClick: this.onAttachmentSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationSampleAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDATTACHMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        viewFile: this.props.viewAttachment,\n        addName: \"AddSubSampleAttachment\",\n        editName: \"EditSubSampleAttachment\",\n        deleteName: \"DeleteSubSampleAttachment\",\n        viewName: \"ViewSubSampleAttachment\",\n        methodUrl: \"SubSampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        skip: this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0,\n        take: this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights\n        },\n        editParam: {\n          methodUrl: \"SubSampleAttachment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2404,\n          columnNumber: 62\n        }\n      }));\n      attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n        screenName: \"IDS_SAMPLEATTACHMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        selectedMaster: this.props.Login.masterData.RESelectedSample,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        attachments: this.props.Login.masterData.RegistrationAttachment || [],\n        deleteRecord: this.props.deleteAttachment,\n        onSaveClick: this.onAttachmentSaveClick,\n        masterList: this.props.Login.masterData.RESelectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n        fetchRecord: this.props.getAttachmentCombo,\n        addName: \"AddSampleAttachment\",\n        editName: \"EditSampleAttachment\",\n        deleteName: \"DeleteSampleAttachment\",\n        viewName: \"ViewSampleAttachment\",\n        methodUrl: \"SampleAttachment\",\n        nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        userInfo: this.props.Login.userInfo,\n        deleteParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: this.props.Login.screenName\n        },\n        editParam: {\n          methodUrl: \"SampleAttachment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          masterList: this.props.Login.masterData.RESelectedSample\n        },\n        selectedListName: \"IDS_ARNUMBER\",\n        displayName: \"sarno\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2448,\n          columnNumber: 13\n        }\n      }));\n      return attachmentTabMap;\n    };\n\n    this.testDataStateChange = event => {\n      switch (this.props.Login.activeTestTab) {\n        case \"IDS_TEST\":\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTCOMMENTS\":\n          this.setState({\n            testCommentDataState: event.dataState\n          });\n          break;\n\n        case \"IDS_TESTATTACHMENTS\":\n          this.setState({\n            testAttachmentDataState: event.dataState\n          });\n          break;\n\n        default:\n          this.setState({\n            popUptestDataState: event.dataState\n          });\n          break;\n      }\n    };\n\n    this.commentTabDetail = () => {\n      const commentTabMap = new Map();\n      let {\n        testskip,\n        testtake,\n        subSampleSkip,\n        subSampleTake\n      } = this.state;\n      let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\n      const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\n      let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n      const ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\n      let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\n      subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\n      let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n      commentTabMap.set(\"IDS_TESTCOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_TESTCOMMENTS\",\n        isSampleTestComment: true,\n        tabSequence: SideBarSeqno.TEST,\n        selectedMaster: selectedTestList,\n        onSaveClick: this.onCommentsSaveClick,\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationTestComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        masterList: selectedTestList,\n        masterAlertStatus: \"IDS_SELECTTESTTOADDCOMMENTS\",\n        addName: \"AddTestComment\",\n        editName: \"EditTestComment\",\n        deleteName: \"DeleteTestComment\",\n        methodUrl: \"TestComment\",\n        isTestComment: false,\n        primaryKeyField: \"ntestcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.testDataStateChange,\n        masterData: this.props.Login.masterData,\n        isneedReport: false,\n        deleteParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"TestComment\",\n          ntransactiontestcode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_TESTCOMMENTS\",\n          operation: \"update\",\n          masterList: selectedTestList,\n          ncontrolCode: editTestCommentsId\n        },\n        selectedListName: \"IDS_TESTS\",\n        displayName: \"stestsynonym\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2532,\n          columnNumber: 47\n        }\n      }));\n      this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample && commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SUBSAMPLECOMMENTS\",\n        tabSequence: SideBarSeqno.SUBSAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"selectedSubSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationSampleComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        addName: \"AddSubSampleComment\",\n        editName: \"EditSubSampleComment\",\n        deleteName: \"DeleteSubSampleComment\",\n        methodUrl: \"SubSampleComment\",\n        masterData: this.props.Login.masterData,\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSubSample,\n        masterAlertStatus: \"IDS_SELECTSUBSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nsamplecommentcode\",\n        dataState: this.state.subSampleCommentDataState,\n        dataStateChange: this.subSampledataStateChange,\n        deleteParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SubSampleComment\",\n          ntransactionsamplecode,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SUBSAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_SAMPLEARNO\",\n        displayName: \"ssamplearno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2581,\n          columnNumber: 56\n        }\n      }));\n      commentTabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        tabSequence: SideBarSeqno.SAMPLE,\n        onSaveClick: this.onCommentsSaveClick,\n        selectedMaster: \"RESelectedSample\",\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        Comments: this.props.Login.masterData.RegistrationComment || [],\n        fetchRecord: this.props.getCommentsCombo,\n        masterData: this.props.Login.masterData,\n        addName: \"AddSampleComment\",\n        editName: \"EditSampleComment\",\n        deleteName: \"DeleteSampleComment\",\n        methodUrl: \"SampleComment\",\n        isTestComment: false,\n        masterList: this.props.Login.masterData.RESelectedSample,\n        masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n        primaryKeyField: \"nregcommentcode\",\n        dataState: this.state.testCommentDataState,\n        dataStateChange: this.dataStateChange,\n        deleteParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\"\n        },\n        editParam: {\n          methodUrl: \"SampleComment\",\n          npreregno,\n          userInfo: this.props.Login.userInfo,\n          masterData: this.props.Login.masterData,\n          esignRights: this.props.Login.userRoleControlRights,\n          screenName: \"IDS_SAMPLECOMMENTS\",\n          operation: \"update\",\n          masterList: this.props.Login.masterData.RESelectedSample || [],\n          ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n        },\n        selectedListName: \"IDS_ARNUMBER\",\n        displayName: \"sarno\",\n        selectedId: this.props.Login.selectedId || null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 2627,\n          columnNumber: 49\n        }\n      }));\n      return commentTabMap;\n    };\n\n    this.onInputSwitchOnChange = event => {\n      if (event.target.name == \"PopupNav\") {\n        this.setState({\n          enablePropertyPopup: !this.state.enablePropertyPopup\n        });\n      } else {\n        this.setState({\n          enableAutoClick: !this.state.enableAutoClick\n        });\n      }\n    };\n\n    this.changePropertyViewClose = id => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          activeTabIndex: undefined,\n          activeTestTab: undefined,\n          activeTabId: id\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.changePropertyView = (index, screenName, event, status) => {\n      let id = false;\n\n      if (event && event.ntransactiontestcode) {\n        id = event.ntransactiontestcode;\n      } else if (event && event.ntransactionsamplecode) {\n        id = event.ntransactionsamplecode;\n      } else if (event && event.npreregno) {\n        id = event.npreregno;\n      } //console.log(this.state.activeTabId, id , \"=======>\")\n\n\n      let activeTabIndex;\n      let activeTabId;\n\n      if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false; //activeTabId = this.state.activeTabIndex !== index ? true:false;\n      }\n\n      if (status != \"click\") {\n        if (index) {\n          const tabProps = {\n            tabSequence: SideBarSeqno.TEST,\n            screenName: screenName == \"IDS_COMMENTS\" ? \"IDS_TESTCOMMENTS\" : screenName === \"IDS_ATTACHMENTS\" ? \"IDS_TESTATTACHMENTS\" : screenName,\n            activeTabIndex //activeTabId\n\n          };\n          this.onTabChange(tabProps);\n        } // if (index == SideBarTabIndex.RESULT) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_RESULTS\",\n        //         activeTabIndex,\n        //         //activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else if (index == SideBarTabIndex.ATTACHMENTS) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_TESTATTACHMENTS\",\n        //         activeTabIndex,\n        //        // activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else if (index == SideBarTabIndex.COMMENTS) {\n        //     const tabProps = {\n        //         tabSequence: SideBarSeqno.TEST,\n        //         screenName: \"IDS_TESTCOMMENTS\",\n        //         activeTabIndex,\n        //         //activeTabId\n        //     }\n        //     this.onTabChange(tabProps);\n        // }\n        // else {\n        //     if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\n        //         const updateInfo = {\n        //             typeName: DEFAULT_RETURN,\n        //             data: {\n        //                 activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\n        //                 activeTabId: id\n        //             }\n        //         }\n        //         this.props.updateStore(updateInfo);\n        //     }\n        // }\n\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const activeTestTab = tabProps.screenName;\n      const tabseqno = tabProps.tabSequence; // if (activeTestTab !== this.props.Login.activeTestTab) {\n\n      if (tabseqno == SideBarSeqno.TEST) {\n        if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n            RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: activeTestTab,\n            screenName: activeTestTab,\n            //activeTestTab,\n            resultDataState: this.state.resultDataState,\n            instrumentDataState: this.state.instrumentDataState,\n            materialDataState: this.state.materialDataState,\n            taskDataState: this.state.taskDataState,\n            documentDataState: this.state.documentDataState,\n            resultChangeDataState: this.state.resultChangeDataState,\n            testCommentDataState: this.state.testCommentDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\n            activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\n          };\n          this.props.getTestChildTabREDetail(inputData, true);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTTEST\"\n          }));\n        }\n      } else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeTestTab,\n            activeSubSampleTab: activeTestTab,\n            subSampleCommentDataState: this.state.subSampleCommentDataState,\n            subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n          };\n          this.props.getSubSampleChildTabDetail(inputData);\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTSAMPLE\"\n          }));\n        }\n      } else {\n        if (activeTestTab !== this.props.Login.activeTestTab) {\n          let inputData = {\n            masterData: this.props.Login.masterData,\n            RESelectedSample: this.props.Login.masterData.RESelectedSample,\n            npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\n            userinfo: this.props.Login.userInfo,\n            screenName: activeTestTab,\n            activeSampleTab: activeTestTab,\n            activeTestTab,\n            sampleChangeDataState: this.state.sampleChangeDataState,\n            activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\n          };\n          this.props.getSampleChildTabDetail(inputData);\n        }\n      } //}\n\n    };\n\n    this.mandatoryFieldsForAdditionalInfo = () => {\n      let mandatoryFieldsAdditionalInfo = [];\n\n      if (this.props.Login.showMultiSelectCombo) {\n        mandatoryFieldsAdditionalInfo.push({\n          \"idsName\": this.props.Login.masterData['salertmessage'],\n          \"dataField\": \"ntestgrouptestpredefsubcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"file\"\n        });\n      } else {\n        mandatoryFieldsAdditionalInfo.push({\n          \"idsName\": this.props.Login.masterData['salertmessage'],\n          \"dataField\": \"ntestgrouptestpredefsubcode\",\n          \"mandatory\": true,\n          \"mandatoryLabel\": \"IDS_ENTER\",\n          \"controlType\": \"file\"\n        });\n      }\n\n      return mandatoryFieldsAdditionalInfo;\n    };\n\n    this.defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\n      const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n      const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'nregtypecode': nregtypecode,\n            'nregsubtypecode': nregsubtypecode,\n            'ncontrolcode': setDefaultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"default\",\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: { ...testChildGetREParam,\n            ncontrolcode: setDefaultId\n          },\n          RESelectedTest: acceptTestList,\n          RESelectedSample: RESelectedSample,\n          ndesigntemplatemappingcode: parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"defaultaction\",\n              operation: \"default\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_PLSSELECTTEST\"\n        }));\n      }\n    };\n\n    this.completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake, validation) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"completeTest\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"complete\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          testtake: this.state.testtake,\n          subSampleSkip: this.state.subSampleSkip,\n          subSampleTake: this.state.subSampleTake,\n          basedrulesengine: validation\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId, false, {\n            basedrulesengine: validation\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOCOMPLETE\"\n        }));\n      }\n    };\n\n    this.testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\n      let TestList = [...this.props.Login.masterData.RE_TEST];\n      TestList = TestList.splice(testskip, testskip + testtake);\n      let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (acceptTestList && acceptTestList.length > 0) {\n        let inputParam = {\n          classUrl: 'resultentrybysample',\n          methodUrl: \"testInitiated\",\n          inputData: {\n            'userinfo': this.props.Login.userInfo,\n            'ncontrolcode': completeResultId,\n            'subSampleNeeded': this.props.Login.masterData.defaultRegistrationSubType.nneedsubsample\n          },\n          // formData: formData,\n          // isFileupload: true,\n          operation: \"testinitiate\",\n          postParamList: this.postParamList,\n          displayName: this.props.Login.inputParam.displayName,\n          //, postParam,\n          testChildGetREParam: testChildGetREParam,\n          RESelectedTest: acceptTestList,\n          skip: this.state.skip,\n          take: this.state.take,\n          testskip: this.state.testskip,\n          progressTimerStart: true,\n          testtake: this.state.testtake\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"complete\",\n              operation: \"complete\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTTESTTOINITIATE\"\n        }));\n      }\n    };\n\n    this.onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        let inputParam = {\n          \"inputData\": {\n            userinfo: userInfo\n          }\n        };\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              selectedRecord,\n              userInfo,\n              nregtypecode,\n              nregsubtypecode,\n              ndesigntemplatemappingcode,\n              operation: \"updatechecklist\",\n              inputParam\n            },\n            openModal: true,\n            operation: \"updatechecklist\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode);\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n\n      if (this.props.Login.operation === 'testinitiate' || this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" || this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\n        this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.onEsignInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onChildDataChange = childData => {\n      if (this.props.Login.screenName === 'IDS_MATERIAL') {\n        this.setState({\n          selectedRecordMaterialForm: { ...childData\n          },\n          isMaterialInitialRender: false\n        });\n      } else {\n        this.setState({\n          selectedRecordInstrumentForm: { ...childData\n          },\n          isInstrumentInitialRender: false\n        });\n      }\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      switch (name) {\n        case 'ntestgroupmaterial':\n          const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\n          this.props.getREMaterialComboGet({\n            ntestgroupmaterial: selectedRecord.ntestgroupmaterial,\n            ntestgrouptestcode,\n            RESelectedTest: this.props.Login.masterData.RESelectedTest,\n            test: this.props.Login.masterData.RESelectedTest[0],\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.setState({\n            selectedRecord\n          });\n      }\n    };\n\n    this.onSaveFileClick = (saveType, formRef) => {\n      const selectedImportFile = this.props.Login.masterData.selectedImportFile;\n      const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\n      const formData = new FormData();\n\n      if (acceptedFile && acceptedFile.length > 0) {\n        acceptedFile.forEach((file, index) => {\n          formData.append(\"uploadedFile\" + index, file);\n        });\n        formData.append(\"filecount\", acceptedFile.length);\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTANYONEFILETOSUBMIT\"\n        }));\n      }\n\n      formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n      formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\n      formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\n      formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\n      this.props.resultImportFile(formData, this.props.Login.masterData);\n    };\n\n    this.onSaveClickAdhocParam = saveType => {\n      if (Object.keys(this.state.selectedRecord).length > 0) {\n        let Map = {};\n        let testParameter = [];\n        this.state.selectedRecord && this.state.selectedRecord.nparamtercode.forEach((data, index) => testParameter.push(data.item));\n        Map[\"ntestparametercode\"] = testParameter.map(ntestgroupparamtercode => ntestgroupparamtercode.item.ntestparametercode).join(\",\");\n        Map[\"ntestgrouptestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestgrouptestcode).join(\",\");\n        Map[\"ntestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestcode).join(\",\");\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"npreregno\"] = this.props.Login.adhocpreregno;\n        Map[\"ntransactiontestcode\"] = this.props.Login.adhoctransactiontestcode;\n        Map[\"masterData\"] = this.props.Login.masterData;\n        Map[\"multiselecttransactiontestcode\"] = this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\");\n        Map[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue.nregtypecode;\n        Map[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\n        Map[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode;\n        Map[\"nneedsubsample\"] = this.props.Login.masterData.nneedsubsample;\n        let inputParam = {\n          inputData: Map,\n          action: 'createAdhocParameter',\n          operation: \"create\",\n          methodUrl: \"AdhocParamter\",\n          classUrl: \"resultentrybysample\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.adhocId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: \"Resultentry\",\n              operation: \"adhocTestParameter\"\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.createAdhocParamter(inputParam);\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }));\n      }\n    };\n\n    this.onDropFile = acceptedFile => {\n      this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          masterData: this.props.Login.masterData\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFormulaInputChange = (event, index, fields) => {\n      let selectedRecord = this.state.selectedRecord;\n      let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\n      let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\n      let dynamicformulafields = {};\n\n      if (event) {\n        if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\n          const value = event.target.value.replace(/[^-^0-9]/g, '');\n\n          if (/^-?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        } else {\n          const value = event.target.value.replace(/[^-^0-9.]/g, '');\n\n          if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\n            if (this.state.selectedRecord.formulainput) {\n              dynamicformulafields.svalues = value;\n              dynamicformulafields.sparameter = fields.sdescription;\n              selectedForumulaInput[index] = dynamicformulafields;\n              selectedMandatory[index] = event.target.value;\n            }\n          }\n\n          selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\n          selectedRecord[\"selectedMandatory\"] = selectedMandatory;\n          this.setState({\n            selectedRecord: selectedRecord\n          });\n        }\n      }\n    };\n\n    this.onTemplateInputChange = (event, control) => {\n      let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateComboChange = (comboData, control) => {\n      let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTemplateDateChange = (dateData, control) => {\n      let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.viewAdditionalInfo = currentAlertResultCode => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let additionalInfo = selectedRecord['additionalInfo'];\n      let showAlertGrid = this.props.Login.showAlertGrid;\n      let additionalInfoView = this.props.Login.additionalInfoView;\n\n      if (additionalInfo[currentAlertResultCode]) {\n        showAlertGrid = true;\n        additionalInfoView = true;\n        selectedRecord['additionalResultData'] = additionalInfo[currentAlertResultCode];\n      } // this.setState({selectedRecord,additionalInfoView});\n\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          showAlertGrid,\n          additionalInfoView\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onModalSave = () => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n      let currentntestgrouptestpredefcode = this.state.currentntestgrouptestpredefcode || 0;\n      let bool = this.state.selectedRecord.ResultParameter.some(x => x['ntransactionresultcode'] === currentAlertResultCode);\n\n      if (bool) {\n        this.state.selectedRecord.ResultParameter.map(Parameter => {\n          if (Parameter['ntransactionresultcode'] === currentAlertResultCode) {\n            Parameter['additionalInfoUidata'] = {\n              ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode']\n            };\n\n            if (selectedRecord['ntestgrouptestpredefsubcode']) {\n              if (typeof selectedRecord['ntestgrouptestpredefsubcode'] === 'string') {\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'];\n              } else {\n                Parameter['additionalInfo'] = \"\"; // selectedRecord['ntestgrouptestpredefsubcode'].map(x=>{ \n                //     Parameter['additionalInfo']+= x.label+\",\"  \n                // }).join('\\n')\n\n                Parameter['additionalInfo'] = selectedRecord['ntestgrouptestpredefsubcode'].map(x => x.label + \",\").join('\\n');\n                Parameter['additionalInfo'] = Parameter['additionalInfo'].substring(0, Parameter['additionalInfo'].length - 1);\n              }\n            } else {\n              Parameter['additionalInfo'] = \"\";\n              Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata'];\n            }\n\n            Parameter['ntestgrouptestpredefcode'] = currentntestgrouptestpredefcode;\n          }\n        });\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          selectedRecord: selectedRecord,\n          showAlertGrid: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onskiprule = () => {\n      const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n      const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date(); // let obj = this.covertDatetoString(startDate, endDate)\n\n      let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n      const fromDate = obj.fromDate;\n      const toDate = obj.toDate;\n      const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n      let testChildGetREParam = {\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n        ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        fromdate: fromDate,\n        todate: toDate,\n        testskip: this.state.testskip,\n        testtake: this.state.testtake,\n        resultDataState: this.state.resultDataState,\n        instrumentDataState: this.state.instrumentDataState,\n        materialDataState: this.state.materialDataState,\n        taskDataState: this.state.taskDataState,\n        documentDataState: this.state.documentDataState,\n        resultChangeDataState: this.state.resultChangeDataState,\n        testCommentDataState: this.state.testCommentDataState,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n        //activeTabIndex: this.state.enableAutoClick ? this.state.activeTabIndex : this.state.activeTabIndex ? this.state.activeTabIndex : 1,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      };\n      this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 4);\n    };\n\n    this.ontaskInputChange = (Data, name) => {\n      const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\n      selectedRecordTaskForm[name] = Data.target.value;\n      this.setState({\n        selectedRecordTaskForm: { ...selectedRecordTaskForm\n        },\n        isTaskInitialRender: false\n      });\n    };\n\n    this.ontaskNumericChange = (numericData, numericName) => {\n      const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecordTaskForm[numericName] = numericData;\n        } else {\n          selectedRecordTaskForm[numericName] = numericData.target.value;\n        }\n      } else {\n        selectedRecordTaskForm[numericName] = \"\";\n      }\n\n      this.setState({\n        selectedRecordTaskForm: { ...selectedRecordTaskForm\n        },\n        isTaskInitialRender: false\n      });\n    };\n\n    this.onInputChange = (Data, name) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n\n      if (Data) {\n        if (name === 'ntestgrouptestpredefsubcode') {// if(!selectedRecord['additionalInfo']){\n          //     selectedRecord['additionalInfo']=[] \n          // } \n          // if(selectedRecord['additionalInfo']){\n          //     selectedRecord['additionalInfo'][currentAlertResultCode]= Data.target.value\n          // } \n          // let bool=this.state.selectedRecord.ResultParameter.some(x=>x['ntransactionresultcode']===currentAlertResultCode) \n          // if(bool){\n          //   this.state.selectedRecord.ResultParameter.map(Parameter=>\n          //       {\n          //           if(Parameter['ntransactionresultcode']===currentAlertResultCode){\n          //               Parameter[\"jsondata\"]={};\n          //               Parameter['additionalInfo']=selectedRecord['additionalInfo'][currentAlertResultCode]\n          //             //   Parameter[\"jsondata\"] = { \n          //             //       ...Parameter[\"jsondata\"],\n          //             //       additionalInfo:selectedRecord['additionalInfo'][currentAlertResultCode]\n          //             //   }\n          //           }\n          //       }\n          //       );  \n          // }\n          //  selectedRecord[name] = Data.target.value;\n        } //else{\n\n\n        selectedRecord[name] = Data.target.value; //  } \n      } else {\n        selectedRecord[name] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericChange = (numericData, numericName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n\n      if (numericData) {\n        if (numericName !== \"scomments\") {\n          selectedRecord[numericName] = numericData;\n        } else {\n          selectedRecord[numericName] = numericData.target.value;\n        }\n      } else {\n        selectedRecord[numericName] = \"\";\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDateChange = (dateName, dateValue) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      selectedRecord[dateName] = dateValue;\n\n      if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.headerSelectionChange = event => {\n      const checked = event.syntheticEvent.target.checked;\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n\n      if (checked) {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\n          return item;\n        });\n        let selectedTestParam = \"\";\n        let selectedTestParamMean = 0;\n        let size = 0;\n\n        if (selectedMeanTestParam.size > 0) {\n          [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n          selectedTestParamMean = selectedTestParamMean / size;\n        }\n\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam,\n          selectedTestParam,\n          testMean: selectedTestParamMean,\n          selectAll: checked\n        });\n      } else {\n        const data = meanTestParameterList.map(item => {\n          item.selected = checked;\n          return item;\n        });\n        this.setState({\n          meanTestParameterList: data,\n          selectedMeanTestParam: new Map(),\n          selectedTestParam: \"\",\n          testMean: \"\",\n          selectAll: checked\n        });\n      }\n    };\n\n    this.selectionChange = event => {\n      let meanTestParameterList = this.state.meanTestParameterList || [];\n      let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\n      meanTestParameterList.map(item => {\n        if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\n          item.selected = !event.dataItem.selected;\n        }\n\n        return item;\n      });\n\n      if (event.dataItem.selected) {\n        selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\n      } else {\n        if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\n          selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode);\n        }\n      }\n\n      let selectedTestParam = \"\";\n      let selectedTestParamMean = 0;\n      let size = 0;\n\n      if (selectedMeanTestParam.size > 0) {\n        [...selectedMeanTestParam.values()].forEach(item => item !== null && item !== \"\" ? (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item, size = size + 1, selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\");\n        selectedTestParamMean = selectedTestParamMean / size;\n      }\n\n      this.setState({\n        meanTestParameterList,\n        selectedMeanTestParam,\n        selectedTestParam,\n        testMean: selectedTestParamMean,\n        selectAll: this.valiateCheckAll(meanTestParameterList)\n      });\n    };\n\n    this.onMeanComboChange = (comboData, comboName) => {\n      const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\n      selectedMeanTestParam[comboName] = comboData[0];\n      let data = \"\";\n\n      if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\n        data = comboData[0].value;\n      } else {\n        data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\n      }\n\n      selectedMeanTestParam[\"parametervalue\"] = data;\n      this.setState({\n        selectedMeanTestParam\n      });\n    };\n\n    this.onMaterialComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData; //this.setState({ selectedRecord });\n      } else {\n        selectedRecord[comboName] = []; //this.setState({ selectedRecord });\n      }\n\n      switch (comboName) {\n        case 'nmaterialtypecode':\n          this.props.getREMaterialCategoryByType({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcatcode':\n          selectedRecord['nsectioncode'] = selectedRecord.nmaterialcatcode.item.needSectionwise == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].nsectioncode : -1;\n          this.props.getREMaterialByCategory({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        case 'nmaterialcode':\n          this.props.getREMaterialInvertoryByMaterial({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n\n        default:\n          this.props.getAvailableMaterialQuantity({\n            ntestgrouptestcode,\n            selectedRecord,\n            userInfo: this.props.Login.userInfo\n          });\n          break;\n      }\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      const selectedRecord = this.state.selectedRecord || [];\n      let currentAlertResultCode = this.state.currentAlertResultCode || 0;\n\n      if (comboData) {\n        // if(comboName==='ntestgrouptestpredefsubcode'){\n        //     if(!selectedRecord['additionalInfo']){\n        //         selectedRecord['additionalInfo']=[] \n        //     }  \n        //         selectedRecord['additionalInfo'][currentAlertResultCode]=\"\"\n        //         comboData.map(x=>{ \n        //             selectedRecord['additionalInfo'][currentAlertResultCode]+= x.label+\",\"//+<br/> \n        //         })\n        //         selectedRecord['additionalInfo'][currentAlertResultCode]=selectedRecord['additionalInfo'][currentAlertResultCode].substring(0,\n        //             selectedRecord['additionalInfo'][currentAlertResultCode].length-1) \n        // } \n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      this.setState({\n        selectedRecord\n      }); // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord: selectedRecord }\n      // }\n      // this.props.updateStore(updateInfo);\n    };\n\n    this.onChange = (comboData, fieldName, caseNo) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      const selectedsubcode = [];\n\n      if (comboData !== null) {\n        switch (caseNo) {\n          case 1:\n            selectedRecord[fieldName] = comboData;\n            delete selectedRecord[\"ResultParameter\"];\n            this.setState({\n              selectedsubcode\n            });\n            this.props.resultEntryGetComponent(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo, this.props.Login.ncontrolcode, this.state.testskip, this.state.testtake);\n            break;\n\n          case 2:\n            selectedRecord[fieldName] = comboData;\n            delete selectedRecord[\"ResultParameter\"];\n            this.setState({\n              selectedsubcode\n            });\n            this.props.resultEntryGetParameter(selectedRecord, this.props.Login.masterData, this.props.Login.userInfo, this.props.Login.ncontrolcode, this.state.testskip, this.state.testtake);\n            break;\n\n          default:\n            break;\n        }\n      } // else {\n      //   if (selectedRecord[\"nsectioncode\"]) {\n      //     delete selectedRecord[\"nsectioncode\"];\n      //     delete selectedRecord[\"nusercode\"];\n      //   }\n      //   const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { selectedRecord,selectedsubcode:undefined }\n      //   }\n      //   this.props.updateStore(updateInfo);\n      // }\n\n    };\n\n    this.onGradeEvent = (ResultParameter, index, parameter) => {\n      if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\n        let selectedRecord = this.state.selectedRecord || [];\n        let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\n\n        if (parameter.nparametertypecode === parameterType.NUMERIC) {\n          selectedResultGrade[index] = {\n            ngradecode: ResultParameter[index].sresult !== \"\" ? numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\n          };\n        }\n\n        if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n          if (ResultParameter[index].sresult !== null) {\n            selectedResultGrade[index] = {\n              ngradecode: ResultParameter[index].ngradecode\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: 0\n            };\n          }\n        }\n\n        if (parameter.nparametertypecode === parameterType.CHARACTER) {\n          if (ResultParameter[index].sresult !== null && ResultParameter[index].sresult.trim() !== \"\") {\n            //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\n            selectedResultGrade[index] = {\n              ngradecode: 4\n            };\n          } else {\n            selectedResultGrade[index] = {\n              ngradecode: -1\n            };\n          }\n        } //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\n\n\n        selectedRecord.selectedResultGrade = selectedResultGrade;\n        this.setState({\n          selectedRecord\n        }); // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: { masterData: this.props.Login.masterData }\n        // }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n\n      if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestComments(saveParam, selectedTestList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\"); // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\n\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleComments(saveParam, acceptList);\n      }\n\n      if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\n        let sampleList = [];\n\n        if (this.props.Login.masterData.searchedSubSample !== undefined) {\n          sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\n        } else {\n          sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\n        }\n\n        let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          isTestComment: this.props.isTestComment,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleComments(saveParam, acceptList);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\n      }\n    };\n\n    this.onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\n      const masterData = this.props.Login.masterData;\n      let inputData = {};\n      let inputParam = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let {\n        testskip,\n        testtake,\n        skip,\n        take\n      } = this.state;\n      let testList = [...this.props.Login.masterData.RE_TEST];\n      testList = testList.slice(testskip, testskip + testtake);\n      let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\n      let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\n      sampleList = sampleList.slice(skip, skip + take);\n      let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\n\n      if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\n      } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveTestAttachment(saveParam, selectedTestList);\n      } else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\n        let saveParam = {\n          userInfo: this.props.Login.userInfo,\n          selectedRecord,\n          masterData: this.props.Login.masterData,\n          saveType,\n          formRef,\n          operation: this.props.Login.operation,\n          selectedMaster: this.props.selectedMaster,\n          ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\n        };\n        inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\n      }\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            operation: this.props.Login.operation,\n            screenName: this.props.Login.screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\n      }\n    };\n\n    this.onKeyPress = (event, index, paremterResultcode) => {\n      if (event.keyCode === 13) {\n        for (let i = 0; i < event.target.form.elements.length; i++) {\n          if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\n            event.target.form.elements[i].focus();\n            break;\n          }\n        }\n\n        event.preventDefault();\n      }\n    };\n\n    this.onResultInputChange = parameterResults => {\n      this.setState({\n        parameterResults: [...parameterResults],\n        isParameterInitialRender: false // currentAlertResultCode,\n        //  currentntestgrouptestpredefcode\n\n      });\n    };\n\n    this.onSampleAdd = selectedsubcode => {\n      this.setState({\n        selectedsubcode: [...selectedsubcode],\n        isaddSampleRender: false // currentAlertResultCode,\n        //  currentntestgrouptestpredefcode\n\n      });\n    };\n\n    this.onSaveMean = saveType => {\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      let resultParameter = this.props.Login.selectedTestParameterMean || {}; //let resultParameter = { };\n\n      resultParameter[\"ncalculatedresult\"] = 4;\n      resultParameter[\"sresult\"] = this.state.testMean;\n      resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\n      resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\n      resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n      resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode; // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\n      // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\n      // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\n      //console.log(\"result:\", resultParameter);\n\n      const formData = new FormData();\n      formData.append(\"filecount\", 0);\n      formData.append(\"nregtypecode\", nregtypecode);\n      formData.append(\"nregsubtypecode\", nregsubtypecode);\n      formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n      formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode); //formData.append(\"resultData\", JSON.stringify([resultParameter]));\n\n      formData.append(\"resultData\", resultParameter);\n      const inputParam = {\n        classUrl: \"resultentrybysample\",\n        methodUrl: \"TestParameterResult\",\n        inputData: {\n          userinfo: this.props.Login.userInfo\n        },\n        formData: formData,\n        isFileupload: true,\n        operation: \"update\",\n        displayName: this.props.Login.inputParam.displayName,\n        saveType\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.editpredefinedcomments = dataItem => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName: \"IDS_RESULTPARAMETERCOMMENTS\",\n          openModal: true,\n          selectedRecord: {\n            'sresultcomment': dataItem['sresultcomment'],\n            'selectedPredefinedComments': dataItem\n          },\n          operation: \"update\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.enforceResult = dataItem => {\n      let inputParam = {};\n      inputParam = {\n        dataItem: dataItem,\n        masterData: this.props.Login.masterData,\n        screenName: \"IDS_ENFORCERESULT\",\n        openModal: true,\n        operation: \"update\",\n        ncontrolcode: dataItem['ncontrolcode']\n      };\n      this.props.enforceResult(inputParam, this.props.Login.userInfo);\n    };\n\n    this.onSavePredefinedComments = saveType => {\n      let inputParam = {};\n      let stransactiontestcode = \"\";\n      this.props.Login.masterData.RESelectedTest.map(x => {\n        stransactiontestcode += x['ntransactiontestcode'] + \",\";\n      });\n      let inputData = {\n        'selectedPredefinedComments': this.state.selectedRecord['selectedPredefinedComments'],\n        'ntransactionresultcode': this.state.selectedRecord['selectedPredefinedComments']['ntransactionresultcode'],\n        'sresultcomment': this.state.selectedRecord['sresultcomment'],\n        'ntransactiontestcode': stransactiontestcode.substring(0, stransactiontestcode.length - 1),\n        //this.state.selectedRecord['selectedPredefinedComments']['ntransactiontestcode'],\n        'userinfo': this.props.Login.userInfo\n      };\n      inputParam = {\n        classUrl: 'resultentrybysample',\n        methodUrl: \"PredefinedComments\",\n        inputData: inputData,\n        //    isFileupload: false,\n        //  activeTestKey: \"IDS_INSTRUMENT\",\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType //postParam\n\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveEnforceResult = saveType => {\n      let inputParam = {};\n      let stransactiontestcode = \"\";\n      const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n      const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n      const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode); // this.props.Login.masterData.RESelectedTest.map(x=>{ \n      //     stransactiontestcode+=x['ntransactiontestcode']+\",\"\n      // }\n      //   )\n\n      let inputData = {\n        'ResultParameter': {\n          //  ngradecode:this.state.selectedRecord['ngradecode'].value,\n          nparametertypecode: parameterType.CHARACTER,\n          sfinal: this.state.selectedRecord['senforceresult'],\n          senforceresultcomment: this.state.selectedRecord['senforceresultcomment'],\n          ntransactiontestcode: this.state.selectedRecord['ntransactiontestcode'],\n          ntransactionresultcode: this.state.selectedRecord['ntransactionresultcode']\n        },\n        'ntransactionresultcode': this.state.selectedRecord['ntransactionresultcode'],\n        \"nregtypecode\": nregtypecode,\n        \"nregsubtypecode\": nregsubtypecode,\n        \"ndesigntemplatemappingcode\": ndesigntemplatemappingcode,\n        'userinfo': this.props.Login.userInfo\n      };\n      inputParam = {\n        classUrl: 'resultentrybysample',\n        methodUrl: \"EnforceResult\",\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        saveType //postParam\n\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.onSaveClick = (saveType, data) => {\n      if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\n        this.onSaveMean(saveType);\n      } else if (this.props.Login.screenName === \"IDS_RESULTPARAMETERCOMMENTS\") {\n        this.onSavePredefinedComments(saveType);\n      } else if (this.props.Login.screenName === \"IDS_ENFORCERESULT\") {\n        this.onSaveEnforceResult(saveType);\n      } else {\n        let ResultParameter = this.state.parameterResults; //this.props.Login.parameterResults\n        //let ResultParameter = this.state.selectedRecord.ResultParameter || [];\n        //    let ResultParameter = this.props.Login.parameterResults || [];\n        // let ResultParameter = saveType.parameterResults || [];\n\n        let selectedRecord = this.state.selectedRecord || {};\n        let selectedRecordMaterialForm = this.state.selectedRecordMaterialForm || {};\n        let selectedRecordInstrumentForm = this.state.selectedRecordInstrumentForm || {};\n        let selectedRecordTaskForm = this.state.selectedRecordTaskForm || {};\n        let selectedId = this.props.Login.selectedId || null;\n        let additionalInfo = this.state.selectedRecord.additionalInfo || [];\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n        const classUrl = \"resultentrybysample\";\n        const formData = new FormData();\n        let neditable = 0;\n        let resultParameters = [];\n        let inputParam = {};\n        let inputData = [];\n        let i = 0; //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\n\n        if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\n          if (ResultParameter.length > 0 && ResultParameter !== undefined) {\n            ResultParameter.map((resultData, index) => {\n              let results = {};\n\n              if (resultData.editable === true) {\n                neditable = 1;\n\n                switch (resultData.nparametertypecode) {\n                  case 1:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: resultData[\"ncalculatedresult\"],\n                      sresult: resultData.sresult,\n                      sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"sfinal\"] = resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n                    results[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 2:\n                    resultData['additionalInfoUidata'] !== undefined && resultData['additionalInfoUidata'] !== null && resultData['additionalInfoUidata'].hasOwnProperty('ntestgrouptestpredefsubcode') && resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'].length > 0 && resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'].map(item => {\n                      item['label'] = Lims_JSON_stringify(item['label'], false);\n                      item['item']['ssubcodedresult'] = Lims_JSON_stringify(item['item']['ssubcodedresult'], false);\n                    });\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: Lims_JSON_stringify(replaceBackSlash(resultData.sresult)),\n                      sfinal: Lims_JSON_stringify(replaceBackSlash(resultData.sfinal)),\n                      sresultcomment: resultData.sresultcomment === 'null' ? \"-\" : Lims_JSON_stringify(resultData.sresultcomment),\n                      salertmessage: Lims_JSON_stringify(resultData.salertmessage, false),\n                      additionalInfo: resultData['additionalInfo'] !== null ? Lims_JSON_stringify(resultData['additionalInfo'], false) : resultData['additionalInfo'],\n                      additionalInfoUidata: resultData['additionalInfoUidata'] === undefined ? \"\" : resultData['additionalInfoUidata'],\n                      ntestgrouptestpredefcode: resultData.ntestgrouptestpredefcode\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.ngradecode;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 3:\n                    results[\"jsondata\"] = {\n                      ncalculatedresult: 4,\n                      sresult: Lims_JSON_stringify(replaceBackSlash(resultData.sresult)),\n                      sfinal: Lims_JSON_stringify(replaceBackSlash(resultData.sresult))\n                    };\n                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                    results[\"sresult\"] = resultData.sresult;\n                    results[\"ncalculatedresult\"] = 4;\n                    results[\"sfinal\"] = resultData.sresult;\n                    results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\n                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\n                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n                    results['nparametertypecode'] = resultData.nparametertypecode;\n                    break;\n\n                  case 4:\n                    if (resultData.sfinal.length > 0) {\n                      const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                      const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = create_UUID() + '.' + fileExtension;\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\n                        ncalculatedresult: 4,\n                        sresult: Lims_JSON_stringify(resultData.sresult, false),\n                        sfinal: Lims_JSON_stringify(resultData.sresult, false)\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = uniquefilename;\n                      results[\"nfilesize\"] = resultData.sfinal[0] && resultData.sfinal[0].size;\n                      formData.append(\"uploadedFile\" + index, resultData.sfinal[0] && resultData.sfinal[0]);\n                      formData.append(\"uniquefilename\" + index, uniquefilename);\n                      formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\n                      i++;\n                    } else {\n                      const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                      const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                      const uniquefilename = \"\";\n                      results[\"jsondata\"] = {\n                        ssystemfilename: uniquefilename,\n                        nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\n                        ncalculatedresult: 4,\n                        sresult: \"\",\n                        sfinal: \"\"\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sresult\"] = \"\";\n                      results[\"sfinal\"] = \"\";\n                      results[\"ngradecode\"] = -1;\n                      results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                      results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\n                      results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                      results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results[\"ssystemfilename\"] = \"\";\n                      results[\"nfilesize\"] = \"\";\n                      formData.append(\"uploadedFile\" + index, \"\");\n                      formData.append(\"uniquefilename\" + index, \"\");\n                      formData.append(\"ntransactiontestcode\", \"\");\n                    }\n\n                    break;\n\n                  default:\n                    break;\n                }\n\n                if (Object.values(results).length > 0) {\n                  resultParameters.push(results);\n                }\n              }\n\n              return null;\n            });\n\n            if (neditable === 0) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loading: false,\n                  openModal: false,\n                  parameterResults: [],\n                  selectedRecord: {}\n                }\n              };\n              return this.props.updateStore(updateInfo);\n            }\n\n            formData.append(\"filecount\", i);\n            formData.append(\"nregtypecode\", nregtypecode);\n            formData.append(\"nregsubtypecode\", nregsubtypecode);\n            formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n            formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\n            formData.append(\"resultData\", JSON.stringify(resultParameters));\n            const tests = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\";\n            formData.append(\"transactiontestcode\", tests); //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"TestParameterResult\",\n              inputData: {\n                userinfo: this.props.Login.userInfo\n              },\n              formData: formData,\n              isFileupload: true,\n              operation: \"update\",\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //, postParam\n\n            };\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loading: false,\n                openModal: false\n              }\n            };\n            return this.props.updateStore(updateInfo);\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_RESULTENTRYPARAMETER\") {\n          if (this.state.selectedsubcode && this.state.selectedsubcode.length > 0 && this.state.selectedsubcode !== undefined) {\n            if (ResultParameter.length > 0 && ResultParameter !== undefined) {\n              ResultParameter.map((resultData, index) => {\n                let results = {};\n\n                if (resultData.editable === true) {\n                  neditable = 1;\n\n                  switch (resultData.nparametertypecode) {\n                    case 1:\n                      results[\"jsondata\"] = {\n                        ncalculatedresult: resultData[\"ncalculatedresult\"],\n                        sresult: resultData.sresult,\n                        sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"sfinal\"] = resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\n                      results[\"ngradecode\"] = resultData.sresult !== \"\" ? numericGrade(resultData, results[\"sfinal\"]) : -1;\n                      results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                      results['nenteredby'] = this.props.Login.userInfo.nusercode; //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                      //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                      break;\n\n                    case 2:\n                      results[\"jsondata\"] = {\n                        ncalculatedresult: 4,\n                        sresult: Lims_JSON_stringify(resultData.sresult, false),\n                        sfinal: Lims_JSON_stringify(resultData.sfinal, false),\n                        sresultcomment: resultData.sresultcomment === 'null' ? \"-\" : resultData.sresultcomment,\n                        salertmessage: resultData.salertmessage,\n                        additionalInfo: resultData['additionalInfo'],\n                        additionalInfoUidata: resultData['additionalInfoUidata'] === undefined ? \"\" : resultData['additionalInfoUidata'],\n                        ntestgrouptestpredefcode: resultData.ntestgrouptestpredefcode\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = resultData.ngradecode;\n                      results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                      results['nenteredby'] = this.props.Login.userInfo.nusercode; //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                      //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                      break;\n\n                    case 3:\n                      results[\"jsondata\"] = {\n                        ncalculatedresult: 4,\n                        sresult: Lims_JSON_stringify(resultData.sresult, false),\n                        sfinal: Lims_JSON_stringify(resultData.sresult, false)\n                      };\n                      results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                      results[\"sresult\"] = resultData.sresult;\n                      results[\"ncalculatedresult\"] = 4;\n                      results[\"sfinal\"] = resultData.sresult;\n                      results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\n                      results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\n                      results['nenteredby'] = this.props.Login.userInfo.nusercode; //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\n                      //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\n\n                      results['nparametertypecode'] = resultData.nparametertypecode;\n                      results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                      break;\n\n                    case 4:\n                      if (resultData.sfinal.length > 0) {\n                        const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                        const uniquefilename = create_UUID() + '.' + fileExtension;\n                        results[\"jsondata\"] = {\n                          ssystemfilename: uniquefilename,\n                          nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\n                          ncalculatedresult: 4,\n                          sresult: Lims_JSON_stringify(resultData.sresult, false),\n                          sfinal: Lims_JSON_stringify(resultData.sresult, false)\n                        };\n                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                        results[\"ncalculatedresult\"] = 4;\n                        results[\"sresult\"] = resultData.sresult;\n                        results[\"sfinal\"] = resultData.sresult;\n                        results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\n                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode; //results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                        //results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n\n                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                        results['nparametertypecode'] = resultData.nparametertypecode;\n                        results[\"ssystemfilename\"] = uniquefilename;\n                        results[\"nfilesize\"] = resultData.sfinal[0] && resultData.sfinal[0].size;\n                        formData.append(\"uploadedFile\" + index, resultData.sfinal[0] && resultData.sfinal[0]);\n                        formData.append(\"uniquefilename\" + index, uniquefilename); //formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\n\n                        i++;\n                      } else {\n                        const splittedFileName = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\n                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\n                        const uniquefilename = \"\";\n                        results[\"jsondata\"] = {\n                          ssystemfilename: uniquefilename,\n                          nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\n                          ncalculatedresult: 4,\n                          sresult: \"\",\n                          sfinal: \"\"\n                        };\n                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\n                        results[\"ncalculatedresult\"] = 4;\n                        results[\"sresult\"] = \"\";\n                        results[\"sfinal\"] = \"\";\n                        results[\"ngradecode\"] = -1;\n                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\n                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode; //results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\n                        //results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\n\n                        results['nparametertypecode'] = resultData.nparametertypecode;\n                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\n                        results[\"ssystemfilename\"] = \"\";\n                        results[\"nfilesize\"] = \"\";\n                        formData.append(\"uploadedFile\" + index, \"\");\n                        formData.append(\"uniquefilename\" + index, \"\"); //formData.append(\"ntransactiontestcode\", \"\");\n                      }\n\n                      break;\n\n                    default:\n                      break;\n                  }\n\n                  if (Object.values(results).length > 0) {\n                    resultParameters.push(results);\n                  }\n                }\n\n                return null;\n              });\n\n              if (neditable === 0) {\n                const updateInfo = {\n                  typeName: DEFAULT_RETURN,\n                  data: {\n                    loading: false,\n                    openModal: false,\n                    parameterResults: [],\n                    selectedRecord: {}\n                  }\n                };\n                return this.props.updateStore(updateInfo);\n              }\n\n              formData.append(\"filecount\", i);\n              formData.append(\"nregtypecode\", nregtypecode);\n              formData.append(\"nregsubtypecode\", nregsubtypecode);\n              formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\n              formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\n              formData.append(\"resultData\", JSON.stringify(resultParameters));\n              const tests = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\";\n              const sampleid = this.state.selectedsubcode ? this.state.selectedsubcode.map(test => test.ssampleid).join(\"','\") : \"\";\n              formData.append(\"transactiontestcode\", tests);\n              formData.append(\"sampleid\", sampleid);\n              formData.append(\"ntestcode\", this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode);\n              formData.append(\"nallottedspeccode\", this.state.selectedRecord.nallottedspeccode.value);\n              formData.append(\"nspecsampletypecode\", this.state.selectedRecord.ncomponentcode.value); //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\n\n              inputParam = {\n                classUrl: classUrl,\n                methodUrl: \"MultiSampleTestParameterResult\",\n                inputData: {\n                  userinfo: this.props.Login.userInfo\n                },\n                formData: formData,\n                isFileupload: true,\n                operation: \"update\",\n                displayName: this.props.Login.inputParam.displayName,\n                saveType //, postParam\n\n              };\n            } else {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loading: false,\n                  openModal: false\n                }\n              };\n              return this.props.updateStore(updateInfo);\n            }\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loading: false\n              }\n            };\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDSAMPLE\"\n            }));\n            return this.props.updateStore(updateInfo);\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\n          inputData = {\n            ntype: 3,\n            nflag: 3,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n            nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n            ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\n            ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\n            nmethodcode: selectedRecord.nmethodcode.value,\n            nsourcecode: selectedRecord.nsourcecode.value,\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            activeTestKey: \"IDS_RESULTS\",\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"TestMethodSource\",\n          //     inputData: inputData,\n          //     isFileupload: false,\n          //     operation: \"update\",\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\n          let inputData = [];\n\n          if (this.props.Login.operation === \"update\") {\n            inputData = {\n              ResultUsedInstrument: {\n                nresultusedinstrumentcode: selectedRecordInstrumentForm.nresultusedinstrumentcode,\n                npreregno: selectedRecordInstrumentForm.npreregno,\n                ninstrumentcatcode: selectedRecordInstrumentForm.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecordInstrumentForm.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecordInstrumentForm.dfromdate, false),\n                dtodate: formatInputDate(selectedRecordInstrumentForm.dtodate, false),\n                stzfromdate: selectedRecordInstrumentForm.ntzfromdate.label,\n                stztodate: selectedRecordInstrumentForm.ntztodate.label,\n                ntzfromdate: selectedRecordInstrumentForm.ntzfromdate.value,\n                ntztodate: selectedRecordInstrumentForm.ntztodate.value,\n                ntransactiontestcode: selectedRecordInstrumentForm.ntransactiontestcode\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n              ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n            };\n          } else {\n            inputData = {\n              ResultUsedInstrument: {\n                ntransactiontestcode: selectedRecordInstrumentForm.ntransactiontestcode,\n                npreregno: selectedRecordInstrumentForm.npreregno,\n                ninstrumentcatcode: selectedRecordInstrumentForm.ninstrumentcatcode.value,\n                ninstrumentcode: selectedRecordInstrumentForm.ninstrumentcode.value,\n                dfromdate: formatInputDate(selectedRecordInstrumentForm.dfromdate, false),\n                dtodate: formatInputDate(selectedRecordInstrumentForm.dtodate, false),\n                stzfromdate: selectedRecordInstrumentForm.ntzfromdate.label,\n                stztodate: selectedRecordInstrumentForm.ntztodate.label,\n                ntzfromdate: selectedRecordInstrumentForm.ntzfromdate.value,\n                ntztodate: selectedRecordInstrumentForm.ntztodate.value\n              },\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode,\n              ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n              transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n            };\n          }\n\n          inputParam = {\n            classUrl: classUrl,\n            methodUrl: \"ResultUsedInstrument\",\n            inputData: inputData,\n            selectedId,\n            isFileupload: false,\n            activeTestKey: \"IDS_INSTRUMENT\",\n            operation: this.props.Login.operation,\n            displayName: this.props.Login.inputParam.displayName,\n            saveType //postParam\n\n          };\n        }\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          let inputData = [];\n\n          if (this.state.selectedRecordMaterialForm.nmaterialcode != \"\") {\n            if (this.state.selectedRecordMaterialForm.nmaterialinventorycode != \"\") {\n              if (parseFloat(this.state.selectedRecordMaterialForm.susedquantity) <= parseFloat(this.state.selectedRecordMaterialForm.savailablequantity)) {\n                if (this.props.Login.operation === \"update\") {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      nresultusedmaterialcode: selectedRecordMaterialForm.nresultusedmaterialcode,\n                      ntransactiontestcode: selectedRecordMaterialForm.ntransactiontestcode,\n                      npreregno: selectedRecordMaterialForm.npreregno,\n                      nmaterialtypecode: selectedRecordMaterialForm.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecordMaterialForm.nmaterialcategorycode.value,\n                      nmaterialcode: selectedRecordMaterialForm.nmaterialcode.value,\n                      ninventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecordMaterialForm.sarno,\n                        ssamplearno: selectedRecordMaterialForm.ssamplearno,\n                        stestsynonym: selectedRecordMaterialForm.stestsynonym,\n                        smaterialcatname: selectedRecordMaterialForm.nmaterialcatcode.label,\n                        smaterialname: selectedRecordMaterialForm.nmaterialcode.label,\n                        sinventoryid: selectedRecordMaterialForm.nmaterialinventorycode.label,\n                        nqtyused: selectedRecordMaterialForm.susedquantity,\n                        scarriergas: selectedRecordMaterialForm.scarriergas,\n                        smobilephase: selectedRecordMaterialForm.smobilephase,\n                        sremarks: selectedRecordMaterialForm.sremarks,\n                        susername: this.props.Login.userInfo.susername,\n                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                        ssectionname: selectedRecordMaterialForm.ssectionname,\n                        ntestgroupmaterial: selectedRecordMaterialForm.ntestgroupmaterial,\n                        ntestgrouptestcode: selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                      jsondata: {\n                        IDS_INVENTORYID: selectedRecordMaterialForm.nmaterialinventorycode.label,\n                        nqtyused: selectedRecordMaterialForm.susedquantity\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n                    nresultusedmaterialcode: selectedRecordMaterialForm.nresultusedmaterialcode,\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\"\n                  };\n                } else {\n                  inputData = {\n                    ResultUsedMaterial: {\n                      ntransactiontestcode: selectedRecordMaterialForm.ntransactiontestcode,\n                      npreregno: selectedRecordMaterialForm.npreregno,\n                      nmaterialtypecode: selectedRecordMaterialForm.nmaterialtypecode.value,\n                      nmaterialcategorycode: selectedRecordMaterialForm.nmaterialcatcode.value,\n                      nmaterialcode: selectedRecordMaterialForm.nmaterialcode.value,\n                      ninventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                      jsondata: {\n                        sarno: selectedRecordMaterialForm.sarno,\n                        ssamplearno: selectedRecordMaterialForm.ssamplearno,\n                        stestsynonym: selectedRecordMaterialForm.stestsynonym,\n                        smaterialcatname: selectedRecordMaterialForm.nmaterialcatcode.label,\n                        smaterialname: selectedRecordMaterialForm.nmaterialcode.label,\n                        sinventoryid: selectedRecordMaterialForm.nmaterialinventorycode.label,\n                        nqtyused: selectedRecordMaterialForm.susedquantity,\n                        scarriergas: selectedRecordMaterialForm.scarriergas,\n                        smobilephase: selectedRecordMaterialForm.smobilephase,\n                        sremarks: selectedRecordMaterialForm.sremarks,\n                        smaterialtypename: selectedRecordMaterialForm.nmaterialtypecode.label,\n                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                        ntestgroupmaterial: selectedRecordMaterialForm.ntestgroupmaterial,\n                        ssectionname: selectedRecordMaterialForm.ssectionname,\n                        ntestgrouptestcode: selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\n                      }\n                    },\n                    MaterialInventoryTrans: {\n                      nmaterialinventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\n                      nsectioncode: selectedRecordMaterialForm.nsectioncode,\n                      jsondata: {\n                        nqtyused: selectedRecordMaterialForm.susedquantity,\n                        IDS_INVENTORYID: selectedRecordMaterialForm.nmaterialinventorycode.label\n                      }\n                    },\n                    userinfo: this.props.Login.userInfo,\n                    nregtypecode: nregtypecode,\n                    nregsubtypecode: nregsubtypecode,\n                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\n                    transactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\"\n                  };\n                }\n\n                inputParam = {\n                  classUrl: classUrl,\n                  methodUrl: \"ResultUsedMaterial\",\n                  inputData: inputData,\n                  selectedId,\n                  isFileupload: false,\n                  activeTestKey: \"IDS_MATERIAL\",\n                  operation: this.props.Login.operation,\n                  displayName: this.props.Login.inputParam.displayName,\n                  saveType //postParam\n\n                };\n              } else {\n                toast.warn(this.props.intl.formatMessage({\n                  id: \"Quantity Not available\"\n                }));\n                return null;\n              }\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"Select Material Inventory\"\n              }));\n              return null;\n            }\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"Select Material\"\n            }));\n            return null;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_TASK\") {\n          // if ((selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\")\n          //     || (selectedRecord.smisctime && selectedRecord.smisctime !== \"\")\n          //     || (selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\")\n          //     || (selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\")\n          //     || (selectedRecord.scomments && selectedRecord.scomments !== \"\")) {\n          //     if (this.props.Login.operation === \"update\") {\n          if (selectedRecordTaskForm.sanalysistime && selectedRecordTaskForm.sanalysistime !== \"\" || selectedRecordTaskForm.smisctime && selectedRecordTaskForm.smisctime !== \"\" || selectedRecordTaskForm.spreanalysistime && selectedRecordTaskForm.spreanalysistime !== \"\" || selectedRecordTaskForm.spreparationtime && selectedRecordTaskForm.spreparationtime !== \"\" || selectedRecordTaskForm.scomments && selectedRecordTaskForm.scomments !== \"\") {\n            if (this.props.Login.operation === \"update\") {\n              inputData = {\n                ResultUsedTasks: {\n                  nresultusedtaskcode: selectedRecordTaskForm.nresultusedtaskcode,\n                  jsondata: {\n                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\n                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\n                    stestsynonym: selectedRecordTaskForm.stestsynonym,\n                    sanalysistime: selectedRecordTaskForm.sanalysistime ? selectedRecordTaskForm.sanalysistime : \"\",\n                    sanalyst: this.props.Login.userInfo.susername,\n                    smisctime: selectedRecordTaskForm.smisctime ? selectedRecordTaskForm.smisctime : \"\",\n                    spreanalysistime: selectedRecordTaskForm.spreanalysistime ? selectedRecordTaskForm.spreanalysistime : \"\",\n                    spreparationtime: selectedRecordTaskForm.spreparationtime ? selectedRecordTaskForm.spreparationtime : \"\",\n                    staskprocedure: selectedRecordTaskForm.staskprocedure ? selectedRecordTaskForm.staskprocedure : \"\",\n                    scomments: selectedRecordTaskForm.scomments ? selectedRecordTaskForm.scomments : \"\"\n                  }\n                },\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode\n              };\n            } else {\n              let taskArry = [];\n              this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(test => taskArry.push({\n                //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                ntransactiontestcode: parseInt(test.ntransactiontestcode),\n                npreregno: parseInt(test.npreregno),\n                // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\n                // sanalyst: this.props.Login.userInfo.susername,\n                // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\n                // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\n                // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\n                // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\n                // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\n                jsondata: {\n                  //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\n                  sarno: test.sarno,\n                  ssamplearno: test.ssamplearno,\n                  stestsynonym: test.stestsynonym,\n                  sanalysistime: selectedRecordTaskForm.sanalysistime ? selectedRecordTaskForm.sanalysistime : \"\",\n                  sanalyst: this.props.Login.userInfo.susername,\n                  smisctime: selectedRecordTaskForm.smisctime ? selectedRecordTaskForm.smisctime : \"\",\n                  spreanalysistime: selectedRecordTaskForm.spreanalysistime ? selectedRecordTaskForm.spreanalysistime : \"\",\n                  spreparationtime: selectedRecordTaskForm.spreparationtime ? selectedRecordTaskForm.spreparationtime : \"\",\n                  staskprocedure: selectedRecordTaskForm.staskprocedure ? selectedRecordTaskForm.staskprocedure : \"\",\n                  scomments: selectedRecordTaskForm.scomments ? selectedRecordTaskForm.scomments : \"\"\n                }\n              }));\n              inputData = {\n                ResultUsedTasks: taskArry,\n                userinfo: this.props.Login.userInfo,\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\n                nregtypecode: nregtypecode,\n                nregsubtypecode: nregsubtypecode,\n                ndesigntemplatemappingcode: ndesigntemplatemappingcode\n              };\n            }\n\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultUsedTasks\",\n              inputData: inputData,\n              selectedId,\n              activeTestKey: \"IDS_TASK\",\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          } else {\n            toast.info(this.props.intl.formatMessage({\n              id: \"IDS_ENTERTASKTIME\"\n            }));\n            return;\n          }\n        }\n\n        if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\n          inputData = {\n            ntransactiontestcode: selectedRecord.ntransactiontestcode,\n            ntransactionresultcode: selectedRecord.ntransactionresultcode,\n            sresultcomment: selectedRecord.sresultcomment,\n            transactiontestcode: selectedRecord.transactiontestcode,\n            userinfo: this.props.Login.userInfo,\n            nregtypecode: nregtypecode,\n            nregsubtypecode: nregsubtypecode,\n            ncontrolcode: this.props.Login.ncontrolcode\n          }; // inputParam = {\n          //     classUrl: classUrl,\n          //     methodUrl: \"ParameterComments\",\n          //     inputData: inputData, selectedId,\n          //     isFileupload: false,\n          //     operation: this.props.Login.operation,\n          //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\n          // }\n\n          this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\n          return;\n        }\n\n        if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\n          let lstResultCheckList = [];\n\n          if (selectedRecord && selectedRecord.editedQB) {\n            selectedRecord.editedQB.map(qbcode => lstResultCheckList.push(selectedRecord[qbcode]));\n            inputData = {\n              ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\n              ntransactionresultcode: selectedRecord.ntransactionresultcode,\n              transactiontestcode: selectedRecord.transactiontestcode,\n              ResultCheckList: lstResultCheckList,\n              userinfo: this.props.Login.userInfo,\n              nregtypecode: nregtypecode,\n              nregsubtypecode: nregsubtypecode\n            };\n            inputParam = {\n              classUrl: classUrl,\n              methodUrl: \"ResultEntryChecklist\",\n              inputData: inputData,\n              selectedId,\n              isFileupload: false,\n              operation: this.props.Login.operation,\n              displayName: this.props.Login.inputParam.displayName,\n              saveType //postParam\n\n            };\n          }\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.searchSampleRef = React.createRef();\n    this.searchSubSampleRef = React.createRef();\n    this.searchTestRef = React.createRef();\n    this.childRef = React.createRef();\n    this.state = {\n      subSampleCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      subSampleAttachmentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'groupingField' }] \n\n      },\n      sampleGridDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      resultDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      instrumentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      materialDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      taskDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      documentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      resultChangeDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }]\n\n      },\n      testCommentDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      historyDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'stestsynonym' }] \n\n      },\n      sampleHistoryDataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: 'sarno' }] \n\n      },\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      masterStatus: \"\",\n      error: \"\",\n      operation: \"\",\n      showSample: false,\n      showSubSample: false,\n      showTest: true,\n      tabPane: 0,\n      subsampleskip: 0,\n      sampleListColumns: [],\n      subSampleListColumns: [],\n      testListColumns: [],\n      TableExpandableItem: [],\n      SingleItem: [],\n      SampleGridItem: [],\n      SampleGridExpandableItem: [],\n      sampleListMainField: [],\n      subSampleListMainField: [],\n      testListMainField: [],\n      testMoreField: [],\n      selectedRecord: {},\n      selectedRecordMaterialForm: {},\n      selectedRecordInstrumentForm: {},\n      selectedRecordTaskForm: {},\n      validateFormulaMandyFields: [],\n      splitChangeWidthPercentage: 22,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      subSampleSkip: 0,\n      subSampleTake: this.props.Login.settings && this.props.Login.settings[12],\n      // subsampletake: this.props.Login.settings\n      // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\n      testskip: 0,\n      testtake: this.props.Login.settings && this.props.Login.settings[12],\n      initialVerticalWidth: \"57vh\",\n      enablePin: false,\n      openELNSheet: false,\n      enlLink: \"\",\n      sampleSearchField: [],\n      subsampleSearchField: [],\n      testSearchField: []\n    }; //openELNSheet: false\n\n    this.formRef = React.createRef(); //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\n  }\n\n  showRESampleInfo() {\n    this.setState({\n      showSample: true,\n      showTest: false\n    });\n  }\n\n  showRETestList() {\n    this.setState({\n      showTest: true,\n      showSample: false,\n      showSubSample: false\n    });\n  } // getMeanTestParameter =(meanParam)=>{\n  //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\n  //                        userinfo:this.props.Login.userInfo}\n  //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\n  //         .then(response => {\n  //            const list =  response.data || [];\n  //            const optionList = [];\n  //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\n  //            this.setState({meanTestParameterList:optionList});                \n  //         })\n  //         .catch(error => {\n  //             if (error.response.status === 500) {\n  //                 toast.error(error.message);\n  //             } else {\n  //                 toast.warn(error.response.data);\n  //             }\n  //         })\n  // }\n\n\n  showRESubSampleinfo() {\n    this.setState({\n      showSample: false,\n      showTest: true,\n      showSubSample: !this.state.showSubSample\n    });\n  }\n\n  // sampleTabDetail = () => {\n  //     const tabMap = new Map();\n  //     {\n  //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\n  //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\n  //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\n  //                 SingleItem={this.state.SingleItem}\n  //                 screenName=\"IDS_SAMPLEINFO\"\n  //             />) :\n  //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\n  //                 selectedSample={this.props.Login.masterData.RESelectedSample}\n  //                 dataState={this.state.dataState}\n  //                 dataStateChange={this.dataStateChange}\n  //                 detailedFieldList={this.state.SampleGridExpandableItem}\n  //                 extractedColumnList={this.state.SampleGridItem}\n  //                 userInfo={this.props.Login.userInfo}\n  //                 inputParam={this.props.Login.inputParam}\n  //                 screenName=\"IDS_SAMPLEGRID\"\n  //             />)\n  //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\n  //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\n  //         return tabMap;\n  //     }\n  // }\n  sampleTabDetail() {\n    const tabMap = new Map();\n    let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\n    tabMap.set(\"IDS_SAMPLEATTACHMENTS\", /*#__PURE__*/React.createElement(Attachments, {\n      screenName: \"IDS_SAMPLEATTACHMENTS\",\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      attachments: this.props.Login.masterData.RegistrationAttachment || [],\n      deleteRecord: this.props.deleteAttachment,\n      onSaveClick: this.onAttachmentSaveClick,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDATTACHEMENT\",\n      fetchRecord: this.props.getAttachmentCombo,\n      addName: \"AddSampleAttachment\",\n      editName: \"EditSampleAttachment\",\n      deleteName: \"DeleteSampleAttachment\",\n      viewName: \"ViewSampleAttachment\",\n      methodUrl: \"SampleAttachment\",\n      nsubsampleneed: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      userInfo: this.props.Login.userInfo,\n      deleteParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: this.props.Login.screenName\n      },\n      editParam: {\n        methodUrl: \"SampleAttachment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        masterList: this.props.Login.masterData.RESelectedSample\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1320,\n        columnNumber: 13\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLECOMMENTS\", /*#__PURE__*/React.createElement(Comments, {\n      screenName: \"IDS_SAMPLECOMMENTS\",\n      onSaveClick: this.onCommentsSaveClick,\n      selectedMaster: \"RESelectedSample\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      Comments: this.props.Login.masterData.RegistrationComment || [],\n      fetchRecord: this.props.getCommentsCombo,\n      masterData: this.props.Login.masterData,\n      addName: \"AddSampleComment\",\n      editName: \"EditSampleComment\",\n      deleteName: \"DeleteSampleComment\",\n      methodUrl: \"SampleComment\",\n      isTestComment: false,\n      masterList: this.props.Login.masterData.RESelectedSample,\n      masterAlertStatus: \"IDS_SELECTSAMPLETOADDCOMMENTS\",\n      primaryKeyField: \"nregcommentcode\",\n      dataState: this.state.testCommentDataState,\n      dataStateChange: this.testDataStateChange,\n      deleteParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\"\n      },\n      editParam: {\n        methodUrl: \"SampleComment\",\n        npreregno,\n        userInfo: this.props.Login.userInfo,\n        masterData: this.props.Login.masterData,\n        esignRights: this.props.Login.userRoleControlRights,\n        screenName: \"IDS_SAMPLECOMMENTS\",\n        operation: \"update\",\n        masterList: this.props.Login.masterData.RESelectedSample || [],\n        ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\n      },\n      selectedListName: \"IDS_ARNUMBER\",\n      displayName: \"sarno\",\n      selectedId: this.props.Login.selectedId || null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1361,\n        columnNumber: 42\n      }\n    }));\n    tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\", /*#__PURE__*/React.createElement(SampleApprovalHistory, {\n      userInfo: this.props.Login.userInfo,\n      ApprovalHistory: this.props.Login.masterData.SampleApprovalHistory,\n      inputParam: this.props.Login.inputParam,\n      dataState: this.state.sampleHistoryDataState,\n      dataStateChange: this.sampleDataStateChange,\n      masterData: this.props.Login.masterData,\n      screenName: \"IDS_SAMPLEAPPROVALHISTORY\",\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      selectedId: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1408,\n        columnNumber: 13\n      }\n    }));\n    return tabMap;\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  getActiveTestURL() {\n    let url = \"resultentrybysample/getTestbasedParameter\";\n\n    switch (this.props.Login.activeTestKey) {\n      case \"IDS_RESULTS\":\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n\n      case \"IDS_INSTRUMENT\":\n        url = \"resultentrybysample/getResultUsedInstrument\";\n        break;\n\n      case \"IDS_MATERIAL\":\n        url = \"resultentrybysample/getResultUsedMaterial\";\n        break;\n\n      case \"IDS_TASK\":\n        url = \"resultentrybysample/getResultUsedTask\";\n        break;\n\n      case \"IDS_TESTATTACHMENTS\":\n        url = \"attachment/getTestAttachment\";\n        break;\n\n      case \"IDS_TESTCOMMENTS\":\n        url = \"comments/getTestComment\";\n        break;\n\n      case \"IDS_DOCUMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      case \"IDS_RESULTCHANGEHISTORY\":\n        url = \"resultentrybysample/getResultChangeHistory\";\n        break;\n\n      case \"IDS_APPROVALHISTORY\":\n        url = \"resultentrybysample/getSampleApprovalHistory\";\n        break;\n\n      case \"IDS_SAMPLEATTACHMENTS\":\n        url = \"attachment/getSampleAttachment\";\n        break;\n\n      default:\n        url = \"resultentrybysample/getTestbasedParameter\";\n        break;\n    }\n\n    return url;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_MATERIAL' && nextState.isMaterialInitialRender === false && nextState.selectedRecordMaterialForm !== this.state.selectedRecordMaterialForm) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_INSTRUMENT' && nextState.isInstrumentInitialRender === false && nextState.selectedRecordInstrumentForm !== this.state.selectedRecordInstrumentForm) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_RESULTENTRY' && nextState.isParameterInitialRender === false && nextState.parameterResults !== this.state.parameterResults) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' && nextState.isaddSampleRender === false && nextState.parameterResults1 !== this.state.parameterResults1) {\n      return false;\n    } else if (this.props.Login.openModal && this.props.Login.screenName === 'IDS_TASK' && nextState.isTaskInitialRender === false && nextState.selectedRecordTaskForm !== this.state.selectedRecordTaskForm) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render() {\n    // const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" }, \n    // { \"fieldName\": \"spatientid\", \"label\": \"IDS_PATIENTID\" },   \n    // { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\n    // { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\n    // { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\n    // { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\n    // { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\n    // { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\n    // ];\n    const auditInfoFields = [{\n      \"label\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"fieldName\": \"sarno\"\n    }, {\n      \"fieldName\": \"stestsynonym\",\n      \"label\": \"IDS_TEST\"\n    }, {\n      \"fieldName\": \"sfirstname\",\n      \"label\": \"IDS_PATIENTNAME\"\n    }, {\n      \"fieldName\": \"sgendername\",\n      \"label\": \"IDS_GENDER\"\n    }]; // this.feildsForGrid =\n    // [\n    //   // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \n    //   { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"100px\" },\n    //   { \"idsName\": \"IDS_SUBSAMPLE\", \"dataField\": \"ssamplearno\", \"width\": \"100px\" },      \n    //   { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\n    //   { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\n    //   { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\n    // ];\n\n    this.feildsForGrid = [// { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\n    {\n      \"idsName\": \"IDS_REPORTREFNO\",\n      \"dataField\": \"sreportno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode],\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"sparametersynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RESULT\",\n      \"dataField\": \"sfinal\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_GRADE\",\n      \"dataField\": \"sgradename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REGISTRATIONDATE\",\n      \"dataField\": \"sregdate\",\n      \"width\": \"200px\"\n    }]; // console.log(this.state.enlLink);\n    // console.log(this.state.enlLink);\n\n    let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : []; //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\n    //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\n    //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\n\n    let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []; //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\n\n    let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : [];\n    const startDate = this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date();\n    const endDate = this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date(); // let obj = this.covertDatetoString(startDate, endDate)\n\n    let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\n    const fromDate = obj.fromDate;\n    const toDate = obj.toDate;\n    let subSampleGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      fromdate: fromDate,\n      todate: toDate,\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      subSampleSkip: this.state.subSampleSkip,\n      subSampleTake: this.state.subSampleTake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      sampleChangeDataState: this.state.sampleChangeDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      searchSubSampleRef: this.searchSubSampleRef,\n      searchTestRef: this.searchTestRef,\n      nneedtemplatebasedflow: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow || false,\n      //Aravindh\n      checkBoxOperation: 3,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1,\n      activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 8 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 8 : this.state.enableAutoClick ? this.state.activeTabIndex : 0\n    };\n    let testGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntranscode: String(this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString()),\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\n      activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      subSampleSkip: this.state.subSampleSkip,\n      subSampleTake: this.state.subSampleTake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      historyDataState: this.state.historyDataState,\n      samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\n      sampleHistoryDataState: this.state.sampleHistoryDataState,\n      // activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : 0,\n      activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n    };\n    let testChildGetREParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n      napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n      ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\n      ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n      npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample && sample.npreregno).join(\",\"),\n      ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample && sample.ntransactionsamplecode).join(\",\"),\n      activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n      fromdate: fromDate,\n      todate: toDate,\n      testskip: this.state.testskip,\n      testtake: this.state.testtake,\n      resultDataState: this.state.resultDataState,\n      instrumentDataState: this.state.instrumentDataState,\n      materialDataState: this.state.materialDataState,\n      taskDataState: this.state.taskDataState,\n      documentDataState: this.state.documentDataState,\n      resultChangeDataState: this.state.resultChangeDataState,\n      testCommentDataState: this.state.testCommentDataState,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      activeTabIndex: this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\n      //activeTabIndex: this.state.enableAutoClick ? this.state.activeTabIndex : this.state.activeTabIndex ? this.state.activeTabIndex : 1,\n      nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n      nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n    };\n    const filterSampleParam = {\n      inputListName: \"RE_SAMPLE\",\n      selectedObject: \"RESelectedSample\",\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 2,\n        nflag: 2,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: this.state.sampleSearchField,\n      changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    const filterSubSampleParam = {\n      inputListName: \"RE_SUBSAMPLE\",\n      selectedObject: \"RESelectedSubSample\",\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      fecthInputObject: {\n        ntype: 3,\n        nflag: 3,\n        ntransactiontestcode: 0,\n        masterData: this.props.Login.masterData,\n        userinfo: this.props.Login.userInfo,\n        nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\n        nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\n        nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\n        napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\n        ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\n        ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\n        //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\n        fromdate: fromDate,\n        todate: toDate,\n        activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\n        nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        checkBoxOperation: 3,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      },\n      masterData: this.props.Login.masterData,\n      // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\n      searchFieldList: this.state.subsampleSearchField,\n      changeList: [\"RE_TEST\", \"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\n    };\n    let filterTestParam = {\n      inputListName: \"RE_TEST\",\n      selectedObject: \"RESelectedTest\",\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      fecthInputObject: {\n        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\n        userinfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\n        nworlistcode: this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode || -1,\n        nbatchmastercode: this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode || -1\n      },\n      masterData: this.props.Login.masterData,\n      searchFieldList: this.state.testSearchField,\n      changeList: [\"TestParameters\", \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\", \"RegistrationAttachment\", \"RESelectedTest\"],\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n      nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ? true : false,\n      checkBoxOperation: 3 //nworlistcode : (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1\n\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSampleRef,\n      primaryKeyField: \"npreregno\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: filterSampleParam,\n      selectedObject: \"RESelectedSample\",\n      inputListName: \"RE_SAMPLE\",\n      updatedListname: \"\",\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedSubSample\",\n      updatedListname: \"updatedSubSample\",\n      clearFilter: \"no\",\n      searchRef: this.searchSubSampleRef,\n      primaryKeyField: \"ntransactionsamplecode\",\n      fetchUrl: \"resultentrybysample/getResultEntryDetails\",\n      fecthInputObject: testGetREParam,\n      selectedObject: \"RESelectedSubSample\",\n      childRefs: [{\n        ref: this.searchTestRef,\n        childFilteredListName: \"searchedTest\"\n      }],\n      inputListName: \"RE_SUBSAMPLE\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }, {\n      filteredListName: \"searchedTest\",\n      clearFilter: \"yes\",\n      searchRef: this.searchTestRef,\n      primaryKeyField: \"ntransactiontestcode\",\n      fetchUrl: this.getActiveTestURL(),\n      childRefs: [{\n        ref: this.searchSubSampleRef,\n        childFilteredListName: \"searchedSubSample\"\n      }, {\n        ref: this.searchSampleRef,\n        childFilteredListName: \"\"\n      }],\n      fecthInputObject: testChildGetREParam,\n      selectedObject: \"RESelectedTest\",\n      inputListName: \"RE_TEST\",\n      updatedListname: \"updatedTest\",\n      unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\", \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\", \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\n    }];\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, // {\n    //     \"label\": \"IDS_SAMPLETYPE\",\n    //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    // }, \n    {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\n    }, // {\n    //     \"label\": \"IDS_CONFIGVERSION\",\n    //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    // },\n    {\n      \"label\": \"IDS_TEST\",\n      \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\n    }, {\n      \"label\": \"IDS_TESTSTATUS\",\n      \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\n    }];\n\n    if (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) {\n      this.breadCrumbData.push({\n        \"label\": \"IDS_WORKLIST\",\n        \"value\": this.props.Login.masterData.realWorklistCodeValue ? this.props.Login.masterData.realWorklistCodeValue.sworklistno : \"NA\"\n      });\n    }\n\n    if (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) {\n      this.breadCrumbData.push({\n        \"label\": \"IDS_BATCH\",\n        \"value\": this.props.Login.masterData.realBatchCodeValue ? this.props.Login.masterData.realBatchCodeValue.sbatcharno : \"NA\"\n      });\n    }\n\n    const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode;\n    const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode;\n    const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\n    const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode;\n    const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode;\n    const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode;\n    const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode;\n    const adhocId = this.state.controlMap.has(\"AdhocParameter\") && this.state.controlMap.get(\"AdhocParameter\").ncontrolcode;\n    const openELNSheet = this.state.controlMap.has(\"OpenELNSheet\") && this.state.controlMap.get(\"OpenELNSheet\").ncontrolcode;\n    const patientPreviousResultView = this.state.controlMap.has(\"PatientPreviousResultView\") && this.state.controlMap.get(\"PatientPreviousResultView\").ncontrolcode;\n    const identicalResultEnterId = this.state.controlMap.has(\"IdenticalResultEnter\") && this.state.controlMap.get(\"IdenticalResultEnter\").ncontrolcode;\n    const mandatoryFieldsInstrument = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENTCATEGORY\",\n      \"dataField\": \"ninstrumentcatcode\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_INSTRUMENT\",\n      \"dataField\": \"ninstrumentcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_FORMDATE\",\n      \"dataField\": \"dfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TODATE\",\n      \"dataField\": \"dtodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntzfromdate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TIMEZONE\",\n      \"dataField\": \"ntztodate\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsMaterial = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"nmaterialtypecode\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"nmaterialcatcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIAL\",\n      \"dataField\": \"nmaterialcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MATERIALINVENTORY\",\n      \"dataField\": \"nmaterialinventorycode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_AVAILABLEQUANTITY\",\n      \"dataField\": \"savailablequantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_USEDQTY\",\n      \"dataField\": \"susedquantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_UNIT\",\n      \"dataField\": \"sunitname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryFieldsTask = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREANALYSISTIME\",\n      \"dataField\": \"spreanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PREPARATIONTIME\",\n      \"dataField\": \"spreparationtime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_ANALYSISTIME\",\n      \"dataField\": \"sanalysistime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_MISCTIME\",\n      \"dataField\": \"smisctime\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const mandatoryFieldsTestMethodSource = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SOURCE\",\n      \"dataField\": \"nsourcecode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_METHOD\",\n      \"dataField\": \"nmethodcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const mandatoryEnforceResult = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_RESULTS\",\n      \"dataField\": \"senforceresult\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_COMMENTS\",\n      \"dataField\": \"senforceresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    } // { \"mandatory\": true, \"idsName\": \"IDS_PASSFLAG\", \"dataField\": \"ngradecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\n    ];\n    const mandatoryFieldsParameter = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_PARAMETERCOMMENTS\",\n      \"dataField\": \"sresultcomment\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n    const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\n    const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode;\n    const testDesign = /*#__PURE__*/React.createElement(ContentPanel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3308,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3309,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      style: {\n        borderBottom: \"0px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3310,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        display: \"inline-block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3311,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3312,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TEST\"\n    })))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"p-0 sm-pager\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3315,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      progressTimerStart: this.props.Login.progressTimerStart || false,\n      clickIconGroup: true,\n      cardHead: 94 //paneHeight={this.state.initialVerticalWidth}\n      // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\n      ,\n      masterList: this.props.Login.masterData.searchedTest || testListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedTest,\n      primaryKeyField: \"ntransactiontestcode\" //getMasterDetail={this.props.getTestChildTabREDetail}\n      ,\n      getMasterDetail: (event, status) => {\n        this.props.getTestChildTabREDetail(event, status);\n        this.changePropertyView(1, \"IDS_RESULTS\", event, \"click\");\n      },\n      inputParam: testChildGetREParam,\n      subFieldsLabel: true,\n      additionalParam: [],\n      mainField: \"stestsynonym\",\n      selectedListName: \"RESelectedTest\",\n      objectName: \"test\",\n      listName: \"IDS_TEST\",\n      pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n      showStatusLink: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\",\n      needMultiSelect: true,\n      subFields: this.state.testListColumns || [],\n      moreField: this.state.testMoreField,\n      needValidation: false,\n      needFilter: false,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedTest\",\n      searchRef: this.searchTestRef,\n      filterParam: filterTestParam,\n      selectionField: \"ntransactionstatus\",\n      showStatusName: true,\n      selectionFieldName: \"sfilterstatus\",\n      childTabsKey: [\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\" // , \"RegistrationComment\"\n      ] // selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\n      ,\n      selectionList: this.state.selectedFilter,\n      skip: this.state.testskip,\n      take: this.state.testtake,\n      handlePageChange: this.handleTestPageChange,\n      selectionColorField: \"scolorhexcode\",\n      showMoreResetList: true,\n      showMoreResetListName: \"RE_SAMPLE\",\n      buttonCount: 5,\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_OPENELNSHEET\"\n        }),\n        controlname: \"elnimage\",\n        hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1,\n        onClick: this.openClosePortal,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          elnUserInfo: this.props.Login.elnUserInfo,\n          elnSite: this.props.Login.elnSite\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_PREVIOUSRESULTVIEW\"\n        }),\n        controlname: \"faEye\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(patientPreviousResultView) === -1,\n        onClick: this.viewSample,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_EDITMETHODSSOURCE\"\n        }),\n        controlname: \"faPencilAlt\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1,\n        onClick: this.testMethodSourceEdit,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          editSourceMethodId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADHOCPARAMETER\"\n        }),\n        controlname: \"faAdhocParameter\",\n        dataplace: \"left\",\n        hidden: this.state.userRoleControlRights.indexOf(adhocId) === -1,\n        onClick: this.adhocTestParameter,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          adhocId\n        }\n      }, //{ title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\n      {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDINSTRUMENT\"\n        }),\n        controlname: \"faMicroscope\",\n        hidden: false,\n        onClick: this.addREInstrument,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedInstrumentId\n        }\n      }, {\n        title: this.props.intl.formatMessage({\n          id: \"IDS_ADDMATERIAL\"\n        }),\n        controlname: \"faFlask\",\n        hidden: false,\n        onClick: this.props.addREMaterial,\n        objectName: \"test\",\n        inputData: {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          addResultUsedMaterailId\n        }\n      } // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\n      ],\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex justify-content-end icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3382,\n          columnNumber: 29\n        }\n      }, testListRE.length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ? /*#__PURE__*/React.createElement(FontIconWrap //  data-for=\"tooltip-common-wrap\" \n      , {\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_TESTSTART\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3392,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlay,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3398,\n          columnNumber: 49\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(resultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3404,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faAddressBook,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3407,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_FILLDEFAULTRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(setDefaultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3409,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPencilRuler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3412,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_COMPLETE\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(completeResultId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake, 3),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3414,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faCheckCircle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3417,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Nav.Link, {\n        //data-for=\"tooltip-common-wrap\" \n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_IMPORTRESULT\"\n        }),\n        hidden: true,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3419,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faFileImport,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3422,\n          columnNumber: 45\n        }\n      }))) : \"\") // </Tooltip>\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3316,\n        columnNumber: 21\n      }\n    }))));\n    let mainDesign = \"\";\n\n    if (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\n      mainDesign = /*#__PURE__*/React.createElement(SplitterLayout, {\n        borderColor: \"#999\",\n        primaryIndex: 1,\n        percentage: true,\n        secondaryInitialSize: this.state.splitChangeWidthPercentage,\n        onSecondaryPaneSizeChange: this.paneSizeChange,\n        primaryMinSize: 40,\n        secondaryMinSize: 30,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3438,\n          columnNumber: 26\n        }\n      }, /*#__PURE__*/React.createElement(Card, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3445,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Card.Header, {\n        style: {\n          borderBottom: \"0px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3446,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          display: \"inline-block\",\n          marginTop: \"1%\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3447,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"card-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3448,\n          columnNumber: 29\n        }\n      }, this.props.intl.formatMessage({\n        id: \"IDS_SUBSAMPLE\"\n      })))), /*#__PURE__*/React.createElement(Card.Body, {\n        className: \"p-0 sm-pager\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3451,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n        cardHead: 94 //paneHeight={this.state.initialVerticalWidth}\n        ,\n        masterList: this.props.Login.masterData.searchedSubSample || subSampleListRE,\n        selectedMaster: this.props.Login.masterData.RESelectedSubSample,\n        primaryKeyField: \"ntransactionsamplecode\",\n        getMasterDetail: this.props.getTestREDetail,\n        inputParam: testGetREParam,\n        additionalParam: [],\n        mainField: \"ssamplearno\",\n        selectedListName: \"RESelectedSubSample\",\n        objectName: \"subSample\",\n        listName: \"IDS_SUBSAMPLE\",\n        jsonField: 'jsondata',\n        jsonDesignFields: true,\n        subFields: this.state.DynamicSubSampleColumns,\n        moreField: this.state.subSampleMoreField,\n        needValidation: false,\n        needMultiSelect: true,\n        needFilter: false,\n        skip: this.state.subSampleSkip,\n        take: this.state.subSampleTake,\n        pageSize: this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting)),\n        handlePageChange: this.handleSubSamplePageChange,\n        showStatusLink: true,\n        showStatusName: false,\n        selectionList: this.state.selectedFilter,\n        statusFieldName: \"stransdisplaystatus\",\n        statusField: \"ntransactionstatus\",\n        selectionFieldName: \"sfilterstatus\",\n        selectionField: \"ntransactionstatus\",\n        childTabsKey: [\"RE_TEST\", \"Registration\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n        filterColumnData: this.props.filterTransactionList,\n        searchListName: \"searchedSubSample\",\n        searchRef: this.searchSubSampleRef,\n        filterParam: filterSubSampleParam,\n        subFieldsFile: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3452,\n          columnNumber: 25\n        }\n      }))), testDesign);\n    } else {\n      mainDesign = testDesign;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3502,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3503,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      bsPrefix: \"toolbar-top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3504,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3506,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: `vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3507,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"} ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3508,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      percentage: true,\n      primaryIndex: 1,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage //onSecondaryPaneSizeChange={this.paneSizeChange} \n      ,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3509,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar-top-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3513,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMasterJsonView, {\n      clickIconGroup: true // paneHeight={this.state.parentHeight}\n      ,\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedSample || sampleListRE,\n      selectedMaster: this.props.Login.masterData.RESelectedSample,\n      primaryKeyField: \"npreregno\",\n      getMasterDetail: this.props.getsubSampleREDetail,\n      inputParam: subSampleGetREParam,\n      additionalParam: ['napprovalversioncode'],\n      mainField: \"sarno\",\n      selectedListName: \"RESelectedSample\",\n      objectName: \"sample\",\n      listName: \"IDS_SAMPLE\",\n      needValidation: false,\n      validationKey: \"napprovalversioncode\",\n      validationFailMsg: \"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\",\n      subFields: this.state.DynamicSampleColumns || [],\n      moreField: this.state.sampleMoreField,\n      needFilter: true,\n      needMultiSelect: true,\n      showFilter: this.props.Login.showFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onREFilterSubmit,\n      filterColumnData: this.props.filterTransactionList,\n      searchListName: \"searchedSample\",\n      searchRef: this.searchSampleRef,\n      handlePageChange: this.handlePageChange,\n      filterParam: filterSampleParam,\n      skip: this.state.skip,\n      take: this.state.take,\n      hidePaging: false,\n      showStatusLink: true,\n      showStatusName: true,\n      statusFieldName: \"stransdisplaystatus\",\n      statusField: \"ntransactionstatus\" //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\n      ,\n      childTabsKey: [\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"],\n      selectionList: this.state.selectedFilter,\n      selectionColorField: \"scolorhexcode\",\n      selectionFieldName: \"sfilterstatus\",\n      selectionField: \"ntransactionstatus\",\n      jsonField: 'jsondata',\n      jsonDesignFields: true,\n      callCloseFunction: true,\n      filterComponent: [{\n        \"Sample Filter\": /*#__PURE__*/React.createElement(ResultEntryFilter, {\n          fromDate: this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : new Date(),\n          toDate: this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \n          rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : new Date(),\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.props.Login.masterData.defaultRegistrationSubType || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.REFilterStatus || [],\n          FilterStatusValue: this.props.Login.masterData.defaultFilterStatus || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.props.Login.masterData.defaultApprovalConfigVersion || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          Batch: this.state.Batchvalues || [],\n          BatchValue: this.props.Login.masterData.defaultBatchvalue || [],\n          Worklist: this.state.Worklistvalues || [],\n          WorklistValue: this.props.Login.masterData.defaultWorklistvalue || [],\n          TestValue: this.props.Login.masterData.defaultTestvalues || [],\n          ConfigurationFilter: this.state.ConfigurationFilterValues || [],\n          ConfigurationFilterValue: this.props.Login.masterData.defaultConfigurationFilterValue || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 3561,\n            columnNumber: 74\n          }\n        })\n      }],\n      actionIcons: [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ? {\n        title: \"Report\",\n        controlname: \"reports\",\n        objectName: \"sample\",\n        hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\n        onClick: this.props.previewSampleReport,\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          ncontrolcode: reportPreviewId\n        }\n      } : {}],\n      commonActions: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right icon-group-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3615,\n          columnNumber: 57\n        }\n      }, this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE ? /*#__PURE__*/React.createElement(Nav.Link, {\n        // data-for=\"tooltip-common-wrap\"\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ENTERIDENTICALRESULT\"\n        }),\n        hidden: this.state.userRoleControlRights.indexOf(identicalResultEnterId) === -1,\n        className: \"btn btn-circle outline-grey ml-2\",\n        role: \"button\",\n        onClick: () => this.props.resultEntryGetSpec(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3617,\n          columnNumber: 57\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faAddressBook,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3620,\n          columnNumber: 53\n        }\n      })) : \"\", /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-for\": \"tooltip-common-wrap\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3623,\n          columnNumber: 61\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faSync,\n        style: {\n          \"width\": \"0.6!important\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3627,\n          columnNumber: 65\n        }\n      })))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3514,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3634,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: this.state.showTest === true ? {\n        display: \"block\",\n        background: \"#FFFF\"\n      } : {\n        display: \"none\",\n        background: \"#FFFF\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3635,\n        columnNumber: 45\n      }\n    }, mainDesign)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3643,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      style: {\n        width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3644,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: ` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyViewClose(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3645,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faChevronRight,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3645,\n        columnNumber: 178\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-common sm-view-v-t position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3646,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3647,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3649,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3650,\n        columnNumber: 53\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_RESULTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3655,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3656,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3658,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3659,\n        columnNumber: 53\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid-tab position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3664,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3665,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3667,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3668,\n        columnNumber: 53\n      }\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-grid position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3673,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3674,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3676,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3677,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3680,\n        columnNumber: 44\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_INSTRUMENT\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3685,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3686,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3688,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3689,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3692,\n        columnNumber: 44\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIAL\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 5 ? this.sideNavDetail(\"IDS_MATERIAL\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3697,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3698,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3700,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3701,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3704,\n        columnNumber: 44\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TASK\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 6 ? this.sideNavDetail(\"IDS_TASK\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3709,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3710,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3712,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3713,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3716,\n        columnNumber: 44\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TESTAPPROVALHISTORY\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 7 ? this.sideNavDetail(\"IDS_TESTAPPROVALHISTORY\") : \"\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: ` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3721,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"tab-expand-collapse-btn p-0\",\n      onClick: () => this.setState({\n        enablePropertyPopup: !this.state.enablePropertyPopup\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3722,\n        columnNumber: 45\n      }\n    }, !this.state.enablePropertyPopup ? /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewExpand,\n      alt: \"Fullview\",\n      width: \"20\",\n      height: \"20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3724,\n        columnNumber: 53\n      }\n    }) : /*#__PURE__*/React.createElement(\"img\", {\n      src: fullviewCollapse,\n      alt: \"Collapse\",\n      width: \"24\",\n      height: \"24\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3725,\n        columnNumber: 53\n      }\n    })), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"inner_h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3728,\n        columnNumber: 45\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })), this.state.activeTabIndex && this.state.activeTabIndex == 8 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tab-head\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3734,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3735,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(1, \"IDS_RESULTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3736,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFileInvoice,\n      \"data-for\": \"tooltip-common-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RESULT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3737,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3740,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_RESULT\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(2, \"IDS_ATTACHMENTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3744,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3745,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3746,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ATTACHMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(3, \"IDS_COMMENTS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3750,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faComments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3751,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3752,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_COMMENTS\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(4, \"IDS_INSTRUMENT\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3756,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faMicroscope,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3757,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3758,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_INSTRUMENT\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(5, \"IDS_MATERIAL\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3762,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faFlask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3763,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3764,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIAL\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(6, \"IDS_TASK\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3768,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCommentDots,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3769,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3770,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TASK\"\n    }))), /*#__PURE__*/React.createElement(\"li\", {\n      className: `${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`,\n      onClick: () => this.changePropertyView(8, \"IDS_SAMPLEDETAILS\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3780,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3781,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3782,\n        columnNumber: 49\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_SAMPLEDETAILS\"\n    })))), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"tab-click-toggle-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3787,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch // label={\"Auto Show\"}\n    , {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_AUTOSHOW\"\n      }),\n      type: \"switch\",\n      name: \"Auto Click\",\n      onChange: event => this.onInputSwitchOnChange(event),\n      defaultValue: this.state.enableAutoClick,\n      isMandatory: false,\n      required: true,\n      checked: this.state.enableAutoClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3788,\n        columnNumber: 45\n      }\n    })))))))), /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3822,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3823,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openELNSheet // show={this.state.openELNSheet}\n      ,\n      onHide: this.openClosePortal,\n      dialogClassName: `${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3824,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3837,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      style: {\n        \"line-height\": \"1.0\"\n      },\n      id: \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3838,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ELNSHEET\"\n    })), /*#__PURE__*/React.createElement(ReactTooltip, {\n      globalEventOff: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3841,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3844,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3845,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Iframe, {\n      url: this.props.Login.masterData.enlLink,\n      width: \"98%\",\n      height: \"1000px\",\n      id: \"reportviewID\",\n      className: \"reportview\" //display=\"initial\"\n      /// position=\"relative\" \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3847,\n        columnNumber: 37\n      }\n    })))))), /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3861,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: this.props.Login.showAlertGrid,\n      modalTitle: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? this.props.intl.formatMessage({\n        id: \"IDS_ADDITIONALINFOREQURIED\"\n      }) //this.props.Login.onlyAlertMsgAvailable?\"Alert\":this.props.Login.masterData['salertmessage']\n      // :this.props.intl.formatMessage({ id: \"IDS_COMPLETETHEFOLLOWINGTESTS\" })} \n      : this.props.intl.formatMessage({\n        id: \"IDS_RULECOMPLETEVALIDATION\"\n      }) //  needCloseButton={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\n      ,\n      closeModal: this.closeModalShow,\n      rulesenginealret: true,\n      onSaveClick: this.props.Login.showAlertGrid == true ? this.onskiprule : this.onModalSave,\n      removeCancel: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? true : false // needSubmit={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\n      ,\n      needSubmit: true,\n      needSave: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : true,\n      selectedRecord: this.state.selectedRecord || {} // mandatoryFields={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\n      //     this.mandatoryFieldsForAdditionalInfo():\"\"}\n      ,\n      size: this.props.Login.showAlertForPredefined || this.props.Login.additionalInfoView ? \"\" : 'lg',\n      showAlertMsg: this.props.Login.showAlertForPredefined ? true : false,\n      modalBody: this.props.Login.additionalInfoView ? this.state.selectedRecord['additionalResultData'] : this.props.Login.showAlertForPredefined ? /*#__PURE__*/React.createElement(ResultEntryPredefinedComments, {\n        onlyAlertMsgAvailable: this.props.Login.onlyAlertMsgAvailable,\n        salertmessage: this.props.Login.masterData['salertmessage'],\n        showMultiSelectCombo: this.props.Login.showMultiSelectCombo,\n        testgrouptestpredefsubresultOptions: this.props.Login.masterData.testgrouptestpredefsubresultOptions || [],\n        selectedRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3883,\n          columnNumber: 24\n        }\n      }) : /*#__PURE__*/React.createElement(CustomTabs, {\n        tabDetail: this.tabAlertRulesEngine(),\n        onTabChange: this.onTabChangeRulesEngine,\n        destroyInactiveTabPane: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3892,\n          columnNumber: 25\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3862,\n        columnNumber: 17\n      }\n    })), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: this.props.Login.screenName === 'IDS_MEANPARAMETER' || this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? \"xl\" : \"lg\",\n      closeModal: this.closeModal,\n      showCalculate: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? true : false,\n      operation: // this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS'?\"\":\n      this.props.Login.screenName === 'IDS_RESULTENTRY' || this.props.Login.screenName === 'IDS_ENFORCERESULT' || this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' ? \"\" : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName === \"IDS_RESULTENTRYPARAMETER\" ? this.props.Login.masterData.realTestcodeValue.stestsynonym : this.props.Login.screenName,\n      selectedRecord: this.props.Login.screenName === 'IDS_INSTRUMENT' && !this.props.Login.loadEsign ? this.state.selectedRecordInstrumentForm : this.props.Login.screenName === 'IDS_MATERIAL' && !this.props.Login.loadEsign ? this.state.selectedRecordMaterialForm : this.props.Login.screenName === 'IDS_TASK' && !this.props.Login.loadEsign ? this.state.selectedRecordTaskForm : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {},\n      mandatoryFields: //  this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument :\n      //  this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask :\n      this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields : this.props.Login.screenName === 'IDS_ENFORCERESULT' ? mandatoryEnforceResult : [],\n      esign: this.props.Login.loadEsign,\n      innerPopup: this.props.Login.screenName,\n      validateEsign: this.validateEsign,\n      onSaveClick: this.props.Login.screenName === 'IDS_INSTRUMENT' ? e => onSaveMandatoryValidation(this.state.selectedRecordInstrumentForm, mandatoryFieldsInstrument, this.onSaveClick) : this.props.Login.screenName === 'IDS_MATERIAL' ? e => onSaveMandatoryValidation(this.state.selectedRecordMaterialForm, mandatoryFieldsMaterial, this.onSaveClick) : this.props.Login.showValidate ? this.calculateFormula : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? this.onSaveClickAdhocParam : this.onSaveClick,\n      showValidate: this.props.Login.screenName === 'IDS_RESULTFORMULA' ? false : this.props.Login.showValidate,\n      modalEvent: this.state.modalEvent,\n      hideSave: this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onEsignInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3950,\n          columnNumber: 29\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTENTRY' ? this.state.selectedRecord.ResultParameter && this.state.selectedRecord.ResultParameter.map((parameterResult, index) => {\n        return /*#__PURE__*/React.createElement(ResultEntryForm, {\n          index: index //  wrappedComponentRef={ref => this.resultEntryFormRef = ref}\n          //   ref={this.resultEntryFormRef}\n          //  getPredefinedData={this.props.getPredefinedData}\n          ,\n          ResultParameter: [...this.state.selectedRecord.ResultParameter],\n          predefinedValues: this.props.Login.masterData.PredefinedValues,\n          defaultPredefinedValues: this.props.Login.masterData.PredefinedValues,\n          gradeValues: this.props.Login.masterData.GradeValues || [],\n          selectedNumericData: this.props.Login.masterData.selectedNumericData,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade || [],\n          paremterResultcode: this.props.Login.masterData.paremterResultcode || [],\n          parameterResults: parameterResult //this.state.selectedRecord.ResultParameter\n          || [],\n          Login: this.props.Login,\n          handleClose: this.handleClose,\n          onSaveClick: this.onSaveClick,\n          onResultInputChange: this.onResultInputChange //onGradeEvent={this.onGradeEvent}\n          ,\n          getFormula: this.getFormula,\n          onDropTestFile: this.onDropTestFile,\n          onKeyPress: this.onKeyPress,\n          deleteAttachmentParamFile: this.deleteAttachmentParameterFile,\n          viewAdditionalInfo: this.viewAdditionalInfo,\n          needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n          intl: this.props.intl,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 3959,\n            columnNumber: 40\n          }\n        });\n      }) : this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3991,\n          columnNumber: 30\n        }\n      }, this.state.selectedRecord.selectedSpecification && /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: \"IDS_PROFILETREE\"\n        }) + ' / ' + this.props.intl.formatMessage({\n          id: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]\n        }),\n        isSearchable: true,\n        name: \"nallottedspeccode\",\n        isDisabled: false,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isClearable: false,\n        options: this.state.selectedRecord.selectedSpecification || [],\n        value: this.state.selectedRecord.nallottedspeccode && this.state.selectedRecord.nallottedspeccode || \"\",\n        defaultValue: this.state.selectedRecord.selectedSpecification && this.state.selectedRecord.selectedSpecification[\"nallottedspeccode\"] || \"\",\n        onChange: event => this.onChange(event, \"nallottedspeccode\", 1),\n        closeMenuOnSelect: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 3993,\n          columnNumber: 31\n        }\n      }), this.state.selectedRecord.selectedComponent && /*#__PURE__*/React.createElement(FormSelectSearch, {\n        formLabel: this.props.intl.formatMessage({\n          id: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]\n        }),\n        isSearchable: true,\n        name: \"ncomponentcode\",\n        isDisabled: false,\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_SELECTRECORD\"\n        }),\n        isClearable: false,\n        options: this.state.selectedRecord.selectedComponent || [],\n        value: this.state.selectedRecord.ncomponentcode && this.state.selectedRecord.ncomponentcode || \"\",\n        defaultValue: this.state.selectedRecord.selectedComponent && this.state.selectedRecord.selectedComponent[\"ncomponentcode\"] || \"\",\n        onChange: event => this.onChange(event, \"ncomponentcode\", 2),\n        closeMenuOnSelect: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4010,\n          columnNumber: 31\n        }\n      })), this.state.selectedRecord.ResultParameter && this.state.selectedRecord.ResultParameter.map((parameterResult, index) => {\n        return /*#__PURE__*/React.createElement(ResultEntryParameterForm, {\n          index: index //  wrappedComponentRef={ref => this.resultEntryFormRef = ref}\n          //   ref={this.resultEntryFormRef}\n          //  getPredefinedData={this.props.getPredefinedData}\n          ,\n          ResultParameter: [...this.state.selectedRecord.ResultParameter],\n          predefinedValues: this.props.Login.masterData.PredefinedValues,\n          defaultPredefinedValues: this.props.Login.masterData.PredefinedValues,\n          gradeValues: this.props.Login.masterData.GradeValues || [],\n          selectedNumericData: this.props.Login.masterData.selectedNumericData,\n          selectedResultGrade: this.state.selectedRecord.selectedResultGrade || [],\n          paremterResultcode: this.props.Login.masterData.paremterResultcode || [],\n          parameterResults: parameterResult //this.state.selectedRecord.ResultParameter\n          || [],\n          Login: this.props.Login,\n          handleClose: this.handleClose,\n          onSaveClick: this.onSaveClick,\n          onResultInputChange: this.onResultInputChange,\n          onSampleAdd: this.onSampleAdd //onGradeEvent={this.onGradeEvent}\n          ,\n          getFormula: this.getFormula,\n          onDropTestFile: this.onDropTestFile,\n          onKeyPress: this.onKeyPress,\n          deleteAttachmentParamFile: this.deleteAttachmentParameterFile,\n          viewAdditionalInfo: this.viewAdditionalInfo,\n          needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n          intl: this.props.intl,\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 4030,\n            columnNumber: 42\n          }\n        });\n      })) : this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? /*#__PURE__*/React.createElement(TestEditForm, {\n        methodValues: this.props.Login.masterData.MethodData,\n        sourceValues: this.props.Login.masterData.SourceData,\n        selecteRecord: this.state.selectedRecord || {},\n        onComboChange: this.onComboChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4065,\n          columnNumber: 37\n        }\n      }) : this.props.Login.screenName === 'IDS_INSTRUMENT' ? /*#__PURE__*/React.createElement(ResultEntryInstrumentForm, {\n        selectedRecordInstrumentForm: this.props.Login.selectedRecordInstrumentForm,\n        instrumentcatValue: this.props.Login.masterData.InstrumentCategory,\n        instrumentValue: this.props.Login.masterData.Instrument,\n        selecteRecord: this.state.selectedRecord || {},\n        timeZoneListData: this.props.Login.timeZoneList || [],\n        onComboChange: this.onComboChange,\n        onComboCategoryChange: this.onComboCategoryChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        onChildDataChange: this.onChildDataChange,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4074,\n          columnNumber: 41\n        }\n      }) : this.props.Login.screenName === 'IDS_MATERIAL' ? /*#__PURE__*/React.createElement(ResultEntryMaterialForm, {\n        Login: this.props.Login,\n        materialType: this.props.Login.materialType,\n        materialCategory: this.props.Login.materialCat,\n        material: this.props.Login.material,\n        materialInventory: this.props.Login.materialInventory,\n        selectedRecord: this.state.selectedRecord || {},\n        selectedRecordMaterialForm: this.state.selectedRecordMaterialForm || {},\n        onMaterialComboChange: this.onMaterialComboChange,\n        onInputOnChange: this.onInputOnChange,\n        onChildDataChange: this.onChildDataChange,\n        onDateChange: this.onDateChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        userInfo: this.props.Login.userInfo,\n        needSubSample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4090,\n          columnNumber: 45\n        }\n      }) : this.props.Login.screenName === 'IDS_TASK' ? /*#__PURE__*/React.createElement(ResultEntryTaskForm, {\n        selectedRecordTaskForm: this.state.selectedRecordTaskForm || {},\n        selectedRecord: this.state.selectedRecord || {},\n        onNumericChange: this.ontaskNumericChange,\n        onInputChange: this.ontaskInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4108,\n          columnNumber: 49\n        }\n      }) : this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryParamCommetsForm, {\n        selecteRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        handleClose: this.handleClose,\n        onSaveClick: this.onSaveClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4117,\n          columnNumber: 53\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTFORMULA' ? /*#__PURE__*/React.createElement(ResultEntryFormulaForm, {\n        DynamicFields: this.props.Login.masterData.DynamicFormulaFields // formRef={this.formRef}\n        ,\n        masterData: this.props.Login.masterData,\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        selectedForumulaInput: this.state.selectedForumulaInput || [],\n        onFormulaInputChange: this.onFormulaInputChange,\n        getAverageResult: this.getAverageResult,\n        Login: this.props.Login,\n        showValidate: this.props.Login.showValidate,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4123,\n          columnNumber: 57\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? /*#__PURE__*/React.createElement(ResultEntryImport, {\n        handleClose: this.handleClose,\n        screenName: this.props.Login.screenName,\n        onDropFile: this.onDropFile,\n        selectedImportFile: this.props.Login.masterData.selectedImportFile || {},\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4137,\n          columnNumber: 61\n        }\n      }) : this.props.Login.screenName === 'IDS_MEANPARAMETER' ? /*#__PURE__*/React.createElement(ResultEntryMean // onInputOnChange={this.onMeanInputOnChange}\n      // onComboChange={this.onMeanComboChange}\n      , {\n        screenName: this.props.Login.screenName,\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        selectAll: this.state.selectAll,\n        testMean: this.state.testMean,\n        userInfo: this.props.Login.userInfo,\n        meanTestParameterList: this.state.meanTestParameterList || [],\n        selectedTestParam: this.state.selectedTestParam,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4145,\n          columnNumber: 65\n        }\n      }) : this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS' ? /*#__PURE__*/React.createElement(ResultEntryPredefinedComments, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4158,\n          columnNumber: 65\n        }\n      }) : this.props.Login.screenName === 'IDS_ENFORCERESULT' ? /*#__PURE__*/React.createElement(ResultEntryEnforceResult, {\n        selectedRecord: this.state.selectedRecord || {},\n        GradeList: this.props.Login.masterData.GradeList && this.props.Login.masterData.GradeList,\n        onInputChange: this.onInputChange,\n        onComboChange: this.onComboChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4164,\n          columnNumber: 66\n        }\n      }) : this.props.Login.screenName === 'IDS_PREVIOUSRESULTVIEW' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4176,\n          columnNumber: 43\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4177,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(SpecificationInfo, {\n        controlMap: this.state.controlMap,\n        auditInfoFields: auditInfoFields,\n        userRoleControlRights: this.state.userRoleControlRights,\n        selectedSpecification: this.props.Login.masterData.viewdetails,\n        userInfo: this.props.Login.userInfo,\n        selectedNode: this.props.Login.masterData.selectedNode,\n        selectedRecord: this.state.filterData,\n        approvalRoleActionDetail: this.props.Login.masterData.ApprovalRoleActionDetail,\n        screenName: \"IDS_PREVIOUSRESULTVIEW\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4178,\n          columnNumber: 47\n        }\n      }))), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4192,\n          columnNumber: 43\n        }\n      }), /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"ntransactiontestcode\" //data={this.props.Login.addComponentDataList || []}\n        ,\n        data: this.props.Login.masterData.AuditModifiedComments || [],\n        detailedFieldList: this.feildsForGrid,\n        extractedColumnList: this.feildsForGrid //dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\n        // && process(this.props.Login.masterData.AuditModifiedComments, { skip: 0, take: 10 })}\n        // dataState={{ skip: 0, take: 10 }}\n        ,\n        dataResult: this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0 && process(this.props.Login.masterData.AuditModifiedComments, this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        }) //dataState={{ skip: 0, take: 10 }}\n        ,\n        dataState: this.state.dataState ? this.state.dataState : {\n          skip: 0,\n          take: 10\n        },\n        pageable: true,\n        scrollable: 'scrollable',\n        dataStateChange: this.dataResultStateChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4194,\n          columnNumber: 43\n        }\n      })) : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? /*#__PURE__*/React.createElement(AddAdhocParameter, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        adhocParamter: this.props.Login.masterData.AdhocParamter || {} //operation={this.props.operation}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 4218,\n          columnNumber: 66\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3897,\n        columnNumber: 17\n      }\n    }) : \"\", this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ? /*#__PURE__*/React.createElement(TemplateForm, {\n      templateData: this.props.Login.masterData.ChecklistData,\n      nregtypecode: parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode),\n      nregsubtypecode: parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode),\n      needSaveButton: this.props.Login.needSaveButton,\n      formRef: this.formRef,\n      onTemplateInputChange: this.onTemplateInputChange,\n      handleClose: this.closeModal,\n      onTemplateComboChange: this.onTemplateComboChange,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveCheckList,\n      Login: this.props.Login,\n      viewScreen: this.props.Login.openTemplateModal,\n      selectedRecord: this.state.selectedRecord || [],\n      onTemplateDateChange: this.onTemplateDateChange,\n      needValidation: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 4232,\n        columnNumber: 25\n      }\n    }) : \"\");\n  }\n\n  valiateCheckAll(data) {\n    let selectAll = true;\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false;\n        }\n      });\n    } else {\n      selectAll = false;\n    }\n\n    return selectAll;\n  }\n\n  // onResultInputChange = (event, index, parameter) => {\n  //     //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\n  //     let selectedRecord = this.state.selectedRecord || [];\n  //     let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\n  //     let sresult = \"\";\n  //     let sfinal = \"\";\n  //     let sresultpredefinedname= \"\";\n  //     let salertmessage = \"\";\n  //     let sresultcomment = \"\";\n  //     let value = -1;\n  //     let acceptedFile = [];\n  //     let ncalculatedresult; \n  //     let currentAlertResultCode=0;\n  //     let currentntestgrouptestpredefcode=0;\n  //     let inputData={}\n  //     if (parameter.nparametertypecode === parameterType.NUMERIC) {\n  //         if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\n  //             sresult = event.target.value;\n  //             ncalculatedresult = 4\n  //         } else {\n  //             sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\n  //             ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\n  //         }\n  //     }\n  //     if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n  //          currentAlertResultCode= event.item.ntransactionresultcode ;\n  //          currentntestgrouptestpredefcode= event.item.ntestgrouptestpredefcode ;\n  //         if (event != null) {\n  //             sresult = event.item.spredefinedname;\n  //             sresultpredefinedname = event.item.sresultpredefinedname;\n  //             sfinal=event.item.spredefinedsynonym\n  //             value = event.item.ngradecode;\n  //             salertmessage=event.item.salertmessage?event.item.salertmessage:\"\";\n  //             sresultcomment= event.item.spredefinedcomments?event.item.spredefinedcomments:\"\";\n  //             ncalculatedresult = 4; \n  //         }\n  //         else {\n  //             sresult = \"\";\n  //             sfinal = \"\";\n  //             sresultpredefinedname= \"\";\n  //             value = -1;\n  //             ncalculatedresult = 4\n  //         }\n  //         inputData={\n  //             'ntestgrouptestpredefcode':event.item.ntestgrouptestpredefcode,\n  //             'salertmessage':salertmessage,\n  //             'nneedresultentryalert':event.item.nneedresultentryalert,\n  //             'nneedsubcodedresult':event.item.nneedsubcodedresult\n  //         }\n  //         // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfo'] \n  //         // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfoUidata']  \n  //         if(event.item.nneedresultentryalert===transactionStatus.NO&&\n  //             event.item.nneedsubcodedresult===transactionStatus.NO){\n  //                 if(ResultParameter[index]['additionalInfo']){ \n  //                     ResultParameter[index]['additionalInfo']=\"\" \n  //                 } \n  //                 if(ResultParameter[index]['additionalInfoUidata']){  \n  //                     ResultParameter[index]['additionalInfoUidata']=\"\" \n  //                 } \n  //             }\n  //     }\n  //     if (parameter.nparametertypecode === parameterType.CHARACTER) {\n  //         sresult = event.target.value;\n  //         if (event.target.value.trim() === \"\")\n  //             ncalculatedresult = -1;\n  //         else\n  //             ncalculatedresult = 4;\n  //     }\n  //     if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\n  //         sresult = event[0] && event[0].name;\n  //         sfinal= event;\n  //         ncalculatedresult = 4\n  //     }\n  //     ResultParameter[index]['sresult'] = sresult\n  //     ResultParameter[index]['sfinal'] = sfinal\n  //     ResultParameter[index]['sresultpredefinedname'] = sresultpredefinedname\n  //     ResultParameter[index]['sresultcomment'] = sresultcomment\n  //     ResultParameter[index]['salertmessage'] = salertmessage\n  //     ResultParameter[index]['acceptedFile'] = acceptedFile\n  //     ResultParameter[index]['editable'] = true\n  //     ResultParameter[index]['ngradecode'] = value\n  //     ResultParameter[index]['ncalculatedresult'] = ncalculatedresult \n  //     // this.props.Login.masterData.ResultParameter = ResultParameter;\n  //     selectedRecord.ResultParameter = ResultParameter\n  //     if (parameter.nparametertypecode === parameterType.PREDEFINED) {\n  //         this.props.getPredefinedData(inputData,selectedRecord,currentAlertResultCode,this.props.Login.masterData) \n  //     }\n  //     this.setState({\n  //         selectedRecord: selectedRecord,\n  //         currentAlertResultCode,\n  //         currentntestgrouptestpredefcode\n  //     });\n  //     // const updateInfo = {\n  //     //     typeName: DEFAULT_RETURN,\n  //     //     data: { masterData: this.props.Login.masterData }\n  //     // }\n  //     // this.props.updateStore(updateInfo);\n  // }\n  updateTestMethodSource(inputData, masterData, ncontrolcode) {\n    let inputParam = {\n      inputData: { ...inputData,\n        'userinfo': this.props.Login.userInfo,\n        ncontrolcode\n      },\n      // formData: formData,\n      // isFileupload: true,\n      operation: \"createMethod\",\n      screenName: \"IDS_TESTMETHODSOURCE\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData1: inputData,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"createMethod\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateTestMethodSource(inputData, masterData);\n    }\n  }\n\n  updateParameterComments(inputData, masterData, ncontrolcode) {\n    // let inputData1 = { ...inputData, ncontrolcode }\n    const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\n    inputData = { ...inputData,\n      ndesigntemplatemappingcode: ndesigntemplatemappingcode\n    };\n    let inputParam = {\n      inputData: { ...inputData,\n        ncontrolcode,\n        'userinfo': this.props.Login.userInfo\n      },\n      operation: this.props.Login.operation,\n      screenName: \"IDS_RESULT\",\n      displayName: this.props.Login.inputParam.displayName,\n      //, postParam,\n      //inputData: inputData1,\n      masterData: masterData\n    };\n\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData: this.props.Login.masterData\n          },\n          openModal: true,\n          //screenName: \"completeaction\",\n          operation: \"updateParameterComments\"\n        }\n      };\n      this.props.updateStore(updateInfo);\n    } else {\n      this.props.updateParameterComments(inputData, masterData);\n    }\n  }\n\n  gridfillingColumn(data) {\n    //  const tempArray = [];\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE],\n        \"width\": \"200px\",\n        \"columnSize\": \"3\",\n        \"dataType\": [option[designProperties.LISTITEM]]\n      };\n    });\n    return temparray;\n  }\n\n  constructDesign(list) {\n    let newList = [];\n\n    if (list.length > 0) {\n      list.map(i => {\n        newList.push({\n          [designProperties.LABEL]: i,\n          [designProperties.VALUE]: i\n        });\n      });\n    }\n\n    return newList;\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      showTest,\n      showSample,\n      userRoleControlRights,\n      controlMap,\n      resultDataState,\n      instrumentDataState,\n      materialDataState,\n      taskDataState,\n      documentDataState,\n      resultChangeDataState,\n      testCommentDataState,\n      historyDataState,\n      sampleListColumns,\n      subSampleListColumns,\n      testListColumns,\n      SingleItem,\n      sampleListMainField,\n      subSampleListMainField,\n      testListMainField,\n      SampleGridItem,\n      SampleGridExpandableItem,\n      sampleMoreField,\n      subSampleMoreField,\n      testMoreField,\n      selectedRecord,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      REFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      DynamicSampleColumns,\n      DynamicSubSampleColumns,\n      DynamicTestColumns,\n      DynamicGridItem,\n      DynamicGridMoreField,\n      validateFormulaMandyFields,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      stateDynamicDesign,\n      activeTabIndex,\n      activeTabId,\n      sampleChangeDataState,\n      testSearchField,\n      AdhocParamter,\n      Batchvalues,\n      Worklistvalues,\n      ConfigurationFilterValues,\n      enlLink,\n      openELNSheet,\n      parameterResults,\n      isParameterInitialRender,\n      isaddSampleRender,\n      selectedRecordTaskForm,\n      isTaskInitialRender,\n      selectedRecordMaterialForm,\n      isMaterialInitialRender,\n      selectedRecordInstrumentForm,\n      isInstrumentInitialRender,\n      subSampleSkip,\n      subSampleTake,\n      sampleSearchField,\n      subsampleSearchField\n    } = this.state; //,currentAlertResultCode,currentntestgrouptestpredefcode\n\n    let bool = false;\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        bool = true;\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n    }\n\n    if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n      const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n      DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\n      DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n      DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : [];\n      DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n      DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n      SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : []; // testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\n      // testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\n\n      testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems : [];\n      testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n      testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];\n      sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\n      subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\n      this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample && DynamicSubSampleColumns.push({\n        1: {\n          'en-US': 'Specimen',\n          'ru-RU': 'Образец',\n          'tg-TG': 'Намуна'\n        },\n        2: \"scomponentname\"\n      });\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n      resultDataState = dataState;\n      instrumentDataState = dataState;\n      materialDataState = dataState;\n      taskDataState = dataState;\n      documentDataState = dataState;\n      resultChangeDataState = dataState;\n      historyDataState = dataState;\n      testCommentDataState = dataState;\n      sampleChangeDataState = dataState;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedRecordTaskForm !== previousProps.Login.selectedRecordTaskForm) {\n      bool = true;\n      selectedRecordTaskForm = this.props.Login.selectedRecordTaskForm;\n    }\n\n    if (this.props.Login.selectedRecordMaterialForm !== previousProps.Login.selectedRecordMaterialForm) {\n      bool = true;\n      selectedRecordMaterialForm = this.props.Login.selectedRecordMaterialForm;\n    }\n\n    if (this.props.Login.selectedRecordInstrumentForm !== previousProps.Login.selectedRecordInstrumentForm) {\n      bool = true;\n      selectedRecordInstrumentForm = this.props.Login.selectedRecordInstrumentForm;\n    }\n\n    if (this.props.Login.parameterResults !== previousProps.Login.parameterResults) {\n      bool = true;\n      parameterResults = this.props.Login.parameterResults;\n    }\n\n    if (this.props.Login.isTaskInitialRender !== previousProps.Login.isTaskInitialRender) {\n      bool = true;\n      isTaskInitialRender = this.props.Login.isTaskInitialRender;\n    }\n\n    if (this.props.Login.isParameterInitialRender !== previousProps.Login.isParameterInitialRender) {\n      bool = true;\n      isParameterInitialRender = this.props.Login.isParameterInitialRender;\n    }\n\n    if (this.props.Login.isaddSampleRender !== previousProps.Login.isaddSampleRender) {\n      bool = true;\n      isaddSampleRender = this.props.Login.isaddSampleRender;\n    } // if (this.props.Login.currentAlertResultCode !== previousProps.Login.currentAlertResultCode) {\n    //     bool = true;\n    //     currentAlertResultCode = this.props.Login.currentAlertResultCode;\n    // }\n    // if (this.props.Login.currentntestgrouptestpredefcode !== previousProps.Login.currentntestgrouptestpredefcode) {\n    //     bool = true;\n    //     currentntestgrouptestpredefcode = this.props.Login.currentntestgrouptestpredefcode;\n    // }\n\n\n    if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\n      bool = true;\n      validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\n      Batchvalues = constructOptionList(this.props.Login.masterData.Batchvalues || [], 'nbatchmastercode', 'sbatcharno', 'ascending', 'nbatchmastercode', false);\n      Worklistvalues = constructOptionList(this.props.Login.masterData.Worklistvalues || [], 'nworklistcode', 'sworklistno', 'ascending', 'nworklistcode', false);\n      ConfigurationFilterValues = constructOptionList(this.props.Login.masterData.ConfigurationFilterValues || [], 'nconfigfiltercode', 'sfiltername', 'ascending', 'nconfigfiltercode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false); // AdhocParamter = constructOptionList(this.props.Login.masterData.AdhocParamter || [], 'ntestparametercode', 'sparametersynonym',\n      //     'ascending', 'ntestparametercode', false);\n\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      subSampleSkip = this.props.Login.subSampleSkip === undefined ? subSampleSkip : this.props.Login.subSampleSkip;\n      subSampleTake = this.props.Login.subSampleTake || subSampleTake;\n\n      if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\n        resultDataState = this.props.Login.resultDataState;\n      }\n\n      if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\n        instrumentDataState = this.props.Login.instrumentDataState;\n      }\n\n      if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\n        taskDataState = this.props.Login.taskDataState;\n      }\n\n      if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\n        resultChangeDataState = this.props.Login.resultChangeDataState;\n      }\n\n      if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\n        historyDataState = this.props.Login.historyDataState;\n      }\n\n      if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\n        testCommentDataState = this.props.Login.testCommentDataState;\n      }\n\n      if (this.props.Login.sampleChangeDataState && this.props.Login.sampleChangeDataState !== previousProps.Login.sampleChangeDataState) {\n        sampleChangeDataState = this.props.Login.sampleChangeDataState;\n      } // if (this.props.Login.enlLink !== previousProps.Login.enlLink) {\n      //     bool = true;\n      //     enlLink = this.props.Login.enlLink;\n      //     openELNSheet=true;\n      //     }\n\n\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew; // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: {masterData: this.props.Login.masterData,showTest,showSample }\n      // }\n      // this.props.updateStore(updateInfo);\n\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      REFilterStatus = REFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      Batchvalues = Batchvalues.get(\"OptionList\");\n      Worklistvalues = Worklistvalues.get(\"OptionList\");\n      ConfigurationFilterValues = ConfigurationFilterValues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\"); // AdhocParamter=AdhocParamter.get(\"OptionList\")\n    }\n\n    if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\n      activeTabIndex = this.props.Login.activeTabIndex;\n      activeTabId = this.props.Login.activeTabId;\n      bool = true;\n    }\n\n    if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\n      const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\", \"sregtemplatename\", undefined, undefined, false);\n      stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\");\n    }\n\n    if (bool) {\n      this.setState({\n        showTest,\n        showSample,\n        userRoleControlRights,\n        controlMap,\n        resultDataState,\n        instrumentDataState,\n        materialDataState,\n        taskDataState,\n        documentDataState,\n        resultChangeDataState,\n        testCommentDataState,\n        historyDataState,\n        sampleListColumns,\n        subSampleListColumns,\n        testListColumns,\n        SingleItem,\n        sampleListMainField,\n        subSampleListMainField,\n        testListMainField,\n        SampleGridItem,\n        SampleGridExpandableItem,\n        sampleMoreField,\n        subSampleMoreField,\n        testMoreField,\n        selectedRecord,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        REFilterStatus,\n        REJobStatus,\n        Testvalues,\n        Batchvalues,\n        Worklistvalues,\n        ConfigurationFilterValues,\n        ApprovalConfigVersion,\n        validateFormulaMandyFields,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        DynamicTestColumns,\n        DynamicGridItem,\n        DynamicGridMoreField,\n        stateDynamicDesign,\n        activeTabIndex,\n        activeTabId,\n        sampleChangeDataState,\n        testSearchField,\n        AdhocParamter,\n        parameterResults,\n        isParameterInitialRender,\n        isaddSampleRender,\n        selectedRecordTaskForm,\n        isTaskInitialRender,\n        selectedRecordMaterialForm,\n        isMaterialInitialRender,\n        selectedRecordInstrumentForm,\n        isInstrumentInitialRender //,currentAlertResultCode,currentntestgrouptestpredefcode\n        ,\n        subSampleSkip,\n        subSampleTake,\n        sampleSearchField,\n        subsampleSearchField\n      });\n    }\n\n    if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\n      this.setState({\n        meanTestParameterList: this.props.Login.meanTestParameterList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    } // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n\n\n    return null;\n  }\n\n}\n\nconst mapStatetoProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStatetoProps, {\n  crudMaster,\n  updateStore,\n  getsubSampleREDetail,\n  getTestREDetail,\n  getTestChildTabREDetail,\n  resultGetModule,\n  completeTest,\n  testMethodSourceEdit,\n  addREInstrument,\n  addREMaterial,\n  deleteInstrumentRecord,\n  fetchInstrumentRecord,\n  deleteTaskRecord,\n  fetchTaskRecord,\n  parameterRecord,\n  checkListRecord,\n  onSaveCheckList,\n  defaultTest,\n  getFormula,\n  getRERegistrationType,\n  getRERegistrationSubType,\n  fetchMaterialRecord,\n  getREApprovalConfigVersion,\n  getResultEntryDetails,\n  calculateFormula,\n  getREFilterStatus,\n  getREFilterTestData,\n  getREJobStatus,\n  getSampleChildTabREDetail,\n  viewAttachment,\n  getAttachmentCombo,\n  deleteAttachment,\n  resultImportFile,\n  validateEsignCredentialComplete,\n  getCommentsCombo,\n  updateTestMethodSource,\n  filterTransactionList,\n  validateEsignCredential,\n  updateParameterComments,\n  previewSampleReport,\n  getMeanCalculationTestParameter,\n  getREMaterialCategoryByType,\n  getREMaterialByCategory,\n  getREMaterialInvertoryByMaterial,\n  getAvailableMaterialQuantity,\n  testStart,\n  getSubSampleChildTabDetail,\n  getSampleChildTabDetail,\n  getREFilterTemplate,\n  getAverageResult,\n  getREMaterialComboGet //,deleteResultUsedMaterial\n  ,\n  getPredefinedData,\n  getELNTestValidation,\n  getConfigurationFilter,\n  getTestBasedBatchWorklist,\n  addREAdhocParamter,\n  createAdhocParamter,\n  enforceResult,\n  ResultEntryViewPatientDetails,\n  resultEntryGetParameter,\n  resultEntryGetSpec,\n  resultEntryGetComponent\n})(injectIntl(ResultEntry));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntry.jsx"],"names":["React","Component","faPlay","faAddressBook","faCheckCircle","faEye","faPencilRuler","faFileImport","faSync","faBorderAll","faLink","faComment","faComments","faPaperclip","faCommentDots","faChevronRight","faMicroscope","faFlask","faHistory","faBookMedical","faNotesMedical","Card","Col","Row","Nav","Button","Modal","FormattedMessage","injectIntl","connect","Axios","ListWrapper","FontAwesomeIcon","faFileInvoice","SplitterLayout","ContentPanel","PortalModal","Iframe","ReactTooltip","crudMaster","updateStore","getsubSampleREDetail","getTestREDetail","getTestChildTabREDetail","resultGetModule","fetchMaterialRecord","completeTest","testMethodSourceEdit","addREInstrument","addREMaterial","deleteInstrumentRecord","fetchInstrumentRecord","deleteTaskRecord","fetchTaskRecord","parameterRecord","checkListRecord","onSaveCheckList","defaultTest","getFormula","getRERegistrationType","getRERegistrationSubType","getREApprovalConfigVersion","getResultEntryDetails","calculateFormula","getREFilterStatus","getREFilterTestData","getREJobStatus","viewAttachment","validateEsignCredentialComplete","getAttachmentCombo","deleteAttachment","getCommentsCombo","updateTestMethodSource","resultImportFile","filterTransactionList","validateEsignCredential","getSampleChildTabREDetail","updateParameterComments","getREMaterialCategoryByType","getREMaterialByCategory","getREMaterialInvertoryByMaterial","previewSampleReport","getMeanCalculationTestParameter","getAvailableMaterialQuantity","testStart","getSubSampleChildTabDetail","getSampleChildTabDetail","getREFilterTemplate","getAverageResult","getREMaterialComboGet","getPredefinedData","getELNTestValidation","getConfigurationFilter","getTestBasedBatchWorklist","addREAdhocParamter","createAdhocParamter","enforceResult","ResultEntryViewPatientDetails","resultEntryGetParameter","resultEntryGetSpec","resultEntryGetComponent","sortData","create_UUID","getControlMap","listDataFromDynamicArray","formatInputDate","validateTwoDigitDate","showEsign","constructOptionList","deleteAttachmentDropZone","Lims_JSON_stringify","CF_encryptionData","onSaveMandatoryValidation","replaceBackSlash","rsapi","toast","SampleType","parameterType","grade","transactionStatus","RegistrationType","RegistrationSubType","FORMULAFIELDTYPE","designProperties","SideBarSeqno","SideBarTabIndex","ProductList","CustomTabs","ResultEntryResultsTab","DEFAULT_RETURN","SlideOutModal","Esign","BreadcrumbComponent","ResultEntryFilter","ResultEntryInstrumentForm","ResultEntryForm","ResultEntryParameterForm","TestEditForm","SampleInfoView","SampleInfoGrid","ApprovalInstrumentTab","ResultEntryTaskTab","ResultEntryTaskForm","ResultEntryParamCommetsForm","TemplateForm","templateChangeHandler","numberConversion","numericGrade","PerfectScrollbar","ResultEntryFormulaForm","SampleApprovalHistory","ResultChangeHistoryTab","Attachments","Comments","onSaveSampleAttachment","onSaveTestAttachment","onSaveSubSampleAttachment","onSaveSampleComments","onSaveTestComments","onSaveSubSampleComments","ResultEntryImport","getSameRecordFromTwoArrays","convertDateValuetoString","rearrangeDateFormat","ResultEntryMean","ScrollBar","ResultEntryMaterialForm","AddAdhocParameter","ResultUsedMaterial","FontIconWrap","CustomSwitch","TransactionListMasterJsonView","ModalShow","DataGrid","process","ResultEntryPredefinedComments","ResultEntryEnforceResult","SpecificationInfo","FormSelectSearch","ResultEntry","constructor","props","paneSizeChange","d","setState","splitChangeWidthPercentage","event","file","fieldName","selectedRecord","Login","masterData","selectedImportFile","updateInfo","typeName","data","deleteAttachmentParameterFile","index","selectedRecordParameter","state","ResultParameter","closeModalShow","showAlertGrid","forEach","object","onTabChangeRulesEngine","tabProps","activeTabName","handleExpandChange","mapobject","childListMap","Map","keylst","Object","keys","map","key","set","parseInt","values","availableTestFilter","lstntransactionsamplecode","RegistrationTestAlert","boolean1","includes","ntransactiontestcode","toString","unavailableTestFilter","NewTestGroupTestAlert","dataStateAvailabletestAlert","dataStateavailabletest","dataState","dataStateUnAvailabletestAlert","dataStateunavailabletest","tabAlertRulesEngine","tabMap","RESelectedTest","filter","length","skip","take","controlMap","userRoleControlRights","realRegSubTypeValue","nneedsubsample","closeModal","loadEsign","openModal","openTemplateModal","screenName","operation","loadFile","selectedId","showValidate","validateFormulaMandyFields","onFilterComboChange","fieldname","inputData","dateObj","toDate","userInfo","realDesignTemplateMapping","realApproveConfigVersion","realApprovalConfigVersionList","realDesignTemplateMappingList","realFilterStatusList","realRegistrationSubTypeList","realRegistrationTypeList","realTestvaluesList","nflag","fromdate","fromDate","todate","nsampletypecode","defaultSampleType","nregtypecode","defaultRegistrationType","nregsubtypecode","defaultRegistrationSubType","transcode","defaultFilterStatus","ntransactionstatus","REFilterStatus","item","join","String","userinfo","obj","value","inputParamData","napprovalversioncode","ApprovalConfigVersion","napprovalconfigversioncode","ntranscode","ndesigntemplatemappingcode","DesignTemplateMappingValue","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","defaultTestvalues","ntestcode","defaultConfigurationFilterValue","realdefaultConfigurationFilterValue","nconfigfiltercode","defaultWorklistvalue","defaultBatchvalue","OnDateConverstion","date","month","getMonth","day","getDate","getFullYear","onReload","realFromDate","realToDate","realSampleTypeValue","realRegTypeValue","realFilterStatusValue","realTestcodeValue","realWorklistCodeValue","activeTestKey","showTest","showSample","checkBoxOperation","nworlistcode","nworklistcode","inpuParamData","refs","searchSampleRef","searchSubSampleRef","searchTestRef","resultDataState","instrumentDataState","materialDataState","taskDataState","documentDataState","resultChangeDataState","testCommentDataState","historyDataState","warn","intl","formatMessage","id","onDesignTemplateChange","labelname","onREFilterSubmit","realBatchCodeValue","DesignTemplateMapping","realConfigurationFilterValuesList","ConfigurationFilterValues","nneedtemplatebasedflow","nbatchmastercode","undefined","onSecondaryPaneSizeChange","e","val","onComboCategoryChange","uRL","ninstrumentcatcode","ncalibrationRequired","ncalibrationreq","post","then","response","TagInstrument","Instrument","TagListInstrument","get","ninstrumentcode","catch","error","status","message","testRETabDetail","testTabMap","test","testskip","testtake","testList","RE_TEST","slice","meanControlId","has","ncontrolcode","selectedTestList","genericLabel","inputParam","dataStateChange","editpredefinedcomments","primaryKeyField","ncontrolCode","deleteMaterialRecord","addResultEntryTask","onAttachmentSaveClick","RegistrationTestAttachment","VALUE","methodUrl","esignRights","masterList","onCommentsSaveClick","RegistrationTestComment","ResultChangeHistory","sampleDataStateChange","activeSampleKey","sampleHistoryDataState","sampleGridDataState","sampleGridDataStateChange","sampleChangeDataState","dataResultStateChange","subsampleTabDetail","ntransactionsamplecode","RESelectedSubSample","sample","subsampleList","RE_SUBSAMPLE","subsampleskip","subsampletake","selectedSubSampleList","RegistrationSampleAttachment","attachmentskip","attachmenttake","settings","RegistrationSampleComment","subSampleCommentDataState","subSampledataStateChange","onSampleTabChange","activeSampleTab","RESelectedSample","npreregno","activeTabIndex","onTestTabChange","preregno","openClosePortal","openELNSheet","enlLink","integrationSettings","onSubSampleTabChange","activeSubSampleTab","selectedSubSample","subSampleAttachmentDataState","viewSample","viewdetails","popUptestDataState","adhocTestParameter","ntestgrouptestcode","adhocId","displayName","nformcode","screenData","classUrl","nresultusedmaterialcode","selectedRecordTaskForm","stestsynonym","isTaskInitialRender","addResultUsedTaskId","parameterData","modalEvent","currentTarget","selectedForumulaInput","senableAverage","svalues","soldvalue","lstDynamicFields","dynamicfields","push","selectedResultGrade","resultImport","closeFilter","inputValues","realSampleTypeList","SampleTypeValue","RegTypeValue","RegSubTypeValue","FilterStatusValue","ApprovalVersionValue","JobStatusValue","Testvalues","Batchvalues","realBatchvaluesList","BatchValue","realBatchvalue","Worklistvalues","RealWorklistvaluesList","WorklistValue","realWorklistvalue","TestValue","ConfigurationFilterValue","Date","showFilter","handlePageChange","handleSubSamplePageChange","subSampleSkip","subSampleTake","handleTestPageChange","sampletakeDataState","verticalPaneSizeChange","enableAutoHeight","initialVerticalWidth","changeSplitterOption","sideNavDetail","searchedTests","editTestCommentsId","activeTestTab","resultTabDetail","onTabChange","attachmentTabDetail","commentTabDetail","SingleItem","gridfillingColumn","DynamicGridItem","DynamicGridMoreField","resultTabMap","TEST","attachmentTabMap","SUBSAMPLE","SAMPLE","RegistrationAttachment","testDataStateChange","testAttachmentDataState","commentTabMap","RegistrationComment","onInputSwitchOnChange","target","name","enablePropertyPopup","enableAutoClick","changePropertyViewClose","activeTabId","changePropertyView","window","innerWidth","tabSequence","tabseqno","mandatoryFieldsForAdditionalInfo","mandatoryFieldsAdditionalInfo","showMultiSelectCombo","defaultActions","testChildGetREParam","setDefaultId","TestList","splice","acceptTestList","completeActions","completeResultId","validation","postParamList","basedrulesengine","testStartActions","progressTimerStart","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","onEsignInputOnChange","type","checked","YES","NO","onChildDataChange","childData","selectedRecordMaterialForm","isMaterialInitialRender","selectedRecordInstrumentForm","isInstrumentInitialRender","onInputOnChange","ntestgroupmaterial","onSaveFileClick","saveType","formRef","acceptedFile","sfilename","formData","FormData","append","JSON","stringify","x","onSaveClickAdhocParam","testParameter","nparamtercode","ntestgroupparamtercode","ntestparametercode","adhocpreregno","adhoctransactiontestcode","action","onDropFile","onFormulaInputChange","fields","selectedMandatory","dynamicformulafields","ndynamicformulafieldcode","INTEGER","replace","formulainput","sparameter","sdescription","onTemplateInputChange","control","onTemplateComboChange","comboData","onTemplateDateChange","dateData","handleDateChange","dateName","dateValue","viewAdditionalInfo","currentAlertResultCode","additionalInfo","additionalInfoView","onModalSave","currentntestgrouptestpredefcode","bool","some","Parameter","ntestgrouptestpredefsubcode","substring","onskiprule","startDate","endDate","ontaskInputChange","Data","ontaskNumericChange","numericData","numericName","onInputChange","onNumericChange","onDateChange","headerSelectionChange","syntheticEvent","meanTestParameterList","selectedMeanTestParam","selected","ntransactionresultcode","sresult","selectedTestParam","selectedTestParamMean","size","testMean","selectAll","selectionChange","dataItem","delete","valiateCheckAll","onMeanComboChange","comboName","onMaterialComboChange","nmaterialcatcode","needSectionwise","nsectioncode","onComboChange","onChange","caseNo","selectedsubcode","onGradeEvent","parameter","nparametertypecode","NUMERIC","ngradecode","parseFloat","nroundingdigits","PREDEFINED","CHARACTER","trim","saveParam","isTestComment","sampleList","searchedSubSample","acceptList","searchedSample","RE_SAMPLE","selectedSampleList","selectedMaster","onKeyPress","paremterResultcode","keyCode","i","form","elements","focus","preventDefault","onResultInputChange","parameterResults","isParameterInitialRender","onSampleAdd","isaddSampleRender","onSaveMean","resultParameter","selectedTestParameterMean","nroundingdigit","nuserrole","nusercode","isFileupload","onSavePredefinedComments","stransactiontestcode","onSaveEnforceResult","sfinal","senforceresultcomment","onSaveClick","neditable","resultParameters","resultData","results","editable","ncalculatedresult","hasOwnProperty","sresultcomment","salertmessage","additionalInfoUidata","ntestgrouptestpredefcode","FIO","splittedFileName","split","fileExtension","uniquefilename","ssystemfilename","nfilesize","loading","tests","ntestgrouptestparametercode","sampleid","ssampleid","nallottedspeccode","ncomponentcode","ntype","nmethodcode","nsourcecode","ResultUsedInstrument","nresultusedinstrumentcode","dfromdate","dtodate","stzfromdate","ntzfromdate","stztodate","ntztodate","transactiontestcode","nmaterialcode","nmaterialinventorycode","susedquantity","savailablequantity","nmaterialtypecode","nmaterialcategorycode","ninventorycode","jsondata","sarno","ssamplearno","smaterialcatname","smaterialname","sinventoryid","nqtyused","scarriergas","smobilephase","sremarks","susername","ssectionname","MaterialInventoryTrans","IDS_INVENTORYID","smaterialtypename","sanalysistime","smisctime","spreanalysistime","spreparationtime","scomments","ResultUsedTasks","nresultusedtaskcode","sanalyst","staskprocedure","taskArry","info","lstResultCheckList","editedQB","qbcode","ResultCheckList","createRef","childRef","masterStatus","showSubSample","tabPane","sampleListColumns","subSampleListColumns","testListColumns","TableExpandableItem","SampleGridItem","SampleGridExpandableItem","sampleListMainField","subSampleListMainField","testListMainField","testMoreField","enablePin","sampleSearchField","subsampleSearchField","testSearchField","showRESampleInfo","showRETestList","showRESubSampleinfo","sampleTabDetail","componentDidMount","parentHeight","height","clientHeight","firstPane","getActiveTestURL","url","shouldComponentUpdate","nextProps","nextState","parameterResults1","render","auditInfoFields","slanguagetypecode","feildsForGrid","sampleListRE","subSampleListRE","testListRE","subSampleGetREParam","testGetREParam","samplePrintHistoryDataState","filterSampleParam","inputListName","selectedObject","fetchUrl","childRefs","ref","childFilteredListName","fecthInputObject","searchFieldList","changeList","filterSubSampleParam","filterTestParam","filteredListName","clearFilter","searchRef","updatedListname","unchangeList","breadCrumbData","breadCrumbFrom","breadCrumbto","sregtypename","sregsubtypename","sfilterstatus","sworklistno","sbatcharno","testStartId","resultEnterId","editSourceMethodId","addResultUsedInstrumentId","addResultUsedMaterailId","patientPreviousResultView","identicalResultEnterId","mandatoryFieldsInstrument","mandatoryFieldsMaterial","mandatoryFieldsTask","mandatoryFieldsTestMethodSource","mandatoryEnforceResult","mandatoryFieldsParameter","reportPreviewId","testDesign","borderBottom","display","searchedTest","setting","selectedFilter","title","controlname","hidden","indexOf","onClick","objectName","elnUserInfo","elnSite","dataplace","nneedtestinitiate","mainDesign","marginTop","DynamicSubSampleColumns","subSampleMoreField","DynamicSampleColumns","sampleMoreField","REJobStatus","stateDynamicDesign","PLASMA_POOL","CLINICALTYPE","background","width","propertyPopupWidth","fullviewExpand","fullviewCollapse","showAlertForPredefined","onlyAlertMsgAvailable","testgrouptestpredefsubresultOptions","parameterResult","PredefinedValues","GradeValues","selectedNumericData","handleClose","onDropTestFile","selectedSpecification","selectedComponent","MethodData","SourceData","InstrumentCategory","timeZoneList","materialType","materialCat","material","materialInventory","DynamicFormulaFields","GradeList","selectedNode","filterData","ApprovalRoleActionDetail","AuditModifiedComments","AdhocParamter","ChecklistData","needSaveButton","temparray","option","LABEL","LISTITEM","constructDesign","list","newList","componentDidUpdate","previousProps","DynamicTestColumns","DynamicDesign","dynamicColumn","parse","samplelistitem","subsamplelistitem","testlistitem","samplegriditem","samplegridmoreitem","sampledisplayfields","testListFields","testlistmoreitems","testsearchfields","samplesearchfields","subsamplesearchfields","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","findIndex","DesignTemplateMappingMap","componentWillUnmount","getDerivedStateFromProps","errorCode","mapStatetoProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { faPlay, faAddressBook, faCheckCircle, faEye, faPencilRuler, faFileImport, faSync, faBorderAll, faLink, faComment, faComments, faPaperclip, faCommentDots, faChevronRight, faMicroscope, faFlask, faHistory,faBookMedical,faNotesMedical} from '@fortawesome/free-solid-svg-icons';\r\nimport { Card, Col, Row, Nav, Button, Modal } from 'react-bootstrap';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { connect } from 'react-redux';\r\nimport Axios from \"axios\";\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileInvoice } from '@fortawesome/free-solid-svg-icons';\r\nimport SplitterLayout from \"react-splitter-layout\";\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport PortalModal from '../../PortalModal';\r\nimport Iframe from 'react-iframe';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nimport {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule, fetchMaterialRecord,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord,\r\n    fetchTaskRecord, parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus,\r\n    viewAttachment, validateEsignCredentialComplete, getAttachmentCombo, deleteAttachment, getCommentsCombo, updateTestMethodSource, resultImportFile,\r\n    filterTransactionList, validateEsignCredential, getSampleChildTabREDetail, updateParameterComments, getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial,\r\n    previewSampleReport, getMeanCalculationTestParameter, getAvailableMaterialQuantity, testStart, getSubSampleChildTabDetail, getSampleChildTabDetail,\r\n    getREFilterTemplate, getAverageResult,getREMaterialComboGet ,getPredefinedData\r\n    ,getELNTestValidation//,deleteResultUsedMaterial\r\n   \r\n    ,getConfigurationFilter,getTestBasedBatchWorklist,\r\n    addREAdhocParamter,createAdhocParamter\r\n   // ,getPredefinedData,getConfigurationFilter,getTestBasedBatchWorklist//,deleteResultUsedMaterial\r\n         ,enforceResult//,deleteResultUsedMaterial\r\n         ,ResultEntryViewPatientDetails,resultEntryGetParameter,resultEntryGetSpec,resultEntryGetComponent} from '../../actions';\r\n//import { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone,CF_encryptionData } from '../../components/CommonScript';\r\nimport { sortData, create_UUID, getControlMap, listDataFromDynamicArray, formatInputDate, validateTwoDigitDate, showEsign, constructOptionList, deleteAttachmentDropZone, Lims_JSON_stringify,CF_encryptionData, onSaveMandatoryValidation, replaceBackSlash } from '../../components/CommonScript';\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport { SampleType,parameterType, grade, transactionStatus, RegistrationType, RegistrationSubType, FORMULAFIELDTYPE, designProperties, SideBarSeqno, SideBarTabIndex } from '../../components/Enumeration';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomTabs from '../../components/custom-tabs/custom-tabs.component'; \r\n\r\nimport ResultEntryResultsTab from './ResultEntryResultsTab';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ResultEntryFilter from './ResultEntryFilter';\r\nimport ResultEntryInstrumentForm from './ResultEntryInstrumentForm';\r\nimport ResultEntryForm from './ResultEntryForm';\r\nimport ResultEntryParameterForm from './ResultEntryParameterForm';\r\nimport TestEditForm from './TestEditForm';\r\nimport SampleInfoView from '../approval/SampleInfoView';\r\nimport SampleInfoGrid from '../approval/SampleInfoGrid';\r\nimport ApprovalInstrumentTab from '../approval/ApprovalInstrumentTab';\r\nimport ResultEntryTaskTab from './ResultEntryTaskTab';\r\nimport ResultEntryTaskForm from './ResultEntryTaskForm';\r\nimport ResultEntryParamCommetsForm from './ResultEntryParamCommetsForm';\r\nimport TemplateForm from '../checklist/checklist/TemplateForm';\r\nimport { templateChangeHandler } from '../checklist/checklist/checklistMethods';\r\nimport { numberConversion, numericGrade } from './ResultEntryValidation';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport ResultEntryFormulaForm from './ResultEntryFormulaForm';\r\nimport SampleApprovalHistory from '../approval/SampleApprovalHistory';\r\nimport ResultChangeHistoryTab from '../approval/ResultChangeHistoryTab';\r\nimport Attachments from '../attachmentscomments/attachments/Attachments';\r\nimport Comments from '../attachmentscomments/comments/Comments';\r\nimport { onSaveSampleAttachment, onSaveTestAttachment, onSaveSubSampleAttachment } from '../attachmentscomments/attachments/AttachmentFunctions';\r\nimport { onSaveSampleComments, onSaveTestComments, onSaveSubSampleComments } from '../attachmentscomments/comments/CommentFunctions';\r\nimport ResultEntryImport from './ResultEntryImport';\r\nimport { getSameRecordFromTwoArrays, convertDateValuetoString, rearrangeDateFormat } from '../../components/CommonScript'\r\n// import ReactTooltip from 'react-tooltip';\r\nimport ResultEntryMean from './ResultEntryMean';\r\nimport ScrollBar from 'react-perfect-scrollbar';\r\nimport ResultEntryMaterialForm from './ResultEntryMaterialForm';\r\nimport AddAdhocParameter from './AddAdhocParameter';\r\nimport ResultUsedMaterial from './UsedMaterial';\r\nimport { FontIconWrap } from '../../components/data-grid/data-grid.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport TransactionListMasterJsonView from '../../components/TransactionListMasterJsonView';\r\nimport ModalShow from '../../components/ModalShow';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport ResultEntryPredefinedComments from './ResultEntryPredefinedComments';\r\nimport ResultEntryEnforceResult from './ResultEntryEnforceResult';\r\nimport SpecificationInfo from '../testgroup/SpecificationInfo';\r\nimport fullviewExpand from '../../assets/image/fullview-expand.svg';\r\nimport fullviewCollapse from '../../assets/image/fullview-collapse.svg';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nclass ResultEntry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.searchSampleRef = React.createRef();\r\n        this.searchSubSampleRef = React.createRef();\r\n        this.searchTestRef = React.createRef(); \r\n        this.childRef = React.createRef();\r\n        this.state = {\r\n\r\n            subSampleCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            subSampleAttachmentDataState: {\r\n                skip: 0, take: this.props.Login.settings ?\r\n                    parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'groupingField' }] \r\n            },\r\n            sampleGridDataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            resultDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            instrumentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            materialDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            taskDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            documentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            resultChangeDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }]\r\n            },\r\n            testCommentDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            historyDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'stestsynonym' }] \r\n            },\r\n            sampleHistoryDataState: {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5//, group: [{ field: 'sarno' }] \r\n            },\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            masterStatus: \"\",\r\n            error: \"\",\r\n            operation: \"\",\r\n            showSample: false,\r\n            showSubSample: false,\r\n            showTest: true,\r\n            tabPane: 0,\r\n            subsampleskip: 0,\r\n            sampleListColumns: [],\r\n            subSampleListColumns: [],\r\n            testListColumns: [],\r\n            TableExpandableItem: [],\r\n            SingleItem: [],\r\n            SampleGridItem: [],\r\n            SampleGridExpandableItem: [],\r\n            sampleListMainField: [],\r\n            subSampleListMainField: [],\r\n            testListMainField: [],\r\n            testMoreField: [],\r\n            selectedRecord: {},\r\n            selectedRecordMaterialForm:{},\r\n            selectedRecordInstrumentForm:{},\r\n            selectedRecordTaskForm:{},\r\n            validateFormulaMandyFields: [],\r\n            splitChangeWidthPercentage: 22,\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            subSampleSkip: 0,\r\n            subSampleTake: this.props.Login.settings && this.props.Login.settings[12],\r\n            // subsampletake: this.props.Login.settings\r\n            // && this.props.Login.settings[12] ? this.props.Login.settings[12] : 10,\r\n            testskip: 0,\r\n            testtake: this.props.Login.settings && this.props.Login.settings[12],\r\n            initialVerticalWidth: \"57vh\",\r\n            enablePin: false,\r\n            openELNSheet: false,\r\n            enlLink:\"\",\r\n            sampleSearchField: [],\r\n            subsampleSearchField: [],\r\n            testSearchField: [],\r\n        }\r\n        //openELNSheet: false\r\n        this.formRef = React.createRef();\r\n        //this.onSecondaryPaneSizeChange = this.onSecondaryPaneSizeChange.bind(this);\r\n    }\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.props.Login.masterData.selectedImportFile\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: { ...this.props.Login.masterData, selectedImportFile: selectedRecord } }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    deleteAttachmentParameterFile = (event,file, fieldName,index) => {\r\n        let selectedRecordParameter = this.state.selectedRecord.ResultParameter[index];\r\n       \r\n        selectedRecordParameter[fieldName] = deleteAttachmentDropZone(selectedRecordParameter[fieldName],\r\n            file)\r\n        let selectedRecord =  this.state.selectedRecord\r\n        selectedRecord['ResultParameter'][index]['editable']= true;\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { masterData: { ...this.props.Login.masterData, ResultParameter.editable\r\n        //         //selectedImportFile: selectedRecord \r\n        //     } }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({\r\n            selectedRecord : selectedRecord//fileToDelete:file.name \r\n        });\r\n\r\n    }\r\n    closeModalShow = () => {\r\n        let showAlertGrid = this.props.Login.showAlertGrid;\r\n        let  selectedRecord=this.props.Login.selectedRecord;\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['RESelectedTest'].forEach(object => {\r\n            object['expanded']&&delete object['expanded'];\r\n          });\r\n          selectedRecord['ntestgrouptestpredefsubcode'] &&delete selectedRecord['ntestgrouptestpredefsubcode'] \r\n        showAlertGrid = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showAlertGrid ,masterData,selectedRecord}\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onTabChangeRulesEngine = (tabProps) => {\r\n        let masterData = this.props.Login.masterData && this.props.Login.masterData\r\n        masterData['RESelectedTest'].forEach(object => {\r\n            object['expanded']&&delete object['expanded'];\r\n          });\r\n        masterData['activeTabName'] = tabProps.activeTabName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleExpandChange = (mapobject) => {  \r\n        let childListMap =  new Map(); \r\n        let keylst = Object.keys(mapobject); \r\n        keylst.map((key) => {\r\n            childListMap.set(parseInt(key),\r\n            Object.values(mapobject[key]));\r\n        })\r\n        this.setState({ childListMap })\r\n    }\r\n    availableTestFilter = (data) => { \r\n        let lstntransactionsamplecode=[];\r\n        if (this.props.Login.RegistrationTestAlert) {\r\n            let keylst = Object.keys(this.props.Login.RegistrationTestAlert); \r\n            // keylst.map(x=>{ \r\n            //    this.props.Login.RegistrationTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \r\n            // }); \r\n           // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\r\n            let boolean1 = keylst.includes(data.ntransactiontestcode.toString())\r\n          //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\r\n            if (boolean1//&&boolean2\r\n                ) {\r\n                return data;\r\n            }\r\n        } \r\n    } \r\n    unavailableTestFilter = (data) => { \r\n        let lstntransactionsamplecode=[];\r\n        if (this.props.Login.NewTestGroupTestAlert) {\r\n            let keylst = Object.keys(this.props.Login.NewTestGroupTestAlert); \r\n            // keylst.map(x=>{ \r\n            //     this.props.Login.NewTestGroupTestAlert[x].map(y=> lstntransactionsamplecode.push(y['ntransactionsamplecode'])) \r\n            // });\r\n           // let boolean1 = keylst.includes(data.ntestgrouptestcode.toString())\r\n            let boolean1 = keylst.includes(data.ntransactiontestcode.toString())\r\n          //  let boolean2 = lstntransactionsamplecode.includes(data.ntransactionsamplecode)\r\n            if (boolean1//&&boolean2\r\n                ) {\r\n                return data;\r\n            }\r\n        } \r\n    } \r\n    dataStateAvailabletestAlert = (event) => { \r\n            this.setState({ \r\n                dataStateavailabletest: event.dataState\r\n            }); \r\n    }\r\n    dataStateUnAvailabletestAlert = (event) => {  \r\n            this.setState({ \r\n                dataStateunavailabletest: event.dataState\r\n            }); \r\n    }\r\n    tabAlertRulesEngine = () => {\r\n        const tabMap = new Map();\r\n        {\r\n            this.props.Login.RegistrationTestAlert&&this.props.Login.masterData.RESelectedTest&&this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter).length>0 &&//this.props.Login.RegistrationTestAlert.length>0 &&\r\n            tabMap.set(\"IDS_AVAILABLETESTUNDERSAMPLE\",\r\n                <DataGrid\r\n                    primaryKeyField=\"ntransactiontestcode\" \r\n                    dataResult={process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.availableTestFilter), 'descending', 'ntransactiontestcode') || [],\r\n                    this.state.dataStateavailabletest?this.state.dataStateavailabletest:{ skip: 0, take: 10 })} \r\n                    dataState={this.state.dataStateavailabletest?this.state.dataStateavailabletest:{ skip: 0, take: 10 }}\r\n                    dataStateChange={this.dataStateAvailabletestAlert}\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                    ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                        pageable={true} \r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={true}\r\n                    selectedId={0}\r\n                    gridHeight={'350px'}\r\n                    gridWidth={'700px'}\r\n                    expandField=\"expanded\"\r\n                    handleExpandChange={() => {this.handleExpandChange(this.props.Login.RegistrationTestAlert)}}\r\n                    hasChild={true}\r\n                    childMappingField={'ntransactiontestcode'}\r\n                    childColumnList={\r\n                        this.props.Login.masterData.realRegSubTypeValue.nneedsubsample ?\r\n                        [\r\n                        { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_SAMPLEARNO\", \"dataField\": \"samplearno\", \"width\": \"200px\" },\r\n                        { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" }\r\n                    ]: [\r\n                        { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \r\n                        { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"200px\" }\r\n                    ]}\r\n                    childList={this.state.childListMap}\r\n                    activeTabName={\"IDS_AVAILABLETESTUNDERSAMPLE\"}\r\n                >\r\n                </DataGrid>) \r\n        this.props.Login.NewTestGroupTestAlert&&this.props.Login.masterData.RESelectedTest&&this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter).length>0  &&//this.props.Login.NewTestGroupTestAlert.length>0  &&\r\n            tabMap.set(\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\",\r\n                <DataGrid\r\n                    primaryKeyField=\"ntransactiontestcode\"\r\n                    dataResult={process(sortData(this.props.Login.masterData.RESelectedTest.filter(this.unavailableTestFilter), 'descending', 'ntransactiontestcode') || [],\r\n                    this.state.dataStateunavailabletest?this.state.dataStateunavailabletest:{ skip: 0, take: 10 })}\r\n                    dataState={this.state.dataStateunavailabletest?this.state.dataStateunavailabletest:{ skip: 0, take: 10 }}\r\n                    dataStateChange={this.dataStateUnAvailabletestAlert}\r\n                    extractedColumnList={[\r\n                        { \"idsName\": \"IDS_RULEAPPLIEDTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                    ]}\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                       pageable={true} \r\n                    scrollable={'scrollable'}\r\n                    hideColumnFilter={true}\r\n                    selectedId={0}\r\n                    expandField=\"expanded\"\r\n                    handleExpandChange={() => {this.handleExpandChange(this.props.Login.NewTestGroupTestAlert)}}\r\n                    gridHeight={'350px'}\r\n                    gridWidth={'700px'}\r\n                    hasChild={true}\r\n                    childMappingField={'ntransactiontestcode'}\r\n                    childColumnList={[ \r\n                        { \"idsName\": \"IDS_RULEDEPENDENTTESTNAME\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }\r\n                    ]}\r\n                    childList={this.state.childListMap}\r\n                    activeTabName={\"IDS_TESTSNOTAVAILABLEUNDERSAMPLE\"}\r\n                >\r\n                </DataGrid>\r\n            ) \r\n        }\r\n        return tabMap;\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openTemplateModal = this.props.Login.openTemplateModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        //let additionInfo=this.props.Login.additionInfo ||{};\r\n        let screenName = this.props.Login.screenName;\r\n        let operation = this.props.Login.operation;\r\n        let loadFile = this.props.Login.loadFile;\r\n        let selectedId = this.props.Login.selectedId;\r\n        let updateInfo = {};\r\n        //additionInfo={...selectedRecord};\r\n        if (screenName === \"IDS_RESULTFORMULA\") {\r\n            screenName = \"IDS_RESULTENTRY\";\r\n            operation = \"update\";\r\n            let showValidate = !this.props.Login.showValidate;\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { screenName, operation, showValidate, validateFormulaMandyFields: [] }\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.loadEsign) {\r\n                if (this.props.Login.operation === \"delete\"\r\n                    || this.props.Login.operation === \"complete\"\r\n                    || this.props.Login.operation === \"default\"\r\n                    || this.props.Login.operation === \"deleteTask\"\r\n                    || this.props.Login.operation === \"deleteInstrument\" || this.props.Login.operation === \"deleteMaterial\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                    selectedRecord = {};\r\n                }\r\n                else if (this.props.Login.operation === \"updatechecklist\") {\r\n                    loadEsign = false;\r\n                    openModal = false;\r\n                }\r\n                else {\r\n                    loadEsign = false;\r\n                    selectedRecord['esignpassword'] = \"\";\r\n                    selectedRecord['esigncomments'] = \"\";\r\n                    selectedRecord['esignreason']=\"\";\r\n                }\r\n            } else {\r\n                openModal = false;\r\n                openTemplateModal = false;\r\n                selectedRecord = {};\r\n                loadFile = false;\r\n                selectedId=null;\r\n            }\r\n            updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal, loadEsign,openTemplateModal,screenName, selectedRecord,loadFile,selectedId }\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    realDesignTemplateMapping:this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion:this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList:this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList:this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList:this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationSubTypeList:this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realRegistrationTypeList:this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList:this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    todate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                    this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    realDesignTemplateMapping:this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion:this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList:this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList:this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList:this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationSubTypeList:this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realRegistrationTypeList:this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList:this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 2,\r\n                    fromdate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    transcode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                    this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    realDesignTemplateMapping:this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion:this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList:this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList:this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList:this.props.Login.masterData.realFilterStatusList,\r\n                     realRegistrationSubTypeList:this.props.Login.masterData.realRegistrationSubTypeList,\r\n                     realRegistrationTypeList:this.props.Login.masterData.realRegistrationTypeList,\r\n                     realTestvaluesList:this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 2,\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString((this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    (this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    realRegistrationSubTypeList:this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realDesignTemplateMapping:this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion:this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList:this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList:this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList:this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationTypeList:this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList:this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 3,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromdate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getRERegistrationSubType(inputData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    realRegistrationSubTypeList:this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realDesignTemplateMapping:this.props.Login.masterData.realDesignTemplateMapping,\r\n                    realApproveConfigVersion:this.props.Login.masterData.realApproveConfigVersion,\r\n                    realApprovalConfigVersionList:this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realDesignTemplateMappingList:this.props.Login.masterData.realDesignTemplateMappingList,\r\n                    realFilterStatusList:this.props.Login.masterData.realFilterStatusList,\r\n                    realRegistrationTypeList:this.props.Login.masterData.realRegistrationTypeList,\r\n                    realTestvaluesList:this.props.Login.masterData.realTestvaluesList,\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultRegistrationSubType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                    this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    nneedsubsample: this.props.Login.masterData.realRegSubTypeValue.nneedsubsample || false,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item,\r\n                    defaultRegistrationSubType : this.props.Login.masterData.defaultRegistrationSubType\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getREFilterTemplate(inputParamData)\r\n\r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 4,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultApprovalConfigVersion: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                   //ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                   ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                                this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\r\n                    defaultRegistrationSubType : this.props.Login.masterData.defaultRegistrationSubType\r\n                }\r\n                this.props.getREJobStatus(inputData)\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                }\r\n                this.props.getREFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: 1,// parseInt(this.props.Login.masterData.defaultjobstatus.njobstatuscode),\r\n                    ntranscode: event.value === 0 ?  this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\"): String(event.value),\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultFilterStatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n                }\r\n                this.props.getREFilterTestData(inputData)\r\n            }\r\n            else if (fieldname === \"test\") {\r\n\r\n                let defaultTestvalues = event.item;\r\n                this.props.Login.masterData.defaultTestvalues = defaultTestvalues;\r\n                // const updateInfo = {\r\n                //     typeName: DEFAULT_RETURN,\r\n                //     data: { masterData: { ...this.props.Login.masterData } }\r\n                // }\r\n                // this.props.updateStore(updateInfo);\r\n                inputData = {\r\n                    defaultTestvalues,\r\n                    ntestcode : this.props.Login.masterData.defaultTestvalues.ntestcode,\r\n                    masterData: this.props.Login.masterData,\r\n                    defaultRegistrationSubType : this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                                this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    userinfo:this.props.Login.userInfo,\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode)\r\n\r\n                }\r\n                this.props.getConfigurationFilter(inputData)\r\n            }\r\n            else if (fieldname === \"nconfigfiltercode\") {\r\n\r\n                let defaultConfigurationFilterValue = event.item;\r\n                this.props.Login.masterData.defaultConfigurationFilterValue = defaultConfigurationFilterValue;\r\n                this.props.Login.masterData.realdefaultConfigurationFilterValue = defaultConfigurationFilterValue;\r\n                inputData = {\r\n                    defaultConfigurationFilterValue,\r\n                    nconfigfiltercode : parseInt(this.props.Login.masterData.defaultConfigurationFilterValue.nconfigfiltercode),\r\n                    ntestcode : this.props.Login.masterData.defaultTestvalues.ntestcode,\r\n                    masterData: this.props.Login.masterData,\r\n                    defaultRegistrationSubType : this.props.Login.masterData.defaultRegistrationSubType,\r\n                    //ntranscode: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n                                this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode)\r\n                }\r\n                this.props.getTestBasedBatchWorklist(inputData)\r\n            }\r\n            else if (fieldname === \"nworklistcode\") {\r\n\r\n                let defaultWorklistvalue = event.item;\r\n                this.props.Login.masterData.defaultWorklistvalue = defaultWorklistvalue;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            if (fieldname === \"nbatchmastercode\") \r\n            {\r\n                let defaultBatchvalue = event.item;\r\n                this.props.Login.masterData.defaultBatchvalue = defaultBatchvalue;\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n    }\r\n}\r\n        else\r\n        {\r\n            if(fieldname === \"nconfigfiltercode\")\r\n            {\r\n                this.props.Login.masterData.defaultConfigurationFilterValue = [];\r\n                this.props.Login.masterData.defaultWorklistvalue = [];\r\n                this.props.Login.masterData.defaultBatchvalue = [];\r\n\r\n                 const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { masterData: { ...this.props.Login.masterData } }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n        }\r\n    }\r\n    OnDateConverstion = (date, fieldname) => {\r\n        const month = validateTwoDigitDate(String(date.getMonth() + 1));\r\n        const day = validateTwoDigitDate(String(date.getDate()));\r\n        if (fieldname === \"fromDate\") {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T00:00:00\";\r\n        }\r\n        else {\r\n            date = date.getFullYear() + '-' + month + '-' + day + \"T23:59:00\";\r\n        }\r\n        return date;\r\n    }\r\n    onReload = () => {\r\n        let { realFromDate, realToDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realApproveConfigVersion,\r\n            realFilterStatusValue, realTestcodeValue,realWorklistCodeValue } = this.props.Login.masterData\r\n        //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate, realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, realApproveConfigVersion, realTestcodeValue }\r\n        let inputData = {\r\n            nsampletypecode: (realSampleTypeValue && realSampleTypeValue.nsampletypecode) || -1,\r\n            nregtypecode: (realRegTypeValue && realRegTypeValue.nregtypecode) || -1,\r\n            nregsubtypecode: (realRegSubTypeValue && realRegSubTypeValue.nregsubtypecode) || -1,\r\n            napprovalversioncode: (realApproveConfigVersion && realApproveConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: String(realFilterStatusValue ? realFilterStatusValue.ntransactionstatus : -1),\r\n            ntestcode: realTestcodeValue ? realTestcodeValue.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nworlistcode : (realWorklistCodeValue && realWorklistCodeValue.nworklistcode) || -1\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n        }\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== -1) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    onDesignTemplateChange = (event, fieldName, labelname) => {\r\n        let masterData = this.props.Login.masterData;\r\n        masterData = {\r\n            ...masterData,\r\n            [labelname]: { ...event.item }\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onREFilterSubmit = (event) => {\r\n        // let realFromDate = new Date(this.props.Login.masterData.fromDate)\r\n        // let realToDate = new Date(this.props.Login.masterData.toDate)\r\n        let realFromDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate);\r\n        let realToDate = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate);\r\n        let realSampleTypeValue = this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType\r\n        let realRegTypeValue = this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType\r\n        let realRegSubTypeValue = this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType\r\n        let realApproveConfigVersion = this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion\r\n        let realFilterStatusValue = this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus\r\n        let realTestcodeValue = this.props.Login.masterData.defaultTestvalues && this.props.Login.masterData.defaultTestvalues\r\n        let realWorklistCodeValue = this.props.Login.masterData.defaultWorklistvalue &&  this.props.Login.masterData.defaultWorklistvalue\r\n        let realBatchCodeValue = this.props.Login.masterData.defaultBatchvalue &&  this.props.Login.masterData.defaultBatchvalue\r\n        let realDesignTemplateMapping = this.props.Login.masterData.DesignTemplateMappingValue &&  this.props.Login.masterData.DesignTemplateMappingValue\r\n        let realDesignTemplateMappingList=this.props.Login.masterData.DesignTemplateMapping &&  this.props.Login.masterData.DesignTemplateMapping\r\n        let realApprovalConfigVersionList=this.props.Login.masterData.ApprovalConfigVersion &&  this.props.Login.masterData.ApprovalConfigVersion\r\n        let realFilterStatusList=this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.REFilterStatus\r\n        let realRegistrationTypeList=this.props.Login.masterData.RegistrationType && this.props.Login.masterData.RegistrationType\r\n        let realRegistrationSubTypeList=this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType\r\n       // let realBatchvaluesList=this.props.Login.masterData.RegistrationType\r\n       // let  RealWorklistvaluesList=this.props.Login.masterData.RegistrationType\r\n        let realConfigurationFilterValuesList=this.props.Login.masterData.ConfigurationFilterValues && this.props.Login.masterData.ConfigurationFilterValues\r\n        \r\n\r\n\r\n         //let obj = this.covertDatetoString(realFromDate, realToDate)\r\n        let obj = convertDateValuetoString(realFromDate, realToDate, this.props.Login.userInfo);\r\n        let masterData = { ...this.props.Login.masterData, realFromDate: obj.fromDate,\r\n             realToDate: obj.toDate, realSampleTypeValue, realRegTypeValue, realRegSubTypeValue, realFilterStatusValue, \r\n             realApproveConfigVersion, realTestcodeValue,realWorklistCodeValue,realBatchCodeValue \r\n             ,realDesignTemplateMapping,realDesignTemplateMappingList,realApprovalConfigVersionList,realFilterStatusList,realRegistrationTypeList,realRegistrationSubTypeList,\r\n             realConfigurationFilterValuesList }\r\n        let inputData = {\r\n            nsampletypecode: (this.props.Login.masterData.defaultSampleType && this.props.Login.masterData.defaultSampleType.nsampletypecode) || -1,\r\n            nregtypecode: (this.props.Login.masterData.defaultRegistrationType && this.props.Login.masterData.defaultRegistrationType.nregtypecode) || -1,\r\n            nregsubtypecode: (this.props.Login.masterData.defaultRegistrationSubType && this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode) || -1,\r\n            napprovalversioncode: (this.props.Login.masterData.defaultApprovalConfigVersion && this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode) || -1,\r\n            ntranscode: this.props.Login.masterData.defaultFilterStatus && this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? \r\n            this.props.Login.masterData.REFilterStatus.map(item => item.ntransactionstatus).join(\",\") : String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus), \r\n            //ntranscode: String(this.props.Login.masterData.defaultFilterStatus ? this.props.Login.masterData.defaultFilterStatus.ntransactionstatus : -1),\r\n            ntestcode: this.props.Login.masterData.defaultTestvalues ? this.props.Login.masterData.defaultTestvalues.ntestcode : -1,\r\n            ntransactiontestcode: 0,\r\n            njobstatuscode: (this.props.Login.masterData.defaultjobstatus && this.props.Login.masterData.defaultjobstatus.njobstatuscode) || 1,\r\n            fromdate: obj.fromDate,\r\n            todate: obj.toDate,\r\n            userinfo: this.props.Login.userInfo,\r\n            activeTestKey: this.props.Login.activeTestKey || \"IDS_RESULTS\",\r\n            showTest: true,\r\n            showSample: false,\r\n            nneedsubsample: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) || false,\r\n            checkBoxOperation: 3,\r\n            ndesigntemplatemappingcode: (this.props.Login.masterData.DesignTemplateMappingValue && this.props.Login.masterData.DesignTemplateMappingValue.ndesigntemplatemappingcode) || -1,\r\n            nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n            nworlistcode : (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.defaultBatchvalue && this.props.Login.masterData.defaultBatchvalue.nbatchmastercode) || -1\r\n        }\r\n        const inpuParamData = {\r\n            inputData,\r\n            masterData,\r\n            refs: { searchSampleRef: this.searchSampleRef, searchSubSampleRef: this.searchSubSampleRef, searchTestRef: this.searchTestRef },\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState\r\n        }\r\n\r\n        if (inputData.nsampletypecode !== -1 && inputData.nregtypecode !== -1 && inputData.nregsubtypecode !== -1 && inputData.napprovalversioncode !== -1\r\n            && inputData.ntranscode !== -1 && inputData.njobstatuscode !== -1 && inputData.ntestcode !== undefined) {\r\n            this.props.getResultEntryDetails(inpuParamData)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTALLTHEVALUEINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    // covertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay;\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay;\r\n\r\n    //     const fromDate = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay + \"T00:00:00\";\r\n    //     const toDate = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n    onSecondaryPaneSizeChange = (e, val) => {\r\n\r\n        // let hGrand = this.state.grandparentheight\r\n        // let check = e - 400;\r\n        // if (check > 1) {\r\n        //     hGrand = this.state.parentHeight + check\r\n        // }\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: hGrand - e - 70,\r\n        //     grandparentheight: hGrand\r\n        // })\r\n        // this.setState({\r\n        //     paneHeight: e - val,\r\n        //     secondPaneHeight: this.state.parentHeight - e - 70\r\n        // })\r\n    }\r\n\r\n    onComboCategoryChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'resultentrybysample/getResultUsedInstrumentCombo';\r\n            if (fieldname === \"ninstrumentcatcode\") {\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nflag: 2,\r\n                    ninstrumentcatcode: event.value,\r\n                    ncalibrationRequired: event.item.ncalibrationreq\r\n                }\r\n            }\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n                    const TagInstrument = constructOptionList(response.data.Instrument || [], \"ninstrumentcode\",\r\n                        \"sinstrumentid\", undefined, undefined, undefined);\r\n                    const TagListInstrument = TagInstrument.get(\"OptionList\")\r\n\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            masterData: { ...this.props.Login.masterData, Instrument: TagListInstrument },\r\n                            selectedRecord: {\r\n                                ...this.props.Login.selectedRecord,\r\n                                [fieldname]: event,\r\n                                ninstrumentcode: TagInstrument.get(\"DefaultValue\") ? TagInstrument.get(\"DefaultValue\") : [],\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    // const selectedRecord = this.state.selectedRecord || {};\r\n                    // selectedRecord[fieldname] = event;\r\n                    // this.setState({ selectedRecord });\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    showRESampleInfo() {\r\n        this.setState({ showSample: true, showTest: false })\r\n    }\r\n\r\n    showRETestList() {\r\n        this.setState({ showTest: true, showSample: false, showSubSample: false })\r\n    }\r\n\r\n    // getMeanTestParameter =(meanParam)=>{\r\n    //     const inputData = {npreregno:meanParam.selectedRecord.npreregno,\r\n    //                        userinfo:this.props.Login.userInfo}\r\n    //     return rsapi.post(\"resultentrybysample/getMeanCalculationTestParameter\", inputData)\r\n    //         .then(response => {\r\n    //            const list =  response.data || [];\r\n    //            const optionList = [];\r\n    //            list.map(item=>{optionList.push({item:item, label:item.stestsynonym+\"-\"+item.sparametername+\"-\"+item.sresult, value:item.ntransactiontestresultcode})})\r\n    //            this.setState({meanTestParameterList:optionList});                \r\n    //         })\r\n    //         .catch(error => {\r\n    //             if (error.response.status === 500) {\r\n    //                 toast.error(error.message);\r\n    //             } else {\r\n    //                 toast.warn(error.response.data);\r\n    //             }\r\n    //         })\r\n    // }\r\n\r\n    showRESubSampleinfo() {\r\n        this.setState({ showSample: false, showTest: true, showSubSample: !this.state.showSubSample })\r\n    } \r\n    testRETabDetail = () => {\r\n        const testTabMap = new Map();\r\n        //let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        testTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel ={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            editpredefinedcomments={this.editpredefinedcomments}\r\n            enforceResult={this.enforceResult}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n        testTabMap.set(\"IDS_INSTRUMENT\", <ApprovalInstrumentTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel ={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedInstrument\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.instrumentDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteInstrumentRecord}\r\n            fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_INSTRUMENT\"\r\n        />)\r\n        testTabMap.set(\"IDS_MATERIAL\", <ResultUsedMaterial\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel ={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedMaterial\"}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            dataState={this.state.materialDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteMaterialRecord}\r\n            fetchRecord={this.props.fetchMaterialRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_MATERIAL\"\r\n        />)\r\n        testTabMap.set(\"IDS_TASK\", <ResultEntryTaskTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            methodUrl={\"ResultUsedTask\"}\r\n            addResultEntryTask={this.addResultEntryTask}\r\n            controlMap={this.state.controlMap}\r\n            deleteParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n            }}\r\n            editParam={{\r\n                masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n            }}\r\n            dataState={this.state.taskDataState}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            isActionRequired={true}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteRecord={this.deleteTaskRecord}\r\n            fetchRecord={this.fetchTaskRecord}\r\n            //fetchRecord={this.fetchInstrumentRecord}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_TASK\" />)\r\n        testTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"dcreateddate\" }]}\r\n            userInfo={this.props.Login.userInfo}\r\n            isneedReport = {false}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n        testTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\"\r\n            isSampleTestComment={true}\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={true}\r\n\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\",\r\n                    masterList: this.props.Login.masterData.RESelectedTest,\r\n                    ncontrolCode: this.state.controlMap.has(\"DeleteTestComment\") && this.state.controlMap.get(\"DeleteTestComment\").ncontrolcode\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedTest,\r\n                ncontrolCode: this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode\r\n\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        testTabMap.set(\"IDS_RESULTCHANGEHISTORY\", <ResultChangeHistoryTab\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel={this.props.Login.genericLabel}\r\n            ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultChangeDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n            controlMap={this.state.controlMap}\r\n            masterData={this.props.Login.masterData}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            selectedId={null}\r\n\r\n        />)\r\n\r\n        return testTabMap;\r\n    }\r\n\r\n    sampleDataStateChange = (event) => {\r\n        switch (this.props.Login.activeSampleKey) {\r\n            case \"IDS_APPROVALHISTORY\":\r\n                this.setState({\r\n                    sampleHistoryDataState: event.dataState\r\n                })\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    sampleGridDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    sampleGridDataStateChange = (event) => {\r\n        this.setState({ sampleGridDataState: event.dataState })\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                this.setState({\r\n                    materialDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TASK\":\r\n                this.setState({\r\n                    taskDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    instrumentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                this.setState({\r\n                    documentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                this.setState({\r\n                    resultChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SAMPLECOMMENTS\":\r\n                this.setState({\r\n                    sampleChangeDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    resultDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    dataResultStateChange = (event) => {\r\n        this.setState({ dataState: event.dataState })\r\n      }\r\n\r\n    // sampleTabDetail = () => {\r\n    //     const tabMap = new Map();\r\n\r\n    //     {\r\n    //         this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n    //             tabMap.set(\"IDS_SAMPLEINFO\", <SampleInfoView\r\n    //                 data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0 ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n    //                 SingleItem={this.state.SingleItem}\r\n    //                 screenName=\"IDS_SAMPLEINFO\"\r\n    //             />) :\r\n    //             tabMap.set(\"IDS_SAMPLEGRID\", <SampleInfoGrid\r\n    //                 selectedSample={this.props.Login.masterData.RESelectedSample}\r\n    //                 dataState={this.state.dataState}\r\n    //                 dataStateChange={this.dataStateChange}\r\n    //                 detailedFieldList={this.state.SampleGridExpandableItem}\r\n    //                 extractedColumnList={this.state.SampleGridItem}\r\n    //                 userInfo={this.props.Login.userInfo}\r\n    //                 inputParam={this.props.Login.inputParam}\r\n    //                 screenName=\"IDS_SAMPLEGRID\"\r\n    //             />)\r\n    //         // tabMap.set(\"IDS_SAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SAMPLECOMMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <></>)\r\n    //         // tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <></>)\r\n    //         return tabMap;\r\n    //     }\r\n    // }\r\n\r\n\r\n\r\n    sampleTabDetail() {\r\n        const tabMap = new Map();\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        tabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.RESelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        tabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n            selectedId = {this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        tabMap.set(\"IDS_SAMPLEAPPROVALHISTORY\",\r\n            <SampleApprovalHistory\r\n                userInfo={this.props.Login.userInfo}\r\n                ApprovalHistory={this.props.Login.masterData.SampleApprovalHistory}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.sampleHistoryDataState}\r\n                dataStateChange={this.sampleDataStateChange}\r\n                masterData={this.props.Login.masterData}\r\n                screenName=\"IDS_SAMPLEAPPROVALHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n            />)\r\n\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n\r\n    subsampleTabDetail = () => {\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        const tabMap = new Map();\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        let { subsampleskip, subsampletake } = this.state\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n        tabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n            screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            selectedMaster=\"selectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            viewFile={this.props.viewAttachment}\r\n            addName={\"AddSubSampleAttachment\"}\r\n            editName={\"EditSubSampleAttachment\"}\r\n            deleteName={\"DeleteSubSampleAttachment\"}\r\n            viewName={\"ViewSubSampleAttachment\"}\r\n            methodUrl={\"SubSampleAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n            take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n            userInfo={this.props.Login.userInfo}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleAttachment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n        />)\r\n        tabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SUBSAMPLECOMMENTS\"\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSubSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            addName={\"AddSubSampleComment\"}\r\n            editName={\"EditSubSampleComment\"}\r\n            deleteName={\"DeleteSubSampleComment\"}\r\n            methodUrl={\"SubSampleComment\"}\r\n            masterData={this.props.Login.masterData}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSubSample}\r\n            masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nsamplecommentcode\"}\r\n            dataState={this.state.subSampleCommentDataState}\r\n            dataStateChange={this.subSampledataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SubSampleComment\",\r\n                ntransactionsamplecode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_SAMPLEARNO\"\r\n            displayName=\"ssamplearno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        return tabMap;\r\n    }\r\n\r\n    onSampleTabChange = (tabProps) => {\r\n        const activeSampleTab = tabProps.screenName;\r\n        if (activeSampleTab !== this.props.Login.activeSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSampleTab,\r\n                activeSampleTab,\r\n                activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n            }\r\n            this.props.getSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n    onTestTabChange = (tabProps) => {\r\n        const activeTestKey = tabProps.screenName;\r\n        if (activeTestKey !== this.props.Login.activeTestKey) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    // ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                    //     this.props.Login.masterData.selectedTestCode : this.props.Login.masterData.RESelectedTest ?\r\n                    //         String(this.props.Login.masterData.RESelectedTest.ntransactiontestcode) : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestKey,\r\n                    screenName: activeTestKey,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    sampleChangeDataState: this.state.sampleChangeDataState\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n    }\r\n\r\n    openClosePortal = (test) => {\r\n        if(this.props.Login.openELNSheet===undefined || !this.props.Login.openELNSheet)\r\n        {\r\n            this.props.Login.masterData.enlLink=\"\";\r\n        // if(test.RESelectedTest.length === 1)\r\n        // {           \r\n                this.props.getELNTestValidation(test,this.props.Login.integrationSettings);            \r\n        // }\r\n        // else{\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\r\n        // }\r\n    }\r\n        else{\r\n           //this.props.Login.masterData.enlLink=undefined;\r\n\r\n            const updateInfo = {\r\n               typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    openELNSheet: false,\r\n                    masterData: {\r\n                        openELNSheet: false,\r\n                        ...this.props.Login.masterData,  \r\n                        enlLink:\"\"\r\n                    }\r\n                                        \r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n       \r\n    /*openClosePortal = (test) => {\r\n        if(this.state.openELNSheet === false )\r\n        {\r\n            this.props.Login.masterData.enlLink=\"\";\r\n        // if(test.RESelectedTest.length === 1)\r\n        // {           \r\n                this.props.getELNTestValidation(test,this.props.Login.integrationSettings);            \r\n        // }\r\n        // else{\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTONLYONETEST\" }));\r\n        // }\r\n    }\r\n        else{\r\n           //this.props.Login.masterData.enlLink=undefined;\r\n\r\n            // const updateInfo = {\r\n            //    typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         openELNSheet: false,\r\n            //         masterData: {\r\n            //             openELNSheet: false,\r\n            //             ...this.props.Login.masterData,  \r\n            //             enlLink:\"\"\r\n            //         },\r\n            //         enlLink:\"\"                 \r\n            //     }\r\n                \r\n            // }\r\n            //this.props.updateStore(updateInfo);\r\n            this.setState({ openELNSheet: false,  enlLink:\"\" })\r\n        }\r\n        // if (this.state.openELNSheet === false) {\r\n            // if (test.test.selensheetname !== null) {\r\n                /*let enlLink = \"\";\r\n                   const elnuser= {\r\n                     usercode: test.elnUserInfo.nelncode,\r\n                     username: test.elnUserInfo.selnusername,\r\n                     userfullname: test.elnUserInfo.selnusername,\r\n                    lsusergroup: {\r\n                     usergroupcode: test.elnUserInfo.nelnusergroupcode,\r\n                     usergroupname: test.elnUserInfo.nelnusergroupcode,\r\n                     },\r\n                    //  lssitemaster:{ sitecode:sitecode }\r\n                    }\r\n\r\n                    const user = CF_encryptionData(elnuser).EncryptData;\r\n                const enlcredential = {\r\n                    ElnUser: CF_encryptionData(this.props.Login.settings[20]).EncryptData,\r\n                    Elntenant: CF_encryptionData(\"-1\").EncryptData,\r\n                    Elnloginfrom: CF_encryptionData(\"-1\").EncryptData,\r\n                    //Elntoken: CF_encryptionData(\"\").EncryptData,\r\n                    Elnpassword: CF_encryptionData(this.props.Login.settings[21]).EncryptData,\r\n                    Elnsitecode: CF_encryptionData(this.props.Login.settings[22]).EncryptData,\r\n                    Elnsitename: CF_encryptionData(this.props.Login.settings[23]).EncryptData,\r\n                    Elnusergroupname: CF_encryptionData(this.props.Login.settings[24]).EncryptData,\r\n                    Elnusergroupcode: CF_encryptionData(this.props.Login.settings[25]).EncryptData,\r\n                }\r\n\r\n                //Axios.post(\"http://5.189.171.17:8095/ELN-0.0.1-SNAPSHOT/authenticate\",inputou)\r\n                //Axios.post(this.props.Login.settings[27], inputou)\r\n                // Axios.post(\"https://logilabelntesting.azurewebsites.net/\", user)\r\n                //     .then(response => {\r\n                        const testname = test.test.stestname.substring(0, test.test.stestname.indexOf(\"[\")).trim();\r\n\r\n                        //const batchId = test.test.sarno+'-'+test.test.stestname;\r\n                        const batchId = test.test.sarno + '-' + testname;\r\n                        const ntransactiontestcode = CF_encryptionData(batchId//test.RESelectedTest[0].ntransactiontestcode\r\n                        ).EncryptData;\r\n                        // const Elntoken = CF_encryptionData(\"Bearer \" + response.data.token).EncryptData;\r\n\r\n\r\n                        // const link =\r\n                        //     //window.location.href.toString() \r\n                        //     \"\" +\r\n                        //     '#{\"orderid\":\"' +\r\n                        //     ntransactiontestcode +\r\n                        //     '\",\"u\":\"' +\r\n                        //     enlcredential.ElnUser +\r\n                        //     '\",\"t\":\"' +\r\n                        //     enlcredential.Elntenant +\r\n                        //     '\",\"l\":\"' +\r\n                        //     enlcredential.Elnloginfrom +\r\n                        //     '\",\"k\":\"' +\r\n                        //     Elntoken +\r\n                        //     //response.data.token+\r\n                        //     '\",\"uc\":\"' +\r\n                        //     enlcredential.Elnusergroupcode +\r\n                        //     '\",\"ug\":\"' +\r\n                        //     enlcredential.Elnusergroupname +\r\n                        //     '\",\"sc\":\"' +\r\n                        //     enlcredential.Elnsitecode +\r\n                        //     '\",\"sn\":\"' +\r\n                        //     enlcredential.Elnsitename +\r\n                        //     '\",\"LO\":\"' +\r\n                        //     ntransactiontestcode +\r\n                        //     '\"}';\r\n\r\n                        const link =\r\n                            //window.location.href.toString() \r\n                            \"\" +\r\n                            '#{\"orderid\":\"' +\r\n                            ntransactiontestcode +\r\n                            '\",\"user\":\"' +\r\n                            user +\r\n                            '\",\"batchid\":\"' +\r\n                            ntransactiontestcode +\r\n                            '\"}';\r\n                        \r\n                        //enlLink = \"https://logilabelntest.azurewebsites.net/vieworder\".concat(link);\r\n                        enlLink=\"https://logilabelntesting.azurewebsites.net/\";\r\n                        console.log(\"eln link:\", enlLink);\r\n                        //}\r\n                        // this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1, enlLink })\r\n                        this.setState({ openELNSheet: true, nflag: 1, enlLink })\r\n                        //this.props.encryptionData(test);\r\n                    // })\r\n                    //this.getActiveTestURL() \r\n                    // .catch(response => { })\r\n            // }\r\n            // else {\r\n            //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOSHEETFORTHISTEST\" }));\r\n\r\n            // }\r\n/*}\r\nelse {\r\n            this.setState({ openELNSheet: !this.state.openELNSheet, nflag: 1 })\r\n\r\n            let testChildGetREParam = {\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                activeTestKey: 'IDS_RESULTS',\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                resultDataState: this.state.resultDataState,\r\n                instrumentDataState: this.state.instrumentDataState,\r\n                materialDataState: this.state.materialDataState,\r\n                taskDataState: this.state.taskDataState,\r\n                documentDataState: this.state.documentDataState,\r\n                resultChangeDataState: this.state.resultChangeDataState,\r\n                testCommentDataState: this.state.testCommentDataState,\r\n                RESelectedTest: this.props.Login.masterData.RESelectedTest\r\n            }\r\n\r\n            this.props.getTestChildTabREDetail(testChildGetREParam, true)\r\n\r\n\r\n\r\n            //this.filterTestParam\r\n        }*/\r\n\r\n     }\r\n\r\n    onSubSampleTabChange = (tabProps) => {\r\n        const activeSubSampleTab = tabProps.screenName;\r\n        if (activeSubSampleTab !== this.props.Login.activeSubSampleTab) {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                screenName: activeSubSampleTab,\r\n                activeSubSampleTab,\r\n                subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n            }\r\n            this.props.getSubSampleChildTabDetail(inputData)\r\n        }\r\n    }\r\n\r\n\r\n    viewSample = (viewdetails) => {\r\n        this.props.ResultEntryViewPatientDetails(this.props.Login.masterData, \"IDS_PREVIOUSRESULTVIEW\", this.props.Login.userInfo, viewdetails);\r\n      };\r\n\r\n    subSampledataStateChange = (event) => {\r\n        switch (this.props.Login.activeSubSampleTab) {\r\n            case \"IDS_SUBSAMPLECOMMENTS\":\r\n                this.setState({\r\n                    subSampleCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_SUBSAMPLEATTACHMENTS\":\r\n                this.setState({\r\n                    subSampleAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    testMethodSourceEdit = (test) => {\r\n        this.props.testMethodSourceEdit(test)\r\n    }\r\n\r\n    addREInstrument = (test) => {\r\n        this.props.addREInstrument(test)\r\n    }\r\n    adhocTestParameter = (test) => {\r\n        \r\n        const inputData = {\r\n            ntestcode: test.test.ntestcode,\r\n            ntestgrouptestcode: test.test.ntestgrouptestcode,\r\n            ntransactiontestcode: test.test.ntransactiontestcode,\r\n            npreregno:test.test.npreregno,\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: test.userInfo,\r\n            adhocId:test.adhocId\r\n        }\r\n            this.props.addREAdhocParamter(inputData)\r\n    }\r\n\r\n    deleteInstrumentRecord = (test) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        test = { ...test, 'ndesigntemplatemappingcode': ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...test, 'ndesigntemplatemappingcode': ndesigntemplatemappingcode, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteInstrument\",\r\n            screenName: \"deleteInstrumentAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteInstrumentAction\",\r\n                    operation: \"deleteInstrument\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteInstrumentRecord(test)\r\n        }\r\n\r\n\r\n    }\r\n    fetchInstrumentRecord = (test) => {\r\n        this.props.fetchInstrumentRecord(test)\r\n    }\r\n    fetchMaterialRecord = (test) => {\r\n        this.props.fetchMaterialRecord(test)\r\n    }\r\n\r\n    //Aravindh\r\n    deleteMaterialRecord = (test) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        test = { ...test, nregtypecode: nregtypecode, nregsubtypecode: nregsubtypecode, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: {\r\n                ...test.selectedRecord,\r\n                nregtypecode: nregtypecode, nregsubtypecode: nregsubtypecode, ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                ntransactiontestcode: test.masterData.RESelectedTest ?\r\n                    test.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"ResultUsedMaterial\",\r\n            operation: \"delete\",\r\n            //screenName: \"deleteMaterialAction\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n            nresultusedmaterialcode: test.selectedRecord.nresultusedmaterialcode,\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteMaterialAction\",\r\n                    operation: \"deleteMaterial\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            //this.props.deleteResultUsedMaterial(test)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    deleteTaskRecord = (test) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        test = { ...test, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...test, 'userinfo': this.props.Login.userInfo },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"deleteTask\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //test: test\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, test.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"deleteTaskaction\",\r\n                    operation: \"deleteTask\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.deleteTaskRecord(test)\r\n        }\r\n\r\n    }\r\n    fetchTaskRecord = (test) => {\r\n        this.props.fetchTaskRecord(test)\r\n    }\r\n    addResultEntryTask = (inputData) => {\r\n        let selectedRecord = {}\r\n        let selectedRecordTaskForm = {}\r\n        selectedRecord = {\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            stestsynonym: inputData.stestsynonym\r\n        }\r\n        selectedRecordTaskForm = {\r\n            npreregno: inputData.npreregno,\r\n            ntransactiontestcode: inputData.ntransactiontestcode,\r\n            stestsynonym: inputData.stestsynonym\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                selectedRecord: selectedRecord,\r\n                selectedRecordTaskForm:selectedRecordTaskForm,\r\n                operation: \"create\",\r\n                screenName: \"IDS_TASK\",\r\n                openModal: true,\r\n                activeTestKey: \"IDS_TASK\",\r\n                isTaskInitialRender:true,\r\n                ncontrolcode: inputData.addResultUsedTaskId,\r\n                selectedId: null\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    checkListRecord = (parameterData) => {\r\n        this.props.checkListRecord(parameterData, this.props.Login.userInfo)\r\n    }\r\n    getFormula = (parameterData, userInfo, masterData, index, event) => {\r\n        this.setState({\r\n            modalEvent: event.currentTarget\r\n        })\r\n        this.props.getFormula(parameterData, userInfo, masterData, index, this.state.selectedRecord)\r\n    }\r\n\r\n    getAverageResult = (event, parameterData, index, selectedForumulaInput, masterData, selectedRecord) => {\r\n\r\n        if (!selectedRecord.selectedForumulaInput[index].senableAverage) {\r\n            this.props.getAverageResult(parameterData, index, selectedForumulaInput, this.props.Login.userInfo, masterData, selectedRecord);\r\n        }\r\n        else {\r\n            selectedForumulaInput[index].senableAverage = !selectedRecord.selectedForumulaInput[index].senableAverage;\r\n            selectedForumulaInput[index].svalues = selectedForumulaInput[index].soldvalue;\r\n\r\n            this.setState({  \r\n                selectedRecord:{\r\n                    ...selectedRecord,\r\n                    selectedForumulaInput\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n    }\r\n    calculateFormula = () => {\r\n        const selectedRecord = this.state.selectedRecord || []\r\n        const selectedForumulaInput = selectedRecord.selectedForumulaInput || []\r\n        let lstDynamicFields = [];\r\n\r\n        if (selectedForumulaInput) {\r\n            selectedForumulaInput.map(dynamicfields =>\r\n                lstDynamicFields.push(dynamicfields)\r\n            );\r\n            const inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                lstDynamicFields: lstDynamicFields,\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord: selectedRecord,\r\n                selectedResultGrade: this.state.selectedRecord.selectedResultGrade,\r\n                ResultParameter: this.state.selectedRecord.ResultParameter || {}\r\n            }\r\n            this.props.calculateFormula(inputData)\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n    getActiveTestURL() {\r\n        let url = \"resultentrybysample/getTestbasedParameter\"\r\n        switch (this.props.Login.activeTestKey) {\r\n            case \"IDS_RESULTS\":\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n            case \"IDS_INSTRUMENT\":\r\n                url = \"resultentrybysample/getResultUsedInstrument\"\r\n                break;\r\n            case \"IDS_MATERIAL\":\r\n                url = \"resultentrybysample/getResultUsedMaterial\"\r\n                break;\r\n            case \"IDS_TASK\":\r\n                url = \"resultentrybysample/getResultUsedTask\"\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                url = \"attachment/getTestAttachment\"\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                url = \"comments/getTestComment\"\r\n                break;\r\n            case \"IDS_DOCUMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            case \"IDS_RESULTCHANGEHISTORY\":\r\n                url = \"resultentrybysample/getResultChangeHistory\"\r\n                break;\r\n            case \"IDS_APPROVALHISTORY\":\r\n                url = \"resultentrybysample/getSampleApprovalHistory\"\r\n                break;\r\n            case \"IDS_SAMPLEATTACHMENTS\":\r\n                url = \"attachment/getSampleAttachment\"\r\n                break;\r\n            default:\r\n                url = \"resultentrybysample/getTestbasedParameter\"\r\n                break;\r\n        }\r\n        return url;\r\n    }\r\n\r\n    resultImport = () => {\r\n        this.props.Login.masterData.selectedImportFile = []\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                operation: \"create\",\r\n                screenName: \"IDS_RESULTIMPORTFILE\",\r\n                openModal: true,\r\n                loadFile: true,\r\n                activeTestKey: \"IDS_RESULTS\",\r\n                masterData: this.props.Login.masterData\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeFilter = () => {\r\n        let inputValues={\r\n        SampleType:this.props.Login.masterData.realSampleTypeList || [],\r\n        SampleTypeValue:this.props.Login.masterData.realSampleTypeValue || {},\r\n        RegistrationType:this.props.Login.masterData.realRegistrationTypeList || [],\r\n        RegTypeValue:this.props.Login.masterData.realRegTypeValue || {},\r\n        RegistrationSubType:this.props.Login.masterData.realRegistrationSubTypeList || [],\r\n        RegSubTypeValue:this.props.Login.masterData.realRegSubTypeValue || {},\r\n        DesignTemplateMappingValue:this.props.Login.masterData.realDesignTemplateMapping || {},\r\n        DesignTemplateMapping:this.props.Login.masterData.realDesignTemplateMappingList || [],\r\n        REFilterStatus:this.props.Login.masterData.realFilterStatusList || [],\r\n        FilterStatusValue:this.props.Login.masterData.realFilterStatusValue || {},\r\n        ApprovalConfigVersion:this.props.Login.masterData.realApprovalConfigVersionList || [],\r\n        ApprovalVersionValue:this.props.Login.masterData.realApproveConfigVersion || {},\r\n       // REJobStatus:this.state.REJobStatus || [],\r\n       JobStatusValue:this.props.Login.masterData.defaultjobstatus || {},\r\n       Testvalues:this.props.Login.masterData.realTestvaluesList   || [],\r\n        Batchvalues:this.props.Login.masterData.realBatchvaluesList || [],\r\n        BatchValue :this.props.Login.masterData.realBatchvalue || {},\r\n        Worklistvalues:this.props.Login.masterData.RealWorklistvaluesList || [],\r\n        WorklistValue :this.props.Login.masterData.realWorklistvalue || {},\r\n        TestValue:this.props.Login.masterData.realTestcodeValue || {},\r\n        ConfigurationFilterValues:this.props.Login.masterData.realConfigurationFilterValuesList || [],\r\n        ConfigurationFilterValue :this.props.Login.masterData.realdefaultConfigurationFilterValue || {},\r\n        defaultSampleType:this.props.Login.masterData.realSampleTypeValue || {},\r\n        defaultRegistrationType:this.props.Login.masterData.realRegTypeValue || {},\r\n        defaultRegistrationSubType:this.props.Login.masterData.realRegSubTypeValue || {},\r\n        defaultFilterStatus:this.props.Login.masterData.realFilterStatusValue || {},\r\n        defaultApprovalConfigVersion:this.props.Login.masterData.realApproveConfigVersion || {},\r\n        defaultBatchvalue:this.props.Login.masterData.realBatchvalue || {},\r\n        defaultWorklistvalue:this.props.Login.masterData.realWorklistvalue || {},\r\n        defaultTestvalues:this.props.Login.masterData.realTestcodeValue || {},\r\n        defaultConfigurationFilterValue:this.props.Login.masterData.realdefaultConfigurationFilterValue || {},\r\n        fromDate:this.props.Login.masterData.realFromDate  || new Date(),\r\n        toDate:this.props.Login.masterData.realToDate || new Date()\r\n       // DynamicDesignMapping:this.state.stateDynamicDesign || []\r\n        }\r\n      \r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false,masterData:{...this.props.Login.masterData,...inputValues} }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleSubSamplePageChange = e => {\r\n        this.setState({\r\n            subSampleSkip: e.skip,\r\n            subSampleTake: e.take\r\n        });\r\n        //setTimeout(() => { this._scrollBarRef.updateScroll() })\r\n    }\r\n    handleTestPageChange = e => {\r\n        this.setState({\r\n            testskip: e.skip,\r\n            testtake: e.take,\r\n            sampletakeDataState: e.take\r\n        });\r\n    };\r\n    verticalPaneSizeChange = (val) => {\r\n        if (this.state.enableAutoHeight) {\r\n            this.setState({\r\n                initialVerticalWidth: val - 150\r\n            })\r\n        }\r\n    }\r\n    changeSplitterOption = () => {\r\n        this.setState({\r\n            enableAutoHeight: !this.state.enableAutoHeight,\r\n            initialVerticalWidth: \"57vh\"\r\n\r\n        })\r\n    }\r\n\r\n\r\n    sideNavDetail = (screenName) => {\r\n        let { testskip, testtake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        // let npreregno = this.props.Login.masterData.selectedSample ? this.props.Login.masterData.selectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n\r\n        return (\r\n            screenName == \"IDS_RESULTS\" ?\r\n                <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_RESULTS\"} tabDetail={this.resultTabDetail()}  onTabChange={this.onTabChange} />\r\n                : screenName == \"IDS_ATTACHMENTS\" ?\r\n                    <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTATTACHMENTS\"} tabDetail={this.attachmentTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                    : screenName == \"IDS_COMMENTS\" ?\r\n                        <CustomTabs activeKey={this.props.Login.activeTestTab || \"IDS_TESTCOMMENTS\"} tabDetail={this.commentTabDetail()} destroyInactiveTabPane={true} onTabChange={this.onTabChange} />\r\n                        :\r\n                        screenName == \"IDS_INSTRUMENT\" ?\r\n                            <ApprovalInstrumentTab\r\n                                userInfo={this.props.Login.userInfo}\r\n                                genericLabel ={this.props.Login.genericLabel}\r\n                                masterData={this.props.Login.masterData}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                methodUrl={\"ResultUsedInstrument\"}\r\n                                controlMap={this.state.controlMap}\r\n                                deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                dataState={this.state.instrumentDataState}\r\n                                selectedId={this.props.Login.selectedId || null}\r\n                                isActionRequired={true}\r\n                                dataStateChange={this.dataStateChange}\r\n                                deleteRecord={this.deleteInstrumentRecord}\r\n                                fetchRecord={this.fetchInstrumentRecord}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                screenName=\"IDS_INSTRUMENT\"\r\n                            />\r\n                            :\r\n                            screenName == \"IDS_MATERIAL\" ?\r\n                                <ResultUsedMaterial\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    genericLabel ={this.props.Login.genericLabel}\r\n                                    masterData={this.props.Login.masterData}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    methodUrl={\"ResultUsedMaterial\"}\r\n                                    controlMap={this.state.controlMap}\r\n                                    deleteParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                    editParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n                                    dataState={this.state.materialDataState}\r\n                                    selectedId={this.props.Login.selectedId || null}\r\n                                    isActionRequired={true}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    deleteRecord={this.deleteMaterialRecord}\r\n                                    fetchRecord={this.props.fetchMaterialRecord}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    screenName=\"IDS_MATERIAL\"\r\n                                />\r\n                                :\r\n                                screenName == \"IDS_TASK\" ?\r\n                                    <ResultEntryTaskTab\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        genericLabel ={this.props.Login.genericLabel}\r\n                                        masterData={this.props.Login.masterData}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        methodUrl={\"ResultUsedTask\"}\r\n                                        addResultEntryTask={this.addResultEntryTask}\r\n                                        controlMap={this.state.controlMap}\r\n                                        deleteParam={{\r\n                                            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                                            ncontrolcode: this.state.controlMap.has(\"DeleteResultUsedTask\") && this.state.controlMap.get(\"DeleteResultUsedTask\").ncontrolcode\r\n                                        }}\r\n                                        editParam={{\r\n                                            masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,\r\n                                            ncontrolcode: this.state.controlMap.has(\"EditResultUsedTask\") && this.state.controlMap.get(\"EditResultUsedTask\").ncontrolcode\r\n                                        }}\r\n                                        dataState={this.state.taskDataState}\r\n                                        selectedId={this.props.Login.selectedId || null}\r\n                                        isActionRequired={true}\r\n                                        dataStateChange={this.dataStateChange}\r\n                                        deleteRecord={this.deleteTaskRecord}\r\n                                        fetchRecord={this.fetchTaskRecord}\r\n                                        //fetchRecord={this.fetchInstrumentRecord}\r\n                                        userRoleControlRights={this.state.userRoleControlRights}\r\n                                        screenName=\"IDS_TASK\" />\r\n                                    :\r\n                                    screenName == \"IDS_SAMPLEDETAILS\" ?\r\n                                        this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length === 1 ?\r\n                                            <SampleInfoView\r\n                                                data={this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.length > 0\r\n                                                    ? this.props.Login.masterData.RESelectedSample[this.props.Login.masterData.RESelectedSample.length - 1] : {}}\r\n                                                SingleItem={this.state.SingleItem}\r\n\r\n                                                screenName=\"IDS_SAMPLEINFO\"\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                            /> :\r\n                                            <SampleInfoGrid\r\n                                                selectedSample={this.props.Login.masterData.RESelectedSample}\r\n                                                dataState={this.state.sampleGridDataState}\r\n                                                dataStateChange={this.sampleGridDataStateChange}\r\n                                                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                                                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreField) || []}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                screenName=\"IDS_SAMPLEGRID\"\r\n                                                jsonField={\"jsondata\"}\r\n                                                expandField=\"expanded\"\r\n                                            />\r\n\r\n                                        : \"\"\r\n        )\r\n    }\r\n\r\n\r\n    resultTabDetail = () => {\r\n        const resultTabMap = new Map();\r\n        //let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        // let { testskip, testtake } = this.state\r\n        // let testList = this.props.Login.masterData.RE_TEST || [];\r\n        // testList = testList.slice(testskip, testskip + testtake);\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n        //let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n\r\n        resultTabMap.set(\"IDS_RESULTS\", <ResultEntryResultsTab\r\n            tabSequence={SideBarSeqno.TEST}\r\n            userInfo={this.props.Login.userInfo}\r\n            genericLabel ={this.props.Login.genericLabel}\r\n            masterData={this.props.Login.masterData}\r\n            inputParam={this.props.Login.inputParam}\r\n            dataState={this.state.resultDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            fetchRecord={this.props.parameterRecord}\r\n            controlMap={this.state.controlMap}\r\n            parameterParam={{ primaryKeyField: \"ntransactionresultcode\", masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            checkListRecord={this.checkListRecord}\r\n            editpredefinedcomments={this.editpredefinedcomments}\r\n            enforceResult={this.enforceResult}\r\n            checklistParam={{ masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo }}\r\n            selectedId={this.props.Login.selectedId || null}\r\n            viewFile={this.props.viewAttachment}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            screenName=\"IDS_RESULTS\"\r\n            getMeanTestParameter={this.props.getMeanCalculationTestParameter}\r\n            meanParam={{ \"userInfo\": this.props.Login.userInfo, ncontrolCode: meanControlId }}\r\n        />)\r\n\r\n        resultTabMap.set(\"IDS_RESULTCHANGEHISTORY\",\r\n            <ResultChangeHistoryTab\r\n                tabSequence={SideBarSeqno.TEST}\r\n                userInfo={this.props.Login.userInfo}\r\n                genericLabel={this.props.Login.genericLabel}\r\n                ApprovalResultChangeHistory={this.props.Login.masterData.ResultChangeHistory || []}\r\n                inputParam={this.props.Login.inputParam}\r\n                dataState={this.state.resultChangeDataState}\r\n                dataStateChange={this.dataStateChange}\r\n                screenName=\"IDS_RESULTCHANGEHISTORY\"\r\n                controlMap={this.state.controlMap}\r\n                masterData={this.props.Login.masterData}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                selectedId={null}\r\n\r\n            />)\r\n\r\n        return resultTabMap;\r\n    }\r\n\r\n    attachmentTabDetail = () => {\r\n        const attachmentTabMap = new Map();\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let { testskip, testtake, subsampleskip, subsampletake } = this.state\r\n        let testList = this.props.Login.masterData.RE_TEST || [];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        const meanControlId = this.state.controlMap.has(\"CalculateMean\") && this.state.controlMap.get(\"CalculateMean\").ncontrolcode\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        let ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ?\r\n            this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        subsampleList = subsampleList.slice(subsampleskip, subsampleskip + subsampletake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n\r\n        attachmentTabMap.set(\"IDS_TESTATTACHMENTS\", <Attachments\r\n            tabSequence={SideBarSeqno.TEST}\r\n            screenName=\"IDS_TESTATTACHMENTS\"\r\n            selectedMaster=\"RESelectedTest\"\r\n            onSaveClick={this.onAttachmentSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDATTACHEMENT\"}\r\n            attachments={this.props.Login.masterData.RegistrationTestAttachment || []}\r\n            deleteRecord={this.props.deleteAttachment}\r\n            fetchRecord={this.props.getAttachmentCombo}\r\n            addName={\"AddTestAttachment\"}\r\n            editName={\"EditTestAttachment\"}\r\n            deleteName={\"DeleteTestAttachment\"}\r\n            viewName={\"ViewTestAttachment\"}\r\n            methodUrl={\"TestAttachment\"}\r\n            nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n            subFields={[{ [designProperties.VALUE]: \"stestsynonym\" }, { [designProperties.VALUE]: \"screateddate\" }]}\r\n            userInfo={this.props.Login.userInfo}\r\n            isneedReport = {false}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestAttachment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTATTACHMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestAttachment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTATTACHMENTS\",\r\n                masterList: selectedTestList//this.props.Login.masterData.RESelectedTest\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n        />)\r\n\r\n        this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample &&\r\n            attachmentTabMap.set(\"IDS_SUBSAMPLEATTACHMENTS\", <Attachments\r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                screenName=\"IDS_SUBSAMPLEATTACHMENTS\"\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationSampleAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                masterList={this.props.Login.masterData.RESelectedSubSample}\r\n                masterAlertStatus={\"IDS_SELECTSUBSAMPLETOADDATTACHMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                viewFile={this.props.viewAttachment}\r\n                addName={\"AddSubSampleAttachment\"}\r\n                editName={\"EditSubSampleAttachment\"}\r\n                deleteName={\"DeleteSubSampleAttachment\"}\r\n                viewName={\"ViewSubSampleAttachment\"}\r\n                methodUrl={\"SubSampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                skip={this.props.Login.inputParam ? this.props.Login.inputParam.attachmentskip || 0 : 0}\r\n                take={this.props.Login.inputParam ? this.props.Login.inputParam.attachmenttake || 10 : this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleAttachment\",\r\n                        ntransactionsamplecode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleAttachment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RE_SUBSAMPLE || []\r\n\r\n                }}\r\n                selectedListName=\"IDS_SAMPLEARNO\"\r\n                displayName=\"ssamplearno\"\r\n            />)\r\n        attachmentTabMap.set(\"IDS_SAMPLEATTACHMENTS\",\r\n            <Attachments\r\n                screenName=\"IDS_SAMPLEATTACHMENTS\"\r\n                tabSequence={SideBarSeqno.SAMPLE}\r\n                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                attachments={this.props.Login.masterData.RegistrationAttachment || []}\r\n                deleteRecord={this.props.deleteAttachment}\r\n                onSaveClick={this.onAttachmentSaveClick}\r\n                masterList={this.props.Login.masterData.RESelectedSample}\r\n                masterAlertStatus={\"IDS_SELECTSAMPLETOADDATTACHEMENT\"}\r\n                fetchRecord={this.props.getAttachmentCombo}\r\n                addName={\"AddSampleAttachment\"}\r\n                editName={\"EditSampleAttachment\"}\r\n                deleteName={\"DeleteSampleAttachment\"}\r\n                viewName={\"ViewSampleAttachment\"}\r\n                methodUrl={\"SampleAttachment\"}\r\n                nsubsampleneed={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SampleAttachment\",\r\n                        npreregno,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: this.props.Login.screenName\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SampleAttachment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    masterList: this.props.Login.masterData.RESelectedSample\r\n\r\n                }}\r\n                selectedListName=\"IDS_ARNUMBER\"\r\n                displayName=\"sarno\"\r\n            />)\r\n        return attachmentTabMap;\r\n    }\r\n    testDataStateChange = (event) => {\r\n        switch (this.props.Login.activeTestTab) {\r\n            case \"IDS_TEST\":\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTCOMMENTS\":\r\n                this.setState({\r\n                    testCommentDataState: event.dataState\r\n                });\r\n                break;\r\n            case \"IDS_TESTATTACHMENTS\":\r\n                this.setState({\r\n                    testAttachmentDataState: event.dataState\r\n                });\r\n                break;\r\n            default:\r\n                this.setState({\r\n                    popUptestDataState: event.dataState\r\n                });\r\n                break;\r\n        }\r\n\r\n    }\r\n    commentTabDetail = () => {\r\n        const commentTabMap = new Map();\r\n        let { testskip, testtake, subSampleSkip, subSampleTake } = this.state\r\n        let testList = this.props.Login.masterData.searchedTests ? [...this.props.Login.masterData.searchedTests] : this.props.Login.masterData.RE_TEST || [];\r\n        const editTestCommentsId = this.state.controlMap.has(\"EditTestComment\") && this.state.controlMap.get(\"EditTestComment\").ncontrolcode;\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let ntransactiontestcode = this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\";\r\n        let npreregno = this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\") : \"-1\";\r\n        const ntransactionsamplecode = this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\") : \"-1\";\r\n        let subsampleList = this.props.Login.masterData.RE_SUBSAMPLE || [];\r\n        subsampleList = subsampleList.slice(subSampleSkip, subSampleSkip + subSampleTake);\r\n        let selectedSubSampleList = getSameRecordFromTwoArrays(subsampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n\r\n\r\n        commentTabMap.set(\"IDS_TESTCOMMENTS\", <Comments\r\n            screenName=\"IDS_TESTCOMMENTS\" \r\n            isSampleTestComment={true}\r\n            tabSequence={SideBarSeqno.TEST}\r\n            selectedMaster={selectedTestList}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationTestComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterList={selectedTestList}\r\n            masterAlertStatus={\"IDS_SELECTTESTTOADDCOMMENTS\"}\r\n            addName={\"AddTestComment\"}\r\n            editName={\"EditTestComment\"}\r\n            deleteName={\"DeleteTestComment\"}\r\n            methodUrl={\"TestComment\"}\r\n            isTestComment={false}\r\n            primaryKeyField={\"ntestcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.testDataStateChange}\r\n            masterData={this.props.Login.masterData}\r\n            isneedReport = {false}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"TestComment\",\r\n                    ntransactiontestcode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_TESTCOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"TestComment\",\r\n                ntransactiontestcode,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_TESTCOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: selectedTestList,\r\n                ncontrolCode: editTestCommentsId\r\n            }}\r\n            selectedListName=\"IDS_TESTS\"\r\n            displayName=\"stestsynonym\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n        this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample &&\r\n            commentTabMap.set(\"IDS_SUBSAMPLECOMMENTS\", <Comments\r\n                screenName=\"IDS_SUBSAMPLECOMMENTS\" \r\n                tabSequence={SideBarSeqno.SUBSAMPLE}\r\n                onSaveClick={this.onCommentsSaveClick}\r\n                selectedMaster=\"selectedSubSample\"\r\n                controlMap={this.state.controlMap}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                Comments={this.props.Login.masterData.RegistrationSampleComment || []}\r\n                fetchRecord={this.props.getCommentsCombo}\r\n                addName={\"AddSubSampleComment\"}\r\n                editName={\"EditSubSampleComment\"}\r\n                deleteName={\"DeleteSubSampleComment\"}\r\n                methodUrl={\"SubSampleComment\"}\r\n                masterData={this.props.Login.masterData}\r\n                isTestComment={false}\r\n                masterList={this.props.Login.masterData.RESelectedSubSample}\r\n                masterAlertStatus=\"IDS_SELECTSUBSAMPLETOADDCOMMENTS\"\r\n                primaryKeyField={\"nsamplecommentcode\"}\r\n                dataState={this.state.subSampleCommentDataState}\r\n                dataStateChange={this.subSampledataStateChange}\r\n                deleteParam={\r\n                    {\r\n                        methodUrl: \"SubSampleComment\",\r\n                        ntransactionsamplecode,\r\n                        userInfo: this.props.Login.userInfo,\r\n                        masterData: this.props.Login.masterData,\r\n                        esignRights: this.props.Login.userRoleControlRights,\r\n                        screenName: \"IDS_SUBSAMPLECOMMENTS\"\r\n\r\n                    }\r\n                }\r\n                editParam={{\r\n                    methodUrl: \"SubSampleComment\",\r\n                    ntransactionsamplecode,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SUBSAMPLECOMMENTS\",\r\n                    operation: \"update\",\r\n                    masterList: this.props.Login.masterData.RE_SUBSAMPLE || [],\r\n                    ncontrolCode: this.state.controlMap.has(\"EditSubSampleComment\") && this.state.controlMap.get(\"EditSubSampleComment\").ncontrolcode\r\n                }}\r\n                selectedListName=\"IDS_SAMPLEARNO\"\r\n                displayName=\"ssamplearno\"\r\n                selectedId={this.props.Login.selectedId || null}\r\n            />)\r\n        commentTabMap.set(\"IDS_SAMPLECOMMENTS\", <Comments\r\n            screenName=\"IDS_SAMPLECOMMENTS\"\r\n            tabSequence={SideBarSeqno.SAMPLE}\r\n            onSaveClick={this.onCommentsSaveClick}\r\n            selectedMaster=\"RESelectedSample\"\r\n            controlMap={this.state.controlMap}\r\n            userRoleControlRights={this.state.userRoleControlRights}\r\n            Comments={this.props.Login.masterData.RegistrationComment || []}\r\n            fetchRecord={this.props.getCommentsCombo}\r\n            masterData={this.props.Login.masterData}\r\n            addName={\"AddSampleComment\"}\r\n            editName={\"EditSampleComment\"}\r\n            deleteName={\"DeleteSampleComment\"}\r\n            methodUrl={\"SampleComment\"}\r\n            isTestComment={false}\r\n            masterList={this.props.Login.masterData.RESelectedSample}\r\n            masterAlertStatus=\"IDS_SELECTSAMPLETOADDCOMMENTS\"\r\n            primaryKeyField={\"nregcommentcode\"}\r\n            dataState={this.state.testCommentDataState}\r\n            dataStateChange={this.dataStateChange}\r\n            deleteParam={\r\n                {\r\n                    methodUrl: \"SampleComment\",\r\n                    npreregno,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    esignRights: this.props.Login.userRoleControlRights,\r\n                    screenName: \"IDS_SAMPLECOMMENTS\"\r\n\r\n                }\r\n            }\r\n            editParam={{\r\n                methodUrl: \"SampleComment\",\r\n                npreregno,\r\n                userInfo: this.props.Login.userInfo,\r\n                masterData: this.props.Login.masterData,\r\n                esignRights: this.props.Login.userRoleControlRights,\r\n                screenName: \"IDS_SAMPLECOMMENTS\",\r\n                operation: \"update\",\r\n                masterList: this.props.Login.masterData.RESelectedSample || [],\r\n                ncontrolCode: this.state.controlMap.has(\"EditSampleComment\") && this.state.controlMap.get(\"EditSampleComment\").ncontrolcode\r\n            }}\r\n            selectedListName=\"IDS_ARNUMBER\"\r\n            displayName=\"sarno\"\r\n            selectedId={this.props.Login.selectedId || null}\r\n        />)\r\n\r\n        return commentTabMap;\r\n    }\r\n\r\n\r\n    onInputSwitchOnChange = (event) => {\r\n        if (event.target.name == \"PopupNav\") {\r\n            this.setState({\r\n                enablePropertyPopup: !this.state.enablePropertyPopup\r\n            })\r\n        }\r\n        else {\r\n            this.setState({\r\n                enableAutoClick: !this.state.enableAutoClick\r\n            })\r\n        }\r\n    }\r\n    changePropertyViewClose = (id) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                activeTabIndex: undefined,\r\n                activeTestTab: undefined,\r\n                activeTabId: id\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    changePropertyView = (index, screenName, event, status) => {\r\n\r\n        let id = false;\r\n        if (event && event.ntransactiontestcode) {\r\n            id = event.ntransactiontestcode\r\n        } else if (event && event.ntransactionsamplecode) {\r\n            id = event.ntransactionsamplecode\r\n        } else if (event && event.npreregno) {\r\n            id = event.npreregno\r\n        }\r\n        //console.log(this.state.activeTabId, id , \"=======>\")\r\n        let activeTabIndex\r\n        let activeTabId\r\n        if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n            activeTabIndex = this.state.activeTabIndex !== index ? index : id ? index : false;\r\n            //activeTabId = this.state.activeTabIndex !== index ? true:false;\r\n        }\r\n        if (status != \"click\") {\r\n            if (index) {\r\n                const tabProps = {\r\n                    tabSequence: SideBarSeqno.TEST,\r\n                    screenName: screenName == \"IDS_COMMENTS\" ? \"IDS_TESTCOMMENTS\" : screenName === \"IDS_ATTACHMENTS\" ? \"IDS_TESTATTACHMENTS\" : screenName,\r\n                    activeTabIndex,\r\n                    //activeTabId\r\n                }\r\n                this.onTabChange(tabProps);\r\n            }\r\n            // if (index == SideBarTabIndex.RESULT) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_RESULTS\",\r\n            //         activeTabIndex,\r\n            //         //activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n\r\n            // else if (index == SideBarTabIndex.ATTACHMENTS) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_TESTATTACHMENTS\",\r\n            //         activeTabIndex,\r\n            //        // activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n            // else if (index == SideBarTabIndex.COMMENTS) {\r\n            //     const tabProps = {\r\n            //         tabSequence: SideBarSeqno.TEST,\r\n            //         screenName: \"IDS_TESTCOMMENTS\",\r\n            //         activeTabIndex,\r\n            //         //activeTabId\r\n            //     }\r\n            //     this.onTabChange(tabProps);\r\n            // }\r\n            // else {\r\n            //     if (window.innerWidth > 992 && event && this.state.enableAutoClick || !event) {\r\n\r\n            //         const updateInfo = {\r\n            //             typeName: DEFAULT_RETURN,\r\n            //             data: {\r\n            //                 activeTabIndex: this.state.activeTabIndex !== index ? index : id ? index : false,\r\n            //                 activeTabId: id\r\n            //             }\r\n            //         }\r\n            //         this.props.updateStore(updateInfo);\r\n            //     }\r\n            // }\r\n        }\r\n    }\r\n\r\n\r\n    onTabChange = (tabProps) => {\r\n        const activeTestTab = tabProps.screenName;\r\n        const tabseqno = tabProps.tabSequence;\r\n        // if (activeTestTab !== this.props.Login.activeTestTab) {\r\n        if (tabseqno == SideBarSeqno.TEST) {\r\n            if (this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.length > 0) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                    RESelectedTest: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest : \"\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: activeTestTab,\r\n                    screenName: activeTestTab,\r\n                    //activeTestTab,\r\n                    resultDataState: this.state.resultDataState,\r\n                    instrumentDataState: this.state.instrumentDataState,\r\n                    materialDataState: this.state.materialDataState,\r\n                    taskDataState: this.state.taskDataState,\r\n                    documentDataState: this.state.documentDataState,\r\n                    resultChangeDataState: this.state.resultChangeDataState,\r\n                    testCommentDataState: this.state.testCommentDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex,\r\n                    activeTabId: tabProps.activeTabId ? tabProps.activeTabId : this.state.activeTabId\r\n                }\r\n                this.props.getTestChildTabREDetail(inputData, true);\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTEST\" }));\r\n            }\r\n        }\r\n        else if (tabseqno == SideBarSeqno.SUBSAMPLE) {\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    selectedSubSample: this.props.Login.masterData.RESelectedSubSample,\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(item => item.ntransactionsamplecode).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeTestTab,\r\n                    activeSubSampleTab: activeTestTab,\r\n                    subSampleCommentDataState: this.state.subSampleCommentDataState,\r\n                    subSampleAttachmentDataState: this.state.subSampleAttachmentDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n                }\r\n                this.props.getSubSampleChildTabDetail(inputData)\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLE\" }))\r\n            }\r\n        }\r\n        else {\r\n\r\n            if (activeTestTab !== this.props.Login.activeTestTab) {\r\n                let inputData = {\r\n                    masterData: this.props.Login.masterData,\r\n                    RESelectedSample: this.props.Login.masterData.RESelectedSample,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(item => item.npreregno).join(\",\") : \"-1\",\r\n                    userinfo: this.props.Login.userInfo,\r\n                    screenName: activeTestTab,\r\n                    activeSampleTab: activeTestTab,\r\n                    activeTestTab,\r\n                    sampleChangeDataState: this.state.sampleChangeDataState,\r\n                    activeTabIndex: tabProps.activeTabIndex ? tabProps.activeTabIndex : this.state.activeTabIndex\r\n                }\r\n                this.props.getSampleChildTabDetail(inputData)\r\n            }\r\n        }\r\n\r\n        //}\r\n    }\r\n    mandatoryFieldsForAdditionalInfo = () => { \r\n        let mandatoryFieldsAdditionalInfo=[] \r\n        if(this.props.Login.showMultiSelectCombo){\r\n            mandatoryFieldsAdditionalInfo.push({ \"idsName\": this.props.Login.masterData['salertmessage'], \"dataField\": \"ntestgrouptestpredefsubcode\", \"mandatory\": true,\r\n             \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"file\" })\r\n        }else{\r\n            mandatoryFieldsAdditionalInfo.push({ \"idsName\": this.props.Login.masterData['salertmessage'], \"dataField\": \"ntestgrouptestpredefsubcode\", \"mandatory\": true,\r\n            \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"file\" })\r\n        } \r\n        return mandatoryFieldsAdditionalInfo; \r\n    }\r\n    shouldComponentUpdate (nextProps,nextState) {  \r\n        if (this.props.Login.openModal&&\r\n            this.props.Login.screenName === 'IDS_MATERIAL'&&nextState.isMaterialInitialRender===false&&\r\n          (nextState.selectedRecordMaterialForm !==this.state.selectedRecordMaterialForm)) {\r\n            return false;\r\n          }\r\n          else if (this.props.Login.openModal&&\r\n            this.props.Login.screenName === 'IDS_INSTRUMENT'&&nextState.isInstrumentInitialRender===false&&\r\n          (nextState.selectedRecordInstrumentForm !==this.state.selectedRecordInstrumentForm)) {\r\n            return false;\r\n          }\r\n       else if (this.props.Login.openModal&&\r\n          this.props.Login.screenName === 'IDS_RESULTENTRY'&&nextState.isParameterInitialRender===false&&\r\n        (nextState.parameterResults !==this.state.parameterResults)) {\r\n          return false;\r\n        }\r\n        else if (this.props.Login.openModal&&\r\n            this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER'&&nextState.isaddSampleRender===false&&\r\n          (nextState.parameterResults1 !==this.state.parameterResults1)) {\r\n            return false;\r\n            \r\n          }\r\n        \r\n        else if(\r\n            this.props.Login.openModal&&\r\n          this.props.Login.screenName === 'IDS_TASK'&&nextState.isTaskInitialRender===false&&\r\n            (nextState.selectedRecordTaskForm!==this.state.selectedRecordTaskForm)){\r\n            return false;\r\n        }  else {\r\n          return true;\r\n        }\r\n    }\r\n    render() {  \r\n        // const auditInfoFields = [{ \"fieldName\": \"sarno\", \"label\": \"IDS_ARNO\" }, \r\n        // { \"fieldName\": \"spatientid\", \"label\": \"IDS_PATIENTID\" },   \r\n        // { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n        // { \"fieldName\": \"sage\", \"label\": \"IDS_AGE\" },\r\n        // { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n        // { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\r\n        // { \"fieldName\": \"sregdate\", \"label\": \"IDS_REGISTRATIONDATE\" },\r\n        // { \"fieldName\": \"scompletedate\", \"label\": \"IDS_COMPLETEDDATEANDTIME\" }\r\n        \r\n        // ];\r\n        const auditInfoFields = [\r\n            { \"label\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"fieldName\": \"sarno\",},\r\n            { \"fieldName\": \"stestsynonym\", \"label\": \"IDS_TEST\" },\r\n            { \"fieldName\": \"sfirstname\", \"label\": \"IDS_PATIENTNAME\" },\r\n            { \"fieldName\": \"sgendername\", \"label\": \"IDS_GENDER\" },\r\n     \r\n            \r\n            ];\r\n        // this.feildsForGrid =\r\n        // [\r\n        //   // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" }, \r\n        //   { \"idsName\": \"IDS_ARNO\", \"dataField\": \"sarno\", \"width\": \"100px\" },\r\n        //   { \"idsName\": \"IDS_SUBSAMPLE\", \"dataField\": \"ssamplearno\", \"width\": \"100px\" },      \r\n        //   { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"100px\" },\r\n        //   { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"100px\" },\r\n        //   { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n        // ];\r\n        this.feildsForGrid =\r\n    [\r\n      // { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_REPORTREFNO\", \"dataField\": \"sreportno\", \"width\": \"200px\" },   \r\n      { \"idsName\": this.props.Login.genericLabel && this.props.Login.genericLabel[\"ARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n      { \"idsName\":  this.props.Login.genericLabel && this.props.Login.genericLabel[\"SubARNo\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode], \"dataField\": \"ssamplearno\", \"width\": \"200px\" },             \r\n      { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametersynonym\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_RESULT\", \"dataField\": \"sfinal\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_GRADE\", \"dataField\": \"sgradename\", \"width\": \"200px\" },\r\n      { \"idsName\": \"IDS_REGISTRATIONDATE\", \"dataField\": \"sregdate\", \"width\": \"200px\" },\r\n      \r\n     \r\n      \r\n    ];\r\n       // console.log(this.state.enlLink);\r\n       // console.log(this.state.enlLink);\r\n        let sampleListRE = this.props.Login.masterData.RE_SAMPLE ? sortData(this.props.Login.masterData.RE_SAMPLE, \"descending\", \"npreregno\") : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ?  this.props.Login.masterData.RE_SUBSAMPLE : []\r\n        //let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? sortData(this.props.Login.masterData.RE_SUBSAMPLE, 'descending', 'ntransactionsamplecode') : [];\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? sortData(this.props.Login.masterData.RE_TEST,'descending','ntransactiontestcode') : [] //? sortData(this.props.Login.masterData.RE_TEST, 'descending', 'ntransactiontestcode') : [];\r\n        let subSampleListRE = this.props.Login.masterData.RE_SUBSAMPLE ? this.props.Login.masterData.RE_SUBSAMPLE : []\r\n\r\n        //let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST : []\r\n        let testListRE = this.props.Login.masterData.RE_TEST ? this.props.Login.masterData.RE_TEST  : []\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        // let obj = this.covertDatetoString(startDate, endDate)\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n\r\n       \r\n        let subSampleGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample &&   this.props.Login.masterData.RESelectedSample.map(sample => sample&&sample.npreregno).join(\",\"),\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            subSampleSkip: this.state.subSampleSkip,\r\n            subSampleTake: this.state.subSampleTake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            sampleChangeDataState: this.state.sampleChangeDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            searchSubSampleRef: this.searchSubSampleRef,\r\n            searchTestRef: this.searchTestRef,\r\n            nneedtemplatebasedflow: (this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtemplatebasedflow) || false,\r\n            //Aravindh\r\n            checkBoxOperation: 3,\r\n            nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1,\r\n            activeTabIndex : this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 8 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 8 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n        }\r\n        let testGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntranscode: String(this.props.Login.masterData.realFilterStatusValue &&this.props.Login.masterData.realFilterStatusValue.ntransactionstatus&& (this.props.Login.masterData.realFilterStatusValue.ntransactionstatus).toString()),\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample&&sample.npreregno).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            activeSampleKey: this.props.Login.activeTestTab || 'IDS_IDS_SAMPLEINFO',\r\n            activeSubSampleTab: this.props.Login.activeTestTab || \"IDS_SUBSAMPLEATTACHMENTS\",\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            subSampleSkip: this.state.subSampleSkip,\r\n            subSampleTake: this.state.subSampleTake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            historyDataState: this.state.historyDataState,\r\n            samplePrintHistoryDataState: this.state.samplePrintHistoryDataState,\r\n            sampleHistoryDataState: this.state.sampleHistoryDataState,\r\n            // activeTabIndex: this.state.enableAutoClick ? 1 : this.state.activeTabIndex ? this.state.activeTabIndex : 0,\r\n            activeTabIndex : this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n            nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n        }\r\n        let testChildGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample&&sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample&&sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            activeTabIndex : this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n            //activeTabIndex: this.state.enableAutoClick ? this.state.activeTabIndex : this.state.activeTabIndex ? this.state.activeTabIndex : 1,\r\n            nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n        }\r\n\r\n    \r\n        const filterSampleParam = {\r\n            inputListName: \"RE_SAMPLE\",\r\n            selectedObject: \"RESelectedSample\",\r\n            primaryKeyField: \"npreregno\",\r\n            fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n            childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 2,\r\n                nflag: 2,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                //nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample  ? true : false,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\r\n                nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList: this.state.sampleSearchField,\r\n            changeList: [\"RE_SUBSAMPLE\", \"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSample\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n\r\n        const filterSubSampleParam = {\r\n            inputListName: \"RE_SUBSAMPLE\",\r\n            selectedObject: \"RESelectedSubSample\",\r\n            primaryKeyField: \"ntransactionsamplecode\",\r\n            fetchUrl: \"resultentrybysample/getResultEntrySubSampleDetails\",\r\n            childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n            fecthInputObject: {\r\n                ntype: 3,\r\n                nflag: 3,\r\n                ntransactiontestcode: 0,\r\n                masterData: this.props.Login.masterData,\r\n                userinfo: this.props.Login.userInfo,\r\n                nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n                ntranscode: String(this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus ? this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString() : 0 : 0),\r\n                ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                //npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                fromdate: fromDate,\r\n                todate: toDate,\r\n                activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n                nneedsubsample:  this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample  ? true : false,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                checkBoxOperation: 3,\r\n                nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            // searchFieldList: [\"sarno\", \"ssampletypestatus\"],\r\n            searchFieldList:this.state.subsampleSearchField,\r\n            changeList: [\"RE_TEST\", \"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedSubSample\", \"RESelectedTest\"]\r\n        };\r\n        let filterTestParam = {\r\n            inputListName: \"RE_TEST\",\r\n            selectedObject: \"RESelectedTest\",\r\n            primaryKeyField: \"ntransactiontestcode\",\r\n            fetchUrl: this.getActiveTestURL(),\r\n            fecthInputObject: {\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                userinfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode || -1,\r\n                nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n                nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            searchFieldList: this.state.testSearchField,\r\n            changeList: [\"TestParameters\",\r\n                \"ResultChangeHistory\", \"ApprovalHistory\", \"ResultUsedInstrument\",\r\n                \"ResultUsedTasks\", \"RegistrationTestAttachment\", \"RegistrationTestComment\",\r\n                \"RegistrationAttachment\", \"RESelectedTest\"],\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            nneedsubsample: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedsubsample  ? true : false,\r\n            checkBoxOperation: 3,\r\n            //nworlistcode : (this.props.Login.masterData.defaultWorklistvalue && this.props.Login.masterData.defaultWorklistvalue.nworklistcode) || -1\r\n\r\n        }\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSampleRef,\r\n                primaryKeyField: \"npreregno\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: filterSampleParam,\r\n                selectedObject: \"RESelectedSample\",\r\n                inputListName: \"RE_SAMPLE\",\r\n                updatedListname: \"\",\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedSubSample\",\r\n                updatedListname: \"updatedSubSample\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchSubSampleRef,\r\n                primaryKeyField: \"ntransactionsamplecode\",\r\n                fetchUrl: \"resultentrybysample/getResultEntryDetails\",\r\n                fecthInputObject: testGetREParam,\r\n                selectedObject: \"RESelectedSubSample\",\r\n                childRefs: [{ ref: this.searchTestRef, childFilteredListName: \"searchedTest\" }],\r\n                inputListName: \"RE_SUBSAMPLE\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }, {\r\n                filteredListName: \"searchedTest\",\r\n                clearFilter: \"yes\",\r\n                searchRef: this.searchTestRef,\r\n                primaryKeyField: \"ntransactiontestcode\",\r\n                fetchUrl: this.getActiveTestURL(),\r\n                childRefs: [{ ref: this.searchSubSampleRef, childFilteredListName: \"searchedSubSample\" }, { ref: this.searchSampleRef, childFilteredListName: \"\" }],\r\n                fecthInputObject: testChildGetREParam,\r\n                selectedObject: \"RESelectedTest\",\r\n                inputListName: \"RE_TEST\",\r\n                updatedListname: \"updatedTest\",\r\n                unchangeList: [\"realSampleTypeValue\", \"SampleTypeValue\", \"realRegTypeValue\", \"RegTypeValue\", \"realRegSubTypeValue\", \"RegSubTypeValue\",\r\n                    \"realApprovalVersionValue\", \"ApprovalVersionValue\", \"realFilterStatusValue\", \"FilterStatusValue\", \"fromDate\", \"toDate\",\r\n                    \"UserSectionValue\", \"SampleType\", \"RegType\", \"RegSubType\", \"ApprovalVersion\", \"JobStatus\", \"JobStatusValue\", \"FilterStatus\"]\r\n            }];\r\n\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_SAMPLETYPE\",\r\n            //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            // }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            }, {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n            }, \r\n            // {\r\n            //     \"label\": \"IDS_CONFIGVERSION\",\r\n            //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            // },\r\n            {\r\n                \"label\": \"IDS_TEST\",\r\n                \"value\": this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.stestsynonym ? this.props.Login.masterData.realTestcodeValue.stestsynonym : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_TESTSTATUS\",\r\n                \"value\": this.props.Login.masterData.realFilterStatusValue ? this.props.Login.masterData.realFilterStatusValue.sfilterstatus : \"NA\"\r\n            }\r\n        ]\r\n\r\n        if(this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode)\r\n        {\r\n            this.breadCrumbData.push({\r\n                \"label\": \"IDS_WORKLIST\",\r\n                \"value\": this.props.Login.masterData.realWorklistCodeValue ? this.props.Login.masterData.realWorklistCodeValue.sworklistno : \"NA\"\r\n            });\r\n        }\r\n        if(this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode)\r\n        {\r\n            this.breadCrumbData.push({\r\n                \"label\": \"IDS_BATCH\",\r\n                \"value\": this.props.Login.masterData.realBatchCodeValue ? this.props.Login.masterData.realBatchCodeValue.sbatcharno : \"NA\"\r\n            });\r\n        }\r\n\r\n        const testStartId = this.state.controlMap.has(\"TestStart\") && this.state.controlMap.get(\"TestStart\").ncontrolcode\r\n        const resultEnterId = this.state.controlMap.has(\"ResultEnter\") && this.state.controlMap.get(\"ResultEnter\").ncontrolcode\r\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode\r\n        const setDefaultId = this.state.controlMap.has(\"SetDefaultResult\") && this.state.controlMap.get(\"SetDefaultResult\").ncontrolcode\r\n\r\n        const editSourceMethodId = this.state.controlMap.has(\"EditSourceMethod\") && this.state.controlMap.get(\"EditSourceMethod\").ncontrolcode\r\n        const addResultUsedInstrumentId = this.state.controlMap.has(\"AddResultUsedInstrument\") && this.state.controlMap.get(\"AddResultUsedInstrument\").ncontrolcode\r\n        const addResultUsedMaterailId = this.state.controlMap.has(\"AddResultUsedMaterial\") && this.state.controlMap.get(\"AddResultUsedMaterial\").ncontrolcode\r\n        const adhocId = this.state.controlMap.has(\"AdhocParameter\") && this.state.controlMap.get(\"AdhocParameter\").ncontrolcode\r\n        const openELNSheet = this.state.controlMap.has(\"OpenELNSheet\") && this.state.controlMap.get(\"OpenELNSheet\").ncontrolcode\r\n        const patientPreviousResultView = this.state.controlMap.has(\"PatientPreviousResultView\") && this.state.controlMap.get(\"PatientPreviousResultView\").ncontrolcode\r\n        const identicalResultEnterId = this.state.controlMap.has(\"IdenticalResultEnter\") && this.state.controlMap.get(\"IdenticalResultEnter\").ncontrolcode\r\n\r\n\r\n        const mandatoryFieldsInstrument = [{ \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"ninstrumentcatcode\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"ninstrumentcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_FORMDATE\", \"dataField\": \"dfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TODATE\", \"dataField\": \"dtodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntzfromdate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_TIMEZONE\", \"dataField\": \"ntztodate\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n     \r\n        const mandatoryFieldsMaterial = [{ \"mandatory\": true, \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"nmaterialtypecode\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"nmaterialcatcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MATERIAL\", \"dataField\": \"nmaterialcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MATERIALINVENTORY\", \"dataField\": \"nmaterialinventorycode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequantity\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_USEDQTY\", \"dataField\": \"susedquantity\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_UNIT\", \"dataField\": \"sunitname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n\r\n    ]\r\n        const mandatoryFieldsTask = [{ \"mandatory\": true, \"idsName\": \"IDS_PREANALYSISTIME\", \"dataField\": \"spreanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_PREPARATIONTIME\", \"dataField\": \"spreparationtime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_ANALYSISTIME\", \"dataField\": \"sanalysistime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_MISCTIME\", \"dataField\": \"smisctime\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        ]\r\n\r\n        const mandatoryFieldsTestMethodSource = [{ \"mandatory\": true, \"idsName\": \"IDS_SOURCE\", \"dataField\": \"nsourcecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_METHOD\", \"dataField\": \"nmethodcode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }]\r\n\r\n\r\n        const mandatoryEnforceResult = [\r\n        { \"mandatory\": true, \"idsName\": \"IDS_RESULTS\", \"dataField\": \"senforceresult\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"mandatory\": true, \"idsName\": \"IDS_COMMENTS\", \"dataField\": \"senforceresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n       // { \"mandatory\": true, \"idsName\": \"IDS_PASSFLAG\", \"dataField\": \"ngradecode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"textbox\" },\r\n        ]\r\n\r\n        const mandatoryFieldsParameter = [{ \"mandatory\": true, \"idsName\": \"IDS_PARAMETERCOMMENTS\", \"dataField\": \"sresultcomment\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }]\r\n        const validateFormulaMandyFields = this.state.validateFormulaMandyFields;\r\n\r\n        const reportPreviewId = this.state.controlMap.has(\"SamplePreviewReport\") && this.state.controlMap.get(\"SamplePreviewReport\").ncontrolcode\r\n        const testDesign = <ContentPanel>\r\n            <Card>\r\n                <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                    <span style={{ display: \"inline-block\" }}>\r\n                        <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_TEST\" })}</h4>\r\n                    </span>\r\n                </Card.Header>\r\n                <Card.Body className='p-0 sm-pager'>\r\n                    <TransactionListMasterJsonView\r\n                        progressTimerStart={this.props.Login.progressTimerStart||false}\r\n                        clickIconGroup = {true}\r\n                        cardHead={94}\r\n                        //paneHeight={this.state.initialVerticalWidth}\r\n                        // paneHeight={`${testListRE && testListRE !== null && testListRE.length > 0 ? testListRE.length * 13 : 5}vh`}\r\n                        masterList={this.props.Login.masterData.searchedTest || testListRE}\r\n                        selectedMaster={this.props.Login.masterData.RESelectedTest}\r\n                        primaryKeyField=\"ntransactiontestcode\"\r\n                        //getMasterDetail={this.props.getTestChildTabREDetail}\r\n                        getMasterDetail={(event, status) => { this.props.getTestChildTabREDetail(event, status); this.changePropertyView(1, \"IDS_RESULTS\", event, \"click\") }}\r\n                        inputParam={testChildGetREParam}\r\n                        subFieldsLabel={true}\r\n                        additionalParam={[]}\r\n                        mainField=\"stestsynonym\"\r\n                        selectedListName=\"RESelectedTest\"\r\n                        objectName=\"test\"\r\n                        listName=\"IDS_TEST\"\r\n                        pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                        showStatusLink={true}\r\n                        statusFieldName=\"stransdisplaystatus\"\r\n                        statusField=\"ntransactionstatus\"\r\n                        needMultiSelect={true}\r\n                        subFields={this.state.testListColumns || []}\r\n                        moreField={this.state.testMoreField}\r\n                        needValidation={false}\r\n                        needFilter={false}\r\n                        filterColumnData={this.props.filterTransactionList}\r\n                        searchListName=\"searchedTest\"\r\n                        searchRef={this.searchTestRef}\r\n                        filterParam={filterTestParam}\r\n                        selectionField=\"ntransactionstatus\"\r\n                        showStatusName={true}\r\n                        selectionFieldName=\"sfilterstatus\"\r\n                        childTabsKey={[\"TestParameters\", \"ResultUsedInstrument\", \"ResultUsedTasks\", \"RegistrationTestAttachment\",\r\n                            \"ResultChangeHistory\", \"RegistrationTestComment\", \"ResultChangeHistory\"\r\n                            // , \"RegistrationComment\"\r\n                        ]}\r\n                        // selectionList={this.props.Login.masterData.REFilterStatus && this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus === transactionStatus.ALL ? this.props.Login.masterData.REFilterStatus : []}\r\n                        selectionList={this.state.selectedFilter}\r\n                        skip={this.state.testskip}\r\n                        take={this.state.testtake}\r\n                        handlePageChange={this.handleTestPageChange}\r\n                        selectionColorField=\"scolorhexcode\"\r\n                        showMoreResetList={true}\r\n                        showMoreResetListName=\"RE_SAMPLE\"\r\n                        buttonCount={5}\r\n                        jsonField={'jsondata'}\r\n                        jsonDesignFields={true}\r\n                        actionIcons={\r\n                             [ \r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_OPENELNSHEET\" }), controlname: \"elnimage\", hidden: this.state.userRoleControlRights.indexOf(openELNSheet) === -1, onClick: this.openClosePortal, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo,elnUserInfo: this.props.Login.elnUserInfo,elnSite: this.props.Login.elnSite} },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_PREVIOUSRESULTVIEW\" }), controlname: \"faEye\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(patientPreviousResultView)  === -1, onClick: this.viewSample, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo} },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADHOCPARAMETER\" }), controlname: \"faAdhocParameter\", dataplace: \"left\", \r\n                              hidden: this.state.userRoleControlRights.indexOf(adhocId) === -1,\r\n                              onClick: this.adhocTestParameter, objectName: \"test\",\r\n                                  inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, adhocId } },\r\n                            //{ title: this.props.intl.formatMessage({ id: \"IDS_EDITMETHODSSOURCE\" }), controlname: \"faPencilAlt\", dataplace: \"left\", hidden: this.state.userRoleControlRights.indexOf(editSourceMethodId) === -1, onClick: this.testMethodSourceEdit, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, editSourceMethodId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADDINSTRUMENT\" }), controlname: \"faMicroscope\", hidden: false, onClick: this.addREInstrument, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedInstrumentId } },\r\n                            { title: this.props.intl.formatMessage({ id: \"IDS_ADDMATERIAL\" }), controlname: \"faFlask\", hidden: false, onClick: this.props.addREMaterial, objectName: \"test\", inputData: { masterData: this.props.Login.masterData, userInfo: this.props.Login.userInfo, addResultUsedMaterailId } }\r\n                                // { title: \"Add Task\", controlname: \"faTasks\", hidden: this.state.userRoleControlRights.indexOf(addResultUsedTaskId) === -1, onClick: this.addResultEntryTask, objectName: \"test\", inputData: { addResultUsedTaskId } }\r\n                            ]\r\n                        }\r\n                        commonActions={\r\n                            // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                            <ProductList className=\"d-flex justify-content-end icon-group-wrap\">\r\n                                {testListRE.length > 0 ?\r\n                                    <>\r\n                                        {/* <ReactTooltip place=\"bottom\" /> */}\r\n                                        {/* <Nav.Link data-for=\"tooltip-common-wrap\" data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)}>\r\n                                                                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                                                            </Nav.Link> */}\r\n\r\n                                        {this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nneedtestinitiate ?\r\n\r\n                                            <FontIconWrap\r\n                                                //  data-for=\"tooltip-common-wrap\" \r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_TESTSTART\" })} hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                                className=\"btn btn-circle outline-grey ml-2\" role=\"button\"\r\n                                                onClick={() => this.testStartActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest,\r\n                                                    this.props.Login.userInfo, testStartId, this.state.testskip, this.state.testtake)} >\r\n                                                <FontAwesomeIcon icon={faPlay} />\r\n                                                \r\n                                            </FontIconWrap> : \"\"}\r\n\r\n\r\n\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(resultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultGetModule(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)} >\r\n                                            <FontAwesomeIcon icon={faAddressBook} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\" \r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_FILLDEFAULTRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(setDefaultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.defaultActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.masterData.RESelectedSample, setDefaultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faPencilRuler} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\"\r\n                                              data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })} hidden={this.state.userRoleControlRights.indexOf(completeResultId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake,3)}>\r\n                                            <FontAwesomeIcon icon={faCheckCircle} />\r\n                                        </Nav.Link>\r\n                                        <Nav.Link\r\n                                            //data-for=\"tooltip-common-wrap\" \r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_IMPORTRESULT\" })} hidden={true} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.resultImport(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake)}>\r\n                                            <FontAwesomeIcon icon={faFileImport} />\r\n                                        </Nav.Link>\r\n                                    </>\r\n                                    : \"\"}\r\n                            </ProductList>\r\n\r\n                            // </Tooltip>\r\n                        }\r\n                    />\r\n                </Card.Body>\r\n            </Card>\r\n        </ContentPanel>\r\n\r\n        let mainDesign = \"\";\r\n        if (this.props.Login.masterData.realRegSubTypeValue &&\r\n            this.props.Login.masterData.realRegSubTypeValue.nneedsubsample) {\r\n            mainDesign = <SplitterLayout borderColor=\"#999\"\r\n                primaryIndex={1} percentage={true}\r\n                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                primaryMinSize={40}\r\n                secondaryMinSize={30}\r\n            >\r\n                <Card>\r\n                    <Card.Header style={{ borderBottom: \"0px\" }}>\r\n                        <span style={{ display: \"inline-block\", marginTop: \"1%\" }}>\r\n                            <h4 className=\"card-title\">{this.props.intl.formatMessage({ id: \"IDS_SUBSAMPLE\" })}</h4>\r\n                        </span>\r\n                    </Card.Header>\r\n                    <Card.Body className='p-0 sm-pager'>\r\n                        <TransactionListMasterJsonView\r\n                            cardHead={94}\r\n                            //paneHeight={this.state.initialVerticalWidth}\r\n                            masterList={this.props.Login.masterData.searchedSubSample || subSampleListRE}\r\n                            selectedMaster={this.props.Login.masterData.RESelectedSubSample}\r\n                            primaryKeyField=\"ntransactionsamplecode\"\r\n                            getMasterDetail={this.props.getTestREDetail}\r\n                            inputParam={testGetREParam}\r\n                            additionalParam={[]}\r\n                            mainField=\"ssamplearno\"\r\n                            selectedListName=\"RESelectedSubSample\"\r\n                            objectName=\"subSample\"\r\n                            listName=\"IDS_SUBSAMPLE\"\r\n                            jsonField={'jsondata'}\r\n                            jsonDesignFields={true}\r\n                            subFields={this.state.DynamicSubSampleColumns}\r\n                            moreField={this.state.subSampleMoreField}\r\n                            needValidation={false}\r\n                            needMultiSelect={true}\r\n                            needFilter={false}\r\n                            skip={this.state.subSampleSkip}\r\n                            take={this.state.subSampleTake}\r\n                            pageSize={this.props.Login.settings && this.props.Login.settings[13].split(\",\").map(setting => parseInt(setting))}\r\n                            handlePageChange={this.handleSubSamplePageChange}\r\n                            showStatusLink={true}\r\n                            showStatusName={false}\r\n                            selectionList={this.state.selectedFilter}\r\n                            statusFieldName=\"stransdisplaystatus\"\r\n                            statusField=\"ntransactionstatus\"\r\n                            selectionFieldName=\"sfilterstatus\"\r\n                            selectionField=\"ntransactionstatus\"\r\n                            childTabsKey={[\"RE_TEST\", \"Registration\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"]}\r\n                            filterColumnData={this.props.filterTransactionList}\r\n                            searchListName=\"searchedSubSample\"\r\n                            searchRef={this.searchSubSampleRef}\r\n                            filterParam={filterSubSampleParam}\r\n                            subFieldsFile={true}\r\n                        />\r\n                    </Card.Body>\r\n                </Card>\r\n                {testDesign}\r\n            </SplitterLayout>\r\n        }\r\n        else {\r\n            mainDesign = testDesign\r\n        }\r\n\r\n        return (\r\n            <>\r\n                {/* <PerfectScrollbar> */}\r\n                <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters={true} bsPrefix=\"toolbar-top\">\r\n                        {/* sticky_head_parent ref={(parentHeight) => { this.parentHeight = parentHeight }} secondaryInitialSize={40}*/}\r\n                        <Col md={12} className=\"parent-port-height\">\r\n                            <ListWrapper className={`vertical-tab-top ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                <div className={`tab-left-area ${this.state.activeTabIndex ? 'active' : \"\"} ${this.state.enablePropertyPopup ? 'active-popup' : \"\"}`}>\r\n                                    <SplitterLayout borderColor=\"#999\" percentage={true} primaryIndex={1}\r\n                                        secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                        //onSecondaryPaneSizeChange={this.paneSizeChange} \r\n                                        primaryMinSize={40} secondaryMinSize={20}>\r\n                                        <div className='toolbar-top-inner'>\r\n                                            <TransactionListMasterJsonView\r\n                                                clickIconGroup={true}\r\n                                                // paneHeight={this.state.parentHeight}\r\n                                                splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                                masterList={this.props.Login.masterData.searchedSample || sampleListRE}\r\n                                                selectedMaster={this.props.Login.masterData.RESelectedSample}\r\n                                                primaryKeyField=\"npreregno\"\r\n                                                getMasterDetail={this.props.getsubSampleREDetail}\r\n                                                inputParam={subSampleGetREParam}\r\n                                                additionalParam={['napprovalversioncode']}\r\n                                                mainField=\"sarno\"\r\n                                                selectedListName=\"RESelectedSample\"\r\n                                                objectName=\"sample\"\r\n                                                listName=\"IDS_SAMPLE\"\r\n                                                needValidation={false}\r\n                                                validationKey=\"napprovalversioncode\"\r\n                                                validationFailMsg=\"IDS_SELECTSAMPLESOFSAMPLEAPPROVALVERSION\"\r\n                                                subFields={this.state.DynamicSampleColumns || []}\r\n                                                moreField={this.state.sampleMoreField}\r\n                                                needFilter={true}\r\n                                                needMultiSelect={true}\r\n                                                showFilter={this.props.Login.showFilter}\r\n                                                closeFilter={this.closeFilter}\r\n                                                onFilterSubmit={this.onREFilterSubmit}\r\n                                                filterColumnData={this.props.filterTransactionList}\r\n                                                searchListName=\"searchedSample\"\r\n                                                searchRef={this.searchSampleRef}\r\n                                                handlePageChange={this.handlePageChange}\r\n                                                filterParam={filterSampleParam}\r\n                                                skip={this.state.skip}\r\n                                                take={this.state.take}\r\n                                                hidePaging={false}\r\n                                                showStatusLink={true}\r\n                                                showStatusName={true}\r\n                                                statusFieldName=\"stransdisplaystatus\"\r\n                                                statusField=\"ntransactionstatus\"\r\n                                                //splitModeClass={this.state.splitChangeWidthPercentage && this.state.splitChangeWidthPercentage > 50 ? 'split-mode' : this.state.splitChangeWidthPercentage > 40 ? 'split-md' : ''}\r\n                                                childTabsKey={[\"RegistrationAttachment\", \"RE_SUBSAMPLE\", \"RE_TEST\", \"SampleApprovalHistory\", \"RegistrationComment\", \"RegistrationSampleComment\", \"RegistrationSampleAttachment\"]}\r\n                                                selectionList={this.state.selectedFilter}\r\n                                                selectionColorField=\"scolorhexcode\"\r\n                                                selectionFieldName=\"sfilterstatus\"\r\n                                                selectionField=\"ntransactionstatus\"\r\n                                                jsonField={'jsondata'}\r\n                                                jsonDesignFields={true}\r\n                                                callCloseFunction={true}\r\n                                                filterComponent={[\r\n                                                    {\r\n                                                        \"Sample Filter\": <ResultEntryFilter\r\n                                                            fromDate={this.props.Login.masterData.fromDate ? //new Date(this.props.Login.masterData.fromDate) \r\n                                                                rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate)\r\n                                                                : new Date()}\r\n                                                            toDate={this.props.Login.masterData.toDate ? //new Date(this.props.Login.masterData.toDate) \r\n                                                                rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate)\r\n                                                                : new Date()}\r\n                                                            SampleType={this.state.SampleType || []}\r\n                                                            SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                                            RegType={this.state.RegistrationType || []}\r\n                                                            RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                                            RegSubType={this.state.RegistrationSubType || []}\r\n                                                            RegSubTypeValue={this.props.Login.masterData.defaultRegistrationSubType || []}\r\n                                                            DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                                            FilterStatus={this.state.REFilterStatus || []}\r\n                                                            FilterStatusValue={this.props.Login.masterData.defaultFilterStatus || []}\r\n                                                            ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                                            ApprovalVersionValue={this.props.Login.masterData.defaultApprovalConfigVersion || []}\r\n                                                            REJobStatus={this.state.REJobStatus || []}\r\n                                                            JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                                            Test={this.state.Testvalues || []}\r\n                                                            Batch={this.state.Batchvalues || []}\r\n                                                            BatchValue = {this.props.Login.masterData.defaultBatchvalue || []}\r\n                                                            Worklist={this.state.Worklistvalues || []}\r\n                                                            WorklistValue = {this.props.Login.masterData.defaultWorklistvalue || []}\r\n                                                            TestValue={this.props.Login.masterData.defaultTestvalues || []}\r\n                                                            ConfigurationFilter={this.state.ConfigurationFilterValues || []}\r\n                                                            ConfigurationFilterValue = {this.props.Login.masterData.defaultConfigurationFilterValue || []}\r\n                                                            onFilterComboChange={this.onFilterComboChange}\r\n                                                            handleDateChange={this.handleDateChange}\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                                            DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                                        />\r\n                                                    }\r\n                                                ]}\r\n                                                actionIcons={\r\n                                                    [this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode === RegistrationType.PLASMA_POOL ?\r\n                                                        {\r\n                                                            title: \"Report\",\r\n                                                            controlname: \"reports\",\r\n                                                            objectName: \"sample\",\r\n                                                            hidden: this.state.userRoleControlRights.indexOf(reportPreviewId) === -1,\r\n                                                            onClick: this.props.previewSampleReport,\r\n                                                            inputData: {\r\n                                                                userinfo: this.props.Login.userInfo,\r\n                                                                ncontrolcode: reportPreviewId\r\n                                                            },\r\n                                                        } : {}\r\n                                                    ]\r\n                                                }\r\n                                                commonActions={\r\n                                                    <>\r\n\r\n                                                        <ProductList className=\"d-flex product-category float-right icon-group-wrap\">\r\n                                                        { this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode === SampleType.CLINICALTYPE ?\r\n                                                        <Nav.Link\r\n                                            // data-for=\"tooltip-common-wrap\"\r\n                                                  data-tip={this.props.intl.formatMessage({ id: \"IDS_ENTERIDENTICALRESULT\" })} hidden={this.state.userRoleControlRights.indexOf(identicalResultEnterId) === -1} className=\"btn btn-circle outline-grey ml-2\" role=\"button\" onClick={() => this.props.resultEntryGetSpec(this.props.Login.masterData, this.props.Login.userInfo, resultEnterId, this.state.testskip, this.state.testtake)}   >\r\n                                                    <FontAwesomeIcon icon={faAddressBook} />\r\n                                                     </Nav.Link>\r\n                                                   : \"\"}\r\n                                                            <Button className=\"btn btn-circle outline-grey ml-2\" variant=\"link\"\r\n                                                                onClick={() => this.onReload()}\r\n                                                                data-for=\"tooltip-common-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                                <FontAwesomeIcon icon={faSync} style={{ \"width\": \"0.6!important\" }} />\r\n                                                            </Button>\r\n                                                        </ProductList>\r\n                                                    </>\r\n                                                }\r\n                                            />\r\n                                        </div>\r\n                                        <div>\r\n                                            <div style={this.state.showTest === true ? { display: \"block\", background: \"#FFFF\" } : { display: \"none\", background: \"#FFFF\" }} >\r\n                                                {mainDesign}\r\n                                            </div>\r\n\r\n                                        </div>\r\n                                    </SplitterLayout>\r\n                                </div>\r\n\r\n                                <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab ${this.state.activeTabIndex ? 'active' : \"\"}`} >\r\n                                    <div className={`${this.state.enablePropertyPopup ? 'active-popup' : \"\"} vertical-tab-content pager_wrap wrap-class ${this.state.activeTabIndex ? 'active' : \"\"}`} style={{ width: this.state.enablePropertyPopup ? this.state.propertyPopupWidth + '%' : \"\" }}>\r\n                                        <span className={` vertical-tab-close ${this.state.activeTabIndex ? 'active' : \"\"}`} onClick={() => this.changePropertyViewClose(false)}><FontAwesomeIcon icon={faChevronRight} /> </span>\r\n                                        <div className={` vertical-tab-content-common sm-view-v-t position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick= {()=>this.setState({enablePropertyPopup:!this.state.enablePropertyPopup})}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                           {this.state.activeTabIndex && this.state.activeTabIndex == 1 ? this.sideNavDetail(\"IDS_RESULTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick= {()=>this.setState({enablePropertyPopup:!this.state.enablePropertyPopup})}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                           {this.state.activeTabIndex && this.state.activeTabIndex == 2 ? this.sideNavDetail(\"IDS_ATTACHMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid-tab position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick= {()=>this.setState({enablePropertyPopup:!this.state.enablePropertyPopup})}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                           {this.state.activeTabIndex && this.state.activeTabIndex == 3 ? this.sideNavDetail(\"IDS_COMMENTS\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-grid position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick= {()=>this.setState({enablePropertyPopup:!this.state.enablePropertyPopup})}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                           <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 4 ? this.sideNavDetail(\"IDS_INSTRUMENT\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick= {()=>this.setState({enablePropertyPopup:!this.state.enablePropertyPopup})}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                           <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 5 ? this.sideNavDetail(\"IDS_MATERIAL\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick= {()=>this.setState({enablePropertyPopup:!this.state.enablePropertyPopup})}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                           <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_TASK\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 6 ? this.sideNavDetail(\"IDS_TASK\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick= {()=>this.setState({enablePropertyPopup:!this.state.enablePropertyPopup})}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                           <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_TESTAPPROVALHISTORY\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 7 ? this.sideNavDetail(\"IDS_TESTAPPROVALHISTORY\") : \"\"}\r\n                                        </div>\r\n                                        <div className={` vertical-tab-content-comments vertical-tab-content-common position-relative ${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`}>\r\n                                            <Nav.Link className='tab-expand-collapse-btn p-0' onClick= {()=>this.setState({enablePropertyPopup:!this.state.enablePropertyPopup})}>\r\n                                                {!this.state.enablePropertyPopup ?\r\n                                                    <img src={fullviewExpand} alt=\"Fullview\" width=\"20\" height=\"20\" /> :\r\n                                                    <img src={fullviewCollapse} alt=\"Collapse\" width=\"24\" height=\"24\" />\r\n                                                }\r\n                                            </Nav.Link>\r\n                                            <h4 className='inner_h4'>\r\n                                                {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                            </h4>\r\n                                            {this.state.activeTabIndex && this.state.activeTabIndex == 8 ? this.sideNavDetail(\"IDS_SAMPLEDETAILS\") : \"\"}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className='tab-head'>\r\n                                        <ul>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 1 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(1, \"IDS_RESULTS\")}>\r\n                                                <FontAwesomeIcon icon={faFileInvoice}\r\n                                                    data-for=\"tooltip-common-wrap\"\r\n                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RESULT\" })} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_RESULT\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 2 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(2, \"IDS_ATTACHMENTS\")}>\r\n                                                <FontAwesomeIcon icon={faLink} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_ATTACHMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 3 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(3, \"IDS_COMMENTS\")}>\r\n                                                <FontAwesomeIcon icon={faComments} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_COMMENTS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 4 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(4, \"IDS_INSTRUMENT\")}>\r\n                                                <FontAwesomeIcon icon={faMicroscope} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_INSTRUMENT\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 5 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(5, \"IDS_MATERIAL\")}>\r\n                                                <FontAwesomeIcon icon={faFlask} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_MATERIAL\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 6 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(6, \"IDS_TASK\")}>\r\n                                                <FontAwesomeIcon icon={faCommentDots} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_TASK\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                            {/* <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 7 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(7)}>\r\n                                                <FontAwesomeIcon icon={faHistory} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_TESTAPPROVALHISTORY\" })}\r\n                                                </span>\r\n                                            </li> */}\r\n                                            <li className={`${this.state.activeTabIndex && this.state.activeTabIndex == 8 ? 'active' : \"\"}`} onClick={() => this.changePropertyView(8, \"IDS_SAMPLEDETAILS\")}>\r\n                                                <FontAwesomeIcon icon={faEye} />\r\n                                                <span>\r\n                                                    {this.props.intl.formatMessage({ id: \"IDS_SAMPLEDETAILS\" })}\r\n                                                </span>\r\n                                            </li>\r\n                                        </ul>\r\n                                        <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                // label={\"Auto Show\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_AUTOSHOW\" })}\r\n                                                type=\"switch\"\r\n                                                name={\"Auto Click\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enableAutoClick}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enableAutoClick}\r\n                                            />\r\n                                        </span>\r\n                                        {/* <span className='tab-click-toggle-btn'>\r\n                                            <CustomSwitch\r\n                                                // label={\"Popup Nav\"}\r\n                                                label={this.props.intl.formatMessage({ id: \"IDS_POPUPNAV\" })}\r\n                                                type=\"switch\"\r\n                                                name={\"PopupNav\"}\r\n                                                onChange={(event) => this.onInputSwitchOnChange(event)}\r\n                                                defaultValue={this.state.enablePropertyPopup}\r\n                                                isMandatory={false}\r\n                                                required={true}\r\n                                                checked={this.state.enablePropertyPopup}\r\n                                            />\r\n                                        </span> */}\r\n                                    </div>\r\n                                </div>\r\n                            </ListWrapper >\r\n                            {/* </PerfectScrollbar> */}\r\n                        </Col >\r\n                    </Row >\r\n                </ListWrapper >\r\n                {/* </PerfectScrollbar> */}\r\n\r\n                <PortalModal>\r\n                    <div>\r\n                        <Modal\r\n                            centered\r\n                            scrollable\r\n                            bsPrefix=\"model model_zindex\"\r\n                            show={this.props.Login.openELNSheet}\r\n                            // show={this.state.openELNSheet}\r\n                            onHide={this.openClosePortal}\r\n                            dialogClassName={`${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                            backdrop=\"static\"\r\n                            keyboard={false}\r\n                            enforceFocus={false}\r\n                            aria-labelledby=\"example-custom-modal-styling-title\"\r\n                        >\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title style={{ \"line-height\": \"1.0\" }} id=\"example-custom-modal-styling-title\">\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_ELNSHEET\" })}\r\n                                </Modal.Title>\r\n                                <ReactTooltip globalEventOff=\"true\" />\r\n\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <div className=\"modal-inner-content\">\r\n                                    {/* <Iframe url={this.state.enlLink} */}\r\n                                    <Iframe \r\n                                        url={this.props.Login.masterData.enlLink}\r\n                                        width=\"98%\"\r\n                                        height=\"1000px\"\r\n                                        id=\"reportviewID\"\r\n                                        className=\"reportview\"\r\n                                    //display=\"initial\"\r\n                                    /// position=\"relative\" \r\n                                    />\r\n                                </div>\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                    </div>\r\n                </PortalModal>\r\n                <PortalModal>\r\n                <ModalShow\r\n                    modalShow={this.props.Login.showAlertGrid}\r\n                    modalTitle={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?this.props.intl.formatMessage({ id: \"IDS_ADDITIONALINFOREQURIED\" })//this.props.Login.onlyAlertMsgAvailable?\"Alert\":this.props.Login.masterData['salertmessage']\r\n                    // :this.props.intl.formatMessage({ id: \"IDS_COMPLETETHEFOLLOWINGTESTS\" })} \r\n                    :this.props.intl.formatMessage({ id: \"IDS_RULECOMPLETEVALIDATION\" })}\r\n                  //  needCloseButton={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                    closeModal={this.closeModalShow}\r\n                    rulesenginealret={true}\r\n                    onSaveClick ={this.props.Login.showAlertGrid==true? this.onskiprule:this.onModalSave}\r\n                    removeCancel={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                    // needSubmit={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?true:false}\r\n                    needSubmit={true}\r\n                    needSave={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\"\":true}\r\n                    selectedRecord={this.state.selectedRecord || {}} \r\n                    // mandatoryFields={this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\r\n                    //     this.mandatoryFieldsForAdditionalInfo():\"\"}\r\n                    size={ this.props.Login.showAlertForPredefined||this.props.Login.additionalInfoView?\"\":'lg'}\r\n                    showAlertMsg={this.props.Login.showAlertForPredefined?true:false}\r\n                    modalBody={this.props.Login.additionalInfoView?\r\n                        this.state.selectedRecord['additionalResultData'] :\r\n                         this.props.Login.showAlertForPredefined? \r\n                       <ResultEntryPredefinedComments \r\n                       onlyAlertMsgAvailable={this.props.Login.onlyAlertMsgAvailable}\r\n                       salertmessage={this.props.Login.masterData['salertmessage']}\r\n                       showMultiSelectCombo={this.props.Login.showMultiSelectCombo}\r\n                       testgrouptestpredefsubresultOptions={this.props.Login.masterData.testgrouptestpredefsubresultOptions||[]}\r\n                       selectedRecord={this.state.selectedRecord || {}} \r\n                       onInputChange = {this.onInputChange}\r\n                       onComboChange={this.onComboChange} \r\n                       />  :\r\n                        <CustomTabs tabDetail={this.tabAlertRulesEngine()} onTabChange={this.onTabChangeRulesEngine} destroyInactiveTabPane={true}/>\r\n                    }\r\n                />\r\n </PortalModal>\r\n        {  this.props.Login.openModal ?\r\n                <SlideOutModal\r\n                    show={this.props.Login.openModal}\r\n                    size={this.props.Login.screenName === 'IDS_MEANPARAMETER' || this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? \"xl\" : \"lg\"}\r\n                    \r\n                    closeModal={this.closeModal}\r\n                    showCalculate={this.props.Login.screenName === 'IDS_RESULTFORMULA' ? true : false}\r\n                    operation={// this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS'?\"\":\r\n                        this.props.Login.screenName === 'IDS_RESULTENTRY'||  this.props.Login.screenName === 'IDS_ENFORCERESULT' || this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' ? \"\"\r\n                            : this.props.Login.operation\r\n                    }\r\n                    inputParam={this.props.Login.inputParam}\r\n                    screenName={this.props.Login.screenName===\"IDS_RESULTENTRYPARAMETER\"?this.props.Login.masterData.realTestcodeValue.stestsynonym :this.props.Login.screenName}\r\n                    selectedRecord={\r\n                        this.props.Login.screenName === 'IDS_INSTRUMENT'&&!this.props.Login.loadEsign ?\r\n                        this.state.selectedRecordInstrumentForm:\r\n                        this.props.Login.screenName === 'IDS_MATERIAL'&&!this.props.Login.loadEsign ?\r\n                        this.state.selectedRecordMaterialForm:\r\n                        this.props.Login.screenName === 'IDS_TASK'&&!this.props.Login.loadEsign ?\r\n                        this.state.selectedRecordTaskForm:\r\n                        this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                            this.state.selectedRecord.selectedMandatory : this.state.selectedRecord || {}\r\n                    }\r\n                    mandatoryFields={\r\n                      //  this.props.Login.screenName === 'IDS_INSTRUMENT' ? mandatoryFieldsInstrument :\r\n                          //  this.props.Login.screenName === 'IDS_TASK' ? mandatoryFieldsTask :\r\n                                this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ? mandatoryFieldsTestMethodSource :\r\n                                    this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ? mandatoryFieldsParameter :\r\n                                        this.props.Login.screenName === 'IDS_RESULTFORMULA' ? validateFormulaMandyFields :\r\n                                        this.props.Login.screenName === 'IDS_ENFORCERESULT' ?   mandatoryEnforceResult: []\r\n                    }\r\n                    esign={this.props.Login.loadEsign}\r\n                    innerPopup={this.props.Login.screenName}\r\n                    validateEsign={this.validateEsign}\r\n                    \r\n                    onSaveClick={\r\n                        this.props.Login.screenName === 'IDS_INSTRUMENT' ? \r\n                        (e)=> \r\n                        onSaveMandatoryValidation(this.state.selectedRecordInstrumentForm,mandatoryFieldsInstrument,\r\n                         this.onSaveClick) : \r\n                         this.props.Login.screenName === 'IDS_MATERIAL' ? \r\n                         (e)=> \r\n                         onSaveMandatoryValidation(this.state.selectedRecordMaterialForm,mandatoryFieldsMaterial,\r\n                          this.onSaveClick) :\r\n                        this.props.Login.showValidate ? this.calculateFormula\r\n                            : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ? this.onSaveFileClick \r\n                            : this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ? this.onSaveClickAdhocParam \r\n                            : this.onSaveClick\r\n                    }\r\n                    showValidate={this.props.Login.screenName === 'IDS_RESULTFORMULA'?false:this.props.Login.showValidate}\r\n                    modalEvent={this.state.modalEvent}\r\n                    hideSave={this.props.Login.screenName === \"IDS_PREVIOUSRESULTVIEW\" ? true : false}\r\n                    addComponent={\r\n                        this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onEsignInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> :\r\n                            this.props.Login.screenName === 'IDS_RESULTENTRY' ?\r\n                            this.state.selectedRecord.ResultParameter&&\r\n                             this.state.selectedRecord.ResultParameter.map((parameterResult, index) => {\r\n                              return   <ResultEntryForm \r\n                                        index={index} \r\n                                      //  wrappedComponentRef={ref => this.resultEntryFormRef = ref}\r\n                                      //   ref={this.resultEntryFormRef}\r\n                                       //  getPredefinedData={this.props.getPredefinedData}\r\n                                        ResultParameter={[...this.state.selectedRecord.ResultParameter]}\r\n                                        predefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                        defaultPredefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                       gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                       selectedNumericData={this.props.Login.masterData.selectedNumericData}\r\n                                       selectedResultGrade={this.state.selectedRecord.selectedResultGrade || []}\r\n                                       paremterResultcode={this.props.Login.masterData.paremterResultcode || []}\r\n                                       parameterResults={  parameterResult //this.state.selectedRecord.ResultParameter\r\n                                            || []}\r\n                                       Login={this.props.Login}\r\n                                       handleClose={this.handleClose}\r\n                                       onSaveClick={this.onSaveClick}\r\n                                       onResultInputChange={this.onResultInputChange}\r\n                                       //onGradeEvent={this.onGradeEvent}\r\n                                       getFormula={this.getFormula}\r\n                                       onDropTestFile={this.onDropTestFile}\r\n                                       onKeyPress={this.onKeyPress}\r\n                                       deleteAttachmentParamFile={this.deleteAttachmentParameterFile}\r\n                                       viewAdditionalInfo={this.viewAdditionalInfo}\r\n                                       needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                       intl={this.props.intl}\r\n                                /> \r\n                             })\r\n                              :\r\n\r\n                              this.props.Login.screenName === 'IDS_RESULTENTRYPARAMETER' ? \r\n                             <>\r\n                             <Row>\r\n                             {this.state.selectedRecord.selectedSpecification &&\r\n                              <FormSelectSearch\r\n                              formLabel={this.props.intl.formatMessage({ id: \"IDS_PROFILETREE\"}) +' / '+ this.props.intl.formatMessage({ id: this.props.Login.genericLabel && this.props.Login.genericLabel[\"Specification\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]})}\r\n                              isSearchable={true}\r\n                              name={\"nallottedspeccode\"}\r\n                              isDisabled={false}\r\n                              placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}                             \r\n                              isClearable={false}\r\n                              options={this.state.selectedRecord.selectedSpecification||[]}\r\n                              value={this.state.selectedRecord.nallottedspeccode && this.state.selectedRecord.nallottedspeccode || \"\"}\r\n                              defaultValue={this.state.selectedRecord.selectedSpecification && this.state.selectedRecord.selectedSpecification[\"nallottedspeccode\"]||\"\"}\r\n                              onChange={(event) => this.onChange(event, \"nallottedspeccode\", 1)}\r\n                              closeMenuOnSelect={true}\r\n                          >\r\n                          </FormSelectSearch>}\r\n\r\n\r\n                          {this.state.selectedRecord.selectedComponent &&\r\n                              <FormSelectSearch\r\n                              formLabel={this.props.intl.formatMessage({ id:this.props.Login.genericLabel && this.props.Login.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode]})}\r\n                              isSearchable={true}\r\n                              name={\"ncomponentcode\"}\r\n                              isDisabled={false}\r\n                              placeholder={this.props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                              isClearable={false}\r\n                              options={this.state.selectedRecord.selectedComponent||[]}\r\n                              value={this.state.selectedRecord.ncomponentcode && this.state.selectedRecord.ncomponentcode || \"\"}\r\n                              defaultValue={this.state.selectedRecord.selectedComponent && this.state.selectedRecord.selectedComponent[\"ncomponentcode\"]||\"\"}\r\n                              onChange={(event) => this.onChange(event, \"ncomponentcode\", 2)}\r\n                              closeMenuOnSelect={true}\r\n                          >\r\n                          </FormSelectSearch>\r\n                          \r\n                          \r\n                          }\r\n                           </Row>\r\n                              {this.state.selectedRecord.ResultParameter&&\r\n                               this.state.selectedRecord.ResultParameter.map((parameterResult, index) => {\r\n                                return   <ResultEntryParameterForm\r\n                                          index={index} \r\n                                        //  wrappedComponentRef={ref => this.resultEntryFormRef = ref}\r\n                                        //   ref={this.resultEntryFormRef}\r\n                                         //  getPredefinedData={this.props.getPredefinedData}\r\n                                          ResultParameter={[...this.state.selectedRecord.ResultParameter]}\r\n                                          predefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                          defaultPredefinedValues={this.props.Login.masterData.PredefinedValues}\r\n                                         gradeValues={this.props.Login.masterData.GradeValues || []}\r\n                                         selectedNumericData={this.props.Login.masterData.selectedNumericData}\r\n                                         selectedResultGrade={this.state.selectedRecord.selectedResultGrade || []}\r\n                                         paremterResultcode={this.props.Login.masterData.paremterResultcode || []}\r\n                                         parameterResults={  parameterResult //this.state.selectedRecord.ResultParameter\r\n                                              || []}\r\n                                         Login={this.props.Login}\r\n                                         handleClose={this.handleClose}\r\n                                         onSaveClick={this.onSaveClick}\r\n                                         onResultInputChange={this.onResultInputChange}\r\n                                         onSampleAdd={this.onSampleAdd}\r\n                                         //onGradeEvent={this.onGradeEvent}\r\n                                         getFormula={this.getFormula}\r\n                                         onDropTestFile={this.onDropTestFile}\r\n                                         onKeyPress={this.onKeyPress}\r\n                                         deleteAttachmentParamFile={this.deleteAttachmentParameterFile}\r\n                                         viewAdditionalInfo={this.viewAdditionalInfo}\r\n                                         needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                         intl={this.props.intl}\r\n                                         controlMap={this.state.controlMap}\r\n                                         userRoleControlRights={this.state.userRoleControlRights}\r\n                                  /> \r\n                               })}\r\n                             \r\n                               </>\r\n                               :\r\n                                this.props.Login.screenName === 'IDS_TESTMETHODSOURCE' ?\r\n                                    <TestEditForm\r\n                                        methodValues={this.props.Login.masterData.MethodData}\r\n                                        sourceValues={this.props.Login.masterData.SourceData}\r\n                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                        onComboChange={this.onComboChange}\r\n                                        handleClose={this.handleClose}\r\n                                        onSaveClick={this.onSaveClick}\r\n                                    /> :\r\n                                    this.props.Login.screenName === 'IDS_INSTRUMENT' ?\r\n                                        <ResultEntryInstrumentForm\r\n                                        selectedRecordInstrumentForm={this.props.Login.selectedRecordInstrumentForm}\r\n                                        instrumentcatValue={this.props.Login.masterData.InstrumentCategory}\r\n                                        instrumentValue={this.props.Login.masterData.Instrument}\r\n                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                        timeZoneListData={this.props.Login.timeZoneList || []}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onComboCategoryChange={this.onComboCategoryChange}\r\n                                        onDateChange={this.onDateChange}\r\n                                        handleClose={this.handleClose}\r\n                                        onSaveClick={this.onSaveClick}\r\n                                        onChildDataChange={this.onChildDataChange}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                        /> :\r\n                                        this.props.Login.screenName === 'IDS_MATERIAL' ?\r\n                                            <ResultEntryMaterialForm\r\n                                            Login={this.props.Login}\r\n                                            materialType={this.props.Login.materialType}\r\n                                            materialCategory={this.props.Login.materialCat}\r\n                                            material={this.props.Login.material}\r\n                                            materialInventory={this.props.Login.materialInventory}\r\n                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                            selectedRecordMaterialForm={this.state.selectedRecordMaterialForm || {}}\r\n                                            onMaterialComboChange={this.onMaterialComboChange}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onChildDataChange={this.onChildDataChange}\r\n                                            onDateChange={this.onDateChange}\r\n                                            handleClose={this.handleClose}\r\n                                            onSaveClick={this.onSaveClick}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            needSubSample={this.props.Login.masterData.realRegSubTypeValue.nneedsubsample}\r\n                                            /> :\r\n                                            this.props.Login.screenName === 'IDS_TASK' ?\r\n                                                <ResultEntryTaskForm\r\n                                                selectedRecordTaskForm={this.state.selectedRecordTaskForm || {}}\r\n                                                 selectedRecord={this.state.selectedRecord || {}}\r\n                                                    onNumericChange={this.ontaskNumericChange}\r\n                                                    onInputChange={this.ontaskInputChange}\r\n                                                    handleClose={this.handleClose}\r\n                                                    onSaveClick={this.onSaveClick}\r\n                                                /> :\r\n                                                this.props.Login.screenName === 'IDS_PARAMETERCOMMENTS' ?\r\n                                                    <ResultEntryParamCommetsForm\r\n                                                        selecteRecord={this.state.selectedRecord || {}}\r\n                                                        onInputChange={this.onInputChange}\r\n                                                        handleClose={this.handleClose}\r\n                                                        onSaveClick={this.onSaveClick}\r\n                                                    /> : this.props.Login.screenName === 'IDS_RESULTFORMULA' ?\r\n                                                        <ResultEntryFormulaForm\r\n                                                            DynamicFields={this.props.Login.masterData.DynamicFormulaFields}\r\n                                                            // formRef={this.formRef}\r\n                                                            masterData={this.props.Login.masterData}\r\n                                                            handleClose={this.handleClose}\r\n                                                            screenName={this.props.Login.screenName}\r\n                                                            selectedForumulaInput={this.state.selectedForumulaInput || []}\r\n                                                            onFormulaInputChange={this.onFormulaInputChange}\r\n                                                            getAverageResult={this.getAverageResult}\r\n                                                            Login={this.props.Login}\r\n                                                            showValidate={this.props.Login.showValidate}\r\n                                                            selectedRecord={this.state.selectedRecord || {}}\r\n                                                        />\r\n                                                        : this.props.Login.screenName === 'IDS_RESULTIMPORTFILE' ?\r\n                                                            <ResultEntryImport\r\n                                                                handleClose={this.handleClose}\r\n                                                                screenName={this.props.Login.screenName}\r\n                                                                onDropFile={this.onDropFile}\r\n                                                                selectedImportFile={this.props.Login.masterData.selectedImportFile || {}}\r\n                                                                deleteAttachment={this.deleteAttachment}\r\n                                                            /> :\r\n                                                            this.props.Login.screenName === 'IDS_MEANPARAMETER' ?\r\n                                                                <ResultEntryMean\r\n                                                                    // onInputOnChange={this.onMeanInputOnChange}\r\n                                                                    // onComboChange={this.onMeanComboChange}\r\n                                                                    screenName={this.props.Login.screenName}\r\n                                                                    headerSelectionChange={this.headerSelectionChange}\r\n                                                                    selectionChange={this.selectionChange}\r\n                                                                    selectAll={this.state.selectAll}\r\n                                                                    testMean={this.state.testMean}\r\n                                                                    userInfo={this.props.Login.userInfo}\r\n                                                                    meanTestParameterList={this.state.meanTestParameterList || []}\r\n                                                                    selectedTestParam={this.state.selectedTestParam}\r\n                                                                /> :\r\n                                                                this.props.Login.screenName === 'IDS_RESULTPARAMETERCOMMENTS' ? \r\n                                                                <ResultEntryPredefinedComments \r\n                                                                 selectedRecord={this.state.selectedRecord || {}} \r\n                                                                 onInputChange = {this.onInputChange}\r\n                                                                 onComboChange={this.onComboChange}\r\n                                                                 />:\r\n                                                                 this.props.Login.screenName === 'IDS_ENFORCERESULT' ? \r\n                                                                 <ResultEntryEnforceResult \r\n                                                                  selectedRecord={this.state.selectedRecord || {}} \r\n                                                                  GradeList={this.props.Login.masterData.GradeList&&\r\n                                                                    this.props.Login.masterData.GradeList}\r\n                                                                  onInputChange = {this.onInputChange}\r\n                                                                  onComboChange={this.onComboChange}\r\n                                                                  /> :\r\n                                                                  \r\n                                    this.props.Login.screenName === 'IDS_PREVIOUSRESULTVIEW' ?\r\n                                    (\r\n                                        <>\r\n                  \r\n                                          <Card className='one' >\r\n                                            <Card.Body>\r\n                                              <SpecificationInfo\r\n                                                controlMap={this.state.controlMap}\r\n                                                auditInfoFields={auditInfoFields}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                selectedSpecification={this.props.Login.masterData.viewdetails}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                selectedNode={this.props.Login.masterData.selectedNode}\r\n                                                selectedRecord={this.state.filterData}\r\n                                                approvalRoleActionDetail={this.props.Login.masterData.ApprovalRoleActionDetail}\r\n                                                screenName=\"IDS_PREVIOUSRESULTVIEW\"\r\n                  \r\n                                              />\r\n                                            </Card.Body>\r\n                                          </Card>\r\n                                          <br></br>\r\n                  \r\n                                          <DataGrid\r\n                                            primaryKeyField={\"ntransactiontestcode\"}\r\n                                            //data={this.props.Login.addComponentDataList || []}\r\n                                            data={this.props.Login.masterData.AuditModifiedComments || []}\r\n                                            detailedFieldList={this.feildsForGrid}\r\n                                            extractedColumnList={this.feildsForGrid}\r\n                                            //dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\r\n                                             // && process(this.props.Login.masterData.AuditModifiedComments, { skip: 0, take: 10 })}\r\n                                           // dataState={{ skip: 0, take: 10 }}\r\n                                           dataResult={this.props.Login.masterData.AuditModifiedComments && this.props.Login.masterData.AuditModifiedComments.length > 0\r\n                                            && process(this.props.Login.masterData.AuditModifiedComments, this.state.dataState ? this.state.dataState : { skip: 0, take: 10 })}\r\n                                          //dataState={{ skip: 0, take: 10 }}\r\n                                          dataState={this.state.dataState\r\n                                            ? this.state.dataState : { skip: 0, take: 10 }}\r\n                                        pageable={true}\r\n                                        scrollable={'scrollable'}\r\n                                        dataStateChange={this.dataResultStateChange}\r\n                  \r\n                  \r\n                                          />\r\n                                        </>\r\n                                      )\r\n                                        :\r\n                                                              this.props.Login.screenName === 'IDS_ADHOCPARAMETER' ?\r\n                                                                 <AddAdhocParameter\r\n                                                                 selectedRecord={this.state.selectedRecord || {}}\r\n                                                                 onInputOnChange={this.onInputOnChange}\r\n                                                                 onComboChange={this.onComboChange}\r\n                                                                 adhocParamter={this.props.Login.masterData.AdhocParamter || {}}\r\n                                                                //operation={this.props.operation}\r\n                                                             />: \"\"\r\n                                                                \r\n                                                                \r\n                    }\r\n                />\r\n                :\"\"}\r\n                {\r\n                    this.props.Login.masterData.ChecklistData && this.props.Login.screenName === 'IDS_CHECKLISTRESULT' ?\r\n                        <TemplateForm\r\n                            templateData={this.props.Login.masterData.ChecklistData}\r\n                            nregtypecode={parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode)}\r\n                            nregsubtypecode={parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode)}\r\n                            needSaveButton={this.props.Login.needSaveButton}\r\n                            formRef={this.formRef}\r\n                            onTemplateInputChange={this.onTemplateInputChange}\r\n                            handleClose={this.closeModal}\r\n                            onTemplateComboChange={this.onTemplateComboChange}\r\n                            screenName={this.props.Login.screenName}\r\n                            onSaveClick={this.onSaveCheckList}\r\n                            Login={this.props.Login}\r\n                            viewScreen={this.props.Login.openTemplateModal}\r\n                            selectedRecord={this.state.selectedRecord || []}\r\n                            onTemplateDateChange={this.onTemplateDateChange}\r\n                            needValidation={true}\r\n                        /> : \"\"\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n    defaultActions = (testChildGetREParam, RESelectedTest, RESelectedSample, setDefaultId, testskip, testtake) => {\r\n        const nregtypecode = this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n        const nregsubtypecode = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'nregtypecode': nregtypecode, 'nregsubtypecode': nregsubtypecode, 'ncontrolcode': setDefaultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"default\",\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: { ...testChildGetREParam, ncontrolcode: setDefaultId },\r\n                RESelectedTest: acceptTestList,\r\n                RESelectedSample: RESelectedSample,\r\n                ndesigntemplatemappingcode: parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode)\r\n\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, setDefaultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"defaultaction\",\r\n                        operation: \"default\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.defaultTest(inputParam.testChildGetREParam, acceptTestList, RESelectedSample, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_PLSSELECTTEST\" }));\r\n        }\r\n\r\n    }\r\n\r\n    completeActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake,validation) => {\r\n\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"completeTest\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"complete\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                testtake: this.state.testtake,\r\n                subSampleSkip: this.state.subSampleSkip,\r\n                subSampleTake: this.state.subSampleTake,\r\n                basedrulesengine:validation\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n           this.props.completeTest(inputParam, acceptTestList, userInfo, completeResultId,false,{basedrulesengine:validation})\r\n              \r\n              \r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOCOMPLETE\" }));\r\n        }\r\n    }\r\n\r\n\r\n\r\n    testStartActions = (testChildGetREParam, RESelectedTest, userInfo, completeResultId, testskip, testtake) => {\r\n\r\n        let TestList = [...this.props.Login.masterData.RE_TEST];\r\n        TestList = TestList.splice(testskip, testskip + testtake);\r\n        let acceptTestList = getSameRecordFromTwoArrays(TestList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n\r\n        if (acceptTestList && acceptTestList.length > 0) {\r\n            let inputParam = {\r\n                classUrl: 'resultentrybysample',\r\n                methodUrl: \"testInitiated\",\r\n                inputData: { 'userinfo': this.props.Login.userInfo, 'ncontrolcode': completeResultId,'subSampleNeeded': this.props.Login.masterData.defaultRegistrationSubType.nneedsubsample },\r\n                // formData: formData,\r\n                // isFileupload: true,\r\n                operation: \"testinitiate\",\r\n                postParamList: this.postParamList,\r\n                displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n                testChildGetREParam: testChildGetREParam,\r\n                RESelectedTest: acceptTestList,\r\n                skip: this.state.skip,\r\n                take: this.state.take,\r\n                testskip: this.state.testskip,\r\n                progressTimerStart:true,\r\n                testtake: this.state.testtake,\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeResultId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true,\r\n                        screenName: \"complete\",\r\n                        operation: \"complete\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.testStart(inputParam, acceptTestList, userInfo, completeResultId)\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTTESTTOINITIATE\" }));\r\n        }\r\n    }\r\n\r\n    onSaveCheckList = (selectedRecord, userInfo, nregtypecode, nregsubtypecode) => {\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            let inputParam = {\r\n                \"inputData\": { userinfo: userInfo }\r\n            }\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: {\r\n                        selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode,\r\n                        operation: \"updatechecklist\", inputParam,\r\n                    },\r\n                    openModal: true,\r\n                    operation: \"updatechecklist\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.onSaveCheckList(selectedRecord, userInfo, nregtypecode, nregsubtypecode, ndesigntemplatemappingcode)\r\n        }\r\n\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        if (this.props.Login.operation === 'testinitiate' || this.props.Login.operation === 'complete' || this.props.Login.operation === 'default' || this.props.Login.operation === \"updatechecklist\" ||\r\n            this.props.Login.operation === 'deleteInstrument' || this.props.Login.operation === 'createMethod' || this.props.Login.operation === 'deleteTask' || this.props.Login.operation === 'updateParameterComments') {\r\n            this.props.validateEsignCredentialComplete(inputParam, \"openModal\");\r\n        }\r\n\r\n        else {\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n    }\r\n\r\n    onEsignInputOnChange = (event) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n    }\r\n    onChildDataChange=(childData)=>{\r\n        if(this.props.Login.screenName==='IDS_MATERIAL'){\r\n            this.setState({selectedRecordMaterialForm:{...childData}, isMaterialInitialRender:false}) \r\n        }else{\r\n            this.setState({selectedRecordInstrumentForm:{...childData}, isInstrumentInitialRender:false}) \r\n        }  \r\n    }\r\n    onInputOnChange = (event,name) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        switch (name) {\r\n            case 'ntestgroupmaterial':\r\n              const ntestgrouptestcode =  selectedRecord.ntestgroupmaterial == transactionStatus.YES ? this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1\r\n                this.props.getREMaterialComboGet({ ntestgroupmaterial:selectedRecord.ntestgroupmaterial, ntestgrouptestcode,RESelectedTest:this.props.Login.masterData.RESelectedTest,test:this.props.Login.masterData.RESelectedTest[0], userInfo: this.props.Login.userInfo })\r\n                break; \r\n        default:\r\n        this.setState({ selectedRecord });\r\n        }\r\n    }\r\n\r\n    onSaveFileClick = (saveType, formRef) => {\r\n        const selectedImportFile = this.props.Login.masterData.selectedImportFile;\r\n        const acceptedFile = selectedImportFile ? selectedImportFile.sfilename : [];\r\n        const formData = new FormData();\r\n\r\n        if (acceptedFile && acceptedFile.length > 0) {\r\n            acceptedFile.forEach((file, index) => {\r\n                formData.append(\"uploadedFile\" + index, file);\r\n            });\r\n            formData.append(\"filecount\", acceptedFile.length);\r\n        } else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTANYONEFILETOSUBMIT\" }))\r\n        }\r\n\r\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n        formData.append(\"nregtypecode\", JSON.stringify(this.props.Login.masterData.realRegTypeValue.nregtypecode));\r\n        formData.append(\"nregsubtypecode\", JSON.stringify(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode));\r\n        formData.append(\"stransactiontestcode\", JSON.stringify(this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"));\r\n        this.props.resultImportFile(formData, this.props.Login.masterData);\r\n    }\r\n\r\n    onSaveClickAdhocParam = (saveType) =>{\r\n        if(Object.keys(this.state.selectedRecord).length >0){\r\n            \r\n         let Map = {};\r\n         let testParameter=[];\r\n         this.state.selectedRecord && this.state.selectedRecord.nparamtercode.forEach((data,index)=>\r\n         testParameter.push(data.item));\r\n\r\n         Map[\"ntestparametercode\"] = testParameter.map(ntestgroupparamtercode => ntestgroupparamtercode.item.ntestparametercode).join(\",\");\r\n         Map[\"ntestgrouptestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestgrouptestcode).join(\",\");\r\n         Map[\"ntestcode\"] = testParameter.map(ntestgrouptestcode => ntestgrouptestcode.item.ntestcode).join(\",\");\r\n         Map[\"userinfo\"] = this.props.Login.userInfo;\r\n         Map[\"npreregno\"]=this.props.Login.adhocpreregno;\r\n         Map[\"ntransactiontestcode\"]=this.props.Login.adhoctransactiontestcode;\r\n         Map[\"masterData\"] = this.props.Login.masterData;\r\n         Map[\"multiselecttransactiontestcode\"] =  this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\");\r\n         Map[\"nregtypecode\"]=this.props.Login.masterData.realRegTypeValue.nregtypecode;\r\n         Map[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode;\r\n         Map[\"ndesigntemplatemappingcode\"] =  this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode;\r\n         Map[\"nneedsubsample\"]=this.props.Login.masterData.nneedsubsample;\r\n         let inputParam = {\r\n            inputData: Map,\r\n            action: 'createAdhocParameter',\r\n            operation:\"create\",\r\n            methodUrl:\"AdhocParamter\",\r\n            classUrl:\"resultentrybysample\"\r\n\r\n        }\r\n\r\n    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.adhocId)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    screenName: \"Resultentry\",\r\n                    operation: \"adhocTestParameter\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }else{\r\n          this.props.createAdhocParamter(inputParam);\r\n        }\r\n      }else{\r\n        toast.warn(this.props.intl.formatMessage({ id:\"IDS_SELECTRECORD\" }))\r\n      }\r\n    }\r\n    onDropFile = (acceptedFile) => {\r\n        this.props.Login.masterData.selectedImportFile['sfilename'] = acceptedFile\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { masterData: this.props.Login.masterData }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFormulaInputChange = (event, index, fields) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        let selectedForumulaInput = this.state.selectedRecord.selectedForumulaInput || [];\r\n        let selectedMandatory = this.state.selectedRecord.selectedMandatory || [];\r\n        let dynamicformulafields = {};\r\n\r\n        if (event) {\r\n            if (fields.ndynamicformulafieldcode === FORMULAFIELDTYPE.INTEGER) {\r\n                const value = event.target.value.replace(/[^-^0-9]/g, '');\r\n                if (/^-?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            } else {\r\n                const value = event.target.value.replace(/[^-^0-9.]/g, '');\r\n                if (/^-?\\d*?\\.?\\d*?$/.test(value) || value === \"\") {\r\n                    if (this.state.selectedRecord.formulainput) {\r\n                        dynamicformulafields.svalues = value;\r\n                        dynamicformulafields.sparameter = fields.sdescription;\r\n                        selectedForumulaInput[index] = dynamicformulafields;\r\n                        selectedMandatory[index] = event.target.value;\r\n                    }\r\n                }\r\n                selectedRecord[\"selectedForumulaInput\"] = selectedForumulaInput;\r\n                selectedRecord[\"selectedMandatory\"] = selectedMandatory;\r\n\r\n                this.setState({ selectedRecord: selectedRecord });\r\n            }\r\n        }\r\n    }\r\n\r\n    onTemplateInputChange = (event, control) => {\r\n        let selectedRecord = templateChangeHandler(1, this.state.selectedRecord, event, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onTemplateComboChange = (comboData, control) => {\r\n        let selectedRecord = templateChangeHandler(2, this.state.selectedRecord, comboData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onTemplateDateChange = (dateData, control) => {\r\n        let selectedRecord = templateChangeHandler(3, this.state.selectedRecord, dateData, control)\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    viewAdditionalInfo = (currentAlertResultCode) => {\r\n        const selectedRecord = this.state.selectedRecord || [];   \r\n        let additionalInfo=selectedRecord['additionalInfo'];  \r\n        let  showAlertGrid=this.props.Login.showAlertGrid;\r\n        let  additionalInfoView=this.props.Login.additionalInfoView\r\n        if(additionalInfo[currentAlertResultCode]){\r\n            showAlertGrid=true;\r\n            additionalInfoView=true; \r\n            selectedRecord['additionalResultData']=additionalInfo[currentAlertResultCode]\r\n        }\r\n       // this.setState({selectedRecord,additionalInfoView});\r\n     const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { selectedRecord: selectedRecord,showAlertGrid,additionalInfoView }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    } \r\n    onModalSave=()=>{\r\n      const selectedRecord = this.state.selectedRecord || [];\r\n      let currentAlertResultCode=this.state.currentAlertResultCode||0; \r\n      let currentntestgrouptestpredefcode=this.state.currentntestgrouptestpredefcode||0; \r\n      let bool=this.state.selectedRecord.ResultParameter.some(x=>x['ntransactionresultcode']===currentAlertResultCode) \r\n      if(bool){\r\n        this.state.selectedRecord.ResultParameter.map(Parameter=>\r\n            {\r\n                if(Parameter['ntransactionresultcode']===currentAlertResultCode){ \r\n                    Parameter['additionalInfoUidata']={ntestgrouptestpredefsubcode: selectedRecord['ntestgrouptestpredefsubcode']}\r\n                    if(selectedRecord['ntestgrouptestpredefsubcode']){\r\n                        if(typeof selectedRecord['ntestgrouptestpredefsubcode']==='string'){\r\n                            Parameter['additionalInfo']=selectedRecord['ntestgrouptestpredefsubcode']\r\n                        }else{\r\n                            Parameter['additionalInfo']=\"\"\r\n                            // selectedRecord['ntestgrouptestpredefsubcode'].map(x=>{ \r\n                            //     Parameter['additionalInfo']+= x.label+\",\"  \r\n                            // }).join('\\n')\r\n                            Parameter['additionalInfo']=selectedRecord['ntestgrouptestpredefsubcode'].map(x=>x.label+\",\").join('\\n')\r\n                              Parameter['additionalInfo']=Parameter['additionalInfo'].substring(0,\r\n                                 Parameter['additionalInfo'].length-1) \r\n                        } \r\n                    } else{\r\n                        Parameter['additionalInfo']=\"\"\r\n                        Parameter['additionalInfoUidata'] && delete Parameter['additionalInfoUidata']\r\n                    }\r\n                    Parameter['ntestgrouptestpredefcode']=currentntestgrouptestpredefcode\r\n                }\r\n            }\r\n            );  \r\n      } \r\n      const updateInfo = {\r\n        typeName: DEFAULT_RETURN,\r\n        data: { selectedRecord: selectedRecord,showAlertGrid:false}\r\n    }\r\n    this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    onskiprule=()=>{\r\n        const startDate = (this.props.Login.masterData.realFromDate || this.props.Login.masterData.fromDate || new Date());\r\n        const endDate = (this.props.Login.masterData.realToDate || this.props.Login.masterData.toDate || new Date());\r\n\r\n        // let obj = this.covertDatetoString(startDate, endDate)\r\n        let obj = convertDateValuetoString(startDate, endDate, this.props.Login.userInfo);\r\n\r\n        const fromDate = obj.fromDate;\r\n        const toDate = obj.toDate;\r\n        const completeResultId = this.state.controlMap.has(\"CompleteResult\") && this.state.controlMap.get(\"CompleteResult\").ncontrolcode;\r\n        let testChildGetREParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n            napprovalversioncode: this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode,\r\n            ntransactionstatus: this.props.Login.masterData.realFilterStatusValue && this.props.Login.masterData.realFilterStatusValue.ntransactionstatus,\r\n            ntestcode: this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n            npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample&&sample.npreregno).join(\",\"),\r\n            ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample&&sample.ntransactionsamplecode).join(\",\"),\r\n            activeTestKey: this.props.Login.activeTestTab || 'IDS_RESULTS',\r\n            fromdate: fromDate,\r\n            todate: toDate,\r\n            testskip: this.state.testskip,\r\n            testtake: this.state.testtake,\r\n            resultDataState: this.state.resultDataState,\r\n            instrumentDataState: this.state.instrumentDataState,\r\n            materialDataState: this.state.materialDataState,\r\n            taskDataState: this.state.taskDataState,\r\n            documentDataState: this.state.documentDataState,\r\n            resultChangeDataState: this.state.resultChangeDataState,\r\n            testCommentDataState: this.state.testCommentDataState,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n            activeTabIndex : this.state.enableAutoClick && this.state.activeTabIndex == undefined ? 1 : this.state.enableAutoClick && this.state.activeTabIndex == 0 ? 1 : this.state.enableAutoClick ? this.state.activeTabIndex : 0,\r\n            //activeTabIndex: this.state.enableAutoClick ? this.state.activeTabIndex : this.state.activeTabIndex ? this.state.activeTabIndex : 1,\r\n            nworlistcode : (this.props.Login.masterData.realWorklistCodeValue && this.props.Login.masterData.realWorklistCodeValue.nworklistcode) || -1,\r\n            nbatchmastercode : (this.props.Login.masterData.realBatchCodeValue && this.props.Login.masterData.realBatchCodeValue.nbatchmastercode) || -1\r\n        }\r\n\r\n        this.completeActions(testChildGetREParam, this.props.Login.masterData.RESelectedTest, this.props.Login.userInfo, completeResultId, this.state.testskip, this.state.testtake,4)\r\n    }\r\n\r\n    ontaskInputChange = (Data, name) => {\r\n        const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\r\n        selectedRecordTaskForm[name] = Data.target.value;\r\n        this.setState({ selectedRecordTaskForm:{...selectedRecordTaskForm},isTaskInitialRender:false  });\r\n    }\r\n    ontaskNumericChange = (numericData, numericName) => {\r\n        const selectedRecordTaskForm = this.state.selectedRecordTaskForm || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecordTaskForm[numericName] = numericData;\r\n            } else {\r\n                selectedRecordTaskForm[numericName] = numericData.target.value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecordTaskForm[numericName] = \"\";\r\n        }\r\n        this.setState({ selectedRecordTaskForm:{...selectedRecordTaskForm},isTaskInitialRender:false });\r\n    }\r\n\r\n\r\n\r\n    onInputChange = (Data, name) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode=this.state.currentAlertResultCode||0; \r\n        if (Data) {\r\n            if(name==='ntestgrouptestpredefsubcode'){\r\n                // if(!selectedRecord['additionalInfo']){\r\n                //     selectedRecord['additionalInfo']=[] \r\n                // } \r\n                // if(selectedRecord['additionalInfo']){\r\n                //     selectedRecord['additionalInfo'][currentAlertResultCode]= Data.target.value\r\n                // } \r\n                // let bool=this.state.selectedRecord.ResultParameter.some(x=>x['ntransactionresultcode']===currentAlertResultCode) \r\n                // if(bool){\r\n                //   this.state.selectedRecord.ResultParameter.map(Parameter=>\r\n                //       {\r\n                //           if(Parameter['ntransactionresultcode']===currentAlertResultCode){\r\n                //               Parameter[\"jsondata\"]={};\r\n                //               Parameter['additionalInfo']=selectedRecord['additionalInfo'][currentAlertResultCode]\r\n                //             //   Parameter[\"jsondata\"] = { \r\n                //             //       ...Parameter[\"jsondata\"],\r\n                //             //       additionalInfo:selectedRecord['additionalInfo'][currentAlertResultCode]\r\n                //             //   }\r\n                //           }\r\n                //       }\r\n                //       );  \r\n                // }\r\n              //  selectedRecord[name] = Data.target.value;\r\n            }\r\n            //else{\r\n                selectedRecord[name] = Data.target.value;\r\n          //  } \r\n        }\r\n        else {\r\n            selectedRecord[name] = [];\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onNumericChange = (numericData, numericName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        if (numericData) {\r\n            if (numericName !== \"scomments\") {\r\n                selectedRecord[numericName] = numericData;\r\n            } else {\r\n                selectedRecord[numericName] = numericData.target.value;\r\n            }\r\n        }\r\n        else {\r\n            selectedRecord[numericName] = \"\";\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDateChange = (dateName, dateValue) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        selectedRecord[dateName] = dateValue;\r\n        if (dateName === \"dfromdate\" || dateName === \"dtodate\") {\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n    headerSelectionChange = (event) => {\r\n        const checked = event.syntheticEvent.target.checked;\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        if (checked) {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                selectedMeanTestParam.set(item.ntransactionresultcode, item.sresult);\r\n                return item;\r\n            });\r\n\r\n            let selectedTestParam = \"\";\r\n            let selectedTestParamMean = 0;\r\n            let size = 0;\r\n            if (selectedMeanTestParam.size > 0) {\r\n                [...selectedMeanTestParam.values()].forEach(item => (\r\n                    item !== null && item !== \"\" ?\r\n                        (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                            size = size + 1,\r\n                            selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n                ));\r\n                selectedTestParamMean = selectedTestParamMean / size;\r\n            }\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam, selectedTestParam,\r\n                testMean: selectedTestParamMean,\r\n                selectAll: checked\r\n            });\r\n        }\r\n        else {\r\n            const data = meanTestParameterList.map(item => {\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            this.setState({\r\n                meanTestParameterList: data, selectedMeanTestParam: new Map(),\r\n                selectedTestParam: \"\",\r\n                testMean: \"\",\r\n                selectAll: checked\r\n            });\r\n        }\r\n    }\r\n\r\n    selectionChange = (event) => {\r\n        let meanTestParameterList = this.state.meanTestParameterList || [];\r\n        let selectedMeanTestParam = this.state.selectedMeanTestParam || new Map();\r\n        meanTestParameterList.map(item => {\r\n            if (item.ntransactionresultcode === event.dataItem.ntransactionresultcode) {\r\n                item.selected = !event.dataItem.selected;\r\n            }\r\n            return item;\r\n        });\r\n        if (event.dataItem.selected) {\r\n            selectedMeanTestParam.set(event.dataItem.ntransactionresultcode, event.dataItem.sresult);\r\n        }\r\n        else {\r\n            if (selectedMeanTestParam.has(event.dataItem.ntransactionresultcode)) {\r\n                selectedMeanTestParam.delete(event.dataItem.ntransactionresultcode)\r\n            }\r\n        }\r\n        let selectedTestParam = \"\";\r\n        let selectedTestParamMean = 0;\r\n        let size = 0;\r\n        if (selectedMeanTestParam.size > 0) {\r\n            [...selectedMeanTestParam.values()].forEach(item => (\r\n                item !== null && item !== \"\" ?\r\n                    (selectedTestParam = selectedTestParam === \"\" ? item : selectedTestParam + \"+\" + item,\r\n                        size = size + 1,\r\n                        selectedTestParamMean = parseInt(selectedTestParamMean) + parseInt(item)) : \"\"\r\n            ));\r\n            selectedTestParamMean = selectedTestParamMean / size;\r\n        }\r\n        this.setState({\r\n            meanTestParameterList, selectedMeanTestParam, selectedTestParam, testMean: selectedTestParamMean,\r\n            selectAll: this.valiateCheckAll(meanTestParameterList)\r\n        });\r\n    }\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            selectAll = false;\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n    onMeanComboChange = (comboData, comboName) => {\r\n        const selectedMeanTestParam = this.state.selectedMeanTestParam || [];\r\n        selectedMeanTestParam[comboName] = comboData[0];\r\n        let data = \"\";\r\n        if (selectedMeanTestParam[\"parametervalue\"] === undefined) {\r\n            data = comboData[0].value;\r\n        }\r\n        else {\r\n            data = selectedMeanTestParam[\"parametervalue\"] + \"+\" + comboData[0].value;\r\n        }\r\n        selectedMeanTestParam[\"parametervalue\"] = data;\r\n        this.setState({ selectedMeanTestParam });\r\n    }\r\n\r\n    onMaterialComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        const ntestgrouptestcode = selectedRecord.ntestgroupmaterial == transactionStatus.YES ?  this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode : -1;\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n            //this.setState({ selectedRecord });\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n            //this.setState({ selectedRecord });\r\n        }\r\n        switch (comboName) {\r\n            case 'nmaterialtypecode':\r\n                this.props.getREMaterialCategoryByType({ntestgrouptestcode,selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcatcode':\r\n                selectedRecord['nsectioncode'] = selectedRecord.nmaterialcatcode.item.needSectionwise == transactionStatus.YES ? \r\n                                        this.props.Login.masterData.RESelectedTest[0].nsectioncode : -1;\r\n                this.props.getREMaterialByCategory({ ntestgrouptestcode,selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            case 'nmaterialcode':\r\n                this.props.getREMaterialInvertoryByMaterial({ ntestgrouptestcode,selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n            default:\r\n                this.props.getAvailableMaterialQuantity({ ntestgrouptestcode,selectedRecord, userInfo: this.props.Login.userInfo })\r\n                break;\r\n        }\r\n    }\r\n\r\n    onComboChange = (comboData, comboName) => {\r\n        const selectedRecord = this.state.selectedRecord || [];\r\n        let currentAlertResultCode=this.state.currentAlertResultCode||0;\r\n        if (comboData) { \r\n            // if(comboName==='ntestgrouptestpredefsubcode'){\r\n                 \r\n            //     if(!selectedRecord['additionalInfo']){\r\n            //         selectedRecord['additionalInfo']=[] \r\n            //     }  \r\n            //         selectedRecord['additionalInfo'][currentAlertResultCode]=\"\"\r\n            //         comboData.map(x=>{ \r\n            //             selectedRecord['additionalInfo'][currentAlertResultCode]+= x.label+\",\"//+<br/> \r\n            //         })\r\n            //         selectedRecord['additionalInfo'][currentAlertResultCode]=selectedRecord['additionalInfo'][currentAlertResultCode].substring(0,\r\n            //             selectedRecord['additionalInfo'][currentAlertResultCode].length-1) \r\n            // } \r\n                selectedRecord[comboName] = comboData; \r\n        } else {\r\n            selectedRecord[comboName] = [] \r\n        }\r\n        this.setState({ selectedRecord });\r\n\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord: selectedRecord }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n\r\n    onChange = (comboData, fieldName, caseNo) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        const selectedsubcode=[];\r\n        if (comboData !== null) {\r\n          switch (caseNo) {\r\n            \r\n            case 1:\r\n              selectedRecord[fieldName] = comboData;\r\n              delete selectedRecord[\"ResultParameter\"];\r\n              \r\n             this.setState({selectedsubcode}) \r\n              this.props.resultEntryGetComponent(selectedRecord,this.props.Login.masterData, this.props.Login.userInfo,this.props.Login.ncontrolcode, this.state.testskip, this.state.testtake)\r\n              break;\r\n              case 2:         \r\n              selectedRecord[fieldName] = comboData;\r\n              delete selectedRecord[\"ResultParameter\"];\r\n              this.setState({selectedsubcode})  \r\n              this.props.resultEntryGetParameter(selectedRecord,this.props.Login.masterData, this.props.Login.userInfo,this.props.Login.ncontrolcode, this.state.testskip, this.state.testtake)\r\n              break;\r\n            default:\r\n              break;\r\n          }\r\n        }\r\n        // else {\r\n        //   if (selectedRecord[\"nsectioncode\"]) {\r\n        //     delete selectedRecord[\"nsectioncode\"];\r\n        //     delete selectedRecord[\"nusercode\"];\r\n    \r\n        //   }\r\n        //   const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { selectedRecord,selectedsubcode:undefined }\r\n        //   }\r\n        //   this.props.updateStore(updateInfo);\r\n        // }\r\n      };\r\n\r\n    onGradeEvent = (ResultParameter, index, parameter) => {\r\n        if (ResultParameter.length > 0 && ResultParameter[index] !== undefined && ResultParameter[index].sresult !== null) {\r\n            let selectedRecord = this.state.selectedRecord || [];\r\n            let selectedResultGrade = this.state.selectedRecord.selectedResultGrade || [];\r\n            if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n                selectedResultGrade[index] = {\r\n                    ngradecode: ResultParameter[index].sresult !== \"\" ?\r\n                        numericGrade(parameter, numberConversion(parseFloat(ResultParameter[index].sresult), parseInt(parameter.nroundingdigits))) : -1\r\n                };\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n                if (ResultParameter[index].sresult !== null) {\r\n                    selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: 0 };\r\n                }\r\n            }\r\n            if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n                if (ResultParameter[index].sresult !== null && ResultParameter[index].sresult.trim() !== \"\") {\r\n                    //selectedResultGrade[index] = { ngradecode: ResultParameter[index].ngradecode };\r\n                    selectedResultGrade[index] = { ngradecode: 4 };\r\n                }\r\n                else {\r\n                    selectedResultGrade[index] = { ngradecode: -1 };\r\n                }\r\n            }\r\n            //this.props.Login.masterData[\"selectedResultGrade\"] = selectedResultGrade;\r\n            selectedRecord.selectedResultGrade = selectedResultGrade;\r\n\r\n            this.setState({\r\n                selectedRecord\r\n            });\r\n\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: { masterData: this.props.Login.masterData }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n    onCommentsSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        if (this.props.Login.screenName === \"IDS_TESTCOMMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestComments(saveParam, selectedTestList);\r\n        }\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RE_SUBSAMPLE.slice(this.state.subSampleSkip, this.state.subSampleSkip + this.state.subSampleTake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (this.props.Login.screenName === \"IDS_SAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSample, this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RE_SAMPLE.slice(this.state.skip, this.state.skip + this.state.take);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n            // let acceptList=getSameRecordFromTwoArrays(this.props.Login.masterData.searchedTest, this.props.Login.masterData.RegistrationGetTest.slice(this.state.testskip, this.state.testskip + this.state.testtake), \"npreregno\");\r\n\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n\r\n\r\n        if (this.props.Login.screenName === \"IDS_SUBSAMPLECOMMENTS\") {\r\n            let sampleList = [];\r\n            if (this.props.Login.masterData.searchedSubSample !== undefined) {\r\n                sampleList = getSameRecordFromTwoArrays(this.props.Login.masterData.searchedSubSample, this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subsampletake), \"npreregno\");\r\n            } else {\r\n                sampleList = this.props.Login.masterData.RESelectedSubSample.slice(this.state.subsampleskip, this.state.subsampleskip + this.state.subSampleTake);\r\n            }\r\n            let acceptList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSubSample, \"ntransactionsamplecode\");\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                isTestComment: this.props.isTestComment,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleComments(saveParam, acceptList);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openCommentModal\");\r\n        }\r\n    }\r\n    onAttachmentSaveClick = (saveType, formRef, selectedRecord) => {\r\n        const masterData = this.props.Login.masterData;\r\n        let inputData = {}\r\n        let inputParam = {}\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let { testskip, testtake, skip, take } = this.state\r\n        let testList = [...this.props.Login.masterData.RE_TEST];\r\n        testList = testList.slice(testskip, testskip + testtake);\r\n        let selectedTestList = getSameRecordFromTwoArrays(testList, this.props.Login.masterData.RESelectedTest, \"ntransactiontestcode\");\r\n        let sampleList = [...this.props.Login.masterData.RE_SAMPLE];\r\n        sampleList = sampleList.slice(skip, skip + take);\r\n        let selectedSampleList = getSameRecordFromTwoArrays(sampleList, this.props.Login.masterData.RESelectedSample, \"npreregno\");\r\n        if (this.props.Login.screenName === \"IDS_SAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(x => x.npreregno).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSampleAttachment(saveParam, selectedSampleList);\r\n        } else if (this.props.Login.screenName === \"IDS_TESTATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                ntransactiontestcode: this.props.Login.masterData.RESelectedTest ? this.props.Login.masterData.RESelectedTest.map(x => x.ntransactiontestcode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveTestAttachment(saveParam, selectedTestList);\r\n        }\r\n\r\n        else if (this.props.Login.screenName === \"IDS_SUBSAMPLEATTACHMENTS\") {\r\n            let saveParam = {\r\n                userInfo: this.props.Login.userInfo,\r\n                selectedRecord,\r\n                masterData: this.props.Login.masterData,\r\n                saveType, formRef,\r\n                operation: this.props.Login.operation,\r\n                selectedMaster: this.props.selectedMaster,\r\n                ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample ? this.props.Login.masterData.RESelectedSubSample.map(x => x.ntransactionsamplecode).join(\",\") : \"-1\"\r\n            }\r\n            inputParam = onSaveSubSampleAttachment(saveParam, this.props.Login.masterData.RESelectedSubSample);\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    operation: this.props.Login.operation,\r\n                    screenName: this.props.Login.screenName,\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData, \"openAttachmentModal\");\r\n        }\r\n    }\r\n\r\n    onKeyPress = (event, index, paremterResultcode) => {\r\n        if (event.keyCode === 13) {\r\n            for (let i = 0; i < event.target.form.elements.length; i++) {\r\n                if (parseInt(event.target.form.elements[i].id) === paremterResultcode[index + 1]) {\r\n                    event.target.form.elements[i].focus();\r\n                    break;\r\n                }\r\n            }\r\n            event.preventDefault();\r\n        }\r\n    }\r\n    onResultInputChange = (parameterResults) => {\r\n        this.setState({\r\n            parameterResults: [...parameterResults],\r\n            isParameterInitialRender:false\r\n           // currentAlertResultCode,\r\n          //  currentntestgrouptestpredefcode\r\n        });\r\n    }\r\n\r\n    onSampleAdd = (selectedsubcode) => {\r\n        this.setState({\r\n            selectedsubcode: [...selectedsubcode],\r\n            isaddSampleRender:false\r\n           // currentAlertResultCode,\r\n          //  currentntestgrouptestpredefcode\r\n        });\r\n    }\r\n\r\n    // onResultInputChange = (event, index, parameter) => {\r\n    //     //let ResultParameter = this.props.Login.masterData.ResultParameter ? this.props.Login.masterData.ResultParameter : [];\r\n    //     let selectedRecord = this.state.selectedRecord || [];\r\n    //     let ResultParameter = this.state.selectedRecord.ResultParameter ? this.state.selectedRecord.ResultParameter : [];\r\n    //     let sresult = \"\";\r\n    //     let sfinal = \"\";\r\n    //     let sresultpredefinedname= \"\";\r\n    //     let salertmessage = \"\";\r\n    //     let sresultcomment = \"\";\r\n    //     let value = -1;\r\n    //     let acceptedFile = [];\r\n    //     let ncalculatedresult; \r\n    //     let currentAlertResultCode=0;\r\n    //     let currentntestgrouptestpredefcode=0;\r\n    //     let inputData={}\r\n    //     if (parameter.nparametertypecode === parameterType.NUMERIC) {\r\n    //         if (/^-?\\d*?\\.?\\d*?$/.test(event.target.value) || event.target.value === \"\") {\r\n    //             sresult = event.target.value;\r\n    //             ncalculatedresult = 4\r\n    //         } else {\r\n    //             sresult = ResultParameter[index]['sresult'] === null ? \"\" : ResultParameter[index]['sresult'];\r\n    //             ncalculatedresult = ResultParameter[index]['ncalculatedresult'];\r\n    //         }\r\n    //     }\r\n    //     if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n    //          currentAlertResultCode= event.item.ntransactionresultcode ;\r\n    //          currentntestgrouptestpredefcode= event.item.ntestgrouptestpredefcode ;\r\n    //         if (event != null) {\r\n    //             sresult = event.item.spredefinedname;\r\n    //             sresultpredefinedname = event.item.sresultpredefinedname;\r\n    //             sfinal=event.item.spredefinedsynonym\r\n    //             value = event.item.ngradecode;\r\n    //             salertmessage=event.item.salertmessage?event.item.salertmessage:\"\";\r\n    //             sresultcomment= event.item.spredefinedcomments?event.item.spredefinedcomments:\"\";\r\n    //             ncalculatedresult = 4; \r\n    //         }\r\n    //         else {\r\n    //             sresult = \"\";\r\n    //             sfinal = \"\";\r\n    //             sresultpredefinedname= \"\";\r\n    //             value = -1;\r\n    //             ncalculatedresult = 4\r\n    //         }\r\n    //         inputData={\r\n    //             'ntestgrouptestpredefcode':event.item.ntestgrouptestpredefcode,\r\n    //             'salertmessage':salertmessage,\r\n    //             'nneedresultentryalert':event.item.nneedresultentryalert,\r\n    //             'nneedsubcodedresult':event.item.nneedsubcodedresult\r\n    //         }\r\n    //         // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfo'] \r\n    //         // ResultParameter[index]['additionalInfo']&& delete ResultParameter[index]['additionalInfoUidata']  \r\n    //         if(event.item.nneedresultentryalert===transactionStatus.NO&&\r\n    //             event.item.nneedsubcodedresult===transactionStatus.NO){\r\n    //                 if(ResultParameter[index]['additionalInfo']){ \r\n    //                     ResultParameter[index]['additionalInfo']=\"\" \r\n    //                 } \r\n    //                 if(ResultParameter[index]['additionalInfoUidata']){  \r\n    //                     ResultParameter[index]['additionalInfoUidata']=\"\" \r\n    //                 } \r\n    //             }\r\n          \r\n    //     }\r\n    //     if (parameter.nparametertypecode === parameterType.CHARACTER) {\r\n    //         sresult = event.target.value;\r\n    //         if (event.target.value.trim() === \"\")\r\n    //             ncalculatedresult = -1;\r\n    //         else\r\n    //             ncalculatedresult = 4;\r\n    //     }\r\n    //     if (parameter.nparametertypecode === parameterType.ATTACHMENT) {\r\n    //         sresult = event[0] && event[0].name;\r\n    //         sfinal= event;\r\n    //         ncalculatedresult = 4\r\n    //     }\r\n    //     ResultParameter[index]['sresult'] = sresult\r\n    //     ResultParameter[index]['sfinal'] = sfinal\r\n    //     ResultParameter[index]['sresultpredefinedname'] = sresultpredefinedname\r\n    //     ResultParameter[index]['sresultcomment'] = sresultcomment\r\n    //     ResultParameter[index]['salertmessage'] = salertmessage\r\n    //     ResultParameter[index]['acceptedFile'] = acceptedFile\r\n    //     ResultParameter[index]['editable'] = true\r\n    //     ResultParameter[index]['ngradecode'] = value\r\n    //     ResultParameter[index]['ncalculatedresult'] = ncalculatedresult \r\n\r\n    //     // this.props.Login.masterData.ResultParameter = ResultParameter;\r\n    //     selectedRecord.ResultParameter = ResultParameter\r\n    //     if (parameter.nparametertypecode === parameterType.PREDEFINED) {\r\n    //         this.props.getPredefinedData(inputData,selectedRecord,currentAlertResultCode,this.props.Login.masterData) \r\n    //     }\r\n    //     this.setState({\r\n    //         selectedRecord: selectedRecord,\r\n    //         currentAlertResultCode,\r\n    //         currentntestgrouptestpredefcode\r\n    //     });\r\n\r\n    //     // const updateInfo = {\r\n    //     //     typeName: DEFAULT_RETURN,\r\n    //     //     data: { masterData: this.props.Login.masterData }\r\n    //     // }\r\n    //     // this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    updateTestMethodSource(inputData, masterData, ncontrolcode) {\r\n        let inputParam = {\r\n\r\n            inputData: { ...inputData, 'userinfo': this.props.Login.userInfo, ncontrolcode },\r\n            // formData: formData,\r\n            // isFileupload: true,\r\n            operation: \"createMethod\",\r\n            screenName: \"IDS_TESTMETHODSOURCE\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData1: inputData,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"createMethod\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateTestMethodSource(inputData, masterData)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    updateParameterComments(inputData, masterData, ncontrolcode) {\r\n        // let inputData1 = { ...inputData, ncontrolcode }\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n        inputData = { ...inputData, ndesigntemplatemappingcode: ndesigntemplatemappingcode }\r\n        let inputParam = {\r\n            inputData: { ...inputData, ncontrolcode, 'userinfo': this.props.Login.userInfo },\r\n            operation: this.props.Login.operation,\r\n            screenName: \"IDS_RESULT\",\r\n            displayName: this.props.Login.inputParam.displayName,//, postParam,\r\n            //inputData: inputData1,\r\n            masterData: masterData\r\n        }\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true,\r\n                    //screenName: \"completeaction\",\r\n                    operation: \"updateParameterComments\"\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateParameterComments(inputData, masterData)\r\n        }\r\n    }\r\n\r\n    onSaveMean = (saveType) => {\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n\r\n        let resultParameter = this.props.Login.selectedTestParameterMean || {};\r\n        //let resultParameter = { };\r\n\r\n        resultParameter[\"ncalculatedresult\"] = 4;\r\n        resultParameter[\"sresult\"] = this.state.testMean;\r\n        resultParameter[\"sfinal\"] = numberConversion(parseFloat(this.state.testMean), parseInt(resultParameter.nroundingdigit));\r\n\r\n        resultParameter[\"ngradecode\"] = numericGrade(resultParameter, parseInt(this.state.testMean));\r\n        resultParameter['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n        resultParameter['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n        // resultParameter['ntransactionresultcode'] = meanParameter.ntransactionresultcode;\r\n        // resultParameter['ntransactiontestcode'] = meanParameter.ntransactiontestcode;\r\n        // resultParameter['nparametertypecode'] = meanParameter.nparametertypecode;\r\n        //console.log(\"result:\", resultParameter);\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"filecount\", 0);\r\n        formData.append(\"nregtypecode\", nregtypecode);\r\n        formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n        formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n        formData.append(\"transactiontestcode\", resultParameter.ntransactiontestcode);\r\n        //formData.append(\"resultData\", JSON.stringify([resultParameter]));\r\n        formData.append(\"resultData\", resultParameter);\r\n\r\n        const inputParam = {\r\n            classUrl: \"resultentrybysample\",\r\n            methodUrl: \"TestParameterResult\",\r\n            inputData: { userinfo: this.props.Login.userInfo },\r\n            formData: formData,\r\n            isFileupload: true,\r\n            operation: \"update\",\r\n            displayName: this.props.Login.inputParam.displayName, saveType\r\n        }\r\n\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    editpredefinedcomments=(dataItem)=>{\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                screenName: \"IDS_RESULTPARAMETERCOMMENTS\",\r\n                openModal: true,\r\n                selectedRecord:{'sresultcomment':dataItem['sresultcomment'],'selectedPredefinedComments':dataItem},\r\n                operation: \"update\" \r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    enforceResult=(dataItem)=>{ \r\n        let inputParam = {}\r\n        inputParam = {\r\n            dataItem:dataItem,\r\n            masterData:this.props.Login.masterData,\r\n            screenName: \"IDS_ENFORCERESULT\",\r\n            openModal: true, \r\n            operation: \"update\" ,\r\n            ncontrolcode:dataItem['ncontrolcode']\r\n        }\r\n        this.props.enforceResult(inputParam,this.props.Login.userInfo);\r\n    }\r\n    onSavePredefinedComments = (saveType) => { \r\n        let inputParam={}\r\n        let stransactiontestcode=\"\";\r\n        this.props.Login.masterData.RESelectedTest.map(x=>{ \r\n            stransactiontestcode+=x['ntransactiontestcode']+\",\"\r\n        }\r\n          )\r\n        let inputData={\r\n            'selectedPredefinedComments':this.state.selectedRecord['selectedPredefinedComments'],\r\n            'ntransactionresultcode': this.state.selectedRecord['selectedPredefinedComments']['ntransactionresultcode']\r\n            ,\r\n            'sresultcomment':this.state.selectedRecord['sresultcomment'],\r\n            'ntransactiontestcode':stransactiontestcode.substring(0,stransactiontestcode.length-1),//this.state.selectedRecord['selectedPredefinedComments']['ntransactiontestcode'],\r\n            'userinfo':this.props.Login.userInfo\r\n        } \r\n        inputParam = {\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"PredefinedComments\", \r\n            inputData: inputData, \r\n        //    isFileupload: false,\r\n          //  activeTestKey: \"IDS_INSTRUMENT\",\r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    onSaveEnforceResult = (saveType) => { \r\n        let inputParam={}\r\n        let stransactiontestcode=\"\";\r\n        const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n        const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n        const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n        // this.props.Login.masterData.RESelectedTest.map(x=>{ \r\n        //     stransactiontestcode+=x['ntransactiontestcode']+\",\"\r\n        // }\r\n        //   )\r\n        let inputData={\r\n            'ResultParameter':{ \r\n              //  ngradecode:this.state.selectedRecord['ngradecode'].value,\r\n                nparametertypecode:parameterType.CHARACTER,\r\n                sfinal:this.state.selectedRecord['senforceresult'],\r\n                senforceresultcomment:this.state.selectedRecord['senforceresultcomment'],\r\n                ntransactiontestcode:this.state.selectedRecord['ntransactiontestcode'],\r\n                ntransactionresultcode:this.state.selectedRecord['ntransactionresultcode']\r\n            },  \r\n           'ntransactionresultcode':this.state.selectedRecord['ntransactionresultcode'],\r\n            \"nregtypecode\" : nregtypecode ,\r\n             \"nregsubtypecode\" : nregsubtypecode,\r\n            \"ndesigntemplatemappingcode\" : ndesigntemplatemappingcode,\r\n            'userinfo':this.props.Login.userInfo\r\n        } \r\n        inputParam = {\r\n            classUrl: 'resultentrybysample',\r\n            methodUrl: \"EnforceResult\", \r\n            inputData: inputData,  \r\n            operation: this.props.Login.operation,\r\n            displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n    // callbackToParent=(childData)=>{\r\n    //     console.log('childData',childData)\r\n    //     this.setState({childData})\r\n    // }\r\n    onSaveClick = (saveType,data) => {\r\n        if (this.props.Login.screenName === \"IDS_MEANPARAMETER\") {\r\n            this.onSaveMean(saveType);\r\n        }else if(this.props.Login.screenName === \"IDS_RESULTPARAMETERCOMMENTS\"){\r\n            this.onSavePredefinedComments(saveType);\r\n        }\r\n        else if(this.props.Login.screenName === \"IDS_ENFORCERESULT\"){\r\n            this.onSaveEnforceResult(saveType);\r\n        }\r\n        else {\r\n            let ResultParameter = this.state.parameterResults//this.props.Login.parameterResults\r\n\r\n            //let ResultParameter = this.state.selectedRecord.ResultParameter || [];\r\n        //    let ResultParameter = this.props.Login.parameterResults || [];\r\n         // let ResultParameter = saveType.parameterResults || [];\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let selectedRecordMaterialForm = this.state.selectedRecordMaterialForm || {}; \r\n            let selectedRecordInstrumentForm= this.state.selectedRecordInstrumentForm || {}; \r\n            let selectedRecordTaskForm= this.state.selectedRecordTaskForm || {};\r\n            let selectedId = this.props.Login.selectedId || null;\r\n            let additionalInfo=this.state.selectedRecord.additionalInfo || []; \r\n            const nregtypecode = parseInt(this.props.Login.masterData.realRegTypeValue.nregtypecode);\r\n            const nregsubtypecode = parseInt(this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode);\r\n            const ndesigntemplatemappingcode = parseInt(this.props.Login.masterData.ndesigntemplatemappingcode && this.props.Login.masterData.ndesigntemplatemappingcode);\r\n\r\n            const classUrl = \"resultentrybysample\";\r\n            const formData = new FormData();\r\n            let neditable = 0;\r\n            let resultParameters = [];\r\n            let inputParam = {};\r\n            let inputData = [];\r\n            let i = 0;\r\n            //const postParam = {inputListName: \"RESelectedTest\", selectedObject: \"RESelectedTest\", primaryKeyField: \"ntransactionstestcode\" };\r\n            if (this.props.Login.screenName === \"IDS_RESULTENTRY\") {\r\n                if (ResultParameter.length > 0 && ResultParameter !== undefined) {\r\n                    ResultParameter.map((resultData, index) => {\r\n                        let results = {};\r\n                        if (resultData.editable === true) {\r\n                            neditable = 1;\r\n                            switch (resultData.nparametertypecode) {\r\n                                case 1:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: resultData[\"ncalculatedresult\"],\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"sfinal\"] = resultData.sresult !== \"\" ?\r\n                                        numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                    results[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                        numericGrade(resultData, results[\"sfinal\"]) : -1;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 2:\r\n                                    resultData['additionalInfoUidata'] !== undefined && resultData['additionalInfoUidata'] !== null && resultData['additionalInfoUidata'].hasOwnProperty('ntestgrouptestpredefsubcode') && \r\n                                    resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'].length > 0 && \r\n                                    resultData['additionalInfoUidata']['ntestgrouptestpredefsubcode'].map(item => {\r\n                                        item['label'] = Lims_JSON_stringify(item['label'],false);\r\n                                        item['item']['ssubcodedresult'] = Lims_JSON_stringify(item['item']['ssubcodedresult'],false);\r\n                                    })\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: Lims_JSON_stringify(replaceBackSlash(resultData.sresult)),\r\n                                        sfinal: Lims_JSON_stringify(replaceBackSlash(resultData.sfinal)),  \r\n                                        sresultcomment: resultData.sresultcomment==='null'?\"-\":Lims_JSON_stringify(resultData.sresultcomment),\r\n                                        salertmessage: Lims_JSON_stringify(resultData.salertmessage,false),\r\n                                        additionalInfo:resultData['additionalInfo'] !== null ? Lims_JSON_stringify(resultData['additionalInfo'],false) : resultData['additionalInfo'],\r\n                                        additionalInfoUidata:resultData['additionalInfoUidata']===undefined?\"\":resultData['additionalInfoUidata'],\r\n                                        ntestgrouptestpredefcode:resultData.ntestgrouptestpredefcode  \r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                   \r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.ngradecode;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 3:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: Lims_JSON_stringify(replaceBackSlash(resultData.sresult)),\r\n                                        sfinal: Lims_JSON_stringify(replaceBackSlash(resultData.sresult))\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    break;\r\n                                case 4:\r\n                                    if (resultData.sfinal.length>0 ) {\r\n                                        const splittedFileName = resultData.sfinal ?resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.sfinal ?resultData.sfinal[0]&& resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = create_UUID() + '.' + fileExtension;\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: Lims_JSON_stringify(resultData.sresult,false),\r\n                                            sfinal: Lims_JSON_stringify(resultData.sresult,false)\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = uniquefilename;\r\n                                        results[\"nfilesize\"] =resultData.sfinal[0] && resultData.sfinal[0].size;\r\n                                        formData.append(\"uploadedFile\" + index, resultData.sfinal[0] && resultData.sfinal[0]);\r\n                                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                                        formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\r\n                                        i++;\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        const splittedFileName = resultData.sfinal ?resultData.sfinal[0] &&  resultData.sfinal[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] &&  resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = \"\";\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: \"\",\r\n                                            sfinal: \"\"\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = \"\";\r\n                                        results[\"sfinal\"] = \"\";\r\n                                        results[\"ngradecode\"] = -1;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = \"\";\r\n                                        results[\"nfilesize\"] = \"\";\r\n                                        formData.append(\"uploadedFile\" + index,\"\");\r\n                                        formData.append(\"uniquefilename\" + index, \"\");\r\n                                        formData.append(\"ntransactiontestcode\", \"\");\r\n                                    }\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            if (Object.values(results).length > 0) {\r\n                                resultParameters.push(results);\r\n                            }\r\n                        }\r\n                        return null;\r\n                    });\r\n\r\n                    if (neditable === 0) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false,parameterResults:[] ,selectedRecord :{} }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n                    }\r\n\r\n                    formData.append(\"filecount\", i);\r\n                    formData.append(\"nregtypecode\", nregtypecode);\r\n                    formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n                    formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n                    formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\r\n\r\n                    formData.append(\"resultData\", JSON.stringify(resultParameters));\r\n                    const tests = this.props.Login.masterData.RESelectedTest ?\r\n                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                    formData.append(\"transactiontestcode\", tests);\r\n                    //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"TestParameterResult\",\r\n                        inputData: { userinfo: this.props.Login.userInfo },\r\n                        formData: formData,\r\n                        isFileupload: true,\r\n                        operation: \"update\",\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//, postParam\r\n                    }\r\n                }\r\n                else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { loading: false, openModal: false }\r\n                    }\r\n                    return this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n            if (this.props.Login.screenName === \"IDS_RESULTENTRYPARAMETER\") {\r\n                if (this.state.selectedsubcode && this.state.selectedsubcode.length > 0 && this.state.selectedsubcode !== undefined) {\r\n                if (ResultParameter.length > 0 && ResultParameter !== undefined) {\r\n                    ResultParameter.map((resultData, index) => {\r\n                        let results = {};\r\n                        if (resultData.editable === true) {\r\n                            neditable = 1;\r\n                            switch (resultData.nparametertypecode) {\r\n                                case 1:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: resultData[\"ncalculatedresult\"],\r\n                                        sresult: resultData.sresult,\r\n                                        sfinal: resultData.sresult !== \"\" ? numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\"\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"ncalculatedresult\"] = resultData[\"ncalculatedresult\"];\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"sfinal\"] = resultData.sresult !== \"\" ?\r\n                                        numberConversion(parseFloat(resultData.sresult), parseInt(resultData.nroundingdigits)) : \"\";\r\n                                    results[\"ngradecode\"] = resultData.sresult !== \"\" ?\r\n                                        numericGrade(resultData, results[\"sfinal\"]) : -1;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                    break;\r\n                                case 2:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: Lims_JSON_stringify(resultData.sresult,false),\r\n                                        sfinal: Lims_JSON_stringify(resultData.sfinal,false),  \r\n                                        sresultcomment: resultData.sresultcomment==='null'?\"-\":resultData.sresultcomment,\r\n                                        salertmessage: resultData.salertmessage,\r\n                                        additionalInfo:resultData['additionalInfo'],\r\n                                        additionalInfoUidata:resultData['additionalInfoUidata']===undefined?\"\":resultData['additionalInfoUidata'],\r\n                                        ntestgrouptestpredefcode:resultData.ntestgrouptestpredefcode  \r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                   \r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.ngradecode;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                    break;\r\n                                case 3:\r\n                                    results[\"jsondata\"] = {\r\n                                        ncalculatedresult: 4,\r\n                                        sresult: Lims_JSON_stringify(resultData.sresult,false),\r\n                                        sfinal: Lims_JSON_stringify(resultData.sresult,false)\r\n                                    }\r\n                                    results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                    results[\"sresult\"] = resultData.sresult;\r\n                                    results[\"ncalculatedresult\"] = 4;\r\n                                    results[\"sfinal\"] = resultData.sresult;\r\n                                    results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\r\n                                    results['nenteredrole'] = this.props.Login.userInfo.nuserrole;\r\n                                    results['nenteredby'] = this.props.Login.userInfo.nusercode;\r\n                                    //results['ntransactionresultcode'] = resultData.ntransactionresultcode;\r\n                                    //results['ntransactiontestcode'] = resultData.ntransactiontestcode;\r\n                                    results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                    results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                    break;\r\n                                case 4:\r\n                                    if (resultData.sfinal.length>0 ) {\r\n                                        const splittedFileName = resultData.sfinal ?resultData.sfinal[0] && resultData.sfinal[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.sfinal ?resultData.sfinal[0]&& resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = create_UUID() + '.' + fileExtension;\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.sfinal[0] && resultData.sfinal[0].size,\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: Lims_JSON_stringify(resultData.sresult,false),\r\n                                            sfinal: Lims_JSON_stringify(resultData.sresult,false)\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = resultData.sresult;\r\n                                        results[\"sfinal\"] = resultData.sresult;\r\n                                        results[\"ngradecode\"] = resultData.sresult.trim() === \"\" ? -1 : grade.FIO;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        //results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        //results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results[\"ssystemfilename\"] = uniquefilename;\r\n                                        results[\"nfilesize\"] =resultData.sfinal[0] && resultData.sfinal[0].size;\r\n                                        formData.append(\"uploadedFile\" + index, resultData.sfinal[0] && resultData.sfinal[0]);\r\n                                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                                        //formData.append(\"ntransactiontestcode\", resultData.ntransactiontestcode);\r\n                                        i++;\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        const splittedFileName = resultData.sfinal ?resultData.sfinal[0] &&  resultData.sfinal[0].name.split('.') : \"\";\r\n                                        const fileExtension = resultData.sfinal ? resultData.sfinal[0] &&  resultData.sfinal[0].name.split('.')[splittedFileName.length - 1] : \"\";\r\n                                        const uniquefilename = \"\";\r\n                                        results[\"jsondata\"] = {\r\n                                            ssystemfilename: uniquefilename,\r\n                                            nfilesize: resultData.sfinal ? resultData.sfinal[0] && resultData.sfinal[0].size : \"\",\r\n                                            ncalculatedresult: 4,\r\n                                            sresult: \"\",\r\n                                            sfinal: \"\"\r\n                                        }\r\n                                        results[\"jsonstring\"] = JSON.stringify(results[\"jsondata\"]);\r\n                                        results[\"ncalculatedresult\"] = 4;\r\n                                        results[\"sresult\"] = \"\";\r\n                                        results[\"sfinal\"] = \"\";\r\n                                        results[\"ngradecode\"] = -1;\r\n                                        results[\"nenteredrole\"] = this.props.Login.userInfo.nuserrole;\r\n                                        results[\"nenteredby\"] = this.props.Login.userInfo.nusercode;\r\n                                        //results[\"ntransactionresultcode\"] = resultData.ntransactionresultcode;\r\n                                        //results[\"ntransactiontestcode\"] = resultData.ntransactiontestcode;\r\n                                        results['nparametertypecode'] = resultData.nparametertypecode;\r\n                                        results['ntestgrouptestparametercode'] = resultData.ntestgrouptestparametercode;\r\n                                        results[\"ssystemfilename\"] = \"\";\r\n                                        results[\"nfilesize\"] = \"\";\r\n                                        formData.append(\"uploadedFile\" + index,\"\");\r\n                                        formData.append(\"uniquefilename\" + index, \"\");\r\n                                        //formData.append(\"ntransactiontestcode\", \"\");\r\n                                    }\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            if (Object.values(results).length > 0) {\r\n                                resultParameters.push(results);\r\n                            }\r\n                        }\r\n                        return null;\r\n                    });\r\n\r\n                    if (neditable === 0) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false,parameterResults:[] ,selectedRecord :{} }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n                    }\r\n\r\n                    formData.append(\"filecount\", i);\r\n                    formData.append(\"nregtypecode\", nregtypecode);\r\n                    formData.append(\"nregsubtypecode\", nregsubtypecode);\r\n                    formData.append(\"ncontrolcode\", this.props.Login.ncontrolcode);\r\n                    formData.append(\"ndesigntemplatemappingcode\", ndesigntemplatemappingcode);\r\n\r\n                    formData.append(\"resultData\", JSON.stringify(resultParameters));\r\n                    const tests = this.props.Login.masterData.RESelectedTest ?\r\n                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"\"\r\n                        const sampleid = this.state.selectedsubcode ?\r\n                        this.state.selectedsubcode.map(test => test.ssampleid).join(\"','\") : \"\"\r\n\r\n                    formData.append(\"transactiontestcode\", tests);\r\n                    formData.append(\"sampleid\", sampleid);\r\n                    formData.append(\"ntestcode\",this.props.Login.masterData.realTestcodeValue && this.props.Login.masterData.realTestcodeValue.ntestcode)\r\n                    formData.append(\"nallottedspeccode\",this.state.selectedRecord.nallottedspeccode.value);\r\n                    formData.append(\"nspecsampletypecode\",this.state.selectedRecord.ncomponentcode.value);\r\n                    //let postParam = {inputListName: \"RE_TEST\", selectedObject: \"\", primaryKeyField: \"ntransactionresultcode\" };\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"MultiSampleTestParameterResult\",\r\n                        inputData: { userinfo: this.props.Login.userInfo },\r\n                        formData: formData,\r\n                        isFileupload: true,\r\n                        operation: \"update\",\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//, postParam\r\n                    }\r\n                }\r\n                else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: { loading: false, openModal: false }\r\n                    }\r\n                    return this.props.updateStore(updateInfo);\r\n                }\r\n            }\r\n            else {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { loading: false }\r\n                }\r\n                \r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSAMPLE\" }));\r\n                return this.props.updateStore(updateInfo);\r\n            }\r\n            }\r\n\r\n\r\n            if (this.props.Login.screenName === \"IDS_TESTMETHODSOURCE\") {\r\n                inputData = {\r\n                    ntype: 3,\r\n                    nflag: 3,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue.nsampletypecode,\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue.nregtypecode,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode,\r\n                    ntranscode: this.props.Login.masterData.realFilterStatusValue.ntransactionstatus.toString(),\r\n                    ntestcode: this.props.Login.masterData.realTestcodeValue.ntestcode,\r\n                    npreregno: this.props.Login.masterData.RESelectedSample && this.props.Login.masterData.RESelectedSample.map(sample => sample.npreregno).join(\",\"),\r\n                    ntransactionsamplecode: this.props.Login.masterData.RESelectedSubSample && this.props.Login.masterData.RESelectedSubSample.map(sample => sample.ntransactionsamplecode).join(\",\"),\r\n                    nmethodcode: selectedRecord.nmethodcode.value,\r\n                    nsourcecode: selectedRecord.nsourcecode.value,\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    activeTestKey: \"IDS_RESULTS\",\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"TestMethodSource\",\r\n                //     inputData: inputData,\r\n                //     isFileupload: false,\r\n                //     operation: \"update\",\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n\r\n                this.updateTestMethodSource(inputData, this.props.Login.masterData, this.props.Login.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_INSTRUMENT\") {\r\n                let inputData = []; \r\n                \r\n                if (this.props.Login.operation === \"update\") {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            nresultusedinstrumentcode: selectedRecordInstrumentForm.nresultusedinstrumentcode,\r\n                            npreregno: selectedRecordInstrumentForm.npreregno,\r\n                            ninstrumentcatcode: selectedRecordInstrumentForm.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecordInstrumentForm.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecordInstrumentForm.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecordInstrumentForm.dtodate, false),\r\n                            stzfromdate: selectedRecordInstrumentForm.ntzfromdate.label,\r\n                            stztodate: selectedRecordInstrumentForm.ntztodate.label,\r\n                            ntzfromdate: selectedRecordInstrumentForm.ntzfromdate.value,\r\n                            ntztodate: selectedRecordInstrumentForm.ntztodate.value,\r\n                            ntransactiontestcode: selectedRecordInstrumentForm.ntransactiontestcode\r\n\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                    }\r\n                }\r\n                else {\r\n                    inputData = {\r\n                        ResultUsedInstrument: {\r\n                            ntransactiontestcode: selectedRecordInstrumentForm.ntransactiontestcode,\r\n                            npreregno: selectedRecordInstrumentForm.npreregno,\r\n                            ninstrumentcatcode: selectedRecordInstrumentForm.ninstrumentcatcode.value,\r\n                            ninstrumentcode: selectedRecordInstrumentForm.ninstrumentcode.value,\r\n                            dfromdate: formatInputDate(selectedRecordInstrumentForm.dfromdate, false),\r\n                            dtodate: formatInputDate(selectedRecordInstrumentForm.dtodate, false),\r\n                            stzfromdate: selectedRecordInstrumentForm.ntzfromdate.label,\r\n                            stztodate: selectedRecordInstrumentForm.ntztodate.label,\r\n                            ntzfromdate: selectedRecordInstrumentForm.ntzfromdate.value,\r\n                            ntztodate: selectedRecordInstrumentForm.ntztodate.value\r\n                        },\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode,\r\n                        ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                            this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                    }\r\n                }\r\n                inputParam = {\r\n                    classUrl: classUrl,\r\n                    methodUrl: \"ResultUsedInstrument\",\r\n\r\n                    inputData: inputData, selectedId,\r\n                    isFileupload: false,\r\n                    activeTestKey: \"IDS_INSTRUMENT\",\r\n                    operation: this.props.Login.operation,\r\n                    displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                let inputData = [];\r\n                if (this.state.selectedRecordMaterialForm.nmaterialcode != \"\") {\r\n                    if (this.state.selectedRecordMaterialForm.nmaterialinventorycode != \"\") {\r\n                        if (parseFloat(this.state.selectedRecordMaterialForm.susedquantity) <= parseFloat(this.state.selectedRecordMaterialForm.savailablequantity)) {\r\n                            if (this.props.Login.operation === \"update\") {\r\n                                inputData = {\r\n                                    ResultUsedMaterial: {\r\n                                        nresultusedmaterialcode: selectedRecordMaterialForm.nresultusedmaterialcode,\r\n                                        ntransactiontestcode: selectedRecordMaterialForm.ntransactiontestcode,\r\n                                        npreregno: selectedRecordMaterialForm.npreregno,\r\n                                        nmaterialtypecode: selectedRecordMaterialForm.nmaterialtypecode.value,\r\n                                        nmaterialcategorycode: selectedRecordMaterialForm.nmaterialcategorycode.value,\r\n                                        nmaterialcode: selectedRecordMaterialForm.nmaterialcode.value,\r\n                                        ninventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                        jsondata: {\r\n                                            sarno: selectedRecordMaterialForm.sarno,\r\n                                            ssamplearno: selectedRecordMaterialForm.ssamplearno,\r\n                                            stestsynonym: selectedRecordMaterialForm.stestsynonym,\r\n                                            smaterialcatname: selectedRecordMaterialForm.nmaterialcatcode.label,\r\n                                            smaterialname: selectedRecordMaterialForm.nmaterialcode.label,\r\n                                            sinventoryid: selectedRecordMaterialForm.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecordMaterialForm.susedquantity,\r\n                                            scarriergas: selectedRecordMaterialForm.scarriergas,\r\n                                            smobilephase: selectedRecordMaterialForm.smobilephase,\r\n                                            sremarks: selectedRecordMaterialForm.sremarks,\r\n                                            susername: this.props.Login.userInfo.susername,\r\n                                            nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                            ssectionname: selectedRecordMaterialForm.ssectionname,\r\n                                            ntestgroupmaterial:selectedRecordMaterialForm.ntestgroupmaterial,\r\n                                            ntestgrouptestcode:selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? \r\n                                            this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode :-1\r\n                                        }\r\n                                    },\r\n                                    MaterialInventoryTrans: {\r\n                                        nmaterialinventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                        jsondata: {\r\n                                            IDS_INVENTORYID: selectedRecordMaterialForm.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecordMaterialForm.susedquantity,\r\n                                        }\r\n                                    },\r\n                                    userinfo: this.props.Login.userInfo,\r\n                                    nregtypecode: nregtypecode,\r\n                                    nregsubtypecode: nregsubtypecode,\r\n                                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                                    nresultusedmaterialcode: selectedRecordMaterialForm.nresultusedmaterialcode,\r\n                                    ntransactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\").toString() : \"\",\r\n                                }\r\n                            }\r\n                            else {\r\n                                inputData = {\r\n                                    ResultUsedMaterial: {\r\n                                        ntransactiontestcode: selectedRecordMaterialForm.ntransactiontestcode,\r\n                                        npreregno: selectedRecordMaterialForm.npreregno,\r\n                                        nmaterialtypecode: selectedRecordMaterialForm.nmaterialtypecode.value,\r\n                                        nmaterialcategorycode: selectedRecordMaterialForm.nmaterialcatcode.value,\r\n                                        nmaterialcode: selectedRecordMaterialForm.nmaterialcode.value,\r\n                                        ninventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                        jsondata: {\r\n                                            sarno: selectedRecordMaterialForm.sarno,\r\n                                            ssamplearno: selectedRecordMaterialForm.ssamplearno,\r\n                                            stestsynonym: selectedRecordMaterialForm.stestsynonym,\r\n                                            smaterialcatname: selectedRecordMaterialForm.nmaterialcatcode.label,\r\n                                            smaterialname: selectedRecordMaterialForm.nmaterialcode.label,\r\n                                            sinventoryid: selectedRecordMaterialForm.nmaterialinventorycode.label,\r\n                                            nqtyused: selectedRecordMaterialForm.susedquantity,\r\n                                            scarriergas: selectedRecordMaterialForm.scarriergas,\r\n                                            smobilephase: selectedRecordMaterialForm.smobilephase,\r\n                                            sremarks: selectedRecordMaterialForm.sremarks,\r\n                                            smaterialtypename: selectedRecordMaterialForm.nmaterialtypecode.label,\r\n                                            nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                            ntestgroupmaterial:selectedRecordMaterialForm.ntestgroupmaterial,\r\n                                            ssectionname: selectedRecordMaterialForm.ssectionname,\r\n                                            ntestgrouptestcode:selectedRecordMaterialForm.ntestgroupmaterial == transactionStatus.YES ? \r\n                                            this.props.Login.masterData.RESelectedTest[0].ntestgrouptestcode :-1\r\n                                        }\r\n                                    },\r\n                                    MaterialInventoryTrans: {\r\n                                        nmaterialinventorycode: selectedRecordMaterialForm.nmaterialinventorycode.value,\r\n                                        nsectioncode: selectedRecordMaterialForm.nsectioncode,\r\n                                        jsondata: {\r\n                                            nqtyused: selectedRecordMaterialForm.susedquantity,\r\n                                            IDS_INVENTORYID: selectedRecordMaterialForm.nmaterialinventorycode.label\r\n                                        }\r\n                                    },\r\n                                    userinfo: this.props.Login.userInfo,\r\n                                    nregtypecode: nregtypecode,\r\n                                    nregsubtypecode: nregsubtypecode,\r\n                                    ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                                    transactiontestcode: this.props.Login.masterData.RESelectedTest ?\r\n                                        this.props.Login.masterData.RESelectedTest.map(test => test.ntransactiontestcode).join(\",\") : \"-1\",\r\n                                }\r\n                            }\r\n                            inputParam = {\r\n                                classUrl: classUrl,\r\n                                methodUrl: \"ResultUsedMaterial\",\r\n                                inputData: inputData, selectedId,\r\n                                isFileupload: false,\r\n                                activeTestKey: \"IDS_MATERIAL\",\r\n                                operation: this.props.Login.operation,\r\n                                displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                            }\r\n                        } else {\r\n                            toast.warn(this.props.intl.formatMessage({ id: \"Quantity Not available\" }))\r\n                            return null;\r\n                        }\r\n\r\n\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"Select Material Inventory\" }))\r\n                        return null;\r\n                    }\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"Select Material\" }))\r\n                    return null;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_TASK\") {\r\n                // if ((selectedRecord.sanalysistime && selectedRecord.sanalysistime !== \"\")\r\n                //     || (selectedRecord.smisctime && selectedRecord.smisctime !== \"\")\r\n                //     || (selectedRecord.spreanalysistime && selectedRecord.spreanalysistime !== \"\")\r\n                //     || (selectedRecord.spreparationtime && selectedRecord.spreparationtime !== \"\")\r\n                //     || (selectedRecord.scomments && selectedRecord.scomments !== \"\")) {\r\n                //     if (this.props.Login.operation === \"update\") {\r\n                    if ((selectedRecordTaskForm.sanalysistime && selectedRecordTaskForm.sanalysistime !== \"\")\r\n                    || (selectedRecordTaskForm.smisctime && selectedRecordTaskForm.smisctime !== \"\")\r\n                    || (selectedRecordTaskForm.spreanalysistime && selectedRecordTaskForm.spreanalysistime !== \"\")\r\n                    || (selectedRecordTaskForm.spreparationtime && selectedRecordTaskForm.spreparationtime !== \"\")\r\n                    || (selectedRecordTaskForm.scomments && selectedRecordTaskForm.scomments !== \"\")) {\r\n                    if (this.props.Login.operation === \"update\") {\r\n                        inputData = {\r\n                            ResultUsedTasks: {\r\n                                nresultusedtaskcode: selectedRecordTaskForm.nresultusedtaskcode,\r\n                                jsondata: {\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    sarno: this.props.Login.masterData.RESelectedTest[0].sarno,\r\n                                    ssamplearno: this.props.Login.masterData.RESelectedTest[0].ssamplearno,\r\n                                    stestsynonym: selectedRecordTaskForm.stestsynonym,\r\n                                    sanalysistime: selectedRecordTaskForm.sanalysistime ? selectedRecordTaskForm.sanalysistime : \"\",\r\n                                    sanalyst: this.props.Login.userInfo.susername,\r\n                                    smisctime: selectedRecordTaskForm.smisctime ? selectedRecordTaskForm.smisctime : \"\",\r\n                                    spreanalysistime: selectedRecordTaskForm.spreanalysistime ? selectedRecordTaskForm.spreanalysistime : \"\",\r\n                                    spreparationtime: selectedRecordTaskForm.spreparationtime ? selectedRecordTaskForm.spreparationtime : \"\",\r\n                                    staskprocedure: selectedRecordTaskForm.staskprocedure ? selectedRecordTaskForm.staskprocedure : \"\",\r\n                                    scomments: selectedRecordTaskForm.scomments ? selectedRecordTaskForm.scomments : \"\"\r\n                                }\r\n                            },\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ndesigntemplatemappingcode: ndesigntemplatemappingcode,\r\n                        }\r\n                    }\r\n                    else {\r\n                        let taskArry = [];\r\n                        this.props.Login.masterData.RESelectedTest &&\r\n                            this.props.Login.masterData.RESelectedTest.map(test =>\r\n\r\n                                taskArry.push({\r\n                                    //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                    ntransactiontestcode: parseInt(test.ntransactiontestcode),\r\n                                    npreregno: parseInt(test.npreregno),\r\n                                    // sanalysistime: selectedRecord.sanalysistime ? selectedRecord.sanalysistime : \"\",\r\n                                    // sanalyst: this.props.Login.userInfo.susername,\r\n                                    // smisctime: selectedRecord.smisctime ? selectedRecord.smisctime : \"\",\r\n                                    // spreanalysistime: selectedRecord.spreanalysistime ? selectedRecord.spreanalysistime : \"\",\r\n                                    // spreparationtime: selectedRecord.spreparationtime ? selectedRecord.spreparationtime : \"\",\r\n                                    // scomments: selectedRecord.scomments ? selectedRecord.scomments : \"\",\r\n                                    // npreregno: this.props.Login.masterData.RESelectedSample ? this.props.Login.masterData.RESelectedSample.map(preregno => preregno.npreregno).join(\",\").toString() : \"\",\r\n                                    jsondata: {\r\n                                        //ntransactiontestcode: parseInt(selectedRecord.ntransactiontestcode),\r\n                                        sarno: test.sarno,\r\n                                        ssamplearno: test.ssamplearno,\r\n                                        stestsynonym: test.stestsynonym,\r\n                                        sanalysistime: selectedRecordTaskForm.sanalysistime ? selectedRecordTaskForm.sanalysistime : \"\",\r\n                                        sanalyst: this.props.Login.userInfo.susername,\r\n                                        smisctime: selectedRecordTaskForm.smisctime ? selectedRecordTaskForm.smisctime : \"\",\r\n                                        spreanalysistime: selectedRecordTaskForm.spreanalysistime ? selectedRecordTaskForm.spreanalysistime : \"\",\r\n                                        spreparationtime: selectedRecordTaskForm.spreparationtime ? selectedRecordTaskForm.spreparationtime : \"\",\r\n                                        staskprocedure: selectedRecordTaskForm.staskprocedure ? selectedRecordTaskForm.staskprocedure : \"\",\r\n                                        scomments: selectedRecordTaskForm.scomments ? selectedRecordTaskForm.scomments : \"\"\r\n                                    }\r\n                                })\r\n                            )\r\n                        inputData = {\r\n                            ResultUsedTasks: taskArry,\r\n                            userinfo: this.props.Login.userInfo,\r\n                            ntransactiontestcode: this.props.Login.masterData.RESelectedTest && this.props.Login.masterData.RESelectedTest.map(sample => sample.ntransactiontestcode).join(\",\"),\r\n                            nregtypecode: nregtypecode,\r\n                            nregsubtypecode: nregsubtypecode,\r\n                            ndesigntemplatemappingcode: ndesigntemplatemappingcode\r\n                        }\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultUsedTasks\",\r\n                        inputData: inputData, selectedId,\r\n                        activeTestKey: \"IDS_TASK\",\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                } else {\r\n                    toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTASKTIME\" }));\r\n                    return;\r\n                }\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_PARAMETERCOMMENTS\") {\r\n                inputData = {\r\n                    ntransactiontestcode: selectedRecord.ntransactiontestcode,\r\n                    ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                    sresultcomment: selectedRecord.sresultcomment,\r\n                    transactiontestcode: selectedRecord.transactiontestcode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nregtypecode: nregtypecode,\r\n                    nregsubtypecode: nregsubtypecode,\r\n                    ncontrolcode: this.props.Login.ncontrolcode\r\n\r\n                }\r\n                // inputParam = {\r\n                //     classUrl: classUrl,\r\n                //     methodUrl: \"ParameterComments\",\r\n                //     inputData: inputData, selectedId,\r\n                //     isFileupload: false,\r\n                //     operation: this.props.Login.operation,\r\n                //     displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                // }\r\n                this.updateParameterComments(inputData, this.props.Login.masterData, selectedRecord.ncontrolcode);\r\n                return;\r\n            }\r\n            if (this.props.Login.screenName === \"IDS_CHECKLISTRESULT\") {\r\n                let lstResultCheckList = [];\r\n                if (selectedRecord && selectedRecord.editedQB) {\r\n                    selectedRecord.editedQB.map(qbcode =>\r\n                        lstResultCheckList.push(selectedRecord[qbcode]));\r\n                    inputData = {\r\n                        ntransactiontestcode: selectedRecord.ntransactiontestcode.toString(),\r\n                        ntransactionresultcode: selectedRecord.ntransactionresultcode,\r\n                        transactiontestcode: selectedRecord.transactiontestcode,\r\n                        ResultCheckList: lstResultCheckList,\r\n                        userinfo: this.props.Login.userInfo,\r\n                        nregtypecode: nregtypecode,\r\n                        nregsubtypecode: nregsubtypecode\r\n                    }\r\n                    inputParam = {\r\n                        classUrl: classUrl,\r\n                        methodUrl: \"ResultEntryChecklist\",\r\n                        inputData: inputData, selectedId,\r\n                        isFileupload: false,\r\n                        operation: this.props.Login.operation,\r\n                        displayName: this.props.Login.inputParam.displayName, saveType//postParam\r\n                    }\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n    gridfillingColumn(data) {\r\n        //  const tempArray = [];\r\n        const temparray = data && data.map((option) => {\r\n            return { \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode], \"dataField\": option[designProperties.VALUE], \"width\": \"200px\", \"columnSize\": \"3\",\"dataType\":[option[designProperties.LISTITEM]] };\r\n        });\r\n        return temparray;\r\n    }\r\n    constructDesign(list) {\r\n\r\n        let newList = []\r\n        if (list.length > 0) {\r\n            list.map((i) => {\r\n                newList.push({ [designProperties.LABEL]: i, [designProperties.VALUE]: i })\r\n            })\r\n        }\r\n        return newList;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let { showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n            materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n            historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n            SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n            SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n            testMoreField, selectedRecord, SampleType, RegistrationType, RegistrationSubType,\r\n            REFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion, DynamicSampleColumns,\r\n            DynamicSubSampleColumns, DynamicTestColumns, DynamicGridItem, DynamicGridMoreField,\r\n            validateFormulaMandyFields, skip, take, testskip, testtake, selectedFilter, stateDynamicDesign,\r\n            activeTabIndex, activeTabId, sampleChangeDataState,testSearchField,AdhocParamter,\r\n            Batchvalues,Worklistvalues,ConfigurationFilterValues,enlLink,openELNSheet,parameterResults,isParameterInitialRender,isaddSampleRender\r\n        ,selectedRecordTaskForm ,isTaskInitialRender,selectedRecordMaterialForm,isMaterialInitialRender\r\n        ,selectedRecordInstrumentForm,isInstrumentInitialRender\r\n        , subSampleSkip, subSampleTake,sampleSearchField,subsampleSearchField\r\n    } = this.state;\r\n             //,currentAlertResultCode,currentntestgrouptestpredefcode\r\n       \r\n        let bool = false;\r\n \r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                bool = true;\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n        }\r\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n            const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n            DynamicSampleColumns = dynamicColumn.samplelistitem ? dynamicColumn.samplelistitem : [];\r\n            DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n            DynamicTestColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n\r\n            DynamicGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n            DynamicGridMoreField = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n\r\n            SingleItem = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n            // testMoreField = dynamicColumn.testlistmoreitems ? dynamicColumn.testlistmoreitems : [];\r\n            // testListColumns = dynamicColumn.testlistitem ? dynamicColumn.testlistitem : []\r\n            \r\n            testMoreField = dynamicColumn.testListFields.testlistmoreitems ? dynamicColumn.testListFields.testlistmoreitems: []; \r\n            testListColumns = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : []; \r\n            testSearchField = dynamicColumn.testListFields.testsearchfields ? dynamicColumn.testListFields.testsearchfields : [];  \r\n            \r\n            sampleSearchField = dynamicColumn.samplesearchfields ? dynamicColumn.samplesearchfields : [];\r\n            subsampleSearchField = dynamicColumn.subsamplesearchfields ? dynamicColumn.subsamplesearchfields : [];\r\n\r\n\r\n            this.props.Login.masterData.RegSubTypeValue && this.props.Login.masterData.RegSubTypeValue.nneedsubsample &&\r\n            DynamicSubSampleColumns.push({1:{'en-US': 'Specimen', 'ru-RU': 'Образец', 'tg-TG': 'Намуна'},\r\n            2:\"scomponentname\"});\r\n            \r\n            bool = true;\r\n        }\r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataState = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n            resultDataState = dataState;\r\n            instrumentDataState = dataState;\r\n            materialDataState = dataState;\r\n            taskDataState = dataState;\r\n            documentDataState = dataState;\r\n            resultChangeDataState = dataState;\r\n            historyDataState = dataState;\r\n            testCommentDataState = dataState;\r\n            sampleChangeDataState = dataState;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.selectedRecordTaskForm !== previousProps.Login.selectedRecordTaskForm) {\r\n            bool = true;\r\n            selectedRecordTaskForm = this.props.Login.selectedRecordTaskForm;\r\n        }\r\n        if (this.props.Login.selectedRecordMaterialForm !== previousProps.Login.selectedRecordMaterialForm) {\r\n            bool = true;\r\n            selectedRecordMaterialForm = this.props.Login.selectedRecordMaterialForm;\r\n        }\r\n\r\n        if (this.props.Login.selectedRecordInstrumentForm !== previousProps.Login.selectedRecordInstrumentForm) {\r\n            bool = true;\r\n            selectedRecordInstrumentForm = this.props.Login.selectedRecordInstrumentForm;\r\n        }\r\n        if (this.props.Login.parameterResults !== previousProps.Login.parameterResults) {\r\n            bool = true;\r\n            parameterResults = this.props.Login.parameterResults;\r\n        }\r\n        if (this.props.Login.isTaskInitialRender !== previousProps.Login.isTaskInitialRender) {\r\n            bool = true;\r\n            isTaskInitialRender = this.props.Login.isTaskInitialRender;\r\n        }\r\n        if (this.props.Login.isParameterInitialRender !== previousProps.Login.isParameterInitialRender) {\r\n            bool = true;\r\n            isParameterInitialRender = this.props.Login.isParameterInitialRender;\r\n        }\r\n        if (this.props.Login.isaddSampleRender !== previousProps.Login.isaddSampleRender) {\r\n            bool = true;\r\n            isaddSampleRender = this.props.Login.isaddSampleRender;\r\n        }\r\n        \r\n\r\n        // if (this.props.Login.currentAlertResultCode !== previousProps.Login.currentAlertResultCode) {\r\n        //     bool = true;\r\n        //     currentAlertResultCode = this.props.Login.currentAlertResultCode;\r\n        // }\r\n        // if (this.props.Login.currentntestgrouptestpredefcode !== previousProps.Login.currentntestgrouptestpredefcode) {\r\n        //     bool = true;\r\n        //     currentntestgrouptestpredefcode = this.props.Login.currentntestgrouptestpredefcode;\r\n        // }\r\n        if (this.props.Login.validateFormulaMandyFields !== previousProps.Login.validateFormulaMandyFields) {\r\n            bool = true;\r\n            validateFormulaMandyFields = this.props.Login.validateFormulaMandyFields;\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            REFilterStatus = constructOptionList(this.props.Login.masterData.REFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestsynonym', 'ascending', 'ntestcode', false);\r\n            Batchvalues = constructOptionList(this.props.Login.masterData.Batchvalues || [], 'nbatchmastercode', 'sbatcharno', 'ascending', 'nbatchmastercode', false);\r\n            Worklistvalues = constructOptionList(this.props.Login.masterData.Worklistvalues || [], 'nworklistcode', 'sworklistno', 'ascending', 'nworklistcode', false);\r\n            ConfigurationFilterValues = constructOptionList(this.props.Login.masterData.ConfigurationFilterValues || [], 'nconfigfiltercode', 'sfiltername', 'ascending', 'nconfigfiltercode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            // AdhocParamter = constructOptionList(this.props.Login.masterData.AdhocParamter || [], 'ntestparametercode', 'sparametersynonym',\r\n            //     'ascending', 'ntestparametercode', false);\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            subSampleSkip = this.props.Login.subSampleSkip === undefined ? subSampleSkip : this.props.Login.subSampleSkip\r\n            subSampleTake = this.props.Login.subSampleTake || subSampleTake\r\n            if (this.props.Login.resultDataState && this.props.Login.resultDataState !== previousProps.Login.resultDataState) {\r\n                resultDataState = this.props.Login.resultDataState;\r\n            }\r\n            if (this.props.Login.instrumentDataState && this.props.Login.instrumentDataState !== previousProps.Login.instrumentDataState) {\r\n                instrumentDataState = this.props.Login.instrumentDataState;\r\n            }\r\n            if (this.props.Login.taskDataState && this.props.Login.taskDataState !== previousProps.Login.taskDataState) {\r\n                taskDataState = this.props.Login.taskDataState;\r\n            }\r\n            if (this.props.Login.resultChangeDataState && this.props.Login.resultChangeDataState !== previousProps.Login.resultChangeDataState) {\r\n                resultChangeDataState = this.props.Login.resultChangeDataState;\r\n            }\r\n            if (this.props.Login.historyDataState && this.props.Login.historyDataState !== previousProps.Login.historyDataState) {\r\n                historyDataState = this.props.Login.historyDataState;\r\n            }\r\n            if (this.props.Login.testCommentDataState && this.props.Login.testCommentDataState !== previousProps.Login.testCommentDataState) {\r\n                testCommentDataState = this.props.Login.testCommentDataState;\r\n            }\r\n            if (this.props.Login.sampleChangeDataState && this.props.Login.sampleChangeDataState !== previousProps.Login.sampleChangeDataState) {\r\n                sampleChangeDataState = this.props.Login.sampleChangeDataState;\r\n            }\r\n\r\n\r\n\r\n            // if (this.props.Login.enlLink !== previousProps.Login.enlLink) {\r\n\r\n            //     bool = true;\r\n                \r\n            //     enlLink = this.props.Login.enlLink;\r\n            //     openELNSheet=true;\r\n                \r\n                \r\n            //     }\r\n\r\n\r\n            let selectFilterStatus = { ntransactionstatus: transactionStatus.PARTIAL, sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }), scolorhexcode: \"#800000\" }\r\n            const selectedFilters = this.props.Login.masterData.REFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n            selectedFilter = selectedFiltersNew;\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {masterData: this.props.Login.masterData,showTest,showSample }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            REFilterStatus = REFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            Batchvalues = Batchvalues.get(\"OptionList\")\r\n            Worklistvalues = Worklistvalues.get(\"OptionList\")\r\n            ConfigurationFilterValues = ConfigurationFilterValues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n           // AdhocParamter=AdhocParamter.get(\"OptionList\")\r\n        }\r\n\r\n        if (this.props.Login.activeTabIndex !== previousProps.Login.activeTabIndex) {\r\n            activeTabIndex = this.props.Login.activeTabIndex;\r\n            activeTabId = this.props.Login.activeTabId;\r\n            bool = true;\r\n        }\r\n\r\n        if (this.props.Login.masterData.DesignTemplateMapping !== previousProps.Login.masterData.DesignTemplateMapping) {\r\n\r\n            const DesignTemplateMappingMap = constructOptionList(this.props.Login.masterData.DesignTemplateMapping || [], \"ndesigntemplatemappingcode\",\r\n                \"sregtemplatename\", undefined, undefined, false);\r\n\r\n            stateDynamicDesign = DesignTemplateMappingMap.get(\"OptionList\")\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                showTest, showSample, userRoleControlRights, controlMap, resultDataState, instrumentDataState,\r\n                materialDataState, taskDataState, documentDataState, resultChangeDataState, testCommentDataState,\r\n                historyDataState, sampleListColumns, subSampleListColumns, testListColumns,\r\n                SingleItem, sampleListMainField, subSampleListMainField, testListMainField,\r\n                SampleGridItem, SampleGridExpandableItem, sampleMoreField, subSampleMoreField,\r\n                testMoreField, selectedRecord,\r\n                SampleType,\r\n                RegistrationType,\r\n                RegistrationSubType,\r\n                REFilterStatus,\r\n                REJobStatus,\r\n                Testvalues,\r\n                Batchvalues,\r\n                Worklistvalues,\r\n                ConfigurationFilterValues,\r\n                ApprovalConfigVersion,\r\n                validateFormulaMandyFields,\r\n                skip, take, testskip, testtake, \r\n                selectedFilter,\r\n                DynamicSampleColumns, DynamicSubSampleColumns, DynamicTestColumns,\r\n                DynamicGridItem, DynamicGridMoreField, stateDynamicDesign,\r\n                 activeTabIndex, activeTabId, sampleChangeDataState,testSearchField,AdhocParamter\r\n                 ,parameterResults,isParameterInitialRender,isaddSampleRender,selectedRecordTaskForm,isTaskInitialRender,\r\n                 selectedRecordMaterialForm,isMaterialInitialRender,\r\n                 selectedRecordInstrumentForm,isInstrumentInitialRender\r\n                  //,currentAlertResultCode,currentntestgrouptestpredefcode\r\n                  , subSampleSkip, subSampleTake,sampleSearchField,subsampleSearchField\r\n            })\r\n        }\r\n\r\n        if (this.props.Login.meanTestParameterList !== previousProps.Login.meanTestParameterList) {\r\n            this.setState({ meanTestParameterList: this.props.Login.meanTestParameterList });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n        //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n        // }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, {\r\n    crudMaster, updateStore, getsubSampleREDetail, getTestREDetail, getTestChildTabREDetail, resultGetModule,\r\n    completeTest, testMethodSourceEdit, addREInstrument, addREMaterial, deleteInstrumentRecord, fetchInstrumentRecord, deleteTaskRecord, fetchTaskRecord,\r\n    parameterRecord, checkListRecord, onSaveCheckList, defaultTest, getFormula, getRERegistrationType, getRERegistrationSubType, fetchMaterialRecord,\r\n    getREApprovalConfigVersion, getResultEntryDetails, calculateFormula, getREFilterStatus, getREFilterTestData, getREJobStatus, getSampleChildTabREDetail,\r\n    viewAttachment, getAttachmentCombo, deleteAttachment, resultImportFile, validateEsignCredentialComplete, getCommentsCombo, updateTestMethodSource,\r\n    filterTransactionList, validateEsignCredential, updateParameterComments, previewSampleReport, getMeanCalculationTestParameter, \r\n    getREMaterialCategoryByType, getREMaterialByCategory, getREMaterialInvertoryByMaterial, getAvailableMaterialQuantity, testStart,\r\n     getSubSampleChildTabDetail, getSampleChildTabDetail, getREFilterTemplate, getAverageResult,getREMaterialComboGet//,deleteResultUsedMaterial\r\n      ,getPredefinedData\r\n     ,getELNTestValidation\r\n     ,getConfigurationFilter,getTestBasedBatchWorklist,addREAdhocParamter,createAdhocParamter,enforceResult,ResultEntryViewPatientDetails,resultEntryGetParameter,resultEntryGetSpec,resultEntryGetComponent\r\n\r\n})(injectIntl(ResultEntry));"]},"metadata":{},"sourceType":"module"}