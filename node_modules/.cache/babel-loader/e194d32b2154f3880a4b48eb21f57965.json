{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from\"../rsapi\";import{toast}from\"react-toastify\";import{DEFAULT_RETURN}from\"./LoginTypes\";import Axios from\"axios\";import{initRequest,updateStore}from\"./LoginAction\";import{transactionStatus}from\"../components/Enumeration\";import{constructOptionList,showEsign}from\"../components/CommonScript\";import{crudMaster}from'./ServiceAction';import{intl}from\"../components/App\";export function getCommentsCombo(inputParam){return function(dispatch){if(inputParam.masterList&&inputParam.masterList.length>0){dispatch(initRequest(true));var urlArray=[rsapi.post(\"/sampletestcomments/getSampleTestComments\",{userinfo:inputParam.userInfo})];urlArray.push(rsapi.post(\"/comments/getCommentSubType\",{userinfo:inputParam.userInfo}));// if(inputParam.isSampleTestComment&&inputParam.isSampleTestComment===true) \n// {\n//  urlArray.push(\n//      rsapi.post(\"/comments/getSampleTestCommentsListById\", {\n//          ncommentsubtypecode:inputParam.ncommentsubtypecode,\n//          userinfo: inputParam.userInfo\n//      }))\n// }     \nif(inputParam.operation===\"update\"){urlArray.push(rsapi.post(\"/comments/getEdit\".concat(inputParam.methodUrl),{userinfo:inputParam.userInfo,selectedrecord:inputParam.editRow}));}Axios.all(urlArray).then(function(response){var _payload;var predefcomments;var sampleTestComments=response[0].data;var CommentSubType=response[1].data['CommentSubType'];var isAbbrevationneeded;var selectedRecord={};var defaultLink=sampleTestComments.filter(function(item){return item.ndefaultstatus===transactionStatus.YES;});var sampleTestCommentsMap=constructOptionList(sampleTestComments||[],\"nsampletestcommentcode\",\"ssampletestcommentname\",undefined,undefined,true);var CommentSubTypesMap=constructOptionList(CommentSubType||[],\"ncommentsubtypecode\",\"scommentsubtype\",undefined,undefined,false);sampleTestComments=sampleTestCommentsMap.get(\"OptionList\");CommentSubType=CommentSubTypesMap.get(\"OptionList\");if(inputParam.isSampleTestComment&&inputParam.isSampleTestComment===true){predefcomments=response[1].data['SampleTestComments'];var predefcommentssMap=constructOptionList(predefcomments||[],\"nsampletestcommentscode\",\"spredefinedname\",undefined,undefined,false);predefcomments=predefcommentssMap.get(\"OptionList\");if(CommentSubType[0].value===3){isAbbrevationneeded=true;}selectedRecord=_objectSpread(_objectSpread({},inputParam.selectedRecord),{},{ncommentsubtypecode:CommentSubType[0],nsampletestcommentscode:predefcomments[0]&&predefcomments[0],spredefinedname:predefcomments[0]&&predefcomments[0].label,scomments:predefcomments[0]&&predefcomments[0].item.sdescription});}var editObject={};if(inputParam.operation===\"update\"){editObject=response[2].data;var nsamplecommentscode={};nsamplecommentscode={\"label\":editObject.ssampletestcommentname,\"value\":editObject.nsamplecommentscode};selectedRecord=_objectSpread(_objectSpread({},editObject),{},{nsamplecommentscode:nsamplecommentscode,scomments:editObject.jsondata.scomments,scommentsubtype:editObject.jsondata.scommentsubtype&&editObject.jsondata.scommentsubtype,spredefinedname:editObject.jsondata.spredefinedname&&editObject.jsondata.spredefinedname,// scomments: editObject.jsondata.sdescription&&editObject.jsondata.sdescription, \nncommentsubtypecode:editObject.jsondata.ncommentsubtypecode&&editObject.jsondata.ncommentsubtypecode,nsampletestcommentscode:editObject.jsondata.nsampletestcommentscode&&editObject.jsondata.nsampletestcommentscode});}else{selectedRecord=_objectSpread(_objectSpread({},selectedRecord),{},{nsamplecommentscode:defaultLink.length>0?{\"label\":defaultLink[0].ssampletestcommentname,\"value\":defaultLink[0].nsampletestcommentcode}:\"\"});}dispatch({type:DEFAULT_RETURN,payload:(_payload={},_defineProperty(_payload,inputParam.modalName,true),_defineProperty(_payload,\"operation\",inputParam.operation),_defineProperty(_payload,\"screenName\",inputParam.screenName),_defineProperty(_payload,\"ncontrolCode\",inputParam.ncontrolCode),_defineProperty(_payload,\"selectedRecord\",selectedRecord),_defineProperty(_payload,\"loading\",false),_defineProperty(_payload,\"sampleTestComments\",sampleTestComments),_defineProperty(_payload,\"predefcomments\",predefcomments),_defineProperty(_payload,\"CommentSubType\",CommentSubType),_defineProperty(_payload,\"isAbbrevationneeded\",isAbbrevationneeded),_defineProperty(_payload,\"modalType\",'comment'),_defineProperty(_payload,\"modalName\",[inputParam.modalName]),_defineProperty(_payload,\"editObject\",editObject),_payload)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{toast.warn(intl.formatMessage({id:inputParam.masterAlertStatus}));}};}export function deleteComment(deleteParam){return function(dispatch){var _inputData;var methodUrl=deleteParam.methodUrl;var selected=deleteParam.selectedRecord;var Map={};Map[\"sprimarykey\"]=deleteParam.screenName===\"IDS_SAMPLECOMMENTS\"?\"nregcommentcode\":deleteParam.screenName===\"IDS_SUBSAMPLECOMMENTS\"?\"nsamplecommentcode\":\"ntestcommentcode\";Map[\"nprimarykey\"]=deleteParam.screenName===\"IDS_SAMPLECOMMENTS\"?selected.nregcommentcode:deleteParam.screenName===\"IDS_SUBSAMPLECOMMENTS\"?selected.nsamplecommentcode:selected.ntestcommentcode;var inputParam={inputData:(_inputData={},_defineProperty(_inputData,methodUrl.toLowerCase(),_defineProperty({},Map.sprimarykey,Map.nprimarykey)),_defineProperty(_inputData,\"npreregno\",deleteParam.npreregno),_defineProperty(_inputData,\"ntransactiontestcode\",deleteParam.ntransactiontestcode),_defineProperty(_inputData,\"ntransactionsamplecode\",deleteParam.ntransactionsamplecode),_defineProperty(_inputData,\"userinfo\",deleteParam.userInfo),_inputData),classUrl:\"comments\",operation:'delete',methodUrl:methodUrl,screenName:deleteParam.screenName};var masterData=deleteParam.masterData;if(showEsign(deleteParam.esignRights,deleteParam.userInfo.nformcode,deleteParam.ncontrolCode)){// dispatch({\n//     type: DEFAULT_RETURN,\n//     payload: {\n//         loadEsign: true,\n//         screenData: { inputParam, masterData },\n//         openCommentModal: true,\n//         screenName: deleteParam.screenName,\n//         operation: 'delete',\n//         selectedRecord: {}\n//     }\n// });\nvar updateInfo={typeName:DEFAULT_RETURN,data:{loadEsign:true,screenData:{inputParam:inputParam,masterData:masterData},openCommentModal:true,screenName:deleteParam.screenName,operation:'delete',selectedRecord:{}}};dispatch(updateStore(updateInfo));}else{dispatch(crudMaster(inputParam,masterData,\"openCommentModal\",{}));}};}export function getSampleTestComments(selectedRecord,userInfo){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/comments/getSampleTestCommentsListById\",{userinfo:userInfo,ncommentsubtypecode:selectedRecord['ncommentsubtypecode'].value}).then(function(response){var predefcomments;var isAbbrevationneeded;predefcomments=response.data['SampleTestComments'];if(selectedRecord['ncommentsubtypecode'].value===3){var predefcommentssMap=constructOptionList(predefcomments||[],\"nsampletestcommentscode\",\"spredefinedname\",undefined,undefined,false);isAbbrevationneeded=true;predefcomments=predefcommentssMap.get(\"OptionList\");selectedRecord=_objectSpread(_objectSpread({},selectedRecord),{},{nsampletestcommentscode:predefcomments[0]&&predefcomments[0],scomments:predefcomments[0]&&predefcomments[0].label});}else{selectedRecord['nsampletestcommentscode']&&delete selectedRecord['nsampletestcommentscode'];selectedRecord=_objectSpread(_objectSpread({},selectedRecord),{},{scomments:predefcomments[0]&&predefcomments[0].sdescription});}dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,predefcomments:predefcomments,isAbbrevationneeded:isAbbrevationneeded,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/CommentsAction.js"],"names":["rsapi","toast","DEFAULT_RETURN","Axios","initRequest","updateStore","transactionStatus","constructOptionList","showEsign","crudMaster","intl","getCommentsCombo","inputParam","dispatch","masterList","length","urlArray","post","userinfo","userInfo","push","operation","concat","methodUrl","selectedrecord","editRow","all","then","response","predefcomments","sampleTestComments","data","CommentSubType","isAbbrevationneeded","selectedRecord","defaultLink","filter","item","ndefaultstatus","YES","sampleTestCommentsMap","undefined","CommentSubTypesMap","get","isSampleTestComment","predefcommentssMap","value","ncommentsubtypecode","nsampletestcommentscode","spredefinedname","label","scomments","sdescription","editObject","nsamplecommentscode","ssampletestcommentname","jsondata","scommentsubtype","nsampletestcommentcode","type","payload","modalName","screenName","ncontrolCode","catch","error","loading","status","message","warn","formatMessage","id","masterAlertStatus","deleteComment","deleteParam","selected","Map","nregcommentcode","nsamplecommentcode","ntestcommentcode","inputData","toLowerCase","sprimarykey","nprimarykey","npreregno","ntransactiontestcode","ntransactionsamplecode","classUrl","masterData","esignRights","nformcode","updateInfo","typeName","loadEsign","screenData","openCommentModal","getSampleTestComments"],"mappings":"qUAAA,MAAOA,CAAAA,KAAP,KAAkB,UAAlB,CACA,OAASC,KAAT,KAAsB,gBAAtB,CACA,OAASC,cAAT,KAA+B,cAA/B,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,eAAzC,CACA,OAASC,iBAAT,KAAkC,2BAAlC,CACA,OAASC,mBAAT,CAA8BC,SAA9B,KAA+C,4BAA/C,CACA,OAASC,UAAT,KAA2B,iBAA3B,CACA,OAASC,IAAT,KAAqB,mBAArB,CAEA,MAAO,SAASC,CAAAA,gBAAT,CAA0BC,UAA1B,CAAsC,CACzC,MAAO,UAACC,QAAD,CAAc,CACjB,GAAID,UAAU,CAACE,UAAX,EAAyBF,UAAU,CAACE,UAAX,CAAsBC,MAAtB,CAA+B,CAA5D,CAA+D,CAC3DF,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR,CACA,GAAIY,CAAAA,QAAQ,CAAG,CAAChB,KAAK,CAACiB,IAAN,CAAW,2CAAX,CAAwD,CAAEC,QAAQ,CAAEN,UAAU,CAACO,QAAvB,CAAxD,CAAD,CAAf,CACAH,QAAQ,CAACI,IAAT,CACIpB,KAAK,CAACiB,IAAN,CAAW,6BAAX,CAA0C,CACtCC,QAAQ,CAAEN,UAAU,CAACO,QADiB,CAA1C,CADJ,EAII;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ,GAAIP,UAAU,CAACS,SAAX,GAAyB,QAA7B,CAAuC,CACnCL,QAAQ,CAACI,IAAT,CAAcpB,KAAK,CAACiB,IAAN,CAAW,oBAAoBK,MAApB,CAA2BV,UAAU,CAACW,SAAtC,CAAX,CAA6D,CAAEL,QAAQ,CAAEN,UAAU,CAACO,QAAvB,CAAiCK,cAAc,CAAEZ,UAAU,CAACa,OAA5D,CAA7D,CAAd,EACH,CACDtB,KAAK,CAACuB,GAAN,CAAUV,QAAV,EACKW,IADL,CACU,SAAAC,QAAQ,CAAI,cACd,GAAIC,CAAAA,cAAJ,CACA,GAAIC,CAAAA,kBAAkB,CAAGF,QAAQ,CAAC,CAAD,CAAR,CAAYG,IAArC,CACA,GAAIC,CAAAA,cAAc,CAAGJ,QAAQ,CAAC,CAAD,CAAR,CAAYG,IAAZ,CAAiB,gBAAjB,CAArB,CACA,GAAIE,CAAAA,mBAAJ,CAEA,GAAIC,CAAAA,cAAc,CAAG,EAArB,CACA,GAAMC,CAAAA,WAAW,CAAGL,kBAAkB,CAACM,MAAnB,CAA0B,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,cAAL,GAAwBhC,iBAAiB,CAACiC,GAA9C,EAA9B,CAApB,CACA,GAAMC,CAAAA,qBAAqB,CAAIjC,mBAAmB,CAACuB,kBAAkB,EAAI,EAAvB,CAA2B,wBAA3B,CAAoD,wBAApD,CAA+EW,SAA/E,CAA0FA,SAA1F,CAAqG,IAArG,CAAlD,CACA,GAAMC,CAAAA,kBAAkB,CAAInC,mBAAmB,CAACyB,cAAc,EAAI,EAAnB,CAAuB,qBAAvB,CAA6C,iBAA7C,CAAiES,SAAjE,CAA4EA,SAA5E,CAAuF,KAAvF,CAA/C,CACAX,kBAAkB,CAAGU,qBAAqB,CAACG,GAAtB,CAA0B,YAA1B,CAArB,CACAX,cAAc,CAAGU,kBAAkB,CAACC,GAAnB,CAAuB,YAAvB,CAAjB,CACA,GAAG/B,UAAU,CAACgC,mBAAX,EAAgChC,UAAU,CAACgC,mBAAX,GAAiC,IAApE,CACA,CACKf,cAAc,CAAGD,QAAQ,CAAC,CAAD,CAAR,CAAYG,IAAZ,CAAiB,oBAAjB,CAAjB,CAED,GAAMc,CAAAA,kBAAkB,CAAItC,mBAAmB,CAACsB,cAAc,EAAI,EAAnB,CAAuB,yBAAvB,CAAiD,iBAAjD,CAAqEY,SAArE,CAAgFA,SAAhF,CAA2F,KAA3F,CAA/C,CAEAZ,cAAc,CAAGgB,kBAAkB,CAACF,GAAnB,CAAuB,YAAvB,CAAjB,CACA,GAAGX,cAAc,CAAC,CAAD,CAAd,CAAkBc,KAAlB,GAA0B,CAA7B,CACA,CACIb,mBAAmB,CAAC,IAApB,CACH,CAEDC,cAAc,gCAAKtB,UAAU,CAACsB,cAAhB,MAA+Ba,mBAAmB,CAACf,cAAc,CAAC,CAAD,CAAjE,CACVgB,uBAAuB,CAACnB,cAAc,CAAC,CAAD,CAAd,EAAmBA,cAAc,CAAC,CAAD,CAD/C,CACmDoB,eAAe,CAACpB,cAAc,CAAC,CAAD,CAAd,EAAmBA,cAAc,CAAC,CAAD,CAAd,CAAkBqB,KADxG,CAETC,SAAS,CAACtB,cAAc,CAAC,CAAD,CAAd,EAAmBA,cAAc,CAAC,CAAD,CAAd,CAAkBQ,IAAlB,CAAuBe,YAF3C,EAAd,CAGH,CAGD,GAAIC,CAAAA,UAAU,CAAG,EAAjB,CACA,GAAIzC,UAAU,CAACS,SAAX,GAAyB,QAA7B,CAAuC,CACnCgC,UAAU,CAAIzB,QAAQ,CAAC,CAAD,CAAR,CAAYG,IAA1B,CACA,GAAIuB,CAAAA,mBAAmB,CAAG,EAA1B,CACAA,mBAAmB,CAAG,CAAE,QAASD,UAAU,CAACE,sBAAtB,CAA8C,QAASF,UAAU,CAACC,mBAAlE,CAAtB,CACApB,cAAc,gCACPmB,UADO,MACKC,mBAAmB,CAAnBA,mBADL,CACyBH,SAAS,CAAEE,UAAU,CAACG,QAAX,CAAoBL,SADxD,CAEVM,eAAe,CAACJ,UAAU,CAACG,QAAX,CAAoBC,eAApB,EAAqCJ,UAAU,CAACG,QAAX,CAAoBC,eAF/D,CAGVR,eAAe,CAACI,UAAU,CAACG,QAAX,CAAoBP,eAApB,EAAqCI,UAAU,CAACG,QAAX,CAAoBP,eAH/D,CAIX;AACEF,mBAAmB,CAACM,UAAU,CAACG,QAAX,CAAoBT,mBAApB,EAAyCM,UAAU,CAACG,QAAX,CAAoBT,mBALxE,CAMTC,uBAAuB,CAACK,UAAU,CAACG,QAAX,CAAoBR,uBAApB,EAA6CK,UAAU,CAACG,QAAX,CAAoBR,uBANhF,EAAd,CAQH,CAZD,IAYO,CACHd,cAAc,gCAAOA,cAAP,MACVoB,mBAAmB,CAAEnB,WAAW,CAACpB,MAAZ,CAAqB,CAArB,CAAyB,CAAE,QAASoB,WAAW,CAAC,CAAD,CAAX,CAAeoB,sBAA1B,CAAkD,QAASpB,WAAW,CAAC,CAAD,CAAX,CAAeuB,sBAA1E,CAAzB,CAA8H,EADzI,EAAd,CAIH,CACD7C,QAAQ,CAAC,CACL8C,IAAI,CAAEzD,cADD,CAEL0D,OAAO,uCACFhD,UAAU,CAACiD,SADT,CACqB,IADrB,uCAEQjD,UAAU,CAACS,SAFnB,wCAGST,UAAU,CAACkD,UAHpB,0CAIWlD,UAAU,CAACmD,YAJtB,4CAKH7B,cALG,qCAKsB,KALtB,gDAMHJ,kBANG,4CAOHD,cAPG,4CAQHG,cARG,iDASHC,mBATG,uCAUQ,SAVR,uCAWQ,CAACrB,UAAU,CAACiD,SAAZ,CAXR,wCAYHR,UAZG,WAFF,CAAD,CAAR,CAkBH,CApEL,EAqEKW,KArEL,CAqEW,SAAAC,KAAK,CAAI,CACZpD,QAAQ,CAAC,CAAE8C,IAAI,CAAEzD,cAAR,CAAwB0D,OAAO,CAAE,CAAEM,OAAO,CAAE,KAAX,CAAjC,CAAD,CAAR,CACA,GAAID,KAAK,CAACrC,QAAN,CAAeuC,MAAf,GAA0B,GAA9B,CAAmC,CAC/BlE,KAAK,CAACgE,KAAN,CAAYA,KAAK,CAACG,OAAlB,EACH,CAFD,IAEO,CACHnE,KAAK,CAACoE,IAAN,CAAWJ,KAAK,CAACrC,QAAN,CAAeG,IAA1B,EACH,CACJ,CA5EL,EA6EH,CA/FD,IA+FO,CACH9B,KAAK,CAACoE,IAAN,CAAW3D,IAAI,CAAC4D,aAAL,CAAmB,CAAEC,EAAE,CAAE3D,UAAU,CAAC4D,iBAAjB,CAAnB,CAAX,EACH,CAEJ,CApGD,CAqGH,CAED,MAAO,SAASC,CAAAA,aAAT,CAAuBC,WAAvB,CAAoC,CACvC,MAAO,UAAC7D,QAAD,CAAc,gBACjB,GAAMU,CAAAA,SAAS,CAAGmD,WAAW,CAACnD,SAA9B,CACA,GAAMoD,CAAAA,QAAQ,CAAGD,WAAW,CAACxC,cAA7B,CACR,GAAM0C,CAAAA,GAAG,CAAC,EAAV,CACAA,GAAG,CAAC,aAAD,CAAH,CAAmBF,WAAW,CAACZ,UAAZ,GAAyB,oBAAzB,CACnB,iBADmB,CACDY,WAAW,CAACZ,UAAZ,GAAyB,uBAAzB,CAAiD,oBAAjD,CAAsE,kBADxF,CAEAc,GAAG,CAAC,aAAD,CAAH,CAAmBF,WAAW,CAACZ,UAAZ,GAAyB,oBAAzB,CAA8Ca,QAAQ,CAACE,eAAvD,CAAuEH,WAAW,CAACZ,UAAZ,GAAyB,uBAAzB,CAC1Fa,QAAQ,CAACG,kBADiF,CAC9DH,QAAQ,CAACI,gBADrC,CAIQ,GAAMnE,CAAAA,UAAU,CAAG,CACfoE,SAAS,2CACJzD,SAAS,CAAC0D,WAAV,EADI,oBACwBL,GAAG,CAACM,WAD5B,CACyCN,GAAG,CAACO,WAD7C,0CAEMT,WAAW,CAACU,SAFlB,oDAGiBV,WAAW,CAACW,oBAH7B,sDAImBX,WAAW,CAACY,sBAJ/B,wCAKKZ,WAAW,CAACvD,QALjB,aADM,CAQfoE,QAAQ,CAAE,UARK,CASflE,SAAS,CAAE,QATI,CAUfE,SAAS,CAAEA,SAVI,CAWfuC,UAAU,CAAEY,WAAW,CAACZ,UAXT,CAAnB,CAaA,GAAM0B,CAAAA,UAAU,CAAGd,WAAW,CAACc,UAA/B,CACA,GAAIhF,SAAS,CAACkE,WAAW,CAACe,WAAb,CAA0Bf,WAAW,CAACvD,QAAZ,CAAqBuE,SAA/C,CAA0DhB,WAAW,CAACX,YAAtE,CAAb,CAAkG,CAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAM4B,CAAAA,UAAU,CAAG,CACfC,QAAQ,CAAE1F,cADK,CAEf6B,IAAI,CAAE,CACF8D,SAAS,CAAE,IADT,CAEFC,UAAU,CAAE,CAAElF,UAAU,CAAVA,UAAF,CAAc4E,UAAU,CAAVA,UAAd,CAFV,CAGFO,gBAAgB,CAAE,IAHhB,CAIFjC,UAAU,CAAEY,WAAW,CAACZ,UAJtB,CAKFzC,SAAS,CAAE,QALT,CAMFa,cAAc,CAAE,EANd,CAFS,CAAnB,CAUArB,QAAQ,CAACR,WAAW,CAACsF,UAAD,CAAZ,CAAR,CACH,CAvBD,IAuBO,CACH9E,QAAQ,CAACJ,UAAU,CAACG,UAAD,CAAa4E,UAAb,CAAyB,kBAAzB,CAA6C,EAA7C,CAAX,CAAR,CACH,CACJ,CAlDD,CAmDH,CACD,MAAO,SAASQ,CAAAA,qBAAT,CAA+B9D,cAA/B,CAA+Cf,QAA/C,CAAyD,CAC5D,MAAO,UAAUN,QAAV,CAAoB,CACvBA,QAAQ,CAACT,WAAW,CAAC,IAAD,CAAZ,CAAR,CACAJ,KAAK,CAACiB,IAAN,CAAW,yCAAX,CACI,CACIC,QAAQ,CAACC,QADb,CAEI4B,mBAAmB,CAACb,cAAc,CAAC,qBAAD,CAAd,CAAsCY,KAF9D,CADJ,EAKKnB,IALL,CAKU,SAAAC,QAAQ,CAAI,CACd,GAAIC,CAAAA,cAAJ,CACA,GAAII,CAAAA,mBAAJ,CACAJ,cAAc,CAAGD,QAAQ,CAACG,IAAT,CAAc,oBAAd,CAAjB,CAEA,GAAGG,cAAc,CAAC,qBAAD,CAAd,CAAsCY,KAAtC,GAA8C,CAAjD,CACA,CACI,GAAMD,CAAAA,kBAAkB,CAAItC,mBAAmB,CAACsB,cAAc,EAAI,EAAnB,CAAuB,yBAAvB,CAAiD,iBAAjD,CAAqEY,SAArE,CAAgFA,SAAhF,CAA2F,KAA3F,CAA/C,CACAR,mBAAmB,CAAC,IAApB,CACAJ,cAAc,CAAGgB,kBAAkB,CAACF,GAAnB,CAAuB,YAAvB,CAAjB,CACAT,cAAc,gCAAMA,cAAN,MACVc,uBAAuB,CAACnB,cAAc,CAAC,CAAD,CAAd,EAAmBA,cAAc,CAAC,CAAD,CAD/C,CACmDsB,SAAS,CAACtB,cAAc,CAAC,CAAD,CAAd,EAAmBA,cAAc,CAAC,CAAD,CAAd,CAAkBqB,KADlG,EAAd,CAEH,CAPD,IAOK,CACDhB,cAAc,CAAC,yBAAD,CAAd,EAA2C,MAAOA,CAAAA,cAAc,CAAC,yBAAD,CAAhE,CACAA,cAAc,gCAAMA,cAAN,MAAqBiB,SAAS,CAACtB,cAAc,CAAC,CAAD,CAAd,EAAmBA,cAAc,CAAC,CAAD,CAAd,CAAkBuB,YAApE,EAAd,CACH,CAEDvC,QAAQ,CAAC,CACL8C,IAAI,CAAEzD,cADD,CAEL0D,OAAO,CAAE,CACL1B,cAAc,CAAdA,cADK,CAELL,cAAc,CAAdA,cAFK,CAGLI,mBAAmB,CAAnBA,mBAHK,CAILiC,OAAO,CAAE,KAJJ,CAFJ,CAAD,CAAR,CAUH,CAhCL,EAiCKF,KAjCL,CAiCW,SAAAC,KAAK,CAAI,CACZpD,QAAQ,CAAC,CACL8C,IAAI,CAAEzD,cADD,CAEL0D,OAAO,CAAE,CACLM,OAAO,CAAE,KADJ,CAFJ,CAAD,CAAR,CAMA,GAAID,KAAK,CAACrC,QAAN,CAAeuC,MAAf,GAA0B,GAA9B,CAAmC,CAC/BlE,KAAK,CAACgE,KAAN,CAAYA,KAAK,CAACG,OAAlB,EACH,CAFD,IAEO,CACHnE,KAAK,CAACoE,IAAN,CAAWJ,KAAK,CAACrC,QAAN,CAAeG,IAA1B,EACH,CACJ,CA7CL,EA8CH,CAhDD,CAiDH","sourcesContent":["import rsapi from \"../rsapi\";\r\nimport { toast } from \"react-toastify\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport Axios from \"axios\";\r\nimport { initRequest, updateStore } from \"./LoginAction\";\r\nimport { transactionStatus } from \"../components/Enumeration\";\r\nimport { constructOptionList, showEsign } from \"../components/CommonScript\";\r\nimport { crudMaster } from './ServiceAction'\r\nimport { intl } from \"../components/App\";\r\n\r\nexport function getCommentsCombo(inputParam) {\r\n    return (dispatch) => {\r\n        if (inputParam.masterList && inputParam.masterList.length > 0) {\r\n            dispatch(initRequest(true));\r\n            let urlArray = [rsapi.post(\"/sampletestcomments/getSampleTestComments\", { userinfo: inputParam.userInfo })];\r\n            urlArray.push(\r\n                rsapi.post(\"/comments/getCommentSubType\", {\r\n                    userinfo: inputParam.userInfo\r\n                })) \r\n                // if(inputParam.isSampleTestComment&&inputParam.isSampleTestComment===true) \r\n                // {\r\n                //  urlArray.push(\r\n                //      rsapi.post(\"/comments/getSampleTestCommentsListById\", {\r\n                //          ncommentsubtypecode:inputParam.ncommentsubtypecode,\r\n                //          userinfo: inputParam.userInfo\r\n                //      }))\r\n                // }     \r\n            if (inputParam.operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"/comments/getEdit\".concat(inputParam.methodUrl), { userinfo: inputParam.userInfo, selectedrecord: inputParam.editRow }))\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let predefcomments;\r\n                    let sampleTestComments = response[0].data;\r\n                    let CommentSubType = response[1].data['CommentSubType']; \r\n                    let isAbbrevationneeded;\r\n\r\n                    let selectedRecord = {};\r\n                    const defaultLink = sampleTestComments.filter(item => item.ndefaultstatus === transactionStatus.YES);\r\n                    const sampleTestCommentsMap  = constructOptionList(sampleTestComments || [], \"nsampletestcommentcode\",\"ssampletestcommentname\" , undefined, undefined, true);\r\n                    const CommentSubTypesMap  = constructOptionList(CommentSubType || [], \"ncommentsubtypecode\",\"scommentsubtype\" , undefined, undefined, false);\r\n                    sampleTestComments = sampleTestCommentsMap.get(\"OptionList\");\r\n                    CommentSubType = CommentSubTypesMap.get(\"OptionList\");\r\n                    if(inputParam.isSampleTestComment&&inputParam.isSampleTestComment===true)\r\n                    {\r\n                         predefcomments = response[1].data['SampleTestComments']; \r\n\r\n                        const predefcommentssMap  = constructOptionList(predefcomments || [], \"nsampletestcommentscode\",\"spredefinedname\" , undefined, undefined, false);\r\n                    \r\n                        predefcomments = predefcommentssMap.get(\"OptionList\"); \r\n                        if(CommentSubType[0].value===3)\r\n                        {\r\n                            isAbbrevationneeded=true\r\n                        }\r\n\r\n                        selectedRecord={...inputParam.selectedRecord,ncommentsubtypecode:CommentSubType[0],\r\n                            nsampletestcommentscode:predefcomments[0]&&predefcomments[0],spredefinedname:predefcomments[0]&&predefcomments[0].label\r\n                            ,scomments:predefcomments[0]&&predefcomments[0].item.sdescription} \r\n                    } \r\n               \r\n\r\n                    let editObject = {};\r\n                    if (inputParam.operation === \"update\") {\r\n                        editObject =  response[2].data;\r\n                        let nsamplecommentscode = {};\r\n                        nsamplecommentscode = { \"label\": editObject.ssampletestcommentname, \"value\": editObject.nsamplecommentscode }\r\n                        selectedRecord = {\r\n                            ...editObject, nsamplecommentscode,scomments :editObject.jsondata.scomments,  \r\n                            scommentsubtype:editObject.jsondata.scommentsubtype&&editObject.jsondata.scommentsubtype ,\r\n                            spredefinedname:editObject.jsondata.spredefinedname&&editObject.jsondata.spredefinedname ,\r\n                           // scomments: editObject.jsondata.sdescription&&editObject.jsondata.sdescription, \r\n                             ncommentsubtypecode:editObject.jsondata.ncommentsubtypecode&&editObject.jsondata.ncommentsubtypecode,\r\n                             nsampletestcommentscode:editObject.jsondata.nsampletestcommentscode&&editObject.jsondata.nsampletestcommentscode\r\n                        };\r\n                    } else {\r\n                        selectedRecord = {...selectedRecord,\r\n                            nsamplecommentscode: defaultLink.length > 0 ? { \"label\": defaultLink[0].ssampletestcommentname, \"value\": defaultLink[0].nsampletestcommentcode } : \"\",\r\n\r\n                        };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            [inputParam.modalName]: true,\r\n                            operation: inputParam.operation,\r\n                            screenName: inputParam.screenName,\r\n                            ncontrolCode: inputParam.ncontrolCode,\r\n                            selectedRecord, loading: false,\r\n                            sampleTestComments,\r\n                            predefcomments,\r\n                            CommentSubType,\r\n                            isAbbrevationneeded,\r\n                            modalType: 'comment',\r\n                            modalName: [inputParam.modalName],\r\n                            editObject//,\r\n                          //  isSampleTestComment:inputParam.isSampleTestComment\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: inputParam.masterAlertStatus }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function deleteComment(deleteParam) {\r\n    return (dispatch) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\nconst Map={}\r\nMap[\"sprimarykey\"]=deleteParam.screenName===\"IDS_SAMPLECOMMENTS\"?\r\n\"nregcommentcode\":deleteParam.screenName===\"IDS_SUBSAMPLECOMMENTS\"?\"nsamplecommentcode\":\"ntestcommentcode\";\r\nMap[\"nprimarykey\"]=deleteParam.screenName===\"IDS_SAMPLECOMMENTS\"?selected.nregcommentcode:deleteParam.screenName===\"IDS_SUBSAMPLECOMMENTS\"?\r\nselected.nsamplecommentcode:selected.ntestcommentcode;\r\n\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: {[Map.sprimarykey]:Map.nprimarykey},\r\n                npreregno: deleteParam.npreregno,\r\n                ntransactiontestcode: deleteParam.ntransactiontestcode,\r\n                ntransactionsamplecode: deleteParam.ntransactionsamplecode,\r\n                userinfo: deleteParam.userInfo\r\n            },\r\n            classUrl: \"comments\",\r\n            operation: 'delete',\r\n            methodUrl: methodUrl,\r\n            screenName: deleteParam.screenName\r\n        }\r\n        const masterData = deleteParam.masterData;\r\n        if (showEsign(deleteParam.esignRights, deleteParam.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            // dispatch({\r\n            //     type: DEFAULT_RETURN,\r\n            //     payload: {\r\n            //         loadEsign: true,\r\n            //         screenData: { inputParam, masterData },\r\n            //         openCommentModal: true,\r\n            //         screenName: deleteParam.screenName,\r\n            //         operation: 'delete',\r\n            //         selectedRecord: {}\r\n            //     }\r\n            // });\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {   \r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    openCommentModal: true,\r\n                    screenName: deleteParam.screenName,\r\n                    operation: 'delete',\r\n                    selectedRecord: {}}\r\n            }\r\n            dispatch(updateStore(updateInfo));\r\n        } else {\r\n            dispatch(crudMaster(inputParam, masterData, \"openCommentModal\", {}));\r\n        }\r\n    }\r\n}\r\nexport function getSampleTestComments(selectedRecord, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/comments/getSampleTestCommentsListById\",\r\n            {\r\n                userinfo:userInfo,\r\n                ncommentsubtypecode:selectedRecord['ncommentsubtypecode'].value\r\n            })\r\n            .then(response => { \r\n                let predefcomments;\r\n                let isAbbrevationneeded;\r\n                predefcomments = response.data['SampleTestComments']; \r\n\r\n                if(selectedRecord['ncommentsubtypecode'].value===3)\r\n                { \r\n                    const predefcommentssMap  = constructOptionList(predefcomments || [], \"nsampletestcommentscode\",\"spredefinedname\" , undefined, undefined, false);\r\n                    isAbbrevationneeded=true\r\n                    predefcomments = predefcommentssMap.get(\"OptionList\"); \r\n                    selectedRecord={ ...selectedRecord,\r\n                        nsampletestcommentscode:predefcomments[0]&&predefcomments[0],scomments:predefcomments[0]&&predefcomments[0].label}\r\n                }else{\r\n                    selectedRecord['nsampletestcommentscode']&&delete selectedRecord['nsampletestcommentscode']\r\n                    selectedRecord={ ...selectedRecord,scomments:predefcomments[0]&&predefcomments[0].sdescription}\r\n                } \r\n              \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { \r\n                        selectedRecord,\r\n                        predefcomments,\r\n                        isAbbrevationneeded,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}