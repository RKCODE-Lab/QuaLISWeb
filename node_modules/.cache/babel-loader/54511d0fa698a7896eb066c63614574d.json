{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { constructOptionList } from '../components/CommonScript';\nexport function showRegTypeAddScreen(userInfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post('registrationtype/getSampleType', {\n      \"userinfo\": userInfo\n    }).then(response => {\n      const optionsSampleTypeMap = constructOptionList(response.data.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, true);\n      const optionsSampleType = optionsSampleTypeMap.get(\"OptionList\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          optionsSampleType,\n          openModal: true,\n          operation: \"create\",\n          selectedRecord: {},\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function fetchRegTypeById(editParam) {\n  return function (dispatch) {\n    const URL1 = rsapi.post('registrationtype/getSampleType', {\n      \"userinfo\": editParam.userInfo\n    });\n    const URL2 = rsapi.post(\"registrationtype/getRegistrationTypeById\", {\n      [editParam.primaryKeyField]: editParam.primaryKeyValue,\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL1, URL2]).then(response => {\n      let selectedRecord = {};\n      let selectedId = editParam.primaryKeyValue;\n      const optionsSampleTypeMap = constructOptionList(response[0].data.SampleTypes || [], \"nsampletypecode\", \"ssampletypename\", undefined, undefined, true);\n      const optionsSampleType = optionsSampleTypeMap.get(\"OptionList\");\n      selectedRecord = response[1].data;\n      selectedRecord['SampleTypes'] = {\n        value: response[1].data.nsampletypecode,\n        label: response[1].data.ssampletypename\n      };\n      let mandatoryFields = [{\n        \"idsName\": \"IDS_SAMPLETYPENAME\",\n        \"dataField\": \"SampleTypes\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\",\n        \"ismultilingual\": \"false\"\n      }, {\n        \"idsName\": \"IDS_REGISTRATIONTYPENAME\",\n        \"dataField\": \"sregtypename\",\n        \"mandatoryLabel\": \"IDS_ENTER\",\n        \"controlType\": \"textbox\",\n        \"ismultilingual\": \"true\"\n      } //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" },\n      ];\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord: { ...response[1].data,\n            ...response[1].data.jsondata\n          },\n          operation: editParam.operation,\n          optionsSampleType,\n          openModal: true,\n          screenName: editParam.screenName,\n          ncontrolcode: editParam.ncontrolCode,\n          loading: false,\n          selectedId,\n          mandatoryFields\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/QuaLISWeb/src/actions/RegistrationTypeMasterAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","constructOptionList","showRegTypeAddScreen","userInfo","ncontrolcode","dispatch","post","then","response","optionsSampleTypeMap","data","SampleTypes","undefined","optionsSampleType","get","type","payload","openModal","operation","selectedRecord","loading","catch","error","status","message","warn","fetchRegTypeById","editParam","URL1","URL2","primaryKeyField","primaryKeyValue","all","selectedId","value","nsampletypecode","label","ssampletypename","mandatoryFields","jsondata","screenName","ncontrolCode"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAAQC,cAAR,QAA6B,cAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,mBAAT,QAAoC,4BAApC;AAEA,OAAO,SAASC,oBAAT,CAA+BC,QAA/B,EAAyCC,YAAzC,EAAsD;AACzD,SAAO,UAASC,QAAT,EAAkB;AACrBA,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAJ,IAAAA,KAAK,CAACU,IAAN,CAAW,gCAAX,EAA4C;AAAC,kBAAWH;AAAZ,KAA5C,EACCI,IADD,CACMC,QAAQ,IAAG;AAEb,YAAMC,oBAAoB,GAAGR,mBAAmB,CAACO,QAAQ,CAACE,IAAT,CAAcC,WAAd,IAA6B,EAA9B,EAAkC,iBAAlC,EAAoD,iBAApD,EAAuEC,SAAvE,EAAkFA,SAAlF,EAA6F,IAA7F,CAAhD;AAEA,YAAMC,iBAAiB,GAAGJ,oBAAoB,CAACK,GAArB,CAAyB,YAAzB,CAA1B;AACAT,MAAAA,QAAQ,CAAC;AACLU,QAAAA,IAAI,EAAElB,cADD;AACiBmB,QAAAA,OAAO,EAAC;AAC1BH,UAAAA,iBAD0B;AAE1BI,UAAAA,SAAS,EAAC,IAFgB;AAG1BC,UAAAA,SAAS,EAAC,QAHgB;AAI1BC,UAAAA,cAAc,EAAC,EAJW;AAKxBf,UAAAA,YALwB;AAKXgB,UAAAA,OAAO,EAAC;AALG;AADzB,OAAD,CAAR;AASH,KAfD,EAgBCC,KAhBD,CAgBOC,KAAK,IAAI;AACZjB,MAAAA,QAAQ,CAAC;AAACU,QAAAA,IAAI,EAAElB,cAAP;AAAuBmB,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAkC;AAC9BzB,QAAAA,KAAK,CAACwB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACA1B,QAAAA,KAAK,CAAC2B,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeE,IAA1B;AACH;AACJ,KAxBD;AAyBH,GA3BD;AA4BH;AAGD,OAAO,SAASgB,gBAAT,CAA2BC,SAA3B,EAAqC;AACxC,SAAO,UAAStB,QAAT,EAAkB;AACrB,UAAMuB,IAAI,GAAEhC,KAAK,CAACU,IAAN,CAAW,gCAAX,EAA4C;AAAC,kBAAWqB,SAAS,CAACxB;AAAtB,KAA5C,CAAZ;AACA,UAAM0B,IAAI,GAACjC,KAAK,CAACU,IAAN,CAAW,0CAAX,EAAuD;AAAE,OAACqB,SAAS,CAACG,eAAX,GAA6BH,SAAS,CAACI,eAAzC;AAA2D,kBAAYJ,SAAS,CAACxB;AAAjF,KAAvD,CAAX;AACAE,IAAAA,QAAQ,CAACL,WAAW,CAAC,IAAD,CAAZ,CAAR;AACAD,IAAAA,KAAK,CAACiC,GAAN,CAAU,CAACJ,IAAD,EAAMC,IAAN,CAAV,EACCtB,IADD,CACMC,QAAQ,IAAG;AACb,UAAIW,cAAc,GAAC,EAAnB;AACA,UAAIc,UAAU,GAAGN,SAAS,CAACI,eAA3B;AACA,YAAMtB,oBAAoB,GAAGR,mBAAmB,CAACO,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiBC,WAAjB,IAAgC,EAAjC,EAAqC,iBAArC,EAAuD,iBAAvD,EAA0EC,SAA1E,EAAqFA,SAArF,EAAgG,IAAhG,CAAhD;AACA,YAAMC,iBAAiB,GAAGJ,oBAAoB,CAACK,GAArB,CAAyB,YAAzB,CAA1B;AACAK,MAAAA,cAAc,GAACX,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAA3B;AACAS,MAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B;AAACe,QAAAA,KAAK,EAAC1B,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiByB,eAAxB;AAAwCC,QAAAA,KAAK,EAAC5B,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB2B;AAA/D,OAA9B;AACA,UAAIC,eAAe,GAAC,CAChB;AAAC,mBAAU,oBAAX;AAAgC,qBAAY,aAA5C;AAA0D,0BAAkB,WAA5E;AAAyF,uBAAe,SAAxG;AAAkH,0BAAiB;AAAnI,OADgB,EAEhB;AAAC,mBAAU,0BAAX;AAAsC,qBAAY,cAAlD;AAAiE,0BAAkB,WAAnF;AAAgG,uBAAe,SAA/G;AAAyH,0BAAiB;AAA1I,OAFgB,CAGhB;AAHgB,OAApB;AAKAjC,MAAAA,QAAQ,CAAC;AACLU,QAAAA,IAAI,EAAElB,cADD;AACiBmB,QAAAA,OAAO,EAAC;AAC1BG,UAAAA,cAAc,EAAE,EAAE,GAAGX,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAjB;AAAuB,eAAGF,QAAQ,CAAC,CAAD,CAAR,CAAYE,IAAZ,CAAiB6B;AAA3C,WADU;AAE9BrB,UAAAA,SAAS,EAACS,SAAS,CAACT,SAFU;AAG9BL,UAAAA,iBAH8B;AAI9BI,UAAAA,SAAS,EAAE,IAJmB;AAK9BuB,UAAAA,UAAU,EAACb,SAAS,CAACa,UALS;AAM9BpC,UAAAA,YAAY,EAACuB,SAAS,CAACc,YANO;AAO9BrB,UAAAA,OAAO,EAAC,KAPsB;AAOhBa,UAAAA,UAPgB;AAQ9BK,UAAAA;AAR8B;AADzB,OAAD,CAAR;AAaH,KA1BD,EA2BCjB,KA3BD,CA2BOC,KAAK,IAAI;AACZjB,MAAAA,QAAQ,CAAC;AAACU,QAAAA,IAAI,EAAElB,cAAP;AAAuBmB,QAAAA,OAAO,EAAE;AAACI,UAAAA,OAAO,EAAC;AAAT;AAAhC,OAAD,CAAR;;AACA,UAAIE,KAAK,CAACd,QAAN,CAAee,MAAf,KAA0B,GAA9B,EAAkC;AAC9BzB,QAAAA,KAAK,CAACwB,KAAN,CAAYA,KAAK,CAACE,OAAlB;AACH,OAFD,MAGI;AACA1B,QAAAA,KAAK,CAAC2B,IAAN,CAAWH,KAAK,CAACd,QAAN,CAAeE,IAA1B;AACH;AACJ,KAnCD;AAoCH,GAxCD;AAyCF","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios'\r\nimport { initRequest } from './LoginAction';\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function showRegTypeAddScreen (userInfo, ncontrolcode){\r\n    return function(dispatch){\r\n        dispatch(initRequest(true));\r\n        rsapi.post('registrationtype/getSampleType',{\"userinfo\":userInfo}) \r\n        .then(response=> { \r\n           \r\n            const optionsSampleTypeMap = constructOptionList(response.data.SampleTypes || [], \"nsampletypecode\",\"ssampletypename\", undefined, undefined, true);\r\n\r\n            const optionsSampleType = optionsSampleTypeMap.get(\"OptionList\");\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload:{\r\n                    optionsSampleType,\r\n                    openModal:true,\r\n                    operation:\"create\",\r\n                    selectedRecord:{}\r\n                    , ncontrolcode,loading:false\r\n                }\r\n            });         \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport function fetchRegTypeById (editParam){  \r\n    return function(dispatch){\r\n        const URL1= rsapi.post('registrationtype/getSampleType',{\"userinfo\":editParam.userInfo})\r\n        const URL2=rsapi.post(\"registrationtype/getRegistrationTypeById\", { [editParam.primaryKeyField] :editParam.primaryKeyValue , \"userinfo\": editParam.userInfo} )\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL1,URL2])\r\n        .then(response=> { \r\n            let selectedRecord={}\r\n            let selectedId = editParam.primaryKeyValue;\r\n            const optionsSampleTypeMap = constructOptionList(response[0].data.SampleTypes || [], \"nsampletypecode\",\"ssampletypename\", undefined, undefined, true);\r\n            const optionsSampleType = optionsSampleTypeMap.get(\"OptionList\");\r\n            selectedRecord=response[1].data\r\n            selectedRecord['SampleTypes']={value:response[1].data.nsampletypecode,label:response[1].data.ssampletypename}\r\n            let mandatoryFields=[\r\n                {\"idsName\":\"IDS_SAMPLETYPENAME\",\"dataField\":\"SampleTypes\",\"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\",\"ismultilingual\":\"false\"},\r\n                {\"idsName\":\"IDS_REGISTRATIONTYPENAME\",\"dataField\":\"sregtypename\",\"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\",\"ismultilingual\":\"true\"},\r\n                //{\"idsName\":\"IDS_DESCRIPTION\",\"dataField\":\"sdescription\" },\r\n            ];\r\n            dispatch({\r\n                type: DEFAULT_RETURN, payload:{\r\n                    selectedRecord: { ...response[1].data, ...response[1].data.jsondata },\r\n                operation:editParam.operation,\r\n                optionsSampleType,\r\n                openModal: true,\r\n                screenName:editParam.screenName,\r\n                ncontrolcode:editParam.ncontrolCode,\r\n                loading:false,selectedId,\r\n                mandatoryFields\r\n            }\r\n            }); \r\n            \r\n        })\r\n        .catch(error => {\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }         \r\n        })\r\n    }\r\n }"]},"metadata":{},"sourceType":"module"}