{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { sortData } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nexport function getEmailConfigDetail(emailconfig, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"emailconfig/getEmailConfig\", {\n      nemailconfigcode: emailconfig.nemailconfigcode,\n      userinfo: userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          operation: null,\n          modalName: undefined,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function openEmailConfigModal(screenName, operation, userinfo, ncontrolcode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\") {\n      const emailConfig = rsapi.post(\"/emailconfig/getEmailConfigDetails\", {\n        \"userinfo\": userinfo\n      });\n      let urlArray = [];\n\n      if (operation === \"create\") {\n        urlArray = [emailConfig];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        selectedRecord[\"nemailconfigcode\"] = 0;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            EmailHost: response[0].data.EmailHost || [],\n            EmailTemplate: response[0].data.EmailTemplate || [],\n            EmailScreen: response[0].data.EmailScreen || [],\n            //ActionType: response[0].data.ActionType|| [],\n            users: response[0].data.users || [],\n            FormName: response[0].data.FormName || [],\n            FormControls: response[0].data.FormControls || [],\n            // dataSource:response[0].data.dataSource||[],\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolcode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch(initRequest(false));\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function fetchEmailConfigById(editParam) {\n  return function (dispatch) {\n    const URL1 = rsapi.post('emailconfig/getActiveEmailConfigById', {\n      [editParam.primaryKeyField]: editParam.SelectedEmailConfig.nemailconfigcode,\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL1]).then(response => {\n      let selectedRecord = {};\n      let selectedId = editParam.primaryKeyValue;\n      selectedRecord = response[0].data.EmailConfig;\n      selectedRecord['nemailtemplatecode'] = {\n        value: response[0].data.EmailConfig.nemailtemplatecode,\n        label: response[0].data.EmailConfig.stemplatename\n      };\n      selectedRecord['nemailscreencode'] = {\n        value: response[0].data.EmailConfig.nemailscreencode,\n        label: response[0].data.EmailConfig.sscreenname,\n        item: {\n          nemailscreencode: response[0].data.EmailConfig.nemailscreencode,\n          sscreenname: response[0].data.EmailConfig.sscreenname,\n          nformcode: response[0].data.EmailConfig.nformcode,\n          sformname: response[0].data.EmailConfig.sformname\n        }\n      }; //selectedRecord['nactiontype']={value:response[0].data.EmailConfig.nactiontype,label:response[0].data.EmailConfig.stransdisplaystatus}\n\n      selectedRecord['nemailhostcode'] = {\n        value: response[0].data.EmailConfig.nemailhostcode,\n        label: response[0].data.EmailConfig.shostname\n      }; // selectedRecord['nuserrolecode']={value:response[0].data.EmailConfig.nuserrole,label:response[0].data.EmailConfig.suserrolename}\n\n      selectedRecord['nenableemail'] = response[0].data.EmailConfig.nenableemail;\n      selectedRecord['nformcode'] = {\n        value: response[0].data.EmailConfig.nformcode,\n        label: response[0].data.EmailConfig.sformname\n      };\n      selectedRecord['ncontrolcode'] = {\n        value: response[0].data.EmailConfig.ncontrolcode,\n        label: response[0].data.EmailConfig.scontrolids\n      };\n\n      if (response[0].data.EmailConfig.nemailuserquerycode !== -1) {\n        selectedRecord['nemailuserquerycode'] = {\n          value: response[0].data.EmailConfig.nemailuserquerycode,\n          label: response[0].data.EmailConfig.sdisplayname\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          EmailHost: response[0].data.EmailHost || [],\n          EmailTemplate: response[0].data.EmailTemplate || [],\n          EmailScreen: response[0].data.EmailScreen || [],\n          ActionType: response[0].data.ActionType || [],\n          FormName: response[0].data.FormName || [],\n          FormControls: response[0].data.FormControls || [],\n          EmailUserQuery: response[0].data.EmailUserQuery || [],\n          selectedRecord,\n          operation: editParam.operation,\n          openModal: true,\n          screenName: editParam.screenName,\n          ncontrolcode: editParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getUserEmailConfig(screenName, operation, primaryKey, SelectedEmailConfig, masterData, userinfo, ncontrolcode) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"emailconfig/getUserEmailConfig\", {\n      nemailconfigcode: SelectedEmailConfig.nemailconfigcode,\n      userinfo: userinfo\n    }).then(response => {\n      let selectedRecord = {};\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          users: response.data.users || [],\n          // dataSource:response[0].data.dataSource||[],\n          operation,\n          screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolcode,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getFormControls(selectedRecord, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"emailconfig/getEmailConfigControl\", {\n      nformcode: selectedRecord.nemailscreencode.item.nformcode,\n      userinfo: userInfo\n    }).then(response => {\n      selectedRecord['ncontrolcode'] = undefined;\n      selectedRecord['nemailuserquerycode'] = undefined;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          FormControls: response.data.FormControls || [],\n          EmailUserQuery: response.data.EmailUserQuery || [],\n          // dataSource:response[0].data.dataSource||[],\n          //operation,\n          //screenName,\n          selectedRecord,\n          //openModal: true,\n          //ncontrolcode, \n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/actions/EmailConfigAction.js"],"names":["rsapi","Axios","toast","sortData","DEFAULT_RETURN","initRequest","intl","getEmailConfigDetail","emailconfig","userInfo","masterData","dispatch","post","nemailconfigcode","userinfo","then","response","data","type","payload","operation","modalName","undefined","loading","catch","error","status","message","warn","openEmailConfigModal","screenName","ncontrolcode","emailConfig","urlArray","all","selectedRecord","EmailHost","EmailTemplate","EmailScreen","users","FormName","FormControls","openModal","formatMessage","id","fetchEmailConfigById","editParam","URL1","primaryKeyField","SelectedEmailConfig","selectedId","primaryKeyValue","EmailConfig","value","nemailtemplatecode","label","stemplatename","nemailscreencode","sscreenname","item","nformcode","sformname","nemailhostcode","shostname","nenableemail","scontrolids","nemailuserquerycode","sdisplayname","ActionType","EmailUserQuery","ncontrolCode","getUserEmailConfig","primaryKey","getFormControls"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n     sortData\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\n\r\n\r\nexport function getEmailConfigDetail (emailconfig, userInfo, masterData) {\r\n    return function (dispatch) {   \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"emailconfig/getEmailConfig\", {nemailconfigcode:emailconfig.nemailconfigcode, userinfo:userInfo})\r\n   .then(response=>{     \r\n        masterData = {...masterData, ...response.data};       \r\n        sortData(masterData);\r\n        dispatch({type: DEFAULT_RETURN, payload:{masterData, operation:null, modalName:undefined, \r\n             loading:false}});   \r\n   })\r\n   .catch(error=>{\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n       if (error.response.status === 500){\r\n           toast.error(error.message);\r\n       } \r\n       else{               \r\n           toast.warn(error.response.data);\r\n       }  \r\n  \r\n   })\r\n}}\r\n\r\n\r\nexport function openEmailConfigModal(screenName, operation,userinfo, ncontrolcode) {\r\n    return function (dispatch) {\r\n        if (operation === \"create\" || operation === \"update\") {\r\n            const emailConfig = rsapi.post(\"/emailconfig/getEmailConfigDetails\", {\r\n                \"userinfo\": userinfo\r\n            });\r\n            let urlArray = [];\r\n            if (operation === \"create\") {\r\n\r\n                urlArray = [emailConfig];\r\n            }\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let selectedRecord = {};\r\n                    selectedRecord[\"nemailconfigcode\"] = 0;\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            EmailHost: response[0].data.EmailHost || [],\r\n                            EmailTemplate: response[0].data.EmailTemplate|| [],\r\n                            EmailScreen: response[0].data.EmailScreen|| [],\r\n                            //ActionType: response[0].data.ActionType|| [],\r\n                            users: response[0].data.users|| [],\r\n                            FormName:response[0].data.FormName|| [],\r\n                            FormControls:response[0].data.FormControls|| [],\r\n                           // dataSource:response[0].data.dataSource||[],\r\n                            operation,\r\n                            screenName,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolcode, loading: false\r\n                        }\r\n                    })\r\n                })\r\n                .catch(error => {\r\n                    dispatch(initRequest(false));\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(intl.formatMessage({\r\n                            id: error.response.data\r\n                        }));\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchEmailConfigById(editParam) {\r\n    return function (dispatch) {\r\n        const URL1 = rsapi.post('emailconfig/getActiveEmailConfigById', { [editParam.primaryKeyField]: editParam.SelectedEmailConfig.nemailconfigcode, \r\n            \"userinfo\": editParam.userInfo })\r\n        dispatch(initRequest(true));\r\n        Axios.all([URL1])\r\n            .then(response => {\r\n                let selectedRecord = {}\r\n                let selectedId = editParam.primaryKeyValue;\r\n                selectedRecord = response[0].data.EmailConfig\r\n                selectedRecord['nemailtemplatecode']={value:response[0].data.EmailConfig.nemailtemplatecode,\r\n                                                     label:response[0].data.EmailConfig.stemplatename}\r\n                selectedRecord['nemailscreencode']={value:response[0].data.EmailConfig.nemailscreencode,\r\n                                                    label:response[0].data.EmailConfig.sscreenname, \r\n                                                    item:{nemailscreencode:response[0].data.EmailConfig.nemailscreencode,\r\n                                                          sscreenname:response[0].data.EmailConfig.sscreenname,\r\n                                                          nformcode:response[0].data.EmailConfig.nformcode,\r\n                                                          sformname:response[0].data.EmailConfig.sformname}\r\n                                                }\r\n                //selectedRecord['nactiontype']={value:response[0].data.EmailConfig.nactiontype,label:response[0].data.EmailConfig.stransdisplaystatus}\r\n                selectedRecord['nemailhostcode']={value:response[0].data.EmailConfig.nemailhostcode,label:response[0].data.EmailConfig.shostname}\r\n               // selectedRecord['nuserrolecode']={value:response[0].data.EmailConfig.nuserrole,label:response[0].data.EmailConfig.suserrolename}\r\n                selectedRecord['nenableemail']=response[0].data.EmailConfig.nenableemail\r\n                selectedRecord['nformcode']={value:response[0].data.EmailConfig.nformcode,label:response[0].data.EmailConfig.sformname}\r\n                selectedRecord['ncontrolcode']={value:response[0].data.EmailConfig.ncontrolcode,label:response[0].data.EmailConfig.scontrolids}\r\n                if (response[0].data.EmailConfig.nemailuserquerycode !== -1){\r\n                    selectedRecord['nemailuserquerycode']={value:response[0].data.EmailConfig.nemailuserquerycode,label:response[0].data.EmailConfig.sdisplayname}\r\n                }\r\n               \r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        EmailHost: response[0].data.EmailHost || [],\r\n                        EmailTemplate: response[0].data.EmailTemplate|| [],\r\n                        EmailScreen: response[0].data.EmailScreen|| [],\r\n                        ActionType: response[0].data.ActionType|| [],\r\n                        FormName:response[0].data.FormName|| [],\r\n                        FormControls:response[0].data.FormControls|| [],\r\n                        EmailUserQuery:response[0].data.EmailUserQuery|| [],\r\n                        selectedRecord,\r\n                        operation: editParam.operation,\r\n                        openModal: true,\r\n                        screenName: editParam.screenName,\r\n                        ncontrolcode: editParam.ncontrolCode,\r\n                        loading: false, selectedId\r\n                    }\r\n                });\r\n\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\nexport function getUserEmailConfig (screenName, operation, primaryKey, SelectedEmailConfig,masterData, userinfo, ncontrolcode) {            \r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"emailconfig/getUserEmailConfig\", \r\n                                    {nemailconfigcode:SelectedEmailConfig.nemailconfigcode,\r\n                                    userinfo:userinfo})\r\n    .then(response=>{ \r\n        let selectedRecord = {};\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            users: response.data.users|| [],\r\n                           // dataSource:response[0].data.dataSource||[],\r\n                            operation,\r\n                            screenName,\r\n                            selectedRecord,\r\n                            openModal: true,\r\n                            ncontrolcode, loading: false\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\nexport function getFormControls (selectedRecord,userInfo) {            \r\n    return function (dispatch) {  \r\n    dispatch(initRequest(true));\r\n    return rsapi.post(\"emailconfig/getEmailConfigControl\",\r\n    {nformcode:selectedRecord.nemailscreencode.item.nformcode,userinfo:userInfo})\r\n    .then(response=>{\r\n        selectedRecord['ncontrolcode'] = undefined;\r\n        selectedRecord['nemailuserquerycode'] = undefined;\r\n        dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        FormControls: response.data.FormControls|| [],\r\n                        EmailUserQuery: response.data.EmailUserQuery|| [],\r\n                        // dataSource:response[0].data.dataSource||[],\r\n                        //operation,\r\n                        //screenName,\r\n                        selectedRecord,\r\n                        //openModal: true,\r\n                        //ncontrolcode, \r\n                        loading: false\r\n                }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}