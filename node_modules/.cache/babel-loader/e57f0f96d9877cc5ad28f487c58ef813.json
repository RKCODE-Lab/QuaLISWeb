{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\basemaster\\\\AddSampleStorageMapping.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { constructOptionList } from '../../components/CommonScript';\nimport rsapi from '../../rsapi';\nimport Preloader from '../../components/preloader/preloader.component';\nimport FormInput from '../../components/form-input/form-input.component';\n\nclass AddSampleStorageMapping extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (fieldName === 'nstoragecategorycode') {\n        this.getSampleStorageLocation({\n          userinfo: this.props.userInfo,\n          nstoragecategorycode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainertypecode') {\n        this.getContainerStructure({\n          userinfo: this.props.userInfo,\n          ncontainertypecode: comboData.value\n        }, fieldName, comboData);\n      } else if (fieldName === 'ncontainerstructurecode') {\n        selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\n        selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\n        selectedRecord['nnoofcontainer'] = selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']) : 1;\n      } else if (fieldName === 'nsamplestoragelocationcode') {\n        this.getSampleStorageLocation({\n          userinfo: this.props.userInfo,\n          nstoragecategorycode: this.props.selectedRecordFilter['nstoragecategorycode'].value,\n          nsamplestoragelocationcode: comboData.value\n        }, fieldName, comboData);\n      }\n\n      selectedRecord[fieldName] = comboData;\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.calculateRowColumn = (Row, column) => {\n      let nnoofcontainer = Row * column;\n      return nnoofcontainer;\n    };\n\n    this.onInputChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === \"checkbox\") {\n        if (event.target.checked) {\n          selectedRecord['ncontainertypecode'] && delete selectedRecord['ncontainertypecode'];\n          selectedRecord['ncontainerstructurecode'] && delete selectedRecord['ncontainerstructurecode'];\n          selectedRecord['containerStructureOptions'] && delete selectedRecord['containerStructureOptions'];\n          selectedRecord['nrow'] && delete selectedRecord['nrow'];\n          selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\n          selectedRecord['ndirectionmastercode'] && delete selectedRecord['ndirectionmastercode']; //  selectedRecord['nquantity'] = this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']);\n        }\n\n        selectedRecord[event.target.name] = event.target.checked;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.props.childDataChange(selectedRecord);\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onNumericInputChange = (value, field) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let constantvalue = value.target.value;\n\n      if (field === 'nnoofcontainer') {\n        if (constantvalue !== 0) {\n          selectedRecord['nrow'] = 1;\n          selectedRecord['ncolumn'] = constantvalue;\n        } else {\n          selectedRecord['nrow'] && delete selectedRecord['nrow'];\n          selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\n        }\n      }\n\n      if (!isNaN(constantvalue)) {\n        selectedRecord[field] = constantvalue;\n        this.props.childDataChange(selectedRecord);\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.state = {\n      selectedRecord: this.props.selectedRecord,\n      loading: false\n    };\n  }\n\n  getSampleStorageLocation(inputData, fieldName, comboData) {\n    let selectedRecordFilter = this.props.selectedRecordFilter || {};\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n\n    if (fieldName === 'nsamplestoragelocationcode') {\n      inputParamData = {\n        nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\n        nsamplestoragelocationcode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    } else {\n      inputParamData = {\n        nstoragecategorycode: comboData.value,\n        userinfo: inputData.userinfo\n      };\n    }\n\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        storageLocationOptions,\n        sampleStorageVersionOptions\n      } = this.state;\n      let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\", \"ssamplestoragelocationname\", undefined, undefined, undefined);\n      storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\n      let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\", \"nversionno\", undefined, undefined, undefined);\n      sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\n      selectedRecordFilter = { ...selectedRecordFilter,\n        nsamplestoragelocationcode: storageLocationOptions.length > 0 ? storageLocationOptions[0] : [],\n        nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ? sampleStorageVersionOptions[0] : []\n      };\n      this.setState({\n        storageLocationOptions,\n        sampleStorageVersionOptions,\n        selectedRecordFilter: { ...selectedRecordFilter,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  getContainerStructure(inputData, fieldName, comboData) {\n    let inputParamData = {};\n    this.setState({\n      loading: true\n    });\n    inputParamData = {\n      ncontainertypecode: comboData.value,\n      userinfo: inputData.userinfo\n    };\n    let urlArray = [];\n    const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\n    urlArray = [url1];\n    Axios.all(urlArray).then(response => {\n      let {\n        containerStructureOptions,\n        selectedRecord\n      } = this.state;\n      let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\", \"scontainerstructurename\", undefined, undefined, undefined);\n      containerStructureOptions = containerStructureList.get(\"OptionList\");\n      selectedRecord = { ...selectedRecord,\n        nnoofcontainer: selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(containerStructureOptions[0].item.nrow, containerStructureOptions[0].item.ncolumn) : 1,\n        nrow: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.nrow : 1,\n        ncolumn: containerStructureOptions.length > 0 ? containerStructureOptions[0].item.ncolumn : 1,\n        ncontainerstructurecode: containerStructureOptions.length > 0 ? containerStructureOptions[0] : [],\n        containerStructureOptions: containerStructureOptions.length > 0 ? [...containerStructureOptions] : []\n      };\n      this.props.childDataChange({ ...selectedRecord,\n        [fieldName]: comboData\n      });\n      this.setState({\n        selectedRecord: { ...selectedRecord,\n          [fieldName]: comboData\n        },\n        loading: false\n      });\n    }).catch(error => {\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, \"   \", /*#__PURE__*/React.createElement(Preloader, {\n      loading: this.state.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 18\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }\n    }, this.props.operation === 'update' ? /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nsamplestoragecontainerpathcode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nsamplestoragecontainerpathcode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGEPATH\"\n      }),\n      isMandatory: true,\n      value: this.state.selectedRecord[\"nsamplestoragecontainerpathcode\"] ? this.state.selectedRecord[\"nsamplestoragecontainerpathcode\"] || [] : [],\n      options: this.state.selectedRecord[\"storageMappingMapOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: true,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 29\n      }\n    }) : /*#__PURE__*/React.createElement(FormMultiSelect, {\n      name: \"nsamplestoragecontainerpathcode\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_SAMPLESTORAGEPATH\"\n      }),\n      options: this.state.selectedRecord.storageMappingMapOptions || [],\n      optionId: \"value\",\n      optionValue: \"label\",\n      value: this.state.selectedRecord[\"nsamplestoragecontainerpathcode\"] ? this.state.selectedRecord[\"nsamplestoragecontainerpathcode\"] || [] : [],\n      isMandatory: true,\n      isClearable: true,\n      disableSearch: this.props.isDisabled,\n      disabled: this.props.isDisabled,\n      closeMenuOnSelect: false,\n      alphabeticalSort: true,\n      onChange: event => this.onComboChange(event, \"nsamplestoragecontainerpathcode\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 34\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nproductcode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nproductcode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PRODUCT\"\n      }),\n      isMandatory: true,\n      value: this.state.selectedRecord[\"nproductcode\"] ? this.state.selectedRecord[\"nproductcode\"] || [] : [],\n      options: this.state.selectedRecord[\"productOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nprojecttypecode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nprojecttypecode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_PROJECTTYPE\"\n      }),\n      isMandatory: false,\n      value: this.state.selectedRecord[\"nprojecttypecode\"] ? this.state.selectedRecord[\"nprojecttypecode\"] || [] : [],\n      options: this.state.selectedRecord[\"projectOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_QUANTITY\"\n      }),\n      name: \"nquantity\",\n      type: \"numeric\",\n      onChange: event => this.onNumericInputChange(event, 'nquantity'),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_QUANTITY\"\n      }),\n      value: this.state.selectedRecord[\"nquantity\"] ? this.state.selectedRecord[\"nquantity\"] || [] : [],\n      isMandatory: false // isDisabled={this.props.selectedRecord[\"nneedposition\"]}\n      ,\n      required: true,\n      maxLength: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"nunitcode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'nunitcode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_UNITNAME\"\n      }),\n      isMandatory: false,\n      value: this.state.selectedRecord[\"nunitcode\"] ? this.state.selectedRecord[\"nunitcode\"] || [] : [],\n      options: this.state.selectedRecord[\"unitOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormInput, {\n      label: this.props.intl.formatMessage({\n        id: \"IDS_NOOFSAMPLECONTAINER\"\n      }),\n      name: \"nnoofcontainer\",\n      type: \"numeric\",\n      onChange: event => this.onNumericInputChange(event, 'nnoofcontainer'),\n      placeholder: this.props.intl.formatMessage({\n        id: \"IDS_NOOFSAMPLECONTAINER\"\n      }),\n      value: this.state.selectedRecord[\"nnoofcontainer\"] ? this.state.selectedRecord[\"nnoofcontainer\"] || [] : [],\n      isMandatory: false,\n      isDisabled: this.state.selectedRecord[\"nneedposition\"],\n      required: true,\n      maxLength: this.state.selectedRecord[\"nneedposition\"] === true ? \"\" : \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 27\n      }\n    })), this.state.selectedRecord[\"nneedposition\"] === true ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ncontainertypecode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'ncontainertypecode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_CONTAINERTYPE\"\n      }),\n      isMandatory: true,\n      value: this.state.selectedRecord[\"ncontainertypecode\"] ? this.state.selectedRecord[\"ncontainertypecode\"] || [] : [],\n      options: this.state.selectedRecord[\"containerTypeOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ncontainerstructurecode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'ncontainerstructurecode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_CONTAINERSTRUCTURENAME\"\n      }),\n      isMandatory: true,\n      value: this.state.selectedRecord[\"ncontainerstructurecode\"] ? this.state.selectedRecord[\"ncontainerstructurecode\"] || [] : [],\n      options: this.state.selectedRecord[\"containerStructureOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n      name: \"ndirectionmastercode\",\n      as: \"select\",\n      onChange: event => this.onComboChange(event, 'ndirectionmastercode'),\n      formLabel: this.props.intl.formatMessage({\n        id: \"IDS_DIRECTION\"\n      }),\n      isMandatory: true,\n      value: this.state.selectedRecord[\"ndirectionmastercode\"] ? this.state.selectedRecord[\"ndirectionmastercode\"] || [] : [],\n      options: this.state.selectedRecord[\"directionmasterOptions\"],\n      optionId: \"value\",\n      optionValue: \"label\",\n      isMulti: false,\n      isDisabled: false,\n      isSearchable: false,\n      isClearable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 29\n      }\n    }))) : \"\", /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: 'nrow',\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ROWS\"\n      }),\n      className: \"form-control\",\n      type: \"text\",\n      strict: true,\n      value: this.state.selectedRecord['nrow'] ? this.state.selectedRecord['nrow'] : \"\",\n      isDisabled: true,\n      noStyle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormNumericInput, {\n      name: 'ncolumn',\n      label: this.props.intl.formatMessage({\n        id: \"IDS_COLUMNS\"\n      }),\n      className: \"form-control\",\n      type: \"text\",\n      strict: true,\n      value: this.state.selectedRecord['ncolumn'] ? this.state.selectedRecord['ncolumn'] : \"\",\n      isDisabled: true,\n      noStyle: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 37\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CustomSwitch, {\n      id: \"nneedposition\",\n      name: \"nneedposition\",\n      type: \"switch\",\n      label: this.props.intl.formatMessage({\n        id: \"IDS_NEEDPREDEFINEDSTRUCURE\"\n      }),\n      className: \"custom-switch-md\",\n      checked: this.state.selectedRecord === undefined ? false : this.state.selectedRecord[\"nneedposition\"],\n      defaultValue: this.state.selectedRecord === undefined ? false : this.state.selectedRecord[\"nneedposition\"],\n      onChange: this.onInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 25\n      }\n    }))));\n  }\n\n}\n\nexport default injectIntl(AddSampleStorageMapping);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/basemaster/AddSampleStorageMapping.jsx"],"names":["React","Row","Col","injectIntl","CustomSwitch","FormMultiSelect","FormSelectSearch","FormNumericInput","toast","Axios","constructOptionList","rsapi","Preloader","FormInput","AddSampleStorageMapping","Component","constructor","props","onComboChange","comboData","fieldName","selectedRecord","state","getSampleStorageLocation","userinfo","userInfo","nstoragecategorycode","value","getContainerStructure","ncontainertypecode","item","nrow","ncolumn","calculateRowColumn","selectedRecordFilter","nsamplestoragelocationcode","childDataChange","setState","column","nnoofcontainer","onInputChange","event","target","type","checked","name","onNumericInputChange","field","constantvalue","isNaN","loading","inputData","inputParamData","urlArray","url1","post","all","then","response","storageLocationOptions","sampleStorageVersionOptions","sampleStorageLocationList","data","sampleStorageLocation","undefined","get","sampleStorageVersionList","sampleStorageVersion","length","nsamplestorageversioncode","catch","error","status","message","warn","containerStructureOptions","containerStructureList","containerStructure","ncontainerstructurecode","render","operation","intl","formatMessage","id","storageMappingMapOptions","isDisabled"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport FormMultiSelect from '../../components/form-multi-select/form-multi-select.component';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport FormNumericInput from '../../components/form-numeric-input/form-numeric-input.component';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { constructOptionList } from '../../components/CommonScript';\r\nimport rsapi from '../../rsapi';\r\nimport Preloader from '../../components/preloader/preloader.component';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\n\r\n\r\n\r\nclass AddSampleStorageMapping extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            selectedRecord: this.props.selectedRecord,\r\n            loading: false\r\n        }\r\n    }\r\n    getSampleStorageLocation(inputData, fieldName, comboData) {\r\n        let selectedRecordFilter = this.props.selectedRecordFilter || {};\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        if (fieldName === 'nsamplestoragelocationcode') {\r\n            inputParamData = {\r\n                nstoragecategorycode: selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        } else {\r\n            inputParamData = {\r\n                nstoragecategorycode: comboData.value,\r\n                userinfo: inputData.userinfo\r\n            }\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getsamplestoragemapping\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { storageLocationOptions,\r\n                    sampleStorageVersionOptions } = this.state\r\n\r\n                let sampleStorageLocationList = constructOptionList(response[0].data.sampleStorageLocation || [], \"nsamplestoragelocationcode\",\r\n                    \"ssamplestoragelocationname\", undefined, undefined, undefined);\r\n                storageLocationOptions = sampleStorageLocationList.get(\"OptionList\");\r\n                let sampleStorageVersionList = constructOptionList(response[0].data.sampleStorageVersion || [], \"nsamplestorageversioncode\",\r\n                    \"nversionno\", undefined, undefined, undefined);\r\n                sampleStorageVersionOptions = sampleStorageVersionList.get(\"OptionList\");\r\n                selectedRecordFilter = {\r\n                    ...selectedRecordFilter,\r\n                    nsamplestoragelocationcode: storageLocationOptions.length > 0 ?\r\n                        storageLocationOptions[0] : [],\r\n                    nsamplestorageversioncode: sampleStorageVersionOptions.length > 0 ?\r\n                        sampleStorageVersionOptions[0] : [],\r\n\r\n                }\r\n                this.setState({\r\n                    storageLocationOptions, sampleStorageVersionOptions,\r\n                    selectedRecordFilter: {\r\n                        ...selectedRecordFilter,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n    getContainerStructure(inputData, fieldName, comboData) {\r\n        let inputParamData = {}\r\n        this.setState({ loading: true })\r\n        inputParamData = {\r\n            ncontainertypecode: comboData.value,\r\n            userinfo: inputData.userinfo\r\n        }\r\n        let urlArray = [];\r\n        const url1 = rsapi.post(\"samplestoragemapping/getContainerStructure\", inputParamData);\r\n\r\n        urlArray = [url1];\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let { containerStructureOptions, selectedRecord } = this.state\r\n\r\n                let containerStructureList = constructOptionList(response[0].data.containerStructure || [], \"ncontainerstructurecode\",\r\n                    \"scontainerstructurename\", undefined, undefined, undefined);\r\n                containerStructureOptions = containerStructureList.get(\"OptionList\");\r\n                selectedRecord = {\r\n                    ...selectedRecord,\r\n                    nnoofcontainer: selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(containerStructureOptions[0].item.nrow,\r\n                        containerStructureOptions[0].item.ncolumn) : 1,\r\n                    nrow: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.nrow : 1,\r\n                    ncolumn: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0].item.ncolumn : 1,\r\n                    ncontainerstructurecode: containerStructureOptions.length > 0 ?\r\n                        containerStructureOptions[0] : [],\r\n                    containerStructureOptions: containerStructureOptions.length > 0 ?\r\n                        [...containerStructureOptions] : [],\r\n                }\r\n\r\n                this.props.childDataChange({\r\n                    ...selectedRecord,\r\n                    [fieldName]: comboData\r\n                });\r\n\r\n                this.setState({\r\n\r\n                    selectedRecord: {\r\n                        ...selectedRecord,\r\n                        [fieldName]: comboData\r\n                    },\r\n                    loading: false\r\n                });\r\n            }).catch(error => {\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n                this.setState({\r\n                    loading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (fieldName === 'nstoragecategorycode') {\r\n            this.getSampleStorageLocation({\r\n                userinfo: this.props.userInfo,\r\n                nstoragecategorycode: comboData.value\r\n            }, fieldName, comboData);\r\n        } else if (fieldName === 'ncontainertypecode') {\r\n            this.getContainerStructure({\r\n                userinfo: this.props.userInfo,\r\n                ncontainertypecode: comboData.value\r\n            }, fieldName, comboData);\r\n\r\n        } else if (fieldName === 'ncontainerstructurecode') {\r\n            selectedRecord['nrow'] = comboData.item.nrow ? comboData.item.nrow : 1;\r\n            selectedRecord['ncolumn'] = comboData.item.ncolumn ? comboData.item.ncolumn : 1;\r\n            selectedRecord['nnoofcontainer'] = selectedRecord[\"nneedposition\"] === true ? this.calculateRowColumn(selectedRecord['nrow'],\r\n                selectedRecord['ncolumn']) : 1\r\n\r\n        } else if (fieldName === 'nsamplestoragelocationcode') {\r\n            this.getSampleStorageLocation({\r\n                userinfo: this.props.userInfo,\r\n                nstoragecategorycode: this.props.selectedRecordFilter['nstoragecategorycode'].value,\r\n                nsamplestoragelocationcode: comboData.value\r\n\r\n            }, fieldName, comboData);\r\n        }\r\n        selectedRecord[fieldName] = comboData;\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({ selectedRecord });\r\n    }\r\n    calculateRowColumn = (Row, column) => {\r\n        let nnoofcontainer = Row * column;\r\n        return nnoofcontainer;\r\n    }\r\n    onInputChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === \"checkbox\") {\r\n            if (event.target.checked) {\r\n                selectedRecord['ncontainertypecode'] && delete selectedRecord['ncontainertypecode'];\r\n                selectedRecord['ncontainerstructurecode'] && delete selectedRecord['ncontainerstructurecode'];\r\n                selectedRecord['containerStructureOptions'] && delete selectedRecord['containerStructureOptions'];\r\n                selectedRecord['nrow'] && delete selectedRecord['nrow'];\r\n                selectedRecord['ncolumn'] && delete selectedRecord['ncolumn'];\r\n                selectedRecord['ndirectionmastercode'] && delete selectedRecord['ndirectionmastercode'];\r\n\r\n                //  selectedRecord['nquantity'] = this.calculateRowColumn(selectedRecord['nrow'], selectedRecord['ncolumn']);\r\n            }\r\n            selectedRecord[event.target.name] = event.target.checked;\r\n        } else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.props.childDataChange(selectedRecord);\r\n        this.setState({ selectedRecord });\r\n    };\r\n    // onNumericInputChange = (value, field) => {\r\n    //     const selectedRecord = this.state.selectedRecord || {};\r\n    //     if (!isNaN(value)) {\r\n    //         selectedRecord[field] = value;\r\n    //         this.props.childDataChange(selectedRecord);\r\n    //         this.setState({ selectedRecord });\r\n    //     }\r\n    // }\r\n    onNumericInputChange = (value, field) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let constantvalue = value.target.value ;\r\n        if (field === 'nnoofcontainer') {\r\n            if (constantvalue !== 0) {\r\n                selectedRecord['nrow'] = 1;\r\n                selectedRecord['ncolumn'] = constantvalue;\r\n            } else {\r\n                selectedRecord['nrow'] && delete selectedRecord['nrow'];\r\n                selectedRecord['ncolumn'] && delete selectedRecord['ncolumn']\r\n            }\r\n\r\n        }\r\n        if (!isNaN(constantvalue)) {\r\n            selectedRecord[field] = constantvalue;\r\n          this.props.childDataChange(selectedRecord); \r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>   <Preloader loading={this.state.loading} />\r\n                <Row>\r\n                    <Col md={12}>\r\n                        {this.props.operation === 'update' ?\r\n                            <FormSelectSearch\r\n                                name={\"nsamplestoragecontainerpathcode\"}\r\n                                as={\"select\"}\r\n                                onChange={(event) => this.onComboChange(event, 'nsamplestoragecontainerpathcode')}\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGEPATH\" })}\r\n                                isMandatory={true}\r\n                                value={this.state.selectedRecord[\"nsamplestoragecontainerpathcode\"] ? this.state.selectedRecord[\"nsamplestoragecontainerpathcode\"] || [] : []}\r\n                                options={this.state.selectedRecord[\"storageMappingMapOptions\"]}\r\n                                optionId={\"value\"}\r\n                                optionValue={\"label\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={true}\r\n                                isClearable={false}\r\n                            /> : <FormMultiSelect\r\n                                name={\"nsamplestoragecontainerpathcode\"}\r\n                                label={this.props.intl.formatMessage({ id: \"IDS_SAMPLESTORAGEPATH\" })}\r\n                                options={this.state.selectedRecord.storageMappingMapOptions || []}\r\n                                optionId=\"value\"\r\n                                optionValue=\"label\"\r\n                                value={this.state.selectedRecord[\"nsamplestoragecontainerpathcode\"] ? this.state.selectedRecord[\"nsamplestoragecontainerpathcode\"] || [] : []}\r\n                                isMandatory={true}\r\n                                isClearable={true}\r\n                                disableSearch={this.props.isDisabled}\r\n                                disabled={this.props.isDisabled}\r\n                                closeMenuOnSelect={false}\r\n                                alphabeticalSort={true}\r\n                                onChange={(event) => this.onComboChange(event, \"nsamplestoragecontainerpathcode\")}\r\n                            />}\r\n\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            name={\"nproductcode\"}\r\n                            as={\"select\"}\r\n                            onChange={(event) => this.onComboChange(event, 'nproductcode')}\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_PRODUCT\" })}\r\n                            isMandatory={true}\r\n                            value={this.state.selectedRecord[\"nproductcode\"] ? this.state.selectedRecord[\"nproductcode\"] || [] : []}\r\n                            options={this.state.selectedRecord[\"productOptions\"]}\r\n                            optionId={\"value\"}\r\n                            optionValue={\"label\"}\r\n                            isMulti={false}\r\n                            isDisabled={false}\r\n                            isSearchable={false}\r\n                            isClearable={false}\r\n                        />\r\n                    </Col>\r\n                    <Col md={12}>\r\n                        <FormSelectSearch\r\n                            name={\"nprojecttypecode\"}\r\n                            as={\"select\"}\r\n                            onChange={(event) => this.onComboChange(event, 'nprojecttypecode')}\r\n                            formLabel={this.props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                            isMandatory={false}\r\n                            value={this.state.selectedRecord[\"nprojecttypecode\"] ? this.state.selectedRecord[\"nprojecttypecode\"] || [] : []}\r\n                            options={this.state.selectedRecord[\"projectOptions\"]}\r\n                            optionId={\"value\"}\r\n                            optionValue={\"label\"}\r\n                            isMulti={false}\r\n                            isDisabled={false}\r\n                            isSearchable={false}\r\n                            isClearable={true}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                    <FormInput\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                            name={\"nquantity\"}\r\n                            type=\"numeric\"\r\n                            onChange={(event) => this.onNumericInputChange(event,'nquantity')}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_QUANTITY\" })}\r\n                            value={this.state.selectedRecord[\"nquantity\"] ? this.state.selectedRecord[\"nquantity\"] || [] : []}\r\n                            isMandatory={false}\r\n                           // isDisabled={this.props.selectedRecord[\"nneedposition\"]}\r\n                            required={true}\r\n                            maxLength={\"2\"}\r\n                        />\r\n                    </Col>\r\n                    <Col md={6}>\r\n                            <FormSelectSearch\r\n                                name={\"nunitcode\"}\r\n                                as={\"select\"}\r\n                                onChange={(event) => this.onComboChange(event, 'nunitcode')}\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_UNITNAME\" })}\r\n                                isMandatory={false}\r\n                                value={this.state.selectedRecord[\"nunitcode\"] ? this.state.selectedRecord[\"nunitcode\"] || [] : []}\r\n                                options={this.state.selectedRecord[\"unitOptions\"]}\r\n                                optionId={\"value\"}\r\n                                optionValue={\"label\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={false}\r\n                                isClearable={true}\r\n                            />\r\n                        </Col>\r\n                    <Col md={12}>\r\n                        {/* <FormNumericInput\r\n                            name={\"nnoofcontainer\"}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_NOOFSAMPLECONTAINER\" })}\r\n                            className=\"form-control\"\r\n                            type=\"text\"\r\n                            strict={true}\r\n                            value={this.state.selectedRecord[\"nnoofcontainer\"] ? this.state.selectedRecord[\"nnoofcontainer\"] || [] : []}\r\n                            isMandatory={true}\r\n                            required={true}\r\n                            min={1}\r\n                            max={this.state.selectedRecord[\"nneedposition\"] === true ? this.state.selectedRecord['nnoofcontainer']: 99} \r\n                            isDisabled={this.state.selectedRecord[\"nneedposition\"]}\r\n                            onChange={(event) => this.onNumericInputChange(event, \"nnoofcontainer\")}\r\n                            noStyle={true}\r\n\r\n                        /> */}\r\n                          <FormInput\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_NOOFSAMPLECONTAINER\" })}\r\n                            name={\"nnoofcontainer\"}\r\n                            type=\"numeric\"\r\n                            onChange={(event) => this.onNumericInputChange(event,'nnoofcontainer')}\r\n                            placeholder={this.props.intl.formatMessage({ id: \"IDS_NOOFSAMPLECONTAINER\" })}\r\n                            value={this.state.selectedRecord[\"nnoofcontainer\"] ? this.state.selectedRecord[\"nnoofcontainer\"] || [] : []}\r\n                            isMandatory={false}\r\n                            isDisabled={this.state.selectedRecord[\"nneedposition\"]}\r\n                            required={true}\r\n                            maxLength={this.state.selectedRecord[\"nneedposition\"] === true ? \"\":\"2\"}\r\n                        />\r\n                    </Col>\r\n                    {this.state.selectedRecord[\"nneedposition\"] === true ? <>\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                name={\"ncontainertypecode\"}\r\n                                as={\"select\"}\r\n                                onChange={(event) => this.onComboChange(event, 'ncontainertypecode')}\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_CONTAINERTYPE\" })}\r\n                                isMandatory={true}\r\n                                value={this.state.selectedRecord[\"ncontainertypecode\"] ? this.state.selectedRecord[\"ncontainertypecode\"] || [] : []}\r\n                                options={this.state.selectedRecord[\"containerTypeOptions\"]}\r\n                                optionId={\"value\"}\r\n                                optionValue={\"label\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={false}\r\n                                isClearable={false}\r\n                            />\r\n                        </Col>\r\n\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                name={\"ncontainerstructurecode\"}\r\n                                as={\"select\"}\r\n                                onChange={(event) => this.onComboChange(event, 'ncontainerstructurecode')}\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_CONTAINERSTRUCTURENAME\" })}\r\n                                isMandatory={true}\r\n                                value={this.state.selectedRecord[\"ncontainerstructurecode\"] ? this.state.selectedRecord[\"ncontainerstructurecode\"] || [] : []}\r\n                                options={this.state.selectedRecord[\"containerStructureOptions\"]}\r\n                                optionId={\"value\"}\r\n                                optionValue={\"label\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={false}\r\n                                isClearable={false}\r\n                            />\r\n                        </Col>\r\n                        <Col md={12}>\r\n                            <FormSelectSearch\r\n                                name={\"ndirectionmastercode\"}\r\n                                as={\"select\"}\r\n                                onChange={(event) => this.onComboChange(event, 'ndirectionmastercode')}\r\n                                formLabel={this.props.intl.formatMessage({ id: \"IDS_DIRECTION\" })}\r\n                                isMandatory={true}\r\n                                value={this.state.selectedRecord[\"ndirectionmastercode\"] ? this.state.selectedRecord[\"ndirectionmastercode\"] || [] : []}\r\n                                options={this.state.selectedRecord[\"directionmasterOptions\"]}\r\n                                optionId={\"value\"}\r\n                                optionValue={\"label\"}\r\n                                isMulti={false}\r\n                                isDisabled={false}\r\n                                isSearchable={false}\r\n                                isClearable={false}\r\n                            />\r\n                        </Col> \r\n                    </> : \"\"}\r\n                    <Col >\r\n                            <Row>\r\n                                <Col md={6}>\r\n                                    <FormNumericInput\r\n                                        name={'nrow'}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_ROWS\" })}\r\n                                        className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        strict={true}\r\n                                        value={this.state.selectedRecord['nrow'] ?\r\n                                            this.state.selectedRecord['nrow'] : \"\"}\r\n                                        isDisabled={true}\r\n                                        noStyle={true}\r\n                                    />\r\n                                </Col>\r\n                                <Col md={6}>\r\n                                    <FormNumericInput\r\n                                        name={'ncolumn'}\r\n                                        label={this.props.intl.formatMessage({ id: \"IDS_COLUMNS\" })}\r\n                                        className=\"form-control\"\r\n                                        type=\"text\"\r\n                                        strict={true}\r\n                                        value={this.state.selectedRecord['ncolumn'] ?\r\n                                            this.state.selectedRecord['ncolumn'] : \"\"}\r\n                                        isDisabled={true}\r\n                                        noStyle={true}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    <Col md={12}>\r\n                        <CustomSwitch\r\n                            id={\"nneedposition\"}\r\n                            name={\"nneedposition\"}\r\n                            type={\"switch\"}\r\n                            label={this.props.intl.formatMessage({ id: \"IDS_NEEDPREDEFINEDSTRUCURE\" })}\r\n                            className={\"custom-switch-md\"}\r\n                            checked={this.state.selectedRecord === undefined ? false : this.state.selectedRecord[\"nneedposition\"]}\r\n                            defaultValue={this.state.selectedRecord === undefined ? false : this.state.selectedRecord[\"nneedposition\"]}\r\n                            onChange={this.onInputChange}\r\n\r\n                        />\r\n                    </Col>\r\n\r\n                </Row>\r\n            </>\r\n\r\n        )\r\n    }\r\n\r\n}\r\nexport default injectIntl(AddSampleStorageMapping);"]},"metadata":{},"sourceType":"module"}