{"ast":null,"code":"import React from'react';import{Col,Row}from'react-bootstrap';import{MediaHeader,MediaSubHeader}from'../../components/App.styles';import FormInput from'../../components/form-input/form-input.component';var ResultEntryFormulaForm=function ResultEntryFormulaForm(props){return/*#__PURE__*/React.createElement(Row,null,props.selectedRecord&&props.selectedRecord.parameterData?/*#__PURE__*/React.createElement(Col,{md:12},props.selectedRecord.parameterData.sarno?/*#__PURE__*/React.createElement(MediaHeader,{className:\"labelfont\",style:{color:\"#172b4d\"}},props.selectedRecord.parameterData.sarno):\"\",props.selectedRecord.parameterData.stestsynonym?/*#__PURE__*/React.createElement(MediaHeader,{className:\"labelfont\",style:{color:\"#505f79\"}},\" \",props.selectedRecord.parameterData.stestsynonym,\" \",props.selectedRecord.parameterData.sretestrepeatcount):\"\",props.selectedRecord.parameterData.sparametersynonym?/*#__PURE__*/React.createElement(MediaSubHeader,{className:\"labelfont\",style:{color:\"#97a0af\"}},\" \",props.selectedRecord.parameterData.sparametersynonym):\"\"):\"\",props.DynamicFields.map(function(fields,index){return/*#__PURE__*/React.createElement(Col,{md:\"12\",className:\"mt-4\",key:index},/*#__PURE__*/React.createElement(FormInput,{name:\"dynamicformulafield_\".concat(index),label:fields.sdynamicfieldname,type:\"text\",required:true,isMandatory:true,value:props.selectedRecord.selectedForumulaInput&&props.selectedRecord.selectedForumulaInput.length>0?props.selectedRecord.selectedForumulaInput[index]?props.selectedRecord.selectedForumulaInput[index].svalues:\"\":\"\"//value={props.selectedRecord[\"formulainput\"] ? props.selectedRecord[\"formulainput\"][`dynamicformulafield_${index}`] : \"\"}\n,placeholder:fields.sdynamicfieldname,onChange:function onChange(event){return props.onFormulaInputChange(event,index,fields);},maxLength:9}));}));};export default ResultEntryFormulaForm;","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/ResultEntryBySample/ResultEntryFormulaForm.jsx"],"names":["React","Col","Row","MediaHeader","MediaSubHeader","FormInput","ResultEntryFormulaForm","props","selectedRecord","parameterData","sarno","color","stestsynonym","sretestrepeatcount","sparametersynonym","DynamicFields","map","fields","index","sdynamicfieldname","selectedForumulaInput","length","svalues","event","onFormulaInputChange"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,GAAT,CAAcC,GAAd,KAAyB,iBAAzB,CACA,OAASC,WAAT,CAAsBC,cAAtB,KAA4C,6BAA5C,CACA,MAAOC,CAAAA,SAAP,KAAsB,kDAAtB,CAEA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,KAAD,CAAW,CAEtC,mBACI,oBAAC,GAAD,MACKA,KAAK,CAACC,cAAN,EAAwBD,KAAK,CAACC,cAAN,CAAqBC,aAA7C,cACG,oBAAC,GAAD,EAAK,EAAE,CAAE,EAAT,EACKF,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCC,KAAnC,cACG,oBAAC,WAAD,EAAa,SAAS,YAAtB,CAAqC,KAAK,CAAE,CAAEC,KAAK,CAAE,SAAT,CAA5C,EACKJ,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCC,KADxC,CADH,CAIK,EALV,CAMKH,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCG,YAAnC,cACG,oBAAC,WAAD,EAAa,SAAS,YAAtB,CAAqC,KAAK,CAAE,CAAED,KAAK,CAAE,SAAT,CAA5C,MACYJ,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCG,YAD/C,KAC8DL,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCI,kBADjG,CADH,CAIK,EAVV,CAWKN,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCK,iBAAnC,cACG,oBAAC,cAAD,EAAgB,SAAS,YAAzB,CAAwC,KAAK,CAAE,CAAEH,KAAK,CAAE,SAAT,CAA/C,MACYJ,KAAK,CAACC,cAAN,CAAqBC,aAArB,CAAmCK,iBAD/C,CADH,CAIK,EAfV,CADH,CAkBK,EAnBV,CAoBKP,KAAK,CAACQ,aAAN,CAAoBC,GAApB,CAAwB,SAACC,MAAD,CAASC,KAAT,qBACrB,oBAAC,GAAD,EAAK,EAAE,CAAC,IAAR,CAAa,SAAS,CAAC,MAAvB,CAA8B,GAAG,CAAEA,KAAnC,eACI,oBAAC,SAAD,EACI,IAAI,+BAAyBA,KAAzB,CADR,CAEI,KAAK,CAAED,MAAM,CAACE,iBAFlB,CAGI,IAAI,CAAC,MAHT,CAII,QAAQ,CAAE,IAJd,CAKI,WAAW,CAAE,IALjB,CAMI,KAAK,CAAEZ,KAAK,CAACC,cAAN,CAAqBY,qBAArB,EAA8Cb,KAAK,CAACC,cAAN,CAAqBY,qBAArB,CAA2CC,MAA3C,CAAoD,CAAlG,CACHd,KAAK,CAACC,cAAN,CAAqBY,qBAArB,CAA2CF,KAA3C,EAAoDX,KAAK,CAACC,cAAN,CAAqBY,qBAArB,CAA2CF,KAA3C,EAAkDI,OAAtG,CAAgH,EAD7G,CACkH,EACzH;AARJ,CASI,WAAW,CAAEL,MAAM,CAACE,iBATxB,CAUI,QAAQ,CAAE,kBAACI,KAAD,QAAWhB,CAAAA,KAAK,CAACiB,oBAAN,CAA2BD,KAA3B,CAAkCL,KAAlC,CAAyCD,MAAzC,CAAX,EAVd,CAWI,SAAS,CAAE,CAXf,EADJ,CADqB,EAAxB,CApBL,CADJ,CAyCH,CA3CD,CA8CA,cAAeX,CAAAA,sBAAf","sourcesContent":["import React from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { MediaHeader, MediaSubHeader } from '../../components/App.styles';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\n\r\nconst ResultEntryFormulaForm = (props) => {\r\n\r\n    return (\r\n        <Row>\r\n            {props.selectedRecord && props.selectedRecord.parameterData ?\r\n                <Col md={12}>\r\n                    {props.selectedRecord.parameterData.sarno ?\r\n                        <MediaHeader className={`labelfont`} style={{ color: \"#172b4d\" }}>\r\n                            {props.selectedRecord.parameterData.sarno}\r\n                        </MediaHeader>\r\n                        : \"\"}\r\n                    {props.selectedRecord.parameterData.stestsynonym ?\r\n                        <MediaHeader className={`labelfont`} style={{ color: \"#505f79\" }}>\r\n                            { }{ } {props.selectedRecord.parameterData.stestsynonym} {props.selectedRecord.parameterData.sretestrepeatcount}\r\n                        </MediaHeader>\r\n                        : \"\"}\r\n                    {props.selectedRecord.parameterData.sparametersynonym ?\r\n                        <MediaSubHeader className={`labelfont`} style={{ color: \"#97a0af\" }}>\r\n                            { }{ } {props.selectedRecord.parameterData.sparametersynonym}{ }{ }\r\n                        </MediaSubHeader>\r\n                        : \"\"}\r\n                </Col>\r\n                : \"\"}\r\n            {props.DynamicFields.map((fields, index) =>\r\n                <Col md=\"12\" className=\"mt-4\" key={index}>\r\n                    <FormInput\r\n                        name={`dynamicformulafield_${index}`}\r\n                        label={fields.sdynamicfieldname}\r\n                        type=\"text\"\r\n                        required={true}\r\n                        isMandatory={true}\r\n                        value={props.selectedRecord.selectedForumulaInput && props.selectedRecord.selectedForumulaInput.length > 0 ?\r\n                            props.selectedRecord.selectedForumulaInput[index] ? props.selectedRecord.selectedForumulaInput[index].svalues : \"\" : \"\"}\r\n                        //value={props.selectedRecord[\"formulainput\"] ? props.selectedRecord[\"formulainput\"][`dynamicformulafield_${index}`] : \"\"}\r\n                        placeholder={fields.sdynamicfieldname}\r\n                        onChange={(event) => props.onFormulaInputChange(event, index, fields)}\r\n                        maxLength={9}\r\n                    />\r\n                </Col>\r\n            )\r\n            }\r\n        </Row>\r\n    )\r\n}\r\n\r\n\r\nexport default ResultEntryFormulaForm;"]},"metadata":{},"sourceType":"module"}