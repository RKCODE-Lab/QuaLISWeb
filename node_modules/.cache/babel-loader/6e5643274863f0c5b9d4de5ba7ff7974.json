{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\flextransaction\\\\FlexTransaction.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col, Button, Card } from 'react-bootstrap';\nimport { callService, filterTransactionList, getTransactionDetail, getFilterTransactionDetailsRecords, updateStore, ViewTransactionDetails, getexportdata, viewFlextTransactionReport } from '../../actions';\nimport { constructOptionList, convertDateValuetoString, getControlMap, rearrangeDateFormat, getStartOfDay, getEndOfDay } from '../../components/CommonScript';\nimport FlexTransactionFilter from './FlexTransactionFilter';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport SplitterLayout from 'react-splitter-layout';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { ContentPanel } from '../../components/App.styles';\nimport TransactionListMaster from '../../components/TransactionListMaster';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\nimport { ProductList } from '../product/product.styled';\nimport { process } from '@progress/kendo-data-query';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { toast } from 'react-toastify';\n\nclass FlexTransaction extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        this.setState({\n          dataResult: process(this.props.Login.masterData.TransactionDetails || [], event.dataState),\n          dataStateAll: event.dataState,\n          kendoSkip: event.dataState.skip,\n          kendoTake: event.dataState.skip\n        });\n      } else {\n        let data = [];\n\n        if (event.dataState.filter === null && event.dataState.sort === null) {\n          let auditdata = this.props.Login.masterData.TransactionDetails && this.props.Login.masterData.TransactionDetails.slice(0, event.dataState.take + event.dataState.skip) || [];\n          data = process(auditdata || [], event.dataState);\n        } else {\n          data = process(this.props.Login.masterData.TransactionDetails || [], event.dataState);\n        }\n\n        this.setState({\n          dataResult: data,\n          dataState: event.dataState\n        });\n      }\n    };\n\n    this.viewSelectedReport = (filedata, ncontrolCode) => {\n      const inputParam = {\n        inputData: {\n          ssystemfilename: filedata.sreportrefno + '.pdf',\n          releasedcoareport: filedata.inputData,\n          userinfo: this.props.Login.userInfo,\n          ncontrolCode: ncontrolCode\n        },\n        classUrl: \"flextransaction\",\n        operation: \"view\",\n        methodUrl: \"FlextTransactionReport\"\n      };\n      this.props.viewFlextTransactionReport(inputParam);\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.dataStateAuditView = event => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          viewTransDetailsDataState: event.dataState\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let openModal = this.props.Login.openModal;\n      openModal = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          viewTransDetailsDataState: {\n            skip: 0,\n            take: 50\n          },\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.ViewTransactionDetails = details => {\n      const screenName = this.props.intl.formatMessage({\n        id: 'IDS_TRANSACTIONVIEWDETAILS'\n      });\n      this.props.ViewTransactionDetails(this.props.Login.masterData, this.props.Login.userInfo, details, screenName);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"ntransfiltercode\" || fieldName === \"nauditactionfiltercode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n      } else {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.expandChange = event => {\n      event.dataItem[event.target.props.expandField] = event.value;\n      this.setState({\n        dataResult: process(this.props.Login.masterData.TransactionDetails || [], this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState),\n        dataState: this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState\n      });\n    };\n\n    this.exportExcelNew = () => {\n      if (this.props.Login.masterData && this.props.Login.masterData.TransactionDetails.length > 0) {\n        let fromDate = this.props.Login.masterData.FromDate;\n        let toDate = this.props.Login.masterData.ToDate;\n        let dataField = {};\n        [...this.extractedColumnList].map(item => {\n          dataField[item.dataField] = this.props.intl.formatMessage({\n            id: item.idsName\n          });\n        });\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n        let inputData = {\n          fromDate: obj.fromDate,\n          toDate: obj.toDate,\n          viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\n          userinfo: this.props.Login.userInfo,\n          sregistereddate: this.props.Login.masterData.SelectedTransactionDate && this.props.Login.masterData.SelectedTransactionDate.sregistereddate,\n          nformcode: this.props.Login.userInfo.nformcode,\n          dataField\n        };\n        let inputParam = {\n          inputData\n        };\n        this.props.getexportdata(inputParam);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_NODATATOEXPORT\"\n        }));\n      }\n    };\n\n    this.onFilterSubmit = () => {\n      let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let validateFromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      let validateToDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let breadCrumbTransaDetails = this.state.selectedRecord['ntransfiltercode'];\n      let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode'];\n      const diffInMilliseconds = Math.abs(validateToDate - validateFromDate);\n      const days = Math.ceil(diffInMilliseconds / (1000 * 60 * 60 * 24));\n      const diffYear = validateToDate.getFullYear() - validateFromDate.getFullYear();\n      const diffMonth = validateToDate.getMonth() - validateFromDate.getMonth();\n      const monthss = diffYear * 12 + diffMonth;\n\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"].value !== 1 || this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 && monthss <= 12 && (days <= 365 || days <= 366)) {\n        let masterData = { ...this.props.Login.masterData,\n          breadCrumbFrom,\n          breadCrumbTo,\n          breadCrumbTransaDetails,\n          breadCrumbViewType\n        };\n        let fromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : this.props.Login.masterData.FromDate;\n        let toDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : this.props.Login.masterData.ToDate;\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n        let inputData = {\n          fromDate: obj.fromDate,\n          toDate: obj.toDate,\n          transFilterType: this.state.selectedRecord[\"ntransfiltercode\"] ? this.state.selectedRecord[\"ntransfiltercode\"].value : 0,\n          viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\n          userinfo: this.props.Login.userInfo,\n          postParamList: this.filterParam\n        };\n        let inputParam = {\n          masterData,\n          inputData,\n          searchRef: this.searchRef,\n          detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\n        };\n        this.props.getFilterTransactionDetailsRecords(inputParam);\n      } else {\n        let selectedRecord = this.state.selectedRecord;\n        selectedRecord['fromdate'] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n        selectedRecord['toDate'] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n        selectedRecord['nauditactionfiltercode'] = this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType : {\n          item: this.props.Login.masterData.viewFilterType,\n          label: this.props.Login.masterData.viewFilterType.sauditactionfiltername,\n          value: this.props.Login.masterData.viewFilterType.nauditactionfiltercode\n        };\n        selectedRecord['ntransfiltercode'] = this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails : {\n          item: this.props.Login.masterData.transFilterType,\n          label: this.props.Login.masterData.transFilterType.sdisplayname,\n          value: this.props.Login.masterData.transFilterType.ntransfiltertypecode\n        };\n        this.setState({\n          selectedRecord\n        });\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_DATERANGESHOULDEMAXONEYEAR\"\n        }));\n      }\n    };\n\n    this.onReload = () => {\n      let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n      let breadCrumbTransaDetails = this.state.selectedRecord['ntransfiltercode'];\n      let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode'];\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      let inputData = {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        transFilterType: this.state.selectedRecord[\"ntransfiltercode\"] ? this.state.selectedRecord[\"ntransfiltercode\"].value : 0,\n        viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\n        userinfo: this.props.Login.userInfo,\n        postParamList: this.filterParam\n      };\n      let masterData = { ...this.props.Login.masterData,\n        breadCrumbFrom,\n        breadCrumbTo,\n        breadCrumbTransaDetails,\n        breadCrumbViewType\n      };\n      let inputParam = {\n        masterData,\n        inputData,\n        searchRef: this.searchRef,\n        detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\n      };\n      this.props.getFilterTransactionDetailsRecords(inputParam);\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.paneSizeChange = eve => {\n      this.setState({\n        splitChangeWidthPercentage: eve\n      });\n    };\n\n    this.breadcrumbList = () => {\n      let breadCrumbArray = [];\n      let fromDate = this.props.Login.masterData.FromDate ? this.props.Login.masterData.FromDate : this.props.Login.masterData.breadCrumbFrom;\n      let toDate = this.props.Login.masterData.ToDate ? this.props.Login.masterData.ToDate : this.props.Login.masterData.breadCrumbTo;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      breadCrumbArray.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      }); // breadCrumbArray.push(\n      //     {\n      //         \"label\": \"IDS_RECORDTODISPLAY\",\n      //         \"value\": this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.label :\n      //             this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.sdisplayname : \"\"\n      //     });\n\n      breadCrumbArray.push({\n        \"label\": \"IDS_VIEWPERIOD\",\n        \"value\": this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.label : this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.sauditactionfiltername : \"\"\n      });\n      return breadCrumbArray;\n    };\n\n    this.myRef = React.createRef();\n    this.searchFieldList = [\"sregisteredtransactiondate\"];\n    this.searchTransactionRef = React.createRef();\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5\n    };\n    const dataStateAll = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5\n    };\n    this.state = {\n      viewTransDetailsDataState: {\n        skip: 0,\n        take: 10\n      },\n      splitChangeWidthPercentage: 30,\n      dataState: dataState,\n      dataStateAll: dataStateAll,\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      kendoSkip: 0,\n      kendoTake: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\n      controlMap: new Map(),\n      userRoleControlRights: [],\n      gridHeight: 'auto'\n    };\n    this.searchRef = React.createRef();\n  }\n\n  render() {\n    // const ViewTransactionDetails = this.state.controlMap.has(\"ViewTansactionDetails\") && this.state.controlMap.get(\"ViewTansactionDetails\").ncontrolcode;\n    const DownloadReport = this.state.controlMap.has(\"DownloadReport\") && this.state.controlMap.get(\"DownloadReport\").ncontrolcode;\n    this.breadCrumbData = this.breadcrumbList();\n    let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let fromDate = \"\";\n    let toDate = \"\";\n\n    if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\n      fromDate = this.state.selectedRecord && this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\n      toDate = this.state.selectedRecord && this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"]) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\n    }\n\n    let inputParam = {\n      masterData: this.props.Login.masterData,\n      userinfo: this.props.Login.userInfo,\n      skip: this.state.skip,\n      take: this.state.take,\n      fromDate: obj.fromDate,\n      toDate: obj.toDate,\n      viewTypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value : this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.nauditactionfiltercode : 0,\n      transFilterType: this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.value : this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.ntransdetailsfiltercode : 0\n    };\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_LABREGNO\",\n      \"dataField\": \"slabregno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_LAB\",\n      \"dataField\": \"slabname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_EXTERNALREFNO\",\n      \"dataField\": \"sexternalrefcode\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PLANT\",\n      \"dataField\": \"splantname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PLANTCODE\",\n      \"dataField\": \"nplantcode\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_LABREGDATE\",\n      \"dataField\": \"sregistereddate\",\n      \"width\": \"200px\",\n      \"componentName\": \"date\"\n    }, {\n      \"idsName\": \"IDS_SAMPLE\",\n      \"dataField\": \"ssamplename\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEID\",\n      \"dataField\": \"nsampid\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_BATCHNO\",\n      \"dataField\": \"sbatchno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_LOTNO\",\n      \"dataField\": \"slotno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_BILLETNO\",\n      \"dataField\": \"sbilletno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_HEATNO\",\n      \"dataField\": \"sheatno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_INGOTNO\",\n      \"dataField\": \"singotno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_CLIENTCODE\",\n      \"dataField\": \"sclientcode\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SECTIONNAME\",\n      \"dataField\": \"ssectionname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"stestname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_PARAMETER\",\n      \"dataField\": \"sparametername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RESULTVALUE\",\n      \"dataField\": \"sfinal\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_RESULTSTATUS\",\n      \"dataField\": \"resultstatus\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REPORTNO\",\n      \"dataField\": \"nreportno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_REPORTREGNO\",\n      \"dataField\": \"sreportrefno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAY\",\n      \"dataField\": \"sdisplaystatus\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_STATUS\",\n      \"dataField\": \"sstatus\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SITENAME\",\n      \"dataField\": \"ssitename\",\n      \"width\": \"200px\"\n    }];\n    this.feildsForGrid = [{\n      \"idsName\": \"IDS_FIELDNAME\",\n      \"dataField\": \"sfieldname\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_VALUE\",\n      \"dataField\": \"svalue\",\n      \"width\": \"100px\"\n    }];\n    this.filterParam = {\n      inputListName: \"TransactionDate\",\n      selectedObject: \"SelectedTransactionDate\",\n      primaryKeyField: \"sregistereddate\",\n      fetchUrl: \"flextransaction/getTrendChartDate\",\n      masterData: this.props.Login.masterData,\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        viewTypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value : this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.nauditactionfiltercode : 0,\n        transFilterType: this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.value : this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.ntransdetailsfiltercode : 0\n      },\n      filteredListName: \"searchedTransactionDate\",\n      clearFilter: \"no\",\n      updatedListname: \"SelectedTransactionDate\",\n      searchRef: this.searchTransactionRef,\n      searchFieldList: this.searchFieldList,\n      unchangeList: [\"viewFilterTypeList\", \"transFilterTypeList\"],\n      changeList: [\"TransactionDetails\"]\n    };\n    this.postParamList = [{\n      filteredListName: \"searchedTransactionDate\",\n      clearFilter: \"no\",\n      searchRef: this.searchRef,\n      primaryKeyField: \"sregistereddate\",\n      fetchUrl: \"audittrail/getFilterTransactionDetailsRecords\",\n      fecthInputObject: this.filterParam,\n      selectedObject: \"SelectedTransactionDate\",\n      inputListName: \"TransactionDate\",\n      updatedListname: \"SelectedTransactionDate\",\n      unchangeList: [\"viewFilterTypeList\", \"transFilterTypeList\"]\n    }];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mtop-fixed-breadcrumb client-listing-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"parent-port-height sticky_head_parent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(SplitterLayout, {\n      borderColor: \"#999\",\n      primaryIndex: 1,\n      percentage: true,\n      secondaryInitialSize: this.state.splitChangeWidthPercentage,\n      onSecondaryPaneSizeChange: this.paneSizeChange,\n      primaryMinSize: 40,\n      secondaryMinSize: 20,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(TransactionListMaster, {\n      splitChangeWidthPercentage: this.state.splitChangeWidthPercentage,\n      masterList: this.props.Login.masterData.searchedTransactionDetails || this.props.Login.masterData.TransactionDate || [],\n      selectedMaster: [this.props.Login.masterData.SelectedTransactionDate],\n      primaryKeyField: \"sregistereddate\",\n      inputParam: inputParam,\n      mainField: \"sregisteredtransactiondate\",\n      selectedListName: \"SelectedTransactionDate\",\n      filterColumnData: this.props.filterTransactionList,\n      getMasterDetail: this.props.getTransactionDetail,\n      searchListName: \"searchedTransactionDetails\",\n      searchRef: this.searchRef,\n      filterParam: this.filterParam,\n      objectName: \"transactionDetails\",\n      listName: \"IDS_TRANSACTIONDETAILS\",\n      showFilter: this.props.Login.showFilter,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      handlePageChange: this.handlePageChange,\n      skip: this.state.skip,\n      take: this.state.take,\n      needFilter: true,\n      needAccordianFilter: false,\n      filterComponent: [{\n        \"IDS_TRANSACTIONDETAILS\": /*#__PURE__*/React.createElement(FlexTransactionFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          filterViewType: this.state.viewFilterTypeList,\n          transfilterViewType: this.state.transFilterTypeList,\n          handleDateChange: this.handleDateChange,\n          fromDate: fromDate,\n          toDate: toDate,\n          userInfo: this.props.Login.userInfo,\n          onComboChange: this.onComboChange,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 49\n          }\n        })\n      }],\n      commonActions: /*#__PURE__*/React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        onClick: () => this.onReload(),\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 49\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.myRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap padding-class\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(DataGrid, {\n      selectedId: this.props.Login.selectedId,\n      gridHeight: this.state.gridHeight + 'px',\n      expandField: \"expanded\",\n      userRoleControlRights: this.state.userRoleControlRights && this.state.userRoleControlRights,\n      pageable: true,\n      pageSizes: this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting)),\n      scrollable: \"scrollable\",\n      primaryKeyField: \"ntransactionsampleresultno\",\n      data: this.props.Login.masterData.TransactionDetails || [],\n      dataResult: this.state.dataResult,\n      dataState: this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll : this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList || [],\n      controlMap: this.state.controlMap //methodUrl=\"Report\"\n      ,\n      groupable: this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? true : false : false //isActionRequired={false}\n      ,\n      isToolBarRequired: true,\n      isAddRequired: false,\n      isRefreshRequired: false,\n      isDownloadPDFRequired: false,\n      isDownloadExcelRequired: true,\n      isExportExcelRequired: true,\n      isIdsField: \"yes\",\n      isActionRequired: true,\n      actionIcons: [{\n        title: this.props.intl.formatMessage({\n          id: \"IDS_DOWNLOADFILE\"\n        }),\n        controlname: \"faCloudDownloadAlt\",\n        objectName: \"DownloadReport\",\n        hidden: this.state.userRoleControlRights.indexOf(DownloadReport) === -1,\n        onClick: TransactionDetails => this.viewSelectedReport(TransactionDetails, DownloadReport)\n      }],\n      exportExcelNew: this.exportExcelNew,\n      onExpandChange: this.expandChange,\n      hideDetailBand: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 57\n      }\n    })))))))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      hideSave: true,\n      addComponent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataGrid, {\n        primaryKeyField: \"ntransactionsampleresultno\",\n        detailedFieldList: this.feildsForGrid,\n        extractedColumnList: this.feildsForGrid,\n        dataResult: this.props.Login.masterData[\"ViewTransactionDetails\"] && this.props.Login.masterData[\"ViewTransactionDetails\"].length > 0 && process(this.props.Login.masterData[\"ViewTransactionDetails\"], this.props.Login.viewTransDetailsDataState ? this.props.Login.viewTransDetailsDataState : {\n          skip: 0,\n          take: 50\n        }),\n        dataState: this.props.Login.screenName === undefined || this.props.Login.screenName === this.props.intl.formatMessage({\n          id: 'IDS_TRANSACTIONVIEWDETAILS'\n        }) ? this.props.Login.viewTransDetailsDataState ? this.props.Login.viewTransDetailsDataState : {\n          skip: 0,\n          take: 50\n        } : {\n          skip: 0,\n          take: 50\n        },\n        dataStateChange: event => this.dataStateAuditView(event),\n        controlMap: this.state.controlMap,\n        userRoleControlRights: this.state.userRoleControlRights,\n        pageable: true,\n        pageSizes: this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting)),\n        scrollable: 'scrollable',\n        gridHeight: '600px',\n        hideColumnFilter: true,\n        selectedId: 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 33\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidMount() {\n    if (this.myRef.current.offsetParent.clientHeight !== this.state.gridHeight) {\n      this.setState({\n        gridHeight: this.myRef.current.offsetParent.clientHeight\n      });\n    }\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      selectedRecord,\n      viewFilterTypeList,\n      dataStateAll,\n      dataState,\n      dataResult,\n      skip,\n      take,\n      transFilterTypeList\n    } = this.state;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      updateState = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.masterData.viewFilterType !== previousProps.Login.masterData.viewFilterType) {\n      updateState = true;\n      const viewTypeAMap = constructOptionList(this.props.Login.masterData.viewFilterTypeList || [], \"nauditactionfiltercode\", \"sauditactionfiltername\", \"nsorter\", \"ascending\", false);\n      const viewFilterTypeLists = viewTypeAMap.get(\"OptionList\");\n      viewFilterTypeList = viewFilterTypeLists;\n      selectedRecord = {\n        nauditactionfiltercode: viewFilterTypeLists.length > 0 ? {\n          \"value\": viewFilterTypeLists[0].item.nauditactionfiltercode,\n          \"label\": viewFilterTypeLists[0].item.sauditactionfiltername\n        } : this.state.selectedRecord[\"nauditactionfiltercode\"]\n      };\n    }\n\n    if (this.props.Login.masterData.transFilterTypeList !== previousProps.Login.masterData.transFilterTypeList) {\n      updateState = true;\n      const transTypeAMap = constructOptionList(this.props.Login.masterData.transFilterTypeList || [], \"ntransdetailsfiltercode\", \"sdisplayname\", \"nsorter\", \"ascending\", false);\n      const transFilterTypeLists = transTypeAMap.get(\"OptionList\");\n      transFilterTypeList = transFilterTypeLists;\n      selectedRecord = { ...selectedRecord,\n        ntransfiltercode: transFilterTypeLists.length > 0 ? {\n          \"value\": transFilterTypeLists[0].item.ntransdetailsfiltercode,\n          \"label\": transFilterTypeLists[0].item.sdisplayname\n        } : this.state.selectedRecord[\"ntransfiltercode\"]\n      };\n    }\n\n    if (this.props.Login.resetDataGridPage && this.props.Login.resetDataGridPage !== previousProps.Login.resetDataGridPage) {\n      if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        dataStateAll.skip = 0;\n        updateState = true;\n      } else {\n        dataState.skip = 0;\n        updateState = true;\n      }\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      updateState = true;\n\n      if (this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\n        dataStateAll = {\n          skip: 0,\n          take: dataStateAll.take\n        };\n        updateState = true;\n      } else {\n        dataState = {\n          skip: 0,\n          take: dataState.take\n        };\n        updateState = true;\n      }\n\n      const transactionDetailsDate = this.props.Login.masterData.TransactionDetails && this.props.Login.masterData.TransactionDetails.slice(dataState.skip, this.props.Login.masterData.TransactionDetails.length) || [];\n      dataResult = process(transactionDetailsDate || [], dataState);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      updateState = true;\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRights\n      });\n    }\n\n    if (updateState) {\n      this.setState({\n        selectedRecord,\n        viewFilterTypeList,\n        dataStateAll,\n        dataState,\n        dataResult,\n        skip,\n        take,\n        transFilterTypeList\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  filterTransactionList,\n  getTransactionDetail,\n  getFilterTransactionDetailsRecords,\n  updateStore,\n  ViewTransactionDetails,\n  getexportdata,\n  viewFlextTransactionReport\n})(injectIntl(FlexTransaction));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-512/QuaLISWeb/src/pages/flextransaction/FlexTransaction.jsx"],"names":["React","connect","injectIntl","Row","Col","Button","Card","callService","filterTransactionList","getTransactionDetail","getFilterTransactionDetailsRecords","updateStore","ViewTransactionDetails","getexportdata","viewFlextTransactionReport","constructOptionList","convertDateValuetoString","getControlMap","rearrangeDateFormat","getStartOfDay","getEndOfDay","FlexTransactionFilter","BreadcrumbComponent","SplitterLayout","DataGrid","SlideOutModal","PerfectScrollbar","ContentPanel","TransactionListMaster","ProductList","process","DEFAULT_RETURN","toast","FlexTransaction","Component","constructor","props","dataStateChange","event","state","selectedRecord","value","setState","dataResult","Login","masterData","TransactionDetails","dataState","dataStateAll","kendoSkip","skip","kendoTake","data","filter","sort","auditdata","slice","take","viewSelectedReport","filedata","ncontrolCode","inputParam","inputData","ssystemfilename","sreportrefno","releasedcoareport","userinfo","userInfo","classUrl","operation","methodUrl","handlePageChange","e","dataStateAuditView","updateInfo","typeName","viewTransDetailsDataState","closeModal","openModal","selectedId","details","screenName","intl","formatMessage","id","onComboChange","comboData","fieldName","expandChange","dataItem","target","expandField","exportExcelNew","length","fromDate","FromDate","toDate","ToDate","dataField","extractedColumnList","map","item","idsName","obj","viewtypecode","sregistereddate","SelectedTransactionDate","nformcode","info","onFilterSubmit","breadCrumbFrom","breadCrumbTo","validateFromDate","validateToDate","breadCrumbTransaDetails","breadCrumbViewType","diffInMilliseconds","Math","abs","days","ceil","diffYear","getFullYear","diffMonth","getMonth","monthss","transFilterType","postParamList","filterParam","searchRef","detailSkip","viewFilterType","label","sauditactionfiltername","nauditactionfiltercode","sdisplayname","ntransfiltertypecode","warn","onReload","handleDateChange","dateName","dateValue","paneSizeChange","eve","splitChangeWidthPercentage","breadcrumbList","breadCrumbArray","push","breadCrumbto","myRef","createRef","searchFieldList","searchTransactionRef","settings","parseInt","controlMap","Map","userRoleControlRights","gridHeight","render","DownloadReport","has","get","ncontrolcode","breadCrumbData","viewTypecode","ntransdetailsfiltercode","feildsForGrid","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","filteredListName","clearFilter","updatedListname","unchangeList","changeList","searchedTransactionDetails","TransactionDate","showFilter","openFilter","closeFilter","viewFilterTypeList","transFilterTypeList","split","setting","title","controlname","objectName","hidden","indexOf","onClick","undefined","componentDidMount","current","offsetParent","clientHeight","componentDidUpdate","previousProps","updateState","viewTypeAMap","viewFilterTypeLists","transTypeAMap","transFilterTypeLists","ntransfiltercode","resetDataGridPage","transactionDetailsDate","Object","values","ControlRights","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col, Button, Card } from 'react-bootstrap';\r\nimport { callService, filterTransactionList, getTransactionDetail, getFilterTransactionDetailsRecords, updateStore, ViewTransactionDetails, getexportdata,viewFlextTransactionReport } from '../../actions';\r\nimport { constructOptionList, convertDateValuetoString, getControlMap, rearrangeDateFormat, getStartOfDay, getEndOfDay } from '../../components/CommonScript';\r\nimport FlexTransactionFilter from './FlexTransactionFilter';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { ContentPanel } from '../../components/App.styles';\r\nimport TransactionListMaster from '../../components/TransactionListMaster';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\nimport { ProductList } from '../product/product.styled';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { toast } from 'react-toastify';\r\n\r\nclass FlexTransaction extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.myRef = React.createRef();\r\n        this.searchFieldList = [\"sregisteredtransactiondate\"]\r\n        this.searchTransactionRef = React.createRef();\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\r\n        };\r\n        const dataStateAll = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5\r\n        };\r\n\r\n        this.state = {\r\n            viewTransDetailsDataState: { skip: 0, take: 10 },\r\n            splitChangeWidthPercentage: 30,\r\n            dataState: dataState,\r\n            dataStateAll: dataStateAll,\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            kendoSkip: 0,\r\n            kendoTake: this.props.Login.settings ? parseInt(this.props.Login.settings[16]) : 5,\r\n            controlMap: new Map(),\r\n            userRoleControlRights: [],\r\n            gridHeight: 'auto',\r\n        }\r\n        this.searchRef = React.createRef();\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n            this.setState({\r\n                dataResult: process(this.props.Login.masterData.TransactionDetails || [], event.dataState),\r\n                dataStateAll: event.dataState, kendoSkip: event.dataState.skip, kendoTake: event.dataState.skip\r\n            });\r\n        }\r\n        else {\r\n            let data = [];\r\n            if (event.dataState.filter === null && event.dataState.sort === null) {\r\n                let auditdata = (this.props.Login.masterData.TransactionDetails &&\r\n                    this.props.Login.masterData.TransactionDetails.slice(0,\r\n                        event.dataState.take + event.dataState.skip)) || []\r\n                data = process(auditdata || [], event.dataState)\r\n            } else {\r\n\r\n                data = process(this.props.Login.masterData.TransactionDetails || [], event.dataState)\r\n\r\n            }\r\n            this.setState({\r\n                dataResult: data,\r\n                dataState: event.dataState,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n       // const ViewTransactionDetails = this.state.controlMap.has(\"ViewTansactionDetails\") && this.state.controlMap.get(\"ViewTansactionDetails\").ncontrolcode;\r\n        const DownloadReport = this.state.controlMap.has(\"DownloadReport\") && this.state.controlMap.get(\"DownloadReport\").ncontrolcode;\r\n        this.breadCrumbData = this.breadcrumbList();\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n            this.props.Login.masterData.ToDate,\r\n            this.props.Login.userInfo);\r\n        let fromDate = \"\";\r\n        let toDate = \"\";\r\n\r\n        if (this.props.Login.masterData && this.props.Login.masterData.FromDate) {\r\n            fromDate = (this.state.selectedRecord && this.state.selectedRecord[\"fromdate\"] && getStartOfDay(this.state.selectedRecord[\"fromdate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n            toDate = (this.state.selectedRecord && this.state.selectedRecord[\"todate\"] && getEndOfDay(this.state.selectedRecord[\"todate\"])) || rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        }\r\n        let inputParam = {\r\n            masterData: this.props.Login.masterData,\r\n            userinfo: this.props.Login.userInfo,\r\n            skip: this.state.skip,\r\n            take: this.state.take,\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            viewTypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value :\r\n                this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.nauditactionfiltercode : 0,\r\n            transFilterType: this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.value :\r\n                this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.ntransdetailsfiltercode : 0,\r\n        }\r\n        this.extractedColumnList = [\r\n\r\n            { \"idsName\": \"IDS_LABREGNO\", \"dataField\": \"slabregno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_LAB\", \"dataField\": \"slabname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_EXTERNALREFNO\", \"dataField\": \"sexternalrefcode\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PLANT\", \"dataField\": \"splantname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PLANTCODE\", \"dataField\": \"nplantcode\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_LABREGDATE\", \"dataField\": \"sregistereddate\", \"width\": \"200px\", \"componentName\": \"date\" },\r\n            { \"idsName\": \"IDS_SAMPLE\", \"dataField\": \"ssamplename\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SAMPLEID\", \"dataField\": \"nsampid\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_BATCHNO\", \"dataField\": \"sbatchno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_LOTNO\", \"dataField\": \"slotno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_BILLETNO\", \"dataField\": \"sbilletno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_HEATNO\", \"dataField\": \"sheatno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_INGOTNO\", \"dataField\": \"singotno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_CLIENTCODE\", \"dataField\": \"sclientcode\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SECTIONNAME\", \"dataField\": \"ssectionname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestname\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_PARAMETER\", \"dataField\": \"sparametername\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_RESULTVALUE\", \"dataField\": \"sfinal\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_RESULTSTATUS\", \"dataField\": \"resultstatus\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_REPORTNO\", \"dataField\": \"nreportno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_REPORTREGNO\", \"dataField\": \"sreportrefno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAY\", \"dataField\": \"sdisplaystatus\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_STATUS\", \"dataField\": \"sstatus\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SITENAME\", \"dataField\": \"ssitename\", \"width\": \"200px\" },\r\n        ]\r\n\r\n        this.feildsForGrid =\r\n            [\r\n                { \"idsName\": \"IDS_FIELDNAME\", \"dataField\": \"sfieldname\", \"width\": \"200px\" },\r\n                { \"idsName\": \"IDS_VALUE\", \"dataField\": \"svalue\", \"width\": \"100px\" }\r\n            ];\r\n        this.filterParam = {\r\n            inputListName: \"TransactionDate\", selectedObject: \"SelectedTransactionDate\", primaryKeyField: \"sregistereddate\",\r\n            fetchUrl: \"flextransaction/getTrendChartDate\", masterData: this.props.Login.masterData,\r\n\r\n            fecthInputObject: {\r\n                userinfo: this.props.Login.userInfo,\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                viewTypecode: this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.value :\r\n                    this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.nauditactionfiltercode : 0,\r\n                transFilterType: this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.value :\r\n                    this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.ntransdetailsfiltercode : 0,\r\n\r\n\r\n            },\r\n            filteredListName: \"searchedTransactionDate\",\r\n            clearFilter: \"no\",\r\n            updatedListname: \"SelectedTransactionDate\",\r\n            searchRef: this.searchTransactionRef,\r\n            searchFieldList: this.searchFieldList,\r\n            unchangeList: [\"viewFilterTypeList\", \"transFilterTypeList\"],\r\n            changeList: [\"TransactionDetails\"]\r\n\r\n        };\r\n\r\n        this.postParamList = [\r\n            {\r\n                filteredListName: \"searchedTransactionDate\",\r\n                clearFilter: \"no\",\r\n                searchRef: this.searchRef,\r\n                primaryKeyField: \"sregistereddate\",\r\n                fetchUrl: \"audittrail/getFilterTransactionDetailsRecords\",\r\n                fecthInputObject: this.filterParam,\r\n                selectedObject: \"SelectedTransactionDate\",\r\n                inputListName: \"TransactionDate\",\r\n                updatedListname: \"SelectedTransactionDate\",\r\n                unchangeList: [\"viewFilterTypeList\", \"transFilterTypeList\"]\r\n            }];\r\n\r\n        return (\r\n            <>\r\n                <div className=\"mtop-fixed-breadcrumb client-listing-wrap\">\r\n                    <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    <Row noGutters>\r\n                        <Col md={12} className=\"parent-port-height sticky_head_parent\" >\r\n                            <SplitterLayout borderColor=\"#999\"\r\n                                primaryIndex={1}\r\n                                percentage={true}\r\n                                secondaryInitialSize={this.state.splitChangeWidthPercentage}\r\n                                onSecondaryPaneSizeChange={this.paneSizeChange}\r\n                                primaryMinSize={40}\r\n                                secondaryMinSize={20}\r\n                            >\r\n                                <TransactionListMaster\r\n                                    splitChangeWidthPercentage={this.state.splitChangeWidthPercentage}\r\n                                    masterList={this.props.Login.masterData.searchedTransactionDetails ||\r\n                                        (this.props.Login.masterData.TransactionDate || [])}\r\n                                    selectedMaster={[this.props.Login.masterData.SelectedTransactionDate]}\r\n                                    primaryKeyField=\"sregistereddate\"\r\n                                    inputParam={inputParam}\r\n                                    mainField=\"sregisteredtransactiondate\"\r\n                                    selectedListName=\"SelectedTransactionDate\"\r\n                                    filterColumnData={this.props.filterTransactionList}\r\n                                    getMasterDetail={this.props.getTransactionDetail}\r\n                                    searchListName=\"searchedTransactionDetails\"\r\n                                    searchRef={this.searchRef}\r\n                                    filterParam={this.filterParam}\r\n                                    objectName=\"transactionDetails\"\r\n                                    listName=\"IDS_TRANSACTIONDETAILS\"\r\n                                    showFilter={this.props.Login.showFilter}\r\n                                    openFilter={this.openFilter}\r\n                                    closeFilter={this.closeFilter}\r\n                                    onFilterSubmit={this.onFilterSubmit}\r\n                                    handlePageChange={this.handlePageChange}\r\n                                    skip={this.state.skip}\r\n                                    take={this.state.take}\r\n                                    needFilter={true}\r\n                                    needAccordianFilter={false}\r\n                                    filterComponent={[\r\n                                        {\r\n                                            \"IDS_TRANSACTIONDETAILS\":\r\n                                                <FlexTransactionFilter\r\n                                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                                    filterViewType={this.state.viewFilterTypeList}\r\n                                                    transfilterViewType={this.state.transFilterTypeList}\r\n                                                    handleDateChange={this.handleDateChange}\r\n                                                    fromDate={fromDate}\r\n                                                    toDate={toDate}\r\n                                                    userInfo={this.props.Login.userInfo}\r\n                                                    onComboChange={this.onComboChange}\r\n                                                />\r\n                                        }\r\n                                    ]}\r\n                                    commonActions={\r\n                                        <ProductList className=\"d-flex product-category float-right\">\r\n                                            <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                                onClick={() => this.onReload()}\r\n                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}>\r\n                                                <RefreshIcon className='custom_icons' />\r\n                                            </Button>\r\n                                        </ProductList>\r\n                                    }\r\n                                />\r\n                                <PerfectScrollbar>\r\n                                    <div ref={this.myRef}>\r\n                                        {/* {this.props.Login.masterData.SelectedTransactionDate && this.props.Login.masterData.SelectedTransactionDate !== undefined ? */}\r\n                                            <ContentPanel className=\"panel-main-content\">\r\n                                                <Card className=\"border-0\">\r\n                                                    <Card.Body className='form-static-wrap padding-class'>\r\n                                                        <DataGrid\r\n                                                            selectedId={this.props.Login.selectedId}\r\n                                                            gridHeight={this.state.gridHeight + 'px'}\r\n                                                            expandField=\"expanded\"\r\n                                                            userRoleControlRights={this.state.userRoleControlRights && this.state.userRoleControlRights}\r\n                                                            pageable={true}\r\n                                                            pageSizes={this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting))}\r\n                                                            scrollable={\"scrollable\"}\r\n                                                            primaryKeyField=\"ntransactionsampleresultno\"\r\n                                                            data={this.props.Login.masterData.TransactionDetails || []}\r\n                                                            dataResult={this.state.dataResult}\r\n                                                            dataState={this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll\r\n                                                                : this.state.dataState}\r\n                                                            dataStateChange={this.dataStateChange}\r\n                                                            extractedColumnList={this.extractedColumnList || []}\r\n                                                            controlMap={this.state.controlMap}\r\n                                                            //methodUrl=\"Report\"\r\n                                                            groupable={this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? true : false : false}\r\n                                                            //isActionRequired={false}\r\n                                                            isToolBarRequired={true}\r\n                                                            isAddRequired={false}\r\n                                                            isRefreshRequired={false}\r\n                                                            isDownloadPDFRequired={false}\r\n                                                            isDownloadExcelRequired={true}\r\n                                                            isExportExcelRequired={true}\r\n                                                            isIdsField=\"yes\"\r\n                                                            isActionRequired={true}\r\n                                                            actionIcons={[\r\n                                                            {\r\n                                                                title: this.props.intl.formatMessage({ id: \"IDS_DOWNLOADFILE\" }),\r\n                                                                controlname: \"faCloudDownloadAlt\",\r\n                                                                objectName: \"DownloadReport\",\r\n                                                                hidden: this.state.userRoleControlRights.indexOf(DownloadReport) === -1,\r\n                                                                onClick: (TransactionDetails) => this.viewSelectedReport(TransactionDetails,DownloadReport)\r\n                                                            }]}\r\n                                                            exportExcelNew={this.exportExcelNew}\r\n                                                            onExpandChange={this.expandChange}\r\n                                                            hideDetailBand={true}\r\n                                                        />\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                            </ContentPanel>\r\n\r\n                                            {/* : \"\"\r\n                                        } */}\r\n                                    </div>\r\n                                </PerfectScrollbar>\r\n                            </SplitterLayout>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        hideSave={true}\r\n                        addComponent={\r\n                            <>\r\n                                <DataGrid\r\n                                    primaryKeyField=\"ntransactionsampleresultno\"\r\n                                    detailedFieldList={this.feildsForGrid}\r\n                                    extractedColumnList={this.feildsForGrid}\r\n                                    dataResult={this.props.Login.masterData[\"ViewTransactionDetails\"] && this.props.Login.masterData[\"ViewTransactionDetails\"].length > 0\r\n                                        && process(this.props.Login.masterData[\"ViewTransactionDetails\"],\r\n                                            this.props.Login.viewTransDetailsDataState ? this.props.Login.viewTransDetailsDataState : { skip: 0, take: 50 })}\r\n                                    dataState={(this.props.Login.screenName === undefined || this.props.Login.screenName === this.props.intl.formatMessage({ id: 'IDS_TRANSACTIONVIEWDETAILS' }))\r\n                                        ? this.props.Login.viewTransDetailsDataState ? this.props.Login.viewTransDetailsDataState : { skip: 0, take: 50 } : { skip: 0, take: 50 }}\r\n                                    dataStateChange={(event) => this.dataStateAuditView(event)}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    pageable={true}\r\n                                    pageSizes={this.props.Login.settings && this.props.Login.settings[17].split(\",\").map(setting => parseInt(setting))} scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    hideColumnFilter={true}\r\n                                    selectedId={0}\r\n                                >\r\n                                </DataGrid>\r\n                            </>\r\n                        }\r\n                    />\r\n\r\n\r\n\r\n                }\r\n            </>\r\n\r\n        );\r\n    }\r\n\r\n    \r\n  viewSelectedReport = (filedata,ncontrolCode) => {\r\n    const inputParam = {\r\n        inputData: {\r\n          ssystemfilename:  filedata.sreportrefno + '.pdf',\r\n            releasedcoareport: filedata.inputData,\r\n            userinfo: this.props.Login.userInfo,\r\n            ncontrolCode: ncontrolCode,\r\n        },\r\n        classUrl: \"flextransaction\",\r\n        operation: \"view\",\r\n        methodUrl: \"FlextTransactionReport\",\r\n    }\r\n    this.props.viewFlextTransactionReport(inputParam);\r\n}\r\n\r\n    componentDidMount() {\r\n        if (this.myRef.current.offsetParent.clientHeight !== this.state.gridHeight) {\r\n            this.setState({\r\n                gridHeight: this.myRef.current.offsetParent.clientHeight\r\n            })\r\n\r\n        }\r\n    }\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n    dataStateAuditView = (event) => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { viewTransDetailsDataState: event.dataState }\r\n        }\r\n\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeModal = () => {\r\n        let openModal = this.props.Login.openModal;\r\n        openModal = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, viewTransDetailsDataState: { skip: 0, take: 50 }, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    ViewTransactionDetails = (details) => {\r\n        const screenName = this.props.intl.formatMessage({ id: 'IDS_TRANSACTIONVIEWDETAILS' });\r\n        this.props.ViewTransactionDetails(this.props.Login.masterData, this.props.Login.userInfo, details, screenName);\r\n    };\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"ntransfiltercode\" || fieldName === \"nauditactionfiltercode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n        }\r\n        else {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n    }\r\n    expandChange = (event) => {\r\n        event.dataItem[event.target.props.expandField] = event.value;\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.TransactionDetails || [], this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll :\r\n                this.state.dataState),\r\n            dataState: this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll\r\n                : this.state.dataState,\r\n        });\r\n    };\r\n\r\n    // openFilter = () => {\r\n    //     let showFilter = !this.props.Login.showFilter\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: { showFilter }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    // closeFilter = () => {\r\n\r\n    //     const updateInfo = {\r\n    //         typeName: DEFAULT_RETURN,\r\n    //         data: { showFilter: false }\r\n    //     }\r\n    //     this.props.updateStore(updateInfo);\r\n    // }\r\n\r\n    exportExcelNew = () => {\r\n        if(this.props.Login.masterData && this.props.Login.masterData.TransactionDetails.length>0){\r\n\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n        let dataField = {};\r\n        [...this.extractedColumnList].map((item) => {\r\n            dataField[item.dataField] = this.props.intl.formatMessage({ id: item.idsName })\r\n        })\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        let inputData = {\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : 0,\r\n            userinfo: this.props.Login.userInfo,\r\n            sregistereddate: this.props.Login.masterData.SelectedTransactionDate && this.props.Login.masterData.SelectedTransactionDate.sregistereddate,\r\n            nformcode: this.props.Login.userInfo.nformcode,\r\n            dataField\r\n\r\n        }\r\n\r\n        let inputParam = { inputData }\r\n        this.props.getexportdata(inputParam);\r\n    }else{\r\n        toast.info(this.props.intl.formatMessage({ id: \"IDS_NODATATOEXPORT\" }));\r\n    }\r\n    }\r\n    onFilterSubmit = () => {\r\n\r\n        let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let validateFromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        let validateToDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let breadCrumbTransaDetails = this.state.selectedRecord['ntransfiltercode']\r\n        let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode']\r\n\r\n        const diffInMilliseconds = Math.abs(validateToDate - validateFromDate);\r\n        const days = Math.ceil(diffInMilliseconds / (1000 * 60 * 60 * 24));\r\n\r\n        const diffYear = validateToDate.getFullYear() - validateFromDate.getFullYear();\r\n        const diffMonth = validateToDate.getMonth() - validateFromDate.getMonth();\r\n        const monthss = diffYear * 12 + diffMonth;\r\n\r\n        if (this.state.selectedRecord[\"nauditactionfiltercode\"].value !== 1 || (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 && (monthss <= 12 && (days <= 365 || days <= 366)))) {\r\n            let masterData = {\r\n                ...this.props.Login.masterData, breadCrumbFrom, breadCrumbTo, breadCrumbTransaDetails, breadCrumbViewType\r\n            }\r\n            let fromDate = this.state.selectedRecord[\"fromdate\"] ? this.state.selectedRecord[\"fromdate\"] : this.props.Login.masterData.FromDate;\r\n            let toDate = this.state.selectedRecord[\"todate\"] ? this.state.selectedRecord[\"todate\"] : this.props.Login.masterData.ToDate;\r\n\r\n            let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n            let inputData = {\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                transFilterType: this.state.selectedRecord[\"ntransfiltercode\"] ? this.state.selectedRecord[\"ntransfiltercode\"].value : 0,\r\n                viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\r\n                userinfo: this.props.Login.userInfo,\r\n                postParamList: this.filterParam,\r\n            }\r\n\r\n            let inputParam = {\r\n                masterData, inputData, searchRef: this.searchRef,\r\n                detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip\r\n            }\r\n            this.props.getFilterTransactionDetailsRecords(inputParam)\r\n        } else {\r\n            let selectedRecord = this.state.selectedRecord;\r\n            selectedRecord['fromdate'] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate)\r\n            selectedRecord['toDate'] = rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate)\r\n            selectedRecord['nauditactionfiltercode'] = this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType :\r\n                {\r\n                    item: this.props.Login.masterData.viewFilterType,\r\n                    label: this.props.Login.masterData.viewFilterType.sauditactionfiltername, value: this.props.Login.masterData.viewFilterType.nauditactionfiltercode\r\n                }\r\n            selectedRecord['ntransfiltercode'] = this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails :\r\n                {\r\n                    item: this.props.Login.masterData.transFilterType,\r\n                    label: this.props.Login.masterData.transFilterType.sdisplayname, value: this.props.Login.masterData.transFilterType.ntransfiltertypecode\r\n                }\r\n            this.setState({ selectedRecord });\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_DATERANGESHOULDEMAXONEYEAR\" }));\r\n        }\r\n    }\r\n\r\n    onReload = () => {\r\n        let breadCrumbFrom = this.state.selectedRecord[\"fromdate\"] ? getStartOfDay(this.state.selectedRecord[\"fromdate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.FromDate);\r\n        let breadCrumbTo = this.state.selectedRecord[\"todate\"] ? getEndOfDay(this.state.selectedRecord[\"todate\"]) : rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.ToDate);\r\n        let breadCrumbTransaDetails = this.state.selectedRecord['ntransfiltercode']\r\n        let breadCrumbViewType = this.state.selectedRecord['nauditactionfiltercode'];\r\n\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        let inputData = {\r\n            fromDate: obj.fromDate,\r\n            toDate: obj.toDate,\r\n            transFilterType: this.state.selectedRecord[\"ntransfiltercode\"] ? this.state.selectedRecord[\"ntransfiltercode\"].value : 0,\r\n            viewtypecode: this.state.selectedRecord[\"nauditactionfiltercode\"] ? this.state.selectedRecord[\"nauditactionfiltercode\"].value : -1,\r\n            userinfo: this.props.Login.userInfo,\r\n            postParamList: this.filterParam,\r\n        }\r\n\r\n        let masterData = {\r\n            ...this.props.Login.masterData, breadCrumbFrom, breadCrumbTo, breadCrumbTransaDetails, breadCrumbViewType\r\n        }\r\n\r\n        let inputParam = { masterData, inputData, searchRef: this.searchRef, detailSkip: this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1 ? this.state.dataStateAll.skip : this.state.dataState.skip }\r\n        this.props.getFilterTransactionDetailsRecords(inputParam)\r\n    }\r\n    handleDateChange = (dateName, dateValue) => {\r\n        let selectedRecord = this.state.selectedRecord;\r\n        selectedRecord[dateName] = dateValue;\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n    paneSizeChange = (eve) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: eve\r\n        })\r\n    }\r\n\r\n    breadcrumbList = () => {\r\n        let breadCrumbArray = [];\r\n        let fromDate = this.props.Login.masterData.FromDate ? this.props.Login.masterData.FromDate : this.props.Login.masterData.breadCrumbFrom;\r\n        let toDate = this.props.Login.masterData.ToDate ? this.props.Login.masterData.ToDate : this.props.Login.masterData.breadCrumbTo;\r\n\r\n        let obj = convertDateValuetoString(fromDate,\r\n            toDate,\r\n            this.props.Login.userInfo);\r\n        breadCrumbArray.push({\r\n            \"label\": \"IDS_FROM\",\r\n            \"value\": obj.breadCrumbFrom\r\n        }, {\r\n            \"label\": \"IDS_TO\",\r\n            \"value\": obj.breadCrumbto\r\n        });\r\n\r\n        // breadCrumbArray.push(\r\n        //     {\r\n        //         \"label\": \"IDS_RECORDTODISPLAY\",\r\n        //         \"value\": this.props.Login.masterData.breadCrumbTransaDetails ? this.props.Login.masterData.breadCrumbTransaDetails.label :\r\n        //             this.props.Login.masterData.transFilterType ? this.props.Login.masterData.transFilterType.sdisplayname : \"\"\r\n        //     });\r\n\r\n        breadCrumbArray.push(\r\n            {\r\n                \"label\": \"IDS_VIEWPERIOD\",\r\n                \"value\": this.props.Login.masterData.breadCrumbViewType ? this.props.Login.masterData.breadCrumbViewType.label :\r\n                    this.props.Login.masterData.viewFilterType ? this.props.Login.masterData.viewFilterType.sauditactionfiltername : \"\"\r\n            });\r\n\r\n\r\n        return breadCrumbArray;\r\n    };\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let updateState = false;\r\n        let { selectedRecord, viewFilterTypeList, dataStateAll, dataState, dataResult, skip, take, transFilterTypeList } = this.state\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            updateState = true;\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n        }\r\n        if (this.props.Login.masterData.viewFilterType !== previousProps.Login.masterData.viewFilterType) {\r\n            updateState = true;\r\n            const viewTypeAMap = constructOptionList(this.props.Login.masterData.viewFilterTypeList || [], \"nauditactionfiltercode\",\r\n                \"sauditactionfiltername\", \"nsorter\", \"ascending\", false);\r\n            const viewFilterTypeLists = viewTypeAMap.get(\"OptionList\");\r\n            viewFilterTypeList = viewFilterTypeLists\r\n            selectedRecord = {\r\n                nauditactionfiltercode: viewFilterTypeLists.length > 0 ? {\r\n                    \"value\": viewFilterTypeLists[0].item.nauditactionfiltercode,\r\n                    \"label\": viewFilterTypeLists[0].item.sauditactionfiltername\r\n                } : this.state.selectedRecord[\"nauditactionfiltercode\"]\r\n            }\r\n\r\n        }\r\n        if (this.props.Login.masterData.transFilterTypeList !== previousProps.Login.masterData.transFilterTypeList) {\r\n            updateState = true;\r\n            const transTypeAMap = constructOptionList(this.props.Login.masterData.transFilterTypeList || [], \"ntransdetailsfiltercode\",\r\n                \"sdisplayname\", \"nsorter\", \"ascending\", false);\r\n            const transFilterTypeLists = transTypeAMap.get(\"OptionList\");\r\n            transFilterTypeList = transFilterTypeLists\r\n            selectedRecord = {\r\n                ...selectedRecord,\r\n                ntransfiltercode: transFilterTypeLists.length > 0 ? {\r\n                    \"value\": transFilterTypeLists[0].item.ntransdetailsfiltercode,\r\n                    \"label\": transFilterTypeLists[0].item.sdisplayname\r\n                } : this.state.selectedRecord[\"ntransfiltercode\"],\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.resetDataGridPage && this.props.Login.resetDataGridPage !== previousProps.Login.resetDataGridPage) {\r\n            if (this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n\r\n                dataStateAll.skip = 0\r\n                updateState = true;\r\n            }\r\n            else {\r\n\r\n                dataState.skip = 0\r\n                updateState = true;\r\n            }\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            updateState = true;\r\n            if (this.state.selectedRecord && this.state.selectedRecord[\"nauditactionfiltercode\"] && this.state.selectedRecord[\"nauditactionfiltercode\"].value === 1) {\r\n\r\n                dataStateAll = { skip: 0, take: dataStateAll.take }\r\n                updateState = true;\r\n            }\r\n            else {\r\n\r\n                dataState = { skip: 0, take: dataState.take }\r\n                updateState = true;\r\n            }\r\n            const transactionDetailsDate = (this.props.Login.masterData.TransactionDetails && this.props.Login.masterData.TransactionDetails.slice(dataState.skip, this.props.Login.masterData.TransactionDetails.length)) || []\r\n            dataResult = process(transactionDetailsDate || [], dataState)\r\n\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            updateState = true;\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRights\r\n            });\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                selectedRecord, viewFilterTypeList, dataStateAll, dataState, dataResult, skip, take, transFilterTypeList\r\n            })\r\n        }\r\n\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, filterTransactionList, getTransactionDetail, getFilterTransactionDetailsRecords, updateStore, ViewTransactionDetails, getexportdata,viewFlextTransactionReport\r\n})(injectIntl(FlexTransaction));"]},"metadata":{},"sourceType":"module"}