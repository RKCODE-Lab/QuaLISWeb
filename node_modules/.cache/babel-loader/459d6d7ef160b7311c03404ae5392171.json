{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-FINAL\\\\SOURCE-513-ALPD-4991\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\ViewSubCodedResult.jsx\";\nimport React from 'react';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component'; //import { Col, Row } from 'react-bootstrap';\n\nimport FormInput from '../../components/form-input/form-input.component';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Col } from 'react-bootstrap';\nimport DataGrid from '../../components/data-grid/data-grid.component';\n\nconst ViewSubCodedResult = props => {\n  const testMethodColumnList = [{\n    \"idsName\": \"IDS_SUBCODEDRESULT\",\n    \"dataField\": \"ssubcodedresult\",\n    \"width\": \"200px\"\n  }];\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DataGrid, {\n    key: \"ssubcodedresult\",\n    primaryKeyField: \"ssubcodedresult\" // dataResult={[]}\n    ,\n    dataResult: props.selectedsubcoderesult || [] // dataResult={this.props.selectedWorklistHistory ||[]}\n    ,\n    dataState: {} // dataState={this.state.sectionDataState}\n    // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\n    ,\n    data: [],\n    extractedColumnList: testMethodColumnList,\n    controlMap: props.controlMap,\n    userRoleControlRights: props.userRoleControlRights,\n    pageable: false,\n    scrollable: 'scrollable',\n    gridHeight: '335px',\n    isActionRequired: false,\n    methodUrl: \"AuditTrail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default injectIntl(ViewSubCodedResult);","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/pages/testgroup/ViewSubCodedResult.jsx"],"names":["React","FormSelectSearch","FormInput","injectIntl","FormattedMessage","Col","DataGrid","ViewSubCodedResult","props","testMethodColumnList","selectedsubcoderesult","controlMap","userRoleControlRights"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,kEAA7B,C,CACA;;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,SAASC,UAAT,EAAoBC,gBAApB,QAA4C,YAA5C;AACA,SAASC,GAAT,QAAmB,iBAAnB;AACA,OAAOC,QAAP,MAAqB,gDAArB;;AACA,MAAMC,kBAAkB,GAAIC,KAAD,IAAW;AAElC,QAAMC,oBAAoB,GAAG,CACzB;AAAE,eAAW,oBAAb;AAAmC,iBAAa,iBAAhD;AAAmE,aAAS;AAA5E,GADyB,CAA7B;AAEA,sBACG,uDACC,oBAAC,QAAD;AACY,IAAA,GAAG,EAAC,iBADhB;AAEY,IAAA,eAAe,EAAC,iBAF5B,CAGY;AAHZ;AAIY,IAAA,UAAU,EAAED,KAAK,CAACE,qBAAN,IAA+B,EAJvD,CAKY;AALZ;AAMY,IAAA,SAAS,EAAE,EANvB,CAOY;AACA;AARZ;AASY,IAAA,IAAI,EAAE,EATlB;AAUY,IAAA,mBAAmB,EAAED,oBAVjC;AAWY,IAAA,UAAU,EAAED,KAAK,CAACG,UAX9B;AAYY,IAAA,qBAAqB,EAAEH,KAAK,CAACI,qBAZzC;AAaY,IAAA,QAAQ,EAAE,KAbtB;AAcY,IAAA,UAAU,EAAE,YAdxB;AAeY,IAAA,UAAU,EAAE,OAfxB;AAgBY,IAAA,gBAAgB,EAAE,KAhB9B;AAiBY,IAAA,SAAS,EAAC,YAjBtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH;AA6BH,CAjCD;;AAmCA,eAAeT,UAAU,CAACI,kBAAD,CAAzB","sourcesContent":["import React from 'react';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\n//import { Col, Row } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { injectIntl,FormattedMessage } from 'react-intl';\r\nimport { Col} from 'react-bootstrap';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nconst ViewSubCodedResult = (props) => {\r\n   \r\n    const testMethodColumnList = [\r\n        { \"idsName\": \"IDS_SUBCODEDRESULT\", \"dataField\": \"ssubcodedresult\", \"width\": \"200px\" }    ];\r\n    return (\r\n       <>\r\n        <DataGrid\r\n                    key=\"ssubcodedresult\"\r\n                    primaryKeyField=\"ssubcodedresult\"\r\n                    // dataResult={[]}\r\n                    dataResult={props.selectedsubcoderesult || []}\r\n                    // dataResult={this.props.selectedWorklistHistory ||[]}\r\n                    dataState={{}}\r\n                    // dataState={this.state.sectionDataState}\r\n                    // dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    data={[]}\r\n                    extractedColumnList={testMethodColumnList}\r\n                    controlMap={props.controlMap}\r\n                    userRoleControlRights={props.userRoleControlRights}\r\n                    pageable={false}\r\n                    scrollable={'scrollable'}\r\n                    gridHeight={'335px'}\r\n                    isActionRequired={false}\r\n                    methodUrl=\"AuditTrail\"\r\n                   \r\n\r\n                >\r\n                </DataGrid>\r\n\r\n                </>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default injectIntl(ViewSubCodedResult);"]},"metadata":{},"sourceType":"module"}