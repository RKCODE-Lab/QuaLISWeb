{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\TestGroupParameterAccordion.jsx\";\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Row, Col, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { ReadOnlyText } from '../../components/App.styles';\nimport { parameterType } from '../../components/Enumeration';\nimport PredefinedParameterTab from '../testmanagement/PredefinedParameterTab';\nimport { faEye } from '@fortawesome/free-regular-svg-icons'; // import { Tooltip } from '@progress/kendo-react-tooltip';\n\nimport ReactTooltip from 'react-tooltip';\n\nconst TestGroupParameterAccordion = props => {\n  const parameterFieldName = [{\n    \"stestname\": \"IDS_TESTNAME\"\n  }, {\n    \"sparametersynonym\": \"IDS_PARAMETERSYNONYM\"\n  }, {\n    \"sdisplaystatus\": \"IDS_PARAMETERTYPE\"\n  }, {\n    \"nroundingdigits\": \"IDS_ROUNDINGDIGITS\",\n    \"nparametertypecode\": parameterType.NUMERIC\n  }, {\n    \"sunitname\": \"IDS_UNIT\",\n    \"nparametertypecode\": parameterType.NUMERIC\n  }, {\n    \"schecklistname\": \"IDS_CHECKLISTNAME\"\n  }, {\n    \"nsorter\": \"IDS_SORTER\"\n  }, {\n    \"schecklistversionname\": \"IDS_CHECKLISTVERSION\"\n  }, {\n    \"sreportmandatory\": \"IDS_REPORTMANDATORY\"\n  }, {\n    \"sresultmandatory\": \"IDS_RESULTMANDATORY\"\n  }, {\n    \"sspecdesc\": \"IDS_SPECDESCRIPTION\"\n  }];\n  const specLimitFieldName = [// {\"sdisregard\": \"IDS_DISREGARDED\"}, {\"sminlod\": \"IDS_MINLOD\"}, {\"smaxlod\": \"IDS_MAXLOD\"}, \n  {\n    \"sminb\": \"IDS_MINB\"\n  }, {\n    \"smaxb\": \"IDS_MAXB\"\n  }, // {\"smina\": \"IDS_MINA\"}, {\"smaxa\": \"IDS_MAXA\"}, {\"sminloq\": \"IDS_MINLOQ\"}, {\"smaxloq\": \"IDS_MAXLOQ\"}, \n  {\n    \"sresultvalue\": \"IDS_DEFAULTRESULT\"\n  }];\n  const formulaFieldName = [{\n    \"sformulaname\": \"IDS_FORMULANAME\"\n  }, {\n    \"sformulacalculationdetail\": \"IDS_FORMULA\"\n  }];\n  const editParameterId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\n  const editViewCLId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\n  const {\n    selectedParameter,\n    userInfo,\n    userRoleControlRights,\n    testGroupTestFormula,\n    testGroupTestNumericParameter,\n    testGroupTestPredefinedParameter,\n    testGroupCharParameter,\n    selectedSpecification\n  } = props;\n  const viewCheckListParam = {\n    nchecklistversioncode: selectedParameter.nchecklistversioncode,\n    flag: 1,\n    ntransactionresultcode: 0,\n    userinfo: userInfo\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    className: \"d-flex justify-content-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ReactTooltip, {\n    place: \"bottom\",\n    globalEventOff: \"click\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }), selectedParameter && selectedParameter.nchecklistversioncode !== -1 && /*#__PURE__*/React.createElement(Nav.Link, {\n    className: \"btn btn-circle outline-grey mr-2\",\n    hidden: userRoleControlRights.indexOf(editViewCLId) === -1,\n    onClick: () => props.viewTestGroupCheckList(viewCheckListParam),\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_VIEW\"\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faEye,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Nav.Link, {\n    className: \"btn btn-circle outline-grey mr-2\",\n    hidden: userRoleControlRights.indexOf(editParameterId) === -1,\n    \"data-tip\": props.intl.formatMessage({\n      id: \"IDS_EDIT\"\n    }),\n    onClick: () => props.editTestGroupParameter(\"update\", selectedParameter, userInfo, editParameterId, selectedSpecification),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n    icon: faPencilAlt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, parameterFieldName.map(item => {\n    return item.nparametertypecode === undefined || item.nparametertypecode && item.nparametertypecode === props.testgrouptestparameter.nparametertypecode ? /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 37\n      }\n    }, props.intl.formatMessage({\n      id: Object.values(item)[0]\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 37\n      }\n    }, selectedParameter[Object.keys(item)[0]]))) : \"\";\n  })), selectedParameter.nparametertypecode === parameterType.NUMERIC && /*#__PURE__*/React.createElement(React.Fragment, null, testGroupTestNumericParameter && testGroupTestNumericParameter.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"horizontal-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 29\n    }\n  }, specLimitFieldName.map(item => {\n    return /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 49\n      }\n    }, props.intl.formatMessage({\n      id: Object.values(item)[0]\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 49\n      }\n    }, testGroupTestNumericParameter[0][Object.keys(item)[0]])));\n  }))), testGroupTestFormula && testGroupTestFormula.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"horizontal-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 29\n    }\n  }, formulaFieldName.map(item => {\n    return /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 49\n      }\n    }, props.intl.formatMessage({\n      id: Object.values(item)[0]\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 49\n      }\n    }, testGroupTestFormula[0][Object.keys(item)[0]])));\n  })))), selectedParameter.nparametertypecode === parameterType.PREDEFINED && /*#__PURE__*/React.createElement(PredefinedParameterTab, {\n    primaryKeyName: \"ntestgrouptestpredefcode\",\n    predefinedParameterList: testGroupTestPredefinedParameter,\n    selectedParameter: selectedParameter,\n    userInfo: userInfo,\n    optionalData: {\n      testgroupspecification: selectedSpecification\n    },\n    methodUrl: \"TestGroupPredefParameter\",\n    addId: props.controlMap.has(\"AddCodedResult\") && props.controlMap.get(\"AddCodedResult\").ncontrolcode,\n    editId: props.controlMap.has(\"EditCodedResult\") && props.controlMap.get(\"EditCodedResult\").ncontrolcode,\n    deleteId: props.controlMap.has(\"DeleteCodedResult\") && props.controlMap.get(\"DeleteCodedResult\").ncontrolcode,\n    userRoleControlRights: props.userRoleControlRights,\n    deleteAction: props.deleteAction,\n    onSwitchChange: props.onSwitchChange,\n    openModal: props.addTestGroupCodedResult,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }), selectedParameter.nparametertypecode === parameterType.CHARACTER && testGroupCharParameter.length > 0 && props.testGroupCharParameter[0].scharname && props.testGroupCharParameter[0].scharname !== \"null\" && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"horizontal-line\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 29\n    }\n  }, props.intl.formatMessage({\n    id: \"IDS_TESTCHARACTER\"\n  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 29\n    }\n  }, props.testGroupCharParameter[0].scharname)))));\n};\n\nexport default injectIntl(TestGroupParameterAccordion);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/testgroup/TestGroupParameterAccordion.jsx"],"names":["React","injectIntl","faPencilAlt","FontAwesomeIcon","Row","Col","Nav","FormGroup","FormLabel","ReadOnlyText","parameterType","PredefinedParameterTab","faEye","ReactTooltip","TestGroupParameterAccordion","props","parameterFieldName","NUMERIC","specLimitFieldName","formulaFieldName","editParameterId","controlMap","has","get","ncontrolcode","editViewCLId","selectedParameter","userInfo","userRoleControlRights","testGroupTestFormula","testGroupTestNumericParameter","testGroupTestPredefinedParameter","testGroupCharParameter","selectedSpecification","viewCheckListParam","nchecklistversioncode","flag","ntransactionresultcode","userinfo","indexOf","viewTestGroupCheckList","intl","formatMessage","id","editTestGroupParameter","map","item","nparametertypecode","undefined","testgrouptestparameter","Object","values","keys","length","PREDEFINED","testgroupspecification","deleteAction","onSwitchChange","addTestGroupCodedResult","CHARACTER","scharname"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { injectIntl } from 'react-intl';\r\nimport { faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Row, Col, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { ReadOnlyText } from '../../components/App.styles';\r\nimport { parameterType } from '../../components/Enumeration';\r\nimport PredefinedParameterTab from '../testmanagement/PredefinedParameterTab';\r\nimport { faEye } from '@fortawesome/free-regular-svg-icons';\r\n// import { Tooltip } from '@progress/kendo-react-tooltip';\r\nimport ReactTooltip from 'react-tooltip';\r\n\r\nconst TestGroupParameterAccordion = (props) => {\r\n\r\n    const parameterFieldName = [{ \"stestname\": \"IDS_TESTNAME\" },\r\n    { \"sparametersynonym\": \"IDS_PARAMETERSYNONYM\" },\r\n    { \"sdisplaystatus\": \"IDS_PARAMETERTYPE\" },\r\n    { \"nroundingdigits\": \"IDS_ROUNDINGDIGITS\", \"nparametertypecode\": parameterType.NUMERIC },\r\n    { \"sunitname\": \"IDS_UNIT\", \"nparametertypecode\": parameterType.NUMERIC },\r\n    { \"schecklistname\": \"IDS_CHECKLISTNAME\" },\r\n    { \"nsorter\": \"IDS_SORTER\" },\r\n    { \"schecklistversionname\": \"IDS_CHECKLISTVERSION\" },\r\n    { \"sreportmandatory\": \"IDS_REPORTMANDATORY\" }, { \"sresultmandatory\": \"IDS_RESULTMANDATORY\" },\r\n    { \"sspecdesc\": \"IDS_SPECDESCRIPTION\" }\r\n    ];\r\n\r\n\r\n    const specLimitFieldName = [\r\n        // {\"sdisregard\": \"IDS_DISREGARDED\"}, {\"sminlod\": \"IDS_MINLOD\"}, {\"smaxlod\": \"IDS_MAXLOD\"}, \r\n        { \"sminb\": \"IDS_MINB\" }, { \"smaxb\": \"IDS_MAXB\" },\r\n        // {\"smina\": \"IDS_MINA\"}, {\"smaxa\": \"IDS_MAXA\"}, {\"sminloq\": \"IDS_MINLOQ\"}, {\"smaxloq\": \"IDS_MAXLOQ\"}, \r\n        { \"sresultvalue\": \"IDS_DEFAULTRESULT\" }\r\n    ];\r\n    const formulaFieldName = [{ \"sformulaname\": \"IDS_FORMULANAME\" }, { \"sformulacalculationdetail\": \"IDS_FORMULA\" }];\r\n    const editParameterId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\r\n    const editViewCLId = props.controlMap && props.controlMap.has(\"EditParameter\") && props.controlMap.get(\"EditParameter\").ncontrolcode;\r\n    const { selectedParameter, userInfo, userRoleControlRights, testGroupTestFormula, testGroupTestNumericParameter,\r\n        testGroupTestPredefinedParameter, testGroupCharParameter, selectedSpecification } = props;\r\n    const viewCheckListParam = { nchecklistversioncode: selectedParameter.nchecklistversioncode, flag: 1, ntransactionresultcode: 0, userinfo: userInfo };\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={12} className=\"d-flex justify-content-end\">\r\n                    <ReactTooltip place=\"bottom\" globalEventOff='click' />\r\n                    {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true} > */}\r\n                    {selectedParameter && selectedParameter.nchecklistversioncode !== -1 &&\r\n                        <Nav.Link className=\"btn btn-circle outline-grey mr-2\" hidden={userRoleControlRights.indexOf(editViewCLId) === -1}\r\n                            onClick={() => props.viewTestGroupCheckList(viewCheckListParam)}\r\n                            data-tip={props.intl.formatMessage({ id: \"IDS_VIEW\" })}>\r\n                            <FontAwesomeIcon icon={faEye} />\r\n                        </Nav.Link>\r\n                    }\r\n                    <Nav.Link className=\"btn btn-circle outline-grey mr-2\"\r\n                        hidden={userRoleControlRights.indexOf(editParameterId) === -1}\r\n                        data-tip={props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                        onClick={() => props.editTestGroupParameter(\"update\", selectedParameter, userInfo, editParameterId, selectedSpecification)}>\r\n                        <FontAwesomeIcon icon={faPencilAlt} />\r\n                    </Nav.Link>\r\n                    {/* </Tooltip> */}\r\n                </Col>\r\n            </Row>\r\n\r\n\r\n            <Row>\r\n\r\n                {parameterFieldName.map(item => {\r\n                    return (\r\n                        item.nparametertypecode === undefined\r\n                            || (item.nparametertypecode\r\n                                && item.nparametertypecode === props.testgrouptestparameter.nparametertypecode) ?\r\n                            <Col md=\"6\">\r\n                                <FormGroup>\r\n                                    <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                    <ReadOnlyText>{selectedParameter[Object.keys(item)[0]]}</ReadOnlyText>\r\n                                </FormGroup>\r\n                            </Col>\r\n                            : \"\"\r\n\r\n                    )\r\n                }\r\n                )}\r\n            </Row>\r\n\r\n            {/* <ListGroup as=\"ul\">\r\n            {parameterFieldName.map(item=> {\r\n                return (\r\n                <ListGroup.Item as=\"li\">\r\n                     <Media>\r\n                        <Media.Body>\r\n                            <MediaSubHeader>\r\n                                                            <MediaLabel>{props.intl.formatMessage({id: \"IDS_MINLOD\"})}{\": \"}</MediaLabel>{specitem.sminlod}\r\n                                                            <MediaLabel className=\"seperator\">|</MediaLabel>\r\n                                                            <MediaLabel>{props.intl.formatMessage({id: \"IDS_MAXLOD\"})}{\": \"}</MediaLabel>{specitem.smaxlod}\r\n                                                        </MediaSubHeader>\r\n                        </Media.Body>\r\n                    </Media>\r\n                </ListGroup.Item>\r\n                )\r\n            })}\r\n            </ListGroup> */}\r\n            { selectedParameter.nparametertypecode === parameterType.NUMERIC &&\r\n                <>\r\n                    { testGroupTestNumericParameter && testGroupTestNumericParameter.length > 0 &&\r\n                        <>\r\n                            <Row>\r\n                                <Col >\r\n                                    <div className=\"horizontal-line\"></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                {specLimitFieldName.map(item => {\r\n                                    return (\r\n                                        <Col md=\"4\">\r\n                                            <FormGroup>\r\n                                                <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                                <ReadOnlyText>{testGroupTestNumericParameter[0][Object.keys(item)[0]]}</ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    )\r\n                                })}\r\n                            </Row>\r\n                        </>\r\n                    }\r\n                    { testGroupTestFormula && testGroupTestFormula.length > 0 &&\r\n                        <>\r\n                            <Row>\r\n                                <Col >\r\n                                    <div className=\"horizontal-line\"></div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                {formulaFieldName.map(item => {\r\n                                    return (\r\n                                        <Col md=\"6\">\r\n                                            <FormGroup>\r\n                                                <FormLabel>{props.intl.formatMessage({ id: Object.values(item)[0] })}</FormLabel>\r\n                                                <ReadOnlyText>{testGroupTestFormula[0][Object.keys(item)[0]]}</ReadOnlyText>\r\n                                            </FormGroup>\r\n                                        </Col>\r\n                                    )\r\n                                })}\r\n                            </Row>\r\n                        </>\r\n                    }\r\n                </>\r\n            }\r\n            { selectedParameter.nparametertypecode === parameterType.PREDEFINED &&\r\n                <PredefinedParameterTab\r\n                    primaryKeyName=\"ntestgrouptestpredefcode\"\r\n                    predefinedParameterList={testGroupTestPredefinedParameter}\r\n                    selectedParameter={selectedParameter}\r\n                    userInfo={userInfo}\r\n                    optionalData={{ testgroupspecification: selectedSpecification }}\r\n                    methodUrl=\"TestGroupPredefParameter\"\r\n                    addId={props.controlMap.has(\"AddCodedResult\") && props.controlMap.get(\"AddCodedResult\").ncontrolcode}\r\n                    editId={props.controlMap.has(\"EditCodedResult\") && props.controlMap.get(\"EditCodedResult\").ncontrolcode}\r\n                    deleteId={props.controlMap.has(\"DeleteCodedResult\") && props.controlMap.get(\"DeleteCodedResult\").ncontrolcode}\r\n                    userRoleControlRights={props.userRoleControlRights}\r\n                    deleteAction={props.deleteAction}\r\n                    onSwitchChange={props.onSwitchChange}\r\n                    openModal={props.addTestGroupCodedResult}\r\n                />\r\n            }\r\n            { selectedParameter.nparametertypecode === parameterType.CHARACTER &&\r\n                testGroupCharParameter.length > 0 && props.testGroupCharParameter[0].scharname &&\r\n                props.testGroupCharParameter[0].scharname !== \"null\" &&\r\n                <>\r\n                    <Row>\r\n                        <Col >\r\n                            <div className=\"horizontal-line\"></div>\r\n                        </Col>\r\n                    </Row>\r\n                    <Col md={12}>\r\n                        <FormGroup>\r\n                            <FormLabel>{props.intl.formatMessage({ id: \"IDS_TESTCHARACTER\" })}</FormLabel>\r\n                            <ReadOnlyText>{props.testGroupCharParameter[0].scharname}</ReadOnlyText>\r\n                        </FormGroup>\r\n                    </Col>\r\n                </>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default injectIntl(TestGroupParameterAccordion);\r\n"]},"metadata":{},"sourceType":"module"}