{"ast":null,"code":"import { immutableEqual } from \"../utils/stuff\";\nimport { Utils } from \"@react-awesome-query-builder/core\";\nvar validateAndFixTree = Utils.validateAndFixTree;\nexport var createValidationMemo = function createValidationMemo() {\n  var originalTree;\n  var validatedTree;\n  var configId;\n  return function (config, tree, oldConfig) {\n    if (!tree) {\n      return null;\n    }\n\n    if (config.__configId === configId && (immutableEqual(tree, originalTree) || immutableEqual(tree, validatedTree))) {\n      return validatedTree;\n    } else {\n      configId = config.__configId;\n      originalTree = tree;\n      validatedTree = validateAndFixTree(tree, null, config, oldConfig || config);\n      return validatedTree;\n    }\n  };\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@react-awesome-query-builder/ui/esm/utils/validation.js"],"names":["immutableEqual","Utils","validateAndFixTree","createValidationMemo","originalTree","validatedTree","configId","config","tree","oldConfig","__configId"],"mappings":"AAAA,SAASA,cAAT,QAA+B,gBAA/B;AACA,SAASC,KAAT,QAAsB,mCAAtB;AACA,IAAIC,kBAAkB,GAAGD,KAAK,CAACC,kBAA/B;AACA,OAAO,IAAIC,oBAAoB,GAAG,SAASA,oBAAT,GAAgC;AAChE,MAAIC,YAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,QAAJ;AACA,SAAO,UAAUC,MAAV,EAAkBC,IAAlB,EAAwBC,SAAxB,EAAmC;AACxC,QAAI,CAACD,IAAL,EAAW;AACT,aAAO,IAAP;AACD;;AACD,QAAID,MAAM,CAACG,UAAP,KAAsBJ,QAAtB,KAAmCN,cAAc,CAACQ,IAAD,EAAOJ,YAAP,CAAd,IAAsCJ,cAAc,CAACQ,IAAD,EAAOH,aAAP,CAAvF,CAAJ,EAAmH;AACjH,aAAOA,aAAP;AACD,KAFD,MAEO;AACLC,MAAAA,QAAQ,GAAGC,MAAM,CAACG,UAAlB;AACAN,MAAAA,YAAY,GAAGI,IAAf;AACAH,MAAAA,aAAa,GAAGH,kBAAkB,CAACM,IAAD,EAAO,IAAP,EAAaD,MAAb,EAAqBE,SAAS,IAAIF,MAAlC,CAAlC;AACA,aAAOF,aAAP;AACD;AACF,GAZD;AAaD,CAjBM","sourcesContent":["import { immutableEqual } from \"../utils/stuff\";\nimport { Utils } from \"@react-awesome-query-builder/core\";\nvar validateAndFixTree = Utils.validateAndFixTree;\nexport var createValidationMemo = function createValidationMemo() {\n  var originalTree;\n  var validatedTree;\n  var configId;\n  return function (config, tree, oldConfig) {\n    if (!tree) {\n      return null;\n    }\n    if (config.__configId === configId && (immutableEqual(tree, originalTree) || immutableEqual(tree, validatedTree))) {\n      return validatedTree;\n    } else {\n      configId = config.__configId;\n      originalTree = tree;\n      validatedTree = validateAndFixTree(tree, null, config, oldConfig || config);\n      return validatedTree;\n    }\n  };\n};"]},"metadata":{},"sourceType":"module"}