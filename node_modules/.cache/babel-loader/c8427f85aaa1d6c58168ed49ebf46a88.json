{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\testgroup\\\\AddTestGroupSpecification.jsx\";\nimport React from 'react';\nimport { Row, Col, Form } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport { injectIntl } from 'react-intl';\nimport { SampleType, transactionStatus, MaterialType } from '../../components/Enumeration';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { CONTAINERTYPE } from '../../components/Enumeration';\nimport { faClosedCaptioning } from '@fortawesome/free-solid-svg-icons';\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\nimport { useState, useEffect } from 'react';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { TreeDesign } from '../registration/registration.styled';\n\nconst AddTestGroupSpecification = props => {\n  const [copyProfileName, setCopyProfileName] = useState(props.copyProfileName);\n  const [copyFocusKey, setCopyFocusKey] = useState(props.focusKey);\n  const [copyActiveKey, setCopyActiveKey] = useState(props.activeKey);\n  useEffect(() => {\n    setCopyProfileName(props.copyProfileName);\n    setCopyFocusKey(props.focusKey);\n    setCopyActiveKey(props.activeKey);\n  }, [props.copyProfileName, props.focusKey, props.activeKey]);\n\n  function onCopyTreeClick(event) {\n    setCopyFocusKey(event.key);\n    setCopyActiveKey(event.key);\n    let manipulationCode = -1;\n    let profileName = props.intl.formatMessage({\n      id: \"IDS_SELECTVALIDPROFILE\"\n    });\n\n    if (!event.hasNodes) {\n      manipulationCode = event.item.ntemplatemanipulationcode;\n      profileName = event.label;\n    }\n\n    setCopyProfileName(profileName);\n    props.onCopyTreeClick(manipulationCode, profileName, event.key, event.key);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, props.tempFilterData.nsampletypecode && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO && props.selectedRecord.ncategorybasedflow === transactionStatus.NO ? /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sproductname\",\n    label: props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.genericLabel && props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],\n    value: props.selectedRecord ? props.selectedRecord[\"sproductname\"] : \"\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sproductcatname\",\n    label: props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode],\n    value: props.selectedRecord ? props.selectedRecord[\"sproductcatname\"] : \"\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sspecname\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SPECNAME\"\n    }),\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event, 1),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SPECNAME\"\n    }),\n    value: props.selectedRecord ? props.selectedRecord[\"sspecname\"] : \"\",\n    isMandatory: \"*\",\n    required: true,\n    maxLength: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, props.userInfo.istimezoneshow === transactionStatus.YES && /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ntzexpirydate\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TIMEZONE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.timeZoneList,\n    optionId: \"ntimezonecode\",\n    optionValue: \"stimezoneid\",\n    value: props.selectedRecord[\"ntzexpirydate\"],\n    defaultValue: props.selectedRecord[\"ntzexpirydate\"],\n    isMandatory: true,\n    isSearchable: true,\n    isClearable: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    onChange: value => props.onComboChange(value, 'ntzexpirydate', 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 25\n    }\n  }))), props.operation === \"copy\" ? \"\" : /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ntransactionstatus\",\n    label: props.intl.formatMessage({\n      id: \"IDS_ACTIVE\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [transactionStatus.ACTIVE, transactionStatus.DEACTIVE]),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_ACTIVE\"\n    }),\n    defaultValue: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n    checked: props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  })), props.filterData && props.filterData.nproductcatcode.item.nmaterialtypecode == MaterialType.IQCSTANDARDMATERIALTYPE ? \"\" : /*#__PURE__*/React.createElement(Col, {\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(CustomSwitch, {\n    name: \"ncomponentrequired\",\n    label: props.genericLabel && props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] + \" \" + props.intl.formatMessage({\n      id: \"IDS_REQUIRED\"\n    }),\n    type: \"switch\",\n    onChange: event => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO]),\n    placeholder: props.genericLabel && props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] + \" \" + props.intl.formatMessage({\n      id: \"IDS_REQUIRED\"\n    }) // defaultValue={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\n    //  checked={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\n    ,\n    checked: props.selectedRecord ? props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false : false //disabled={ props.nsampletypecode  === SampleType.CLINICALTYPE && props.settings && parseInt(props.settings[22]) === transactionStatus.YES ? true : false }\n    //    disabled={props.tempFilterData && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? true : false }\n    ,\n    disabled: props.tempFilterData && props.tempFilterData.nsampletypecode.item.ncomponentrequired === transactionStatus.YES ? true : false // disabled={true}//{props.operation===\"copy\"?true:false}\n    //   disabled={props.nsampletypecode === SampleType.CLINICALTYPE ? true : false}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }))), props.operation === \"copy\" ? /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    name: \"sselectedprofilename\",\n    label: props.intl.formatMessage({\n      id: \"IDS_SELECTEDPROFILE\"\n    }),\n    type: \"text\",\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTEDPROFILE\"\n    }),\n    value: copyProfileName || \"\",\n    readOnly: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }))) : \"\", props.operation === \"copy\" ? /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(TreeDesign, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormTreeMenu, {\n    data: props.data,\n    hasSearch: false,\n    handleTreeClick: event => onCopyTreeClick(event),\n    initialOpenNodes: props.initialOpenNodes,\n    focusKey: copyFocusKey,\n    activeKey: copyActiveKey,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 21\n    }\n  })))) : \"\");\n};\n\nexport default injectIntl(AddTestGroupSpecification);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/testgroup/AddTestGroupSpecification.jsx"],"names":["React","Row","Col","Form","FormInput","DateTimePicker","CustomSwitch","injectIntl","SampleType","transactionStatus","MaterialType","FormSelectSearch","CONTAINERTYPE","faClosedCaptioning","FormTreeMenu","useState","useEffect","PerfectScrollbar","TreeDesign","AddTestGroupSpecification","props","copyProfileName","setCopyProfileName","copyFocusKey","setCopyFocusKey","focusKey","copyActiveKey","setCopyActiveKey","activeKey","onCopyTreeClick","event","key","manipulationCode","profileName","intl","formatMessage","id","hasNodes","item","ntemplatemanipulationcode","label","tempFilterData","nsampletypecode","ncategorybasedflowrequired","NO","selectedRecord","ncategorybasedflow","genericLabel","userInfo","slanguagetypecode","onInputOnChange","istimezoneshow","YES","timeZoneList","value","onComboChange","operation","ACTIVE","DEACTIVE","filterData","nproductcatcode","nmaterialtypecode","IQCSTANDARDMATERIALTYPE","ncomponentrequired","data","initialOpenNodes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Form } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport { SampleType, transactionStatus,MaterialType } from '../../components/Enumeration';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { CONTAINERTYPE } from '../../components/Enumeration';\r\nimport { faClosedCaptioning } from '@fortawesome/free-solid-svg-icons';\r\nimport FormTreeMenu from '../../components/form-tree-menu/form-tree-menu.component';\r\nimport {useState, useEffect} from 'react';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport { TreeDesign } from '../registration/registration.styled';\r\n\r\nconst AddTestGroupSpecification = props => {\r\n\r\n    const [copyProfileName, setCopyProfileName]= useState(props.copyProfileName);\r\n    const [copyFocusKey, setCopyFocusKey]=useState(props.focusKey)\r\n    const [copyActiveKey, setCopyActiveKey]=useState(props.activeKey)\r\n    useEffect(() => { \r\n        setCopyProfileName(props.copyProfileName);\r\n        setCopyFocusKey(props.focusKey);\r\n        setCopyActiveKey(props.activeKey);\r\n    }, [props.copyProfileName,props.focusKey,props.activeKey]);\r\n    function onCopyTreeClick (event){\r\n        setCopyFocusKey(event.key);\r\n        setCopyActiveKey(event.key);\r\n        let manipulationCode = -1;\r\n        let profileName = props.intl.formatMessage({ id: \"IDS_SELECTVALIDPROFILE\" });\r\n        if(!event.hasNodes){  \r\n            manipulationCode = event.item.ntemplatemanipulationcode;  \r\n            profileName = event.label;      \r\n        }\r\n        setCopyProfileName(profileName);\r\n        props.onCopyTreeClick(manipulationCode, profileName, event.key, event.key );\r\n    }\r\n    return (\r\n        <>\r\n            <Row>\r\n                <Col md={12}>\r\n                    {(props.tempFilterData.nsampletypecode && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.NO) &&\r\n                    (props.selectedRecord.ncategorybasedflow === transactionStatus.NO)  ?\r\n                        <FormInput\r\n                            name={\"sproductname\"}\r\n                            label={props.genericLabel &&  props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] }\r\n                            type=\"text\"\r\n                            onChange={(event) => props.onInputOnChange(event, 1)}\r\n                            placeholder={props.genericLabel &&  props.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode]}\r\n                            value={props.selectedRecord ? props.selectedRecord[\"sproductname\"] : \"\"}\r\n                            readOnly={true}\r\n                        />\r\n\r\n                        : <FormInput\r\n                            name={\"sproductcatname\"}\r\n                            label={props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] }\r\n                            type=\"text\"\r\n                            onChange={(event) => props.onInputOnChange(event, 1)}\r\n                            placeholder={props.genericLabel && props.genericLabel[\"ProductCategory\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] }\r\n                            value={props.selectedRecord ? props.selectedRecord[\"sproductcatname\"] : \"\"}\r\n                            readOnly={true}\r\n                        />\r\n                    }\r\n                    <FormInput\r\n                        name={\"sspecname\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_SPECNAME\" })}\r\n                        type=\"text\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1)}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SPECNAME\" })}\r\n                        value={props.selectedRecord ? props.selectedRecord[\"sspecname\"] : \"\"}\r\n                        isMandatory=\"*\"\r\n                        required={true}\r\n                        maxLength={100}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {/* <Col md={props.userInfo.istimezoneshow ? 6 : 12}> */}\r\n                    {/* <Row>\r\n                        <Col md={6}> */}\r\n\r\n\r\n                    {/* <DateTimePicker\r\n                        name={\"dexpirydate\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_EXPIRYDATEWOTIME\" })}\r\n                        className='form-control'\r\n                        placeholderText=\"Select date..\"\r\n                        selected={props.selectedRecord[\"dexpirydate\"]}\r\n                        //dateFormat={\"dd/MM/yyyy\"}\r\n                        dateFormat={props.userInfo.ssitedate}\r\n                        timeInputLabel={props.intl.formatMessage({ id: \"IDS_TIME\" })}\r\n                        showTimeInput={false}\r\n                        isClearable={false}\r\n                        onChange={date => props.handleDateChange(\"dexpirydate\", date)}\r\n                        value={props.selectedRecord[\"dexpirydate\"]}\r\n                        isMandatory={true}\r\n                        required={true}\r\n                    />\r\n                </Col> */}\r\n                {props.userInfo.istimezoneshow === transactionStatus.YES  &&\r\n                    <Col md={6}>\r\n                        <FormSelectSearch\r\n                            name={\"ntzexpirydate\"}\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={props.timeZoneList}\r\n                            optionId=\"ntimezonecode\"\r\n                            optionValue=\"stimezoneid\"\r\n                            value={props.selectedRecord[\"ntzexpirydate\"]}\r\n                            defaultValue={props.selectedRecord[\"ntzexpirydate\"]}\r\n                            isMandatory={true}\r\n                            isSearchable={true}\r\n                            isClearable={false}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                            onChange={(value) => props.onComboChange(value, 'ntzexpirydate', 1)}\r\n                        />\r\n                        {/* </Col>\r\n                    </Row> */}\r\n                    </Col>\r\n                }\r\n                {/* <Col md={6}>\r\n                    <FormSelectSearch\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_PROJECTTYPE\" })}\r\n                            isSearchable={true}\r\n                            name={\"nprojecttypecode\"}\r\n                            isDisabled={false}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            isMandatory={false}\r\n                            isClearable={true}\r\n                            options={props.projectTypeList}\r\n                            value={props.selectedRecord[\"nprojecttypecode\"] || \"\"}\r\n                            defaultValue={props.selectedRecord[\"nprojecttypecode\"]}\r\n                            onChange={(event) => props.onComboChange(event, \"nprojecttypecode\", 3)}\r\n                            closeMenuOnSelect={true}\r\n                        >\r\n                        </FormSelectSearch>\r\n                </Col>\r\n                 <Col md={6}>\r\n                        <FormSelectSearch\r\n                            name={\"nprojectcode\"}\r\n                            formLabel={props.intl.formatMessage({ id: \"IDS_PROJECTCODE\" })}\r\n                            placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                            options={props.projectList}\r\n                            value={props.selectedRecord[\"nprojectcode\"]}\r\n                            defaultValue={props.selectedRecord[\"nprojectcode\"]}\r\n                            isMandatory={true}\r\n                            isSearchable={true}\r\n                            isClearable={false}\r\n                            closeMenuOnSelect={true}\r\n                            alphabeticalSort={true}\r\n                            onChange={(value) => props.onComboChange(value, 'nprojectcode', 1)}\r\n                        />\r\n                        \r\n                    </Col> */}\r\n            </Row>\r\n            {props.operation === \"copy\" ? \"\" :\r\n            <Row>\r\n                <Col md={4}>\r\n                    <CustomSwitch\r\n                        name={\"ntransactionstatus\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_ACTIVE\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.ACTIVE, transactionStatus.DEACTIVE])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_ACTIVE\" })}\r\n                        defaultValue={props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false}\r\n                        checked={props.selectedRecord[\"ntransactionstatus\"] === transactionStatus.ACTIVE ? true : false}\r\n                    >\r\n                    </CustomSwitch>\r\n                </Col>\r\n\r\n          \r\n               \r\n                { \r\n                props.filterData && props.filterData.nproductcatcode.item.nmaterialtypecode == MaterialType.IQCSTANDARDMATERIALTYPE ? \"\" :\r\n                 <Col md={4}>\r\n                    <CustomSwitch\r\n                        name={\"ncomponentrequired\"}\r\n                        label={props.genericLabel && props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] +\" \"+ props.intl.formatMessage({ id: \"IDS_REQUIRED\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO])}\r\n                        placeholder={ props.genericLabel && props.genericLabel[\"Component\"][\"jsondata\"][\"sdisplayname\"][props.userInfo.slanguagetypecode] +\" \"+ props.intl.formatMessage({ id: \"IDS_REQUIRED\" })}\r\n                       // defaultValue={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\r\n                      //  checked={props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false}\r\n                        checked={props.selectedRecord ? props.selectedRecord[\"ncomponentrequired\"] === transactionStatus.YES ? true : false : false}\r\n                        //disabled={ props.nsampletypecode  === SampleType.CLINICALTYPE && props.settings && parseInt(props.settings[22]) === transactionStatus.YES ? true : false }\r\n                  //    disabled={props.tempFilterData && props.tempFilterData.nsampletypecode.item.ncategorybasedflowrequired === transactionStatus.YES ? true : false }\r\n                        disabled={props.tempFilterData && props.tempFilterData.nsampletypecode.item.ncomponentrequired === transactionStatus.YES ? true : false }\r\n\r\n                        // disabled={true}//{props.operation===\"copy\"?true:false}\r\n                    //   disabled={props.nsampletypecode === SampleType.CLINICALTYPE ? true : false}\r\n\r\n                    >\r\n                    </CustomSwitch>\r\n                </Col> \r\n            }\r\n           \r\n\r\n                {/* <Col md={4} >\r\n                    <CustomSwitch\r\n                        name={\"nclinicalspec\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_CLINICALSPEC\" })}\r\n                        type=\"switch\"\r\n                        onChange={(event) => props.onInputOnChange(event, 1, [transactionStatus.YES, transactionStatus.NO])}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_CLINICALSPEC\" })}\r\n                        defaultValue={props.selectedRecord[\"nclinicalspec\"] === transactionStatus.YES ? true : false}\r\n                        checked={props.selectedRecord[\"nclinicalspec\"] === transactionStatus.YES ? true : false}\r\n                    // disabled={true}//{props.operation===\"copy\"?true:false}\r\n                    >\r\n                    </CustomSwitch>\r\n                </Col> */}\r\n\r\n  \r\n            </Row>\r\n             }\r\n         {props.operation === \"copy\" ? \r\n            <Row>\r\n                <Col md={12}>\r\n                    <FormInput\r\n                        name={\"sselectedprofilename\"}\r\n                        label={props.intl.formatMessage({ id: \"IDS_SELECTEDPROFILE\" })}\r\n                        type=\"text\"\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTEDPROFILE\" })}\r\n                        value={copyProfileName || \"\"}\r\n                        readOnly={true}\r\n                    /> \r\n                </Col>  \r\n            </Row>\r\n             : \"\"}\r\n         {props.operation === \"copy\" ?  \r\n           <Col  md={12} >\r\n            <TreeDesign>\r\n                <PerfectScrollbar>\r\n                  \r\n                    <FormTreeMenu\r\n                       data={props.data}\r\n                       hasSearch={false}\r\n                       handleTreeClick={(event)=>onCopyTreeClick(event)}\r\n                       initialOpenNodes={props.initialOpenNodes}\r\n                       focusKey={copyFocusKey}\r\n                       activeKey={copyActiveKey}\r\n                    />\r\n                  \r\n                </PerfectScrollbar>\r\n            </TreeDesign>\r\n            </Col>\r\n          : \"\"}\r\n        </>\r\n    );\r\n   \r\n};\r\n\r\nexport default injectIntl(AddTestGroupSpecification);"]},"metadata":{},"sourceType":"module"}