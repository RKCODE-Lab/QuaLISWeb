{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\mail\\\\emailtemplate\\\\EmailTemplate.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport { toast } from 'react-toastify';\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../../components/data-grid/data-grid.component';\nimport AddTemplate from './AddTemplate';\nimport Esign from '../../audittrail/Esign';\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\nimport { ListWrapper } from '../../../components/client-group.styles';\nimport { callService, crudMaster, fetchEmailTemplateById, validateEsignCredential, openEmailTemplateModal, updateStore, comboChangeEmailTag } from '../../../actions';\nimport { transactionStatus } from '../../../components/Enumeration';\nimport { constructOptionList, getControlMap, showEsign } from '../../../components/CommonScript';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes'; // import './Drag.css';\n\nimport { EditorUtils, ProseMirror } from '@progress/kendo-react-editor';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass EmailTemplate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onkendoChange = event => {\n      this.setState({\n        value: event.html\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData !== null) {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[fieldName] = comboData;\n        selectedRecord[\"stemplatebody\"] = \"\";\n        let Map = {};\n        Map[\"userinfo\"] = this.props.Login.userInfo;\n        Map[\"nemailtagcode\"] = comboData.value; // this.setState({ selectedRecord, value: \"\" });\n\n        this.props.comboChangeEmailTag(Map, this.props.Login.masterData, selectedRecord, this.state.value);\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        inputData: {\n          [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\n          \"userinfo\": this.props.Login.userInfo\n        },\n        operation: inputData.operation,\n        displayName: this.props.Login.inputParam.displayName,\n        dataState: this.state.dataState\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: this.props.intl.formatMessage({\n              id: this.props.Login.inputParam.displayName\n            }),\n            operation: inputData.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n      }\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        userInfo: this.props.Login.userInfo,\n        displayName: this.props.Login.inputParam.displayName\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n      const selectedRecord = JSON.parse(JSON.stringify(this.state.selectedRecord));\n\n      if (this.props.Login.operation === \"update\") {\n        // edit\n        postParam = {\n          inputListName: \"emailtemplate\",\n          selectedObject: \"selectedEmailTemplate\",\n          primaryKeyField: \"nemailtemplatecode\"\n        };\n        inputData[\"emailtemplate\"] = selectedRecord;\n        this.fieldList.map(item => {\n          return inputData[\"emailtemplate\"][item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n        });\n      } else {\n        inputData[\"emailtemplate\"] = {\n          \"nsitecode\": this.props.Login.userInfo.nmastersitecode\n        };\n        this.fieldList.map(item => {\n          return inputData[\"emailtemplate\"][item] = selectedRecord[item] ? selectedRecord[item] : \"\";\n        });\n      }\n\n      inputData[\"emailtemplate\"][\"nemailtagcode\"] = selectedRecord[\"nemailtagcode\"] ? selectedRecord[\"nemailtagcode\"].value : -1; //  inputData[\"emailtemplate\"][\"ninterfacetype\"] = this.state.selectedRecord[\"ninterfacetype\"] ? this.state.selectedRecord[\"ninterfacetype\"].value : -1;\n\n      inputData[\"emailtemplate\"][\"nstatus\"] = selectedRecord[\"nstatus\"];\n      inputData[\"emailtemplate\"][\"stemplatebody\"] = this.state.value ? this.state.value : \"\";\n      inputData[\"emailtemplate\"][\"nregtypecode\"] = selectedRecord[\"nregtypecode\"] ? selectedRecord[\"nregtypecode\"] : -1;\n      inputData[\"emailtemplate\"][\"nregsubtypecode\"] = selectedRecord[\"nregtypecode\"] ? selectedRecord[\"nregtypecode\"] : -1;\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n        inputData: inputData,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        postParam,\n        searchRef: this.searchRef\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            saveType\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openModal\");\n      } // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\n\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.formRef = React.createRef();\n    this.closeModal = this.closeModal.bind(this);\n    this.extractedColumnList = [];\n    this.fieldList = [];\n    const dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      Tag: [],\n      selectedRecord: {},\n      dataResult: [],\n      dataState: dataState,\n      isOpen: false,\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      emailParam: [],\n      content: {},\n      //  value: EditorUtils.createDocument(\n      //      new ProseMirror.Schema({ nodes: EditorUtils.nodes, marks: EditorUtils.marks })\n      //  )\n      value: ''\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    let primaryKeyField = \"\";\n\n    if (this.props.Login.inputParam !== undefined) {\n      this.extractedColumnList = [{\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_TEMPLATENAME\",\n        \"dataField\": \"stemplatename\",\n        \"width\": \"200px\"\n      }, {\n        \"controlType\": \"textbox\",\n        \"idsName\": \"IDS_SUBJECT\",\n        \"dataField\": \"ssubject\",\n        \"width\": \"200px\"\n      }, //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_TEMPLATEBODY\", \"dataField\": \"stemplatebody\", \"width\": \"200px\" },\n      {\n        \"controlType\": \"selectbox\",\n        \"idsName\": \"IDS_EMAILTAG\",\n        \"dataField\": \"stagname\",\n        \"width\": \"200px\"\n      }];\n      this.detailedFieldList = [{\n        \"idsName\": \"IDS_TEMPLATEBODY\",\n        \"dataField\": \"stemplatebody\",\n        \"width\": \"300px\",\n        \"isHTML\": true,\n        \"columnSize\": \"12\"\n      }];\n      primaryKeyField = \"nemailtemplatecode\";\n      this.fieldList = [\"stemplatename\", \"ssubject\", \"stemplatebody\"];\n    }\n\n    const mandatoryFields = [{\n      \"mandatory\": true,\n      \"idsName\": \"IDS_TEMPLATENAME\",\n      \"dataField\": \"stemplatename\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_SUBJECT\",\n      \"dataField\": \"ssubject\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }, {\n      \"mandatory\": true,\n      \"idsName\": \"IDS_EMAILTAG\",\n      \"dataField\": \"nemailtagcode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl)) && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\n    const editParam = {\n      screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({\n        id: this.props.Login.inputParam.displayName\n      }),\n      primaryKeyField: \"nemailtemplatecode\",\n      operation: \"update\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editID\n    };\n    const deleteParam = {\n      operation: \"delete\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: primaryKeyField,\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      detailedFieldList: this.detailedFieldList,\n      expandField: \"expanded\",\n      formatMessage: this.props.intl.formatMessage,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      fetchRecord: this.props.fetchEmailTemplateById,\n      deleteRecord: this.deleteRecord,\n      reloadData: this.reloadData,\n      editParam: editParam,\n      deleteParam: deleteParam,\n      addRecord: () => this.props.openEmailTemplateModal(\"IDS_MAILTEMPLATE\", \"create\", \"nemailtemplatecode\", this.props.Login.masterData, this.props.Login.userInfo, addId),\n      isComponent: true,\n      pageable: true,\n      isActionRequired: true,\n      isToolBarRequired: true,\n      scrollable: \"scrollable\",\n      hasDynamicColSize: true,\n      selectedId: this.props.Login.selectedId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: mandatoryFields,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        formatMessage: this.props.intl.formatMessage,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }\n      }) : /*#__PURE__*/React.createElement(AddTemplate, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        Tag: this.state.Tag || [],\n        EmailTagParameter: this.props.Login.EmailTagParameter || [],\n        onkendoChange: this.onkendoChange,\n        value: this.state.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidUpdate(previousProps) {\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData,\n          dataResult: process(this.props.Login.masterData, this.state.dataState)\n        });\n      } else {\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          data: this.props.Login.masterData,\n          isOpen: false,\n          dataState,\n          dataResult: process(this.props.Login.masterData, dataState)\n        });\n      }\n    } else if (this.props.Login.value !== previousProps.Login.value) {\n      this.setState({\n        value: this.props.Login.selectedRecord[\"stemplatebody\"] ? this.props.Login.selectedRecord[\"stemplatebody\"] : \"\",\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        selectedRecord: this.props.Login.selectedRecord,\n        value: this.props.Login.selectedRecord && this.props.Login.selectedRecord[\"stemplatebody\"] ? this.props.Login.selectedRecord[\"stemplatebody\"] : \"\"\n      });\n    }\n\n    if (this.props.Login.Tag !== previousProps.Login.Tag) {\n      const Tag = constructOptionList(this.props.Login.Tag || [], \"nemailtagcode\", \"stagname\", undefined, undefined, undefined);\n      const TagList = Tag.get(\"OptionList\");\n      this.setState({\n        Tag: TagList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  fetchEmailTemplateById,\n  validateEsignCredential,\n  openEmailTemplateModal,\n  updateStore,\n  comboChangeEmailTag\n})(injectIntl(EmailTemplate));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/mail/emailtemplate/EmailTemplate.jsx"],"names":["React","connect","injectIntl","Row","Col","toast","process","DataGrid","AddTemplate","Esign","SlideOutModal","ListWrapper","callService","crudMaster","fetchEmailTemplateById","validateEsignCredential","openEmailTemplateModal","updateStore","comboChangeEmailTag","transactionStatus","constructOptionList","getControlMap","showEsign","DEFAULT_RETURN","EditorUtils","ProseMirror","mapStateToProps","state","Login","EmailTemplate","Component","constructor","props","dataStateChange","event","setState","dataResult","masterData","dataState","closeModal","loadEsign","openModal","selectedRecord","operation","updateInfo","typeName","data","selectedId","onkendoChange","value","html","onInputOnChange","target","type","name","checked","YES","NO","onComboChange","comboData","fieldName","Map","userInfo","deleteRecord","inputData","inputParam","classUrl","methodUrl","toLowerCase","displayName","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","intl","formatMessage","id","reloadData","onSaveClick","saveType","formRef","postParam","undefined","JSON","parse","stringify","inputListName","selectedObject","primaryKeyField","fieldList","map","item","nmastersitecode","searchRef","ncontrolcode","validateEsign","sreason","nreasoncode","spredefinedreason","label","password","createRef","bind","extractedColumnList","skip","take","settings","parseInt","masterStatus","error","Tag","isOpen","controlMap","emailParam","content","getDerivedStateFromProps","warn","render","detailedFieldList","mandatoryFields","addId","has","concat","get","editID","editParam","deleteParam","EmailTagParameter","componentDidUpdate","previousProps","Object","values","push","TagList","componentWillUnmount","modalName"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,mDAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,aAAP,MAA0B,mDAA1B;AACA,SAASC,WAAT,QAA4B,yCAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,EAAkCC,sBAAlC,EAA0DC,uBAA1D,EAAmFC,sBAAnF,EAA2GC,WAA3G,EAAwHC,mBAAxH,QAAmJ,kBAAnJ;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AACA,SAASC,mBAAT,EAA8BC,aAA9B,EAA6CC,SAA7C,QAA8D,kCAA9D;AACA,SAASC,cAAT,QAA+B,6BAA/B,C,CACA;;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,8BAAzC;;AAGA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAQ;AAAEC,IAAAA,KAAK,EAAED,KAAK,CAACC;AAAf,GAAR;AACH,CAFD;;AAIA,MAAMC,aAAN,SAA4B7B,KAAK,CAAC8B,SAAlC,CAA4C;AAExCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA6CnBC,eA7CmB,GA6CAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAE9B,OAAO,CAAC,KAAK0B,KAAL,CAAWJ,KAAX,CAAiBS,UAAlB,EAA8BH,KAAK,CAACI,SAApC,CADT;AAEVA,QAAAA,SAAS,EAAEJ,KAAK,CAACI;AAFP,OAAd;AAIH,KAlDkB;;AAAA,SAqDnBC,UArDmB,GAqDN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKR,KAAL,CAAWJ,KAAX,CAAiBY,SAAjC;AACA,UAAIC,SAAS,GAAG,KAAKT,KAAL,CAAWJ,KAAX,CAAiBa,SAAjC;AACA,UAAIC,cAAc,GAAG,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,cAAtC;;AACA,UAAI,KAAKV,KAAL,CAAWJ,KAAX,CAAiBY,SAArB,EAAgC;AAC5B,YAAI,KAAKR,KAAL,CAAWJ,KAAX,CAAiBe,SAAjB,KAA+B,QAAnC,EAA6C;AACzCH,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,SAAS,GAAG,KAAZ;AACH,SAHD,MAGO;AACHD,UAAAA,SAAS,GAAG,KAAZ;AACH;AACJ,OAPD,MAOO;AACHC,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,cAAc,GAAG,EAAjB;AACH;;AACD,YAAME,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAEtB,cADK;AAEfuB,QAAAA,IAAI,EAAE;AAAEL,UAAAA,SAAF;AAAaD,UAAAA,SAAb;AAAwBE,UAAAA,cAAxB;AAAuCK,UAAAA,UAAU,EAAC;AAAlD;AAFS,OAAnB;AAIA,WAAKf,KAAL,CAAWf,WAAX,CAAuB2B,UAAvB;AACH,KAzEkB;;AAAA,SAuPnBI,aAvPmB,GAuPFd,KAAD,IAAW;AACvB,WAAKC,QAAL,CAAc;AAAEc,QAAAA,KAAK,EAAEf,KAAK,CAACgB;AAAf,OAAd;AACH,KAzPkB;;AAAA,SA2PnBC,eA3PmB,GA2PAjB,KAAD,IAAW;AACzB,YAAMQ,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAApD;;AACA,UAAIR,KAAK,CAACkB,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCX,QAAAA,cAAc,CAACR,KAAK,CAACkB,MAAN,CAAaE,IAAd,CAAd,GAAoCpB,KAAK,CAACkB,MAAN,CAAaG,OAAb,KAAyB,IAAzB,GAAgCpC,iBAAiB,CAACqC,GAAlD,GAAwDrC,iBAAiB,CAACsC,EAA9G;AACH,OAFD,MAGK;AACDf,QAAAA,cAAc,CAACR,KAAK,CAACkB,MAAN,CAAaE,IAAd,CAAd,GAAoCpB,KAAK,CAACkB,MAAN,CAAaH,KAAjD;AACH;;AACD,WAAKd,QAAL,CAAc;AAAEO,QAAAA;AAAF,OAAd;AACH,KApQkB;;AAAA,SAsQnBgB,aAtQmB,GAsQH,CAACC,SAAD,EAAYC,SAAZ,KAA0B;AACtC,UAAID,SAAS,KAAK,IAAlB,EAAwB;AACpB,cAAMjB,cAAc,GAAG,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAApD;AACAA,QAAAA,cAAc,CAACkB,SAAD,CAAd,GAA4BD,SAA5B;AACAjB,QAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACA,YAAImB,GAAG,GAAG,EAAV;AACAA,QAAAA,GAAG,CAAC,UAAD,CAAH,GAAkB,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBkC,QAAnC;AACAD,QAAAA,GAAG,CAAC,eAAD,CAAH,GAAuBF,SAAS,CAACV,KAAjC,CANoB,CAOpB;;AACA,aAAKjB,KAAL,CAAWd,mBAAX,CAA+B2C,GAA/B,EAAoC,KAAK7B,KAAL,CAAWJ,KAAX,CAAiBS,UAArD,EAAiEK,cAAjE,EAAiF,KAAKf,KAAL,CAAWsB,KAA5F;AACH;AACJ,KAjRkB;;AAAA,SAmRnBc,YAnRmB,GAmRHC,SAAD,IAAe;AAC1B,YAAMC,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BC,QADvB;AAEfC,QAAAA,SAAS,EAAE,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BE,SAFxB;AAIfH,QAAAA,SAAS,EAAE;AACP,WAAC,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BE,SAA5B,CAAsCC,WAAtC,EAAD,GAAuDJ,SAAS,CAACtB,cAD1D;AAEP,sBAAY,KAAKV,KAAL,CAAWJ,KAAX,CAAiBkC;AAFtB,SAJI;AAQfnB,QAAAA,SAAS,EAAEqB,SAAS,CAACrB,SARN;AASf0B,QAAAA,WAAW,EAAE,KAAKrC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BI,WAT1B;AAUf/B,QAAAA,SAAS,EAAE,KAAKX,KAAL,CAAWW;AAVP,OAAnB;AAYA,YAAMgC,WAAW,GAAGhD,SAAS,CAAC,KAAKU,KAAL,CAAWJ,KAAX,CAAiB2C,qBAAlB,EAAyC,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBkC,QAAjB,CAA0BU,SAAnE,EAA8ER,SAAS,CAACS,YAAxF,CAA7B;;AACA,UAAIH,WAAJ,EAAiB;AACb,cAAM1B,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEtB,cADK;AAEfuB,UAAAA,IAAI,EAAE;AACFN,YAAAA,SAAS,EAAE,IADT;AACekC,YAAAA,UAAU,EAAE;AAAET,cAAAA,UAAF;AAAc5B,cAAAA,UAAU,EAAE,KAAKL,KAAL,CAAWJ,KAAX,CAAiBS;AAA3C,aAD3B;AAEFI,YAAAA,SAAS,EAAE,IAFT;AAEekC,YAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAW4C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,cAAAA,EAAE,EAAE,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BI;AAAlC,aAA9B,CAF3B;AAGF1B,YAAAA,SAAS,EAAEqB,SAAS,CAACrB;AAHnB;AAFS,SAAnB;AAQA,aAAKX,KAAL,CAAWf,WAAX,CAAuB2B,UAAvB;AACH,OAVD,MAWK;AACD,aAAKZ,KAAL,CAAWnB,UAAX,CAAsBoD,UAAtB,EAAkC,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBS,UAAnD,EAA+D,WAA/D;AACH;AACJ,KA/SkB;;AAAA,SAiTnB0C,UAjTmB,GAiTN,MAAM;AACf,YAAMd,UAAU,GAAG;AACfD,QAAAA,SAAS,EAAE;AAAE,sBAAY,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBkC;AAA/B,SADI;AAEfI,QAAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BC,QAFvB;AAGfC,QAAAA,SAAS,EAAE,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BE,SAHxB;AAIfL,QAAAA,QAAQ,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBkC,QAJZ;AAKfO,QAAAA,WAAW,EAAE,KAAKrC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BI;AAL1B,OAAnB;AAOA,WAAKrC,KAAL,CAAWpB,WAAX,CAAuBqD,UAAvB;AACH,KA1TkB;;AAAA,SA4TnBe,WA5TmB,GA4TL,CAACC,QAAD,EAAWC,OAAX,KAAuB;AACjC,UAAIlB,SAAS,GAAG,EAAhB;AACAA,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBkC,QAAzC;AACA,UAAIqB,SAAS,GAAGC,SAAhB;AACA,YAAM1C,cAAc,GAAG2C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK5D,KAAL,CAAWe,cAA1B,CAAX,CAAvB;;AACA,UAAI,KAAKV,KAAL,CAAWJ,KAAX,CAAiBe,SAAjB,KAA+B,QAAnC,EAA6C;AACzC;AACAwC,QAAAA,SAAS,GAAG;AAAEK,UAAAA,aAAa,EAAE,eAAjB;AAAkCC,UAAAA,cAAc,EAAE,uBAAlD;AAA2EC,UAAAA,eAAe,EAAE;AAA5F,SAAZ;AACA1B,QAAAA,SAAS,CAAC,eAAD,CAAT,GAA6BtB,cAA7B;AACA,aAAKiD,SAAL,CAAeC,GAAf,CAAmBC,IAAI,IAAI;AACvB,iBAAO7B,SAAS,CAAC,eAAD,CAAT,CAA2B6B,IAA3B,IAAmCnD,cAAc,CAACmD,IAAD,CAAd,GAAuBnD,cAAc,CAACmD,IAAD,CAArC,GAA8C,EAAxF;AACH,SAFD;AAGH,OAPD,MAOO;AACH7B,QAAAA,SAAS,CAAC,eAAD,CAAT,GAA6B;AAAE,uBAAa,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBkC,QAAjB,CAA0BgC;AAAzC,SAA7B;AACA,aAAKH,SAAL,CAAeC,GAAf,CAAmBC,IAAI,IAAI;AACvB,iBAAO7B,SAAS,CAAC,eAAD,CAAT,CAA2B6B,IAA3B,IAAmCnD,cAAc,CAACmD,IAAD,CAAd,GAAuBnD,cAAc,CAACmD,IAAD,CAArC,GAA8C,EAAxF;AACH,SAFD;AAGH;;AACD7B,MAAAA,SAAS,CAAC,eAAD,CAAT,CAA2B,eAA3B,IAA8CtB,cAAc,CAAC,eAAD,CAAd,GAAkCA,cAAc,CAAC,eAAD,CAAd,CAAgCO,KAAlE,GAA0E,CAAC,CAAzH,CAlBiC,CAmBjC;;AACAe,MAAAA,SAAS,CAAC,eAAD,CAAT,CAA2B,SAA3B,IAAwCtB,cAAc,CAAC,SAAD,CAAtD;AACAsB,MAAAA,SAAS,CAAC,eAAD,CAAT,CAA2B,eAA3B,IAA8C,KAAKrC,KAAL,CAAWsB,KAAX,GAAmB,KAAKtB,KAAL,CAAWsB,KAA9B,GAAsC,EAApF;AACAe,MAAAA,SAAS,CAAC,eAAD,CAAT,CAA2B,cAA3B,IAA6CtB,cAAc,CAAC,cAAD,CAAd,GAAiCA,cAAc,CAAC,cAAD,CAA/C,GAAkE,CAAC,CAAhH;AACAsB,MAAAA,SAAS,CAAC,eAAD,CAAT,CAA2B,iBAA3B,IAAgDtB,cAAc,CAAC,cAAD,CAAd,GAAiCA,cAAc,CAAC,cAAD,CAA/C,GAAkE,CAAC,CAAnH;AAEA,YAAMuB,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE,KAAKlC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BC,QADvB;AAEfC,QAAAA,SAAS,EAAE,KAAKnC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BE,SAFxB;AAIfE,QAAAA,WAAW,EAAE,KAAKrC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BI,WAA5B,GAA0C,KAAKrC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BI,WAAtE,GAAoF,EAJlF;AAKfL,QAAAA,SAAS,EAAEA,SALI;AAMfrB,QAAAA,SAAS,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBe,SANb;AAOfsC,QAAAA,QAPe;AAOLC,QAAAA,OAPK;AAOIC,QAAAA,SAPJ;AAOeY,QAAAA,SAAS,EAAE,KAAKA;AAP/B,OAAnB;AAUA,YAAM1D,UAAU,GAAG,KAAKL,KAAL,CAAWJ,KAAX,CAAiBS,UAApC;;AACA,UAAIf,SAAS,CAAC,KAAKU,KAAL,CAAWJ,KAAX,CAAiB2C,qBAAlB,EAAyC,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBkC,QAAjB,CAA0BU,SAAnE,EAA8E,KAAKxC,KAAL,CAAWJ,KAAX,CAAiBoE,YAA/F,CAAb,EAA2H;AAEvH,cAAMpD,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAEtB,cADK;AAEfuB,UAAAA,IAAI,EAAE;AACFN,YAAAA,SAAS,EAAE,IADT;AACekC,YAAAA,UAAU,EAAE;AAAET,cAAAA,UAAF;AAAc5B,cAAAA;AAAd,aAD3B;AACuD4C,YAAAA;AADvD;AAFS,SAAnB;AAMA,aAAKjD,KAAL,CAAWf,WAAX,CAAuB2B,UAAvB;AACH,OATD,MAUK;AAED,aAAKZ,KAAL,CAAWnB,UAAX,CAAsBoD,UAAtB,EAAkC5B,UAAlC,EAA8C,WAA9C;AACH,OAjDgC,CAkDjC;;AACH,KA/WkB;;AAAA,SA2XnB4D,aA3XmB,GA2XH,MAAM;AAClB,YAAMhC,UAAU,GAAG;AACfD,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKhC,KAAL,CAAWJ,KAAX,CAAiBkC,QADZ;AAERoC,YAAAA,OAAO,EAAE,KAAKvE,KAAL,CAAWe,cAAX,CAA0B,eAA1B,CAFD;AAGRyD,YAAAA,WAAW,EAAC,KAAKxE,KAAL,CAAWe,cAAX,CAA0B,aAA1B,KAA4C,KAAKf,KAAL,CAAWe,cAAX,CAA0B,aAA1B,EAAyCO,KAHzF;AAIRmD,YAAAA,iBAAiB,EAAC,KAAKzE,KAAL,CAAWe,cAAX,CAA0B,aAA1B,KAA4C,KAAKf,KAAL,CAAWe,cAAX,CAA0B,aAA1B,EAAyC2D;AAJ/F,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAK3E,KAAL,CAAWe,cAAX,CAA0B,eAA1B;AARH,SADI;AAWfgC,QAAAA,UAAU,EAAE,KAAK1C,KAAL,CAAWJ,KAAX,CAAiB8C;AAXd,OAAnB;AAaA,WAAK1C,KAAL,CAAWjB,uBAAX,CAAmCkD,UAAnC,EAA+C,WAA/C;AACH,KA1YkB;;AAGf,SAAKiB,OAAL,GAAelF,KAAK,CAACuG,SAAN,EAAf;AACA,SAAKhE,UAAL,GAAkB,KAAKA,UAAL,CAAgBiE,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKC,mBAAL,GAA2B,EAA3B;AACA,SAAKd,SAAL,GAAiB,EAAjB;AAGA,UAAMrD,SAAS,GAAG;AACdoE,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAK3E,KAAL,CAAWJ,KAAX,CAAiBgF,QAAjB,GAA4BC,QAAQ,CAAC,KAAK7E,KAAL,CAAWJ,KAAX,CAAiBgF,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAF9D,KAAlB;AAIA,SAAKjF,KAAL,GAAa;AACTmB,MAAAA,IAAI,EAAE,EADG;AACCgE,MAAAA,YAAY,EAAE,EADf;AACmBC,MAAAA,KAAK,EAAE,EAD1B;AAC8BC,MAAAA,GAAG,EAAE,EADnC;AACuCtE,MAAAA,cAAc,EAAE,EADvD;AAITN,MAAAA,UAAU,EAAE,EAJH;AAKTE,MAAAA,SAAS,EAAEA,SALF;AAMT2E,MAAAA,MAAM,EAAE,KANC;AAOT1C,MAAAA,qBAAqB,EAAE,EAPd;AAQT2C,MAAAA,UAAU,EAAE,IAAIrD,GAAJ,EARH;AASTsD,MAAAA,UAAU,EAAE,EATH;AAUTC,MAAAA,OAAO,EAAE,EAVA;AAWT;AACA;AACA;AACAnE,MAAAA,KAAK,EAAC;AAdG,KAAb;AAgBH;;AAE8B,SAAxBoE,wBAAwB,CAACrF,KAAD,EAAQL,KAAR,EAAe;AAE1C,QAAIK,KAAK,CAACJ,KAAN,CAAYkF,YAAZ,KAA6B,EAA7B,IAAmC9E,KAAK,CAACJ,KAAN,CAAYkF,YAAZ,KAA6BnF,KAAK,CAACmF,YAA1E,EAAwF;AACpFzG,MAAAA,KAAK,CAACiH,IAAN,CAAWtF,KAAK,CAACJ,KAAN,CAAYkF,YAAvB;AACA9E,MAAAA,KAAK,CAACJ,KAAN,CAAYkF,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAI9E,KAAK,CAACJ,KAAN,CAAYmF,KAAZ,KAAsBpF,KAAK,CAACoF,KAAhC,EAAuC;AACnC1G,MAAAA,KAAK,CAAC0G,KAAN,CAAY/E,KAAK,CAACJ,KAAN,CAAYmF,KAAxB;AACA/E,MAAAA,KAAK,CAACJ,KAAN,CAAYmF,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AAiCDQ,EAAAA,MAAM,GAAG;AAEL,QAAI7B,eAAe,GAAG,EAAtB;;AAEA,QAAI,KAAK1D,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,KAAgCmB,SAApC,EAA+C;AAE3C,WAAKqB,mBAAL,GAA2B,CACvB;AAAE,uBAAe,SAAjB;AAA4B,mBAAW,kBAAvC;AAA2D,qBAAa,eAAxE;AAAyF,iBAAS;AAAlG,OADuB,EAEvB;AAAE,uBAAe,SAAjB;AAA4B,mBAAW,aAAvC;AAAsD,qBAAa,UAAnE;AAA+E,iBAAS;AAAxF,OAFuB,EAGvB;AACA;AAAE,uBAAe,WAAjB;AAA8B,mBAAW,cAAzC;AAAyD,qBAAa,UAAtE;AAAkF,iBAAS;AAA3F,OAJuB,CAA3B;AAMA,WAAKe,iBAAL,GAAyB,CACG;AAAE,mBAAW,kBAAb;AAAiC,qBAAa,eAA9C;AAA+D,iBAAS,OAAxE;AAAiF,kBAAU,IAA3F;AAAgG,sBAAa;AAA7G,OADH,CAAzB;AAGA9B,MAAAA,eAAe,GAAG,oBAAlB;AACA,WAAKC,SAAL,GAAiB,CAAC,eAAD,EAAkB,UAAlB,EAA8B,eAA9B,CAAjB;AACH;;AAED,UAAM8B,eAAe,GAAG,CAAC;AAAE,mBAAa,IAAf;AAAqB,iBAAW,kBAAhC;AAAoD,mBAAa,eAAjE;AAAkF,wBAAiB,WAAnG;AAAgH,qBAAe;AAA/H,KAAD,EACA;AAAE,mBAAa,IAAf;AAAqB,iBAAW,aAAhC;AAA+C,mBAAa,UAA5D;AAAwE,wBAAiB,WAAzF;AAAsG,qBAAe;AAArH,KADA,EAEA;AAAE,mBAAa,IAAf;AAAqB,iBAAW,cAAhC;AAAgD,mBAAa,eAA7D;AAA+E,wBAAiB,YAAhG;AAA8G,qBAAe;AAA7H,KAFA,CAAxB;AAMA,UAAMC,KAAK,GAAG,KAAK1F,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,IAA+B,KAAKtC,KAAL,CAAWuF,UAAX,CAAsBS,GAAtB,CAA0B,MAAMC,MAAN,CAAa,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BE,SAAzC,CAA1B,CAA/B,IACP,KAAKxC,KAAL,CAAWuF,UAAX,CAAsBW,GAAtB,CAA0B,MAAMD,MAAN,CAAa,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BE,SAAzC,CAA1B,EAA+E6B,YADtF;AAGA,UAAM8B,MAAM,GAAG,KAAK9F,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,IAA+B,KAAKtC,KAAL,CAAWuF,UAAX,CAAsBS,GAAtB,CAA0B,OAAOC,MAAP,CAAc,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BE,SAA1C,CAA1B,CAA/B,IACR,KAAKxC,KAAL,CAAWuF,UAAX,CAAsBW,GAAtB,CAA0B,OAAOD,MAAP,CAAc,KAAK5F,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BE,SAA1C,CAA1B,EAAgF6B,YADvF;AAGA,UAAM+B,SAAS,GAAG;AACdpD,MAAAA,UAAU,EAAE,KAAK3C,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,IAA+B,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BI,WAA3D,IAA0E,KAAKrC,KAAL,CAAW4C,IAAX,CAAgBC,aAAhB,CAA8B;AAAEC,QAAAA,EAAE,EAAE,KAAK9C,KAAL,CAAWJ,KAAX,CAAiBqC,UAAjB,CAA4BI;AAAlC,OAA9B,CADxE;AACwJqB,MAAAA,eAAe,EAAE,oBADzK;AAC+L/C,MAAAA,SAAS,EAAE,QAD1M;AAEdsB,MAAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBqC,UAFf;AAE2BH,MAAAA,QAAQ,EAAE,KAAK9B,KAAL,CAAWJ,KAAX,CAAiBkC,QAFtD;AAEgEW,MAAAA,YAAY,EAAEqD;AAF9E,KAAlB;AAIA,UAAME,WAAW,GAAG;AAAErF,MAAAA,SAAS,EAAE;AAAb,KAApB;AACA,wBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAKhB,KAAL,CAAWmB,IAAX,gBACG,oBAAC,QAAD;AACI,MAAA,eAAe,EAAE4C,eADrB;AAEI,MAAA,IAAI,EAAE,KAAK/D,KAAL,CAAWmB,IAFrB;AAGI,MAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWS,UAH3B;AAII,MAAA,SAAS,EAAE,KAAKT,KAAL,CAAWW,SAJ1B;AAKI,MAAA,eAAe,EAAE,KAAKL,eAL1B;AAMI,MAAA,mBAAmB,EAAE,KAAKwE,mBAN9B;AAOI,MAAA,iBAAiB,EAAE,KAAKe,iBAP5B;AAQI,MAAA,WAAW,EAAC,UARhB;AASI,MAAA,aAAa,EAAE,KAAKxF,KAAL,CAAW4C,IAAX,CAAgBC,aATnC;AAUI,MAAA,UAAU,EAAE,KAAKlD,KAAL,CAAWuF,UAV3B;AAWI,MAAA,qBAAqB,EAAE,KAAKvF,KAAL,CAAW4C,qBAXtC;AAYI,MAAA,UAAU,EAAE,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBqC,UAZjC;AAaI,MAAA,QAAQ,EAAE,KAAKjC,KAAL,CAAWJ,KAAX,CAAiBkC,QAb/B;AAcI,MAAA,WAAW,EAAE,KAAK9B,KAAL,CAAWlB,sBAd5B;AAeI,MAAA,YAAY,EAAE,KAAKiD,YAfvB;AAgBI,MAAA,UAAU,EAAE,KAAKgB,UAhBrB;AAiBI,MAAA,SAAS,EAAEgD,SAjBf;AAkBI,MAAA,WAAW,EAAEC,WAlBjB;AAmBI,MAAA,SAAS,EAAE,MAAM,KAAKhG,KAAL,CAAWhB,sBAAX,CAAkC,kBAAlC,EAAsD,QAAtD,EAAgE,oBAAhE,EAAsF,KAAKgB,KAAL,CAAWJ,KAAX,CAAiBS,UAAvG,EAAmH,KAAKL,KAAL,CAAWJ,KAAX,CAAiBkC,QAApI,EAA8I4D,KAA9I,CAnBrB;AAoBI,MAAA,WAAW,EAAE,IApBjB;AAqBI,MAAA,QAAQ,EAAE,IArBd;AAsBI,MAAA,gBAAgB,EAAE,IAtBtB;AAuBI,MAAA,iBAAiB,EAAE,IAvBvB;AAwBI,MAAA,UAAU,EAAE,YAxBhB;AAyBI,MAAA,iBAAiB,EAAE,IAzBvB;AA0BI,MAAA,UAAU,EAAE,KAAK1F,KAAL,CAAWJ,KAAX,CAAiBmB,UA1BjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GA8BK,EAhCV,CADJ,CADJ,CADJ,EAuCK,KAAKf,KAAL,CAAWJ,KAAX,CAAiBa,SAAjB,iBACG,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKT,KAAL,CAAWJ,KAAX,CAAiBa,SAD3B;AAEI,MAAA,UAAU,EAAE,KAAKF,UAFrB;AAGI,MAAA,SAAS,EAAE,KAAKP,KAAL,CAAWJ,KAAX,CAAiBe,SAHhC;AAII,MAAA,UAAU,EAAE,KAAKX,KAAL,CAAWJ,KAAX,CAAiBqC,UAJjC;AAKI,MAAA,UAAU,EAAE,KAAKjC,KAAL,CAAWJ,KAAX,CAAiB+C,UALjC;AAMI,MAAA,WAAW,EAAE,KAAKK,WANtB;AAOI,MAAA,KAAK,EAAE,KAAKhD,KAAL,CAAWJ,KAAX,CAAiBY,SAP5B;AAQI,MAAA,cAAc,EAAE,KAAKb,KAAL,CAAWe,cAAX,IAA6B,EARjD;AASI,MAAA,eAAe,EAAE+E,eATrB;AAUI,MAAA,aAAa,EAAE,KAAKxB,aAVxB;AAWI,MAAA,YAAY,EAAE,KAAKjE,KAAL,CAAWJ,KAAX,CAAiBkF,YAXnC;AAYI,MAAA,WAAW,EAAE,KAAK9E,KAAL,CAAWf,WAZ5B;AAaI,MAAA,YAAY,EAAE,KAAKe,KAAL,CAAWJ,KAAX,CAAiBY,SAAjB,gBACV,oBAAC,KAAD;AACI,QAAA,SAAS,EAAE,KAAKR,KAAL,CAAWJ,KAAX,CAAiBe,SADhC;AAEI,QAAA,aAAa,EAAE,KAAKX,KAAL,CAAW4C,IAAX,CAAgBC,aAFnC;AAGI,QAAA,eAAe,EAAE,KAAK1B,eAH1B;AAII,QAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWJ,KAAX,CAAiBqC,UAJjC;AAKI,QAAA,cAAc,EAAE,KAAKtC,KAAL,CAAWe,cAAX,IAA6B,EALjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,gBAQR,oBAAC,WAAD;AACE,QAAA,cAAc,EAAE,KAAKf,KAAL,CAAWe,cAAX,IAA6B,EAD/C;AAEE,QAAA,eAAe,EAAE,KAAKS,eAFxB;AAGE,QAAA,aAAa,EAAE,KAAKO,aAHtB;AAIE,QAAA,GAAG,EAAE,KAAK/B,KAAL,CAAWqF,GAAX,IAAkB,EAJzB;AAKE,QAAA,iBAAiB,EAAE,KAAKhF,KAAL,CAAWJ,KAAX,CAAiBqG,iBAAjB,IAAsC,EAL3D;AAME,QAAA,aAAa,EAAE,KAAKjF,aANtB;AAOE,QAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWsB,KAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QArBV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxCR,CADJ;AA6EH;;AAEDiF,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAC9B,QAAI,KAAKnG,KAAL,CAAWJ,KAAX,CAAiBS,UAAjB,KAAgC8F,aAAa,CAACvG,KAAd,CAAoBS,UAAxD,EAAoE;AAChE,UAAI,KAAKL,KAAL,CAAWJ,KAAX,CAAiBkC,QAAjB,CAA0BU,SAA1B,KAAwC2D,aAAa,CAACvG,KAAd,CAAoBkC,QAApB,CAA6BU,SAAzE,EAAoF;AAChF,cAAMD,qBAAqB,GAAG,EAA9B;;AACA,YAAI,KAAKvC,KAAL,CAAWJ,KAAX,CAAiB2C,qBAArB,EAA4C;AACxC,eAAKvC,KAAL,CAAWJ,KAAX,CAAiB2C,qBAAjB,CAAuC,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBkC,QAAjB,CAA0BU,SAAjE,KAA+E4D,MAAM,CAACC,MAAP,CAAc,KAAKrG,KAAL,CAAWJ,KAAX,CAAiB2C,qBAAjB,CAAuC,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBkC,QAAjB,CAA0BU,SAAjE,CAAd,EAA2FoB,GAA3F,CAA+FC,IAAI,IAC9KtB,qBAAqB,CAAC+D,IAAtB,CAA2BzC,IAAI,CAACG,YAAhC,CAD2E,CAA/E;AAEH;;AACD,cAAMkB,UAAU,GAAG7F,aAAa,CAAC,KAAKW,KAAL,CAAWJ,KAAX,CAAiB2C,qBAAlB,EAAyC,KAAKvC,KAAL,CAAWJ,KAAX,CAAiBkC,QAAjB,CAA0BU,SAAnE,CAAhC;AACA,aAAKrC,QAAL,CAAc;AACVoC,UAAAA,qBADU;AACa2C,UAAAA,UADb;AACyBpE,UAAAA,IAAI,EAAE,KAAKd,KAAL,CAAWJ,KAAX,CAAiBS,UADhD;AAEVD,UAAAA,UAAU,EAAE9B,OAAO,CAAC,KAAK0B,KAAL,CAAWJ,KAAX,CAAiBS,UAAlB,EAA8B,KAAKV,KAAL,CAAWW,SAAzC;AAFT,SAAd;AAIH,OAXD,MAYK;AAED,YAAI;AAAEA,UAAAA;AAAF,YAAgB,KAAKX,KAAzB;;AACA,YAAI,KAAKK,KAAL,CAAWJ,KAAX,CAAiBU,SAAjB,KAA+B8C,SAAnC,EAA8C;AAC1C9C,UAAAA,SAAS,GAAG;AAAEoE,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE,KAAK3E,KAAL,CAAWJ,KAAX,CAAiBgF,QAAjB,GAA4BC,QAAQ,CAAC,KAAK7E,KAAL,CAAWJ,KAAX,CAAiBgF,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,WAAZ;AACH;;AAED,aAAKzE,QAAL,CAAc;AACVW,UAAAA,IAAI,EAAE,KAAKd,KAAL,CAAWJ,KAAX,CAAiBS,UADb;AAEV4E,UAAAA,MAAM,EAAE,KAFE;AAEM3E,UAAAA,SAFN;AAGVF,UAAAA,UAAU,EAAE9B,OAAO,CAAC,KAAK0B,KAAL,CAAWJ,KAAX,CAAiBS,UAAlB,EAA8BC,SAA9B;AAHT,SAAd;AAMH;AACJ,KA3BD,MA2BO,IAAI,KAAKN,KAAL,CAAWJ,KAAX,CAAiBqB,KAAjB,KAA2BkF,aAAa,CAACvG,KAAd,CAAoBqB,KAAnD,EAA0D;AAC7D,WAAKd,QAAL,CAAc;AACVc,QAAAA,KAAK,EAAE,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,CAAgC,eAAhC,IAAmD,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,CAAgC,eAAhC,CAAnD,GAAsG,EADnG;AAEVA,QAAAA,cAAc,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc;AAFvB,OAAd;AAIH,KALM,MAQF,IAAI,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,KAAoCyF,aAAa,CAACvG,KAAd,CAAoBc,cAA5D,EAA4E;AAC7E,WAAKP,QAAL,CAAc;AACVO,QAAAA,cAAc,EAAE,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,cADvB;AACuCO,QAAAA,KAAK,EACtD,KAAKjB,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,IAAmC,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,CAAgC,eAAhC,CAAnC,GAAsF,KAAKV,KAAL,CAAWJ,KAAX,CAAiBc,cAAjB,CAAgC,eAAhC,CAAtF,GAAyI;AAF/H,OAAd;AAIH;;AAED,QAAI,KAAKV,KAAL,CAAWJ,KAAX,CAAiBoF,GAAjB,KAAyBmB,aAAa,CAACvG,KAAd,CAAoBoF,GAAjD,EAAsD;AAElD,YAAMA,GAAG,GAAG5F,mBAAmB,CAAC,KAAKY,KAAL,CAAWJ,KAAX,CAAiBoF,GAAjB,IAAwB,EAAzB,EAA6B,eAA7B,EAC3B,UAD2B,EACf5B,SADe,EACJA,SADI,EACOA,SADP,CAA/B;AAEA,YAAMmD,OAAO,GAAGvB,GAAG,CAACa,GAAJ,CAAQ,YAAR,CAAhB;AAEA,WAAK1F,QAAL,CAAc;AACV6E,QAAAA,GAAG,EAAEuB;AADK,OAAd;AAGH;AAEJ;;AA4HDC,EAAAA,oBAAoB,GAAG;AACnB,UAAM5F,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAEtB,cADK;AAEfuB,MAAAA,IAAI,EAAE;AACFT,QAAAA,UAAU,EAAE,EADV;AACc4B,QAAAA,UAAU,EAAEmB,SAD1B;AACqCzC,QAAAA,SAAS,EAAE,IADhD;AACsD8F,QAAAA,SAAS,EAAErD;AADjE;AAFS,KAAnB;AAMA,SAAKpD,KAAL,CAAWf,WAAX,CAAuB2B,UAAvB;AACH;;AA3XuC;;AA+Y5C,eAAe3C,OAAO,CAACyB,eAAD,EAAkB;AAAEd,EAAAA,WAAF;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA,sBAA3B;AAAmDC,EAAAA,uBAAnD;AAA4EC,EAAAA,sBAA5E;AAAoGC,EAAAA,WAApG;AAAiHC,EAAAA;AAAjH,CAAlB,CAAP,CAAiKhB,UAAU,CAAC2B,aAAD,CAA3K,CAAf","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport { toast } from 'react-toastify';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../../components/data-grid/data-grid.component';\r\nimport AddTemplate from './AddTemplate';\r\nimport Esign from '../../audittrail/Esign';\r\nimport SlideOutModal from '../../../components/slide-out-modal/SlideOutModal';\r\nimport { ListWrapper } from '../../../components/client-group.styles';\r\nimport { callService, crudMaster, fetchEmailTemplateById, validateEsignCredential, openEmailTemplateModal, updateStore, comboChangeEmailTag } from '../../../actions';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\nimport { constructOptionList, getControlMap, showEsign } from '../../../components/CommonScript';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\n// import './Drag.css';\r\n\r\nimport { EditorUtils, ProseMirror } from '@progress/kendo-react-editor';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass EmailTemplate extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.formRef = React.createRef();\r\n        this.closeModal = this.closeModal.bind(this);\r\n        this.extractedColumnList = [];\r\n        this.fieldList = [];\r\n\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", Tag: [], selectedRecord: {\r\n\r\n            },\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            isOpen: false,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            emailParam: [],\r\n            content: {},\r\n            //  value: EditorUtils.createDocument(\r\n            //      new ProseMirror.Schema({ nodes: EditorUtils.nodes, marks: EditorUtils.marks })\r\n            //  )\r\n            value:''\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            } else {\r\n                loadEsign = false;\r\n            }\r\n        } else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord,selectedId:null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let primaryKeyField = \"\";\r\n\r\n        if (this.props.Login.inputParam !== undefined) {\r\n\r\n            this.extractedColumnList = [\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"stemplatename\", \"width\": \"200px\" },\r\n                { \"controlType\": \"textbox\", \"idsName\": \"IDS_SUBJECT\", \"dataField\": \"ssubject\", \"width\": \"200px\" },\r\n                //{ \"controlType\": \"textarea\", \"idsName\": \"IDS_TEMPLATEBODY\", \"dataField\": \"stemplatebody\", \"width\": \"200px\" },\r\n                { \"controlType\": \"selectbox\", \"idsName\": \"IDS_EMAILTAG\", \"dataField\": \"stagname\", \"width\": \"200px\" }\r\n            ]\r\n            this.detailedFieldList = [\r\n                                        { \"idsName\": \"IDS_TEMPLATEBODY\", \"dataField\": \"stemplatebody\", \"width\": \"300px\", \"isHTML\": true,\"columnSize\":\"12\" }\r\n                                    ];\r\n            primaryKeyField = \"nemailtemplatecode\";\r\n            this.fieldList = [\"stemplatename\", \"ssubject\", \"stemplatebody\"];\r\n        }\r\n\r\n        const mandatoryFields = [{ \"mandatory\": true, \"idsName\": \"IDS_TEMPLATENAME\", \"dataField\": \"stemplatename\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                                { \"mandatory\": true, \"idsName\": \"IDS_SUBJECT\", \"dataField\": \"ssubject\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n                                { \"mandatory\": true, \"idsName\": \"IDS_EMAILTAG\", \"dataField\": \"nemailtagcode\" , \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\"}\r\n                            ];\r\n\r\n\r\n        const addId = this.props.Login.inputParam && this.state.controlMap.has(\"Add\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Add\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editID = this.props.Login.inputParam && this.state.controlMap.has(\"Edit\".concat(this.props.Login.inputParam.methodUrl))\r\n            && this.state.controlMap.get(\"Edit\".concat(this.props.Login.inputParam.methodUrl)).ncontrolcode;\r\n\r\n        const editParam = {\r\n            screenName: this.props.Login.inputParam && this.props.Login.inputParam.displayName && this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }), primaryKeyField: \"nemailtemplatecode\", operation: \"update\",\r\n            inputParam: this.props.Login.inputParam, userInfo: this.props.Login.userInfo, ncontrolCode: editID\r\n        };\r\n        const deleteParam = { operation: \"delete\" };\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={primaryKeyField}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    detailedFieldList={this.detailedFieldList}\r\n                                    expandField=\"expanded\"\r\n                                    formatMessage={this.props.intl.formatMessage}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    fetchRecord={this.props.fetchEmailTemplateById}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    reloadData={this.reloadData}\r\n                                    editParam={editParam}\r\n                                    deleteParam={deleteParam}\r\n                                    addRecord={() => this.props.openEmailTemplateModal(\"IDS_MAILTEMPLATE\", \"create\", \"nemailtemplatecode\", this.props.Login.masterData, this.props.Login.userInfo, addId)}\r\n                                    isComponent={true}\r\n                                    pageable={true}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    scrollable={\"scrollable\"}\r\n                                    hasDynamicColSize={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                {this.props.Login.openModal &&\r\n                    <SlideOutModal\r\n                        show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        mandatoryFields={mandatoryFields}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign\r\n                                operation={this.props.Login.operation}\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            />\r\n                            : <AddTemplate\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                Tag={this.state.Tag || []}\r\n                                EmailTagParameter={this.props.Login.EmailTagParameter || []}\r\n                                onkendoChange={this.onkendoChange}\r\n                                value={this.state.value}\r\n\r\n                            />\r\n                        }\r\n                    />\r\n                }\r\n            </>\r\n        );\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData,\r\n                    dataResult: process(this.props.Login.masterData, this.state.dataState),\r\n                });\r\n            }\r\n            else {\r\n\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n\r\n                this.setState({\r\n                    data: this.props.Login.masterData,\r\n                    isOpen: false,  dataState,\r\n                    dataResult: process(this.props.Login.masterData, dataState)\r\n\r\n                });\r\n            }\r\n        } else if (this.props.Login.value !== previousProps.Login.value) {\r\n            this.setState({\r\n                value: this.props.Login.selectedRecord[\"stemplatebody\"] ? this.props.Login.selectedRecord[\"stemplatebody\"] : \"\",\r\n                selectedRecord: this.props.Login.selectedRecord\r\n            });\r\n        }\r\n\r\n\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({\r\n                selectedRecord: this.props.Login.selectedRecord, value:\r\n                this.props.Login.selectedRecord && this.props.Login.selectedRecord[\"stemplatebody\"] ? this.props.Login.selectedRecord[\"stemplatebody\"] : \"\"\r\n            });\r\n        }\r\n\r\n        if (this.props.Login.Tag !== previousProps.Login.Tag) {\r\n\r\n            const Tag = constructOptionList(this.props.Login.Tag || [], \"nemailtagcode\",\r\n                \"stagname\", undefined, undefined, undefined);\r\n            const TagList = Tag.get(\"OptionList\");\r\n\r\n            this.setState({\r\n                Tag: TagList\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n    onkendoChange = (event) => {\r\n        this.setState({ value: event.html });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData !== null) {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[fieldName] = comboData;\r\n            selectedRecord[\"stemplatebody\"] = \"\";\r\n            let Map = {};\r\n            Map[\"userinfo\"] = this.props.Login.userInfo;\r\n            Map[\"nemailtagcode\"] = comboData.value;\r\n            // this.setState({ selectedRecord, value: \"\" });\r\n            this.props.comboChangeEmailTag(Map, this.props.Login.masterData, selectedRecord, this.state.value);\r\n        }\r\n    }\r\n\r\n    deleteRecord = (inputData) => {\r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n\r\n            inputData: {\r\n                [this.props.Login.inputParam.methodUrl.toLowerCase()]: inputData.selectedRecord,\r\n                \"userinfo\": this.props.Login.userInfo\r\n            },\r\n            operation: inputData.operation,\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            dataState: this.state.dataState\r\n        }\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                    operation: inputData.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n            userInfo: this.props.Login.userInfo,\r\n            displayName: this.props.Login.inputParam.displayName\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n        const selectedRecord = JSON.parse(JSON.stringify(this.state.selectedRecord));\r\n        if (this.props.Login.operation === \"update\") {\r\n            // edit\r\n            postParam = { inputListName: \"emailtemplate\", selectedObject: \"selectedEmailTemplate\", primaryKeyField: \"nemailtemplatecode\" }\r\n            inputData[\"emailtemplate\"] = selectedRecord;\r\n            this.fieldList.map(item => {\r\n                return inputData[\"emailtemplate\"][item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n            })\r\n        } else {\r\n            inputData[\"emailtemplate\"] = { \"nsitecode\": this.props.Login.userInfo.nmastersitecode };\r\n            this.fieldList.map(item => {\r\n                return inputData[\"emailtemplate\"][item] = selectedRecord[item] ? selectedRecord[item] : \"\";\r\n            });\r\n        }\r\n        inputData[\"emailtemplate\"][\"nemailtagcode\"] = selectedRecord[\"nemailtagcode\"] ? selectedRecord[\"nemailtagcode\"].value : -1;\r\n        //  inputData[\"emailtemplate\"][\"ninterfacetype\"] = this.state.selectedRecord[\"ninterfacetype\"] ? this.state.selectedRecord[\"ninterfacetype\"].value : -1;\r\n        inputData[\"emailtemplate\"][\"nstatus\"] = selectedRecord[\"nstatus\"];\r\n        inputData[\"emailtemplate\"][\"stemplatebody\"] = this.state.value ? this.state.value : \"\";\r\n        inputData[\"emailtemplate\"][\"nregtypecode\"] = selectedRecord[\"nregtypecode\"] ? selectedRecord[\"nregtypecode\"] : -1;\r\n        inputData[\"emailtemplate\"][\"nregsubtypecode\"] = selectedRecord[\"nregtypecode\"] ? selectedRecord[\"nregtypecode\"] : -1;\r\n        \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl,\r\n   \r\n            displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n            inputData: inputData,\r\n            operation: this.props.Login.operation,\r\n            saveType, formRef, postParam, searchRef: this.searchRef\r\n        }\r\n        \r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n\r\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n        }\r\n        // this.props.crudMaster(inputParam, this.props.Login.masterData,\"openModal\");\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, { callService, crudMaster, fetchEmailTemplateById, validateEsignCredential, openEmailTemplateModal, updateStore, comboChangeEmailTag })(injectIntl(EmailTemplate));"]},"metadata":{},"sourceType":"module"}