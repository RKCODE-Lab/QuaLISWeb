{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\competencemanagement\\\\trainingupdate\\\\TrainingUpdate.jsx\";\nimport React, { Component } from 'react';\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { callService, crudMaster, getTrainingUpdate, updateStore, filterColumnData, validateEsignCredential, changeTechniqueFilter, viewAttachment, getTrainingParticipantsAttended, getTrainingParticipantsCertified, getTrainingParticipantsCompetent } from '../../../actions';\nimport TechniqueFilter from './TechniqueFilter';\nimport { injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { getControlMap, constructOptionList, convertDateValuetoString, showEsign, formatInputDate } from '../../../components/CommonScript';\nimport ListMaster from '../../../components/list-master/list-master.component';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../../components/App.styles';\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component'; // import ReactTooltip from 'react-tooltip';\n\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\nimport { Affix } from 'rsuite';\nimport TrainingUpdateChildTab from './TrainingUpdateChildTab';\nimport { ProductList } from '../../product/product.styled';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCheckCircle } from '@fortawesome/free-regular-svg-icons';\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\nimport { transactionStatus } from '../../../components/Enumeration';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass TrainingUpdate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.completeTraining = (version, ncontrolCode) => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      let fromDate = obj.fromDate;\n      let toDate = obj.toDate;\n      inputData[\"fromDate\"] = fromDate;\n      inputData[\"toDate\"] = toDate;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"ntechniquecode\"] = this.props.Login.masterData.SelectedTrainingUpdate[\"ntechniquecode\"];\n      inputData[\"trainingupdate\"] = {\n        \"ntrainingcode\": this.props.Login.masterData.SelectedTrainingUpdate.ntrainingcode,\n        \"ntechniquecode\": this.props.Login.masterData.selectedTechinque.ntechniquecode,\n        \"ntransactionstatus\": this.props.Login.masterData.SelectedTrainingUpdate.ntransactionstatus\n      };\n      const postParam = {\n        inputListName: \"TechniqueList\",\n        selectedObject: \"SelectedTrainingUpdate\",\n        primaryKeyField: \"ntrainingcode\",\n        primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\n        fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        }\n      };\n      const inputParam = {\n        methodUrl: \"Training\",\n        classUrl: this.props.Login.inputParam.classUrl,\n        inputData: inputData,\n        postParam,\n        operation: \"complete\"\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openChildModal: true,\n            operation: \"complete\",\n            // screenName: '', \n            id: 'TrainingUpdate'\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, 'openChildModal');\n      }\n    };\n\n    this.handlePageChange = event => {\n      this.setState({\n        skip: event.skip,\n        take: event.take\n      });\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, caseNo) => {\n      let selectedRecord = this.state.selectedRecord || {};\n\n      switch (caseNo) {\n        case 1:\n          selectedRecord[fieldName] = comboData;\n          this.setState({\n            selectedRecord\n          });\n          break;\n\n        case 2:\n          selectedRecord[fieldName] = comboData;\n          selectedRecord[\"nsectionusercode\"] = comboData.value;\n          this.props.getSectionUsers(this.state.selectedRecord.nsectionusercode, this.props.Login.userInfo, selectedRecord, this.props.Login.screenName);\n          break;\n\n        case 3:\n          let nfilterTechnique = this.state.nfilterTechnique || {};\n          nfilterTechnique = comboData;\n          this.searchRef.current.value = \"\";\n          this.setState({\n            nfilterTechnique\n          });\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.reloadData1 = () => {\n      this.searchRef.current.value = \"\";\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n      let inputParam = {\n        inputData: {\n          userinfo: this.props.Login.userInfo,\n          currentdate: formatInputDate(new Date(), true)\n        },\n        classUrl: \"trainingupdate\",\n        methodUrl: \"TrainingUpdate\",\n        userInfo: this.props.Login.userInfo,\n        displayName: \"IDS_TRAININGUPDATE\"\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onFilterSubmit = () => {\n      this.reloadData(true);\n    };\n\n    this.reloadData = isFilterSubmit => {\n      this.searchRef.current.value = \"\";\n      let fromDate = this.props.Login.masterData.FromDate;\n      let toDate = this.props.Login.masterData.ToDate;\n\n      if (isFilterSubmit) {\n        let selectedRecord = this.state.selectedRecord || {};\n\n        if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\n          fromDate = selectedRecord[\"fromdate\"];\n        }\n\n        if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\n          toDate = selectedRecord[\"todate\"];\n        }\n      }\n\n      let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\n\n      if (this.state.nfilterTechnique.value) {\n        let inputParam = {\n          inputData: {\n            \"userinfo\": this.props.Login.userInfo,\n            fromDate: obj.fromDate,\n            toDate: obj.toDate,\n            currentDate: null,\n            ntechniquecode: this.state.nfilterTechnique.value,\n            userinfo: this.props.Login.userInfo,\n            nfilterTechnique: this.state.nfilterTechnique\n          },\n          classUrl: \"trainingupdate\",\n          methodUrl: \"TraningUpdateByTechnique\",\n          displayName: \"IDS_TRAININGCERTIFICATE\",\n          userInfo: this.props.Login.userInfo\n        };\n        this.props.changeTechniqueFilter(inputParam, this.props.Login.masterData.filterTechnique, this.state.nfilterTechnique);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_TECHNIQUENOTAVAILABLE\"\n        }));\n      }\n    };\n\n    this.state = {\n      selectedRecord: {},\n      error: \"\",\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      skip: 0,\n      take: this.props.Login.settings ? this.props.Login.settings[3] : 25\n    };\n    this.searchRef = React.createRef();\n    this.searchFieldList = [\"stechniquename\", \"strainingtopic\", \"strainername\"];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\") {\n      if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n        toast.warn(props.Login.masterStatus);\n        props.Login.masterStatus = \"\";\n      }\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    this.confirmMessage = new ConfirmMessage();\n    const {\n      TechniqueList,\n      SelectedTrainingUpdate,\n      searchedData\n    } = this.props.Login.masterData;\n    const {\n      masterData,\n      userInfo,\n      testData,\n      parameterData,\n      otherTestData,\n      linkMaster,\n      editFiles\n    } = this.props.Login;\n    let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.FromDate, this.state.selectedRecord[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n    let fromDate = obj.fromDate;\n    let toDate = obj.toDate;\n    const filterParam = {\n      inputListName: \"TechniqueList\",\n      selectedObject: \"SelectedTrainingUpdate\",\n      primaryKeyField: \"ntrainingcode\",\n      fetchUrl: \"trainingupdate/getTrainingUpdateById\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo\n      },\n      masterData: this.props.Login.masterData,\n      unchangeList: [\"FromDate\", \"ToDate\"],\n      searchFieldList: this.searchFieldList\n    };\n    this.props.Login.showAccordion = true;\n    let breadCrumbData = this.state.filterData || [];\n    const completeId = this.state.controlMap.has(\"CompleteTraining\") && this.state.controlMap.get(\"CompleteTraining\").ncontrolcode;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterData: masterData,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_TRAININGUPDATE\"\n      }),\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.TechniqueList,\n      getMasterDetail: TechniqueList => this.props.getTrainingUpdate(TechniqueList, userInfo, masterData),\n      selectedMaster: this.props.Login.masterData.SelectedTrainingUpdate,\n      primaryKeyField: \"ntrainingcode\",\n      mainField: \"strainingtopic\",\n      firstField: \"strainername\" //secondField=\"strainername\"\n      ,\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData1,\n      needAccordianFilter: false,\n      skip: this.state.skip,\n      take: this.state.take,\n      handlePageChange: this.handlePageChange,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      userInfo: this.props.Login.userInfo,\n      showFilterIcon: true,\n      showFilter: this.props.Login.showFilter,\n      filterComponent: [{\n        \"IDS_TRAININGUPDATEFILTER\": /*#__PURE__*/React.createElement(TechniqueFilter, {\n          selectedRecord: this.state.selectedRecord || {},\n          value: this.state.value || {},\n          handleDateChange: this.handleDateChange,\n          fromDate: fromDate,\n          toDate: toDate,\n          userInfo: this.props.Login.userInfo,\n          filterTechnique: this.state.filterTechnique || [],\n          nfilterTechnique: this.state.nfilterTechnique || {},\n          onComboChange: this.onComboChange,\n          onFilterChange: this.onFilterChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          FilterStatusValue: this.props.Login.masterData.FilterStatusValue || {},\n          FilterStatus: this.state.stateFilterStatus || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 45\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 25\n      }\n    }, SelectedTrainingUpdate && Object.values(SelectedTrainingUpdate).length > 0 ? /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 45\n      }\n    }, SelectedTrainingUpdate.stechniquename), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${SelectedTrainingUpdate.ntransactionstatus === transactionStatus.COMPLETED ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(ProductList, {\n      className: \"d-flex justify-content-end\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 52\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COMPLETETRAINING\"\n      }) //    data-for=\"tooltip_list_wrap\"\n      ,\n      hidden: this.state.userRoleControlRights.indexOf(completeId) === -1,\n      onClick: () => this.completeTraining(this.state.version, completeId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheckCircle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 65\n      }\n    }))))))), /*#__PURE__*/React.createElement(Card.Body, {\n      className: \"form-static-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_VENUE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.strainingvenue))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TRAININGDATE\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.strainingdate))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TRAININGTOPIC\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.strainingtopic))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 57\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_TRAINERNAME\"\n    })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 57\n      }\n    }, SelectedTrainingUpdate.strainername)))), /*#__PURE__*/React.createElement(TrainingUpdateChildTab, {\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenName,\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData,\n      crudMaster: this.props.crudMaster,\n      errorCode: this.props.Login.errorCode,\n      masterStatus: this.props.Login.masterStatus,\n      openChildModal: this.props.Login.openChildModal,\n      participants: this.props.Login.participants,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.props.Login.selectedRecord,\n      userRoleControlRights: this.state.userRoleControlRights,\n      esignRights: this.props.Login.userRoleControlRights,\n      screenData: this.props.Login.screenData,\n      validateEsignCredential: this.props.validateEsignCredential,\n      loadEsign: this.props.Login.loadEsign,\n      controlMap: this.state.controlMap,\n      showAccordian: this.state.showAccordian,\n      dataState: this.props.Login.dataState,\n      onTabChange: this.onTabChange,\n      settings: this.props.Login.settings,\n      nFlag: this.props.Login.nFlag,\n      usersStatus: this.props.Login.usersStatus || [],\n      nusercode: this.props.Login.nusercode || [],\n      getTrainingParticipantsAttended: this.props.getTrainingParticipantsAttended,\n      getTrainingParticipantsCertified: this.props.getTrainingParticipantsCertified,\n      getTrainingParticipantsCompetent: this.props.getTrainingParticipantsCompetent,\n      linkMaster: this.props.linkMaster,\n      onComboChange: this.onComboChange,\n      ncontrolCode: this.props.Login.ncontrolCode,\n      viewAttachment: this.props.viewAttachment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 45\n      }\n    })))) : \"\"))));\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n\n    if (this.props.Login.masterData && this.props.Login.masterData.filterTechnique && this.props.Login.masterData.FromDate) {\n      let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\n      breadCrumbData.push({\n        \"label\": \"IDS_FROM\",\n        \"value\": obj.breadCrumbFrom\n      }, {\n        \"label\": \"IDS_TO\",\n        \"value\": obj.breadCrumbto\n      }, {\n        \"label\": \"IDS_TECHNIQUE\",\n        \"value\": this.props.Login.masterData.selectedTechinque ? this.props.Login.masterData.selectedTechinque[\"stechniquename\"] : \"NA\"\n      });\n    }\n\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    let isComponentUpdated = false;\n    let selectedRecord = this.state.selectedRecord || {};\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      isComponentUpdated = true;\n    }\n\n    let userRoleControlRights = this.state.userRoleControlRights || [];\n    let controlMap = this.state.controlMap || new Map();\n\n    if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const nformCode = this.props.Login.userInfo.nformcode;\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\n      isComponentUpdated = true;\n    }\n\n    let nfilterTechnique = this.state.nfilterTechnique || {};\n    let filterTechnique = this.state.filterTechnique || {};\n\n    if (this.props.Login.masterData.filterTechnique !== previousProps.Login.masterData.filterTechnique) {\n      const trainingupdateMap = constructOptionList(this.props.Login.masterData.filterTechnique || [], \"ntechniquecode\", \"stechniquename\", 'ntechniquecode', 'ascending', false);\n      filterTechnique = trainingupdateMap.get(\"OptionList\");\n\n      if (trainingupdateMap.get(\"DefaultValue\")) {\n        nfilterTechnique = trainingupdateMap.get(\"DefaultValue\");\n      } else if (filterTechnique && filterTechnique.length > 0) {\n        nfilterTechnique = filterTechnique[0];\n      }\n\n      isComponentUpdated = true;\n    } else if (this.props.Login.masterData.nfilterTechnique !== previousProps.Login.masterData.nfilterTechnique) {\n      nfilterTechnique = this.props.Login.masterData.nfilterTechnique;\n      isComponentUpdated = true;\n    }\n\n    if (isComponentUpdated) {\n      this.setState({\n        nfilterTechnique,\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        filterTechnique\n      });\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      const filterData = this.generateBreadCrumData();\n      this.setState({\n        filterData\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  validateEsignCredential,\n  updateStore,\n  filterColumnData,\n  getTrainingUpdate,\n  changeTechniqueFilter,\n  getTrainingParticipantsAttended,\n  getTrainingParticipantsCertified,\n  getTrainingParticipantsCompetent\n})(injectIntl(TrainingUpdate));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/competencemanagement/trainingupdate/TrainingUpdate.jsx"],"names":["React","Component","Row","Col","Card","Nav","FormGroup","FormLabel","connect","callService","crudMaster","getTrainingUpdate","updateStore","filterColumnData","validateEsignCredential","changeTechniqueFilter","viewAttachment","getTrainingParticipantsAttended","getTrainingParticipantsCertified","getTrainingParticipantsCompetent","TechniqueFilter","injectIntl","toast","getControlMap","constructOptionList","convertDateValuetoString","showEsign","formatInputDate","ListMaster","ReadOnlyText","ContentPanel","MediaLabel","DEFAULT_RETURN","ConfirmMessage","BreadcrumbComponent","Affix","TrainingUpdateChildTab","ProductList","FontAwesomeIcon","faCheckCircle","faCheck","transactionStatus","mapStateToProps","state","Login","TrainingUpdate","constructor","props","completeTraining","version","ncontrolCode","inputData","obj","masterData","FromDate","ToDate","userInfo","fromDate","toDate","SelectedTrainingUpdate","ntrainingcode","selectedTechinque","ntechniquecode","ntransactionstatus","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","TechniqueList","fetchUrl","fecthInputObject","userinfo","inputParam","methodUrl","classUrl","operation","userRoleControlRights","nformcode","updateInfo","typeName","data","loadEsign","screenData","openChildModal","id","handlePageChange","event","setState","skip","take","handleDateChange","dateName","dateValue","selectedRecord","onComboChange","comboData","fieldName","caseNo","value","getSectionUsers","nsectionusercode","screenName","nfilterTechnique","searchRef","current","openFilter","showFilter","closeFilter","reloadData1","currentdate","Date","displayName","onFilterSubmit","reloadData","isFilterSubmit","undefined","currentDate","filterTechnique","warn","intl","formatMessage","error","controlMap","Map","settings","createRef","searchFieldList","getDerivedStateFromProps","masterStatus","errorCode","render","confirmMessage","searchedData","testData","parameterData","otherTestData","linkMaster","editFiles","filterParam","unchangeList","showAccordion","breadCrumbData","filterData","completeId","has","get","ncontrolcode","length","onFilterChange","handleFilterDateChange","FilterStatusValue","stateFilterStatus","Object","values","stechniquename","COMPLETED","stransdisplaystatus","indexOf","strainingvenue","strainingdate","strainingtopic","strainername","participants","showAccordian","dataState","onTabChange","nFlag","usersStatus","nusercode","generateBreadCrumData","push","breadCrumbFrom","breadCrumbto","componentDidUpdate","previousProps","isComponentUpdated","nformCode","map","item","trainingupdateMap"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Row, Col, Card, Nav, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    callService, crudMaster, getTrainingUpdate, updateStore\r\n     , filterColumnData, validateEsignCredential,\r\n    changeTechniqueFilter, viewAttachment,\r\n    getTrainingParticipantsAttended,getTrainingParticipantsCertified,getTrainingParticipantsCompetent\r\n} from '../../../actions'\r\nimport TechniqueFilter from './TechniqueFilter';\r\nimport { injectIntl } from 'react-intl';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { getControlMap, constructOptionList, convertDateValuetoString, showEsign, formatInputDate } from '../../../components/CommonScript';\r\nimport ListMaster from '../../../components/list-master/list-master.component';\r\n\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../../components/App.styles';\r\nimport { DEFAULT_RETURN } from '../../../actions/LoginTypes';\r\n\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport ConfirmMessage from '../../../components/confirm-alert/confirm-message.component';\r\n\r\n// import ReactTooltip from 'react-tooltip';\r\nimport BreadcrumbComponent from '../../../components/Breadcrumb.Component';\r\nimport { Affix } from 'rsuite';\r\nimport TrainingUpdateChildTab from './TrainingUpdateChildTab';\r\nimport { ProductList } from '../../product/product.styled';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheckCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCheck } from '@fortawesome/free-solid-svg-icons';\r\nimport { transactionStatus } from '../../../components/Enumeration';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass TrainingUpdate extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = ({\r\n            selectedRecord: {},\r\n            error: \"\",\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            skip: 0,\r\n            take: this.props.Login.settings ? this.props.Login.settings[3] : 25\r\n        });\r\n        this.searchRef = React.createRef();\r\n        this.searchFieldList = [\"stechniquename\", \"strainingtopic\", \"strainername\"]\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\") {\r\n            if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n                toast.warn(props.Login.masterStatus);\r\n                props.Login.masterStatus = \"\";\r\n            }\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    render() {\r\n\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        const { TechniqueList, SelectedTrainingUpdate, searchedData } = this.props.Login.masterData;\r\n        const { masterData, userInfo, testData, parameterData, otherTestData, linkMaster, editFiles } = this.props.Login;\r\n\r\n        let obj = convertDateValuetoString(this.state.selectedRecord[\"fromdate\"] || (this.props.Login.masterData && this.props.Login.masterData.FromDate),\r\n            this.state.selectedRecord[\"todate\"] || (this.props.Login.masterData && this.props.Login.masterData.ToDate),\r\n            this.props.Login.userInfo)\r\n\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n\r\n       \r\n        const filterParam = {\r\n            inputListName: \"TechniqueList\", selectedObject: \"SelectedTrainingUpdate\", primaryKeyField: \"ntrainingcode\",\r\n            fetchUrl: \"trainingupdate/getTrainingUpdateById\", fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            masterData: this.props.Login.masterData, unchangeList: [\"FromDate\", \"ToDate\"],\r\n            searchFieldList: this.searchFieldList\r\n        };\r\n              \r\n        this.props.Login.showAccordion = true;\r\n\r\n        let breadCrumbData = this.state.filterData || [];\r\n        const completeId = this.state.controlMap.has(\"CompleteTraining\") && this.state.controlMap.get(\"CompleteTraining\").ncontrolcode;\r\n\r\n\r\n        return (\r\n            <>\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={53}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix> : \"\"\r\n                    }\r\n                    {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                    <Row noGutters={true}>\r\n                        <Col md={4}>\r\n                            <ListMaster\r\n                                masterData={masterData}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_TRAININGUPDATE\" })}\r\n                                masterList={this.props.Login.masterData.searchedData || this.props.Login.masterData.TechniqueList}\r\n                                getMasterDetail={(TechniqueList) => this.props.getTrainingUpdate(TechniqueList, userInfo, masterData)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedTrainingUpdate}\r\n                                primaryKeyField=\"ntrainingcode\"\r\n                                mainField=\"strainingtopic\"\r\n                                firstField=\"strainername\"\r\n                                //secondField=\"strainername\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData1}\r\n                                needAccordianFilter={false}\r\n                                skip={this.state.skip}\r\n                                take={this.state.take}\r\n                                handlePageChange={this.handlePageChange}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                showFilterIcon={true}\r\n                                showFilter={this.props.Login.showFilter}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_TRAININGUPDATEFILTER\":\r\n                                            <TechniqueFilter\r\n                                                selectedRecord={this.state.selectedRecord || {}}\r\n                                                value={this.state.value || {}}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                fromDate={fromDate}\r\n                                                toDate={toDate}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                filterTechnique={this.state.filterTechnique || []}\r\n                                                nfilterTechnique={this.state.nfilterTechnique || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                onFilterChange={this.onFilterChange}\r\n                                                handleFilterDateChange={this.handleFilterDateChange}\r\n                                                FilterStatusValue={this.props.Login.masterData.FilterStatusValue || {}}\r\n                                                FilterStatus={this.state.stateFilterStatus || []}\r\n                                            />\r\n                                    }\r\n\r\n                            \r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={8}>\r\n                            {SelectedTrainingUpdate && Object.values(SelectedTrainingUpdate).length > 0 ?\r\n                                <ContentPanel className=\"panel-main-content\">\r\n                                    <Card className=\"border-0\">\r\n                                        <Card.Header>\r\n                                            {/* <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" /> */}\r\n                                            <Card.Title className=\"product-title-main\">\r\n                                                {SelectedTrainingUpdate.stechniquename}\r\n                                            </Card.Title>\r\n                                            <Card.Subtitle>\r\n                                            <div className=\"d-flex product-category\">\r\n                                                    <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                        <MediaLabel className={`btn btn-outlined ${SelectedTrainingUpdate.ntransactionstatus === transactionStatus.COMPLETED ? \"outline-success\" : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                            {/* {SelectedTrainingUpdate.ntransactionstatus === 22 && <FontAwesomeIcon icon={faCheck}></FontAwesomeIcon>} */}\r\n                                                            {SelectedTrainingUpdate.stransdisplaystatus}\r\n                                                        </MediaLabel>\r\n                                                    </h2>\r\n                                                    <div className=\"d-inline\">\r\n                                                   <ProductList className=\"d-flex justify-content-end\">                                                            \r\n                                                            <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETETRAINING\" })}\r\n                                                            //    data-for=\"tooltip_list_wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                onClick={() => this.completeTraining(this.state.version,completeId)}\r\n                                                                >\r\n                                                                <FontAwesomeIcon icon={faCheckCircle} />                                                                \r\n                                                            </Nav.Link>\r\n                                                        </ProductList>     \r\n                                                         </div>                                           \r\n                                            </div>\r\n                                            </Card.Subtitle>\r\n                                        </Card.Header>\r\n                                        <Card.Body className=\"form-static-wrap\">\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_VENUE\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.strainingvenue}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAININGDATE\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.strainingdate}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n\r\n                                               \r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAININGTOPIC\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.strainingtopic}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <FormLabel>{this.props.intl.formatMessage({ id: \"IDS_TRAINERNAME\" })}</FormLabel>\r\n                                                        <ReadOnlyText>{SelectedTrainingUpdate.strainername}</ReadOnlyText>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                               \r\n                                            </Row>\r\n                                            <TrainingUpdateChildTab \r\n                                                operation={this.props.Login.operation}\r\n                                                inputParam={this.props.Login.inputParam}\r\n                                                screenName={this.props.Login.screenName}\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                masterData={this.props.Login.masterData}\r\n                                                crudMaster={this.props.crudMaster}\r\n                                                errorCode={this.props.Login.errorCode}\r\n                                                masterStatus={this.props.Login.masterStatus}\r\n                                                openChildModal={this.props.Login.openChildModal}\r\n                                                participants={this.props.Login.participants}\r\n                                                updateStore={this.props.updateStore}\r\n                                                selectedRecord={this.props.Login.selectedRecord}\r\n                                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                                esignRights={this.props.Login.userRoleControlRights}\r\n                                                screenData={this.props.Login.screenData}\r\n                                                validateEsignCredential={this.props.validateEsignCredential}\r\n                                                loadEsign={this.props.Login.loadEsign}\r\n                                                controlMap={this.state.controlMap}\r\n                                                showAccordian={this.state.showAccordian}\r\n                                                dataState={this.props.Login.dataState}\r\n                                                onTabChange={this.onTabChange}\r\n                                                settings={this.props.Login.settings}\r\n                                                nFlag={this.props.Login.nFlag}\r\n                                                usersStatus={this.props.Login.usersStatus || []}\r\n                                                nusercode={this.props.Login.nusercode || []}\r\n                                                getTrainingParticipantsAttended={this.props.getTrainingParticipantsAttended}\r\n                                                getTrainingParticipantsCertified={this.props.getTrainingParticipantsCertified}\r\n                                                getTrainingParticipantsCompetent={this.props.getTrainingParticipantsCompetent}\r\n                                                linkMaster={this.props.linkMaster}\r\n                                                onComboChange={this.onComboChange}\r\n                                                 ncontrolCode={this.props.Login.ncontrolCode}\r\n                                                 viewAttachment ={this.props.viewAttachment} \r\n\r\n                                            />\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </ContentPanel>\r\n                                : \"\"\r\n                            }\r\n                        </Col>\r\n\r\n                    </Row>\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n   \r\n    \r\n    completeTraining = (version,ncontrolCode) => {\r\n\r\n        let inputData = [];\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.FromDate, this.props.Login.masterData.ToDate, this.props.Login.userInfo);\r\n        let fromDate = obj.fromDate;\r\n        let toDate = obj.toDate;\r\n        inputData[\"fromDate\"] = fromDate;\r\n        inputData[\"toDate\"] = toDate;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"ntechniquecode\"]=this.props.Login.masterData.SelectedTrainingUpdate[\"ntechniquecode\"];\r\n        inputData[\"trainingupdate\"] = {\r\n            \r\n            \"ntrainingcode\": this.props.Login.masterData.SelectedTrainingUpdate.ntrainingcode,\r\n            \"ntechniquecode\":this.props.Login.masterData.selectedTechinque.ntechniquecode,\r\n            \"ntransactionstatus\":this.props.Login.masterData.SelectedTrainingUpdate.ntransactionstatus,\r\n            \r\n        }\r\n        const postParam = {\r\n            inputListName: \"TechniqueList\", \r\n            selectedObject: \"SelectedTrainingUpdate\",\r\n            primaryKeyField: \"ntrainingcode\",\r\n            primaryKeyValue: this.props.Login.masterData.TechniqueList.ntrainingcode,\r\n            fetchUrl: \"trainingupdate/getTraningUpdateByTechnique\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n        }\r\n        const inputParam = {\r\n            methodUrl: \"Training\",\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            inputData: inputData, postParam,\r\n            operation:\"complete\"\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, \r\n                    screenData: { inputParam, masterData }, \r\n                    openChildModal: true, \r\n                    operation:\"complete\", \r\n                   // screenName: '', \r\n                    id: 'TrainingUpdate'\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.crudMaster(inputParam, masterData,'openChildModal');\r\n        }\r\n    }\r\n    handlePageChange = (event) => {\r\n        this.setState({\r\n            skip: event.skip,\r\n            take: event.take\r\n        });\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        if (this.props.Login.masterData && this.props.Login.masterData.filterTechnique && this.props.Login.masterData.FromDate) {\r\n            let obj = convertDateValuetoString(this.props.Login.masterData.FromDate,\r\n                this.props.Login.masterData.ToDate,\r\n                this.props.Login.userInfo);\r\n            breadCrumbData.push(\r\n\r\n                {\r\n                    \"label\": \"IDS_FROM\",\r\n                    \"value\": obj.breadCrumbFrom\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TO\",\r\n                    \"value\": obj.breadCrumbto\r\n                },\r\n                {\r\n                    \"label\": \"IDS_TECHNIQUE\",\r\n                    \"value\": this.props.Login.masterData.selectedTechinque ? this.props.Login.masterData.selectedTechinque[\"stechniquename\"]: \"NA\"\r\n                }\r\n            );\r\n        }\r\n        return breadCrumbData;\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName, caseNo) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        switch (caseNo) {\r\n            case 1:\r\n                selectedRecord[fieldName] = comboData;\r\n                this.setState({ selectedRecord });\r\n                break;\r\n              case 2:\r\n                selectedRecord[fieldName] = comboData;\r\n                selectedRecord[\"nsectionusercode\"] = comboData.value;\r\n                this.props.getSectionUsers(\r\n                  this.state.selectedRecord.nsectionusercode,\r\n                  this.props.Login.userInfo,\r\n                  selectedRecord,\r\n                  this.props.Login.screenName\r\n                );\r\n                break;\r\n            case 3:\r\n                let nfilterTechnique = this.state.nfilterTechnique || {}\r\n                nfilterTechnique = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                this.setState({ nfilterTechnique })\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    reloadData1 = () => {\r\n        this.searchRef.current.value = \"\";\r\n            let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n            let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n            let inputParam = {\r\n                inputData: {\r\n\r\n                    userinfo: this.props.Login.userInfo,\r\n                    currentdate: formatInputDate(new Date(), true)\r\n                },\r\n                classUrl: \"trainingupdate\",\r\n                methodUrl: \"TrainingUpdate\",\r\n                userInfo: this.props.Login.userInfo,\r\n                displayName: \"IDS_TRAININGUPDATE\"\r\n\r\n            };\r\n            this.props.callService(inputParam);\r\n          \r\n        \r\n    }\r\n    onFilterSubmit = () => {\r\n        this.reloadData(true);\r\n    }\r\n\r\n    reloadData = (isFilterSubmit) => {\r\n\r\n        this.searchRef.current.value = \"\";\r\n\r\n        let fromDate = this.props.Login.masterData.FromDate;\r\n        let toDate = this.props.Login.masterData.ToDate;\r\n        if (isFilterSubmit) {\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            if (selectedRecord && selectedRecord[\"fromdate\"] !== undefined) {\r\n                fromDate = selectedRecord[\"fromdate\"];\r\n            }\r\n            if (selectedRecord && selectedRecord[\"todate\"] !== undefined) {\r\n                toDate = selectedRecord[\"todate\"];\r\n            }\r\n        }\r\n        let obj = convertDateValuetoString(fromDate, toDate, this.props.Login.userInfo);\r\n        if (this.state.nfilterTechnique.value) {\r\n            let inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    fromDate: obj.fromDate,\r\n                    toDate: obj.toDate,\r\n                    currentDate: null,\r\n                    ntechniquecode: this.state.nfilterTechnique.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    nfilterTechnique: this.state.nfilterTechnique\r\n                },\r\n\r\n                classUrl: \"trainingupdate\",\r\n                methodUrl: \"TraningUpdateByTechnique\",\r\n                displayName: \"IDS_TRAININGCERTIFICATE\",\r\n                userInfo: this.props.Login.userInfo\r\n            };\r\n            this.props.changeTechniqueFilter(inputParam, this.props.Login.masterData.filterTechnique,this.state.nfilterTechnique);\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_TECHNIQUENOTAVAILABLE\" }));\r\n        }\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let isComponentUpdated = false;\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            isComponentUpdated = true;\r\n        }\r\n\r\n        let userRoleControlRights = this.state.userRoleControlRights || [];\r\n        let controlMap = this.state.controlMap || new Map();\r\n        if (this.props.Login.userInfo && this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const nformCode = this.props.Login.userInfo.nformcode;\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[nformCode] && Object.values(this.props.Login.userRoleControlRights[nformCode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode));\r\n            }\r\n            controlMap = getControlMap(this.props.Login.userRoleControlRights, nformCode);\r\n            isComponentUpdated = true;\r\n        }\r\n        let nfilterTechnique = this.state.nfilterTechnique || {};\r\n        let filterTechnique = this.state.filterTechnique || {};\r\n\r\n        if (this.props.Login.masterData.filterTechnique !== previousProps.Login.masterData.filterTechnique) {\r\n            const trainingupdateMap = constructOptionList(this.props.Login.masterData.filterTechnique || [], \"ntechniquecode\",\r\n                \"stechniquename\", 'ntechniquecode', 'ascending', false);\r\n            filterTechnique = trainingupdateMap.get(\"OptionList\");\r\n            if (trainingupdateMap.get(\"DefaultValue\")) {\r\n                nfilterTechnique = trainingupdateMap.get(\"DefaultValue\");\r\n            } else if (filterTechnique && filterTechnique.length > 0) {\r\n                nfilterTechnique = filterTechnique[0];\r\n            }\r\n            isComponentUpdated = true;\r\n        } else if (this.props.Login.masterData.nfilterTechnique !== previousProps.Login.masterData.nfilterTechnique) {\r\n            nfilterTechnique = this.props.Login.masterData.nfilterTechnique;\r\n            isComponentUpdated = true;\r\n        }\r\n        if (isComponentUpdated) {\r\n            this.setState({ nfilterTechnique, userRoleControlRights, controlMap, selectedRecord, filterTechnique });\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            const filterData = this.generateBreadCrumData();\r\n            this.setState({ filterData });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, validateEsignCredential,\r\n    updateStore, filterColumnData, getTrainingUpdate, changeTechniqueFilter,getTrainingParticipantsAttended,\r\n    getTrainingParticipantsCertified,getTrainingParticipantsCompetent\r\n})(injectIntl(TrainingUpdate));\r\n\r\n"]},"metadata":{},"sourceType":"module"}