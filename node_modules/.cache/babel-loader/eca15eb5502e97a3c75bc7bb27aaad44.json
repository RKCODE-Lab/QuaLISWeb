{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\branches\\\\SOURCE-513-PROD\\\\SOURCE-513-ALPD-5304\\\\QuaLISWeb\\\\src\\\\pages\\\\subcontractsamples\\\\SubContractTestDetail.jsx\";\nimport React, { Component } from 'react';\nimport { Col, Row } from 'react-bootstrap';\nimport { injectIntl } from 'react-intl';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { addFile, callService, crudMaster, getSubContractorComboService, saveSubcontractorTestFile, updateReceiveResultSubContractTest, updateReceiveSTTSubContractTest, updateStore, updateSubContractSamplesdetails, viewDetail, viewAttachment } from '../../actions';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { create_UUID, deleteAttachmentDropZone, getControlMap, Lims_JSON_stringify, onDropAttachFileList, showEsign } from '../../components/CommonScript';\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign'; // import './product.css';\n\nimport { process } from '@progress/kendo-data-query';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport { ListWrapper } from '../userroletemplate/userroletemplate.styles';\nimport AddSubContractorTestAttchment from './AddSubContractorTestAttchment';\nimport SendSubContractor from './SendSubContractor';\nimport ViewRecord from './viewRecord';\n\nclass SubContractTestDetail extends Component {\n  constructor(props) {\n    super(props);\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let openChildModal = this.props.Login.openChildModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let selectedId = this.props.Login.selectedId;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"sendsubcontractor\") {\n          loadEsign = false;\n          openModal = false;\n          openChildModal = false;\n          selectedRecord = {};\n        } else {\n          loadEsign = false;\n          selectedRecord['esignpassword'] = \"\";\n          selectedRecord['esigncomments'] = \"\";\n          selectedRecord['esignreason'] = \"\";\n          selectedRecord = {};\n        }\n      } else {\n        openModal = false;\n        openChildModal = false;\n        selectedRecord = {};\n        selectedId = null;\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          openChildModal,\n          loadEsign,\n          selectedRecord,\n          selectedId\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.state.data, event.dataState),\n        dataState: event.dataState\n      });\n    };\n\n    this.viewFile = inputParam => {\n      //let inputData = {}\n      let inputParamData = { ...inputParam,\n        inputData: { ...inputParam.inputData,\n          subcontractortestdetail: inputParam.inputData.selectedRecord\n        }\n      };\n      this.props.viewAttachment(inputParamData);\n    };\n\n    this.onSaveSubContractorTestFile = (saveType, formRef) => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = selectedRecord.editable ? selectedRecord.editable : transactionStatus.ALL;\n      let FileArray = [];\n\n      if (isFileEdited == 1) {\n        let subcontractorTestFile = {\n          nsubcontractortestdetailcode: selectedRecord.subcontractortestdetail.nsubcontractortestdetailcode,\n          nattachmenttypecode\n        };\n        const formData = new FormData();\n\n        if (nattachmenttypecode === attachmentType.FTP) {\n          if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n            acceptedFiles.forEach((file, index) => {\n              const tempData = Object.assign({}, subcontractorTestFile);\n              const splittedFileName = file.name.split('.');\n              const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n              const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n              const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n              const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nsupplierfilecode && selectedRecord.nsupplierfilecode > 0 && selectedRecord.ssystemfilename !== \"\" && selectedRecord.ssystemfilename !== undefined ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n              tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false); //tempData[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n\n              tempData[\"nlinkcode\"] = transactionStatus.NA;\n              tempData[\"ssystemfilename\"] = uniquefilename;\n              tempData[\"nfilesize\"] = file.size;\n              formData.append(\"uploadedFile\" + index, file);\n              formData.append(\"uniquefilename\" + index, uniquefilename);\n              FileArray.push(tempData);\n            });\n            formData.append(\"filecount\", acceptedFiles.length);\n            isFileEdited = transactionStatus.YES;\n          } else {\n            subcontractorTestFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false); // subcontractorTestFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\n\n            subcontractorTestFile[\"nlinkcode\"] = transactionStatus.NA;\n            subcontractorTestFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n            subcontractorTestFile[\"nfilesize\"] = selectedRecord.nfilesize;\n            FileArray.push(subcontractorTestFile);\n          }\n        } else {\n          subcontractorTestFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename.trim(), false); //subcontractorTestFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\n\n          subcontractorTestFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n          subcontractorTestFile[\"ssystemfilename\"] = \"\";\n          subcontractorTestFile[\"nfilesize\"] = 0;\n          FileArray.push(subcontractorTestFile);\n        }\n\n        formData.append(\"isFileEdited\", isFileEdited);\n        formData.append(\"subcontractorFile\", JSON.stringify(FileArray));\n        formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\n        const inputParam = {\n          inputData: {\n            \"userinfo\": { ...this.props.Login.userInfo,\n              sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\n              smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\n              slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\n            }\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"fileattachment\",\n          classUrl: \"subcontracttestdetail\",\n          saveType,\n          formRef,\n          methodUrl: \"updateSubcontractorTestFile\",\n          selectedRecord: { ...this.state.selectedRecord\n          }\n        };\n        this.props.saveSubcontractorTestFile(inputParam, this.props.Login.masterData);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loading: false,\n            openModal: false,\n            selectedRecord: {}\n          }\n        };\n        return this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedFile = this.state.selectedRecord || {};\n      selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file);\n      this.setState({\n        selectedFile,\n        actionType: \"delete\"\n      });\n    };\n\n    this.onDropFile = (attachedFiles, fieldName, maxSize, editable) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      let neditable = 0;\n\n      if (neditable != undefined) {\n        selectedRecord[editable] = 1;\n      }\n\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.onInputOnChange = (event, optional, editfield) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (editfield != undefined) {\n        selectedRecord[editfield] = 1;\n      }\n\n      if (event.target.type === 'checkbox') {\n        selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else if (event.target.type === \"radio\") {\n        selectedRecord[event.target.name] = optional;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChange = (comboData, fieldName, editfield) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = comboData;\n\n      if (editfield != undefined) {\n        selectedRecord[editfield] = 1;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.reloadData = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": this.props.Login.userInfo\n        },\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: this.props.Login.inputParam.methodUrl,\n        displayName: this.props.Login.displayName,\n        userInfo: this.props.Login.userInfo\n      };\n      this.props.callService(inputParam);\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation == \"fileattachment\") {\n        return this.onSaveSubContractorTestFile(saveType, formRef);\n      }\n\n      let inputData = [];\n      let dataState = undefined;\n      let selectedId = null;\n      dataState = this.state.dataState;\n      selectedId = this.props.Login.selectedRecord['subcontractortestdetail'].nsubcontractortestdetailcode;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"subcontractortestdetail\"] = this.state.selectedRecord['subcontractortestdetail'];\n      inputData[\"subcontractortestdetail\"]['nsuppliercode'] = this.state.selectedRecord['nsuppliercode'].value;\n      inputData[\"subcontractortestdetail\"]['ncontrolleadtime'] = this.state.selectedRecord['nsuppliercode'].item.ncontrolleadtime;\n      inputData[\"subcontractortestdetail\"]['nperiodcode'] = this.state.selectedRecord['nsuppliercode'].item.nperiodcode;\n      inputData[\"subcontractortestdetail\"]['sremarks'] = this.state.selectedRecord['sremarks']; // if (inputData[\"subcontractordetails\"].hasOwnProperty('esignpassword')) {\n      //     if (inputData[\"subcontractordetails\"]['esignpassword'] === '') {\n      //         delete inputData[\"subcontractordetails\"]['esigncomments']\n      //         delete inputData[\"subcontractordetails\"]['esignpassword']\n      //     }\n      // }\n\n      const inputParam = {\n        classUrl: this.props.Login.inputParam.classUrl,\n        methodUrl: \"updateSubContractSamplesdetails\",\n        displayName: this.props.Login.inputParam.displayName,\n        inputData: inputData,\n        selectedId,\n        dataState,\n        operation: this.props.Login.operation,\n        saveType,\n        formRef,\n        searchRef: this.searchRef,\n        selectedRecord: { ...this.state.selectedRecord\n        }\n      };\n      const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n\n      if (esignNeeded) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData: this.props.Login.masterData\n            },\n            openModal: true,\n            screenName: \"IDS_SENDSUBCONTRACTOR\",\n            operation: this.props.Login.operation\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.updateSubContractSamplesdetails(inputParam, this.props.Login.masterData, \"openModal\", \"\", \"\");\n      }\n    };\n\n    this.validateEsign = () => {\n      let modalName = this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \" + this.props.intl.formatMessage({\n        id: \"IDS_FILE\"\n      })) ? \"openChildModal\" : \"openModal\";\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"],\n            nreasoncode: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\n            spredefinedreason: this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, modalName);\n    };\n\n    this.formRef = React.createRef();\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      data: [],\n      masterStatus: \"\",\n      error: \"\",\n      selectedRecord: {},\n      dataResult: [],\n      dataState: _dataState,\n      userRoleControlRights: [],\n      controlMap: new Map()\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.extractedColumnList = [{\n      \"idsName\": \"IDS_TEST\",\n      \"dataField\": \"stestsynonym\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SUBCONTRACTOR\",\n      \"dataField\": \"ssuppliername\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_EXPECTEDDATE\",\n      \"dataField\": \"sexpecteddate\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_CONTROLLEADTIME\",\n      \"dataField\": \"scontrolleaddate\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"sfilename\",\n      \"width\": \"200px\",\n      \"fieldType\": \"attachment\"\n    }, {\n      \"idsName\": \"IDS_ARNO\",\n      \"dataField\": \"sarno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_SAMPLEARNO\",\n      \"dataField\": \"ssamplearno\",\n      \"width\": \"200px\"\n    }, {\n      \"idsName\": \"IDS_DISPLAYSTATUS\",\n      \"dataField\": \"stransdisplaystatus\",\n      \"width\": \"200px\"\n    }];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    const SubContTestAttachmentId = this.props.Login.inputParam && this.state.controlMap.has(\"SubContTestAttachment\") && this.state.controlMap.get(\"SubContTestAttachment\").ncontrolcode;\n    const viewDetailId = this.props.Login.inputParam && this.state.controlMap.has(\"ViewSubContractorTestDetail\") && this.state.controlMap.get(\"ViewSubContractorTestDetail\").ncontrolcode;\n    const attachmentParam = {\n      operation: \"view\",\n      classUrl: \"subcontracttestdetail\",\n      methodUrl: \"SubcontractorTestFile\"\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ListWrapper, {\n      className: \"client-list-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, this.state.data ? /*#__PURE__*/React.createElement(DataGrid, {\n      primaryKeyField: \"nsubcontractortestdetailcode\",\n      data: this.state.data,\n      dataResult: this.state.dataResult,\n      dataState: this.state.dataState,\n      dataStateChange: this.dataStateChange,\n      extractedColumnList: this.extractedColumnList,\n      fetchRecord: this.props.getProductComboService,\n      editParam: [],\n      deleteRecord: this.deleteRecord,\n      deleteParam: [],\n      reloadData: this.reloadData,\n      controlMap: this.state.controlMap,\n      userRoleControlRights: this.state.userRoleControlRights,\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      pageable: true,\n      scrollable: 'scrollable',\n      gridHeight: '600px',\n      isActionRequired: true,\n      isToolBarRequired: true,\n      selectedId: this.props.Login.selectedId,\n      listMasterShowIcon: 0,\n      masterdata: this.props.Login.masterData || [],\n      sendRecord: this.props.getSubContractorComboService,\n      updateReceiveSTTSubContractTest: this.props.updateReceiveSTTSubContractTest,\n      updateReceiveResultSubContractTest: this.props.updateReceiveResultSubContractTest,\n      addFile: this.props.addFile,\n      attahmentID: SubContTestAttachmentId,\n      viewDetailID: viewDetailId,\n      viewDetail: this.props.viewDetail,\n      viewFile: this.viewFile,\n      attachmentParam: attachmentParam //methodUrl = {\"SubContractorTestDetail\"}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 33\n      }\n    }) : \"\"))), this.props.Login.openModal || this.props.Login.openChildModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \" + this.props.intl.formatMessage({\n        id: \"IDS_FILE\"\n      })) ? this.props.Login.openChildModal : this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      showSaveContinue: true,\n      screenName: this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"sendsubcontractor\" ? /*#__PURE__*/React.createElement(SendSubContractor, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        subContracorMapList: this.props.Login.subContracorMapList || [],\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"fileattachment\" ? /*#__PURE__*/React.createElement(AddSubContractorTestAttchment, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        subContracorMapList: this.props.Login.subContracorMapList || [],\n        operation: this.props.Login.operation,\n        userInfo: this.props.Login.userInfo,\n        linkMaster: this.props.Login.linkMaster,\n        onDrop: this.onDropFile,\n        deleteAttachment: this.deleteAttachment,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 29\n        }\n      }) : this.props.Login.operation === \"viewRecord\" && Object.keys(this.state.selectedRecord).length > 0 ?\n      /*#__PURE__*/\n      // <ViewRecord\n      //     selectedRecord={this.props.Login.selectedRecord || {}}\n      //     operation={this.props.Login.operation}\n      //     userInfo={this.props.Login.userInfo}\n      // />\n      React.createElement(ViewRecord, {\n        data: this.state.selectedRecord && this.state.selectedRecord['subcontractortestdetail'] ? JSON.parse(this.state.selectedRecord['subcontractortestdetail'].jsonsample.value) : {},\n        values: this.state.selectedRecord && this.state.selectedRecord['subcontractortestdetail'] ? [JSON.parse(this.state.selectedRecord['subcontractortestdetail'].jsonsample.value), JSON.parse(this.state.selectedRecord['subcontractortestdetail'].jsonsubsample.value)] : {},\n        SingleItem: this.state.DynamicSampleColumns,\n        displayFields: [this.state.DynamicSampleColumns, this.state.DynamicSubSampleColumns],\n        screenName: \"IDS_SAMPLEINFO\",\n        userInfo: this.props.Login.userInfo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 29\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }) : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      DynamicSampleColumns,\n      DynamicSubSampleColumns\n    } = this.state;\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        const userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        let dataState = {\n          skip: 0,\n          take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n        };\n        this.setState({\n          userRoleControlRights,\n          controlMap,\n          data: this.props.Login.masterData[\"SubContractSamples\"],\n          dataResult: process(this.props.Login.masterData[\"SubContractSamples\"], dataState),\n          dataState\n        });\n      } else {\n        if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n          const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n          DynamicSampleColumns = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\n          DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        }\n\n        let {\n          dataState\n        } = this.state;\n\n        if (this.props.Login.dataState === undefined && dataState === undefined) {\n          dataState = {\n            skip: 0,\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n          };\n        }\n\n        this.setState({\n          DynamicSampleColumns,\n          DynamicSubSampleColumns,\n          data: this.props.Login.masterData[\"SubContractSamples\"],\n          selectedRecord: this.props.Login.selectedRecord,\n          dataResult: this.props.Login.masterData[\"SubContractSamples\"] && process(this.props.Login.masterData[\"SubContractSamples\"], dataState),\n          dataState\n        });\n      }\n    } else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      this.setState({\n        DynamicSampleColumns,\n        DynamicSubSampleColumns,\n        selectedRecord: this.props.Login.selectedRecord\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getSubContractorComboService,\n  updateSubContractSamplesdetails,\n  updateReceiveSTTSubContractTest,\n  updateReceiveResultSubContractTest,\n  addFile,\n  saveSubcontractorTestFile,\n  viewDetail,\n  viewAttachment\n})(injectIntl(SubContractTestDetail));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/pages/subcontractsamples/SubContractTestDetail.jsx"],"names":["React","Component","Col","Row","injectIntl","connect","toast","addFile","callService","crudMaster","getSubContractorComboService","saveSubcontractorTestFile","updateReceiveResultSubContractTest","updateReceiveSTTSubContractTest","updateStore","updateSubContractSamplesdetails","viewDetail","viewAttachment","DEFAULT_RETURN","create_UUID","deleteAttachmentDropZone","getControlMap","Lims_JSON_stringify","onDropAttachFileList","showEsign","attachmentType","transactionStatus","ConfirmMessage","SlideOutModal","Esign","process","DataGrid","ListWrapper","AddSubContractorTestAttchment","SendSubContractor","ViewRecord","SubContractTestDetail","constructor","props","closeModal","loadEsign","Login","openModal","openChildModal","selectedRecord","selectedId","operation","updateInfo","typeName","data","dataStateChange","event","setState","dataResult","state","dataState","viewFile","inputParam","inputParamData","inputData","subcontractortestdetail","onSaveSubContractorTestFile","saveType","formRef","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","editable","ALL","FileArray","subcontractorTestFile","nsubcontractortestdetailcode","formData","FormData","FTP","Array","isArray","length","forEach","file","index","tempData","Object","assign","splittedFileName","name","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","nsupplierfilecode","undefined","NA","size","append","push","YES","nfilesize","slinkfilename","trim","nlinkcode","value","JSON","stringify","userInfo","sformname","smodulename","slanguagename","isFileupload","classUrl","methodUrl","masterData","loading","deleteAttachment","fieldName","selectedFile","actionType","onDropFile","attachedFiles","maxSize","neditable","onInputOnChange","optional","editfield","target","type","checked","NO","onComboChange","comboData","reloadData","displayName","onSaveClick","item","ncontrolleadtime","nperiodcode","searchRef","esignNeeded","userRoleControlRights","nformcode","ncontrolCode","screenData","screenName","validateEsign","modalName","genericLabel","slanguagetypecode","concat","intl","formatMessage","id","sreason","nreasoncode","spredefinedreason","label","password","validateEsignCredential","createRef","skip","take","settings","parseInt","masterStatus","error","controlMap","Map","confirmMessage","extractedColumnList","getDerivedStateFromProps","warn","render","SubContTestAttachmentId","has","get","ncontrolcode","viewDetailId","attachmentParam","getProductComboService","deleteRecord","subContracorMapList","linkMaster","keys","parse","jsonsample","jsonsubsample","DynamicSampleColumns","DynamicSubSampleColumns","componentDidUpdate","previousProps","values","map","DynamicDesign","dynamicColumn","jsondata","sampledisplayfields","subsamplelistitem","componentWillUnmount","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,YAA3B;AACA,OAAO,6CAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SACIC,OADJ,EAEIC,WAFJ,EAEiBC,UAFjB,EAE6BC,4BAF7B,EAGIC,yBAHJ,EAIIC,kCAJJ,EAKIC,+BALJ,EAMIC,WANJ,EAMiBC,+BANjB,EAOIC,UAPJ,EAOeC,cAPf,QAQO,eARP;AASA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,WAAT,EAAsBC,wBAAtB,EAAgDC,aAAhD,EAA+DC,mBAA/D,EAAoFC,oBAApF,EAA0GC,SAA1G,QAA2H,+BAA3H;AACA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,8BAAlD;AACA,OAAOC,cAAP,MAA2B,0DAA3B;AACA,OAAOC,aAAP,MAA0B,gDAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,OAAOC,QAAP,MAAqB,gDAArB;AACA,SAASC,WAAT,QAA4B,6CAA5B;AACA,OAAOC,6BAAP,MAA0C,iCAA1C;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,qBAAN,SAAoCnC,SAApC,CAA8C;AAE1CoC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA+BnBC,UA/BmB,GA+BN,MAAM;AACf,UAAIC,SAAS,GAAG,KAAKF,KAAL,CAAWG,KAAX,CAAiBD,SAAjC;AACA,UAAIE,SAAS,GAAG,KAAKJ,KAAL,CAAWG,KAAX,CAAiBC,SAAjC;AACA,UAAIC,cAAc,GAAG,KAAKL,KAAL,CAAWG,KAAX,CAAiBE,cAAtC;AACA,UAAIC,cAAc,GAAG,KAAKN,KAAL,CAAWG,KAAX,CAAiBG,cAAtC;AACA,UAAIC,UAAU,GAAG,KAAKP,KAAL,CAAWG,KAAX,CAAiBI,UAAlC;;AACA,UAAI,KAAKP,KAAL,CAAWG,KAAX,CAAiBD,SAArB,EAAgC;AAC5B,YAAI,KAAKF,KAAL,CAAWG,KAAX,CAAiBK,SAAjB,KAA+B,mBAAnC,EAAwD;AACpDN,UAAAA,SAAS,GAAG,KAAZ;AACAE,UAAAA,SAAS,GAAG,KAAZ;AACAC,UAAAA,cAAc,GAAC,KAAf;AACAC,UAAAA,cAAc,GAAG,EAAjB;AACH,SALD,MAMK;AACDJ,UAAAA,SAAS,GAAG,KAAZ;AACAI,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,eAAD,CAAd,GAAkC,EAAlC;AACAA,UAAAA,cAAc,CAAC,aAAD,CAAd,GAA8B,EAA9B;AACAA,UAAAA,cAAc,GAAG,EAAjB;AACH;AACJ,OAdD,MAeK;AACDF,QAAAA,SAAS,GAAG,KAAZ;AACAC,QAAAA,cAAc,GAAC,KAAf;AACAC,QAAAA,cAAc,GAAG,EAAjB;AACAC,QAAAA,UAAU,GAAC,IAAX;AACH;;AAED,YAAME,UAAU,GAAG;AACfC,QAAAA,QAAQ,EAAE9B,cADK;AAEf+B,QAAAA,IAAI,EAAE;AAAEP,UAAAA,SAAF;AAAYC,UAAAA,cAAZ;AAA4BH,UAAAA,SAA5B;AAAuCI,UAAAA,cAAvC;AAAuDC,UAAAA;AAAvD;AAFS,OAAnB;AAIA,WAAKP,KAAL,CAAWxB,WAAX,CAAuBiC,UAAvB;AAEH,KAjEkB;;AAAA,SAiFnBG,eAjFmB,GAiFAC,KAAD,IAAW;AACzB,WAAKC,QAAL,CAAc;AACVC,QAAAA,UAAU,EAAEvB,OAAO,CAAC,KAAKwB,KAAL,CAAWL,IAAZ,EAAkBE,KAAK,CAACI,SAAxB,CADT;AAEVA,QAAAA,SAAS,EAAEJ,KAAK,CAACI;AAFP,OAAd;AAIH,KAtFkB;;AAAA,SA4NnBC,QA5NmB,GA4NPC,UAAD,IAAe;AACtB;AACA,UAAIC,cAAc,GAAG,EAEb,GAAGD,UAFU;AAGbE,QAAAA,SAAS,EAAC,EAAC,GAAGF,UAAU,CAACE,SAAf;AAAyBC,UAAAA,uBAAuB,EAAGH,UAAU,CAACE,SAAX,CAAqBf;AAAxE;AAHG,OAArB;AAKI,WAAKN,KAAL,CAAWrB,cAAX,CAA0ByC,cAA1B;AACP,KApOkB;;AAAA,SAsOnBG,2BAtOmB,GAsOW,CAACC,QAAD,EAAWC,OAAX,KAAuB;AAC7C,YAAMnB,cAAc,GAAG,KAAKU,KAAL,CAAWV,cAAlC;AACA,YAAMoB,aAAa,GAAGpB,cAAc,CAACqB,SAArC;AACA,YAAMC,mBAAmB,GAAGtB,cAAc,CAACsB,mBAA3C;AACA,UAAIC,YAAY,GAAGvB,cAAc,CAACwB,QAAf,GAA0BxB,cAAc,CAACwB,QAAzC,GAAoD1C,iBAAiB,CAAC2C,GAAzF;AACA,UAAIC,SAAS,GAAG,EAAhB;;AAEA,UAAGH,YAAY,IAAI,CAAnB,EACA;AACA,YAAII,qBAAqB,GAAG;AACxBC,UAAAA,4BAA4B,EAAE5B,cAAc,CAACgB,uBAAf,CAAuCY,4BAD7C;AAExBN,UAAAA;AAFwB,SAA5B;AAIA,cAAMO,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;AACA,YAAIR,mBAAmB,KAAKzC,cAAc,CAACkD,GAA3C,EAAgD;AAC5C,cAAIX,aAAa,IAAIY,KAAK,CAACC,OAAN,CAAcb,aAAd,CAAjB,IAAiDA,aAAa,CAACc,MAAd,GAAuB,CAA5E,EAA+E;AAC3Ed,YAAAA,aAAa,CAACe,OAAd,CAAsB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACnC,oBAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBb,qBAAlB,CAAjB;AACA,oBAAMc,gBAAgB,GAAGL,IAAI,CAACM,IAAL,CAAUC,KAAV,CAAgB,GAAhB,CAAzB;AACA,oBAAMC,aAAa,GAAGR,IAAI,CAACM,IAAL,CAAUC,KAAV,CAAgB,GAAhB,EAAqBF,gBAAgB,CAACP,MAAjB,GAA0B,CAA/C,CAAtB;AACA,oBAAMW,eAAe,GAAG7C,cAAc,CAAC6C,eAAf,GAAiC7C,cAAc,CAAC6C,eAAf,CAA+BF,KAA/B,CAAqC,GAArC,CAAjC,GAA6E,EAArG;AACA,oBAAMG,iBAAiB,GAAG9C,cAAc,CAAC6C,eAAf,GAAiCT,IAAI,CAACM,IAAL,CAAUC,KAAV,CAAgB,GAAhB,EAAqBE,eAAe,CAACX,MAAhB,GAAyB,CAA9C,CAAjC,GAAoF,EAA9G;AACA,oBAAMa,cAAc,GAAGzB,mBAAmB,KAAKzC,cAAc,CAACkD,GAAvC,GAA6C/B,cAAc,CAACgD,iBAAf,IAAoChD,cAAc,CAACgD,iBAAf,GAAmC,CAAvE,IAC7DhD,cAAc,CAAC6C,eAAf,KAAmC,EAD0B,IACpB7C,cAAc,CAAC6C,eAAf,KAAmCI,SADf,GAC2BJ,eAAe,CAAC,CAAD,CAAf,GAAqB,GAArB,GAA2BC,iBADtD,GAC0EvE,WAAW,KAAK,GAAhB,GAAsBqE,aAD7I,GAC6J,EADpL;AAEAN,cAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwB5D,mBAAmB,CAAC0D,IAAI,CAACM,IAAN,EAAY,KAAZ,CAA3C,CARmC,CASnC;;AACAJ,cAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBxD,iBAAiB,CAACoE,EAA1C;AACAZ,cAAAA,QAAQ,CAAC,iBAAD,CAAR,GAA8BS,cAA9B;AACAT,cAAAA,QAAQ,CAAC,WAAD,CAAR,GAAwBF,IAAI,CAACe,IAA7B;AACAtB,cAAAA,QAAQ,CAACuB,MAAT,CAAgB,iBAAiBf,KAAjC,EAAwCD,IAAxC;AACAP,cAAAA,QAAQ,CAACuB,MAAT,CAAgB,mBAAmBf,KAAnC,EAA0CU,cAA1C;AACArB,cAAAA,SAAS,CAAC2B,IAAV,CAAef,QAAf;AACH,aAhBD;AAiBAT,YAAAA,QAAQ,CAACuB,MAAT,CAAgB,WAAhB,EAA6BhC,aAAa,CAACc,MAA3C;AACAX,YAAAA,YAAY,GAAGzC,iBAAiB,CAACwE,GAAjC;AACH,WApBD,MAoBO;AACH3B,YAAAA,qBAAqB,CAAC,WAAD,CAArB,GAAqCjD,mBAAmB,CAACsB,cAAc,CAACqB,SAAhB,EAA2B,KAA3B,CAAxD,CADG,CAEJ;;AACCM,YAAAA,qBAAqB,CAAC,WAAD,CAArB,GAAqC7C,iBAAiB,CAACoE,EAAvD;AACAvB,YAAAA,qBAAqB,CAAC,iBAAD,CAArB,GAA2C3B,cAAc,CAAC6C,eAA1D;AACAlB,YAAAA,qBAAqB,CAAC,WAAD,CAArB,GAAqC3B,cAAc,CAACuD,SAApD;AACA7B,YAAAA,SAAS,CAAC2B,IAAV,CAAe1B,qBAAf;AACH;AACJ,SA7BD,MA6BO;AACHA,UAAAA,qBAAqB,CAAC,WAAD,CAArB,GAAqCjD,mBAAmB,CAACsB,cAAc,CAACwD,aAAf,CAA6BC,IAA7B,EAAD,EAAsC,KAAtC,CAAxD,CADG,CAEH;;AACA9B,UAAAA,qBAAqB,CAAC,WAAD,CAArB,GAAqC3B,cAAc,CAAC0D,SAAf,CAAyBC,KAAzB,GAAiC3D,cAAc,CAAC0D,SAAf,CAAyBC,KAA1D,GAAkE,CAAC,CAAxG;AACAhC,UAAAA,qBAAqB,CAAC,iBAAD,CAArB,GAA2C,EAA3C;AACAA,UAAAA,qBAAqB,CAAC,WAAD,CAArB,GAAqC,CAArC;AACAD,UAAAA,SAAS,CAAC2B,IAAV,CAAe1B,qBAAf;AACH;;AACDE,QAAAA,QAAQ,CAACuB,MAAT,CAAgB,cAAhB,EAAgC7B,YAAhC;AACAM,QAAAA,QAAQ,CAACuB,MAAT,CAAgB,mBAAhB,EAAqCQ,IAAI,CAACC,SAAL,CAAenC,SAAf,CAArC;AACAG,QAAAA,QAAQ,CAACuB,MAAT,CAAgB,UAAhB,EAA4BQ,IAAI,CAACC,SAAL,CAAe,KAAKnE,KAAL,CAAWG,KAAX,CAAiBiE,QAAhC,CAA5B;AAEA,cAAMjD,UAAU,GAAG;AACfE,UAAAA,SAAS,EAAE;AACP,wBAAY,EACR,GAAG,KAAKrB,KAAL,CAAWG,KAAX,CAAiBiE,QADZ;AAERC,cAAAA,SAAS,EAAErF,mBAAmB,CAAC,KAAKgB,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0BC,SAA3B,CAFtB;AAGRC,cAAAA,WAAW,EAAEtF,mBAAmB,CAAC,KAAKgB,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0BE,WAA3B,CAHxB;AAIRC,cAAAA,aAAa,EAAEvF,mBAAmB,CAAC,KAAKgB,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0BG,aAA3B;AAJ1B;AADL,WADI;AASfpC,UAAAA,QAAQ,EAAEA,QATK;AAUfqC,UAAAA,YAAY,EAAE,IAVC;AAWfhE,UAAAA,SAAS,EAAE,gBAXI;AAYfiE,UAAAA,QAAQ,EAAE,uBAZK;AAafjD,UAAAA,QAbe;AAaLC,UAAAA,OAbK;AAaIiD,UAAAA,SAAS,EAAE,6BAbf;AAcfpE,UAAAA,cAAc,EAAC,EAAC,GAAG,KAAKU,KAAL,CAAWV;AAAf;AAdA,SAAnB;AAgBA,aAAKN,KAAL,CAAW3B,yBAAX,CAAqC8C,UAArC,EAAiD,KAAKnB,KAAL,CAAWG,KAAX,CAAiBwE,UAAlE;AACH,OAjEG,MAmEJ;AACgB,cAAMlE,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE9B,cADK;AAEf+B,UAAAA,IAAI,EAAE;AAAEiE,YAAAA,OAAO,EAAE,KAAX;AAAkBxE,YAAAA,SAAS,EAAE,KAA7B;AAAoCE,YAAAA,cAAc,EAAE;AAApD;AAFS,SAAnB;AAIA,eAAO,KAAKN,KAAL,CAAWxB,WAAX,CAAuBiC,UAAvB,CAAP;AACf;AACA,KAvTc;;AAAA,SAyTnBoE,gBAzTmB,GAyTA,CAAChE,KAAD,EAAQ6B,IAAR,EAAcoC,SAAd,KAA4B;AACvC,UAAIC,YAAY,GAAG,KAAK/D,KAAL,CAAWV,cAAX,IAA6B,EAAhD;AACAyE,MAAAA,YAAY,CAACD,SAAD,CAAZ,GAA0BhG,wBAAwB,CAACiG,YAAY,CAACD,SAAD,CAAb,EAA0BpC,IAA1B,CAAlD;AACA,WAAK5B,QAAL,CAAc;AACViE,QAAAA,YADU;AACIC,QAAAA,UAAU,EAAE;AADhB,OAAd;AAGH,KA/Tc;;AAAA,SAiUnBC,UAjUmB,GAiUN,CAACC,aAAD,EAAgBJ,SAAhB,EAA2BK,OAA3B,EAAmCrD,QAAnC,KAAgD;AACrD,UAAIxB,cAAc,GAAG,KAAKU,KAAL,CAAWV,cAAX,IAA6B,EAAlD;AACA,UAAI8E,SAAS,GAAG,CAAhB;;AACA,UAAGA,SAAS,IAAG7B,SAAf,EACA;AACIjD,QAAAA,cAAc,CAACwB,QAAD,CAAd,GAA2B,CAA3B;AACH;;AAEDxB,MAAAA,cAAc,CAACwE,SAAD,CAAd,GAA4B7F,oBAAoB,CAACqB,cAAc,CAACwE,SAAD,CAAf,EAA4BI,aAA5B,EAA2CC,OAA3C,CAAhD;AACA,WAAKrE,QAAL,CAAc;AAAER,QAAAA,cAAF;AAAkB0E,QAAAA,UAAU,EAAE;AAA9B,OAAd;AACH,KA3Uc;;AAAA,SAyXnBK,eAzXmB,GAyXD,CAACxE,KAAD,EAAOyE,QAAP,EAAgBC,SAAhB,KAA8B;AAE5C,YAAMjF,cAAc,GAAG,KAAKU,KAAL,CAAWV,cAAX,IAA6B,EAApD;;AACA,UAAGiF,SAAS,IAAIhC,SAAhB,EAA0B;AACtBjD,QAAAA,cAAc,CAACiF,SAAD,CAAd,GAA4B,CAA5B;AACH;;AACD,UAAI1E,KAAK,CAAC2E,MAAN,CAAaC,IAAb,KAAsB,UAA1B,EAAsC;AAClCnF,QAAAA,cAAc,CAACO,KAAK,CAAC2E,MAAN,CAAaxC,IAAd,CAAd,GAAoCnC,KAAK,CAAC2E,MAAN,CAAaE,OAAb,KAAyB,IAAzB,GAAgCtG,iBAAiB,CAACwE,GAAlD,GAAwDxE,iBAAiB,CAACuG,EAA9G;AACH,OAFD,MAGK,IAAI9E,KAAK,CAAC2E,MAAN,CAAaC,IAAb,KAAsB,OAA1B,EAAkC;AACnCnF,QAAAA,cAAc,CAACO,KAAK,CAAC2E,MAAN,CAAaxC,IAAd,CAAd,GAAoCsC,QAApC;AACH,OAFI,MAGA;AACDhF,QAAAA,cAAc,CAACO,KAAK,CAAC2E,MAAN,CAAaxC,IAAd,CAAd,GAAoCnC,KAAK,CAAC2E,MAAN,CAAavB,KAAjD;AACH;;AAED,WAAKnD,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACH,KA1YkB;;AAAA,SA4YnBsF,aA5YmB,GA4YH,CAACC,SAAD,EAAYf,SAAZ,EAAsBS,SAAtB,KAAoC;AAChD,YAAMjF,cAAc,GAAG,KAAKU,KAAL,CAAWV,cAAX,IAA6B,EAApD;AACAA,MAAAA,cAAc,CAACwE,SAAD,CAAd,GAA4Be,SAA5B;;AACA,UAAGN,SAAS,IAAIhC,SAAhB,EAA0B;AAC1BjD,QAAAA,cAAc,CAACiF,SAAD,CAAd,GAA4B,CAA5B;AACC;;AAED,WAAKzE,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACH,KApZkB;;AAAA,SAwZnBwF,UAxZmB,GAwZN,MAAM;AAEf,YAAM3E,UAAU,GAAG;AACfE,QAAAA,SAAS,EAAE;AAAE,sBAAY,KAAKrB,KAAL,CAAWG,KAAX,CAAiBiE;AAA/B,SADI;AAEfK,QAAAA,QAAQ,EAAE,KAAKzE,KAAL,CAAWG,KAAX,CAAiBgB,UAAjB,CAA4BsD,QAFvB;AAGfC,QAAAA,SAAS,EAAE,KAAK1E,KAAL,CAAWG,KAAX,CAAiBgB,UAAjB,CAA4BuD,SAHxB;AAIfqB,QAAAA,WAAW,EAAE,KAAK/F,KAAL,CAAWG,KAAX,CAAiB4F,WAJf;AAKf3B,QAAAA,QAAQ,EAAE,KAAKpE,KAAL,CAAWG,KAAX,CAAiBiE;AALZ,OAAnB;AAOA,WAAKpE,KAAL,CAAW9B,WAAX,CAAuBiD,UAAvB;AACH,KAlakB;;AAAA,SAoanB6E,WApamB,GAoaL,CAACxE,QAAD,EAAWC,OAAX,KAAuB;AAEjC,UAAG,KAAKzB,KAAL,CAAWG,KAAX,CAAiBK,SAAjB,IAA8B,gBAAjC,EACA;AACI,eAAO,KAAKe,2BAAL,CAAiCC,QAAjC,EAA2CC,OAA3C,CAAP;AACH;;AACD,UAAIJ,SAAS,GAAG,EAAhB;AACA,UAAIJ,SAAS,GAAGsC,SAAhB;AACA,UAAIhD,UAAU,GAAG,IAAjB;AACAU,MAAAA,SAAS,GAAG,KAAKD,KAAL,CAAWC,SAAvB;AACAV,MAAAA,UAAU,GAAG,KAAKP,KAAL,CAAWG,KAAX,CAAiBG,cAAjB,CAAgC,yBAAhC,EAA2D4B,4BAAxE;AAGAb,MAAAA,SAAS,CAAC,UAAD,CAAT,GAAwB,KAAKrB,KAAL,CAAWG,KAAX,CAAiBiE,QAAzC;AACA/C,MAAAA,SAAS,CAAC,yBAAD,CAAT,GAAuC,KAAKL,KAAL,CAAWV,cAAX,CAA0B,yBAA1B,CAAvC;AACAe,MAAAA,SAAS,CAAC,yBAAD,CAAT,CAAqC,eAArC,IAAwD,KAAKL,KAAL,CAAWV,cAAX,CAA0B,eAA1B,EAA2C2D,KAAnG;AACA5C,MAAAA,SAAS,CAAC,yBAAD,CAAT,CAAqC,kBAArC,IAA2D,KAAKL,KAAL,CAAWV,cAAX,CAA0B,eAA1B,EAA2C2F,IAA3C,CAAgDC,gBAA3G;AACC7E,MAAAA,SAAS,CAAC,yBAAD,CAAT,CAAqC,aAArC,IAAsD,KAAKL,KAAL,CAAWV,cAAX,CAA0B,eAA1B,EAA2C2F,IAA3C,CAAgDE,WAAtG;AACD9E,MAAAA,SAAS,CAAC,yBAAD,CAAT,CAAqC,UAArC,IAAmD,KAAKL,KAAL,CAAWV,cAAX,CAA0B,UAA1B,CAAnD,CAlBiC,CAoBjC;AACA;AACA;AACA;AACA;AACA;;AAGA,YAAMa,UAAU,GAAG;AACfsD,QAAAA,QAAQ,EAAE,KAAKzE,KAAL,CAAWG,KAAX,CAAiBgB,UAAjB,CAA4BsD,QADvB;AAEfC,QAAAA,SAAS,EAAE,iCAFI;AAGfqB,QAAAA,WAAW,EAAE,KAAK/F,KAAL,CAAWG,KAAX,CAAiBgB,UAAjB,CAA4B4E,WAH1B;AAIf1E,QAAAA,SAAS,EAAEA,SAJI;AAIOd,QAAAA,UAJP;AAImBU,QAAAA,SAJnB;AAKfT,QAAAA,SAAS,EAAE,KAAKR,KAAL,CAAWG,KAAX,CAAiBK,SALb;AAKwBgB,QAAAA,QALxB;AAKkCC,QAAAA,OALlC;AAK2C2E,QAAAA,SAAS,EAAE,KAAKA,SAL3D;AAMf9F,QAAAA,cAAc,EAAC,EAAC,GAAG,KAAKU,KAAL,CAAWV;AAAf;AANA,OAAnB;AASA,YAAM+F,WAAW,GAAGnH,SAAS,CAAC,KAAKc,KAAL,CAAWG,KAAX,CAAiBmG,qBAAlB,EAAyC,KAAKtG,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0BmC,SAAnE,EAA8E,KAAKvG,KAAL,CAAWG,KAAX,CAAiBqG,YAA/F,CAA7B;;AACA,UAAIH,WAAJ,EAAiB;AACb,cAAM5F,UAAU,GAAG;AACfC,UAAAA,QAAQ,EAAE9B,cADK;AAEf+B,UAAAA,IAAI,EAAE;AACFT,YAAAA,SAAS,EAAE,IADT;AACeuG,YAAAA,UAAU,EAAE;AAAEtF,cAAAA,UAAF;AAAcwD,cAAAA,UAAU,EAAE,KAAK3E,KAAL,CAAWG,KAAX,CAAiBwE;AAA3C,aAD3B;AAEFvE,YAAAA,SAAS,EAAE,IAFT;AAEesG,YAAAA,UAAU,EAAE,uBAF3B;AAGFlG,YAAAA,SAAS,EAAE,KAAKR,KAAL,CAAWG,KAAX,CAAiBK;AAH1B;AAFS,SAAnB;AAQA,aAAKR,KAAL,CAAWxB,WAAX,CAAuBiC,UAAvB;AACH,OAVD,MAWK;AACD,aAAKT,KAAL,CAAWvB,+BAAX,CAA2C0C,UAA3C,EAAuD,KAAKnB,KAAL,CAAWG,KAAX,CAAiBwE,UAAxE,EAAoF,WAApF,EAAgG,EAAhG,EAAmG,EAAnG;AACH;AAEJ,KAzdkB;;AAAA,SA0dnBgC,aA1dmB,GA0dH,MAAM;AAClB,UAAIC,SAAS,GAAG,KAAK5G,KAAL,CAAWG,KAAX,CAAiBuG,UAAjB,KAAgC,KAAK1G,KAAL,CAAWG,KAAX,CAAiB0G,YAAjB,CAA8B,SAA9B,EAAyC,UAAzC,EAAqD,cAArD,EAAqE,KAAK7G,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0B0C,iBAA/F,EAAkHC,MAAlH,CAAyH,MAAI,KAAK/G,KAAL,CAAWgH,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,QAAAA,EAAE,EAAG;AAAN,OAA9B,CAA7H,CAAhC,GAAiN,gBAAjN,GAAoO,WAApP;AACA,YAAM/F,UAAU,GAAG;AACfE,QAAAA,SAAS,EAAE;AACP,sBAAY,EACR,GAAG,KAAKrB,KAAL,CAAWG,KAAX,CAAiBiE,QADZ;AAER+C,YAAAA,OAAO,EAAE,KAAKnG,KAAL,CAAWV,cAAX,CAA0B,eAA1B,CAFD;AAGR8G,YAAAA,WAAW,EAAC,KAAKpG,KAAL,CAAWV,cAAX,CAA0B,aAA1B,KAA4C,KAAKU,KAAL,CAAWV,cAAX,CAA0B,aAA1B,EAAyC2D,KAHzF;AAIRoD,YAAAA,iBAAiB,EAAC,KAAKrG,KAAL,CAAWV,cAAX,CAA0B,aAA1B,KAA4C,KAAKU,KAAL,CAAWV,cAAX,CAA0B,aAA1B,EAAyCgH;AAJ/F,WADL;AAQPC,UAAAA,QAAQ,EAAE,KAAKvG,KAAL,CAAWV,cAAX,CAA0B,eAA1B;AARH,SADI;AAWfmG,QAAAA,UAAU,EAAE,KAAKzG,KAAL,CAAWG,KAAX,CAAiBsG;AAXd,OAAnB;AAaA,WAAKzG,KAAL,CAAWwH,uBAAX,CAAmCrG,UAAnC,EAA+CyF,SAA/C;AACH,KA1ekB;;AAEf,SAAKnF,OAAL,GAAe/D,KAAK,CAAC+J,SAAN,EAAf;AAEA,UAAMxG,UAAS,GAAG;AACdyG,MAAAA,IAAI,EAAE,CADQ;AAEdC,MAAAA,IAAI,EAAE,KAAK3H,KAAL,CAAWG,KAAX,CAAiByH,QAAjB,GAA4BC,QAAQ,CAAC,KAAK7H,KAAL,CAAWG,KAAX,CAAiByH,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAF9D,KAAlB;AAIA,SAAK5G,KAAL,GAAa;AACTL,MAAAA,IAAI,EAAE,EADG;AACCmH,MAAAA,YAAY,EAAE,EADf;AACmBC,MAAAA,KAAK,EAAE,EAD1B;AAC8BzH,MAAAA,cAAc,EAAE,EAD9C;AAETS,MAAAA,UAAU,EAAE,EAFH;AAGTE,MAAAA,SAAS,EAAEA,UAHF;AAITqF,MAAAA,qBAAqB,EAAE,EAJd;AAKT0B,MAAAA,UAAU,EAAE,IAAIC,GAAJ;AALH,KAAb;AAOA,SAAK7B,SAAL,GAAiB1I,KAAK,CAAC+J,SAAN,EAAjB;AACA,SAAKS,cAAL,GAAsB,IAAI7I,cAAJ,EAAtB;AACA,SAAK8I,mBAAL,GAA2B,CACvB;AAAE,iBAAW,UAAb;AAAyB,mBAAa,cAAtC;AAAsD,eAAS;AAA/D,KADuB,EAEvB;AAAC,iBAAW,mBAAZ;AAAiC,mBAAa,eAA9C;AAA+D,eAAS;AAAxE,KAFuB,EAGvB;AAAC,iBAAW,kBAAZ;AAAgC,mBAAa,eAA7C;AAA8D,eAAS;AAAvE,KAHuB,EAIvB;AAAC,iBAAW,qBAAZ;AAAmC,mBAAa,kBAAhD;AAAoE,eAAS;AAA7E,KAJuB,EAKvB;AAAC,iBAAW,cAAZ;AAA4B,mBAAa,WAAzC;AAAsD,eAAS,OAA/D;AAAuE,mBAAa;AAApF,KALuB,EAMvB;AAAE,iBAAW,UAAb;AAA0B,mBAAa,OAAvC;AAAgD,eAAS;AAAzD,KANuB,EAOvB;AAAE,iBAAW,gBAAb;AAAgC,mBAAa,aAA7C;AAA4D,eAAS;AAArE,KAPuB,EAQvB;AAAE,iBAAW,mBAAb;AAAkC,mBAAa,qBAA/C;AAAsE,eAAS;AAA/E,KARuB,CAA3B;AAUH;;AAwC8B,SAAxBC,wBAAwB,CAACpI,KAAD,EAAQgB,KAAR,EAAe;AAE1C,QAAIhB,KAAK,CAACG,KAAN,CAAY2H,YAAZ,KAA6B,EAA7B,IAAmC9H,KAAK,CAACG,KAAN,CAAY2H,YAAZ,KAA6B9G,KAAK,CAAC8G,YAA1E,EAAwF;AACpF9J,MAAAA,KAAK,CAACqK,IAAN,CAAWrI,KAAK,CAACG,KAAN,CAAY2H,YAAvB;AACA9H,MAAAA,KAAK,CAACG,KAAN,CAAY2H,YAAZ,GAA2B,EAA3B;AACH;;AAED,QAAI9H,KAAK,CAACG,KAAN,CAAY4H,KAAZ,KAAsB/G,KAAK,CAAC+G,KAAhC,EAAuC;AACnC/J,MAAAA,KAAK,CAAC+J,KAAN,CAAY/H,KAAK,CAACG,KAAN,CAAY4H,KAAxB;AACA/H,MAAAA,KAAK,CAACG,KAAN,CAAY4H,KAAZ,GAAoB,EAApB;AACH;;AACD,WAAO,IAAP;AACH;;AAUDO,EAAAA,MAAM,GAAG;AAEL,UAAMC,uBAAuB,GAAG,KAAKvI,KAAL,CAAWG,KAAX,CAAiBgB,UAAjB,IAA+B,KAAKH,KAAL,CAAWgH,UAAX,CAAsBQ,GAAtB,CAA0B,uBAA1B,CAA/B,IAC7B,KAAKxH,KAAL,CAAWgH,UAAX,CAAsBS,GAAtB,CAA0B,uBAA1B,EAAmDC,YADtD;AAGA,UAAMC,YAAY,GAAG,KAAK3I,KAAL,CAAWG,KAAX,CAAiBgB,UAAjB,IAA+B,KAAKH,KAAL,CAAWgH,UAAX,CAAsBQ,GAAtB,CAA0B,6BAA1B,CAA/B,IAClB,KAAKxH,KAAL,CAAWgH,UAAX,CAAsBS,GAAtB,CAA0B,6BAA1B,EAAyDC,YAD5D;AAGA,UAAME,eAAe,GAAI;AACjBpI,MAAAA,SAAS,EAAE,MADM;AAEjBiE,MAAAA,QAAQ,EAAE,uBAFO;AAGjBC,MAAAA,SAAS,EAAE;AAHM,KAAzB;AAMA,wBACI,uDACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,SAAS,EAAC,qBAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEK,KAAK1D,KAAL,CAAWL,IAAX,gBACG,oBAAC,QAAD;AACI,MAAA,eAAe,EAAE,8BADrB;AAEI,MAAA,IAAI,EAAE,KAAKK,KAAL,CAAWL,IAFrB;AAGI,MAAA,UAAU,EAAE,KAAKK,KAAL,CAAWD,UAH3B;AAII,MAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,SAJ1B;AAKI,MAAA,eAAe,EAAE,KAAKL,eAL1B;AAMI,MAAA,mBAAmB,EAAE,KAAKuH,mBAN9B;AAOI,MAAA,WAAW,EAAE,KAAKnI,KAAL,CAAW6I,sBAP5B;AAQI,MAAA,SAAS,EAAE,EARf;AASI,MAAA,YAAY,EAAE,KAAKC,YATvB;AAUI,MAAA,WAAW,EAAE,EAVjB;AAWI,MAAA,UAAU,EAAE,KAAKhD,UAXrB;AAYI,MAAA,UAAU,EAAE,KAAK9E,KAAL,CAAWgH,UAZ3B;AAaI,MAAA,qBAAqB,EAAE,KAAKhH,KAAL,CAAWsF,qBAbtC;AAcI,MAAA,UAAU,EAAE,KAAKtG,KAAL,CAAWG,KAAX,CAAiBgB,UAdjC;AAeI,MAAA,QAAQ,EAAE,KAAKnB,KAAL,CAAWG,KAAX,CAAiBiE,QAf/B;AAgBI,MAAA,QAAQ,EAAE,IAhBd;AAiBI,MAAA,UAAU,EAAE,YAjBhB;AAkBI,MAAA,UAAU,EAAE,OAlBhB;AAmBI,MAAA,gBAAgB,EAAE,IAnBtB;AAoBI,MAAA,iBAAiB,EAAE,IApBvB;AAqBI,MAAA,UAAU,EAAE,KAAKpE,KAAL,CAAWG,KAAX,CAAiBI,UArBjC;AAsBI,MAAA,kBAAkB,EAAI,CAtB1B;AAuBI,MAAA,UAAU,EAAI,KAAKP,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,IAA+B,EAvBjD;AAwBI,MAAA,UAAU,EAAI,KAAK3E,KAAL,CAAW5B,4BAxB7B;AAyBI,MAAA,+BAA+B,EAAI,KAAK4B,KAAL,CAAWzB,+BAzBlD;AA0BI,MAAA,kCAAkC,EAAI,KAAKyB,KAAL,CAAW1B,kCA1BrD;AA2BI,MAAA,OAAO,EAAI,KAAK0B,KAAL,CAAW/B,OA3B1B;AA4BI,MAAA,WAAW,EAAIsK,uBA5BnB;AA6BI,MAAA,YAAY,EAAGI,YA7BnB;AA8BI,MAAA,UAAU,EAAI,KAAK3I,KAAL,CAAWtB,UA9B7B;AA+BI,MAAA,QAAQ,EAAI,KAAKwC,QA/BrB;AAgCI,MAAA,eAAe,EAAI0H,eAhCvB,CAiCI;AAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAoCK,EAtCV,CADJ,CADJ,CADJ,EA+CK,KAAK5I,KAAL,CAAWG,KAAX,CAAiBC,SAAjB,IAA8B,KAAKJ,KAAL,CAAWG,KAAX,CAAiBE,cAA/C,gBACG,oBAAC,aAAD;AACI,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWG,KAAX,CAAiBuG,UAAjB,KAAgC,KAAK1G,KAAL,CAAWG,KAAX,CAAiB0G,YAAjB,CAA8B,SAA9B,EAAyC,UAAzC,EAAqD,cAArD,EAAqE,KAAK7G,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0B0C,iBAA/F,EAAkHC,MAAlH,CAAyH,MAAI,KAAK/G,KAAL,CAAWgH,IAAX,CAAgBC,aAAhB,CAA8B;AAACC,QAAAA,EAAE,EAAG;AAAN,OAA9B,CAA7H,CAAhC,GACN,KAAKlH,KAAL,CAAWG,KAAX,CAAiBE,cADX,GAEN,KAAKL,KAAL,CAAWG,KAAX,CAAiBC,SAHrB;AAII,MAAA,UAAU,EAAE,KAAKH,UAJrB;AAKI,MAAA,SAAS,EAAE,KAAKD,KAAL,CAAWG,KAAX,CAAiBK,SALhC;AAMI,MAAA,UAAU,EAAE,KAAKR,KAAL,CAAWG,KAAX,CAAiBgB,UANjC;AAOI,MAAA,gBAAgB,EAAE,IAPtB;AAQI,MAAA,UAAU,EAAE,KAAKnB,KAAL,CAAWG,KAAX,CAAiBuG,UARjC;AASI,MAAA,WAAW,EAAE,KAAKV,WATtB;AAUI,MAAA,KAAK,EAAE,KAAKhG,KAAL,CAAWG,KAAX,CAAiBD,SAV5B;AAWI,MAAA,aAAa,EAAE,KAAKyG,aAXxB;AAYI,MAAA,YAAY,EAAE,KAAK3G,KAAL,CAAWG,KAAX,CAAiB2H,YAZnC;AAaI,MAAA,WAAW,EAAE,KAAK9H,KAAL,CAAWxB,WAb5B;AAcI,MAAA,cAAc,EAAE,KAAKwC,KAAL,CAAWV,cAAX,IAA6B,EAdjD;AAeI,MAAA,YAAY,EAAE,KAAKN,KAAL,CAAWG,KAAX,CAAiBD,SAAjB,gBACV,oBAAC,KAAD;AAAO,QAAA,SAAS,EAAE,KAAKF,KAAL,CAAWG,KAAX,CAAiBK,SAAnC;AACI,QAAA,eAAe,EAAE,KAAK6E,eAD1B;AAEI,QAAA,UAAU,EAAE,KAAKrF,KAAL,CAAWG,KAAX,CAAiBgB,UAFjC;AAGI,QAAA,cAAc,EAAE,KAAKH,KAAL,CAAWV,cAAX,IAA6B,EAHjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADU,GAOV,KAAKN,KAAL,CAAWG,KAAX,CAAiBK,SAAjB,KAA+B,mBAA/B,gBACA,oBAAC,iBAAD;AACI,QAAA,cAAc,EAAE,KAAKQ,KAAL,CAAWV,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAK+E,eAF1B;AAGI,QAAA,aAAa,EAAE,KAAKO,aAHxB;AAII,QAAA,mBAAmB,EAAE,KAAK5F,KAAL,CAAWG,KAAX,CAAiB4I,mBAAjB,IAAwC,EAJjE;AAKI,QAAA,SAAS,EAAE,KAAK/I,KAAL,CAAWG,KAAX,CAAiBK,SALhC;AAMI,QAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWG,KAAX,CAAiBiE,QAN/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,GASC,KAAKpE,KAAL,CAAWG,KAAX,CAAiBK,SAAjB,KAA+B,gBAA/B,gBACD,oBAAC,6BAAD;AACI,QAAA,cAAc,EAAE,KAAKQ,KAAL,CAAWV,cAAX,IAA6B,EADjD;AAEI,QAAA,eAAe,EAAE,KAAK+E,eAF1B;AAGI,QAAA,aAAa,EAAE,KAAKO,aAHxB;AAII,QAAA,mBAAmB,EAAE,KAAK5F,KAAL,CAAWG,KAAX,CAAiB4I,mBAAjB,IAAwC,EAJjE;AAKI,QAAA,SAAS,EAAE,KAAK/I,KAAL,CAAWG,KAAX,CAAiBK,SALhC;AAMI,QAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWG,KAAX,CAAiBiE,QAN/B;AAOI,QAAA,UAAU,EAAI,KAAKpE,KAAL,CAAWG,KAAX,CAAiB6I,UAPnC;AAQI,QAAA,MAAM,EAAI,KAAK/D,UARnB;AASI,QAAA,gBAAgB,EAAI,KAAKJ,gBAT7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADC,GAYA,KAAK7E,KAAL,CAAWG,KAAX,CAAiBK,SAAjB,KAA+B,YAA/B,IAA+CqC,MAAM,CAACoG,IAAP,CAAY,KAAKjI,KAAL,CAAWV,cAAvB,EAAuCkC,MAAvC,GAAgD,CAA/F;AAAA;AACD;AACA;AACA;AACA;AAEA;AACA,0BAAC,UAAD;AACI,QAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWV,cAAX,IAA6B,KAAKU,KAAL,CAAWV,cAAX,CAA0B,yBAA1B,CAA7B,GACF4D,IAAI,CAACgF,KAAL,CAAW,KAAKlI,KAAL,CAAWV,cAAX,CAA0B,yBAA1B,EAAqD6I,UAArD,CAAgElF,KAA3E,CADE,GACkF,EAF5F;AAGI,QAAA,MAAM,EAAE,KAAKjD,KAAL,CAAWV,cAAX,IAA6B,KAAKU,KAAL,CAAWV,cAAX,CAA0B,yBAA1B,CAA7B,GACA,CAAC4D,IAAI,CAACgF,KAAL,CAAW,KAAKlI,KAAL,CAAWV,cAAX,CAA0B,yBAA1B,EAAqD6I,UAArD,CAAgElF,KAA3E,CAAD,EAAmFC,IAAI,CAACgF,KAAL,CAAW,KAAKlI,KAAL,CAAWV,cAAX,CAA0B,yBAA1B,EAAqD8I,aAArD,CAAmEnF,KAA9E,CAAnF,CADA,GAC2K,EAJvL;AAKI,QAAA,UAAU,EAAE,KAAKjD,KAAL,CAAWqI,oBAL3B;AAMI,QAAA,aAAa,EAAI,CAAC,KAAKrI,KAAL,CAAWqI,oBAAZ,EAAiC,KAAKrI,KAAL,CAAWsI,uBAA5C,CANrB;AAOI,QAAA,UAAU,EAAC,gBAPf;AAQI,QAAA,QAAQ,EAAE,KAAKtJ,KAAL,CAAWG,KAAX,CAAiBiE,QAR/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPC,GAiBA,EA5DT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAgEK,EA/GV,CADJ;AAmHH;;AAmHDmF,EAAAA,kBAAkB,CAACC,aAAD,EAAgB;AAE9B,QAAI;AAACH,MAAAA,oBAAD;AAAsBC,MAAAA;AAAtB,QAAiD,KAAKtI,KAA1D;;AAEA,QAAI,KAAKhB,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,KAAgC6E,aAAa,CAACrJ,KAAd,CAAoBwE,UAAxD,EAAoE;AAChE,UAAI,KAAK3E,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0BmC,SAA1B,KAAwCiD,aAAa,CAACrJ,KAAd,CAAoBiE,QAApB,CAA6BmC,SAAzE,EAAoF;AAChF,cAAMD,qBAAqB,GAAG,EAA9B;;AACA,YAAI,KAAKtG,KAAL,CAAWG,KAAX,CAAiBmG,qBAArB,EAA4C;AACxC,eAAKtG,KAAL,CAAWG,KAAX,CAAiBmG,qBAAjB,CAAuC,KAAKtG,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0BmC,SAAjE,KAA+E1D,MAAM,CAAC4G,MAAP,CAAc,KAAKzJ,KAAL,CAAWG,KAAX,CAAiBmG,qBAAjB,CAAuC,KAAKtG,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0BmC,SAAjE,CAAd,EAA2FmD,GAA3F,CAA+FzD,IAAI,IAC9KK,qBAAqB,CAAC3C,IAAtB,CAA2BsC,IAAI,CAACyC,YAAhC,CAD2E,CAA/E;AAEH;;AACD,cAAMV,UAAU,GAAGjJ,aAAa,CAAC,KAAKiB,KAAL,CAAWG,KAAX,CAAiBmG,qBAAlB,EAAyC,KAAKtG,KAAL,CAAWG,KAAX,CAAiBiE,QAAjB,CAA0BmC,SAAnE,CAAhC;AACA,YAAItF,SAAS,GAAG;AAAEyG,UAAAA,IAAI,EAAE,CAAR;AAAWC,UAAAA,IAAI,EAAE,KAAK3H,KAAL,CAAWG,KAAX,CAAiByH,QAAjB,GAA4BC,QAAQ,CAAC,KAAK7H,KAAL,CAAWG,KAAX,CAAiByH,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,SAAhB;AAEA,aAAK9G,QAAL,CAAc;AACVwF,UAAAA,qBADU;AACa0B,UAAAA,UADb;AACyBrH,UAAAA,IAAI,EAAE,KAAKX,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,CAA4B,oBAA5B,CAD/B;AAEV5D,UAAAA,UAAU,EAAEvB,OAAO,CAAC,KAAKQ,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,CAA4B,oBAA5B,CAAD,EAAmD1D,SAAnD,CAFT;AAEuEA,UAAAA;AAFvE,SAAd;AAIH,OAbD,MAcK;AAED,YAAI,KAAKjB,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,CAA4BgF,aAA5B,IAA6C,KAAK3J,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,CAA4BgF,aAA5B,KAA8CH,aAAa,CAACrJ,KAAd,CAAoBwE,UAApB,CAA+BgF,aAA9H,EAA6I;AAEzI,gBAAMC,aAAa,GAAG1F,IAAI,CAACgF,KAAL,CAAW,KAAKlJ,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,CAA4BgF,aAA5B,CAA0CE,QAA1C,CAAmD5F,KAA9D,CAAtB;AACAoF,UAAAA,oBAAoB,GAAGO,aAAa,CAACE,mBAAd,GAAoCF,aAAa,CAACE,mBAAlD,GAAwE,EAA/F;AACAR,UAAAA,uBAAuB,GAAGM,aAAa,CAACG,iBAAd,GAAkCH,aAAa,CAACG,iBAAhD,GAAoE,EAA9F;AAEH;;AACD,YAAI;AAAE9I,UAAAA;AAAF,YAAgB,KAAKD,KAAzB;;AACA,YAAI,KAAKhB,KAAL,CAAWG,KAAX,CAAiBc,SAAjB,KAA+BsC,SAA/B,IAA4CtC,SAAS,KAAKsC,SAA9D,EAAyE;AACrEtC,UAAAA,SAAS,GAAG;AAAEyG,YAAAA,IAAI,EAAE,CAAR;AAAWC,YAAAA,IAAI,EAAE,KAAK3H,KAAL,CAAWG,KAAX,CAAiByH,QAAjB,GAA4BC,QAAQ,CAAC,KAAK7H,KAAL,CAAWG,KAAX,CAAiByH,QAAjB,CAA0B,EAA1B,CAAD,CAApC,GAAsE;AAAvF,WAAZ;AACH;;AACD,aAAK9G,QAAL,CAAc;AACVuI,UAAAA,oBADU;AACWC,UAAAA,uBADX;AAEV3I,UAAAA,IAAI,EAAE,KAAKX,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,CAA4B,oBAA5B,CAFI;AAE+CrE,UAAAA,cAAc,EAAE,KAAKN,KAAL,CAAWG,KAAX,CAAiBG,cAFhF;AAGVS,UAAAA,UAAU,EAAC,KAAKf,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,CAA4B,oBAA5B,KAAqDnF,OAAO,CAAC,KAAKQ,KAAL,CAAWG,KAAX,CAAiBwE,UAAjB,CAA4B,oBAA5B,CAAD,EAAmD1D,SAAnD,CAH7D;AAG2HA,UAAAA;AAH3H,SAAd;AAKH;AACJ,KAlCD,MAmCK,IAAI,KAAKjB,KAAL,CAAWG,KAAX,CAAiBG,cAAjB,KAAoCkJ,aAAa,CAACrJ,KAAd,CAAoBG,cAA5D,EAA4E;AAC7E,WAAKQ,QAAL,CAAc;AAAGuI,QAAAA,oBAAH;AAAwBC,QAAAA,uBAAxB;AAAgDhJ,QAAAA,cAAc,EAAE,KAAKN,KAAL,CAAWG,KAAX,CAAiBG;AAAjF,OAAd;AACH;AACJ;;AAoHD0J,EAAAA,oBAAoB,GAAG;AACnB,UAAMvJ,UAAU,GAAG;AACfC,MAAAA,QAAQ,EAAE9B,cADK;AAEf+B,MAAAA,IAAI,EAAE;AACFgE,QAAAA,UAAU,EAAE,EADV;AACcxD,QAAAA,UAAU,EAAEoC,SAD1B;AACqC/C,QAAAA,SAAS,EAAE,IADhD;AACsDoG,QAAAA,SAAS,EAAErD;AADjE;AAFS,KAAnB;AAMA,SAAKvD,KAAL,CAAWxB,WAAX,CAAuBiC,UAAvB;AACH;;AArfyC;;AA0f9C,MAAMwJ,eAAe,GAAIjJ,KAAD,IAAW;AAC/B,SAAO;AACHb,IAAAA,KAAK,EAAEa,KAAK,CAACb;AADV,GAAP;AAGH,CAJD;;AAKA,eAAepC,OAAO,CAACkM,eAAD,EAAkB;AACpC/L,EAAAA,WADoC;AACvBC,EAAAA,UADuB;AACZK,EAAAA,WADY;AACCJ,EAAAA,4BADD;AAC8BK,EAAAA,+BAD9B;AAEpCF,EAAAA,+BAFoC;AAEJD,EAAAA,kCAFI;AAE+BL,EAAAA,OAF/B;AAEuCI,EAAAA,yBAFvC;AAEiEK,EAAAA,UAFjE;AAE4EC,EAAAA;AAF5E,CAAlB,CAAP,CAGZb,UAAU,CAACgC,qBAAD,CAHE,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Col, Row } from 'react-bootstrap';\r\nimport { injectIntl } from 'react-intl';\r\nimport 'react-perfect-scrollbar/dist/css/styles.css';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport {\r\n    addFile,\r\n    callService, crudMaster, getSubContractorComboService,\r\n    saveSubcontractorTestFile,\r\n    updateReceiveResultSubContractTest,\r\n    updateReceiveSTTSubContractTest,\r\n    updateStore, updateSubContractSamplesdetails,\r\n    viewDetail,viewAttachment\r\n} from '../../actions';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { create_UUID, deleteAttachmentDropZone, getControlMap, Lims_JSON_stringify, onDropAttachFileList, showEsign } from '../../components/CommonScript';\r\nimport { attachmentType, transactionStatus } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\n// import './product.css';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport { ListWrapper } from '../userroletemplate/userroletemplate.styles';\r\nimport AddSubContractorTestAttchment from './AddSubContractorTestAttchment';\r\nimport SendSubContractor from './SendSubContractor';\r\nimport ViewRecord from './viewRecord';\r\n\r\nclass SubContractTestDetail extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.formRef = React.createRef();\r\n\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5,\r\n        };\r\n        this.state = {\r\n            data: [], masterStatus: \"\", error: \"\", selectedRecord: {},\r\n            dataResult: [],\r\n            dataState: dataState,\r\n            userRoleControlRights: [],\r\n            controlMap: new Map()\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.extractedColumnList = [\r\n            { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestsynonym\", \"width\": \"200px\" },\r\n            {\"idsName\": \"IDS_SUBCONTRACTOR\", \"dataField\": \"ssuppliername\", \"width\": \"200px\"},\r\n            {\"idsName\": \"IDS_EXPECTEDDATE\", \"dataField\": \"sexpecteddate\", \"width\": \"200px\"},\r\n            {\"idsName\": \"IDS_CONTROLLEADTIME\", \"dataField\": \"scontrolleaddate\", \"width\": \"200px\"},\r\n            {\"idsName\": \"IDS_FILENAME\", \"dataField\": \"sfilename\", \"width\": \"200px\",\"fieldType\": \"attachment\"},\r\n            { \"idsName\": \"IDS_ARNO\" , \"dataField\": \"sarno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_SAMPLEARNO\" , \"dataField\": \"ssamplearno\", \"width\": \"200px\" },\r\n            { \"idsName\": \"IDS_DISPLAYSTATUS\", \"dataField\": \"stransdisplaystatus\", \"width\": \"200px\" }\r\n        ];\r\n    }\r\n\r\n   \r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let openChildModal = this.props.Login.openChildModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let selectedId = this.props.Login.selectedId;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"sendsubcontractor\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n                openChildModal=false;\r\n                selectedRecord = {};\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n                selectedRecord['esignpassword'] = \"\"\r\n                selectedRecord['esigncomments'] = \"\"\r\n                selectedRecord['esignreason']=\"\"\r\n                selectedRecord = {};\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            openChildModal=false;\r\n            selectedRecord = {};\r\n            selectedId=null;\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal,openChildModal, loadEsign, selectedRecord, selectedId }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.state.data, event.dataState),\r\n            dataState: event.dataState\r\n        });\r\n    }\r\n\r\n    \r\n    render() {\r\n\r\n        const SubContTestAttachmentId = this.props.Login.inputParam && this.state.controlMap.has(\"SubContTestAttachment\")\r\n        && this.state.controlMap.get(\"SubContTestAttachment\").ncontrolcode;\r\n\r\n        const viewDetailId = this.props.Login.inputParam && this.state.controlMap.has(\"ViewSubContractorTestDetail\")\r\n        && this.state.controlMap.get(\"ViewSubContractorTestDetail\").ncontrolcode;\r\n        \r\n        const attachmentParam  = {\r\n                operation: \"view\",\r\n                classUrl: \"subcontracttestdetail\",\r\n                methodUrl: \"SubcontractorTestFile\",\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col>\r\n                        <ListWrapper className=\"client-list-content\">\r\n\r\n                            {this.state.data ?\r\n                                <DataGrid\r\n                                    primaryKeyField={\"nsubcontractortestdetailcode\"}\r\n                                    data={this.state.data}\r\n                                    dataResult={this.state.dataResult}\r\n                                    dataState={this.state.dataState}\r\n                                    dataStateChange={this.dataStateChange}\r\n                                    extractedColumnList={this.extractedColumnList}\r\n                                    fetchRecord={this.props.getProductComboService}\r\n                                    editParam={[]}\r\n                                    deleteRecord={this.deleteRecord}\r\n                                    deleteParam={[]}\r\n                                    reloadData={this.reloadData}\r\n                                    controlMap={this.state.controlMap}\r\n                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    pageable={true}\r\n                                    scrollable={'scrollable'}\r\n                                    gridHeight={'600px'}\r\n                                    isActionRequired={true}\r\n                                    isToolBarRequired={true}\r\n                                    selectedId={this.props.Login.selectedId}\r\n                                    listMasterShowIcon = {0}\r\n                                    masterdata = {this.props.Login.masterData || []}\r\n                                    sendRecord = {this.props.getSubContractorComboService}\r\n                                    updateReceiveSTTSubContractTest = {this.props.updateReceiveSTTSubContractTest}\r\n                                    updateReceiveResultSubContractTest = {this.props.updateReceiveResultSubContractTest}\r\n                                    addFile = {this.props.addFile}\r\n                                    attahmentID = {SubContTestAttachmentId}\r\n                                    viewDetailID ={viewDetailId}\r\n                                    viewDetail = {this.props.viewDetail}\r\n                                    viewFile = {this.viewFile}\r\n                                    attachmentParam = {attachmentParam}\r\n                                    //methodUrl = {\"SubContractorTestDetail\"}\r\n                                />\r\n                                : \"\"}\r\n                        </ListWrapper>\r\n                    </Col>\r\n                </Row>\r\n                \r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {this.props.Login.openModal || this.props.Login.openChildModal ?\r\n                    <SlideOutModal\r\n                        show={this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \"+this.props.intl.formatMessage({id : \"IDS_FILE\"})) ?\r\n                        this.props.Login.openChildModal:\r\n                        this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        showSaveContinue={true}\r\n                        screenName={this.props.Login.screenName}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        updateStore={this.props.updateStore}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        addComponent={this.props.Login.loadEsign ?\r\n                            <Esign operation={this.props.Login.operation}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                inputParam={this.props.Login.inputParam}\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                            /> \r\n                            :\r\n                            this.props.Login.operation === \"sendsubcontractor\" ?\r\n                            <SendSubContractor\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                subContracorMapList={this.props.Login.subContracorMapList || []}\r\n                                operation={this.props.Login.operation}\r\n                                userInfo={this.props.Login.userInfo}\r\n                            />\r\n                            :this.props.Login.operation === \"fileattachment\" ?\r\n                            <AddSubContractorTestAttchment\r\n                                selectedRecord={this.state.selectedRecord || {}}\r\n                                onInputOnChange={this.onInputOnChange}\r\n                                onComboChange={this.onComboChange}\r\n                                subContracorMapList={this.props.Login.subContracorMapList || []}\r\n                                operation={this.props.Login.operation}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                linkMaster = {this.props.Login.linkMaster}\r\n                                onDrop = {this.onDropFile}\r\n                                deleteAttachment = {this.deleteAttachment}\r\n                            />\r\n                            :this.props.Login.operation === \"viewRecord\" && Object.keys(this.state.selectedRecord).length > 0 ?\r\n                            // <ViewRecord\r\n                            //     selectedRecord={this.props.Login.selectedRecord || {}}\r\n                            //     operation={this.props.Login.operation}\r\n                            //     userInfo={this.props.Login.userInfo}\r\n                               \r\n                            // />\r\n                            <ViewRecord\r\n                                data={this.state.selectedRecord && this.state.selectedRecord['subcontractortestdetail'] ?\r\n                                    JSON.parse(this.state.selectedRecord['subcontractortestdetail'].jsonsample.value) : {}}\r\n                                values={this.state.selectedRecord && this.state.selectedRecord['subcontractortestdetail'] ?\r\n                                        [JSON.parse(this.state.selectedRecord['subcontractortestdetail'].jsonsample.value),JSON.parse(this.state.selectedRecord['subcontractortestdetail'].jsonsubsample.value)] : {}}\r\n                                SingleItem={this.state.DynamicSampleColumns}\r\n                                displayFields = {[this.state.DynamicSampleColumns,this.state.DynamicSubSampleColumns]}\r\n                                screenName=\"IDS_SAMPLEINFO\"\r\n                                userInfo={this.props.Login.userInfo}\r\n                                            />                           \r\n                            :\"\"\r\n                        }\r\n                    />\r\n                    : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    viewFile = (inputParam) =>{\r\n        //let inputData = {}\r\n        let inputParamData = {\r\n\r\n                ...inputParam, \r\n                inputData:{...inputParam.inputData,subcontractortestdetail : inputParam.inputData.selectedRecord}\r\n        }\r\n            this.props.viewAttachment(inputParamData)\r\n    }\r\n\r\n    onSaveSubContractorTestFile = (saveType, formRef) => {\r\n            const selectedRecord = this.state.selectedRecord;\r\n            const acceptedFiles = selectedRecord.sfilename;\r\n            const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n            let isFileEdited = selectedRecord.editable ? selectedRecord.editable : transactionStatus.ALL;\r\n            let FileArray = [];\r\n\r\n            if(isFileEdited == 1)\r\n            {\r\n            let subcontractorTestFile = {\r\n                nsubcontractortestdetailcode: selectedRecord.subcontractortestdetail.nsubcontractortestdetailcode,\r\n                nattachmenttypecode\r\n            };\r\n            const formData = new FormData();\r\n            if (nattachmenttypecode === attachmentType.FTP) {\r\n                if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                    acceptedFiles.forEach((file, index) => {\r\n                        const tempData = Object.assign({}, subcontractorTestFile);\r\n                        const splittedFileName = file.name.split('.');\r\n                        const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                        const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                        const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                        const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.nsupplierfilecode && selectedRecord.nsupplierfilecode > 0\r\n                            && selectedRecord.ssystemfilename !== \"\" && selectedRecord.ssystemfilename !== undefined ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                        tempData[\"sfilename\"] = Lims_JSON_stringify(file.name, false);\r\n                        //tempData[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\r\n                        tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                        tempData[\"ssystemfilename\"] = uniquefilename;\r\n                        tempData[\"nfilesize\"] = file.size;\r\n                        formData.append(\"uploadedFile\" + index, file);\r\n                        formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                        FileArray.push(tempData);\r\n                    });\r\n                    formData.append(\"filecount\", acceptedFiles.length);\r\n                    isFileEdited = transactionStatus.YES;\r\n                } else {\r\n                    subcontractorTestFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.sfilename, false);\r\n                   // subcontractorTestFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\", false);\r\n                    subcontractorTestFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                    subcontractorTestFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                    subcontractorTestFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                    FileArray.push(subcontractorTestFile);\r\n                }\r\n            } else {\r\n                subcontractorTestFile[\"sfilename\"] = Lims_JSON_stringify(selectedRecord.slinkfilename.trim(), false);\r\n                //subcontractorTestFile[\"sdescription\"] = Lims_JSON_stringify(selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\", false);\r\n                subcontractorTestFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n                subcontractorTestFile[\"ssystemfilename\"] = \"\";\r\n                subcontractorTestFile[\"nfilesize\"] = 0;\r\n                FileArray.push(subcontractorTestFile);\r\n            }\r\n            formData.append(\"isFileEdited\", isFileEdited);\r\n            formData.append(\"subcontractorFile\", JSON.stringify(FileArray));\r\n            formData.append(\"userinfo\", JSON.stringify(this.props.Login.userInfo));\r\n            \r\n            const inputParam = {\r\n                inputData: {\r\n                    \"userinfo\": {\r\n                        ...this.props.Login.userInfo,\r\n                        sformname: Lims_JSON_stringify(this.props.Login.userInfo.sformname),\r\n                        smodulename: Lims_JSON_stringify(this.props.Login.userInfo.smodulename),\r\n                        slanguagename: Lims_JSON_stringify(this.props.Login.userInfo.slanguagename)\r\n                    }\r\n                },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"fileattachment\",\r\n                classUrl: \"subcontracttestdetail\",\r\n                saveType, formRef, methodUrl: \"updateSubcontractorTestFile\",\r\n                selectedRecord:{...this.state.selectedRecord}\r\n            }\r\n            this.props.saveSubcontractorTestFile(inputParam, this.props.Login.masterData);\r\n        }\r\n        else\r\n        {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: { loading: false, openModal: false, selectedRecord: {} }\r\n                        }\r\n                        return this.props.updateStore(updateInfo);\r\n        }\r\n        }\r\n\r\n    deleteAttachment = (event, file, fieldName) => {\r\n            let selectedFile = this.state.selectedRecord || {};\r\n            selectedFile[fieldName] = deleteAttachmentDropZone(selectedFile[fieldName], file)\r\n            this.setState({\r\n                selectedFile, actionType: \"delete\" \r\n            });\r\n        }\r\n    \r\n    onDropFile = (attachedFiles, fieldName, maxSize,editable) => {\r\n            let selectedRecord = this.state.selectedRecord || {};\r\n            let neditable = 0\r\n            if(neditable !=undefined)\r\n            {\r\n                selectedRecord[editable] = 1;\r\n            }\r\n\r\n            selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n            this.setState({ selectedRecord, actionType: \"new\" });\r\n        }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        \r\n        let {DynamicSampleColumns,DynamicSubSampleColumns} = this.state;\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                const userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                let dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                \r\n                this.setState({\r\n                    userRoleControlRights, controlMap, data: this.props.Login.masterData[\"SubContractSamples\"],\r\n                    dataResult: process(this.props.Login.masterData[\"SubContractSamples\"],dataState),dataState\r\n                });\r\n            }\r\n            else {\r\n\r\n                if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n\r\n                    const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value)\r\n                    DynamicSampleColumns = dynamicColumn.sampledisplayfields ? dynamicColumn.sampledisplayfields : [];\r\n                    DynamicSubSampleColumns = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n                   \r\n                }\r\n                let { dataState } = this.state;\r\n                if (this.props.Login.dataState === undefined && dataState === undefined) {\r\n                    dataState = { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 }\r\n                }\r\n                this.setState({\r\n                    DynamicSampleColumns,DynamicSubSampleColumns,\r\n                    data: this.props.Login.masterData[\"SubContractSamples\"], selectedRecord: this.props.Login.selectedRecord,\r\n                    dataResult:this.props.Login.masterData[\"SubContractSamples\"] && process(this.props.Login.masterData[\"SubContractSamples\"],dataState),dataState\r\n                });\r\n            }\r\n        }\r\n        else if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            this.setState({  DynamicSampleColumns,DynamicSubSampleColumns,selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n    }\r\n\r\n    onInputOnChange = (event,optional,editfield) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if(editfield != undefined){\r\n            selectedRecord[editfield] = 1;\r\n        }\r\n        if (event.target.type === 'checkbox') {\r\n            selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n        }\r\n        else if (event.target.type === \"radio\"){\r\n            selectedRecord[event.target.name] = optional;\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName,editfield) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = comboData;\r\n        if(editfield != undefined){\r\n        selectedRecord[editfield] = 1;\r\n        }\r\n\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n   \r\n    \r\n    reloadData = () => {\r\n\r\n        const inputParam = {\r\n            inputData: { \"userinfo\": this.props.Login.userInfo },\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: this.props.Login.inputParam.methodUrl, \r\n            displayName: this.props.Login.displayName,\r\n            userInfo: this.props.Login.userInfo\r\n        };\r\n        this.props.callService(inputParam);\r\n    }\r\n    \r\n    onSaveClick = (saveType, formRef) => {\r\n        \r\n        if(this.props.Login.operation == \"fileattachment\")\r\n        {\r\n            return this.onSaveSubContractorTestFile(saveType, formRef);\r\n        }\r\n        let inputData = [];\r\n        let dataState = undefined;\r\n        let selectedId = null;\r\n        dataState = this.state.dataState;\r\n        selectedId = this.props.Login.selectedRecord['subcontractortestdetail'].nsubcontractortestdetailcode;\r\n\r\n\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"subcontractortestdetail\"] = this.state.selectedRecord['subcontractortestdetail'];\r\n        inputData[\"subcontractortestdetail\"]['nsuppliercode'] = this.state.selectedRecord['nsuppliercode'].value;\r\n        inputData[\"subcontractortestdetail\"]['ncontrolleadtime'] = this.state.selectedRecord['nsuppliercode'].item.ncontrolleadtime;\r\n         inputData[\"subcontractortestdetail\"]['nperiodcode'] = this.state.selectedRecord['nsuppliercode'].item.nperiodcode;\r\n        inputData[\"subcontractortestdetail\"]['sremarks'] = this.state.selectedRecord['sremarks'];\r\n\r\n        // if (inputData[\"subcontractordetails\"].hasOwnProperty('esignpassword')) {\r\n        //     if (inputData[\"subcontractordetails\"]['esignpassword'] === '') {\r\n        //         delete inputData[\"subcontractordetails\"]['esigncomments']\r\n        //         delete inputData[\"subcontractordetails\"]['esignpassword']\r\n        //     }\r\n        // }\r\n\r\n        \r\n        const inputParam = {\r\n            classUrl: this.props.Login.inputParam.classUrl,\r\n            methodUrl: \"updateSubContractSamplesdetails\",\r\n            displayName: this.props.Login.inputParam.displayName,\r\n            inputData: inputData, selectedId, dataState,\r\n            operation: this.props.Login.operation, saveType, formRef, searchRef: this.searchRef,\r\n            selectedRecord:{...this.state.selectedRecord}\r\n        }\r\n\r\n        const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        if (esignNeeded) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                    openModal: true, screenName: \"IDS_SENDSUBCONTRACTOR\",\r\n                    operation: this.props.Login.operation\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n        else {\r\n            this.props.updateSubContractSamplesdetails(inputParam, this.props.Login.masterData, \"openModal\",\"\",\"\");\r\n        }\r\n\r\n    }\r\n    validateEsign = () => {\r\n        let modalName = this.props.Login.screenName === this.props.Login.genericLabel[\"Product\"][\"jsondata\"][\"sdisplayname\"][this.props.Login.userInfo.slanguagetypecode].concat(\" \"+this.props.intl.formatMessage({id : \"IDS_FILE\"})) ? \"openChildModal\" : \"openModal\";\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"],\r\n                    nreasoncode:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].value,\r\n                    spredefinedreason:this.state.selectedRecord[\"esignreason\"] && this.state.selectedRecord[\"esignreason\"].label,\r\n               \r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, modalName);\r\n    }\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster,updateStore, getSubContractorComboService,updateSubContractSamplesdetails,\r\n    updateReceiveSTTSubContractTest,updateReceiveResultSubContractTest,addFile,saveSubcontractorTestFile,viewDetail,viewAttachment\r\n})(injectIntl(SubContractTestDetail));"]},"metadata":{},"sourceType":"module"}