{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import rsapi from\"../rsapi\";import{toast}from\"react-toastify\";import{constructOptionList,sortData,getComboLabelValue}from\"../components/CommonScript\";import{DEFAULT_RETURN}from\"./LoginTypes\";import Axios from\"axios\";import{initRequest}from\"./LoginAction\";import{transactionStatus,attachmentType}from\"../components/Enumeration\";import{intl}from\"../components/App\";//Test click\nexport var getTestMaster=function getTestMaster(testItem,userInfo,masterData){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testmaster/getTestById\",{ntestcode:testItem.ntestcode,userinfo:userInfo}).then(function(response){masterData=_objectSpread(_objectSpread({},masterData),response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false,dataState:undefined}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};//tab click\nexport var getTestDetails=function getTestDetails(inputParam){return function(dispatch){var testParameter=inputParam.testParameter;dispatch(initRequest(true));rsapi.post(\"/testmaster/getothertestdetails\",{ntestcode:testParameter.ntestcode,\"nFlag\":inputParam.nFlag,ntestparametercode:testParameter.ntestparametercode,userinfo:inputParam.userInfo}).then(function(response){var masterData=inputParam.masterData;masterData=_objectSpread(_objectSpread({},masterData),response.data);sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{masterData:masterData,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};//Add Test\nexport var addTest=function addTest(operation,testmaster,userInfo,ncontrolCode,nfilterTestCategory){return function(dispatch){if(nfilterTestCategory&&Object.values(nfilterTestCategory).length>0){dispatch(initRequest(true));var urlArray=[rsapi.post(\"testcategory/getTestCategory\",{\"userinfo\":userInfo}),rsapi.post(\"checklist/getApprovedChecklist\",{\"userinfo\":userInfo})];if(operation===\"update\"){urlArray.push(rsapi.post(\"testmaster/getActiveTestById\",{\"userinfo\":userInfo,ntestcode:testmaster.ntestcode}));urlArray.push(rsapi.post(\"period/getPeriodByControl\",{\"ncontrolcode\":ncontrolCode,\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"testmaster/getInterfaceType\",{\"userinfo\":userInfo}));}else if(operation===\"create\"){urlArray.push(rsapi.post(\"parametertype/getParameterType\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"grade/getGrade\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"section/getSection\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"testmaster/getAvailableMethod\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"unit/getUnit\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"instrumentcategory/fetchinstrumentcategory\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"testmaster/getAddTest\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"containertype/getContainerType\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"testpackage/getTestPackage\",{\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"period/getPeriodByControl\",{\"ncontrolcode\":ncontrolCode,\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"testmaster/getInterfaceType\",{\"userinfo\":userInfo}));}else if(operation===\"copy\"){urlArray.push(rsapi.post(\"testmaster/validateCopyTest\",{\"userinfo\":userInfo,ntestcode:testmaster.ntestcode}));urlArray.push(rsapi.post(\"period/getPeriodByControl\",{\"ncontrolcode\":ncontrolCode,\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"testmaster/getInterfaceType\",{\"userinfo\":userInfo}));}Axios.all(urlArray).then(function(response){var selectedRecord={};var selectedsubcodedresult=[];var testCategoryMap=constructOptionList(response[0].data||[],\"ntestcategorycode\",\"stestcategoryname\",false,false,true);var testCategory=testCategoryMap.get(\"OptionList\");var checklistMap=constructOptionList(response[0].data||[],\"nchecklistversioncode\",\"schecklistname\",false,false,true);var ChecklistVersion=checklistMap.get(\"OptionList\");//const periodMap=[];\nvar testData={testCategory:testCategory,ChecklistVersion:ChecklistVersion};var parameterData={};var otherTestData={};var needOtherTest=false;if(operation===\"update\"){var editData=response[2].data;selectedRecord=editData;var periodMap=constructOptionList(response[3].data||[],\"nperiodcode\",\"speriodname\",false,false,true);var interfacetypeMap=constructOptionList(response[4].data||[],\"ninterfacetypecode\",\"sinterfacetypename\",false,false,true);parameterData={period:periodMap.get(\"OptionList\"),interfacetype:interfacetypeMap.get(\"OptionList\")};selectedRecord[\"ntestcategorycode\"]={\"value\":editData[\"ntestcategorycode\"],\"label\":editData[\"stestcategoryname\"]};selectedRecord[\"nchecklistversioncode\"]={\"value\":editData[\"nchecklistversioncode\"],\"label\":editData[\"schecklistname\"]};if(selectedRecord[\"ntatperiodcode\"]!==-1){selectedRecord[\"ntatperiodcode\"]={\"value\":editData[\"ntatperiodcode\"],\"label\":editData[\"statperiodname\"]};}selectedRecord[\"ninterfacetypecode\"]={\"value\":editData[\"ninterfacetypecode\"],\"label\":editData[\"sinterfacetypename\"]};}else if(operation===\"copy\"){var _periodMap=constructOptionList(response[3].data||[],\"nperiodcode\",\"speriodname\",false,false,true);var _interfacetypeMap=constructOptionList(response[4].data||[],\"ninterfacetypecode\",\"sinterfacetypename\",false,false,true);//period:periodMap.get(\"OptionList\")\nparameterData={period:_periodMap.get(\"OptionList\"),interfacetype:_interfacetypeMap.get(\"OptionList\")};selectedRecord={ntestcategorycode:nfilterTestCategory.value===-2?testCategory.length>0?// {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}\ntestCategory[0]:\"\":nfilterTestCategory,ntransactionstatus:transactionStatus.ACTIVE,naccredited:transactionStatus.NOTACCREDITED,ntrainingneed:transactionStatus.NO,stestsynonym:\"\",stestname:\"\",sdescription:\"\",ncost:\"\"//period:periodMap.get(\"OptionList\"),\n};}else{// const { Grade } = response[7].data; //ParameterType\nvar parameterMap=constructOptionList(response[2].data||[],\"nparametertypecode\",\"sdisplaystatus\",false,false,true);// const parameterType = parameterMap.get(\"OptionList\");//response[2].data;\nvar gradeMap=constructOptionList(response[3].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,true);// const grade = gradeMap.get(\"OptionList\");// response[3].data;\nvar parameterItem=parameterMap.get(\"DefaultValue\")?parameterMap.get(\"DefaultValue\"):\"\";//parameterType.filter(item=>{ return item.nparametertypecode === 3 });//ParameterType[0];\nselectedRecord={// nsectioncode: {\"value\": response[2].data[0].nsectioncode, \"label\": response[2].data[0].ssectionname},\nnunitcode:-1,nparametertypecode:parameterItem,//{\"value\": parameterItem[0].nparametertypecode, \"label\": parameterItem[0].sdisplaystatus},\nntestcategorycode:nfilterTestCategory.value===-2?testCategory.length>0?// {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}: \"\")\ntestCategory[0]:\"\":nfilterTestCategory,ntransactionstatus:transactionStatus.ACTIVE,naccredited:transactionStatus.NOTACCREDITED,ntrainingneed:transactionStatus.NO,stestsynonym:\"\",stestname:\"\",sdescription:\"\",ncost:\"\"};var needUnit=true;var needRoundingDigit=true;var needCodedResult=true;var needActualResult=true;var npredefinedcode=transactionStatus.NO;var unitMap=constructOptionList(response[6].data||[],\"nunitcode\",\"sunitname\",false,false,true);var _periodMap2=constructOptionList(response[11].data||[],\"nperiodcode\",\"speriodname\",false,false,true);var deltaperiodMap=constructOptionList(response[11].data||[],\"nperiodcode\",\"speriodname\",false,false,true);var _interfacetypeMap2=constructOptionList(response[12].data||[],\"ninterfacetypecode\",\"sinterfacetypename\",false,false,true);if(parameterItem&&parameterItem.item){if(parameterItem.item[\"nunit\"]===transactionStatus.YES){needUnit=false;selectedRecord[\"nunitcode\"]=unitMap.get(\"DefaultValue\")?unitMap.get(\"DefaultValue\"):\"\";//{\"value\": response[4].data[0][\"nunitcode\"], \"label\": response[4].data[0][\"sunitname\"]};\n}if(parameterItem.item[\"nroundingdigit\"]===transactionStatus.YES){needRoundingDigit=false;}if(parameterItem.item[\"npredefinedcode\"]===transactionStatus.YES){needCodedResult=false;npredefinedcode=parameterItem.item[\"npredefinedcode\"];}if(parameterItem.item[\"ngrade\"]===transactionStatus.YES){needActualResult=false;selectedRecord[\"ngradecode\"]=gradeMap.get(\"DefaultValue\")?gradeMap.get(\"DefaultValue\"):\"\";//{\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\n}}// const testParameterMap = constructOptionList(response[8].data[\"TestParameter\"] || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\nparameterData={grade:gradeMap.get(\"OptionList\"),parameterType:parameterMap.get(\"OptionList\"),unit:unitMap.get(\"OptionList\"),period:_periodMap2.get(\"OptionList\"),interfacetype:_interfacetypeMap2.get(\"OptionList\"),deltaperiod:deltaperiodMap.get(\"OptionList\"),needRoundingDigit:needRoundingDigit,needUnit:needUnit,needCodedResult:needCodedResult,needActualResult:needActualResult,npredefinedcode:npredefinedcode,testParameter:constructOptionList(response[8].data[\"TestParameter\"]||[],'sparametername','sparametername',false,false,true).get(\"OptionList\"),defaultUnit:unitMap.get(\"DefaultValue\")?unitMap.get(\"DefaultValue\"):\"\",defaultGrade:gradeMap.get(\"DefaultValue\")?gradeMap.get(\"DefaultValue\"):\"\"//testParameterMap.get(\"OptionList\")\n};var sectionMap=constructOptionList(response[4].data||[],\"nsectioncode\",\"ssectionname\",false,false,true);// const methodMap = constructOptionList(response[5].data.Method.length>0?response[5].data.Method:[] || [], \"nmethodcode\", \"smethodname\", false, false, true);\nvar methodMap=constructOptionList(response[5].data||[],\"nmethodcode\",\"smethodname\",false,false,true);var instCatMap=constructOptionList(response[7].data||[],\"ninstrumentcatcode\",\"sinstrumentcatname\",false,false,true);var continerType=constructOptionList(response[9].data||[],\"ncontainertypecode\",\"scontainertype\",false,false,true);var packageMap=constructOptionList(response[10].data||[],\"ntestpackagecode\",\"stestpackagename\",false,false,true);otherTestData={package:packageMap.get(\"OptionList\"),section:sectionMap.get(\"OptionList\"),method:methodMap.get(\"OptionList\"),instrumentcategory:instCatMap.get(\"OptionList\"),containertype:continerType.get(\"OptionList\")};needOtherTest=true;var periodDefault=_periodMap2.get(\"DefaultValue\");if(periodDefault!==undefined){selectedRecord=_objectSpread(_objectSpread({},selectedRecord),{},{\"ntatperiodcode\":{\"value\":periodDefault.value,\"label\":periodDefault.label}});}}dispatch({type:DEFAULT_RETURN,payload:{// parameterData: {\n//     period: periodMap.get(\"OptionList\")\n// },   \nopenModal:true,needOtherTest:needOtherTest,operation:operation,screenName:\"IDS_TEST\",selectedRecord:selectedRecord,ncontrolCode:ncontrolCode,testData:testData,parameterData:parameterData,otherTestData:otherTestData,loading:false,selectedsubcodedresult:selectedsubcodedresult}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});}else{toast.warn(intl.formatMessage({id:\"IDS_TESTCATEGORYNOTAVAILABLE\"}));}};};//Add Test Parameter\nexport var addParameter=function addParameter(operation,selectedParameter,userInfo,ncontrolCode){return function(dispatch){dispatch(initRequest(true));var urlArray=[rsapi.post(\"unit/getUnit\",{\"userinfo\":userInfo}),rsapi.post(\"parametertype/getParameterType\",{\"userinfo\":userInfo}),rsapi.post(\"grade/getGrade\",{\"userinfo\":userInfo}),rsapi.post(\"testmaster/getAddTest\",{\"userinfo\":userInfo}),rsapi.post(\"period/getPeriodByControl\",{\"ncontrolcode\":ncontrolCode,\"userinfo\":userInfo})];if(operation===\"update\"){urlArray.push(rsapi.post(\"testmaster/getActiveParameterById\",{ntestparametercode:selectedParameter.ntestparametercode,\"userinfo\":userInfo}));urlArray.push(rsapi.post(\"testmaster/getDestinationUnit\",{nunitcode:selectedParameter.nunitcode,\"userinfo\":userInfo}));}Axios.all(urlArray).then(function(response){// const { Grade, ParameterType } = response[1].data;\nvar DestinationUnitMap=[];var parameterMap=constructOptionList(response[1].data||[],\"nparametertypecode\",\"sdisplaystatus\",false,false,true);var gradeMap=constructOptionList(response[2].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,true);var unitMap=constructOptionList(response[0].data||[],\"nunitcode\",\"sunitname\",false,false,true);var deltaperiodMap=constructOptionList(response[4].data||[],\"nperiodcode\",\"speriodname\",false,false,true);if(operation===\"update\"){DestinationUnitMap=constructOptionList(response[6].data.DestinationUnit||[],\"ndestinationunitcode\",\"sunitname1\",false,false,true).get(\"OptionList\");}//response[2].data;\n// const grade = response[2].data;\n// const parameterType = response[1].data;\nvar selectedRecord={};var needUnit=true;var needRoundingDigit=true;var needCodedResult=true;var needActualResult=true;var npredefinedcode=transactionStatus.No;if(operation===\"update\"){var editTestParameter=response[5].data.TestParameter[0];//ALPD-3521\nif(editTestParameter[\"ndestinationunitcode\"]==-1){editTestParameter[\"soperator\"]=[];}selectedRecord=editTestParameter;var nparametertypecode=editTestParameter[\"nparametertypecode\"];var parameterItem=parameterMap.get(\"OptionList\").filter(function(item){return item.value===nparametertypecode;});selectedRecord[\"sparametername\"]={value:editTestParameter[\"sparametername\"],label:editTestParameter[\"sparametername\"]};if(editTestParameter[\"ndeltaunitcode\"]!==-1){selectedRecord[\"ndeltaunitcode\"]={\"value\":editTestParameter[\"ndeltaunitcode\"],\"label\":editTestParameter[\"sdeltaunitname\"]};}selectedRecord[\"nparametertypecode\"]={value:nparametertypecode,label:editTestParameter[\"sdisplaystatus\"]};if(parameterItem&&parameterItem[0].item){var selectedParameterItem=parameterItem[0].item;if(selectedParameterItem[\"nunitrequired\"]===transactionStatus.YES){needUnit=false;selectedRecord[\"nunitcode\"]={value:editTestParameter[\"nunitcode\"],label:editTestParameter[\"sunitname\"]};if(editTestParameter[\"ndestinationunitcode\"]!=-1){selectedRecord[\"ndestinationunitcode\"]={value:editTestParameter[\"ndestinationunitcode\"],label:editTestParameter[\"sunitname1\"]};}}if(selectedParameterItem[\"nroundingrequired\"]===transactionStatus.YES){needRoundingDigit=false;}if(selectedParameterItem[\"npredefinedrequired\"]===transactionStatus.YES||selectedParameterItem[\"ngraderequired\"]===transactionStatus.YES){var editCodedResult=response[5].data.TestPredefinedParameter;if(editCodedResult.length>0){var defaultCodedResult=editCodedResult.filter(function(item){return item.ndefaultstatus===transactionStatus.YES;});if(defaultCodedResult.length>0){selectedRecord[\"spredefinedname\"]=defaultCodedResult[0].spredefinedname;selectedRecord[\"ntestpredefinedcode\"]=defaultCodedResult[0].ntestpredefinedcode;;selectedRecord[\"ngradecode\"]={value:defaultCodedResult[0].ngradecode,label:defaultCodedResult[0][\"sdisplaystatus\"]};//selectedRecord[\"sresultparacomment\"] = defaultCodedResult[0].sresultparacomment;\nselectedRecord[\"spredefinedsynonym\"]=defaultCodedResult[0].spredefinedsynonym;selectedRecord[\"spredefinedcomments\"]=defaultCodedResult[0].spredefinedcomments;}else{selectedRecord[\"spredefinedname\"]=editCodedResult[0].spredefinedname;selectedRecord[\"ntestpredefinedcode\"]=editCodedResult[0].ntestpredefinedcode;selectedRecord[\"ngradecode\"]={value:editCodedResult[0].ngradecode,label:editCodedResult[0][\"sdisplaystatus\"]};//selectedRecord[\"sresultparacomment\"] = defaultCodedResult[0].sresultparacomment;\nselectedRecord[\"spredefinedsynonym\"]=defaultCodedResult[0].spredefinedsynonym;selectedRecord[\"spredefinedcomments\"]=defaultCodedResult[0].spredefinedcomments;}}}else{selectedRecord[\"spredefinedname\"]=\"\";selectedRecord[\"ngradecode\"]=-1;}if(selectedParameterItem[\"npredefinedrequired\"]===transactionStatus.YES){needCodedResult=false;npredefinedcode=selectedParameterItem[\"npredefinedrequired\"];}if(selectedParameterItem[\"ngraderequired\"]===transactionStatus.YES){needActualResult=false;}}}else{var _parameterItem=parameterMap.get(\"DefaultValue\")?parameterMap.get(\"DefaultValue\").item:{};// parameterType.filter(item=>{ return item.nparametertypecode === transactionStatus.YES });\nif(_parameterItem[\"nunitrequired\"]===transactionStatus.YES){needUnit=false;selectedRecord[\"nunitcode\"]=unitMap.get(\"DefaultValue\")?unitMap.get(\"DefaultValue\"):\"\";//{\"value\": response[0].data[0][\"nunitcode\"], \"label\": response[0].data[0][\"sunitname\"]};\n}if(_parameterItem[\"nroundingrequired\"]===transactionStatus.YES){needRoundingDigit=false;}if(_parameterItem[\"npredefinedcrequired\"]===transactionStatus.YES){needCodedResult=false;npredefinedcode=_parameterItem[\"npredefinedcode\"];}if(_parameterItem[\"ngraderequired\"]===transactionStatus.YES){needActualResult=false;// selectedRecord[\"ngradecode\"] = {\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\n}selectedRecord[\"nparametertypecode\"]=parameterMap.get(\"DefaultValue\");//{value: parameterItem[0].nparametertypecode, label: parameterItem[0].sdisplaystatus};\nselectedRecord[\"nroundingdigits\"]=\"\";selectedRecord[\"nunitcode\"]=\"\";}dispatch({type:DEFAULT_RETURN,payload:{openChildModal:true,showSaveContinue:true,operation:operation,screenName:\"IDS_PARAMETER\",selectedRecord:selectedRecord,DestinationUnit:DestinationUnitMap.length>0?DestinationUnitMap:[],parameterData:{unit:unitMap.get(\"OptionList\"),grade:gradeMap.get(\"OptionList\"),deltaperiod:deltaperiodMap.get(\"OptionList\"),parameterType:parameterMap.get(\"OptionList\"),needUnit:needUnit,needRoundingDigit:needRoundingDigit,needCodedResult:needCodedResult,needActualResult:needActualResult,npredefinedcode:npredefinedcode,testParameter:constructOptionList(response[3].data[\"TestParameter\"]||[],'sparametername','sparametername',false,false,true).get(\"OptionList\"),defaultUnit:unitMap.get(\"DefaultValue\")?unitMap.get(\"DefaultValue\"):\"\",defaultGrade:gradeMap.get(\"DefaultValue\")?gradeMap.get(\"DefaultValue\"):\"\"},ncontrolCode:ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};//Add Coded result\nexport var addCodedResult=function addCodedResult(operation,paramdata,userInfo,ncontrolCode){return function(dispatch){dispatch(initRequest(true));var urlArray=[rsapi.post(\"testmaster/getAddTest\",{\"userinfo\":userInfo}),rsapi.post(\"grade/getGrade\",{\"userinfo\":userInfo})];if(operation===\"update\"){urlArray.push(rsapi.post(\"testmaster/getActivePredefinedParameterById\",{ntestpredefinedcode:paramdata[\"ntestpredefinedcode\"],\"userinfo\":userInfo}));}Axios.all(urlArray).then(function(response){var selectedRecord={};// const grade = response[1].data;\nvar gradeMap=constructOptionList(response[1].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,true);if(operation===\"update\"){var editCodedResult=response[2].data;selectedRecord={ntestpredefinedcode:paramdata[\"ntestpredefinedcode\"],ntestparametercode:paramdata[\"ntestparametercode\"],ngradecode:{\"label\":editCodedResult[\"sdisplaystatus\"],\"value\":editCodedResult[\"ngradecode\"]},spredefinedname:editCodedResult[\"spredefinedname\"],ndefaultstatus:editCodedResult[\"ndefaultstatus\"],//sresultparacomment:editCodedResult[\"sresultparacomment\"],\nspredefinedsynonym:editCodedResult[\"spredefinedsynonym\"]};}else{selectedRecord={ntestparametercode:paramdata[\"ntestparametercode\"],ngradecode:gradeMap.get(\"DefaultValue\")?gradeMap.get(\"DefaultValue\"):\"\"//{\"value\": grade[0].ngradecode, \"label\": grade[0][\"sdisplaystatus\"]}\n};}dispatch({type:DEFAULT_RETURN,payload:{openChildModal:true,showSaveContinue:false,operation:operation,screenName:\"IDS_CODEDRESULT\",parameterData:{grade:gradeMap.get(\"OptionList\"),defaultGrade:gradeMap.get(\"DefaultValue\")?gradeMap.get(\"DefaultValue\"):\"\"},selectedRecord:selectedRecord,ncontrolCode:ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};//Add parameter specification\nexport var addParameterSpecification=function addParameterSpecification(operation,paramdata,userInfo,ncontrolCode){return function(dispatch){dispatch(initRequest(true));var inputparam=[];var surl=\"\";if(operation===\"update\"){surl=\"getParameterSpecificationById\";inputparam={userinfo:userInfo,ntestparamnumericcode:paramdata[\"ntestparamnumericcode\"]};}else{surl=\"getParameterSpecificationByCount\";inputparam={userinfo:userInfo,ntestparametercode:paramdata[\"ntestparametercode\"]};}var urlArray=[rsapi.post(\"testmaster/\"+surl,inputparam),rsapi.post(\"grade/getGrade\",{userinfo:userInfo})];Axios.all(urlArray).then(function(response){var grade={};var selectedRecord={};var gradeMap=constructOptionList(response[1].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,true);grade=gradeMap.get(\"OptionList\");if(operation===\"update\"){selectedRecord=_objectSpread({},response[0].data);selectedRecord[\"ngradecode\"]=getComboLabelValue(response[0].data,response[1].data,\"ngradecode\",\"sgradename\");}else{selectedRecord={ntestparametercode:paramdata[\"ntestparametercode\"]};}dispatch({type:DEFAULT_RETURN,payload:{openChildModal:true,showSaveContinue:false,operation:operation,screenName:\"IDS_SPECIFICATION\",selectedRecord:selectedRecord,ncontrolCode:ncontrolCode,parameterData:{grade:grade},loading:false,grade:grade}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};export var getAvailableData=function getAvailableData(testItem,url,key,screenName,userInfo,ncontrolCode){return function(dispatch){var inputParam={TestMaster:testItem,\"userinfo\":userInfo};dispatch(initRequest(true));rsapi.post(\"testmaster/\"+url,inputParam).then(function(response){var availableDataMap=constructOptionList(response.data,key===\"section\"?\"nsectioncode\":key===\"method\"?\"nmethodcode\":key==\"instrumentcategory\"?\"ninstrumentcatcode\":key==\"package\"?\"ntestpackagecode\":key==\"technique\"?\"ntechniquecode\":\"ncontainertypecode\",key===\"section\"?\"ssectionname\":key===\"method\"?\"smethodname\":key==\"instrumentcategory\"?\"sinstrumentcatname\":key==\"package\"?\"stestpackagename\":key==\"technique\"?\"stechniquename\":\"scontainertype\",false,false,true);dispatch({type:DEFAULT_RETURN,payload:{openChildModal:true,showSaveContinue:false,otherTestData:_defineProperty({},key,availableDataMap.get(\"OptionList\")),screenName:screenName,selectedRecord:{availableData:\"\"},operation:\"create\",ncontrolCode:ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===417){toast.info(error.response.data);}else{toast.error(error.message);}});};};//Add formula\nexport var addFormula=function addFormula(paramdata,userInfo,ncontrolCode){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testmaster/addTestFormula\",{userinfo:userInfo,nFlag:1}).then(function(response){var responseData=response.data;var testMasterMap=constructOptionList(responseData[\"TestMaster\"],\"ntestcode\",\"stestname\",false,false,false);var testCategoryMap=constructOptionList(responseData[\"TestCategory\"],\"ntestcategorycode\",\"stestcategoryname\",'descending',false,true);dispatch({type:DEFAULT_RETURN,payload:{openChildModal:true,showSaveContinue:false,operation:\"create\",screenName:\"IDS_FORMULA\",formulaData:{operators:responseData[\"Operators\"],functions:responseData[\"Functions\"],testCategory:testCategoryMap.get(\"OptionList\"),testMaster:testMasterMap.get(\"OptionList\"),dynamicFormulaFields:responseData[\"DynamicFormulaFields\"]},isFormulaOpen:true,selectedRecord:{ntestcategorycode:testCategoryMap.get(\"OptionList\")&&testCategoryMap.get(\"OptionList\").length>0?testCategoryMap.get(\"OptionList\")[0]:\"\",//responseData[\"TestCategory\"].length>0? {\"label\": responseData[\"TestCategory\"][0][\"stestcategoryname\"], \"value\": responseData[\"TestCategory\"][0][\"ntestcategorycode\"]}: \"\",\nntestcode:testMasterMap.get(\"OptionList\")&&testMasterMap.get(\"OptionList\").length>0?testMasterMap.get(\"OptionList\")[0]:\"\",//responseData[\"TestMaster\"].length>0? {\"label\": responseData[\"TestMaster\"][0][\"stestname\"], \"value\": responseData[\"TestMaster\"][0][\"ntestcode\"]}: \"\",\nntestparametercode:paramdata[\"ntestparametercode\"]},ncontrolCode:ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};//Formula test category and test change event function\nexport var formulaChangeFunction=function formulaChangeFunction(inputParam,formulaData,caseNo,selectedRecordData,methodUrl){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testmaster\"+methodUrl,inputParam).then(function(response){var masterData=response.data;var testMasterMap=constructOptionList(masterData[\"TestMaster\"]||[],\"ntestcode\",\"stestname\",'descending','ntestcode',false);dispatch({type:DEFAULT_RETURN,payload:caseNo===1?{formulaData:_objectSpread(_objectSpread({},formulaData),{},{testMaster:testMasterMap.get(\"OptionList\"),dynamicFormulaFields:masterData[\"DynamicFormulaFields\"]||[]}),selectedRecord:_objectSpread(_objectSpread({},selectedRecordData),{},{ntestcode:testMasterMap.get(\"OptionList\")&&testMasterMap.get(\"OptionList\").length>0?testMasterMap.get(\"OptionList\")[0]:\"\"// masterData[\"TestMaster\"].length>0? {\"label\": masterData[\"TestMaster\"][0][\"stestname\"], \"value\": masterData[\"TestMaster\"][0][\"ntestcode\"]}: \"\"\n}),loading:false}:{formulaData:_objectSpread(_objectSpread({},formulaData),{},{dynamicFormulaFields:masterData[\"DynamicFormulaFields\"]}),loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(error.message);});};};export var changeTestCategoryFilter=function changeTestCategoryFilter(inputParam,filterTestCategory){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"/testmaster/get\"+inputParam.methodUrl,inputParam.inputData).then(function(response){var masterData=response.data;sortData(masterData);dispatch({type:DEFAULT_RETURN,payload:{loading:false,masterData:_objectSpread(_objectSpread({},masterData),{},{filterTestCategory:filterTestCategory,nfilterTestCategory:inputParam.inputData.nfilterTestCategory})}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});toast.error(error.message);});};};export var addTestFile=function addTestFile(inputParam){return function(dispatch){dispatch(initRequest(true));var urlArray=[rsapi.post(\"/linkmaster/getLinkMaster\",{userinfo:inputParam.userInfo})];if(inputParam.operation===\"update\"){urlArray.push(rsapi.post(\"/testmaster/editTestFile\",{userinfo:inputParam.userInfo,testfile:inputParam.selectedRecord}));}Axios.all(urlArray).then(function(response){var _payload;var linkMap=constructOptionList(response[0].data.LinkMaster,\"nlinkcode\",\"slinkname\",false,false,true);var linkmaster=linkMap.get(\"OptionList\");var selectedRecord={};var defaultLink=linkmaster.filter(function(items){return items.item.ndefaultlink===transactionStatus.YES;});var disabled=false;var editObject={};if(inputParam.operation===\"update\"){editObject=response[1].data;var nlinkcode={};var link={};if(editObject.nattachmenttypecode===attachmentType.LINK){nlinkcode={\"label\":editObject.slinkname,\"value\":editObject.nlinkcode};link={slinkfilename:editObject.sfilename,slinkdescription:editObject.sdescription,nlinkdefaultstatus:editObject.ndefaultstatus,sfilesize:'',nfilesize:0,ndefaultstatus:4,sfilename:''};}else{nlinkcode=defaultLink.length>0?defaultLink[0]:\"\";//{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\nlink={slinkfilename:'',slinkdescription:'',nlinkdefaultstatus:4,sfilesize:editObject.sfilesize,nfilesize:editObject.nfilesize,ndefaultstatus:editObject.ndefaultstatus,sfilename:editObject.sfilename,sdescription:editObject.sdescription};}selectedRecord=_objectSpread(_objectSpread({},link),{},{ntestfilecode:editObject.ntestfilecode,nattachmenttypecode:editObject.nattachmenttypecode,//...editObject,\nnlinkcode:nlinkcode// disabled: true\n});}else{selectedRecord={nattachmenttypecode:response[0].data.AttachmentType.length>0?response[0].data.AttachmentType[0].nattachmenttypecode:attachmentType.FTP,nlinkcode:defaultLink.length>0?defaultLink[0]:\"\",//{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\ndisabled:disabled};}dispatch({type:DEFAULT_RETURN,payload:(_payload={},_defineProperty(_payload,inputParam.modalName,true),_defineProperty(_payload,\"operation\",inputParam.operation),_defineProperty(_payload,\"screenName\",inputParam.screenName),_defineProperty(_payload,\"ncontrolCode\",inputParam.ncontrolCode),_defineProperty(_payload,\"selectedRecord\",selectedRecord),_defineProperty(_payload,\"loading\",false),_defineProperty(_payload,\"linkMaster\",linkmaster),_defineProperty(_payload,\"showSaveContinue\",false),_defineProperty(_payload,\"editFiles\",editObject.nattachmenttypecode===attachmentType.FTP?editObject:{}),_payload)});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};export var getActiveTestContainerTypeById=function getActiveTestContainerTypeById(containerParam){return function(dispatch){var _rsapi$post;var urlArray=[];var containerTypeById=rsapi.post(\"containertype/getContainerType\",{\"userinfo\":containerParam.userInfo});var containerById=rsapi.post(\"testmaster/getActiveTestContainerTypeById\",(_rsapi$post={},_defineProperty(_rsapi$post,containerParam.primaryKeyField,containerParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",containerParam.userInfo),_rsapi$post));var units=rsapi.post(\"unit/getUnit\",{\"userinfo\":containerParam.userInfo});urlArray=[containerTypeById,containerById,units];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var continerType=constructOptionList(response[0].data||[],\"ncontainertypecode\",\"scontainertype\",false,false,true);var unitMap=constructOptionList(response[2].data||[],\"nunitcode\",\"sunitname\",false,false,true);var otherTestData={containertype:continerType.get(\"OptionList\"),unit:unitMap.get(\"OptionList\")};var ContainerType=[];var unit=[];ContainerType.push({\"value\":response[1].data[\"ncontainertypecode\"],\"label\":response[1].data[\"scontainertype\"]});selectedRecord=response[1].data;selectedRecord[\"ncontainertypecode\"]=ContainerType[0];if(response[1].data[\"nunitcode\"]!==-1){unit.push({\"value\":response[1].data[\"nunitcode\"],\"label\":response[1].data[\"sunitname\"]});selectedRecord=response[1].data;selectedRecord[\"nunitcode\"]=unit[0];selectedRecord[\"unitMandatory\"]=true;}else{selectedRecord[\"nunitcode\"]=undefined;}dispatch({type:DEFAULT_RETURN,payload:{otherTestData:otherTestData,selectedRecord:selectedRecord,isOpen:true,operation:containerParam.operation,screenName:\"IDS_CONTAINERTYPE\",openChildModal:true,ncontrolCode:containerParam.ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};};export var addContainerType=function addContainerType(operation,testparametercode,userInfo,ncontrolCode){return function(dispatch){var urlArray=[];var containerTypeById=rsapi.post(\"unit/getUnit\",{\"userinfo\":userInfo});var containerById=rsapi.post(\"testmaster/getAvailableContainerType\",{\"TestMaster\":testparametercode,\"userinfo\":userInfo});urlArray=[containerTypeById,containerById];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};var unitMap=constructOptionList(response[0].data||[],\"nunitcode\",\"sunitname\",false,false,true);var continerType=constructOptionList(response[1].data||[],\"ncontainertypecode\",\"scontainertype\",false,false,true);var otherTestData={containertype:continerType.get(\"OptionList\"),unit:unitMap.get(\"OptionList\")};dispatch({type:DEFAULT_RETURN,payload:{otherTestData:otherTestData,selectedRecord:selectedRecord,showSaveContinue:false,isOpen:true,operation:operation,screenName:\"IDS_CONTAINERTYPE\",openChildModal:true,loading:false,ncontrolCode:ncontrolCode}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};};export function ReportInfoTest(screenName,operation,primaryKeyName,masterData,userInfo,ncontrolCode){return function(dispatch){var _rsapi$post2;var urlArray=[];var Submitter=rsapi.post(\"/testmaster/getEditReportInfoTest\",(_rsapi$post2={},_defineProperty(_rsapi$post2,primaryKeyName,masterData.SelectedTest[primaryKeyName]),_defineProperty(_rsapi$post2,\"userinfo\",userInfo),_rsapi$post2));urlArray=[Submitter];dispatch(initRequest(true));Axios.all(urlArray).then(function(response){var selectedRecord={};selectedRecord[\"sconfirmstatement\"]=response[0].data.ReportInfoTest.sconfirmstatement;selectedRecord[\"sdecisionrule\"]=response[0].data.ReportInfoTest.sdecisionrule;selectedRecord[\"ssopdescription\"]=response[0].data.ReportInfoTest.ssopdescription;selectedRecord[\"stestcondition\"]=response[0].data.ReportInfoTest.stestcondition;selectedRecord[\"sdeviationcomments\"]=response[0].data.ReportInfoTest.sdeviationcomments;selectedRecord[\"smethodstandard\"]=response[0].data.ReportInfoTest.smethodstandard;selectedRecord[\"sreference\"]=response[0].data.ReportInfoTest.sreference;dispatch({type:DEFAULT_RETURN,payload:{isOpen:true,masterData:masterData,selectedRecord:selectedRecord,operation:operation,screenName:screenName,openModal:true,ncontrolCode:ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(intl.formatMessage({id:error.message}));}else{toast.warn(intl.formatMessage({id:error.response.data}));}});};}export function getUnitConversion(nunitcode,masterData,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"testmaster/getDestinationUnit\",{\"nunitcode\":nunitcode,\"userinfo\":userInfo}).then(function(response){var DestinationUnit=[];selectedRecord[\"ndestinationunitcode\"]=\"\";var DestinationUnitMap=constructOptionList(response.data.DestinationUnit||[],\"ndestinationunitcode\",\"sunitname1\",undefined,undefined,false);DestinationUnit=DestinationUnitMap.get(\"OptionList\");//ALPD-3521\nif(DestinationUnit.length===0){selectedRecord[\"noperatorcode\"]=-1;selectedRecord[\"nconversionfactor\"]=\"\";}dispatch({type:DEFAULT_RETURN,payload:{DestinationUnit:DestinationUnit,selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export function getConversionOperator(nunitcode,ndestinationunitcode,masterData,userInfo,selectedRecord){return function(dispatch){dispatch(initRequest(true));return rsapi.post(\"testmaster/getConversionOperator\",{\"nsourceunitcode\":nunitcode,\"ndestinationunitcode\":ndestinationunitcode,\"userinfo\":userInfo}).then(function(response){//ALPD-3521\nselectedRecord[\"noperatorcode\"]=response.data.UnitConversion[0].noperatorcode;selectedRecord[\"soperator\"]=response.data.UnitConversion[0].soperator;selectedRecord[\"nconversionfactor\"]=response.data.UnitConversion[0].nconversionfactor;dispatch({type:DEFAULT_RETURN,payload:{selectedRecord:selectedRecord,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}export var addClinicalSpecification=function addClinicalSpecification(operation,paramdata,userInfo,ncontrolCode){return function(dispatch){dispatch(initRequest(true));var urlArray=[rsapi.post(\"patient/getGender\",{\"userinfo\":userInfo}),rsapi.post(\"grade/getGrade\",{userinfo:userInfo})];if(operation===\"update\"){urlArray.push(rsapi.post(\"testmaster/getTestParameterClinicalSpecById\",_objectSpread(_objectSpread({},paramdata),{},{\"userinfo\":userInfo})));}Axios.all(urlArray).then(function(response){var grade={};var gender={};var selectedRecord={};var gradeMap=constructOptionList(response[1].data||[],\"ngradecode\",\"sdisplaystatus\",false,false,true);grade=gradeMap.get(\"OptionList\");var genderMap=constructOptionList(response[0].data.genderList||[],\"ngendercode\",\"sgendername\",false,false,true);gender=genderMap.get(\"OptionList\");if(operation===\"update\"){selectedRecord=_objectSpread({},response[2].data);selectedRecord[\"ngradecode\"]=getComboLabelValue(response[2].data,response[1].data,\"ngradecode\",\"sgradename\");selectedRecord[\"ngendercode\"]=getComboLabelValue(response[2].data,response[0].data.genderList,\"ngendercode\",\"sgendername\");selectedRecord[\"nhigha\"]=selectedRecord[\"shigha\"]==='null'?'':selectedRecord[\"shigha\"];selectedRecord[\"nhighb\"]=selectedRecord[\"shighb\"]==='null'?'':selectedRecord[\"shighb\"];selectedRecord[\"nlowa\"]=selectedRecord[\"slowa\"]==='null'?'':selectedRecord[\"slowa\"];selectedRecord[\"nlowb\"]=selectedRecord[\"slowb\"]==='null'?'':selectedRecord[\"slowb\"];selectedRecord[\"sminlod\"]=selectedRecord[\"sminlod\"]==='null'?'':selectedRecord[\"sminlod\"];selectedRecord[\"smaxlod\"]=selectedRecord[\"smaxlod\"]==='null'?'':selectedRecord[\"smaxlod\"];selectedRecord[\"sminloq\"]=selectedRecord[\"sminloq\"]==='null'?'':selectedRecord[\"sminloq\"];selectedRecord[\"smaxloq\"]=selectedRecord[\"smaxloq\"]==='null'?'':selectedRecord[\"smaxloq\"];selectedRecord[\"sdisregard\"]=selectedRecord[\"sdisregard\"]==='null'?'':selectedRecord[\"sdisregard\"];selectedRecord[\"sresultvalue\"]=selectedRecord[\"sresultvalue\"]==='null'?'':selectedRecord[\"sresultvalue\"];}else{selectedRecord={ntestparametercode:paramdata[\"ntestparametercode\"]};}dispatch({type:DEFAULT_RETURN,payload:{openChildModal:true,showSaveContinue:false,operation:operation,screenName:\"IDS_CLINICALSPEC\",selectedRecord:selectedRecord,ncontrolCode:ncontrolCode,loading:false,parameterData:{gender:gender,grade:grade,needCodedResult:false}}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};export var addPredefinedModal=function addPredefinedModal(userInfo,ncontrolCode){return function(dispatch){dispatch(initRequest(true));rsapi.post(\"testmaster/getPreDefinedFormula\",{userinfo:userInfo}).then(function(response){var responseData=response.data;var preDefinedFormulaMap=constructOptionList(responseData[\"PreDefinedFormula\"],\"npredefinedformulacode\",\"sdescription\",false,false,false);dispatch({type:DEFAULT_RETURN,payload:{openChildModal:true,showSaveContinue:false,operation:\"create\",screenName:\"IDS_PREDEFINEDFORMULA\",preDefinedFormula:preDefinedFormulaMap.get(\"OptionList\"),ncontrolCode:ncontrolCode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TestMasterAction.js"],"names":["rsapi","toast","constructOptionList","sortData","getComboLabelValue","DEFAULT_RETURN","Axios","initRequest","transactionStatus","attachmentType","intl","getTestMaster","testItem","userInfo","masterData","dispatch","post","ntestcode","userinfo","then","response","data","type","payload","loading","dataState","undefined","catch","error","status","message","warn","getTestDetails","inputParam","testParameter","nFlag","ntestparametercode","addTest","operation","testmaster","ncontrolCode","nfilterTestCategory","Object","values","length","urlArray","push","all","selectedRecord","selectedsubcodedresult","testCategoryMap","testCategory","get","checklistMap","ChecklistVersion","testData","parameterData","otherTestData","needOtherTest","editData","periodMap","interfacetypeMap","period","interfacetype","ntestcategorycode","value","ntransactionstatus","ACTIVE","naccredited","NOTACCREDITED","ntrainingneed","NO","stestsynonym","stestname","sdescription","ncost","parameterMap","gradeMap","parameterItem","nunitcode","nparametertypecode","needUnit","needRoundingDigit","needCodedResult","needActualResult","npredefinedcode","unitMap","deltaperiodMap","item","YES","grade","parameterType","unit","deltaperiod","defaultUnit","defaultGrade","sectionMap","methodMap","instCatMap","continerType","packageMap","package","section","method","instrumentcategory","containertype","periodDefault","label","openModal","screenName","formatMessage","id","addParameter","selectedParameter","DestinationUnitMap","DestinationUnit","No","editTestParameter","TestParameter","filter","selectedParameterItem","editCodedResult","TestPredefinedParameter","defaultCodedResult","ndefaultstatus","spredefinedname","ntestpredefinedcode","ngradecode","spredefinedsynonym","spredefinedcomments","openChildModal","showSaveContinue","addCodedResult","paramdata","addParameterSpecification","inputparam","surl","ntestparamnumericcode","getAvailableData","url","key","TestMaster","availableDataMap","availableData","info","addFormula","responseData","testMasterMap","formulaData","operators","functions","testMaster","dynamicFormulaFields","isFormulaOpen","formulaChangeFunction","caseNo","selectedRecordData","methodUrl","changeTestCategoryFilter","filterTestCategory","inputData","addTestFile","testfile","linkMap","LinkMaster","linkmaster","defaultLink","items","ndefaultlink","disabled","editObject","nlinkcode","link","nattachmenttypecode","LINK","slinkname","slinkfilename","sfilename","slinkdescription","nlinkdefaultstatus","sfilesize","nfilesize","ntestfilecode","AttachmentType","FTP","modalName","getActiveTestContainerTypeById","containerParam","containerTypeById","containerById","primaryKeyField","primaryKeyValue","units","ContainerType","isOpen","addContainerType","testparametercode","ReportInfoTest","primaryKeyName","Submitter","SelectedTest","sconfirmstatement","sdecisionrule","ssopdescription","stestcondition","sdeviationcomments","smethodstandard","sreference","getUnitConversion","getConversionOperator","ndestinationunitcode","UnitConversion","noperatorcode","soperator","nconversionfactor","addClinicalSpecification","gender","genderMap","genderList","addPredefinedModal","preDefinedFormulaMap","preDefinedFormula"],"mappings":"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","sourcesContent":["import rsapi from \"../rsapi\";\r\nimport {\r\n    toast\r\n} from \"react-toastify\";\r\nimport {\r\n    constructOptionList,\r\n    sortData,getComboLabelValue\r\n} from \"../components/CommonScript\";\r\nimport {\r\n    DEFAULT_RETURN\r\n} from \"./LoginTypes\";\r\nimport Axios from \"axios\";\r\nimport {\r\n    initRequest\r\n} from \"./LoginAction\";\r\nimport {\r\n    transactionStatus,\r\n    attachmentType\r\n} from \"../components/Enumeration\";\r\nimport {\r\n    intl\r\n} from \"../components/App\";\r\n\r\n//Test click\r\nexport const getTestMaster = (testItem, userInfo, masterData) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/getTestById\", {\r\n                ntestcode: testItem.ntestcode,\r\n                userinfo: userInfo\r\n            })\r\n            .then(response => {\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                }\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        dataState: undefined\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//tab click\r\nexport const getTestDetails = (inputParam) => {\r\n    return function (dispatch) {\r\n        const testParameter = inputParam.testParameter;\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/getothertestdetails\", {\r\n                ntestcode: testParameter.ntestcode,\r\n                \"nFlag\": inputParam.nFlag,\r\n                ntestparametercode: testParameter.ntestparametercode,\r\n                userinfo: inputParam.userInfo\r\n            })\r\n            .then(response => {\r\n                let masterData = inputParam.masterData\r\n                masterData = {\r\n                    ...masterData,\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n//Add Test\r\nexport const addTest = (operation, testmaster, userInfo, ncontrolCode, nfilterTestCategory) => {\r\n    return function (dispatch) {\r\n        if (nfilterTestCategory && Object.values(nfilterTestCategory).length > 0) {\r\n            dispatch(initRequest(true));\r\n            const urlArray = [\r\n                rsapi.post(\"testcategory/getTestCategory\", {\r\n                    \"userinfo\": userInfo\r\n                }),\r\n                rsapi.post(\"checklist/getApprovedChecklist\", {\r\n                    \"userinfo\": userInfo\r\n                })\r\n            ];\r\n            if (operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"testmaster/getActiveTestById\", {\r\n                    \"userinfo\": userInfo,\r\n                    ntestcode: testmaster.ntestcode\r\n                }))\r\n\r\n                urlArray.push(rsapi.post(\"period/getPeriodByControl\", {\r\n                    \"ncontrolcode\": ncontrolCode,\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testmaster/getInterfaceType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n            } else if (operation === \"create\") {\r\n                urlArray.push(rsapi.post(\"parametertype/getParameterType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"grade/getGrade\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"section/getSection\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testmaster/getAvailableMethod\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"unit/getUnit\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n               \r\n                urlArray.push(rsapi.post(\"instrumentcategory/fetchinstrumentcategory\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testmaster/getAddTest\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"containertype/getContainerType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testpackage/getTestPackage\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n\r\n                urlArray.push(  rsapi.post(\"period/getPeriodByControl\", {\r\n                    \"ncontrolcode\": ncontrolCode,\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testmaster/getInterfaceType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n            } else if (operation === \"copy\") {\r\n                urlArray.push(rsapi.post(\"testmaster/validateCopyTest\", {\r\n                    \"userinfo\": userInfo,\r\n                    ntestcode: testmaster.ntestcode\r\n                }));\r\n\r\n                urlArray.push(rsapi.post(\"period/getPeriodByControl\", {\r\n                    \"ncontrolcode\": ncontrolCode,\r\n                    \"userinfo\": userInfo\r\n                }));\r\n                urlArray.push(rsapi.post(\"testmaster/getInterfaceType\", {\r\n                    \"userinfo\": userInfo\r\n                }));\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                  \r\n                    let selectedRecord = {};\r\n                    let selectedsubcodedresult = [];\r\n                    const testCategoryMap = constructOptionList(response[0].data || [], \"ntestcategorycode\", \"stestcategoryname\", false, false, true);\r\n                    const testCategory = testCategoryMap.get(\"OptionList\");\r\n                    const checklistMap = constructOptionList(response[0].data || [], \"nchecklistversioncode\", \"schecklistname\", false, false, true);\r\n                    const ChecklistVersion = checklistMap.get(\"OptionList\");\r\n                    //const periodMap=[];\r\n                    const testData = {\r\n                        testCategory,\r\n                        ChecklistVersion\r\n                    };\r\n                    let parameterData = {};\r\n                    let otherTestData = {}\r\n                    let needOtherTest = false;\r\n                    if (operation === \"update\") {\r\n                        const editData = response[2].data;\r\n                        selectedRecord = editData;\r\n                        const periodMap = constructOptionList(response[3].data || [], \"nperiodcode\", \"speriodname\", false, false, true);\r\n                        const interfacetypeMap = constructOptionList(response[4].data || [], \"ninterfacetypecode\", \"sinterfacetypename\", false, false, true);\r\n\r\n                        parameterData = {\r\n                            period:periodMap.get(\"OptionList\"),\r\n                            interfacetype:interfacetypeMap.get(\"OptionList\")\r\n                        }\r\n                        selectedRecord[\"ntestcategorycode\"] = {\r\n                            \"value\": editData[\"ntestcategorycode\"],\r\n                            \"label\": editData[\"stestcategoryname\"]\r\n                        };\r\n                        selectedRecord[\"nchecklistversioncode\"] = {\r\n                            \"value\": editData[\"nchecklistversioncode\"],\r\n                            \"label\": editData[\"schecklistname\"]\r\n                        };\r\n                        \r\n                        if(selectedRecord[\"ntatperiodcode\"] !==-1){\r\n                            selectedRecord[\"ntatperiodcode\"] = {\r\n                                \"value\": editData[\"ntatperiodcode\"],\r\n                                \"label\": editData[\"statperiodname\"]\r\n                            };\r\n                        }\r\n                        selectedRecord[\"ninterfacetypecode\"] = {\r\n                            \"value\": editData[\"ninterfacetypecode\"],\r\n                            \"label\": editData[\"sinterfacetypename\"]\r\n                        };\r\n                    } else if (operation === \"copy\") {\r\n                        const periodMap = constructOptionList(response[3].data || [], \"nperiodcode\", \"speriodname\", false, false, true);\r\n                        const interfacetypeMap = constructOptionList(response[4].data || [], \"ninterfacetypecode\", \"sinterfacetypename\", false, false, true);\r\n\r\n                        //period:periodMap.get(\"OptionList\")\r\n                        parameterData={\r\n                            period: periodMap.get(\"OptionList\"),\r\n                            interfacetype:interfacetypeMap.get(\"OptionList\")\r\n                        } ;\r\n                        selectedRecord = {\r\n                            ntestcategorycode: nfilterTestCategory.value === -2 ? (testCategory.length > 0 ?\r\n                                // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}\r\n                                testCategory[0] : \"\") : nfilterTestCategory,\r\n                            ntransactionstatus: transactionStatus.ACTIVE,\r\n                            naccredited: transactionStatus.NOTACCREDITED,\r\n                            ntrainingneed: transactionStatus.NO,\r\n                            stestsynonym: \"\",\r\n                            stestname: \"\",\r\n                            sdescription: \"\",\r\n                            ncost: \"\",\r\n                            //period:periodMap.get(\"OptionList\"),\r\n                           \r\n                        }\r\n                        \r\n                    } else {\r\n                        // const { Grade } = response[7].data; //ParameterType\r\n                        const parameterMap = constructOptionList(response[2].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                        // const parameterType = parameterMap.get(\"OptionList\");//response[2].data;\r\n                        const gradeMap = constructOptionList(response[3].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                        // const grade = gradeMap.get(\"OptionList\");// response[3].data;\r\n                        const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\") : \"\"; //parameterType.filter(item=>{ return item.nparametertypecode === 3 });//ParameterType[0];\r\n                        selectedRecord = {\r\n                            // nsectioncode: {\"value\": response[2].data[0].nsectioncode, \"label\": response[2].data[0].ssectionname},\r\n                            nunitcode: -1,\r\n                            nparametertypecode: parameterItem, //{\"value\": parameterItem[0].nparametertypecode, \"label\": parameterItem[0].sdisplaystatus},\r\n                            ntestcategorycode: nfilterTestCategory.value === -2 ? (testCategory.length > 0 ?\r\n                                // {\"label\": testCategory[0].stestcategoryname, \"value\": testCategory[0].ntestcategorycode}: \"\")\r\n                                testCategory[0] : \"\") : nfilterTestCategory,\r\n                            ntransactionstatus: transactionStatus.ACTIVE,\r\n                            naccredited: transactionStatus.NOTACCREDITED,\r\n                            ntrainingneed: transactionStatus.NO,\r\n                            stestsynonym: \"\",\r\n                            stestname: \"\",\r\n                            sdescription: \"\",\r\n                            ncost: \"\"\r\n                        }\r\n                        let needUnit = true;\r\n                        let needRoundingDigit = true;\r\n                        let needCodedResult = true;\r\n                        let needActualResult = true;\r\n                        let npredefinedcode = transactionStatus.NO;\r\n                        const unitMap = constructOptionList(response[6].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                        const periodMap = constructOptionList(response[11].data || [], \"nperiodcode\", \"speriodname\", false, false, true);\r\n                        const deltaperiodMap = constructOptionList(response[11].data || [], \"nperiodcode\", \"speriodname\", false, false, true);\r\n                        const interfacetypeMap = constructOptionList(response[12].data || [], \"ninterfacetypecode\", \"sinterfacetypename\", false, false, true);\r\n\r\n                        if (parameterItem && parameterItem.item) {\r\n                            if (parameterItem.item[\"nunit\"] === transactionStatus.YES) {\r\n                                needUnit = false;\r\n                                selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\";\r\n                                //{\"value\": response[4].data[0][\"nunitcode\"], \"label\": response[4].data[0][\"sunitname\"]};\r\n                            }\r\n                            if (parameterItem.item[\"nroundingdigit\"] === transactionStatus.YES) {\r\n                                needRoundingDigit = false;\r\n                            }\r\n                            if (parameterItem.item[\"npredefinedcode\"] === transactionStatus.YES) {\r\n                                needCodedResult = false;\r\n                                npredefinedcode = parameterItem.item[\"npredefinedcode\"];\r\n                            }\r\n                            if (parameterItem.item[\"ngrade\"] === transactionStatus.YES) {\r\n                                needActualResult = false;\r\n                                selectedRecord[\"ngradecode\"] = gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\";\r\n                                //{\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\r\n                            }\r\n                        }\r\n                        // const testParameterMap = constructOptionList(response[8].data[\"TestParameter\"] || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                        parameterData = {\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            parameterType: parameterMap.get(\"OptionList\"),\r\n                            unit: unitMap.get(\"OptionList\"),\r\n                            period:periodMap.get(\"OptionList\"),\r\n                            interfacetype:interfacetypeMap.get(\"OptionList\"),\r\n                            deltaperiod:deltaperiodMap.get(\"OptionList\"),\r\n                            needRoundingDigit,\r\n                            needUnit,\r\n                            needCodedResult,\r\n                            needActualResult,\r\n                            npredefinedcode,\r\n                            testParameter: constructOptionList(response[8].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\r\n                            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                            //testParameterMap.get(\"OptionList\")\r\n                        };\r\n                        const sectionMap = constructOptionList(response[4].data || [], \"nsectioncode\", \"ssectionname\", false, false, true);\r\n                       // const methodMap = constructOptionList(response[5].data.Method.length>0?response[5].data.Method:[] || [], \"nmethodcode\", \"smethodname\", false, false, true);\r\n                       const methodMap = constructOptionList(response[5].data||[], \"nmethodcode\", \"smethodname\", false, false, true);\r\n\r\n                       const instCatMap = constructOptionList(response[7].data || [], \"ninstrumentcatcode\", \"sinstrumentcatname\", false, false, true);\r\n                        const continerType = constructOptionList(response[9].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\r\n                        const packageMap = constructOptionList(response[10].data || [], \"ntestpackagecode\", \"stestpackagename\", false, false, true);\r\n                        otherTestData = {\r\n                            package: packageMap.get(\"OptionList\"),\r\n                            section: sectionMap.get(\"OptionList\"),\r\n                            method: methodMap.get(\"OptionList\"),\r\n                            instrumentcategory: instCatMap.get(\"OptionList\"),\r\n                            containertype: continerType.get(\"OptionList\")\r\n\r\n                        }\r\n                        needOtherTest = true;\r\n                        const periodDefault = periodMap.get(\"DefaultValue\");\r\n\r\n                        if (periodDefault !== undefined) {\r\n                            selectedRecord = {\r\n                                ...selectedRecord,\r\n                                \"ntatperiodcode\": {\r\n                                    \"value\": periodDefault.value,\r\n                                    \"label\": periodDefault.label\r\n                                },\r\n                            }\r\n                        }\r\n                        \r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            // parameterData: {\r\n                            //     period: periodMap.get(\"OptionList\")\r\n                            // },   \r\n                            openModal: true,\r\n                            needOtherTest,\r\n                            operation: operation,\r\n                            screenName: \"IDS_TEST\",\r\n                            selectedRecord,\r\n                            ncontrolCode,\r\n                            testData,\r\n                            parameterData,\r\n                            otherTestData,\r\n                            loading: false,selectedsubcodedresult\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({\r\n                id: \"IDS_TESTCATEGORYNOTAVAILABLE\"\r\n            }))\r\n        }\r\n    }\r\n}\r\n\r\n//Add Test Parameter\r\nexport const addParameter = (operation, selectedParameter, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const urlArray = [\r\n            rsapi.post(\"unit/getUnit\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"parametertype/getParameterType\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"grade/getGrade\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"testmaster/getAddTest\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"period/getPeriodByControl\", {\r\n                \"ncontrolcode\": ncontrolCode,\r\n                \"userinfo\": userInfo\r\n            })\r\n            \r\n        ];\r\n        if (operation === \"update\") {            \r\n\r\n            urlArray.push(rsapi.post(\"testmaster/getActiveParameterById\", {\r\n                ntestparametercode: selectedParameter.ntestparametercode,\r\n                \"userinfo\": userInfo\r\n            }));\r\n\r\n            urlArray.push(rsapi.post(\"testmaster/getDestinationUnit\", {\r\n                nunitcode: selectedParameter.nunitcode,\r\n                \"userinfo\": userInfo\r\n            }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                // const { Grade, ParameterType } = response[1].data;\r\n                let DestinationUnitMap =[];\r\n                const parameterMap = constructOptionList(response[1].data || [], \"nparametertypecode\", \"sdisplaystatus\", false, false, true);\r\n                const gradeMap = constructOptionList(response[2].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n                const deltaperiodMap = constructOptionList(response[4].data || [], \"nperiodcode\", \"speriodname\", false, false, true);\r\n                if(operation === \"update\"){\r\n                    DestinationUnitMap = constructOptionList(response[6].data.DestinationUnit || [], \"ndestinationunitcode\", \"sunitname1\", false, false, true).get(\"OptionList\");\r\n                }\r\n\r\n\r\n                //response[2].data;\r\n                // const grade = response[2].data;\r\n                // const parameterType = response[1].data;\r\n                let selectedRecord = {};\r\n                let needUnit = true;\r\n                let needRoundingDigit = true;\r\n                let needCodedResult = true;\r\n                let needActualResult = true;\r\n                let npredefinedcode = transactionStatus.No;\r\n                if (operation === \"update\") {\r\n\r\n                    const editTestParameter = response[5].data.TestParameter[0];\r\n                    //ALPD-3521\r\n  \t\t\t\t if(editTestParameter[\"ndestinationunitcode\"]==-1){\r\n   \t\t\t\t\t editTestParameter[\"soperator\"]=[];\t\r\n\t\t\t\t\t}\r\n                    selectedRecord = editTestParameter;\r\n                    const nparametertypecode = editTestParameter[\"nparametertypecode\"];\r\n                    const parameterItem = parameterMap.get(\"OptionList\").filter(function (item) {\r\n                        return item.value === nparametertypecode;\r\n                    });\r\n                    selectedRecord[\"sparametername\"] = {\r\n                        value: editTestParameter[\"sparametername\"],\r\n                        label: editTestParameter[\"sparametername\"]\r\n                    };\r\n\r\n                    if(editTestParameter[\"ndeltaunitcode\"] !==-1){\r\n                        selectedRecord[\"ndeltaunitcode\"] = {\r\n                            \"value\": editTestParameter[\"ndeltaunitcode\"],\r\n                            \"label\": editTestParameter[\"sdeltaunitname\"]\r\n                        };\r\n                    }\r\n                    selectedRecord[\"nparametertypecode\"] = {\r\n                        value: nparametertypecode,\r\n                        label: editTestParameter[\"sdisplaystatus\"]\r\n                    };\r\n                    if (parameterItem && parameterItem[0].item) {\r\n                        const selectedParameterItem = parameterItem[0].item;\r\n                        if (selectedParameterItem[\"nunitrequired\"] === transactionStatus.YES) {\r\n                            needUnit = false;\r\n                            selectedRecord[\"nunitcode\"] = {\r\n                                value: editTestParameter[\"nunitcode\"],\r\n                                label: editTestParameter[\"sunitname\"]\r\n                            };\r\n                            if(editTestParameter[\"ndestinationunitcode\"]!=-1){\r\n                            selectedRecord[\"ndestinationunitcode\"] = {\r\n                                value: editTestParameter[\"ndestinationunitcode\"],\r\n                                label: editTestParameter[\"sunitname1\"]\r\n                            };\r\n                        }\r\n                        }\r\n                        if (selectedParameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                            needRoundingDigit = false;\r\n                        }\r\n\r\n                        if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES || selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                            const editCodedResult = response[5].data.TestPredefinedParameter;\r\n                            if (editCodedResult.length > 0) {\r\n                                const defaultCodedResult = editCodedResult.filter(function (item) {\r\n                                    return item.ndefaultstatus === transactionStatus.YES;\r\n                                });\r\n                                if (defaultCodedResult.length > 0) {\r\n                                    selectedRecord[\"spredefinedname\"] = defaultCodedResult[0].spredefinedname;\r\n                                    selectedRecord[\"ntestpredefinedcode\"] = defaultCodedResult[0].ntestpredefinedcode;;\r\n                                    selectedRecord[\"ngradecode\"] = {\r\n                                        value: defaultCodedResult[0].ngradecode,\r\n                                        label: defaultCodedResult[0][\"sdisplaystatus\"]\r\n                                    };\r\n                                    //selectedRecord[\"sresultparacomment\"] = defaultCodedResult[0].sresultparacomment;\r\n                                    selectedRecord[\"spredefinedsynonym\"] = defaultCodedResult[0].spredefinedsynonym;\r\n                                    selectedRecord[\"spredefinedcomments\"] = defaultCodedResult[0].spredefinedcomments;\r\n                                } else {\r\n                                    selectedRecord[\"spredefinedname\"] = editCodedResult[0].spredefinedname;\r\n                                    selectedRecord[\"ntestpredefinedcode\"] = editCodedResult[0].ntestpredefinedcode;\r\n                                    selectedRecord[\"ngradecode\"] = {\r\n                                        value: editCodedResult[0].ngradecode,\r\n                                        label: editCodedResult[0][\"sdisplaystatus\"]\r\n                                    };\r\n                                    //selectedRecord[\"sresultparacomment\"] = defaultCodedResult[0].sresultparacomment;\r\n                                    selectedRecord[\"spredefinedsynonym\"] = defaultCodedResult[0].spredefinedsynonym;\r\n                                    selectedRecord[\"spredefinedcomments\"] = defaultCodedResult[0].spredefinedcomments;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            selectedRecord[\"spredefinedname\"] = \"\";\r\n                            selectedRecord[\"ngradecode\"] = -1;\r\n                        }\r\n                        if (selectedParameterItem[\"npredefinedrequired\"] === transactionStatus.YES) {\r\n                            needCodedResult = false;\r\n                            npredefinedcode = selectedParameterItem[\"npredefinedrequired\"];\r\n                        }\r\n                        if (selectedParameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                            needActualResult = false;\r\n                        }\r\n                    }\r\n                } else {\r\n                    const parameterItem = parameterMap.get(\"DefaultValue\") ? parameterMap.get(\"DefaultValue\").item : {};\r\n                    // parameterType.filter(item=>{ return item.nparametertypecode === transactionStatus.YES });\r\n                    if (parameterItem[\"nunitrequired\"] === transactionStatus.YES) {\r\n                        needUnit = false;\r\n                        selectedRecord[\"nunitcode\"] = unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\"; //{\"value\": response[0].data[0][\"nunitcode\"], \"label\": response[0].data[0][\"sunitname\"]};\r\n                    }\r\n                    if (parameterItem[\"nroundingrequired\"] === transactionStatus.YES) {\r\n                        needRoundingDigit = false;\r\n                    }\r\n                    if (parameterItem[\"npredefinedcrequired\"] === transactionStatus.YES) {\r\n                        needCodedResult = false;\r\n                        npredefinedcode = parameterItem[\"npredefinedcode\"];\r\n                    }\r\n                    if (parameterItem[\"ngraderequired\"] === transactionStatus.YES) {\r\n                        needActualResult = false;\r\n                        // selectedRecord[\"ngradecode\"] = {\"value\": Grade.ngradecode, \"label\": Grade[\"sdisplaystatus\"]};\r\n                    }\r\n                    selectedRecord[\"nparametertypecode\"] = parameterMap.get(\"DefaultValue\"); //{value: parameterItem[0].nparametertypecode, label: parameterItem[0].sdisplaystatus};\r\n                    selectedRecord[\"nroundingdigits\"]=\"\";\r\n                    selectedRecord[\"nunitcode\"]=\"\";\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: true,\r\n                        operation: operation,\r\n                        screenName: \"IDS_PARAMETER\",\r\n                        selectedRecord,\r\n                        DestinationUnit : DestinationUnitMap.length >0  ? DestinationUnitMap:[],\r\n                        parameterData: {\r\n                            unit: unitMap.get(\"OptionList\"),\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            deltaperiod:deltaperiodMap.get(\"OptionList\"),\r\n                            parameterType: parameterMap.get(\"OptionList\"),                            \r\n                            needUnit,\r\n                            needRoundingDigit,\r\n                            needCodedResult,\r\n                            needActualResult,\r\n                            npredefinedcode,\r\n                            testParameter: constructOptionList(response[3].data[\"TestParameter\"] || [], 'sparametername', 'sparametername', false, false, true).get(\"OptionList\"),\r\n                            defaultUnit: unitMap.get(\"DefaultValue\") ? unitMap.get(\"DefaultValue\") : \"\",\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                        },\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add Coded result\r\nexport const addCodedResult = (operation, paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        const urlArray = [\r\n            rsapi.post(\"testmaster/getAddTest\", {\r\n                \"userinfo\": userInfo\r\n            }),\r\n            rsapi.post(\"grade/getGrade\", {\r\n                \"userinfo\": userInfo\r\n            })\r\n        ];\r\n        if (operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"testmaster/getActivePredefinedParameterById\", {\r\n                ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\r\n                \"userinfo\": userInfo\r\n            }));\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                // const grade = response[1].data;\r\n                const gradeMap = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                if (operation === \"update\") {\r\n                    const editCodedResult = response[2].data;\r\n                    selectedRecord = {\r\n                        ntestpredefinedcode: paramdata[\"ntestpredefinedcode\"],\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"],\r\n                        ngradecode: {\r\n                            \"label\": editCodedResult[\"sdisplaystatus\"],\r\n                            \"value\": editCodedResult[\"ngradecode\"]\r\n                        },\r\n                        spredefinedname: editCodedResult[\"spredefinedname\"],\r\n                        ndefaultstatus: editCodedResult[\"ndefaultstatus\"],\r\n                        //sresultparacomment:editCodedResult[\"sresultparacomment\"],\r\n                        spredefinedsynonym:editCodedResult[\"spredefinedsynonym\"],\r\n                    }\r\n                } else {\r\n                    selectedRecord = {\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"],\r\n                        ngradecode: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\" //{\"value\": grade[0].ngradecode, \"label\": grade[0][\"sdisplaystatus\"]}\r\n                    }\r\n                }\r\n              \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: operation,\r\n                        screenName: \"IDS_CODEDRESULT\",\r\n                        parameterData: {\r\n                            grade: gradeMap.get(\"OptionList\"),\r\n                            defaultGrade: gradeMap.get(\"DefaultValue\") ? gradeMap.get(\"DefaultValue\") : \"\"\r\n                        },\r\n                        selectedRecord,\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add parameter specification\r\nexport const addParameterSpecification = (operation, paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let inputparam = [];\r\n        let surl = \"\";\r\n        if (operation === \"update\") {\r\n            surl = \"getParameterSpecificationById\";\r\n            inputparam = {\r\n                userinfo: userInfo,\r\n                ntestparamnumericcode: paramdata[\"ntestparamnumericcode\"]\r\n            };\r\n        } else {\r\n            surl = \"getParameterSpecificationByCount\";\r\n            inputparam = {\r\n                userinfo: userInfo,\r\n                ntestparametercode: paramdata[\"ntestparametercode\"]\r\n            };\r\n        }\r\n        const urlArray = [rsapi.post(\"testmaster/\" + surl, inputparam),\r\n        rsapi.post(\"grade/getGrade\", {\r\n            userinfo: userInfo\r\n        }),]\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let grade ={};\r\n                let selectedRecord = {};\r\n                const gradeMap = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                grade = gradeMap.get(\"OptionList\");\r\n                if (operation === \"update\") {\r\n                    selectedRecord = {\r\n                        ...response[0].data\r\n                    }\r\n                    selectedRecord[\"ngradecode\"] = getComboLabelValue(response[0].data, response[1].data, \r\n                        \"ngradecode\", \"sgradename\");   \r\n                } else {\r\n                    selectedRecord = {\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"]\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: operation,\r\n                        screenName: \"IDS_SPECIFICATION\",\r\n                        selectedRecord,\r\n                        ncontrolCode,parameterData: {\r\n                          grade,\r\n                                                  },\r\n                        loading: false,grade\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport const getAvailableData = (testItem, url, key, screenName, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        const inputParam = {\r\n            TestMaster: testItem,\r\n            \"userinfo\": userInfo\r\n        }\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/\" + url, inputParam)\r\n            .then(response => {\r\n                const availableDataMap = constructOptionList(response.data, key === \"section\" ? \"nsectioncode\" : key === \"method\" ? \"nmethodcode\" : key == \"instrumentcategory\" ?\"ninstrumentcatcode\" : key == \"package\" ?\"ntestpackagecode\" : key == \"technique\" ?\"ntechniquecode\" : \"ncontainertypecode\",\r\n                    key === \"section\" ? \"ssectionname\" : key === \"method\" ? \"smethodname\" :  key == \"instrumentcategory\" ? \"sinstrumentcatname\"  :  key == \"package\" ? \"stestpackagename\" :key == \"technique\" ? \"stechniquename\" : \"scontainertype\", false, false, true);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        otherTestData: {\r\n                            [key]: availableDataMap.get(\"OptionList\")\r\n                        },\r\n                        screenName: screenName,\r\n                        selectedRecord: {\r\n                            availableData: \"\"\r\n                        },\r\n                        operation: \"create\",\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 417) {\r\n                    toast.info(error.response.data)\r\n                } else {\r\n                    toast.error(error.message)\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Add formula\r\nexport const addFormula = (paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/addTestFormula\", {\r\n                userinfo: userInfo,\r\n                nFlag: 1\r\n            })\r\n            .then(response => {\r\n                const responseData = response.data;\r\n                const testMasterMap = constructOptionList(responseData[\"TestMaster\"], \"ntestcode\", \"stestname\", false, false, false);\r\n                const testCategoryMap = constructOptionList(responseData[\"TestCategory\"], \r\n                \"ntestcategorycode\", \"stestcategoryname\", 'descending', false, true);\r\n            \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: \"create\",\r\n                        screenName: \"IDS_FORMULA\",\r\n                        formulaData: {\r\n                            operators: responseData[\"Operators\"],\r\n                            functions: responseData[\"Functions\"],\r\n                            testCategory: testCategoryMap.get(\"OptionList\"),\r\n                            testMaster: testMasterMap.get(\"OptionList\"),\r\n                            dynamicFormulaFields: responseData[\"DynamicFormulaFields\"]\r\n                        },\r\n                        isFormulaOpen: true,\r\n                        selectedRecord: {\r\n                            ntestcategorycode: testCategoryMap.get(\"OptionList\") && testCategoryMap.get(\"OptionList\").length > 0 ? testCategoryMap.get(\"OptionList\")[0] : \"\", //responseData[\"TestCategory\"].length>0? {\"label\": responseData[\"TestCategory\"][0][\"stestcategoryname\"], \"value\": responseData[\"TestCategory\"][0][\"ntestcategorycode\"]}: \"\",\r\n                            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\", //responseData[\"TestMaster\"].length>0? {\"label\": responseData[\"TestMaster\"][0][\"stestname\"], \"value\": responseData[\"TestMaster\"][0][\"ntestcode\"]}: \"\",\r\n                            ntestparametercode: paramdata[\"ntestparametercode\"]\r\n                        },\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n//Formula test category and test change event function\r\nexport const formulaChangeFunction = (inputParam, formulaData, caseNo, selectedRecordData, methodUrl) => {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster\" + methodUrl, inputParam)\r\n            .then(response => {\r\n                const masterData = response.data;\r\n                const testMasterMap = constructOptionList(masterData[\"TestMaster\"] || [], \"ntestcode\", \"stestname\", 'descending', 'ntestcode', false);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n\r\n                    payload: caseNo === 1 ? {\r\n                        formulaData: {\r\n                            ...formulaData,\r\n                            testMaster: testMasterMap.get(\"OptionList\"),\r\n                            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"] || []\r\n                        },\r\n                        selectedRecord: {\r\n                            ...selectedRecordData,\r\n                            ntestcode: testMasterMap.get(\"OptionList\") && testMasterMap.get(\"OptionList\").length > 0 ? testMasterMap.get(\"OptionList\")[0] : \"\"\r\n                            // masterData[\"TestMaster\"].length>0? {\"label\": masterData[\"TestMaster\"][0][\"stestname\"], \"value\": masterData[\"TestMaster\"][0][\"ntestcode\"]}: \"\"\r\n                        },\r\n                        loading: false\r\n                    } : {\r\n                        formulaData: {\r\n                            ...formulaData,\r\n                            dynamicFormulaFields: masterData[\"DynamicFormulaFields\"]\r\n                        },\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const changeTestCategoryFilter = (inputParam, filterTestCategory) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testmaster/get\" + inputParam.methodUrl, inputParam.inputData)\r\n            .then(response => {\r\n                const masterData = response.data\r\n                sortData(masterData);\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false,\r\n                        masterData: {\r\n                            ...masterData,\r\n                            filterTestCategory,\r\n                            nfilterTestCategory: inputParam.inputData.nfilterTestCategory\r\n                        }\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                toast.error(error.message);\r\n            });\r\n    }\r\n}\r\n\r\nexport const addTestFile = (inputParam) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        let urlArray = [rsapi.post(\"/linkmaster/getLinkMaster\", {\r\n            userinfo: inputParam.userInfo\r\n        })];\r\n        if (inputParam.operation === \"update\") {\r\n            urlArray.push(rsapi.post(\"/testmaster/editTestFile\", {\r\n                userinfo: inputParam.userInfo,\r\n                testfile: inputParam.selectedRecord\r\n            }))\r\n        }\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n              \r\n                const linkMap = constructOptionList(response[0].data.LinkMaster, \"nlinkcode\", \"slinkname\", false, false, true);\r\n                const linkmaster = linkMap.get(\"OptionList\");\r\n                let selectedRecord = {};\r\n                const defaultLink = linkmaster.filter(items => items.item.ndefaultlink === transactionStatus.YES);\r\n                let disabled = false;\r\n                let editObject = {};\r\n                if (inputParam.operation === \"update\") {\r\n                    editObject = response[1].data;\r\n                    let nlinkcode = {};\r\n                    let link = {};\r\n                    if (editObject.nattachmenttypecode === attachmentType.LINK) {\r\n                        nlinkcode = {\r\n                            \"label\": editObject.slinkname,\r\n                            \"value\": editObject.nlinkcode\r\n                        }\r\n\r\n                        link = {\r\n                            slinkfilename:editObject.sfilename,\r\n                            slinkdescription:editObject.sdescription,\r\n                            nlinkdefaultstatus:editObject.ndefaultstatus,\r\n                            sfilesize:'',\r\n                            nfilesize:0,\r\n                            ndefaultstatus:4,\r\n                            sfilename:'',\r\n                        }\r\n\r\n                    } else {\r\n                        nlinkcode = defaultLink.length > 0 ? defaultLink[0] : \"\" //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\"\r\n                        link = {\r\n                            slinkfilename:'',\r\n                            slinkdescription:'',\r\n                            nlinkdefaultstatus:4,\r\n                            sfilesize:editObject.sfilesize,\r\n                            nfilesize:editObject.nfilesize,\r\n                            ndefaultstatus:editObject.ndefaultstatus,\r\n                            sfilename:editObject.sfilename,\r\n                            sdescription:editObject.sdescription\r\n                        }\r\n                    }\r\n\r\n\r\n\r\n                    selectedRecord = {\r\n                        ...link,\r\n                        ntestfilecode:editObject.ntestfilecode,\r\n                        nattachmenttypecode:editObject.nattachmenttypecode,\r\n                        //...editObject,\r\n                        nlinkcode,\r\n        \r\n                       // disabled: true\r\n                    };\r\n                } else {\r\n                    selectedRecord = {\r\n                        nattachmenttypecode:response[0].data.AttachmentType.length>0?\r\n                        response[0].data.AttachmentType[0].nattachmenttypecode:attachmentType.FTP,\r\n                        nlinkcode: defaultLink.length > 0 ? defaultLink[0] : \"\", //{\"label\": defaultLink[0].slinkname, \"value\": defaultLink[0].nlinkcode}:\"\",\r\n                        disabled\r\n                    };\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        [inputParam.modalName]: true,\r\n                        operation: inputParam.operation,\r\n                        screenName: inputParam.screenName,\r\n                        ncontrolCode: inputParam.ncontrolCode,\r\n                        selectedRecord,\r\n                        loading: false,\r\n                        linkMaster: linkmaster,\r\n                        showSaveContinue: false,\r\n                        editFiles: editObject.nattachmenttypecode === attachmentType.FTP ? editObject : {}\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n \r\n\r\nexport const getActiveTestContainerTypeById = (containerParam) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const containerTypeById =rsapi.post(\"containertype/getContainerType\", {\r\n            \"userinfo\": containerParam.userInfo});\r\n        \r\n          \r\n            const containerById=rsapi.post(\"testmaster/getActiveTestContainerTypeById\", {\r\n                [containerParam.primaryKeyField] :containerParam.primaryKeyValue,\r\n                \"userinfo\": containerParam.userInfo\r\n                });\r\n                const units =rsapi.post(\"unit/getUnit\", {\r\n                    \"userinfo\": containerParam.userInfo});\r\n            urlArray = [containerTypeById, containerById,units];\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n               \r\n                const continerType = constructOptionList(response[0].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\r\n                const unitMap = constructOptionList(response[2].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n\r\n                let otherTestData = {\r\n                    containertype: continerType.get(\"OptionList\"),\r\n                    unit: unitMap.get(\"OptionList\")\r\n                }\r\n                let ContainerType = [];\r\n                let unit=[];\r\n\r\n                ContainerType.push({\r\n                    \"value\": response[1].data[\"ncontainertypecode\"],\r\n                    \"label\": response[1].data[\"scontainertype\"]\r\n                });\r\n                selectedRecord = response[1].data;\r\n\r\n                selectedRecord[\"ncontainertypecode\"] = ContainerType[0];\r\n               \r\n                if( response[1].data[\"nunitcode\"]!==-1){\r\n                    unit.push({\r\n                        \"value\": response[1].data[\"nunitcode\"],\r\n                        \"label\": response[1].data[\"sunitname\"]\r\n                    });\r\n                    selectedRecord = response[1].data;\r\n                    selectedRecord[\"nunitcode\"] = unit[0];\r\n                    selectedRecord[\"unitMandatory\"] = true;\r\n                } else {\r\n                    selectedRecord[\"nunitcode\"] = undefined;\r\n                }\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        otherTestData:otherTestData,\r\n                       selectedRecord: selectedRecord,\r\n                        isOpen: true,\r\n                        operation: containerParam.operation,\r\n                        screenName: \"IDS_CONTAINERTYPE\",\r\n                        openChildModal: true,\r\n                        ncontrolCode:containerParam.ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport const addContainerType = (operation, testparametercode, userInfo, ncontrolCode) => {\r\n    return function (dispatch) {\r\n        let urlArray = [];\r\n        const containerTypeById =rsapi.post(\"unit/getUnit\", {\r\n            \"userinfo\": userInfo});\r\n        \r\n          \r\n             const containerById=rsapi.post(\"testmaster/getAvailableContainerType\", {\r\n                \"TestMaster\": testparametercode,\r\n                 \"userinfo\": userInfo\r\n                 });\r\n             urlArray = [containerTypeById,containerById];\r\n\r\n\r\n        dispatch(initRequest(true));\r\n        Axios.all(urlArray)\r\n            .then(response => {\r\n                let selectedRecord = {};\r\n                const unitMap = constructOptionList(response[0].data || [], \"nunitcode\", \"sunitname\", false, false, true);\r\n \r\n                const continerType = constructOptionList(response[1].data || [], \"ncontainertypecode\", \"scontainertype\", false, false, true);\r\n\r\n                let otherTestData = {\r\n                    containertype: continerType.get(\"OptionList\"),\r\n                    unit: unitMap.get(\"OptionList\")\r\n\r\n                }\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        otherTestData:otherTestData,\r\n                       selectedRecord: selectedRecord,\r\n                       showSaveContinue: false,\r\n                        isOpen: true,\r\n                        operation: operation,\r\n                        screenName: \"IDS_CONTAINERTYPE\",\r\n                        openChildModal: true,\r\n                        loading: false,\r\n                        ncontrolCode\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({\r\n                        id: error.message\r\n                    }));\r\n                } else {\r\n                    toast.warn(intl.formatMessage({\r\n                        id: error.response.data\r\n                    }));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function ReportInfoTest(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n\r\n           let urlArray = [];                \r\n            const Submitter = rsapi.post(\"/testmaster/getEditReportInfoTest\", {\r\n                                              [primaryKeyName]: masterData.SelectedTest[primaryKeyName],\r\n                                              \"userinfo\": userInfo\r\n                            });\r\n                            urlArray = [Submitter];\r\n                        dispatch(initRequest(true));\r\n                        Axios.all(urlArray)\r\n                        .then(response => {\r\n                            let selectedRecord ={};                              \r\n                            selectedRecord[\"sconfirmstatement\"]  = response[0].data.ReportInfoTest.sconfirmstatement ;\r\n                            selectedRecord[\"sdecisionrule\"]  = response[0].data.ReportInfoTest.sdecisionrule;\r\n                            selectedRecord[\"ssopdescription\"]  = response[0].data.ReportInfoTest.ssopdescription;\r\n                            selectedRecord[\"stestcondition\"]  = response[0].data.ReportInfoTest.stestcondition;  \r\n                            selectedRecord[\"sdeviationcomments\"]  = response[0].data.ReportInfoTest.sdeviationcomments;                      \r\n                            selectedRecord[\"smethodstandard\"]  = response[0].data.ReportInfoTest.smethodstandard;  \r\n                            selectedRecord[\"sreference\"]  = response[0].data.ReportInfoTest.sreference;               \r\n    \r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    isOpen: true,\r\n                                    masterData:masterData,\r\n                                    selectedRecord,\r\n                                    operation: operation,\r\n                                    screenName: screenName,\r\n                                    openModal: true,\r\n                                    ncontrolCode: ncontrolCode,\r\n                                    loading: false,\r\n                           \r\n                                }\r\n                            });\r\n                        })\r\n                        .catch(error => {\r\n                            dispatch({\r\n                                type: DEFAULT_RETURN,\r\n                                payload: {\r\n                                    loading: false\r\n                                }\r\n                            })\r\n                            if (error.response.status === 500) {\r\n                                toast.error(intl.formatMessage({ id: error.message  }));\r\n                            } else {\r\n                            toast.warn(intl.formatMessage({id: error.response.data }));\r\n                            }\r\n                        })              \r\n        \r\n    }\r\n\r\n}\r\n\r\nexport function getUnitConversion(nunitcode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"testmaster/getDestinationUnit\", {\"nunitcode\": nunitcode,\"userinfo\": userInfo})\r\n            .then(response => {\r\n                let DestinationUnit = [];   \r\n                selectedRecord[\"ndestinationunitcode\"]=\"\";                  \r\n\r\n                const DestinationUnitMap = constructOptionList(response.data.DestinationUnit || [], \"ndestinationunitcode\",\"sunitname1\", undefined, undefined, false);\r\n                DestinationUnit = DestinationUnitMap.get(\"OptionList\");\r\n\t\t\t\t\t//ALPD-3521\r\n                if(DestinationUnit.length===0){\r\n                    selectedRecord[\"noperatorcode\"]=-1;\r\n                    selectedRecord[\"nconversionfactor\"]=\"\";\r\n\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        DestinationUnit,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getConversionOperator(nunitcode,ndestinationunitcode,masterData, userInfo, selectedRecord) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        return rsapi.post(\"testmaster/getConversionOperator\", {\"nsourceunitcode\":nunitcode,\"ndestinationunitcode\": ndestinationunitcode,\"userinfo\": userInfo})\r\n            .then(response => {      \r\n                \r\n                //ALPD-3521\r\n                selectedRecord[\"noperatorcode\"]=response.data.UnitConversion[0].noperatorcode;\r\n                selectedRecord[\"soperator\"] = response.data.UnitConversion[0].soperator;           \r\n                selectedRecord[\"nconversionfactor\"] = response.data.UnitConversion[0].nconversionfactor;\r\n                \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {                       \r\n                        selectedRecord,\r\n                        loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\nexport const addClinicalSpecification = (operation, paramdata, userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n            dispatch(initRequest(true));\r\n            const urlArray = [\r\n                rsapi.post(\"patient/getGender\", {\r\n                    \"userinfo\": userInfo\r\n                }),\r\n                rsapi.post(\"grade/getGrade\", {\r\n                    userinfo: userInfo\r\n                }),\r\n            ];\r\n            if (operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"testmaster/getTestParameterClinicalSpecById\", {\r\n                    ...paramdata,\r\n                    \"userinfo\": userInfo\r\n                        }));\r\n            }\r\n            Axios.all(urlArray)\r\n            .then(response => {\r\n                let grade ={};\r\n                let gender={};\r\n                let selectedRecord = {};\r\n                const gradeMap = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, true);\r\n                grade = gradeMap.get(\"OptionList\");\r\n                const genderMap = constructOptionList(response[0].data.genderList || [], \"ngendercode\", \"sgendername\", false, false, true);\r\n                 gender = genderMap.get(\"OptionList\");                       \r\n                if (operation === \"update\") {\r\n                    selectedRecord = {\r\n                        ...response[2].data\r\n                    }\r\n                    selectedRecord[\"ngradecode\"] = getComboLabelValue(response[2].data, response[1].data, \r\n                        \"ngradecode\", \"sgradename\");   \r\n                    selectedRecord[\"ngendercode\"] = getComboLabelValue(response[2].data, response[0].data.genderList, \r\n                            \"ngendercode\", \"sgendername\");  \r\n                            selectedRecord[\"nhigha\"]= selectedRecord[\"shigha\"]==='null'?'':selectedRecord[\"shigha\"]\r\n                            selectedRecord[\"nhighb\"]= selectedRecord[\"shighb\"]==='null'?'':selectedRecord[\"shighb\"]\r\n                           selectedRecord[\"nlowa\"]= selectedRecord[\"slowa\"]==='null'?'':selectedRecord[\"slowa\"]\r\n                           selectedRecord[\"nlowb\"]=selectedRecord[\"slowb\"]==='null'?'':selectedRecord[\"slowb\"]\r\n                           selectedRecord[\"sminlod\"]= selectedRecord[\"sminlod\"] ==='null'?'':selectedRecord[\"sminlod\"]\r\n                           selectedRecord[\"smaxlod\"]= selectedRecord[\"smaxlod\"] ==='null'?'':selectedRecord[\"smaxlod\"]\r\n                           selectedRecord[\"sminloq\"]= selectedRecord[\"sminloq\"] ==='null'?'':selectedRecord[\"sminloq\"]\r\n                           selectedRecord[\"smaxloq\"]= selectedRecord[\"smaxloq\"] ==='null'?'':selectedRecord[\"smaxloq\"]\r\n                           selectedRecord[\"sdisregard\"]= selectedRecord[\"sdisregard\"] ==='null'?'':selectedRecord[\"sdisregard\"]\r\n                           selectedRecord[\"sresultvalue\"]= selectedRecord[\"sresultvalue\"]==='null'?'':selectedRecord[\"sresultvalue\"] \r\n                } else {\r\n                    selectedRecord = {\r\n                        ntestparametercode: paramdata[\"ntestparametercode\"]\r\n                    }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: operation,\r\n                        screenName: \"IDS_CLINICALSPEC\",\r\n                        selectedRecord,\r\n                        ncontrolCode,\r\n                        loading: false, parameterData: {\r\n                            gender,grade,\r\n                            needCodedResult: false\r\n                        },\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const addPredefinedModal = ( userInfo, ncontrolCode) => {\r\n    return (dispatch) => {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"testmaster/getPreDefinedFormula\", {\r\n                userinfo: userInfo,\r\n            })\r\n            .then(response => {\r\n                const responseData = response.data;\r\n                const preDefinedFormulaMap = constructOptionList(responseData[\"PreDefinedFormula\"], \"npredefinedformulacode\", \"sdescription\", false, false, false);\r\n            \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        openChildModal: true,\r\n                        showSaveContinue: false,\r\n                        operation: \"create\",\r\n                        screenName: \"IDS_PREDEFINEDFORMULA\",\r\n                        preDefinedFormula: preDefinedFormulaMap.get(\"OptionList\"),\r\n                        ncontrolCode,\r\n                        loading: false\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                });\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}