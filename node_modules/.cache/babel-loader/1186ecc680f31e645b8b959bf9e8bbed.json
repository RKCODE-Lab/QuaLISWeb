{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { constructOptionList, sortData } from '../components/CommonScript'; //getComboLabelValue,, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { ColumnType, queryTypeFilter, transactionStatus } from '../components/Enumeration';\nimport { format } from 'date-fns';\nexport function getTestGroupRulesEngineAdd(userInfo, testgrouprulesengine, inputParam, masterData) {\n  let testcomments = [];\n  let reportcomments = [];\n  let predefcomments = [];\n  let sampletestcommentsList = [];\n  let selectedRecord = {};\n  let addGroupList = [];\n  return function (dispatch) {\n    if (masterData.SelectedSpecification && masterData.SelectedSpecification['napprovalstatus'] === transactionStatus.APPROVED) {\n      dispatch(initRequest(true));\n      let url = [];\n\n      if (testgrouprulesengine) {\n        url.push(rsapi.post(\"/testgrouprulesengine/getdatabasetables\", {\n          userinfo: userInfo\n        }));\n      } else {\n        url.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\n          \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\n          \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/grade/getGrade\", {\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/site/getSite\", {\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\n          userinfo: userInfo\n        }));\n        url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\n          userinfo: userInfo\n        }));\n      }\n\n      Axios.all(url).then(response => {\n        const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\n        const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\n        const viewListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\n        const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\n        const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\n        const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\n        let commentsubtypelst = response[5].data['CommentSubType'];\n        let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6);\n        const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\n        const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\n        let commentlist = response[3].data;\n        let x = commentlist.filter(x => x.ncommentsubtypecode === 1);\n        let y = commentlist.filter(x => x.ncommentsubtypecode === 4);\n        let z = commentlist.filter(x => x.ncommentsubtypecode === 3);\n        testcomments = constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        reportcomments = constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        predefcomments = constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false).get(\"OptionList\");\n        masterData['testParameter'] = {};\n        masterData['testParameterComments'] = {};\n        masterData['testParameterreportComments'] = {};\n        masterData['testComments'] = {};\n        masterData['reportComments'] = {};\n        masterData['testSite'] = {};\n        masterData['testRepeat'] = [];\n        masterData['testenforceTests'] = [];\n        selectedRecord[\"groupList\"] = [];\n        selectedRecord[\"groupList\"][0] = [];\n        selectedRecord[\"groupList\"][0][\"button_and\"] = true;\n        selectedRecord[\"groupList\"][0][0] = {};\n        addGroupList[0] = 1;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false,\n            operation: 'create',\n            databaseviewList: viewListMap.get(\"OptionList\"),\n            testcomments,\n            reportcomments,\n            openPortalModal: true,\n            screenName: \"IDS_ADDRULESENGINE\",\n            testgrouprulesengine,\n            ...inputParam,\n            siteObject: {},\n            testCommentObject: {},\n            reportCommentObject: {},\n            testInitiateTests: [],\n            testRepeatTests: [],\n            testenforceTests: [],\n            testCommentsTests: [],\n            reportCommentsTests: [],\n            reportCommentsTestsTab: [],\n            activeTabIndex: 0,\n            masterData: { ...masterData,\n              testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              rulesOption: viewListMap.get(\"OptionList\"),\n              DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\n              GradeList: Grade.get(\"OptionList\"),\n              siteList: site.get(\"OptionList\"),\n              resultTypeList: resultType.get(\"OptionList\"),\n              testCommentsTestsTab: [],\n              testInitiateSiteTab: [],\n              PredefinedParameterOptions: [],\n              testRepeatTestsTab: [],\n              testenforceTestsTab: []\n            },\n            testInitiateTestOptions: viewListMap.get(\"OptionList\"),\n            testCommentsTestOptions: viewListMap.get(\"OptionList\"),\n            reportCommentsTestOptions: viewListMap.get(\"OptionList\"),\n            CommentType: CommentType.get(\"OptionList\"),\n            CommentSubType: CommentSubType.get(\"OptionList\"),\n            predefcomments,\n            openModalPopup: false,\n            openmodalsavePopup: false,\n            addGroupList,\n            selectedRecord,\n            viewColumnListByRule: viewListMap.get(\"OptionList\")\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_RULESCANBEADDEDONLYFORAPPROVEDSPEC\"\n      }));\n    }\n  };\n}\nexport function getSpecificationTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getSpecificationTestGroupRulesEngine\", {\n      'userinfo': userInfo,\n      \"nproductcatcode\": inputParam.nproductcatcode.item.nproductcatcode\n    }).then(response => {\n      const TestGroupSpecification = constructOptionList(response.data.TestGroupSpecification || [], \"nallottedspeccode\", \"sspecname\", undefined, undefined, undefined);\n      let TestGroupSpecificationList = TestGroupSpecification.get(\"OptionList\");\n\n      if (ismodalcombochange) {\n        selectedRecord = { ...selectedRecord,\n          ...inputParam,\n          'nallottedspeccode': TestGroupSpecificationList[0]\n        };\n        masterData = { ...masterData,\n          ...response.data\n        };\n      } else {\n        let selectedcombo = { ...inputParam,\n          'nallottedspeccode': TestGroupSpecificationList[0]\n        };\n        masterData = { ...masterData,\n          ...response.data,\n          selectedcombo\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getComponentTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getComponentTestGroupRulesEngine\", {\n      'userinfo': userInfo,\n      \"nallottedspeccode\": inputParam.nallottedspeccode.item.nallottedspeccode\n    }).then(response => {\n      const Component = constructOptionList(response.data.Component || [], \"ncomponentcode\", \"scomponentname\", undefined, undefined, undefined);\n      let ComponentList = Component.get(\"OptionList\");\n\n      if (ismodalcombochange) {\n        selectedRecord = { ...selectedRecord,\n          ...inputParam,\n          'ncomponentcode': ComponentList[0]\n        };\n        masterData = { ...masterData,\n          ...response.data\n        };\n      } else {\n        let selectedcombo = { ...inputParam,\n          'ncomponentcode': ComponentList[0]\n        };\n        masterData = { ...masterData,\n          ...response.data,\n          selectedcombo\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSelectedTestGroupRulesEngine(inputParam, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getSelectedTestGroupRulesEngine\", {\n      'userinfo': userInfo,\n      \"ntestgrouprulesenginecode\": parseInt(inputParam.ntestgrouprulesenginecode) //, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\n      ,\n      \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode\n    }).then(response => {\n      masterData = { ...masterData,\n        SelectedRulesEngine: response.data[\"SelectedRulesEngine\"]\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTestGroupRulesEngine(nproductcatcode, nallottedspeccode, ncomponentcode, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngine\", {\n      'userinfo': userInfo,\n      \"nproductcatcode\": nproductcatcode,\n      \"nallottedspeccode\": nallottedspeccode,\n      \"ncomponentcode\": ncomponentcode\n    }).then(response => {\n      masterData = { ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getEditTestGroupRulesEngine(operation, masterData //,\n// ncontrolCode\n, userInfo) {\n  let testcomments = [];\n  let reportcomments = [];\n  let predefcomments = [];\n  return function (dispatch) {\n    if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\n      let urlArray = [];\n      let selectedRecord = {};\n      urlArray.push(rsapi.post(\"testgrouprulesengine/getEditTestGroupRulesEngine\", {\n        'ntestgrouprulesenginecode': masterData.SelectedRulesEngine['ntestgrouprulesenginecode'],\n        'masterData': masterData,\n        \"userinfo\": userInfo\n      }));\n      urlArray.push(rsapi.post(\"/grade/getGrade\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/site/getSite\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\n        \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\n        \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/productcategory/getProductCategory\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\n        userinfo: userInfo\n      }));\n      urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\n        userinfo: userInfo\n      }));\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        masterData['testParameter'] = {};\n        masterData['testParameterComments'] = {};\n        masterData['testParameterreportComments'] = {};\n        let responsedata = response[0].data;\n        let srulename = responsedata['RulesEngineEdit'][0]['srulename'];\n        let groupList = responsedata['RulesEngineEdit'][0]['jsondata'];\n        let outcomeList = responsedata['RulesEngineEdit'][0]['jsonuidata'];\n        selectedRecord[\"groupList\"] = [];\n        groupList.map((ruleslist, index) => {\n          if (ruleslist.hasOwnProperty('button_or')) {\n            selectedRecord[\"groupList\"][index] = ruleslist[\"button_or\"];\n            selectedRecord[\"groupList\"][index][\"button_or\"] = true;\n          }\n\n          if (ruleslist.hasOwnProperty('button_and')) {\n            selectedRecord[\"groupList\"][index] = ruleslist[\"button_and\"];\n            selectedRecord[\"groupList\"][index][\"button_and\"] = true;\n          }\n\n          if (ruleslist.hasOwnProperty('button_not_button_and')) {\n            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_and\"];\n            selectedRecord[\"groupList\"][index][\"button_and\"] = true;\n            selectedRecord[\"groupList\"][index][\"button_not\"] = true;\n          }\n\n          if (ruleslist.hasOwnProperty('button_not_button_or')) {\n            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_or\"];\n            selectedRecord[\"groupList\"][index][\"button_or\"] = true;\n            selectedRecord[\"groupList\"][index][\"button_not\"] = true;\n          }\n        }); // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\n        //     selectedRecord[\"groupList\"]['button_not'] = true\n        // }\n        // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\n        //     selectedRecord[\"groupList\"]['button_not'] = true\n        // }\n\n        if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')) {\n          selectedRecord[\"groupList\"]['button_or'] = true;\n        } else {\n          selectedRecord[\"groupList\"]['button_and'] = true;\n        }\n\n        selectedRecord['srulename'] = srulename;\n        selectedRecord['srulenamecopy'] = srulename; // selectedRecord[\"groupList\"][0][\"button_and\"] = true\n\n        let addGroupList = [];\n        addGroupList = responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList'];\n        const DiagnosticCase = constructOptionList(response[4].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\n        const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\n        const viewListMap = constructOptionList(response[4].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\n        const resultType = constructOptionList(response[4].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\n        const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\n        const CommentType = constructOptionList(response[6].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\n        const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\n        let commentsubtypelst = response[7].data['CommentSubType'];\n        let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6);\n        const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\n        let commentlist = response[3].data;\n        let x = commentlist.filter(x => x.ncommentsubtypecode === 1);\n        let y = commentlist.filter(x => x.ncommentsubtypecode === 4);\n        let z = commentlist.filter(x => x.ncommentsubtypecode === 3);\n        testcomments = constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        reportcomments = constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false).get(\"OptionList\");\n        predefcomments = constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false).get(\"OptionList\");\n        masterData['testParameter'] = outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'];\n        masterData['testRepeat'] = outcomeList['testRepeatTests'] && outcomeList['testRepeatTests'];\n        masterData['testenforceTests'] = outcomeList['testenforceTests'] && outcomeList['testenforceTests'];\n        masterData['testParameterComments'] = outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'];\n        masterData['testParameterreportComments'] = outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'];\n        masterData[\"testComments\"] = outcomeList['testCommentObject'] && outcomeList['testCommentObject'];\n        masterData[\"reportComments\"] = outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'];\n        masterData[\"testSite\"] = outcomeList['siteObject'] && outcomeList['siteObject'];\n        selectedRecord[\"nproductcatcode\"] = outcomeList['nproductcatcode'] && outcomeList['nproductcatcode'];\n        selectedRecord[\"nallottedspeccode\"] = outcomeList['nallottedspeccode'] && outcomeList['nallottedspeccode'];\n        selectedRecord[\"ncomponentcode\"] = outcomeList['ncomponentcode'] && outcomeList['ncomponentcode'];\n        selectedRecord[\"groupListJoins\"] = outcomeList['groupListJoins'] && outcomeList['groupListJoins'];\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation: operation,\n            screenName: \"IDS_EDITRULESENGINE\",\n            selectedRecord,\n            openPortalModal: true,\n            // ncontrolCode: ncontrolCode,\n            loading: false,\n            addGroupList,\n            masterData: { ...masterData,\n              testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\n              rulesOption: viewListMap.get(\"OptionList\"),\n              DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\n              GradeList: Grade.get(\"OptionList\"),\n              siteList: site.get(\"OptionList\"),\n              resultTypeList: resultType.get(\"OptionList\"),\n              testCommentsTestsTab: outcomeList['testCommentsTestsTab'],\n              testRepeatTestsTab: outcomeList['testRepeatTestsTab'],\n              testenforceTestsTab: outcomeList['testenforceTestsTab'],\n              PredefinedParameterOptions: outcomeList['PredefinedParameterOptions'],\n              testInitiateSiteTab: outcomeList['testInitiateSiteTab'],\n              reportCommentsTestsTab: outcomeList['reportCommentsTestsTab']\n            },\n            viewColumnListByRule: viewListMap.get(\"OptionList\"),\n            testcomments,\n            reportcomments,\n            testInitiateTests: outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'],\n            testCommentsTests: outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'],\n            testRepeatTests: outcomeList['testRepeatTests'] && outcomeList['testRepeatTests'],\n            testenforceTests: outcomeList['testenforceTests'] && outcomeList['testenforceTests'],\n            reportCommentsTests: outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'],\n            siteObject: outcomeList['siteObject'] && outcomeList['siteObject'],\n            testCommentObject: outcomeList['testCommentObject'] && outcomeList['testCommentObject'],\n            reportCommentObject: outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'],\n            CommentType: CommentType.get(\"OptionList\"),\n            CommentSubType: CommentSubType.get(\"OptionList\"),\n            predefcomments,\n            openModalPopup: false,\n            openmodalsavePopup: false,\n            activeTabIndex: 0,\n            action: \"update\"\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_SELECTRULETOEDIT\"\n      }));\n    }\n  };\n}\nexport function getParameterRulesEngine(selectedRecord, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\", {\n      'userinfo': userInfo,\n      \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value\n    }).then(response => {\n      const testGroupTestParameterRulesEngine = constructOptionList(response.data.TestGroupTestParameterRulesEngine || [], \"ntestgrouptestparametercode\", \"sparametersynonym\", undefined, undefined, undefined);\n      let testGroupTestParameterRulesEngineList = testGroupTestParameterRulesEngine.get(\"OptionList\");\n      masterData['testGroupTestParameterRulesEngine'] = testGroupTestParameterRulesEngineList;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getParameterResultValue(combodata, groupIndex, index, PredefinedParameterOptions, selectedRecord, masterData, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/testgrouprulesengine/getParameterResultValue\", {\n      'userinfo': userInfo,\n      \"nparametertypecode\": combodata['stestname']['item']['nparametertypecode'],\n      'ntestgrouptestparametercode': combodata['stestname']['item']['ntestgrouptestparametercode']\n    }).then(response => {\n      const PredefinedParameterRulesEngine = constructOptionList(response.data.PredefinedParameterRulesEngine || [], \"ntestgrouptestpredefcode\", \"spredefinedname\", undefined, undefined, undefined);\n\n      if (PredefinedParameterOptions[groupIndex] === undefined) {\n        PredefinedParameterOptions[groupIndex] = [];\n      }\n\n      if (PredefinedParameterOptions[groupIndex][index] === undefined) {\n        PredefinedParameterOptions[groupIndex][index] = [];\n      }\n\n      PredefinedParameterOptions[groupIndex][index] = PredefinedParameterRulesEngine.get(\"OptionList\");\n      masterData['PredefinedParameterOptions'] = PredefinedParameterOptions;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/TestGroupRuleEngineAction.js"],"names":["rsapi","DEFAULT_RETURN","constructOptionList","sortData","toast","Axios","initRequest","intl","ColumnType","queryTypeFilter","transactionStatus","format","getTestGroupRulesEngineAdd","userInfo","testgrouprulesengine","inputParam","masterData","testcomments","reportcomments","predefcomments","sampletestcommentsList","selectedRecord","addGroupList","dispatch","SelectedSpecification","APPROVED","url","push","post","userinfo","SelectedTest","ntestgrouptestcode","SelectedComponent","nspecsampletypecode","all","then","response","DiagnosticCase","data","Grade","viewListMap","undefined","resultType","site","CommentType","commentsubtypelst","w","filter","x","ncommentsubtypecode","CommentSubType","testInitiateTestCombo","commentlist","y","z","get","type","payload","loading","operation","databaseviewList","openPortalModal","screenName","siteObject","testCommentObject","reportCommentObject","testInitiateTests","testRepeatTests","testenforceTests","testCommentsTests","reportCommentsTests","reportCommentsTestsTab","activeTabIndex","testCommentsTestCombo","testRepeatTestCombo","testenforceTestCombo","rulesOption","DiagnosticCaseList","GradeList","siteList","resultTypeList","testCommentsTestsTab","testInitiateSiteTab","PredefinedParameterOptions","testRepeatTestsTab","testenforceTestsTab","testInitiateTestOptions","testCommentsTestOptions","reportCommentsTestOptions","openModalPopup","openmodalsavePopup","viewColumnListByRule","catch","error","status","message","warn","formatMessage","id","getSpecificationTestGroupRulesEngine","ismodalcombochange","nproductcatcode","item","TestGroupSpecification","TestGroupSpecificationList","selectedcombo","getComponentTestGroupRulesEngine","nallottedspeccode","Component","ComponentList","getSelectedTestGroupRulesEngine","parseInt","ntestgrouprulesenginecode","SelectedRulesEngine","getTestGroupRulesEngine","ncomponentcode","getEditTestGroupRulesEngine","length","urlArray","responsedata","srulename","groupList","outcomeList","map","ruleslist","index","hasOwnProperty","action","getParameterRulesEngine","value","testGroupTestParameterRulesEngine","TestGroupTestParameterRulesEngine","testGroupTestParameterRulesEngineList","getParameterResultValue","combodata","groupIndex","PredefinedParameterRulesEngine"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport {\r\n    constructOptionList,\r\n    sortData\r\n} from '../components/CommonScript' //getComboLabelValue,, searchData\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport {\r\n    initRequest\r\n} from './LoginAction';\r\nimport {\r\n    intl\r\n} from '../components/App';\r\nimport {\r\n    ColumnType,\r\n    queryTypeFilter,\r\n    transactionStatus\r\n} from '../components/Enumeration';\r\nimport { format } from 'date-fns';\r\n\r\nexport function getTestGroupRulesEngineAdd(userInfo, testgrouprulesengine, inputParam, masterData) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    let sampletestcommentsList = []\r\n    let selectedRecord = {}\r\n    let addGroupList = []\r\n    return function (dispatch) {\r\n        if (masterData.SelectedSpecification&&masterData.SelectedSpecification['napprovalstatus'] === transactionStatus.APPROVED) { \r\n        dispatch(initRequest(true)); \r\n            let url = [];\r\n            if (testgrouprulesengine) {\r\n                url.push(rsapi.post(\"/testgrouprulesengine/getdatabasetables\", {\r\n                    userinfo: userInfo\r\n                }));\r\n\r\n            } else {\r\n                url.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\r\n                    \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n                    \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/grade/getGrade\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/site/getSite\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                    userinfo: userInfo\r\n                }));\r\n                url.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                    userinfo: userInfo\r\n                }));\r\n            }\r\n            Axios.all(url)\r\n                .then(response => {\r\n                    const DiagnosticCase = constructOptionList(response[0].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[0].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[0].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[4].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    let commentsubtypelst = response[5].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                    const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\r\n\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    masterData['testComments'] = {}\r\n                    masterData['reportComments'] = {}\r\n                    masterData['testSite'] = {}\r\n                    masterData['testRepeat'] = []\r\n                    masterData['testenforceTests'] = []\r\n\r\n                    selectedRecord[\"groupList\"] = [];\r\n                    selectedRecord[\"groupList\"][0] = [];\r\n                    selectedRecord[\"groupList\"][0][\"button_and\"] = true;\r\n                    selectedRecord[\"groupList\"][0][0] = {};\r\n                    addGroupList[0] = 1;\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false,\r\n                            operation: 'create',\r\n                            databaseviewList: viewListMap.get(\"OptionList\"),\r\n                            testcomments,\r\n                            reportcomments,\r\n\r\n                            openPortalModal: true,\r\n                            screenName: \"IDS_ADDRULESENGINE\",\r\n                            testgrouprulesengine,\r\n                            ...inputParam,\r\n\r\n                            siteObject: {},\r\n                            testCommentObject: {},\r\n                            reportCommentObject: {},\r\n                            testInitiateTests: [],\r\n                            testRepeatTests: [],\r\n                            testenforceTests: [],\r\n                            testCommentsTests: [],\r\n                            reportCommentsTests: []\r\n                            ,\r\n                            reportCommentsTestsTab: [],\r\n                            \r\n                            activeTabIndex: 0,\r\n                            masterData: {\r\n                                ...masterData, testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                rulesOption: viewListMap.get(\"OptionList\"),\r\n                                DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                                GradeList: Grade.get(\"OptionList\"),\r\n                                siteList: site.get(\"OptionList\"),\r\n                                resultTypeList: resultType.get(\"OptionList\"),\r\n                                testCommentsTestsTab: [],\r\n                                testInitiateSiteTab: [],\r\n                                PredefinedParameterOptions:[],\r\n                                testRepeatTestsTab: [],\r\n                                testenforceTestsTab: [],\r\n                            },\r\n\r\n                            testInitiateTestOptions: viewListMap.get(\"OptionList\"),\r\n                            testCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            reportCommentsTestOptions: viewListMap.get(\"OptionList\"),\r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            addGroupList,\r\n                            selectedRecord,\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\")\r\n                        }\r\n                    });\r\n                }\r\n                )\r\n                .catch(error => {\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            loading: false\r\n                        }\r\n                    })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_RULESCANBEADDEDONLYFORAPPROVEDSPEC\" })); \r\n        }\r\n    }\r\n}\r\nexport function getSpecificationTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSpecificationTestGroupRulesEngine\",\r\n            { 'userinfo': userInfo, \"nproductcatcode\": inputParam.nproductcatcode.item.nproductcatcode })\r\n            .then(response => {\r\n                const TestGroupSpecification = constructOptionList(response.data.TestGroupSpecification || [], \"nallottedspeccode\",\r\n                    \"sspecname\", undefined, undefined, undefined);\r\n                let TestGroupSpecificationList = TestGroupSpecification.get(\"OptionList\");\r\n                if (ismodalcombochange) {\r\n                    selectedRecord = { ...selectedRecord, ...inputParam, 'nallottedspeccode': TestGroupSpecificationList[0] }\r\n                    masterData = { ...masterData, ...response.data }\r\n                }\r\n                else {\r\n                    let selectedcombo = { ...inputParam, 'nallottedspeccode': TestGroupSpecificationList[0] }\r\n                    masterData = { ...masterData, ...response.data, selectedcombo }\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getComponentTestGroupRulesEngine(inputParam, selectedRecord, ismodalcombochange, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getComponentTestGroupRulesEngine\",\r\n            { 'userinfo': userInfo, \"nallottedspeccode\": inputParam.nallottedspeccode.item.nallottedspeccode })\r\n            .then(response => {\r\n                const Component = constructOptionList(response.data.Component || [], \"ncomponentcode\",\r\n                    \"scomponentname\", undefined, undefined, undefined);\r\n                let ComponentList = Component.get(\"OptionList\");\r\n                if (ismodalcombochange) {\r\n                    selectedRecord = { ...selectedRecord, ...inputParam, 'ncomponentcode': ComponentList[0] }\r\n                    masterData = { ...masterData, ...response.data }\r\n                }\r\n                else {\r\n                    let selectedcombo = { ...inputParam, 'ncomponentcode': ComponentList[0] }\r\n                    masterData = { ...masterData, ...response.data, selectedcombo }\r\n                }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getSelectedTestGroupRulesEngine(inputParam, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getSelectedTestGroupRulesEngine\",\r\n            {\r\n                'userinfo': userInfo, \"ntestgrouprulesenginecode\": parseInt(inputParam.ntestgrouprulesenginecode)//, nproductcatcode: masterData.SelectedProductCategory.nproductcatcode\r\n                , \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...masterData, SelectedRulesEngine: response.data[\"SelectedRulesEngine\"]\r\n                };\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport function getTestGroupRulesEngine(nproductcatcode, nallottedspeccode, ncomponentcode, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngine\",\r\n            {\r\n                'userinfo': userInfo, \"nproductcatcode\": nproductcatcode\r\n                , \"nallottedspeccode\": nallottedspeccode\r\n                , \"ncomponentcode\": ncomponentcode\r\n            })\r\n            .then(response => {\r\n\r\n                masterData = {\r\n                    ...response.data\r\n                };\r\n                sortData(masterData);\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\nexport function getEditTestGroupRulesEngine(operation, masterData//,\r\n    // ncontrolCode\r\n    , userInfo) {\r\n    let testcomments = []\r\n    let reportcomments = []\r\n    let predefcomments = []\r\n    return function (dispatch) {\r\n        if (masterData['RulesEngine'] && masterData['RulesEngine'].length > 0) {\r\n            let urlArray = [];\r\n            let selectedRecord = {}\r\n            urlArray.push(rsapi.post(\"testgrouprulesengine/getEditTestGroupRulesEngine\", {\r\n                'ntestgrouprulesenginecode':\r\n                    masterData.SelectedRulesEngine['ntestgrouprulesenginecode'], 'masterData': masterData, \"userinfo\": userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/grade/getGrade\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/site/getSite\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/testgrouprulesengine/getTestGroupRulesEngineAdd\", {\r\n                \"ntestgrouptestcode\": masterData.SelectedTest.ntestgrouptestcode,\r\n                \"nspecsampletypecode\": masterData.SelectedComponent.nspecsampletypecode,\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/productcategory/getProductCategory\", {\r\n                userinfo: userInfo\r\n            }));\r\n\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            urlArray.push(rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                userinfo: userInfo\r\n            }));\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    masterData['testParameter'] = {}\r\n                    masterData['testParameterComments'] = {}\r\n                    masterData['testParameterreportComments'] = {}\r\n                    let responsedata = response[0].data\r\n                    let srulename = responsedata['RulesEngineEdit'][0]['srulename']\r\n                    let groupList = responsedata['RulesEngineEdit'][0]['jsondata']\r\n                    let outcomeList = responsedata['RulesEngineEdit'][0]['jsonuidata']\r\n                    selectedRecord[\"groupList\"] = []\r\n                    groupList.map((ruleslist, index) => {\r\n\r\n                        if (ruleslist.hasOwnProperty('button_or')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_or\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_and')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_and\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_not_button_and')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_and\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_and\"] = true\r\n                            selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                        }\r\n                        if (ruleslist.hasOwnProperty('button_not_button_or')) {\r\n                            selectedRecord[\"groupList\"][index] = ruleslist[\"button_not_button_or\"]\r\n                            selectedRecord[\"groupList\"][index][\"button_or\"] = true\r\n                            selectedRecord[\"groupList\"][index][\"button_not\"] = true\r\n                        }\r\n                    })\r\n                    // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_and')) {\r\n                    //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                    // }\r\n                    // if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_not_button_or')) {\r\n                    //     selectedRecord[\"groupList\"]['button_not'] = true\r\n                    // }\r\n                    if (responsedata['RulesEngineEdit'][0]['jsondata'].hasOwnProperty('button_or')) {\r\n                        selectedRecord[\"groupList\"]['button_or'] = true\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"groupList\"]['button_and'] = true\r\n                    }\r\n                    selectedRecord['srulename'] = srulename\r\n                    selectedRecord['srulenamecopy'] = srulename\r\n                    // selectedRecord[\"groupList\"][0][\"button_and\"] = true\r\n                    let addGroupList = []\r\n                    addGroupList = responsedata['RulesEngineEdit'][0]['jsonuidata']['addGroupList']\r\n                    const DiagnosticCase = constructOptionList(response[4].data[\"DiagnosticCase\"] || [], \"ndiagnosticcasecode\", \"sdiagnosticcasename\", false, false, false);\r\n                    const Grade = constructOptionList(response[1].data || [], \"ngradecode\", \"sdisplaystatus\", false, false, false);\r\n                    const viewListMap = constructOptionList(response[4].data[\"TestParameter\"] || [], \"ntestgrouptestparametercode\", \"stestparametersynonym\", undefined, undefined, undefined);\r\n                    const resultType = constructOptionList(response[4].data[\"ResultType\"] || [], \"nresultypecode\", \"sdisplayname\", undefined, undefined, undefined);\r\n                    const site = constructOptionList(response[2].data || [], \"nsitecode\", \"ssitename\", false, false, false);\r\n                    const CommentType = constructOptionList(response[6].data['CommentType'] || [], \"ncommenttypecode\", \"scommenttype\", false, false, false);\r\n                    const testInitiateTestCombo = constructOptionList(masterData['TestGroupTest'] || [], \"ntestgrouptestcode\", \"stestsynonym\", false, false, false);\r\n\r\n\r\n                    let commentsubtypelst = response[7].data['CommentSubType']\r\n                    let w = commentsubtypelst.filter(x => x.ncommentsubtypecode === 3 || x.ncommentsubtypecode === 6)\r\n                    const CommentSubType = constructOptionList(w || [], \"ncommentsubtypecode\", \"scommentsubtype\", false, false, false);\r\n                    let commentlist = response[3].data\r\n                    let x = commentlist.filter(x => x.ncommentsubtypecode === 1)\r\n                    let y = commentlist.filter(x => x.ncommentsubtypecode === 4)\r\n                    let z = commentlist.filter(x => x.ncommentsubtypecode === 3)\r\n                    testcomments = (constructOptionList(x || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    reportcomments = (constructOptionList(y || [], \"nsampletestcommentscode\", \"sdescription\", false, false, false)).get(\"OptionList\");\r\n                    predefcomments = (constructOptionList(z || [], \"nsampletestcommentscode\", \"spredefinedname\", false, false, false)).get(\"OptionList\");\r\n\r\n                    masterData['testParameter'] = outcomeList['testInitiateTests'] && outcomeList['testInitiateTests']\r\n                    masterData['testRepeat'] = outcomeList['testRepeatTests'] && outcomeList['testRepeatTests']\r\n                    masterData['testenforceTests'] = outcomeList['testenforceTests'] && outcomeList['testenforceTests']\r\n\r\n                    masterData['testParameterComments'] = outcomeList['testCommentsTests'] && outcomeList['testCommentsTests']\r\n                    masterData['testParameterreportComments'] = outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests']\r\n\r\n                    masterData[\"testComments\"] = outcomeList['testCommentObject'] && outcomeList['testCommentObject']\r\n                    masterData[\"reportComments\"] = outcomeList['reportCommentObject'] && outcomeList['reportCommentObject']\r\n                    masterData[\"testSite\"] = outcomeList['siteObject'] && outcomeList['siteObject']\r\n                    selectedRecord[\"nproductcatcode\"] = outcomeList['nproductcatcode'] && outcomeList['nproductcatcode']\r\n                    selectedRecord[\"nallottedspeccode\"] = outcomeList['nallottedspeccode'] && outcomeList['nallottedspeccode']\r\n                    selectedRecord[\"ncomponentcode\"] = outcomeList['ncomponentcode'] && outcomeList['ncomponentcode']\r\n                    selectedRecord[\"groupListJoins\"] = outcomeList['groupListJoins'] && outcomeList['groupListJoins']\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            operation: operation, screenName: \"IDS_EDITRULESENGINE\", selectedRecord,\r\n                            openPortalModal: true,// ncontrolCode: ncontrolCode,\r\n                            loading: false, addGroupList,\r\n                            masterData: {\r\n                                ...masterData, testInitiateTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testCommentsTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testRepeatTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                testenforceTestCombo: testInitiateTestCombo.get(\"OptionList\"),\r\n                                rulesOption: viewListMap.get(\"OptionList\"),\r\n                                DiagnosticCaseList: DiagnosticCase.get(\"OptionList\"),\r\n                                GradeList: Grade.get(\"OptionList\"),\r\n                                siteList: site.get(\"OptionList\"),\r\n                                resultTypeList: resultType.get(\"OptionList\"),\r\n                                testCommentsTestsTab: outcomeList['testCommentsTestsTab'],\r\n                                testRepeatTestsTab: outcomeList['testRepeatTestsTab'], \r\n                                testenforceTestsTab: outcomeList['testenforceTestsTab'],  \r\n                                PredefinedParameterOptions: outcomeList['PredefinedParameterOptions'],\r\n                                testInitiateSiteTab: outcomeList['testInitiateSiteTab'],\r\n                                reportCommentsTestsTab: outcomeList['reportCommentsTestsTab'],\r\n                            },\r\n                            viewColumnListByRule: viewListMap.get(\"OptionList\"),\r\n\r\n                            testcomments,\r\n                            reportcomments,\r\n\r\n                            testInitiateTests: outcomeList['testInitiateTests'] && outcomeList['testInitiateTests'],\r\n                            testCommentsTests: outcomeList['testCommentsTests'] && outcomeList['testCommentsTests'],\r\n                            testRepeatTests: outcomeList['testRepeatTests'] && outcomeList['testRepeatTests'],\r\n                            testenforceTests: outcomeList['testenforceTests'] && outcomeList['testenforceTests'],\r\n                            reportCommentsTests: outcomeList['reportCommentsTests'] && outcomeList['reportCommentsTests'],\r\n                            siteObject: outcomeList['siteObject'] && outcomeList['siteObject'],\r\n                            testCommentObject: outcomeList['testCommentObject'] && outcomeList['testCommentObject'],\r\n                            reportCommentObject: outcomeList['reportCommentObject'] && outcomeList['reportCommentObject'],\r\n                          \r\n                            CommentType: CommentType.get(\"OptionList\"),\r\n                            CommentSubType: CommentSubType.get(\"OptionList\"),\r\n                            predefcomments,\r\n                            openModalPopup: false,\r\n                            openmodalsavePopup: false,\r\n                            activeTabIndex: 0,\r\n                            action: \"update\"\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n            toast.warn(intl.formatMessage({ id: \"IDS_SELECTRULETOEDIT\" }));\r\n        }\r\n    }\r\n}\r\nexport function getParameterRulesEngine(selectedRecord, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterRulesEngine\",\r\n            { 'userinfo': userInfo, \"ntestgrouptestcode\": selectedRecord['ntestgrouptestcode'].value, })\r\n            .then(response => {\r\n                const testGroupTestParameterRulesEngine = constructOptionList(response.data.TestGroupTestParameterRulesEngine || [], \"ntestgrouptestparametercode\",\r\n                    \"sparametersynonym\", undefined, undefined, undefined);\r\n                let testGroupTestParameterRulesEngineList = testGroupTestParameterRulesEngine.get(\"OptionList\");\r\n                masterData['testGroupTestParameterRulesEngine'] = testGroupTestParameterRulesEngineList\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport function getParameterResultValue(combodata,groupIndex,index,PredefinedParameterOptions, selectedRecord, masterData, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/testgrouprulesengine/getParameterResultValue\",\r\n            {\r\n                'userinfo': userInfo, \"nparametertypecode\": combodata['stestname']['item']['nparametertypecode'],\r\n                'ntestgrouptestparametercode': combodata['stestname']['item']['ntestgrouptestparametercode']\r\n            })\r\n            .then(response => {\r\n                const PredefinedParameterRulesEngine = constructOptionList(response.data.PredefinedParameterRulesEngine || [], \"ntestgrouptestpredefcode\",\r\n                    \"spredefinedname\", undefined, undefined, undefined);\r\n                    if(PredefinedParameterOptions[groupIndex]===undefined)\r\n                    {\r\n                        PredefinedParameterOptions[groupIndex]=[] \r\n                    }\r\n                    if(PredefinedParameterOptions[groupIndex][index]===undefined)\r\n                    {\r\n                        PredefinedParameterOptions[groupIndex][index]=[] \r\n                    }\r\n                 PredefinedParameterOptions[groupIndex][index] = PredefinedParameterRulesEngine.get(\"OptionList\"); \r\n                masterData['PredefinedParameterOptions'] = PredefinedParameterOptions\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        masterData,\r\n                        selectedRecord,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}