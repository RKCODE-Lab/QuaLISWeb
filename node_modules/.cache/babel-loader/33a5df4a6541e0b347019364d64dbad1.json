{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { getComboLabelValue, constructOptionList } from '../components/CommonScript';\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction'; //import { intl } from '../components/App';\n//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \n\nexport function getMethodComboService(methodParam) {\n  return function (dispatch) {\n    const methodCategoryService = rsapi.post(\"methodcategory/getMethodCategory\", {\n      userinfo: methodParam.userInfo\n    });\n    let urlArray = [];\n    let selectedId = null;\n\n    if (methodParam.operation === \"create\") {\n      urlArray = [methodCategoryService];\n    } else {\n      const url = methodParam.inputParam.classUrl + \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\"; //\"method/getActiveMethodById\"      \n\n      const methodById = rsapi.post(url, {\n        [methodParam.primaryKeyField]: methodParam.primaryKeyValue,\n        \"userinfo\": methodParam.userInfo\n      });\n      urlArray = [methodCategoryService, methodById];\n      selectedId = methodParam.primaryKeyValue;\n    }\n\n    dispatch(initRequest(true));\n    Axios.all(urlArray).then(response => {\n      let selectedRecord = {};\n      const methodCatMap = constructOptionList(response[0].data || [], \"nmethodcatcode\", \"smethodcatname\", undefined, undefined, true);\n      const methodCategoryList = methodCatMap.get(\"OptionList\");\n\n      if (methodParam.operation === \"update\") {\n        selectedRecord = response[1].data;\n        selectedRecord[\"nmethodcatcode\"] = getComboLabelValue(selectedRecord, response[0].data, \"nmethodcatcode\", \"smethodcatname\");\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          methodCategoryList,\n          //:response[0].data || [],                               \n          operation: methodParam.operation,\n          screenName: methodParam.screenName,\n          selectedRecord,\n          openModal: true,\n          ncontrolCode: methodParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/MethodAction.js"],"names":["rsapi","DEFAULT_RETURN","getComboLabelValue","constructOptionList","toast","Axios","initRequest","getMethodComboService","methodParam","dispatch","methodCategoryService","post","userinfo","userInfo","urlArray","selectedId","operation","url","inputParam","classUrl","methodUrl","methodById","primaryKeyField","primaryKeyValue","all","then","response","selectedRecord","methodCatMap","data","undefined","methodCategoryList","get","type","payload","screenName","openModal","ncontrolCode","loading","catch","error","status","message","warn"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport {getComboLabelValue, constructOptionList} from '../components/CommonScript'\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\n//import { intl } from '../components/App';\r\n\r\n//export function getMethodComboService (screenName, primaryKeyName, primaryKeyValue, operation, inputParam , userInfo, ncontrolCode) {            \r\nexport function getMethodComboService (methodParam) {            \r\n    return function (dispatch) {   \r\n    const methodCategoryService = rsapi.post(\"methodcategory/getMethodCategory\", \r\n                                    {userinfo:methodParam.userInfo});\r\n    let urlArray = [];\r\n    let selectedId = null;\r\n    if (methodParam.operation === \"create\"){\r\n        urlArray = [methodCategoryService];\r\n    }\r\n    else{           \r\n        const url = methodParam.inputParam.classUrl+ \"/getActive\" + methodParam.inputParam.methodUrl + \"ById\";   //\"method/getActiveMethodById\"      \r\n        const methodById =  rsapi.post(url, { [methodParam.primaryKeyField] :methodParam.primaryKeyValue, \"userinfo\": methodParam.userInfo} );\r\n        urlArray = [methodCategoryService, methodById];\r\n        selectedId = methodParam.primaryKeyValue;\r\n    }\r\n    dispatch(initRequest(true));\r\n    Axios.all(urlArray)\r\n        .then(response=>{                  \r\n            \r\n            let selectedRecord =  {};\r\n\r\n            const methodCatMap = constructOptionList(response[0].data || [], \"nmethodcatcode\",\r\n                                \"smethodcatname\", undefined, undefined, true);\r\n            const methodCategoryList = methodCatMap.get(\"OptionList\");\r\n            \r\n            if (methodParam.operation === \"update\"){\r\n                selectedRecord = response[1].data;\r\n                selectedRecord[\"nmethodcatcode\"] = getComboLabelValue(selectedRecord, response[0].data, \r\n                    \"nmethodcatcode\", \"smethodcatname\");                   \r\n            }\r\n           \r\n            dispatch({type: DEFAULT_RETURN, payload:{methodCategoryList,//:response[0].data || [],                               \r\n                        operation:methodParam.operation, screenName:methodParam.screenName, selectedRecord, \r\n                        openModal : true,\r\n                        ncontrolCode:methodParam.ncontrolCode,\r\n                        loading:false,selectedId\r\n                    }});\r\n        })\r\n        .catch(error=>{\r\n            dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n            if (error.response.status === 500){\r\n                toast.error(error.message);\r\n            } \r\n            else{               \r\n                toast.warn(error.response.data);\r\n            }  \r\n        })        \r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}