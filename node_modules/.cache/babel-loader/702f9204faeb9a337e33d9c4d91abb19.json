{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\Material\\\\MaterialInventory.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Row, Col, Nav, Card, Button, FormGroup, FormLabel } from 'react-bootstrap';\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { process } from '@progress/kendo-data-query';\nimport { toast } from 'react-toastify';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faSave, faCopy, faPlus, faSync, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport Esign from '../audittrail/Esign';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport ModalShow from '../../components/ModalShow.jsx';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport { showEsign, getControlMap, constructOptionList, sortData, getSameRecordFromTwoArrays, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, constructjsonOptionList, convertDateTimetoString, rearrangeDateFormat, comboChild } from '../../components/CommonScript';\nimport { callService, updateStore, crudMaster, filterColumnData, validateEsignCredential, viewAttachment } from '../../actions';\nimport { addSafetyInstructions, getAddMaterialPopup, getMaterialDetails, addMaterialProperty, getMaterialEdit, getMaterialByTypeCode, getAddMaterialSectionPopup, getMaterialSectionEdit, addMaterialFile } from '../../actions/MaterialAction';\nimport { initialcombochangeget, getMaterialInventoryByID, getAddMaterialInventoryPopup, getMaterialInventoryDetails, updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange } from '../../actions/MaterialInventoryAction';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\nimport { ContentPanel, AtSubCard, ReadOnlyText } from '../../components/App.styles';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport ReactTooltip from 'react-tooltip';\nimport MaterialFilter from './MaterialFilter';\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\nimport MaterialSectionTab from './MaterialSectionTab';\nimport { Affix } from 'rsuite';\nimport MaterialFileTab from './MaterialFileTab';\nimport AddMaterialOpenDate from './AddMaterialOpenDate';\nimport AddMaterialSafetyInstructionTab from './AddMaterialSafetyInstructionTab';\nimport AddMaterialFile from './AddMaterialFile';\nimport InvenotryTransaction from './InvenotryTransaction';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass MaterialInventory extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.expandChange = event => {\n      const isExpanded = event.dataItem.expanded === undefined ? event.dataItem.aggregates : event.dataItem.expanded;\n      event.dataItem.expanded = !isExpanded;\n      this.setState({ ...this.state\n      });\n    };\n\n    this.paneSizeChange = d => {\n      this.setState({\n        splitChangeWidthPercentage: d\n      });\n    };\n\n    this.quantityTransaction = param => {\n      if (this.props.Login.masterData['SelectedMaterialInventory'].jsondata.ntranscode !== transactionStatus.QUARANTINE) {\n        let ncontrolCode = this.props.Login.ncontrolCode;\n        let openModal = this.props.Login.openModal;\n        openModal = true;\n        ncontrolCode = param;\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            openModal\n          }\n        };\n        this.props.getQuantityTransactionPopup(this.props.Login.masterData, this.props.Login.userInfo, updateInfo, ncontrolCode);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTRELEASEDINVENTORY\"\n        }));\n      }\n    };\n\n    this.accordianDesign = () => {\n      let selectedmasterlistmain = [];\n      this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.jsondata !== undefined && selectedmasterlistmain.push(this.props.Login.masterData.SelectedMaterialInventory.jsondata);\n      let designaccordian = [];\n      this.props.Login.masterData.selectedTemplate[0].sjsonobjstr.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.inputtype === 'combo') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 557,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 558,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 559,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 559,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 560,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label]['label'] : \"\"))));\n              }\n            } else if (component.inputtype === 'date') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 572,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 573,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 574,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 574,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 575,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"))));\n              }\n            } else if (component.inputtype === 'toggle') {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 587,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 588,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 589,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 589,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 590,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] && selectedmasterlistmain[0][component.label] === transactionStatus.YES ? 'Yes' : 'No'))));\n              }\n            } else {\n              if (component.label !== undefined) {\n                designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                  md: 4,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 603,\n                    columnNumber: 50\n                  }\n                }, /*#__PURE__*/React.createElement(FormGroup, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 604,\n                    columnNumber: 33\n                  }\n                }, /*#__PURE__*/React.createElement(FormLabel, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 605,\n                    columnNumber: 37\n                  }\n                }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                  id: [component.label],\n                  message: [component.label],\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 605,\n                    columnNumber: 48\n                  }\n                })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 606,\n                    columnNumber: 37\n                  }\n                }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"))));\n              }\n            }\n\n            component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n              if (componentrow.inputtype === 'combo') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 618,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 619,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 620,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 620,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 621,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label]['label'] : \"-\"))));\n                }\n              } else if (componentrow.inputtype === 'date') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 633,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 634,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 635,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 635,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 636,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label] : \"-\"))));\n                }\n              } else if (componentrow.inputtype === 'toggle') {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 648,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 649,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 650,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 650,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 651,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] && selectedmasterlistmain[0][componentrow.label]['label'] === transactionStatus.YES ? 'Yes' : 'No'))));\n                }\n              } else {\n                if (componentrow.label !== undefined) {\n                  designaccordian.push( /*#__PURE__*/React.createElement(Col, {\n                    md: 4,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 664,\n                      columnNumber: 54\n                    }\n                  }, /*#__PURE__*/React.createElement(FormGroup, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 665,\n                      columnNumber: 37\n                    }\n                  }, /*#__PURE__*/React.createElement(FormLabel, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 666,\n                      columnNumber: 41\n                    }\n                  }, /*#__PURE__*/React.createElement(FormattedMessage, {\n                    id: [componentrow.label],\n                    message: [componentrow.label],\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 666,\n                      columnNumber: 52\n                    }\n                  })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 667,\n                      columnNumber: 41\n                    }\n                  }, selectedmasterlistmain.length > 0 && selectedmasterlistmain[0][componentrow.label] ? selectedmasterlistmain[0][componentrow.label] : \"-\"))));\n                }\n              }\n            });\n          });\n        });\n      });\n      return designaccordian;\n    };\n\n    this.onComboChangeopendate = (comboData, control) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[control] = comboData;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onComboChangedynamic = (comboData, control, customName) => {\n      let comboName = customName || control.label;\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (comboData) {\n        selectedRecord[comboName] = comboData;\n      } else {\n        selectedRecord[comboName] = [];\n      }\n\n      if (control.inputtype === 'date') {\n        const selectedRecord = this.state.selectedRecord || {};\n        selectedRecord[`tz${control.label}`] = comboData;\n        this.setState({\n          selectedRecord\n        });\n      } else if (control.parent && control.parent === true) {\n        let data = [];\n        const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr;\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'combo') {\n                data.push(component);\n              }\n\n              component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                if (componentrow.inputtype === 'combo') {\n                  data.push(componentrow);\n                }\n              });\n            });\n          });\n        });\n        const comboComponents = data;\n        let parentcolumnlist = [];\n        comboComponents.map(columnList => {\n          if (columnList.hasOwnProperty('child')) {\n            parentcolumnlist.push(columnList);\n          }\n        });\n        let childColumnList = {};\n        parentcolumnlist.map(columnList => {\n          const val = comboChild(data, columnList, childColumnList, true);\n          data = val.data;\n          childColumnList = val.childColumnList;\n        });\n        const inputParem = {\n          child: control.child,\n          source: control.source,\n          primarykeyField: control.valuemember,\n          value: comboData.value,\n          item: comboData.item\n        };\n        this.props.getMaterialChildValues(inputParem, this.props.Login.userInfo, selectedRecord, parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, Object.keys(childColumnList)[0], childColumnList[Object.keys(childColumnList)[0]][0].label, this.props.Login.masterData);\n      } else {\n        if (control.label === 'IDS_TRANSACTIONTYPE') {\n          this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData, this.props.Login.userInfo, selectedRecord, this.props.Login.templateData);\n        } else {\n          selectedRecord[control.label] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        }\n      }\n    };\n\n    this.viewMaterialInventoryDetails = () => {\n      let showModalPopup = this.props.Login.showModalPopup;\n      let ModaTitle = this.props.Login.ModaTitle;\n      showModalPopup = true;\n      ModaTitle = 'IDS_MATERIALINVENTORYDETAILS';\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showModalPopup,\n          ModaTitle\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModalShow = () => {\n      let showModalPopup = this.props.Login.showModalPopup;\n      showModalPopup = false;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showModalPopup\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const {\n        selectedRecord\n      } = this.state;\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          screenName\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onDropMaterialFile = (attachedFiles, fieldName, maxSize) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize);\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.deleteAttachment = (event, file, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file);\n      this.setState({\n        selectedRecord,\n        actionType: \"delete\"\n      });\n    };\n\n    this.onSaveMaterialFile = () => {\n      const selectedRecord = this.state.selectedRecord;\n      const acceptedFiles = selectedRecord.sfilename;\n      const nattachmenttypecode = selectedRecord.nattachmenttypecode;\n      let isFileEdited = transactionStatus.NO;\n      let testFileArray = [];\n      let testFile = {\n        nmaterialcode: this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode,\n        nmaterialfilecode: selectedRecord.nmaterialfilecode ? selectedRecord.nmaterialfilecode : 0,\n        nstatus: transactionStatus.ACTIVE,\n        nattachmenttypecode,\n        ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\n      };\n      const formData = new FormData();\n\n      if (nattachmenttypecode === attachmentType.FTP) {\n        if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\n          acceptedFiles.forEach((file, index) => {\n            const tempData = Object.assign({}, testFile);\n            const splittedFileName = file.name.split('.');\n            const fileExtension = file.name.split('.')[splittedFileName.length - 1];\n            const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\n            const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\n            const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0 && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\n            tempData[\"sfilename\"] = file.name;\n            tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n            tempData[\"nlinkcode\"] = transactionStatus.NA;\n            tempData[\"ssystemfilename\"] = uniquefilename;\n            tempData[\"nfilesize\"] = file.size;\n            formData.append(\"uploadedFile\" + index, file);\n            formData.append(\"uniquefilename\" + index, uniquefilename);\n            testFileArray.push(tempData);\n          });\n          formData.append(\"filecount\", acceptedFiles.length);\n          isFileEdited = transactionStatus.YES;\n        } else {\n          testFile[\"sfilename\"] = selectedRecord.sfilename;\n          testFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\n          testFile[\"nlinkcode\"] = transactionStatus.NA;\n          testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\n          testFile[\"nfilesize\"] = selectedRecord.nfilesize;\n          testFileArray.push(testFile);\n        }\n      } else {\n        testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\n        testFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\n        testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\n        testFile[\"ssystemfilename\"] = \"\";\n        testFile[\"nfilesize\"] = 0;\n        testFileArray.push(testFile);\n      }\n\n      formData.append(\"isFileEdited\", isFileEdited);\n      formData.append(\"materialfile\", JSON.stringify(testFileArray[0]));\n      let inputParam;\n\n      if (this.props.Login.operation === 'create') {\n        inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"create\",\n          classUrl: \"material\",\n          methodUrl: \"MaterialFile\"\n        };\n      } else {\n        inputParam = {\n          inputData: {\n            userinfo: this.props.Login.userInfo\n          },\n          formData: formData,\n          isFileupload: true,\n          operation: \"update\",\n          classUrl: \"material\",\n          methodUrl: \"MaterialFile\"\n        };\n      }\n\n      return inputParam;\n    };\n\n    this.dynamicmandatoryFeilds = () => {\n      let mandatoryFeildsMaterial = [];\n      this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate[0].sjsonobjstr.map(row => {\n        row.children.map(column => {\n          column.children.map(component => {\n            if (component.mandatory) {\n              if (component.inputtype === 'combo') {\n                mandatoryFeildsMaterial.push({\n                  \"idsName\": [component.label],\n                  \"dataField\": [component.label],\n                  \"mandatoryLabel\": \"IDS_SELECT\",\n                  \"controlType\": \"selectbox\"\n                });\n              } else {\n                mandatoryFeildsMaterial.push({\n                  \"idsName\": [component.label],\n                  \"dataField\": [component.label],\n                  \"mandatoryLabel\": \"IDS_ENTER\",\n                  \"controlType\": \"selectbox\"\n                });\n              }\n            }\n\n            component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n              if (componentrow.mandatory) {\n                if (componentrow.inputtype === 'combo') {\n                  mandatoryFeildsMaterial.push({\n                    \"idsName\": [componentrow.label],\n                    \"dataField\": [componentrow.label],\n                    \"mandatoryLabel\": \"IDS_SELECT\",\n                    \"controlType\": \"selectbox\"\n                  });\n                } else {\n                  mandatoryFeildsMaterial.push({\n                    \"idsName\": [componentrow.label],\n                    \"dataField\": [componentrow.label],\n                    \"mandatoryLabel\": \"IDS_ENTER\",\n                    \"controlType\": \"selectbox\"\n                  });\n                }\n              }\n            });\n          });\n        });\n      });\n      return mandatoryFeildsMaterial;\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      {\n        let dataresultarr = [];\n        this.props.Login.masterData[\"MaterialInventoryTrans\"] && this.props.Login.masterData[\"MaterialInventoryTrans\"].map(temp => {\n          dataresultarr.push(temp.jsondata);\n        });\n        tabMap.set(\"IDS_INVENTORYTRANSACTION\", /*#__PURE__*/React.createElement(InvenotryTransaction, {\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          dataResult: process(dataresultarr, this.props.screenName === undefined || this.props.screenName === \"IDS_QUANTITYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          }),\n          dataState: this.props.screenName === undefined || this.props.screenname === \"IDS_QUANTITYTRANSACTION\" ? this.state.sectionDataState : {\n            skip: 0,\n            take: 10\n          },\n          dataStateChange: event => this.setState({\n            sectionDataState: event.dataState\n          }),\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          getTestDetails: this.props.getTestDetails,\n          getAddMaterialSectionPopup: this.props.getAddMaterialSectionPopup,\n          quantityTransaction: this.quantityTransaction,\n          dataState: {\n            skip: 0,\n            take: 10\n          },\n          deleteRecord: this.deleteRecordmain,\n          fetchRecord: this.props.getMaterialSectionEdit,\n          selectedRecord: this.props.Login.selectedRecord,\n          screenName: \"IDS_QUANTITYTRANSACTION\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 939,\n            columnNumber: 17\n          }\n        }));\n        tabMap.set(\"IDS_MATERIALINVENTORYFILE\", /*#__PURE__*/React.createElement(MaterialFileTab, {\n          controlMap: this.state.controlMap,\n          userRoleControlRights: this.state.userRoleControlRights,\n          userInfo: this.props.Login.userInfo,\n          deleteRecord: this.deleteRecordmain,\n          MaterialFile: this.props.Login.masterData.MaterialFile || [],\n          addMaterialFile: this.props.addMaterialFile,\n          viewMaterialFile: this.viewMaterialFile,\n          screenName: \"IDS_MATERIALFILE\",\n          settings: this.props.settings,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 962,\n            columnNumber: 17\n          }\n        }));\n      }\n      return tabMap;\n    };\n\n    this.deleteRecordmain = deleteParam => {\n      const methodUrl = deleteParam.methodUrl;\n      const selected = deleteParam.methodUrl === 'MaterialSection' ? JSON.stringify(deleteParam.selectedRecord) : JSON.stringify(deleteParam.selectedRecord[\"jsondata\"]);\n      let dataState = undefined;\n\n      if (this.props.screenName === \"IDS_SECTION\") {\n        dataState = this.state.sectionDataState;\n      } else if (this.props.screenName === \"IDS_METHOD\") {\n        dataState = this.state.methodDataState;\n      } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\n        dataState = this.state.instrumentCatDataState;\n      }\n\n      const inputParam = {\n        inputData: {\n          ncontrolCode: deleteParam.ncontrolCode,\n          [methodUrl.toLowerCase()]: selected,\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"material\",\n        operation: deleteParam.operation,\n        ncontrolCode: deleteParam.ncontrolCode,\n        methodUrl: methodUrl,\n        screenName: \"IDS_MATERIAL\",\n        dataState\n      };\n      const masterData = this.props.Login.masterData;\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            openModal: true,\n            screenName: \"IDS_MATERIAL\",\n            operation: deleteParam.operation,\n            selectedRecord: {}\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\n      }\n    };\n\n    this.ConfirmDelete = deleteId => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\n    };\n\n    this.openFilter = () => {\n      let showFilter = !this.props.Login.showFilter;\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = [];\n      inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\n      inputData[\"materialCatList\"] = this.state.materialCatList;\n      inputData[\"nmaterialcode\"] = this.state.selectedMaterialcombo[\"nmaterialcode\"].value;\n      inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value;\n      const inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"getMaterialInventoryByID\",\n        displayName: \"Material\",\n        inputData: inputData\n      };\n\n      if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\n        this.props.getMaterialInventoryByID(inputParam, this.state.selectedcombo, this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTUSERROLE\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      };\n      this.props.validateEsignCredential(inputParam, \"openModal\");\n    };\n\n    this.viewMaterialFile = filedata => {\n      const inputParam = {\n        inputData: {\n          materialfile: JSON.stringify(filedata['jsondata']),\n          userinfo: this.props.Login.userInfo\n        },\n        classUrl: \"material\",\n        operation: \"view\",\n        methodUrl: \"AttachedMaterialFile\",\n        screenname: \"IDS_MATERIAL\"\n      };\n      this.props.viewAttachment(inputParam);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let showMaterialSection = this.props.Login.showMaterialSection;\n      let isneedcombomulti = this.props.Login.isneedcombomulti;\n      let selectedRecord = this.props.Login.selectedRecord;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"retire\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n      } else {\n        openModal = false;\n        showMaterialSection = false;\n        isneedcombomulti = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          showMaterialSection,\n          loadEsign,\n          selectedRecord,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      if (comboData != null) {\n        if (fieldName === \"nmaterialtypecode\") {\n          const selectedcombo = this.state.selectedcombo || {};\n          selectedcombo[fieldName] = comboData;\n          this.searchRef.current.value = \"\";\n          const inputParamcombo = {\n            nmaterialtypecode: comboData.item.nmaterialtypecode\n          };\n          const selectedMaterialCat = this.state.selectedMaterialCat || {};\n          this.props.initialcombochangeget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\n        }\n\n        if (fieldName === \"nmaterialcode\") {\n          const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\n          selectedMaterialcombo[\"nmaterialcode\"] = comboData;\n          this.setState({\n            selectedMaterialcombo\n          });\n        } else if (fieldName === \"nmaterialcatcode\") {\n          const selectedMaterialCat = this.state.selectedMaterialCat || {};\n          selectedMaterialCat[fieldName] = comboData; // this.setState({ selectedMaterialCat });\n\n          this.props.initialcombochangeget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\n        } else if (fieldName === \"nmaterialsectioncode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nmaterialsectioncode\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName['valuemember'] === \"nstoragelocationcode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"IDS_STORAGELOCATION\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName['valuemember'] === \"nsuppliercode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"IDS_SUPPLIER\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName['valuemember'] === \"nmanufcode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"IDS_MANUFACTURER\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName['valuemember'] === \"nsectioncode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"IDS_SECTION\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName['valuemember'] === \"nmaterialgradecode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"IDS_GRADE\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName === \"nlinkcode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nlinkcode\"] = comboData;\n          this.setState({\n            selectedRecord\n          });\n        } else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\n          const selectedMaterialCat = this.state.selectedMaterialCat || {};\n          selectedMaterialCat[fieldName] = comboData;\n          this.setState({\n            selectedMaterialCat\n          });\n          let comboName = fieldName.label;\n          const selectedRecord = this.state.selectedRecord || {};\n\n          if (comboData) {\n            selectedRecord[comboName] = comboData;\n          } else {\n            selectedRecord[comboName] = [];\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else if (fieldName.label === \"IDS_STORAGECONDITION\") {\n          let comboName = fieldName.label;\n          const selectedRecord = this.state.selectedRecord || {};\n\n          if (comboData) {\n            selectedRecord[comboName] = comboData;\n          } else {\n            selectedRecord[comboName] = [];\n          }\n\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              selectedRecord\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } //For Onchange\n        else if (fieldName.displaymember === \"smaterialcatname1\") {\n          let data = [];\n          const withoutCombocomponent = [];\n        } else if (fieldName === \"value\") {\n          const comboitem = this.state.comboitem || {};\n          comboitem[fieldName] = comboData;\n          this.setState({\n            comboitem\n          });\n        } else if (fieldName === \"nformcode\") {\n          const selectedRecord = this.state.selectedRecord || {};\n          selectedRecord[\"nformcode\"] = comboData;\n          let availableDatas = [];\n          this.state.selectedRecord.nformcode.map(data => {\n            return availableDatas.push(data.item);\n          });\n          this.setState({\n            selectedRecord,\n            availableDatas\n          });\n        }\n      }\n    };\n\n    this.onInputOnChange = (event, optional1, optional2) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (this.props.Login.screenname !== \"IDS_MATERIALFILE\") {\n        if (event.target.type === 'checkbox') {\n          if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      } else {\n        if (event.target.type === 'checkbox') {\n          selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\n        } else if (event.target.type === 'radio') {\n          selectedRecord[event.target.name] = optional2;\n        } else {\n          selectedRecord[event.target.name] = event.target.value;\n        }\n\n        this.setState({\n          selectedRecord\n        });\n      }\n    };\n\n    this.saveClick = () => {\n      let operation = \"update\";\n      let inputData = [];\n      inputData[\"IDS_OPENDATE\"] = this.state.selectedRecord.IDS_OPENDATE && convertDateTimetoString(this.state.selectedRecord.IDS_OPENDATE, this.props.Login.userInfo);\n      inputData[\"tzIDS_OPENDATE\"] = this.state.selectedRecord.tzIDS_OPENDATE && this.state.selectedRecord.tzIDS_OPENDATE;\n      inputData[\"nflag\"] = 3;\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode;\n      inputData[\"nmaterialcatcode\"] = this.props.Login.masterData.SelectedMaterialCategory.nmaterialcatcode;\n      inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode;\n      inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode;\n      const inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"MaterialStatus\",\n        inputData: inputData,\n        operation: operation\n      };\n      this.props.crudMaster(inputParam, this.props.Login.masterData, \"showModalPopup\");\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      let inputData = [];\n      let inputParam = {};\n      let varmain = {};\n      inputData[\"userinfo\"] = this.props.Login.userInfo;\n      let postParam = undefined;\n\n      if (this.props.Login.screenname === \"IDS_MATERIALINVENTORY\") {\n        // if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\n        //     varmain = \"IDS_STANDARDMATERIALNAME\"\n        // }\n        // else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\n        //     varmain = \"IDS_VOLUMETRICMATERIALNAME\"\n        // }\n        // else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\n        //     varmain = \"IDS_MATERIALNAME\"\n        // }\n        // inputData[\"MaterialInventory\"] = {\n        //     \"IDS_INTERNALREFERENCE\": this.state.selectedRecord.IDS_INTERNALREFERENCE,\n        //     \"IDS_BATCHNO\": this.state.selectedRecord.IDS_BATCHNO,\n        //     \"IDS_LOTNO\": this.state.selectedRecord.IDS_LOTNO,\n        //     \"IDS_REFERENCENO\": this.state.selectedRecord.IDS_REFERENCENO,\n        //     \"IDS_CONTAINERID\": this.state.selectedRecord.IDS_CONTAINERID,\n        //     \"IDS_STORAGELOCATION\": {\n        //         value: this.state.selectedRecord[\"IDS_STORAGELOCATION\"] && this.state.selectedRecord[\"IDS_STORAGELOCATION\"].value,\n        //         label: this.state.selectedRecord[\"IDS_STORAGELOCATION\"] && this.state.selectedRecord[\"IDS_STORAGELOCATION\"].label\n        //     }\n        //     , \"IDS_STORAGECONDITION\": {\n        //         value: this.state.selectedRecord[\"IDS_STORAGECONDITION\"] && this.state.selectedRecord[\"IDS_STORAGECONDITION\"].value,\n        //         label: this.state.selectedRecord[\"IDS_STORAGECONDITION\"] && this.state.selectedRecord[\"IDS_STORAGECONDITION\"].label\n        //     },\n        //     \"IDS_SUPPLIER\": {\n        //         value: this.state.selectedRecord[\"IDS_SUPPLIER\"] && this.state.selectedRecord[\"IDS_SUPPLIER\"].value\n        //         , label: this.state.selectedRecord[\"IDS_SUPPLIER\"] && this.state.selectedRecord[\"IDS_SUPPLIER\"].label\n        //     },\n        //     \"IDS_SECTION\": {\n        //         value: this.state.selectedRecord[\"IDS_SECTION\"] && this.state.selectedRecord[\"IDS_SECTION\"].value\n        //         , label: this.state.selectedRecord[\"IDS_SECTION\"] && this.state.selectedRecord[\"IDS_SECTION\"].label\n        //     },\n        //     \"IDS_MANUFACTURER\": {\n        //         value: this.state.selectedRecord[\"IDS_MANUFACTURER\"] && this.state.selectedRecord[\"IDS_MANUFACTURER\"].value,\n        //         label: this.state.selectedRecord[\"IDS_MANUFACTURER\"] && this.state.selectedRecord[\"IDS_MANUFACTURER\"].label\n        //     },\n        //     \"IDS_RETURNEDQUANTITY\": this.state.selectedRecord[\"IDS_RETURNEDQUANTITY\"] && this.state.selectedRecord[\"IDS_RETURNEDQUANTITY\"],\n        //     \"IDS_UNIT\": {\n        //         label: this.state.selectedRecord[\"IDS_UNIT\"].label,\n        //         value: this.state.selectedRecord[\"IDS_UNIT\"].value\n        //     },\n        //     \"IDS_GRADE\": {\n        //         label: this.state.selectedRecord[\"IDS_GRADE\"].label,\n        //         value: this.state.selectedRecord[\"IDS_GRADE\"].value\n        //     },\n        //     \"IDS_INTERNALPREFIX\": this.state.selectedRecord[\"IDS_INTERNALPREFIX\"] && this.state.selectedRecord[\"IDS_INTERNALPREFIX\"],\n        //     \"IDS_INVOICENO\": this.state.selectedRecord[\"IDS_INVOICENO\"] && this.state.selectedRecord[\"IDS_INVOICENO\"],\n        //     \"IDS_DATEOFMANUFACTURER\": this.state.selectedRecord[\"IDS_DATEOFMANUFACTURER\"] && this.state.selectedRecord[\"IDS_DATEOFMANUFACTURER\"],\n        //     \"IDS_CATALOGNO\": this.state.selectedRecord[\"IDS_CATALOGNO\"] && this.state.selectedRecord[\"IDS_CATALOGNO\"],\n        //     \"IDS_COST\": this.state.selectedRecord[\"IDS_COST\"] && this.state.selectedRecord[\"IDS_COST\"],\n        //     \"IDS_RECEIVEDDATE\": this.state.selectedRecord[\"IDS_RECEIVEDDATE\"] && this.state.selectedRecord[\"IDS_RECEIVEDDATE\"],\n        //     \"smaterialname\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname,\n        //     \"IDS_EXPIRYDATE\": this.state.selectedRecord[\"IDS_EXPIRYDATE\"] && this.state.selectedRecord[\"IDS_EXPIRYDATE\"],\n        //     \"IDS_REMARKS\": this.state.selectedRecord[\"IDS_REMARKS\"] && this.state.selectedRecord[\"IDS_REMARKS\"],\n        //     \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n        //     \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n        //     \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n        //     \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === transactionStatus.QUARANTINE ?\n        //         transactionStatus.QUARANTINE : transactionStatus.RELEASED,\n        //     \"IDS_INVENTORYID\": this.state.selectedRecord[\"IDS_INVENTORYID\"] && this.state.selectedRecord[\"IDS_INVENTORYID\"],\n        // }\n        // inputData[\"Material\"][varmain] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1 ?\n        //     this.state.selectedRecord.IDS_STANDARDMATERIALNAME :\n        //     this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 ?\n        //         this.state.selectedRecord.IDS_VOLUMETRICMATERIALNAME :\n        //         this.state.selectedRecord.IDS_MATERIALNAME\n        inputData[\"MaterialInventory\"] = {};\n        inputData[\"DateList\"] = [];\n        const Layout = this.props.Login.masterData.selectedTemplate[0].sjsonobjstr;\n        Layout.map(row => {\n          row.children.map(column => {\n            column.children.map(component => {\n              if (component.inputtype === 'combo') {\n                inputData[\"MaterialInventory\"][component.label] = {\n                  label: this.state.selectedRecord[component.label][\"label\"],\n                  value: this.state.selectedRecord[component.label][\"value\"]\n                };\n              } else if (component.inputtype === 'date') {\n                if (this.state.selectedRecord[component.label]) {\n                  inputData[\"MaterialInventory\"][`tz${component.label}`] = {\n                    label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\n                    value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\n                  };\n                  inputData[\"MaterialInventory\"][component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                  inputData[\"DateList\"].push(component.label);\n                }\n              } else {\n                inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label];\n              }\n\n              component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                if (componentrow.inputtype === 'combo') {\n                  inputData[\"MaterialInventory\"][componentrow.label] = {\n                    label: this.state.selectedRecord[componentrow.label][\"label\"],\n                    value: this.state.selectedRecord[componentrow.label][\"value\"]\n                  };\n                } else if (componentrow.inputtype === 'date') {\n                  if (this.state.selectedRecord[componentrow.label]) {\n                    inputData[\"MaterialInventory\"][`tz${componentrow.label}`] = {\n                      label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\n                      value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\n                    };\n                    inputData[\"MaterialInventory\"][componentrow.label] = convertDateTimetoString(this.state.selectedRecord[componentrow.label], this.props.Login.userInfo);\n                    inputData[\"DateList\"].push(componentrow.label);\n                  }\n                } else {\n                  inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label];\n                }\n              });\n            });\n          });\n        });\n        inputData[\"MaterialInventory\"] = { ...inputData[\"MaterialInventory\"],\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ? transactionStatus.QUARANTINE : transactionStatus.RELEASED,\n          \"IDS_INVENTORYID\": this.state.selectedRecord[\"IDS_INVENTORYID\"] && this.state.selectedRecord[\"IDS_INVENTORYID\"]\n        };\n        inputData[\"materialInventoryJson\"] = JSON.stringify(inputData[\"MaterialInventory\"]);\n        inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode;\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value;\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode;\n\n        if (this.props.Login.operation === 'create') {\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventory\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n        } else {\n          inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode;\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventory\",\n            inputData: inputData,\n            operation: this.props.Login.operation,\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (this.props.Login.screenName === \"IDS_MATERIAL\") {\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, masterData, \"openModal\");\n          }\n        } else {\n          if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\n            this.ConfirmComponent();\n          } else {\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  loadEsign: true,\n                  screenData: {\n                    inputParam,\n                    masterData\n                  },\n                  saveType\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              this.props.crudMaster(inputParam, masterData, \"openModal\");\n            }\n          }\n        }\n      } else if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\") {\n        if (this.state.selectedRecord['IDS_RETURNEDQUANTITY'] < parseFloat(this.state.selectedRecord['IDS_AVAILABLEQUANTITY'])) {\n          const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr;\n          let dynamicobj = {};\n          inputData[\"DateList\"] = [];\n          Layout.map(row => {\n            row.children.map(column => {\n              column.children.map(component => {\n                if (component.inputtype === 'combo') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = {\n                      label: this.state.selectedRecord[component.label][\"label\"],\n                      value: this.state.selectedRecord[component.label][\"value\"]\n                    };\n                  }\n                } else if (component.inputtype === 'Numeric') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = this.state.selectedRecord[component.label].toString();\n                  }\n                } else if (component.inputtype === 'date') {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[`tz${component.label}`] = {\n                      label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\n                      value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\n                    };\n                    dynamicobj[component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo);\n                    inputData[\"DateList\"].push(component.label);\n                  }\n                } else {\n                  if (this.state.selectedRecord[component.label]) {\n                    dynamicobj[component.label] = this.state.selectedRecord[component.label];\n                  }\n                }\n\n                component.hasOwnProperty(\"children\") && component.children.map(componentrow => {\n                  if (componentrow.inputtype === 'combo') {\n                    if (this.state.selectedRecord[componentrow.label]) {\n                      dynamicobj[componentrow.label] = {\n                        label: this.state.selectedRecord[componentrow.label][\"label\"],\n                        value: this.state.selectedRecord[componentrow.label][\"value\"]\n                      };\n                    }\n                  } else {\n                    if (this.state.selectedRecord[componentrow.label]) {\n                      dynamicobj[componentrow.label] = this.state.selectedRecord[componentrow.label];\n                    }\n                  }\n                });\n              });\n            });\n          });\n          dynamicobj = { ...dynamicobj,\n            \"ntransactiontype\": this.state.selectedRecord.IDS_TRANSACTIONTYPE && this.state.selectedRecord.IDS_TRANSACTIONTYPE.value,\n            \"navailableqty\": this.state.selectedRecord.IDS_AVAILABLEQUANTITY !== \"\" ? this.state.selectedRecord.IDS_AVAILABLEQUANTITY : this.props.Login.masterData['MaterialInventoryTrans'][0].jsondata.navailableqty,\n            \"IDS_INVENTORYID\": this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.IDS_INVENTORYID\n          };\n          inputData[\"nprecision\"] = this.props.Login.masterData.nprecision && this.props.Login.masterData.nprecision;\n          inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode;\n          inputData[\"MaterialInventoryTrans\"] = JSON.stringify(dynamicobj);\n          inputParam = {\n            classUrl: \"materialinventory\",\n            methodUrl: \"MaterialInventoryTrans\",\n            inputData: inputData,\n            operation: 'create',\n            saveType,\n            formRef,\n            postParam,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef,\n            dataState: this.state.dataState\n          };\n          let masterData = this.props.Login.masterData;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData\n                },\n                saveType\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_RETURNEDLESSTHANAVAILABLE\"\n          }));\n        }\n      } else if (this.props.Login.screenname === \"IDS_MATERIALFILE\") {\n        inputParam = this.onSaveMaterialFile();\n        let masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else if (this.props.Login.screenname === \"IDS_MATERIALPROPERTY\") {\n        let masterData = this.props.Login.masterData;\n        const dynamicobj = {\n          \"IDS_STRUCTURALFORMULA\": this.state.selectedRecord[\"IDS_STRUCTURALFORMULA\"],\n          \"IDS_PHYSICALDESCRIPTION\": this.state.selectedRecord[\"IDS_PHYSICALDESCRIPTION\"],\n          \"IDS_BOILINGPOINT\": this.state.selectedRecord[\"IDS_BOILINGPOINT\"],\n          \"IDS_MELTINGPOINT\": this.state.selectedRecord[\"IDS_MELTINGPOINT\"],\n          \"IDS_MOLECULARWEIGHT\": this.state.selectedRecord[\"IDS_MOLECULARWEIGHT\"],\n          \"IDS_STANDARDSPECIFICGRAVITY\": this.state.selectedRecord[\"IDS_STANDARDSPECIFICGRAVITY\"],\n          \"IDS_STANDARDPURITY\": this.state.selectedRecord[\"IDS_STANDARDPURITY\"],\n          \"IDS_STANDARDLENGTH\": this.state.selectedRecord[\"IDS_STANDARDLENGTH\"],\n          \"IDS_GASNUMBER\": this.state.selectedRecord[\"IDS_GASNUMBER\"],\n          \"IDS_BULKDENSITY\": this.state.selectedRecord[\"IDS_BULKDENSITY\"],\n          \"IDS_DATEOFSTANDARDIZATION\": this.state.selectedRecord[\"IDS_DATEOFSTANDARDIZATION\"],\n          \"IDS_ASISBASIS\": this.state.selectedRecord[\"IDS_ASISBASIS\"],\n          \"IDS_DRIEDANDYDROUSBASIS\": this.state.selectedRecord[\"IDS_DRIEDANDYDROUSBASIS\"],\n          \"IDS_ASISBASIS1\": this.state.selectedRecord[\"IDS_ASISBASIS1\"],\n          \"IDS_DRIEDANDYDROUSBASIS2\": this.state.selectedRecord[\"IDS_DRIEDANDYDROUSBASIS2\"],\n          \"IDS_DIRECTIONOFUSE\": this.state.selectedRecord[\"IDS_DIRECTIONOFUSE\"],\n          \"IDS_COMMENTS\": this.state.selectedRecord[\"IDS_COMMENTS\"]\n        };\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode;\n\n        if (this.props.Login.masterData.MaterialProperties.length > 0) {\n          inputData[\"nmaterialpropertycode\"] = this.props.Login.masterData.MaterialProperties[0].nmaterialpropertycode;\n        } else {\n          inputData[\"nmaterialpropertycode\"] = 0;\n        }\n\n        inputData[\"materialProperty\"] = JSON.stringify(dynamicobj);\n        inputData[\"nflag\"] = 2;\n        inputParam = {\n          classUrl: \"material\",\n          methodUrl: \"MaterialSafetyInstructions\",\n          inputData: inputData,\n          operation: 'create',\n          saveType,\n          formRef,\n          postParam,\n          selectedRecord: this.state.selectedRecord,\n          searchRef: this.searchRef,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\n        }\n      } else {\n        if (this.props.Login.operation !== \"update\") {\n          let showMaterialSection = this.props.Login.showMaterialSection;\n          let newarr = [];\n          let newarrobj = [];\n          inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode;\n\n          if (this.state.selectedRecord[\"nmaterialsectioncode\"].length > 1) {\n            newarr = this.state.selectedRecord.nmaterialsectioncode.map(temp => {\n              return {\n                \"ssectionname\": temp.label,\n                \"nsectioncode\": temp.value,\n                \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\n              };\n            });\n          } else {\n            newarr.push({\n              \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].label,\n              \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].value,\n              \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\n              \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\n            });\n          }\n\n          inputData[\"materialSectionJson\"] = JSON.stringify(newarr);\n          inputParam = {\n            classUrl: \"material\",\n            methodUrl: \"MaterialSection\",\n            inputData: inputData,\n            operation: \"create\",\n            showMaterialSection: showMaterialSection,\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef\n          };\n        } else {\n          let newarr = [];\n          let newarrobj = [];\n          inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode;\n\n          if (Array.isArray(this.state.selectedRecord[\"nmaterialsectioncode\"])) {\n            newarrobj.push({\n              \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].label,\n              \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].value,\n              \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\n              \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\n            });\n          } else {\n            newarrobj.push({\n              \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"].label,\n              \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"].value,\n              \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\n              \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\n            });\n          }\n\n          inputData[\"materialSectionJson\"] = JSON.stringify(newarrobj);\n          inputData[\"MaterialSection\"] = {\n            \"IDS_REORDERLEVEL\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"]\n          };\n          inputData[\"nmaterialsectioncode\"] = this.state.selectedRecord.nmaterialsectioncodeprimaryKeyValue;\n          inputParam = {\n            classUrl: \"material\",\n            methodUrl: \"MaterialSection\",\n            inputData: inputData,\n            showMaterialSection: false,\n            operation: \"update\",\n            selectedRecord: this.state.selectedRecord,\n            searchRef: this.searchRef\n          };\n        }\n\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.onNumericInputChange = (value, name) => {\n      let selectedRecord = this.state.selectedRecord;\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.ConfirmComponent = () => {\n      this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({\n        id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\"\n      }), \"ok\", \"cancel\", () => this.copyAlertSave());\n    };\n\n    this.reloadData = () => {\n      this.searchRef.current.value = \"\";\n      let inputData = [];\n      inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\n      inputData[\"materialCatList\"] = this.state.materialCatList;\n      const inputParam = {\n        classUrl: \"materialinventory\",\n        methodUrl: \"getMaterialInventoryByID\",\n        displayName: \"MaterialInventory\",\n        inputData: inputData\n      };\n      this.setState({\n        sectionDataState: {\n          skip: 0,\n          take: 10\n        }\n      });\n\n      if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\n        this.props.getMaterialInventoryByID(inputParam, this.state.selectedcombo, this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTUSERROLE\"\n        }));\n      }\n    };\n\n    const _dataState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.searchFieldList = [{\n      feild: \"IDS_MATERIALNAME\",\n      jsonfeild: \"jsondata\"\n    }];\n    this.state = {\n      masterStatus: \"\",\n      sectionDataState: {\n        skip: 0,\n        take: 10\n      },\n      error: \"\",\n      isOpen: false,\n      ScreenRightsData: [],\n      userRoleData: [],\n      availableDatas: [],\n      selectedRecord: {},\n      filterCatList: [],\n      operation: \"\",\n      comboitem: undefined,\n      screenName: undefined,\n      SelectedScreenrights: undefined,\n      selectedcombo: undefined,\n      selectedMaterialCatRole: undefined,\n      isSelectedRecordChange: false,\n      selectedMaterialCat: undefined,\n      materialCatList: [],\n      selectedListmasterSwitch: undefined,\n      custombuttonstate: false,\n      ControlRightsParent: [],\n      userRoleControlRights: [],\n      ControlRights: undefined,\n      ConfirmDialogScreen: false,\n      controlMap: new Map(),\n      showAccordian: true,\n      dataResult: [],\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      dataState: _dataState,\n      columnName: '',\n      rowIndex: 0,\n      data: [],\n      splitChangeWidthPercentage: 30\n    };\n    this.searchRef = React.createRef();\n    this.ControlButton = [{\n      value: 1,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ENABLEALLCONTROLRIGHTS\"\n      })\n    }, {\n      value: 2,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DISABLEALLCONTROLRIGHTS\"\n      })\n    }, {\n      value: 3,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_ENABLEALLESIGNRIGHTS\"\n      })\n    }, {\n      value: 4,\n      label: this.props.intl.formatMessage({\n        id: \"IDS_DISABLEALLESIGNRIGHTS\"\n      })\n    }];\n    this.confirmMessage = new ConfirmMessage();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    return null;\n  }\n\n  render() {\n    console.log('Master Material Inventory :', this.props.Login.masterData);\n    this.props.Login.masterData.ScreenRights && sortData(this.props.Login.masterData.ScreenRights, '', 'nusersrolehidescreencode');\n    const searchedData = this.props.Login.masterData.searchedData;\n    const ScreenRights = this.props.Login.masterData.ScreenRights || [];\n    const addId = this.state.controlMap.has(\"AddMaterialInventory\") && this.state.controlMap.get(\"AddMaterialInventory\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditMaterialInventory\") && this.state.controlMap.get(\"EditMaterialInventory\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteMaterialInventory\") && this.state.controlMap.get(\"DeleteMaterialInventory\").ncontrolcode;\n    const releaseId = this.state.controlMap.has(\"ReleaseMaterialInventory\") && this.state.controlMap.get(\"ReleaseMaterialInventory\").ncontrolcode;\n    const retireId = this.state.controlMap.has(\"RetireMaterialInventory\") && this.state.controlMap.get(\"RetireMaterialInventory\").ncontrolcode;\n    const openDateId = this.state.controlMap.has(\"OpenDateMaterialInventory\") && this.state.controlMap.get(\"OpenDateMaterialInventory\").ncontrolcode;\n    const viewId = this.state.controlMap.has(\"ViewMaterialInventory\") && this.state.controlMap.get(\"ViewMaterialInventory\").ncontrolcode;\n    const addParameterId = this.state.controlMap.has(\"AddMaterialSafetyInstructions\") && this.state.controlMap.get(\"AddMaterialSafetyInstructions\").ncontrolcode;\n    const addMaterialProperty = this.state.controlMap.has(\"AddMaterialProperties\") && this.state.controlMap.get(\"AddMaterialProperties\").ncontrolcode;\n    let masterlistmain = [];\n    this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.map((temp, i) => {\n      return masterlistmain.push(this.props.Login.masterData.MaterialInventory[i].jsondata);\n    });\n    let searchedDatalistmain = [];\n\n    if (this.props.Login.masterData.searchedData === undefined) {\n      searchedDatalistmain = undefined;\n    } else {\n      this.props.Login.masterData.searchedData && this.props.Login.masterData.searchedData.map((temp, i) => {\n        return searchedDatalistmain.push(this.props.Login.masterData.searchedData[i].jsondata);\n      });\n    }\n\n    let searchFieldList = [];\n    let mandatoryFieldsMaterialFile = [];\n\n    if (this.props.Login.masterData.SelectedMaterialType) {\n      if (this.props.Login.masterData.SelectedMaterialType.length > 0) {\n        if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        } else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        } else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\n          searchFieldList = [{\n            feild: \"IDS_INVENTORYID\",\n            jsonfeild: \"jsondata\"\n          }];\n        }\n      }\n    }\n\n    const filterParam = {\n      inputListName: \"MaterialInventory\",\n      selectedObject: \"SelectedMaterialInventory\",\n      primaryKeyField: \"nmaterialinventorycode\",\n      fetchUrl: \"materialinventory/getMaterialInventorySearchByID\",\n      fecthInputObject: {\n        userinfo: this.props.Login.userInfo,\n        nmaterialtypecode: this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\n      },\n      masterData: this.props.Login.masterData,\n      isjsondata: true,\n      searchFieldList: searchFieldList\n    }; //let mandatoryFieldsMaterialFile = []\n\n    this.props.Login.screenname === 'IDS_MATERIALFILE' && this.props.Login.selectedRecord && this.props.Login.selectedRecord.nattachmenttypecode === attachmentType.LINK ? mandatoryFieldsMaterialFile = [{\n      \"idsName\": \"IDS_FILENAME\",\n      \"dataField\": \"slinkfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }, {\n      \"idsName\": \"IDS_LINKNAME\",\n      \"dataField\": \"nlinkcode\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }] : mandatoryFieldsMaterialFile = [{\n      \"idsName\": \"IDS_FILE\",\n      \"dataField\": \"sfilename\",\n      \"mandatory\": true,\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"file\"\n    }];\n    const mandatoryFieldsMaterialSection = [{\n      \"mandatory\": false,\n      \"idsName\": \"IDS_MATERIALSECTION\",\n      \"dataField\": \"nmaterialsectioncode\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }];\n    console.log('master data List INV : ', masterlistmain);\n    const breadCrumbData = this.state.filterData || [];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb  fixed_breadcrumd \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, breadCrumbData.length > 0 ? /*#__PURE__*/React.createElement(Affix, {\n      top: 64,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 29\n      }\n    })) : \"\", /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      formatMessage: this.props.intl.formatMessage,\n      screenName: \"MaterialInventory\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      masterList: searchedDatalistmain || masterlistmain,\n      getMasterDetail: master => this.props.getMaterialInventoryDetails(master, this.props.Login.masterData, this.props.Login.userInfo),\n      selectedMaster: this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.jsondata,\n      primaryKeyField: \"nmaterialinventorycode\",\n      mainField: \"IDS_INVENTORYID\",\n      firstField: \"smaterialname\",\n      secondField: \"status\",\n      isIDSField: \"Yes\",\n      filterColumnData: this.props.filterColumnData,\n      filterParam: filterParam,\n      userRoleControlRights: this.state.userRoleControlRights,\n      addId: addId,\n      viewId: viewId,\n      searchRef: this.searchRef,\n      reloadData: this.reloadData,\n      hidePaging: false,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      showFilterIcon: true,\n      onFilterSubmit: this.onFilterSubmit,\n      viewMaterialInventoryDetails: this.viewMaterialInventoryDetails,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(MaterialFilter, {\n          filterCatList: this.state.filterCatList || [],\n          materialCatList: this.state.materialCatList || [],\n          MaterialComboList: this.state.MaterialComboList || [],\n          selectedRecord: this.state.selectedcombo || {} //\n          ,\n          selectedMaterialCat: this.state.selectedMaterialCat || {},\n          selectedMaterialcombo: this.state.selectedMaterialcombo || {},\n          onComboChange: this.onComboChange,\n          ismaterialInventory: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 45\n          }\n        })\n      }],\n      openModal: () => this.props.getAddMaterialInventoryPopup(\"IDS_MATERIALINVENTORY\", \"create\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb, this.state.selectedMaterialCat, addId, this.props.Login.masterData, this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: \"8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 37\n      }\n    }, this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.length > 0 && this.props.Login.masterData.SelectedMaterialInventory ? /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 53\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_MATERIALINVENTORY\"\n    })), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 61\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      globalEventOff: \"click\",\n      id: \"tooltip_list_wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 65\n      }\n    }), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_OPENDATE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.openDatePopup(this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_OPENDATE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.updateMaterialStatus(this.props.Login.masterData, this.props.Login.userInfo, retireId, 2),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_RETIRE\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_RELEASED\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.updateMaterialStatus(this.props.Login.masterData, this.props.Login.userInfo, releaseId, 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_RELEASED\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2\",\n      href: \"#\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: e => this.props.getAddMaterialInventoryPopup(\"IDS_MATERIALINVENTORY\", \"update\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb, this.state.selectedMaterialCat, editId, this.props.Login.masterData, this.state.selectedRecord),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 69\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      href: \"\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      \"data-for\": \"tooltip_list_wrap\",\n      onClick: () => this.ConfirmDelete(deleteId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 69\n      }\n    })))))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 53\n      }\n    }), this.props.Login.masterData && /*#__PURE__*/React.createElement(CustomTab, {\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 85\n      }\n    }))) : \"\")))))), this.props.Login.openModal && /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      closeModal: this.closeModal,\n      operation: this.props.Login.screenname === 'IDS_MATERIALSAFETYINSTRUCTIONS' ? '' : this.props.Login.screenname === 'IDS_MATERIALPROPERTY' ? '' : this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.screenname,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      selectedRecord: this.state.selectedRecord || {} // mandatoryFields={this.props.Login.screenname === 'IDS_MATERIALINVENTORY' ? mandatoryFieldsMaterialInventory : ''}\n      ,\n      mandatoryFields: this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) && this.dynamicmandatoryFeilds() : '',\n      updateStore: this.props.updateStore,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 33\n        }\n      }) :\n      /*#__PURE__*/\n      // this.props.Login.screenname !== \"IDS_MATERIALFILE\" ?\n      //     this.props.Login.screenname !== 'IDS_MATERIALPROPERTY' ?\n      //         this.props.Login.screenname !== 'IDS_MATERIALSAFETYINSTRUCTIONS' ?\n      //             this.props.Login.showMaterialSection ?\n      //                 <AddMaterialSection\n      //                     selectedRecord={this.props.Login.selectedRecord || {}}\n      //                     onInputOnChange={this.onInputOnChange}\n      //                     MaterialSectionCombodata={this.props.Login.masterData.MaterialSection && this.props.Login.masterData.MaterialSection}\n      //                     onNumericInputChange={this.onNumericInputChange}\n      //                     onComboChange={this.onComboChange}\n      //                     isDisabled={this.props.Login.isneedcombomulti && this.props.Login.isneedcombomulti}\n      //                     ismaterialsectionEdit={this.props.Login.ismaterialsectionEdit}\n      //                     // parameterData={this.props.parameterData}\n      //                     comboData={this.props.Login.masterData.productCategoryList}\n      //                 />\n      //                 :\n      React.createElement(DynamicSlideout, {\n        selectedRecord: this.state.selectedRecord,\n        templateData: this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.selectedTemplate && this.props.Login.masterData.selectedTemplate[0].sjsonobjstr : this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr,\n        onNumericInputChange: this.onNumericInputChange,\n        handleChange: this.handleChange,\n        onInputOnChange: this.onInputOnChange,\n        comboData: this.props.Login.templateData && this.props.Login.templateData.comboData,\n        onComboChange: this.onComboChangedynamic,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        timeZoneList: this.props.Login.timeZoneList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 33\n        }\n      }) //         :\n      //         <DynamicSlideout\n      //             selectedRecord={this.props.Login.selectedRecord}\n      //             templateData={this.props.Login.masterData.selectedTemplateSafetyInstructions &&\n      //                 this.props.Login.masterData.selectedTemplateSafetyInstructions[0].sjsonobjstr}\n      //             handleChange={this.handleChange}\n      //             onInputOnChange={this.onInputOnChange}\n      //         />\n      //     :\n      //     <DynamicSlideout\n      //         selectedRecord={this.props.Login.selectedRecord}\n      //         templateData={this.props.Login.masterData.selectedTemplateProperties &&\n      //             this.props.Login.masterData.selectedTemplateProperties[0].sjsonobjstr}\n      //         userInfo={this.props.Login.userInfo}\n      //         handleChange={this.handleChange}\n      //         onInputOnChange={this.onInputOnChange}\n      //         handleDateChange={this.handleDateChange}\n      //     /> :\n      // <AddMaterialFile\n      //     selectedRecord={this.state.selectedRecord || {}}\n      //     onInputOnChange={this.onInputOnChange}\n      //     onDrop={this.onDropMaterialFile}\n      //     deleteAttachment={this.deleteAttachment}\n      //     onComboChange={this.onComboChange}\n      //     linkMaster={this.props.Login.linkMaster}\n      //     maxSize={20}\n      //     maxFiles={1}\n      //     multiple={false}\n      //     label={this.props.intl.formatMessage({ id: \"IDS_MATERIALFILE\" })}\n      //     name=\"testfilename\"\n      // />\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 21\n      }\n    }), this.props.Login.showModalPopup && /*#__PURE__*/React.createElement(ModalShow, {\n      modalShow: true,\n      modalTitle: this.props.intl.formatMessage({\n        id: this.props.Login.ModaTitle\n      }),\n      needSave: this.props.Login.ModaTitle === 'IDS_OPENDATE' ? false : true,\n      closeModal: this.closeModalShow,\n      onSaveClick: this.props.Login.ModaTitle === 'IDS_OPENDATE' && this.saveClick,\n      validateEsign: this.validateEsign //needSave={ this.props.Login.ModaTitle === 'IDS_OPENDATE'?transactionStatus.YES:transactionStatus.NO}\n      ,\n      modalBody: this.props.Login.ModaTitle === 'IDS_OPENDATE' ? /*#__PURE__*/React.createElement(AddMaterialOpenDate, {\n        isMultiLingualLabel: true,\n        label: 'IDS_OPENDATE',\n        intl: this.props.intl.formatMessage,\n        selectedRecord: this.state.selectedRecord,\n        dateonly: true,\n        onComboChange: this.onComboChangeopendate,\n        userInfo: this.props.Login.userInfo,\n        handleDateChange: this.handleDateChange,\n        timeZoneList: this.props.Login.timeZoneList,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 77\n        }\n      }) : /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_INVENTORYID',\n        message: 'Inventory ID',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 56\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 45\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] ? this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] : \"-\"))), this.accordianDesign(), /*#__PURE__*/React.createElement(Col, {\n        md: \"4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 45\n        }\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: 'IDS_OPENDATE',\n        message: 'Open Date',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 56\n        }\n      })), /*#__PURE__*/React.createElement(ReadOnlyText, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 45\n        }\n      }, this.props.Login.masterData.SelectedMaterialInventory.jsondata && this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] ? this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] : \"-\")))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 21\n      }\n    }));\n  }\n\n  componentDidMount() {\n    if (this.parentHeight) {\n      const height = this.parentHeight.clientHeight;\n      this.setState({\n        firstPane: height - 80,\n        parentHeight: height\n      });\n    }\n  }\n\n  generateBreadCrumData() {\n    const breadCrumbData = [];\n    breadCrumbData.push({\n      \"label\": \"IDS_MATERIALTYPE\",\n      \"value\": this.props.Login.masterData.SelectedMaterialType ? this.props.Login.masterData.SelectedMaterialType[0].smaterialtypename : \"NA\"\n    }, {\n      \"label\": \"IDS_MATERIALCAT\",\n      \"value\": this.props.Login.masterData.SelectedMaterialCategory ? this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname !== undefined ? this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname : \"NA\" : \"NA\"\n    }, {\n      \"label\": \"IDS_MATERIAL\",\n      \"value\": this.props.Login.masterData.SelectedMaterialCrumb ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname !== undefined ? this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname : \"NA\" : \"NA\"\n    });\n    return breadCrumbData;\n  }\n\n  componentDidUpdate(previousProps) {\n    let bool = false;\n    let {\n      selectedRecord,\n      selectedcombo,\n      comboitem,\n      filterData,\n      filterCatList,\n      selectedMaterialCat,\n      selectedMaterialcombo,\n      materialCatList,\n      MaterialComboList\n    } = this.state;\n    const masterData = this.props.Login.masterData;\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      bool = true;\n      selectedRecord = this.props.Login.selectedRecord;\n    }\n\n    if (this.props.Login.selectedMaterialCat !== previousProps.Login.selectedMaterialCat) {\n      bool = true;\n      selectedMaterialCat = this.props.Login.selectedMaterialCat;\n    }\n\n    if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\n      bool = true;\n      comboitem = this.props.Login.comboitem;\n    }\n\n    if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n      const userRoleControlRights = [];\n\n      if (this.props.Login.userRoleControlRights) {\n        this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n      }\n\n      const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        data: this.props.Login.masterData.ControlRights\n      });\n    }\n\n    if (this.props.Login.masterData.MaterialType !== undefined) {\n      if (this.props.Login.masterData.MaterialType !== previousProps.Login.masterData.MaterialType) {\n        bool = true;\n        const userrole = constructOptionList(this.props.Login.masterData.MaterialType || [], \"nmaterialtypecode\", \"smaterialtypename\", undefined, undefined, undefined);\n        filterCatList = userrole.get(\"OptionList\");\n        selectedcombo = {\n          nmaterialtypecode: masterData.MaterialType && masterData.MaterialType.length > 0 ? {\n            \"value\": masterData.MaterialType[0].nmaterialtypecode,\n            \"label\": masterData.MaterialType[0].smaterialtypename\n          } : \"\"\n        };\n      }\n    }\n\n    if (this.props.Login.masterData.MaterialCategoryMain !== previousProps.Login.masterData.MaterialCategoryMain) {\n      bool = true;\n      const MaterialCategoryMain = constructOptionList(this.props.Login.masterData.MaterialCategoryMain || [], \"nmaterialcatcode\", \"smaterialcatname\", undefined, undefined, undefined);\n      materialCatList = MaterialCategoryMain.get(\"OptionList\");\n      selectedMaterialCat = {\n        nmaterialcatcode: masterData.MaterialCategoryMain && masterData.MaterialCategoryMain.length > 0 ? {\n          \"value\": masterData.MaterialCategoryMain[0].nmaterialcatcode,\n          \"label\": masterData.MaterialCategoryMain[0].smaterialcatname\n        } : \"\"\n      };\n    }\n\n    if (this.props.Login.masterData.MaterialCombo !== previousProps.Login.masterData.MaterialCombo) {\n      bool = true;\n      let MaterialComboArr = [];\n      this.props.Login.masterData.MaterialCombo.map(temp => {\n        MaterialComboArr.push(temp.jsondata);\n      });\n      const MaterialCombo = constructOptionList(MaterialComboArr || [], \"nmaterialcode\", \"smaterialname\", undefined, undefined, undefined);\n      MaterialComboList = MaterialCombo.get(\"OptionList\");\n      selectedMaterialcombo = {\n        nmaterialcode: masterData.MaterialCombo && masterData.MaterialCombo.length > 0 ? {\n          \"value\": masterData.MaterialCombo[0][\"jsondata\"].nmaterialcode,\n          \"label\": masterData.MaterialCombo[0][\"jsondata\"].smaterialname\n        } : \"\"\n      };\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      filterData = this.generateBreadCrumData();\n    }\n\n    if (this.props.Login.masterData.searchedData !== previousProps.Login.masterData.searchedData) {\n      if (this.props.Login.masterData.searchedData) {\n        if (this.props.Login.masterData.searchedData.length <= this.state.skip) {\n          this.setState({\n            skip: 0\n          });\n        }\n      }\n    }\n\n    if (bool) {\n      this.setState({\n        selectedRecord,\n        comboitem,\n        filterData,\n        selectedcombo,\n        filterCatList,\n        selectedMaterialCat,\n        selectedMaterialcombo,\n        materialCatList,\n        MaterialComboList\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    const updateInfo = {\n      typeName: DEFAULT_RETURN,\n      data: {\n        masterData: [],\n        inputParam: undefined,\n        operation: null,\n        modalName: undefined\n      }\n    };\n    this.props.updateStore(updateInfo);\n  }\n\n  handleClickDelete(masterData, ncontrolcode, modalName) {\n    if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RETIRED && this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RELEASED) {\n      const fieldArray = [];\n      let postParam = {\n        inputListName: \"MaterialInventory\",\n        selectedObject: \"SelectedMaterialInventory\",\n        primaryKeyField: \"nmaterialinventorycode\",\n        primaryKeyValue: fieldArray,\n        fetchUrl: \"materialinventory/getMaterialInventory\",\n        fecthInputObject: {\n          userinfo: this.props.Login.userInfo\n        },\n        \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\n        \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n        \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\n      };\n      modalName = 'openModal';\n      const inputParam = {\n        methodUrl: \"MaterialInventory\",\n        classUrl: \"materialinventory\",\n        inputData: {\n          \"material\": this.props.Login.masterData.SelectedMaterial,\n          \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\n          \"nmaterialinventorycode\": this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\n          \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\n          \"userinfo\": this.props.Login.userInfo,\n          //\"nmaterialcode\": this.props.Login.masterData.SelectedMaterial && this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode,\n          \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\n        },\n        operation: \"delete\",\n        postParam,\n        displayName: \"Material\"\n      };\n\n      if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadEsign: true,\n            screenData: {\n              inputParam,\n              masterData\n            },\n            [modalName]: true,\n            operation: 'delete',\n            screenName: \"Material\",\n            id: \"material\"\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        this.props.crudMaster(inputParam, masterData, modalName);\n      }\n    } else {\n      toast.warn(this.props.intl.formatMessage({\n        id: \"IDS_SELECTQUARENTINEINVENTORY\"\n      }));\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  getAddMaterialInventoryPopup,\n  updateMaterialStatus,\n  openDatePopup,\n  getQuantityTransactionPopup,\n  getQuantityTransactionOnchange,\n  updateStore,\n  initialcombochangeget,\n  getAddMaterialPopup,\n  viewAttachment,\n  getMaterialChildValues,\n  crudMaster,\n  getMaterialInventoryDetails,\n  getMaterialEdit,\n  getMaterialInventoryByID,\n  addMaterialFile,\n  getAddMaterialSectionPopup,\n  getMaterialSectionEdit,\n  filterColumnData,\n  validateEsignCredential,\n  addSafetyInstructions,\n  addMaterialProperty\n})(injectIntl(MaterialInventory));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/Material/MaterialInventory.jsx"],"names":["React","connect","FormattedMessage","injectIntl","Row","Col","Nav","Card","Button","FormGroup","FormLabel","Grid","GridColumn","process","toast","FontAwesomeIcon","faTrashAlt","faSave","faCopy","faPlus","faSync","faPencilAlt","SlideOutModal","Esign","ListMaster","ModalShow","CustomTab","showEsign","getControlMap","constructOptionList","sortData","getSameRecordFromTwoArrays","onDropAttachFileList","deleteAttachmentDropZone","create_UUID","constructjsonOptionList","convertDateTimetoString","rearrangeDateFormat","comboChild","callService","updateStore","crudMaster","filterColumnData","validateEsignCredential","viewAttachment","addSafetyInstructions","getAddMaterialPopup","getMaterialDetails","addMaterialProperty","getMaterialEdit","getMaterialByTypeCode","getAddMaterialSectionPopup","getMaterialSectionEdit","addMaterialFile","initialcombochangeget","getMaterialInventoryByID","getAddMaterialInventoryPopup","getMaterialInventoryDetails","updateMaterialStatus","openDatePopup","getQuantityTransactionPopup","getMaterialChildValues","getQuantityTransactionOnchange","DEFAULT_RETURN","transactionStatus","attachmentType","ContentPanel","AtSubCard","ReadOnlyText","ConfirmMessage","BreadcrumbComponent","ReactTooltip","MaterialFilter","DynamicSlideout","MaterialSectionTab","Affix","MaterialFileTab","AddMaterialOpenDate","AddMaterialSafetyInstructionTab","AddMaterialFile","InvenotryTransaction","mapStateToProps","state","Login","MaterialInventory","Component","constructor","props","expandChange","event","isExpanded","dataItem","expanded","undefined","aggregates","setState","paneSizeChange","d","splitChangeWidthPercentage","quantityTransaction","param","masterData","jsondata","ntranscode","QUARANTINE","ncontrolCode","openModal","updateInfo","typeName","data","userInfo","warn","intl","formatMessage","id","accordianDesign","selectedmasterlistmain","SelectedMaterialInventory","push","designaccordian","selectedTemplate","sjsonobjstr","map","row","children","column","component","inputtype","label","length","YES","hasOwnProperty","componentrow","onComboChangeopendate","comboData","control","selectedRecord","onComboChangedynamic","customName","comboName","parent","Layout","QuantityTransactionTemplate","comboComponents","parentcolumnlist","columnList","childColumnList","val","inputParem","child","source","primarykeyField","valuemember","value","item","templateData","Object","keys","viewMaterialInventoryDetails","showModalPopup","ModaTitle","closeModalShow","handleDateChange","dateValue","dateName","onTabChange","tabProps","screenName","onDropMaterialFile","attachedFiles","fieldName","maxSize","actionType","deleteAttachment","file","onSaveMaterialFile","acceptedFiles","sfilename","nattachmenttypecode","isFileEdited","NO","testFileArray","testFile","nmaterialcode","SelectedMaterial","nmaterialfilecode","nstatus","ACTIVE","ndefaultstatus","LINK","formData","FormData","FTP","Array","isArray","forEach","index","tempData","assign","splittedFileName","name","split","fileExtension","ssystemfilename","filesystemfileext","uniquefilename","ntestfilecode","sdescription","trim","NA","size","append","nfilesize","slinkfilename","slinkdescription","nlinkcode","JSON","stringify","inputParam","operation","inputData","userinfo","isFileupload","classUrl","methodUrl","dynamicmandatoryFeilds","mandatoryFeildsMaterial","mandatory","tabDetail","tabMap","Map","dataresultarr","temp","set","controlMap","userRoleControlRights","sectionDataState","skip","take","screenname","dataState","getTestDetails","deleteRecordmain","MaterialFile","viewMaterialFile","settings","deleteParam","selected","methodDataState","instrumentCatDataState","toLowerCase","nformcode","loadEsign","screenData","ConfirmDelete","deleteId","confirmMessage","confirm","handleClickDelete","openFilter","showFilter","closeFilter","onFilterSubmit","searchRef","current","selectedcombo","materialCatList","selectedMaterialcombo","selectedMaterialCat","displayName","handlePageChange","e","validateEsign","sreason","password","filedata","materialfile","closeModal","showMaterialSection","isneedcombomulti","selectedId","onComboChange","inputParamcombo","nmaterialtypecode","nmaterialcatcode","displaymember","withoutCombocomponent","comboitem","availableDatas","onInputOnChange","optional1","optional2","target","type","checked","DEACTIVE","saveClick","IDS_OPENDATE","tzIDS_OPENDATE","SelectedMaterialType","SelectedMaterialCategory","SelectedMaterialCrumb","nmaterialinventorycode","onSaveClick","saveType","formRef","varmain","postParam","RELEASED","copyScreenRights","ConfirmComponent","parseFloat","dynamicobj","toString","IDS_TRANSACTIONTYPE","IDS_AVAILABLEQUANTITY","navailableqty","IDS_INVENTORYID","nprecision","MaterialProperties","nmaterialpropertycode","newarr","newarrobj","nmaterialsectioncode","nmaterialsectioncodeprimaryKeyValue","onNumericInputChange","copyAlertSave","reloadData","parseInt","searchFieldList","feild","jsonfeild","masterStatus","error","isOpen","ScreenRightsData","userRoleData","filterCatList","SelectedScreenrights","selectedMaterialCatRole","isSelectedRecordChange","selectedListmasterSwitch","custombuttonstate","ControlRightsParent","ControlRights","ConfirmDialogScreen","showAccordian","dataResult","columnName","rowIndex","createRef","ControlButton","getDerivedStateFromProps","render","console","log","ScreenRights","searchedData","addId","has","get","ncontrolcode","editId","releaseId","retireId","openDateId","viewId","addParameterId","masterlistmain","i","searchedDatalistmain","mandatoryFieldsMaterialFile","filterParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","isjsondata","mandatoryFieldsMaterialSection","breadCrumbData","filterData","master","MaterialComboList","handleChange","timeZoneList","componentDidMount","parentHeight","height","clientHeight","firstPane","generateBreadCrumData","smaterialtypename","smaterialcatname","smaterialname","componentDidUpdate","previousProps","bool","values","MaterialType","userrole","MaterialCategoryMain","MaterialCombo","MaterialComboArr","componentWillUnmount","modalName","RETIRED","fieldArray","primaryKeyValue"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { Row, Col, Nav, Card, Button, FormGroup, FormLabel } from 'react-bootstrap';\r\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport { toast } from 'react-toastify';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrashAlt, faSave, faCopy, faPlus, faSync, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport Esign from '../audittrail/Esign';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport ModalShow from '../../components/ModalShow.jsx';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component'\r\nimport { showEsign, getControlMap, constructOptionList, sortData, getSameRecordFromTwoArrays, onDropAttachFileList, deleteAttachmentDropZone, create_UUID, constructjsonOptionList, convertDateTimetoString, rearrangeDateFormat, comboChild } from '../../components/CommonScript';\r\n\r\nimport {\r\n    callService, updateStore, crudMaster, filterColumnData, validateEsignCredential, viewAttachment\r\n\r\n} from '../../actions';\r\nimport {\r\n    addSafetyInstructions, getAddMaterialPopup, getMaterialDetails, addMaterialProperty,\r\n    getMaterialEdit, getMaterialByTypeCode, getAddMaterialSectionPopup, getMaterialSectionEdit, addMaterialFile\r\n} from '../../actions/MaterialAction';\r\n\r\nimport {\r\n    initialcombochangeget, getMaterialInventoryByID,\r\n    getAddMaterialInventoryPopup, getMaterialInventoryDetails,\r\n    updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getMaterialChildValues, getQuantityTransactionOnchange\r\n} from '../../actions/MaterialInventoryAction';\r\n\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { transactionStatus, attachmentType } from '../../components/Enumeration';\r\nimport { ContentPanel, AtSubCard, ReadOnlyText } from '../../components/App.styles';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport MaterialFilter from './MaterialFilter';\r\nimport DynamicSlideout from '../dynamicpreregdesign/DynamicSlideout';\r\nimport MaterialSectionTab from './MaterialSectionTab';\r\nimport { Affix } from 'rsuite';\r\nimport MaterialFileTab from './MaterialFileTab';\r\nimport AddMaterialOpenDate from './AddMaterialOpenDate';\r\nimport AddMaterialSafetyInstructionTab from './AddMaterialSafetyInstructionTab';\r\nimport AddMaterialFile from './AddMaterialFile';\r\nimport InvenotryTransaction from './InvenotryTransaction';\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass MaterialInventory extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const dataState = {\r\n            skip: 0,\r\n            take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n        this.searchFieldList = [{ feild: \"IDS_MATERIALNAME\", jsonfeild: \"jsondata\" }]\r\n        this.state = {\r\n            masterStatus: \"\",\r\n            sectionDataState: { skip: 0, take: 10 },\r\n            error: \"\",\r\n            isOpen: false,\r\n            ScreenRightsData: [], userRoleData: [],\r\n            availableDatas: [],\r\n            selectedRecord: {},\r\n            filterCatList: [],\r\n            operation: \"\",\r\n            comboitem: undefined,\r\n            screenName: undefined,\r\n            SelectedScreenrights: undefined,\r\n            selectedcombo: undefined, selectedMaterialCatRole: undefined,\r\n            isSelectedRecordChange: false,\r\n            selectedMaterialCat: undefined,\r\n            materialCatList: [],\r\n            selectedListmasterSwitch: undefined,\r\n            custombuttonstate: false,\r\n            ControlRightsParent: [],\r\n\r\n\r\n            userRoleControlRights: [],\r\n            ControlRights: undefined,\r\n            ConfirmDialogScreen: false,\r\n            controlMap: new Map(),\r\n            showAccordian: true,\r\n            dataResult: [],\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            dataState: dataState,\r\n            columnName: '',\r\n            rowIndex: 0,\r\n            data: [],\r\n            splitChangeWidthPercentage: 30,\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.ControlButton = [{ value: 1, label: this.props.intl.formatMessage({ id: \"IDS_ENABLEALLCONTROLRIGHTS\" }) },\r\n        { value: 2, label: this.props.intl.formatMessage({ id: \"IDS_DISABLEALLCONTROLRIGHTS\" }) },\r\n        { value: 3, label: this.props.intl.formatMessage({ id: \"IDS_ENABLEALLESIGNRIGHTS\" }) },\r\n        { value: 4, label: this.props.intl.formatMessage({ id: \"IDS_DISABLEALLESIGNRIGHTS\" }) }\r\n        ];\r\n        this.confirmMessage = new ConfirmMessage();\r\n    }\r\n\r\n    expandChange = event => {\r\n        const isExpanded =\r\n            event.dataItem.expanded === undefined\r\n                ? event.dataItem.aggregates\r\n                : event.dataItem.expanded;\r\n        event.dataItem.expanded = !isExpanded;\r\n        this.setState({ ...this.state });\r\n    };\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n        if (props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        return null;\r\n    }\r\n\r\n\r\n    paneSizeChange = (d) => {\r\n        this.setState({\r\n            splitChangeWidthPercentage: d\r\n        })\r\n    }\r\n    render() {\r\n        console.log('Master Material Inventory :', this.props.Login.masterData)\r\n        this.props.Login.masterData.ScreenRights && sortData(this.props.Login.masterData.ScreenRights, '', 'nusersrolehidescreencode')\r\n        const searchedData = this.props.Login.masterData.searchedData\r\n        const ScreenRights = this.props.Login.masterData.ScreenRights || [];\r\n        const addId = this.state.controlMap.has(\"AddMaterialInventory\") && this.state.controlMap.get(\"AddMaterialInventory\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditMaterialInventory\") && this.state.controlMap.get(\"EditMaterialInventory\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteMaterialInventory\") && this.state.controlMap.get(\"DeleteMaterialInventory\").ncontrolcode;\r\n        const releaseId = this.state.controlMap.has(\"ReleaseMaterialInventory\") && this.state.controlMap.get(\"ReleaseMaterialInventory\").ncontrolcode;\r\n        const retireId = this.state.controlMap.has(\"RetireMaterialInventory\") && this.state.controlMap.get(\"RetireMaterialInventory\").ncontrolcode;\r\n        const openDateId = this.state.controlMap.has(\"OpenDateMaterialInventory\") && this.state.controlMap.get(\"OpenDateMaterialInventory\").ncontrolcode;\r\n        const viewId = this.state.controlMap.has(\"ViewMaterialInventory\") && this.state.controlMap.get(\"ViewMaterialInventory\").ncontrolcode;\r\n\r\n        const addParameterId = this.state.controlMap.has(\"AddMaterialSafetyInstructions\")\r\n            && this.state.controlMap.get(\"AddMaterialSafetyInstructions\").ncontrolcode;\r\n        const addMaterialProperty = this.state.controlMap.has(\"AddMaterialProperties\")\r\n            && this.state.controlMap.get(\"AddMaterialProperties\").ncontrolcode;\r\n\r\n\r\n        let masterlistmain = []\r\n        this.props.Login.masterData.MaterialInventory &&\r\n            this.props.Login.masterData.MaterialInventory.map((temp, i) => {\r\n                return masterlistmain.push(this.props.Login.masterData.MaterialInventory[i].jsondata)\r\n            })\r\n        let searchedDatalistmain = []\r\n\r\n        if (this.props.Login.masterData.searchedData === undefined) {\r\n            searchedDatalistmain = undefined\r\n        } else {\r\n            this.props.Login.masterData.searchedData &&\r\n                this.props.Login.masterData.searchedData.map((temp, i) => {\r\n                    return searchedDatalistmain.push(this.props.Login.masterData.searchedData[i].jsondata)\r\n                })\r\n        }\r\n\r\n\r\n        let searchFieldList = []\r\n        let mandatoryFieldsMaterialFile = []\r\n        if (this.props.Login.masterData.SelectedMaterialType) {\r\n            if (this.props.Login.masterData.SelectedMaterialType.length > 0) {\r\n                if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n                else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n                else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\r\n                    searchFieldList = [{\r\n                        feild: \"IDS_INVENTORYID\", jsonfeild: \"jsondata\"\r\n                    }]\r\n                }\r\n            }\r\n        }\r\n        const filterParam = {\r\n            inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\", primaryKeyField: \"nmaterialinventorycode\",\r\n            fetchUrl: \"materialinventory/getMaterialInventorySearchByID\",\r\n            fecthInputObject: { userinfo: this.props.Login.userInfo, nmaterialtypecode: this.props.Login.masterData.SelectedMaterialType && this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode },\r\n            masterData: this.props.Login.masterData,\r\n            isjsondata: true,\r\n            searchFieldList: searchFieldList\r\n        };\r\n\r\n        //let mandatoryFieldsMaterialFile = []\r\n        this.props.Login.screenname === 'IDS_MATERIALFILE' && (this.props.Login.selectedRecord &&\r\n            this.props.Login.selectedRecord.nattachmenttypecode === attachmentType.LINK) ?\r\n            mandatoryFieldsMaterialFile = [\r\n                { \"idsName\": \"IDS_FILENAME\", \"dataField\": \"slinkfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n                { \"idsName\": \"IDS_LINKNAME\", \"dataField\": \"nlinkcode\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" }\r\n            ]\r\n            :\r\n            mandatoryFieldsMaterialFile = [\r\n                { \"idsName\": \"IDS_FILE\", \"dataField\": \"sfilename\", \"mandatory\": true, \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"file\" },\r\n            ]\r\n\r\n        const mandatoryFieldsMaterialSection = [\r\n            {\r\n                \"mandatory\": false, \"idsName\": \"IDS_MATERIALSECTION\", \"dataField\": \"nmaterialsectioncode\",\r\n                \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n            }\r\n        ];\r\n\r\n        console.log('master data List INV : ', masterlistmain);\r\n        const breadCrumbData = this.state.filterData || [];\r\n        return (\r\n            <>\r\n                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb  fixed_breadcrumd \">\r\n                    {breadCrumbData.length > 0 ?\r\n                        <Affix top={64}>\r\n                            <BreadcrumbComponent breadCrumbItem={breadCrumbData} />\r\n                        </Affix>\r\n                        : \"\"\r\n                    }\r\n                    <Row noGutters>\r\n                        <Col md={4} >\r\n\r\n                            <ListMaster\r\n                                formatMessage={this.props.intl.formatMessage}\r\n                                screenName={\"MaterialInventory\"}\r\n                                masterData={this.props.Login.masterData}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterList={searchedDatalistmain || masterlistmain}\r\n                                getMasterDetail={(master) => this.props.getMaterialInventoryDetails(master, this.props.Login.masterData, this.props.Login.userInfo)}\r\n                                selectedMaster={this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.jsondata}\r\n                                primaryKeyField=\"nmaterialinventorycode\"\r\n                                mainField=\"IDS_INVENTORYID\"\r\n                                firstField=\"smaterialname\"\r\n                                secondField=\"status\"\r\n                                isIDSField=\"Yes\"\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                filterParam={filterParam}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                addId={addId}\r\n                                viewId={viewId}\r\n                                searchRef={this.searchRef}\r\n                                reloadData={this.reloadData}\r\n                                hidePaging={false}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                showFilterIcon={true}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                viewMaterialInventoryDetails={this.viewMaterialInventoryDetails}\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\":\r\n                                            <MaterialFilter\r\n                                                filterCatList={this.state.filterCatList || []}\r\n                                                materialCatList={this.state.materialCatList || []}\r\n                                                MaterialComboList={this.state.MaterialComboList || []}\r\n                                                selectedRecord={this.state.selectedcombo || {}}//\r\n                                                selectedMaterialCat={this.state.selectedMaterialCat || {}}\r\n                                                selectedMaterialcombo={this.state.selectedMaterialcombo || {}}\r\n                                                onComboChange={this.onComboChange}\r\n                                                ismaterialInventory={true}\r\n                                            />\r\n                                    }\r\n                                ]}\r\n                                openModal={() => this.props.getAddMaterialInventoryPopup(\"IDS_MATERIALINVENTORY\",\r\n                                    \"create\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb,\r\n                                    this.state.selectedMaterialCat, addId, this.props.Login.masterData,\r\n                                    this.state.selectedRecord)}\r\n                            />\r\n                        </Col>\r\n                        <Col md='8'>\r\n                            <Row>\r\n                                <Col md={12}>\r\n                                    <ContentPanel className=\"panel-main-content\">\r\n                                        {this.props.Login.masterData.MaterialInventory && this.props.Login.masterData.MaterialInventory.length > 0 && this.props.Login.masterData.SelectedMaterialInventory ?\r\n                                            <Card className=\"border-0\">\r\n                                                <Card.Header>\r\n                                                    <Card.Title className=\"product-title-main\">{this.props.intl.formatMessage({ id: \"IDS_MATERIALINVENTORY\" })}</Card.Title>\r\n                                                    <Card.Subtitle>\r\n                                                        <div className=\"d-flex product-category\">\r\n                                                            <h2 className=\"product-title-sub flex-grow-1\">\r\n\r\n                                                            </h2>\r\n                                                            <div className=\"d-inline \">\r\n                                                                <ReactTooltip place=\"bottom\" globalEventOff='click' id=\"tooltip_list_wrap\" />\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.openDatePopup(this.props.Login.masterData)\r\n                                                                    }\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_OPENDATE\" })} />\r\n                                                                </Nav.Link>\r\n\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.updateMaterialStatus(\r\n                                                                            this.props.Login.masterData, this.props.Login.userInfo,\r\n                                                                            retireId, 2)\r\n                                                                    }\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RETIRE\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_RELEASED\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.updateMaterialStatus(\r\n                                                                            this.props.Login.masterData, this.props.Login.userInfo,\r\n                                                                            releaseId, 1)\r\n                                                                    }\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_RELEASED\" })} />\r\n                                                                </Nav.Link>\r\n\r\n\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2\" href=\"#\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={(e) =>\r\n                                                                        this.props.getAddMaterialInventoryPopup(\"IDS_MATERIALINVENTORY\",\r\n                                                                            \"update\", this.props.Login.userInfo, this.props.Login.masterData.SelectedMaterialCrumb,\r\n                                                                            this.state.selectedMaterialCat, editId, this.props.Login.masterData,\r\n                                                                            this.state.selectedRecord)\r\n                                                                    }\r\n                                                                >\r\n\r\n                                                                    <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                        title={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })} />\r\n                                                                </Nav.Link>\r\n\r\n                                                                <Nav.Link className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\" href=\"\"\r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                    data-for=\"tooltip_list_wrap\"\r\n                                                                    onClick={() => this.ConfirmDelete(deleteId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faTrashAlt} />\r\n\r\n                                                                </Nav.Link>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </Card.Subtitle>\r\n                                                </Card.Header>\r\n                                                <Card.Body>\r\n                                                    <Row>\r\n                                                    </Row>\r\n                                                    {this.props.Login.masterData && <CustomTab tabDetail={this.tabDetail()} onTabChange={this.onTabChange} />}\r\n                                                </Card.Body>\r\n                                            </Card> : \"\"}\r\n                                    </ContentPanel>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                { }\r\n                {\r\n                    this.props.Login.openModal &&\r\n                    <SlideOutModal show={this.props.Login.openModal}\r\n                        closeModal={this.closeModal}\r\n                        operation={this.props.Login.screenname === 'IDS_MATERIALSAFETYINSTRUCTIONS' ? '' :\r\n                            this.props.Login.screenname === 'IDS_MATERIALPROPERTY' ? '' :\r\n                                this.props.Login.operation}\r\n                        inputParam={this.props.Login.inputParam}\r\n                        screenName={this.props.Login.screenname}\r\n                        onSaveClick={this.onSaveClick}\r\n                        esign={this.props.Login.loadEsign}\r\n                        validateEsign={this.validateEsign}\r\n                        masterStatus={this.props.Login.masterStatus}\r\n                        selectedRecord={this.state.selectedRecord || {}}\r\n                        // mandatoryFields={this.props.Login.screenname === 'IDS_MATERIALINVENTORY' ? mandatoryFieldsMaterialInventory : ''}\r\n                        mandatoryFields={this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1\r\n                            || this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 ||\r\n                            this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) && this.dynamicmandatoryFeilds()\r\n                            : ''}\r\n                        updateStore={this.props.updateStore}\r\n                        addComponent={\r\n                            this.props.Login.loadEsign ?\r\n                                <Esign operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                :\r\n                                // this.props.Login.screenname !== \"IDS_MATERIALFILE\" ?\r\n                                //     this.props.Login.screenname !== 'IDS_MATERIALPROPERTY' ?\r\n                                //         this.props.Login.screenname !== 'IDS_MATERIALSAFETYINSTRUCTIONS' ?\r\n                                //             this.props.Login.showMaterialSection ?\r\n                                //                 <AddMaterialSection\r\n                                //                     selectedRecord={this.props.Login.selectedRecord || {}}\r\n                                //                     onInputOnChange={this.onInputOnChange}\r\n                                //                     MaterialSectionCombodata={this.props.Login.masterData.MaterialSection && this.props.Login.masterData.MaterialSection}\r\n                                //                     onNumericInputChange={this.onNumericInputChange}\r\n                                //                     onComboChange={this.onComboChange}\r\n                                //                     isDisabled={this.props.Login.isneedcombomulti && this.props.Login.isneedcombomulti}\r\n                                //                     ismaterialsectionEdit={this.props.Login.ismaterialsectionEdit}\r\n                                //                     // parameterData={this.props.parameterData}\r\n                                //                     comboData={this.props.Login.masterData.productCategoryList}\r\n                                //                 />\r\n                                //                 :\r\n\r\n                                <DynamicSlideout\r\n                                    selectedRecord={this.state.selectedRecord}\r\n                                    templateData={this.props.Login.screenname !== 'IDS_QUANTITYTRANSACTION' ? this.props.Login.masterData.selectedTemplate &&\r\n                                        this.props.Login.masterData.selectedTemplate[0].sjsonobjstr\r\n                                        : this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr}\r\n                                    onNumericInputChange={this.onNumericInputChange}\r\n                                    handleChange={this.handleChange}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    comboData={this.props.Login.templateData && this.props.Login.templateData.comboData}\r\n                                    onComboChange={this.onComboChangedynamic}\r\n                                    userInfo={this.props.Login.userInfo}\r\n                                    handleDateChange={this.handleDateChange}\r\n                                    timeZoneList={this.props.Login.timeZoneList}\r\n                                />\r\n                            //         :\r\n                            //         <DynamicSlideout\r\n                            //             selectedRecord={this.props.Login.selectedRecord}\r\n                            //             templateData={this.props.Login.masterData.selectedTemplateSafetyInstructions &&\r\n                            //                 this.props.Login.masterData.selectedTemplateSafetyInstructions[0].sjsonobjstr}\r\n                            //             handleChange={this.handleChange}\r\n                            //             onInputOnChange={this.onInputOnChange}\r\n                            //         />\r\n                            //     :\r\n                            //     <DynamicSlideout\r\n                            //         selectedRecord={this.props.Login.selectedRecord}\r\n                            //         templateData={this.props.Login.masterData.selectedTemplateProperties &&\r\n                            //             this.props.Login.masterData.selectedTemplateProperties[0].sjsonobjstr}\r\n                            //         userInfo={this.props.Login.userInfo}\r\n                            //         handleChange={this.handleChange}\r\n                            //         onInputOnChange={this.onInputOnChange}\r\n                            //         handleDateChange={this.handleDateChange}\r\n                            //     /> :\r\n\r\n                            // <AddMaterialFile\r\n                            //     selectedRecord={this.state.selectedRecord || {}}\r\n                            //     onInputOnChange={this.onInputOnChange}\r\n                            //     onDrop={this.onDropMaterialFile}\r\n                            //     deleteAttachment={this.deleteAttachment}\r\n                            //     onComboChange={this.onComboChange}\r\n                            //     linkMaster={this.props.Login.linkMaster}\r\n                            //     maxSize={20}\r\n                            //     maxFiles={1}\r\n                            //     multiple={false}\r\n                            //     label={this.props.intl.formatMessage({ id: \"IDS_MATERIALFILE\" })}\r\n                            //     name=\"testfilename\"\r\n                            // />\r\n                        }\r\n                    />\r\n\r\n\r\n\r\n                }\r\n                {this.props.Login.showModalPopup &&\r\n                    <ModalShow\r\n                        modalShow={true}\r\n                        modalTitle={this.props.intl.formatMessage({ id: this.props.Login.ModaTitle })}\r\n                        needSave={this.props.Login.ModaTitle === 'IDS_OPENDATE' ? false : true}\r\n                        closeModal={this.closeModalShow}\r\n                        onSaveClick={this.props.Login.ModaTitle === 'IDS_OPENDATE' && this.saveClick}\r\n                        validateEsign={this.validateEsign}\r\n                        //needSave={ this.props.Login.ModaTitle === 'IDS_OPENDATE'?transactionStatus.YES:transactionStatus.NO}\r\n                        modalBody={\r\n                            this.props.Login.ModaTitle === 'IDS_OPENDATE' ? <AddMaterialOpenDate\r\n                                isMultiLingualLabel={true}\r\n                                label={'IDS_OPENDATE'}\r\n                                intl={this.props.intl.formatMessage}\r\n                                selectedRecord={this.state.selectedRecord}\r\n                                dateonly={true}\r\n                                onComboChange={this.onComboChangeopendate}\r\n                                userInfo={this.props.Login.userInfo}\r\n                                handleDateChange={this.handleDateChange}\r\n                                timeZoneList={this.props.Login.timeZoneList}\r\n                            /> :\r\n                                <Row>\r\n                                    <Col md='4'>\r\n                                        <FormGroup>\r\n                                            <FormLabel><FormattedMessage id={'IDS_INVENTORYID'} message={'Inventory ID'} /></FormLabel>\r\n                                            <ReadOnlyText>\r\n                                                {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                    this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] ?\r\n                                                    this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_INVENTORYID'] : \"-\"}\r\n                                            </ReadOnlyText>\r\n\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                    {this.accordianDesign()}\r\n                                    <Col md='4'>\r\n                                        <FormGroup>\r\n                                            <FormLabel><FormattedMessage id={'IDS_OPENDATE'} message={'Open Date'} /></FormLabel>\r\n                                            <ReadOnlyText>\r\n                                                {this.props.Login.masterData.SelectedMaterialInventory.jsondata &&\r\n                                                    this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] ?\r\n                                                    this.props.Login.masterData.SelectedMaterialInventory.jsondata['IDS_OPENDATE'] : \"-\"}\r\n                                            </ReadOnlyText>\r\n\r\n                                        </FormGroup>\r\n                                    </Col>\r\n                                </Row>\r\n                        }\r\n                    />\r\n                }\r\n\r\n            </>\r\n        );\r\n    }\r\n    quantityTransaction = (param) => {\r\n        if (this.props.Login.masterData['SelectedMaterialInventory'].jsondata.ntranscode !== transactionStatus.QUARANTINE) {\r\n            let ncontrolCode = this.props.Login.ncontrolCode\r\n            let openModal = this.props.Login.openModal\r\n            openModal = true\r\n            ncontrolCode = param;\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { openModal }\r\n            }\r\n            this.props.getQuantityTransactionPopup(this.props.Login.masterData, this.props.Login.userInfo, updateInfo, ncontrolCode)\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTRELEASEDINVENTORY\" }));\r\n\r\n        }\r\n    }\r\n    accordianDesign = () => {\r\n        let selectedmasterlistmain = [];\r\n        this.props.Login.masterData.SelectedMaterialInventory && this.props.Login.masterData.SelectedMaterialInventory.jsondata !== undefined &&\r\n            selectedmasterlistmain.push(this.props.Login.masterData.SelectedMaterialInventory.jsondata)\r\n\r\n        let designaccordian = [];\r\n        this.props.Login.masterData.selectedTemplate[0].sjsonobjstr.map((row) => {\r\n            row.children.map((column) => {\r\n                column.children.map((component) => {\r\n                    if (component.inputtype === 'combo') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ?\r\n                                            selectedmasterlistmain[0][component.label]['label'] : \"\"}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else if (component.inputtype === 'date') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ?\r\n                                            selectedmasterlistmain[0][component.label] : \"-\"}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else if (component.inputtype === 'toggle') {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] &&\r\n                                            selectedmasterlistmain[0][component.label] === transactionStatus.YES ?\r\n                                            'Yes' : 'No'}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (component.label !== undefined) {\r\n                            designaccordian.push(<Col md={4}>\r\n                                <FormGroup>\r\n                                    <FormLabel><FormattedMessage id={[component.label]} message={[component.label]} /></FormLabel>\r\n                                    <ReadOnlyText>\r\n                                        {selectedmasterlistmain.length > 0 &&\r\n                                            selectedmasterlistmain[0][component.label] ? selectedmasterlistmain[0][component.label] : \"-\"}\r\n                                    </ReadOnlyText>\r\n\r\n                                </FormGroup>\r\n                            </Col>)\r\n                        }\r\n                    }\r\n                    component.hasOwnProperty(\"children\") && component.children.map((componentrow) => {\r\n                        if (componentrow.inputtype === 'combo') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label]['label'] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else if (componentrow.inputtype === 'date') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else if (componentrow.inputtype === 'toggle') {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] &&\r\n                                                selectedmasterlistmain[0][componentrow.label]['label'] === transactionStatus.YES ?\r\n                                                'Yes' : 'No'}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (componentrow.label !== undefined) {\r\n                                designaccordian.push(<Col md={4}>\r\n                                    <FormGroup>\r\n                                        <FormLabel><FormattedMessage id={[componentrow.label]} message={[componentrow.label]} /></FormLabel>\r\n                                        <ReadOnlyText>\r\n                                            {selectedmasterlistmain.length > 0 &&\r\n                                                selectedmasterlistmain[0][componentrow.label] ?\r\n                                                selectedmasterlistmain[0][componentrow.label] : \"-\"}\r\n                                        </ReadOnlyText>\r\n\r\n                                    </FormGroup>\r\n                                </Col>)\r\n                            }\r\n                        }\r\n                    }\r\n                    )\r\n                })\r\n            })\r\n        })\r\n        return designaccordian;\r\n    }\r\n    onComboChangeopendate = (comboData, control) => {\r\n\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[control] = comboData;\r\n        this.setState({ selectedRecord });\r\n\r\n\r\n    }\r\n    onComboChangedynamic = (comboData, control, customName) => {\r\n        let comboName = customName || control.label;\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (comboData) {\r\n            selectedRecord[comboName] = comboData;\r\n        } else {\r\n            selectedRecord[comboName] = []\r\n        }\r\n        if (control.inputtype === 'date') {\r\n            const selectedRecord = this.state.selectedRecord || {};\r\n            selectedRecord[`tz${control.label}`] = comboData;\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else if (control.parent && control.parent === true) {\r\n            let data = [];\r\n            const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr\r\n            Layout.map((row) => {\r\n                row.children.map((column) => {\r\n                    column.children.map((component) => {\r\n                        if (component.inputtype === 'combo') {\r\n                            data.push(component)\r\n                        }\r\n                        component.hasOwnProperty(\"children\") && component.children.map(\r\n                            (componentrow) => {\r\n                                if (componentrow.inputtype === 'combo') {\r\n                                    data.push(componentrow)\r\n                                }\r\n                            }\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            const comboComponents = data\r\n            let parentcolumnlist = []\r\n            comboComponents.map(columnList => {\r\n                if (columnList.hasOwnProperty('child')) {\r\n                    parentcolumnlist.push(columnList)\r\n                }\r\n            })\r\n            let childColumnList = {};\r\n            parentcolumnlist.map(columnList => {\r\n                const val = comboChild(data, columnList, childColumnList, true);\r\n                data = val.data;\r\n                childColumnList = val.childColumnList\r\n            })\r\n            const inputParem = {\r\n                child: control.child,\r\n                source: control.source,\r\n                primarykeyField: control.valuemember,\r\n                value: comboData.value,\r\n                item: comboData.item\r\n            }\r\n            this.props.getMaterialChildValues(inputParem,\r\n                this.props.Login.userInfo, selectedRecord,\r\n                parentcolumnlist, childColumnList, this.props.Login.templateData.comboData, Object.keys(childColumnList)[0]\r\n                , childColumnList[Object.keys(childColumnList)[0]][0].label, this.props.Login.masterData)\r\n        }\r\n        else {\r\n            if (control.label === 'IDS_TRANSACTIONTYPE') {\r\n                this.props.getQuantityTransactionOnchange(comboData, this.props.Login.masterData,\r\n                    this.props.Login.userInfo, selectedRecord, this.props.Login.templateData)\r\n            }\r\n            else {\r\n                selectedRecord[control.label] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n        }\r\n\r\n    }\r\n    viewMaterialInventoryDetails = () => {\r\n        let showModalPopup = this.props.Login.showModalPopup;\r\n        let ModaTitle = this.props.Login.ModaTitle;\r\n        showModalPopup = true;\r\n        ModaTitle = 'IDS_MATERIALINVENTORYDETAILS'\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showModalPopup, ModaTitle }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    closeModalShow = () => {\r\n        let showModalPopup = this.props.Login.showModalPopup;\r\n        showModalPopup = false;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showModalPopup }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const { selectedRecord } = this.state;\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { screenName }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onDropMaterialFile = (attachedFiles, fieldName, maxSize) => {\r\n\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = onDropAttachFileList(selectedRecord[fieldName], attachedFiles, maxSize)\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n    deleteAttachment = (event, file, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = deleteAttachmentDropZone(selectedRecord[fieldName], file)\r\n\r\n        this.setState({\r\n            selectedRecord, actionType: \"delete\"\r\n        });\r\n    }\r\n    onSaveMaterialFile = () => {\r\n        const selectedRecord = this.state.selectedRecord;\r\n        const acceptedFiles = selectedRecord.sfilename;\r\n        const nattachmenttypecode = selectedRecord.nattachmenttypecode;\r\n        let isFileEdited = transactionStatus.NO;\r\n        let testFileArray = [];\r\n        let testFile = {\r\n            nmaterialcode: this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode,\r\n            nmaterialfilecode: selectedRecord.nmaterialfilecode ? selectedRecord.nmaterialfilecode : 0,\r\n            nstatus: transactionStatus.ACTIVE,\r\n            nattachmenttypecode,\r\n            ndefaultstatus: selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] ? selectedRecord[nattachmenttypecode === attachmentType.LINK ? \"nlinkdefaultstatus\" : \"ndefaultstatus\"] : 4\r\n        };\r\n        const formData = new FormData();\r\n        if (nattachmenttypecode === attachmentType.FTP) {\r\n            if (acceptedFiles && Array.isArray(acceptedFiles) && acceptedFiles.length > 0) {\r\n                acceptedFiles.forEach((file, index) => {\r\n                    const tempData = Object.assign({}, testFile);\r\n                    const splittedFileName = file.name.split('.');\r\n                    const fileExtension = file.name.split('.')[splittedFileName.length - 1];\r\n                    const ssystemfilename = selectedRecord.ssystemfilename ? selectedRecord.ssystemfilename.split('.') : \"\";\r\n                    const filesystemfileext = selectedRecord.ssystemfilename ? file.name.split('.')[ssystemfilename.length - 1] : \"\";\r\n                    const uniquefilename = nattachmenttypecode === attachmentType.FTP ? selectedRecord.ntestfilecode && selectedRecord.ntestfilecode > 0\r\n                        && selectedRecord.ssystemfilename !== \"\" ? ssystemfilename[0] + '.' + filesystemfileext : create_UUID() + '.' + fileExtension : \"\";\r\n                    tempData[\"sfilename\"] = file.name;\r\n                    tempData[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                    tempData[\"nlinkcode\"] = transactionStatus.NA;\r\n                    tempData[\"ssystemfilename\"] = uniquefilename;\r\n                    tempData[\"nfilesize\"] = file.size;\r\n                    formData.append(\"uploadedFile\" + index, file);\r\n                    formData.append(\"uniquefilename\" + index, uniquefilename);\r\n                    testFileArray.push(tempData);\r\n                });\r\n                formData.append(\"filecount\", acceptedFiles.length);\r\n                isFileEdited = transactionStatus.YES;\r\n            } else {\r\n                testFile[\"sfilename\"] = selectedRecord.sfilename;\r\n                testFile[\"sdescription\"] = selectedRecord.sdescription ? selectedRecord.sdescription.trim() : \"\";\r\n                testFile[\"nlinkcode\"] = transactionStatus.NA;\r\n                testFile[\"ssystemfilename\"] = selectedRecord.ssystemfilename;\r\n                testFile[\"nfilesize\"] = selectedRecord.nfilesize;\r\n                testFileArray.push(testFile);\r\n            }\r\n        } else {\r\n            testFile[\"sfilename\"] = selectedRecord.slinkfilename.trim();\r\n            testFile[\"sdescription\"] = selectedRecord.slinkdescription ? selectedRecord.slinkdescription.trim() : \"\";\r\n            testFile[\"nlinkcode\"] = selectedRecord.nlinkcode.value ? selectedRecord.nlinkcode.value : -1;\r\n            testFile[\"ssystemfilename\"] = \"\";\r\n            testFile[\"nfilesize\"] = 0;\r\n            testFileArray.push(testFile);\r\n        }\r\n        formData.append(\"isFileEdited\", isFileEdited);\r\n        formData.append(\"materialfile\", JSON.stringify(testFileArray[0]));\r\n\r\n        let inputParam;\r\n        if (this.props.Login.operation === 'create') {\r\n            inputParam = {\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"create\",\r\n                classUrl: \"material\",\r\n                methodUrl: \"MaterialFile\"\r\n            }\r\n        }\r\n        else {\r\n            inputParam = {\r\n                inputData: { userinfo: this.props.Login.userInfo },\r\n                formData: formData,\r\n                isFileupload: true,\r\n                operation: \"update\",\r\n                classUrl: \"material\",\r\n                methodUrl: \"MaterialFile\"\r\n            }\r\n        }\r\n\r\n        return inputParam;\r\n    }\r\n\r\n    dynamicmandatoryFeilds = () => {\r\n        let mandatoryFeildsMaterial = [];\r\n        this.props.Login.masterData.selectedTemplate &&\r\n            this.props.Login.masterData.selectedTemplate[0].sjsonobjstr.map((row) => {\r\n                row.children.map((column) => {\r\n                    column.children.map((component) => {\r\n                        if (component.mandatory) {\r\n                            if (component.inputtype === 'combo') {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    \"idsName\": [component.label], \"dataField\": [component.label],\r\n                                    \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n                            else {\r\n                                mandatoryFeildsMaterial.push({\r\n                                    \"idsName\": [component.label], \"dataField\": [component.label],\r\n                                    \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                                })\r\n                            }\r\n                        }\r\n                        component.hasOwnProperty(\"children\") && component.children.map((componentrow) => {\r\n                            if (componentrow.mandatory) {\r\n                                if (componentrow.inputtype === 'combo') {\r\n                                    mandatoryFeildsMaterial.push({\r\n                                        \"idsName\": [componentrow.label], \"dataField\": [componentrow.label],\r\n                                        \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\"\r\n                                    })\r\n                                }\r\n                                else {\r\n                                    mandatoryFeildsMaterial.push({\r\n                                        \"idsName\": [componentrow.label], \"dataField\": [componentrow.label],\r\n                                        \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"selectbox\"\r\n                                    })\r\n                                }\r\n                            }\r\n                        })\r\n                    })\r\n                })\r\n            })\r\n        return mandatoryFeildsMaterial;\r\n    }\r\n\r\n    tabDetail = () => {\r\n\r\n        const tabMap = new Map();\r\n        {\r\n            let dataresultarr = []\r\n            this.props.Login.masterData[\"MaterialInventoryTrans\"] &&\r\n                this.props.Login.masterData[\"MaterialInventoryTrans\"].map((temp) => {\r\n                    dataresultarr.push(temp.jsondata)\r\n                })\r\n            tabMap.set(\"IDS_INVENTORYTRANSACTION\",\r\n                <InvenotryTransaction\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    dataResult={process(dataresultarr,\r\n                        (this.props.screenName === undefined || this.props.screenName === \"IDS_QUANTITYTRANSACTION\")\r\n                            ? this.state.sectionDataState : { skip: 0, take: 10 })}\r\n                    dataState={(this.props.screenName === undefined || this.props.screenname === \"IDS_QUANTITYTRANSACTION\")\r\n                        ? this.state.sectionDataState : { skip: 0, take: 10 }}\r\n                    dataStateChange={(event) => this.setState({ sectionDataState: event.dataState })}\r\n                    masterData={this.props.Login.masterData}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    getTestDetails={this.props.getTestDetails}\r\n                    getAddMaterialSectionPopup={this.props.getAddMaterialSectionPopup}\r\n                    quantityTransaction={this.quantityTransaction}\r\n                    dataState={{ skip: 0, take: 10 }}\r\n                    deleteRecord={this.deleteRecordmain}\r\n                    fetchRecord={this.props.getMaterialSectionEdit}\r\n                    selectedRecord={this.props.Login.selectedRecord}\r\n\r\n                    screenName=\"IDS_QUANTITYTRANSACTION\"\r\n                />\r\n            );\r\n            tabMap.set(\"IDS_MATERIALINVENTORYFILE\",\r\n                <MaterialFileTab\r\n                    controlMap={this.state.controlMap}\r\n                    userRoleControlRights={this.state.userRoleControlRights}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    deleteRecord={this.deleteRecordmain}\r\n                    MaterialFile={this.props.Login.masterData.MaterialFile || []}\r\n                    addMaterialFile={this.props.addMaterialFile}\r\n                    viewMaterialFile={this.viewMaterialFile}\r\n                    screenName=\"IDS_MATERIALFILE\"\r\n                    settings={this.props.settings}\r\n                />);\r\n\r\n\r\n        }\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n\r\n    deleteRecordmain = (deleteParam) => {\r\n\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.methodUrl === 'MaterialSection' ? JSON.stringify(deleteParam.selectedRecord) :\r\n            JSON.stringify(deleteParam.selectedRecord[\"jsondata\"]);\r\n        let dataState = undefined;\r\n        if (this.props.screenName === \"IDS_SECTION\") {\r\n            dataState = this.state.sectionDataState;\r\n        } else if (this.props.screenName === \"IDS_METHOD\") {\r\n            dataState = this.state.methodDataState;\r\n        } else if (this.props.screenName === \"IDS_INSTRUMENTCATEGORY\") {\r\n            dataState = this.state.instrumentCatDataState;\r\n        }\r\n        const inputParam = {\r\n            inputData: {\r\n                ncontrolCode: deleteParam.ncontrolCode,\r\n                [methodUrl.toLowerCase()]: selected,\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"material\",\r\n            operation: deleteParam.operation,\r\n            ncontrolCode: deleteParam.ncontrolCode,\r\n            methodUrl: methodUrl,\r\n            screenName: \"IDS_MATERIAL\", dataState\r\n        }\r\n        const masterData = this.props.Login.masterData;\r\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadEsign: true, screenData: { inputParam, masterData },\r\n                    openModal: true, screenName: \"IDS_MATERIAL\", operation: deleteParam.operation, selectedRecord: {}\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            this.props.crudMaster(inputParam, masterData, \"openChildModal\", {});\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    ConfirmDelete = (deleteId) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.handleClickDelete(this.props.Login.masterData, deleteId, \"openModal\"));\r\n    }\r\n\r\n    openFilter = () => {\r\n        let showFilter = !this.props.Login.showFilter\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    closeFilter = () => {\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    onFilterSubmit = () => {\r\n        this.searchRef.current.value = \"\";\r\n        let inputData = [];\r\n        inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\r\n        inputData[\"materialCatList\"] = this.state.materialCatList;\r\n        inputData[\"nmaterialcode\"] = this.state.selectedMaterialcombo[\"nmaterialcode\"].value\r\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value\r\n        const inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"getMaterialInventoryByID\",\r\n            displayName: \"Material\",\r\n            inputData: inputData\r\n        }\r\n        if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\r\n            this.props.getMaterialInventoryByID(inputParam, this.state.selectedcombo,\r\n                this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.parentHeight) {\r\n            const height = this.parentHeight.clientHeight;\r\n            this.setState({\r\n                firstPane: height - 80,\r\n                parentHeight: height\r\n            });\r\n        }\r\n    }\r\n\r\n    generateBreadCrumData() {\r\n        const breadCrumbData = [];\r\n        breadCrumbData.push(\r\n            {\r\n                \"label\": \"IDS_MATERIALTYPE\",\r\n                \"value\": this.props.Login.masterData.SelectedMaterialType ? this.props.Login.masterData.SelectedMaterialType[0].smaterialtypename : \"NA\",\r\n\r\n            }, {\r\n\r\n            \"label\": \"IDS_MATERIALCAT\",\r\n            \"value\": this.props.Login.masterData.SelectedMaterialCategory ?\r\n                this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname !== undefined ?\r\n                    this.props.Login.masterData.SelectedMaterialCategory.smaterialcatname : \"NA\" : \"NA\",\r\n        }, {\r\n\r\n            \"label\": \"IDS_MATERIAL\",\r\n            \"value\": this.props.Login.masterData.SelectedMaterialCrumb ?\r\n                this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname !== undefined ?\r\n                    this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname : \"NA\" : \"NA\",\r\n        }\r\n        );\r\n        return breadCrumbData;\r\n    }\r\n\r\n    componentDidUpdate(previousProps) {\r\n        let bool = false;\r\n        let { selectedRecord, selectedcombo, comboitem, filterData, filterCatList, selectedMaterialCat, selectedMaterialcombo,\r\n            materialCatList, MaterialComboList } = this.state\r\n        const masterData = this.props.Login.masterData;\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            bool = true;\r\n            selectedRecord = this.props.Login.selectedRecord\r\n        }\r\n        if (this.props.Login.selectedMaterialCat !== previousProps.Login.selectedMaterialCat) {\r\n            bool = true;\r\n            selectedMaterialCat = this.props.Login.selectedMaterialCat\r\n        }\r\n\r\n\r\n        if (this.props.Login.comboitem !== previousProps.Login.comboitem) {\r\n            bool = true;\r\n            comboitem = this.props.Login.comboitem\r\n        }\r\n        if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n            const userRoleControlRights = [];\r\n            if (this.props.Login.userRoleControlRights) {\r\n                this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                    userRoleControlRights.push(item.ncontrolcode))\r\n            }\r\n\r\n            const controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n            this.setState({\r\n                userRoleControlRights, controlMap, data: this.props.Login.masterData.ControlRights\r\n            });\r\n        }\r\n        if (this.props.Login.masterData.MaterialType !== undefined) {\r\n            if (this.props.Login.masterData.MaterialType !== previousProps.Login.masterData.MaterialType) {\r\n                bool = true;\r\n                const userrole = constructOptionList(this.props.Login.masterData.MaterialType || [], \"nmaterialtypecode\",\r\n                    \"smaterialtypename\", undefined, undefined, undefined);\r\n                filterCatList = userrole.get(\"OptionList\");\r\n\r\n                selectedcombo = {\r\n                    nmaterialtypecode: masterData.MaterialType && masterData.MaterialType.length > 0 ? {\r\n                        \"value\": masterData.MaterialType[0].nmaterialtypecode,\r\n                        \"label\": masterData.MaterialType[0].smaterialtypename\r\n                    } : \"\"\r\n                }\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.MaterialCategoryMain !== previousProps.Login.masterData.MaterialCategoryMain) {\r\n            bool = true;\r\n            const MaterialCategoryMain = constructOptionList(this.props.Login.masterData.MaterialCategoryMain || [], \"nmaterialcatcode\",\r\n                \"smaterialcatname\", undefined, undefined, undefined);\r\n            materialCatList = MaterialCategoryMain.get(\"OptionList\");\r\n\r\n            selectedMaterialCat = {\r\n                nmaterialcatcode: masterData.MaterialCategoryMain && masterData.MaterialCategoryMain.length > 0 ? {\r\n                    \"value\": masterData.MaterialCategoryMain[0].nmaterialcatcode,\r\n                    \"label\": masterData.MaterialCategoryMain[0].smaterialcatname\r\n                } : \"\"\r\n            }\r\n        }\r\n        if (this.props.Login.masterData.MaterialCombo !== previousProps.Login.masterData.MaterialCombo) {\r\n\r\n            bool = true;\r\n            let MaterialComboArr = [];\r\n            this.props.Login.masterData.MaterialCombo.map((temp => {\r\n                MaterialComboArr.push(temp.jsondata)\r\n            }))\r\n            const MaterialCombo = constructOptionList(MaterialComboArr || [], \"nmaterialcode\",\r\n                \"smaterialname\", undefined, undefined, undefined);\r\n            MaterialComboList = MaterialCombo.get(\"OptionList\");\r\n            selectedMaterialcombo = {\r\n                nmaterialcode: masterData.MaterialCombo && masterData.MaterialCombo.length > 0 ? {\r\n                    \"value\": masterData.MaterialCombo[0][\"jsondata\"].nmaterialcode,\r\n                    \"label\": masterData.MaterialCombo[0][\"jsondata\"].smaterialname\r\n                } : \"\"\r\n            }\r\n        }\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            filterData = this.generateBreadCrumData();\r\n        }\r\n\r\n\r\n        if (this.props.Login.masterData.searchedData !== previousProps.Login.masterData.searchedData) {\r\n            if (this.props.Login.masterData.searchedData) {\r\n                if (this.props.Login.masterData.searchedData.length <= this.state.skip) {\r\n                    this.setState({ skip: 0 });\r\n                }\r\n            }\r\n        }\r\n\r\n        if (bool) {\r\n            this.setState({\r\n                selectedRecord, comboitem, filterData, selectedcombo, filterCatList, selectedMaterialCat, selectedMaterialcombo,\r\n                materialCatList, MaterialComboList\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handlePageChange = e => {\r\n\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n\r\n    };\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n        this.props.validateEsignCredential(inputParam, \"openModal\");\r\n    }\r\n    viewMaterialFile = (filedata) => {\r\n        const inputParam = {\r\n            inputData: {\r\n                materialfile: JSON.stringify(filedata['jsondata']),\r\n                userinfo: this.props.Login.userInfo\r\n            },\r\n            classUrl: \"material\",\r\n            operation: \"view\",\r\n            methodUrl: \"AttachedMaterialFile\",\r\n            screenname: \"IDS_MATERIAL\"\r\n        }\r\n        this.props.viewAttachment(inputParam);\r\n    }\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let showMaterialSection = this.props.Login.showMaterialSection\r\n        let isneedcombomulti = this.props.Login.isneedcombomulti;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"retire\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n        }\r\n        else {\r\n            openModal = false;\r\n            showMaterialSection = false;\r\n            isneedcombomulti = false;\r\n            selectedRecord = {};\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, showMaterialSection, loadEsign, selectedRecord, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        if (comboData != null) {\r\n            if (fieldName === \"nmaterialtypecode\") {\r\n                const selectedcombo = this.state.selectedcombo || {};\r\n                selectedcombo[fieldName] = comboData;\r\n                this.searchRef.current.value = \"\";\r\n                const inputParamcombo = {\r\n                    nmaterialtypecode: comboData.item.nmaterialtypecode\r\n                };\r\n\r\n                const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n                this.props.initialcombochangeget(comboData.item.nmaterialtypecode, undefined, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n            }\r\n            if (fieldName === \"nmaterialcode\") {\r\n                const selectedMaterialcombo = this.state.selectedMaterialcombo || {};\r\n                selectedMaterialcombo[\"nmaterialcode\"] = comboData;\r\n                this.setState({ selectedMaterialcombo });\r\n\r\n            }\r\n            else if (fieldName === \"nmaterialcatcode\") {\r\n                const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n                selectedMaterialCat[fieldName] = comboData;\r\n                // this.setState({ selectedMaterialCat });\r\n                this.props.initialcombochangeget(this.state.selectedcombo[\"nmaterialtypecode\"].value, comboData.item.nmaterialcatcode, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n            }\r\n\r\n            else if (fieldName === \"nmaterialsectioncode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nmaterialsectioncode\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (fieldName['valuemember'] === \"nstoragelocationcode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"IDS_STORAGELOCATION\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (fieldName['valuemember'] === \"nsuppliercode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"IDS_SUPPLIER\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (fieldName['valuemember'] === \"nmanufcode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"IDS_MANUFACTURER\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (fieldName['valuemember'] === \"nsectioncode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"IDS_SECTION\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (fieldName['valuemember'] === \"nmaterialgradecode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"IDS_GRADE\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n            else if (fieldName === \"nlinkcode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nlinkcode\"] = comboData;\r\n                this.setState({ selectedRecord });\r\n            }\r\n\r\n            else if (fieldName.displaymember === \"smaterialcatname\" || fieldName.displaymember === \"sunitname\" || fieldName.displaymember === \"speriodname\") {\r\n                const selectedMaterialCat = this.state.selectedMaterialCat || {};\r\n                selectedMaterialCat[fieldName] = comboData;\r\n                this.setState({ selectedMaterialCat });\r\n\r\n                let comboName = fieldName.label\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                if (comboData) {\r\n                    selectedRecord[comboName] = comboData;\r\n                } else {\r\n                    selectedRecord[comboName] = []\r\n                }\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n            else if (fieldName.label === \"IDS_STORAGECONDITION\") {\r\n\r\n\r\n                let comboName = fieldName.label\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                if (comboData) {\r\n                    selectedRecord[comboName] = comboData;\r\n                } else {\r\n                    selectedRecord[comboName] = []\r\n                }\r\n\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: { selectedRecord }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n\r\n            //For Onchange\r\n            else if (fieldName.displaymember === \"smaterialcatname1\") {\r\n                let data = [];\r\n                const withoutCombocomponent = []\r\n\r\n            }\r\n\r\n\r\n            else if (fieldName === \"value\") {\r\n                const comboitem = this.state.comboitem || {};\r\n                comboitem[fieldName] = comboData;\r\n                this.setState({ comboitem });\r\n            }\r\n            else if (fieldName === \"nformcode\") {\r\n                const selectedRecord = this.state.selectedRecord || {};\r\n                selectedRecord[\"nformcode\"] = comboData;\r\n                let availableDatas = [];\r\n                this.state.selectedRecord.nformcode.map(data => {\r\n                    return availableDatas.push(data.item);\r\n                });\r\n\r\n\r\n                this.setState({ selectedRecord, availableDatas });\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    onInputOnChange = (event, optional1, optional2) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (this.props.Login.screenname !== \"IDS_MATERIALFILE\") {\r\n            if (event.target.type === 'checkbox') {\r\n                if (event.target.name === \"ntransactionstatus\")\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n                else\r\n                    selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n            }\r\n            else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.setState({ selectedRecord });\r\n        }\r\n        else {\r\n            if (event.target.type === 'checkbox') {\r\n                selectedRecord[event.target.name] = event.target.checked === true ? optional2[0] : optional2[1];\r\n            } else if (event.target.type === 'radio') {\r\n                selectedRecord[event.target.name] = optional2;\r\n            } else {\r\n                selectedRecord[event.target.name] = event.target.value;\r\n            }\r\n\r\n\r\n            this.setState({ selectedRecord });\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    saveClick = () => {\r\n        let operation = \"update\";\r\n        let inputData = [];\r\n        inputData[\"IDS_OPENDATE\"] = this.state.selectedRecord.IDS_OPENDATE &&\r\n            convertDateTimetoString(this.state.selectedRecord.IDS_OPENDATE, this.props.Login.userInfo);\r\n        inputData[\"tzIDS_OPENDATE\"] = this.state.selectedRecord.tzIDS_OPENDATE && this.state.selectedRecord.tzIDS_OPENDATE;\r\n        inputData[\"nflag\"] = 3;\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\r\n        inputData[\"nmaterialcatcode\"] = this.props.Login.masterData.SelectedMaterialCategory.nmaterialcatcode\r\n        inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\r\n        inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.nmaterialinventorycode\r\n        const inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"MaterialStatus\",\r\n            inputData: inputData,\r\n            operation: operation\r\n        }\r\n        this.props.crudMaster(inputParam, this.props.Login.masterData, \"showModalPopup\");\r\n    }\r\n\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n        let inputData = [];\r\n        let inputParam = {};\r\n        let varmain = {};\r\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n        let postParam = undefined;\r\n\r\n        if (this.props.Login.screenname === \"IDS_MATERIALINVENTORY\") {\r\n\r\n            // if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1) {\r\n            //     varmain = \"IDS_STANDARDMATERIALNAME\"\r\n            // }\r\n            // else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2) {\r\n            //     varmain = \"IDS_VOLUMETRICMATERIALNAME\"\r\n            // }\r\n            // else if (this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 3) {\r\n            //     varmain = \"IDS_MATERIALNAME\"\r\n            // }\r\n            // inputData[\"MaterialInventory\"] = {\r\n            //     \"IDS_INTERNALREFERENCE\": this.state.selectedRecord.IDS_INTERNALREFERENCE,\r\n            //     \"IDS_BATCHNO\": this.state.selectedRecord.IDS_BATCHNO,\r\n            //     \"IDS_LOTNO\": this.state.selectedRecord.IDS_LOTNO,\r\n            //     \"IDS_REFERENCENO\": this.state.selectedRecord.IDS_REFERENCENO,\r\n            //     \"IDS_CONTAINERID\": this.state.selectedRecord.IDS_CONTAINERID,\r\n            //     \"IDS_STORAGELOCATION\": {\r\n            //         value: this.state.selectedRecord[\"IDS_STORAGELOCATION\"] && this.state.selectedRecord[\"IDS_STORAGELOCATION\"].value,\r\n            //         label: this.state.selectedRecord[\"IDS_STORAGELOCATION\"] && this.state.selectedRecord[\"IDS_STORAGELOCATION\"].label\r\n            //     }\r\n            //     , \"IDS_STORAGECONDITION\": {\r\n            //         value: this.state.selectedRecord[\"IDS_STORAGECONDITION\"] && this.state.selectedRecord[\"IDS_STORAGECONDITION\"].value,\r\n            //         label: this.state.selectedRecord[\"IDS_STORAGECONDITION\"] && this.state.selectedRecord[\"IDS_STORAGECONDITION\"].label\r\n            //     },\r\n            //     \"IDS_SUPPLIER\": {\r\n            //         value: this.state.selectedRecord[\"IDS_SUPPLIER\"] && this.state.selectedRecord[\"IDS_SUPPLIER\"].value\r\n            //         , label: this.state.selectedRecord[\"IDS_SUPPLIER\"] && this.state.selectedRecord[\"IDS_SUPPLIER\"].label\r\n            //     },\r\n\r\n            //     \"IDS_SECTION\": {\r\n            //         value: this.state.selectedRecord[\"IDS_SECTION\"] && this.state.selectedRecord[\"IDS_SECTION\"].value\r\n            //         , label: this.state.selectedRecord[\"IDS_SECTION\"] && this.state.selectedRecord[\"IDS_SECTION\"].label\r\n            //     },\r\n            //     \"IDS_MANUFACTURER\": {\r\n            //         value: this.state.selectedRecord[\"IDS_MANUFACTURER\"] && this.state.selectedRecord[\"IDS_MANUFACTURER\"].value,\r\n            //         label: this.state.selectedRecord[\"IDS_MANUFACTURER\"] && this.state.selectedRecord[\"IDS_MANUFACTURER\"].label\r\n            //     },\r\n            //     \"IDS_RETURNEDQUANTITY\": this.state.selectedRecord[\"IDS_RETURNEDQUANTITY\"] && this.state.selectedRecord[\"IDS_RETURNEDQUANTITY\"],\r\n            //     \"IDS_UNIT\": {\r\n            //         label: this.state.selectedRecord[\"IDS_UNIT\"].label,\r\n            //         value: this.state.selectedRecord[\"IDS_UNIT\"].value\r\n            //     },\r\n            //     \"IDS_GRADE\": {\r\n            //         label: this.state.selectedRecord[\"IDS_GRADE\"].label,\r\n            //         value: this.state.selectedRecord[\"IDS_GRADE\"].value\r\n            //     },\r\n            //     \"IDS_INTERNALPREFIX\": this.state.selectedRecord[\"IDS_INTERNALPREFIX\"] && this.state.selectedRecord[\"IDS_INTERNALPREFIX\"],\r\n            //     \"IDS_INVOICENO\": this.state.selectedRecord[\"IDS_INVOICENO\"] && this.state.selectedRecord[\"IDS_INVOICENO\"],\r\n            //     \"IDS_DATEOFMANUFACTURER\": this.state.selectedRecord[\"IDS_DATEOFMANUFACTURER\"] && this.state.selectedRecord[\"IDS_DATEOFMANUFACTURER\"],\r\n            //     \"IDS_CATALOGNO\": this.state.selectedRecord[\"IDS_CATALOGNO\"] && this.state.selectedRecord[\"IDS_CATALOGNO\"],\r\n            //     \"IDS_COST\": this.state.selectedRecord[\"IDS_COST\"] && this.state.selectedRecord[\"IDS_COST\"],\r\n            //     \"IDS_RECEIVEDDATE\": this.state.selectedRecord[\"IDS_RECEIVEDDATE\"] && this.state.selectedRecord[\"IDS_RECEIVEDDATE\"],\r\n            //     \"smaterialname\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].smaterialname,\r\n            //     \"IDS_EXPIRYDATE\": this.state.selectedRecord[\"IDS_EXPIRYDATE\"] && this.state.selectedRecord[\"IDS_EXPIRYDATE\"],\r\n            //     \"IDS_REMARKS\": this.state.selectedRecord[\"IDS_REMARKS\"] && this.state.selectedRecord[\"IDS_REMARKS\"],\r\n            //     \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n            //     \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n            //     \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n            //     \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === transactionStatus.QUARANTINE ?\r\n            //         transactionStatus.QUARANTINE : transactionStatus.RELEASED,\r\n            //     \"IDS_INVENTORYID\": this.state.selectedRecord[\"IDS_INVENTORYID\"] && this.state.selectedRecord[\"IDS_INVENTORYID\"],\r\n            // }\r\n\r\n            // inputData[\"Material\"][varmain] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 1 ?\r\n            //     this.state.selectedRecord.IDS_STANDARDMATERIALNAME :\r\n            //     this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode === 2 ?\r\n            //         this.state.selectedRecord.IDS_VOLUMETRICMATERIALNAME :\r\n            //         this.state.selectedRecord.IDS_MATERIALNAME\r\n            inputData[\"MaterialInventory\"] = {}\r\n            inputData[\"DateList\"] = []\r\n            const Layout = this.props.Login.masterData.selectedTemplate[0].sjsonobjstr\r\n            Layout.map((row) => {\r\n                row.children.map((column) => {\r\n                    column.children.map((component) => {\r\n                        if (component.inputtype === 'combo') {\r\n                            inputData[\"MaterialInventory\"][component.label] = {\r\n                                label: this.state.selectedRecord[component.label][\"label\"],\r\n                                value: this.state.selectedRecord[component.label][\"value\"]\r\n                            }\r\n                        }\r\n                        else if (component.inputtype === 'date') {\r\n                            if (this.state.selectedRecord[component.label]) {\r\n                                inputData[\"MaterialInventory\"][`tz${component.label}`] = {\r\n                                    label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\r\n                                    value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\r\n                                }\r\n                                inputData[\"MaterialInventory\"][component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n                                inputData[\"DateList\"].push(component.label)\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            inputData[\"MaterialInventory\"][component.label] = this.state.selectedRecord[component.label]\r\n                        }\r\n                        component.hasOwnProperty(\"children\") && component.children.map(\r\n                            (componentrow) => {\r\n                                if (componentrow.inputtype === 'combo') {\r\n                                    inputData[\"MaterialInventory\"][componentrow.label] =\r\n                                    {\r\n                                        label: this.state.selectedRecord[componentrow.label][\"label\"],\r\n                                        value: this.state.selectedRecord[componentrow.label][\"value\"]\r\n                                    }\r\n                                }\r\n                                else if (componentrow.inputtype === 'date') {\r\n                                    if (this.state.selectedRecord[componentrow.label]) {\r\n                                        inputData[\"MaterialInventory\"][`tz${componentrow.label}`] = {\r\n                                            label: this.state.selectedRecord[`tz${componentrow.label}`][\"label\"],\r\n                                            value: this.state.selectedRecord[`tz${componentrow.label}`][\"value\"]\r\n                                        }\r\n                                        inputData[\"MaterialInventory\"][componentrow.label] = convertDateTimetoString(this.state.selectedRecord[componentrow.label],\r\n                                            this.props.Login.userInfo)\r\n                                        inputData[\"DateList\"].push(componentrow.label)\r\n                                    }\r\n\r\n                                }\r\n                                else {\r\n                                    inputData[\"MaterialInventory\"][componentrow.label] = this.state.selectedRecord[componentrow.label]\r\n                                }\r\n                            }\r\n                        )\r\n                    })\r\n                })\r\n            })\r\n            inputData[\"MaterialInventory\"] = {\r\n                ...inputData[\"MaterialInventory\"],\r\n                \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                \"ntranscode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].ntranscode === 3 ?\r\n                    transactionStatus.QUARANTINE : transactionStatus.RELEASED,\r\n                \"IDS_INVENTORYID\": this.state.selectedRecord[\"IDS_INVENTORYID\"] && this.state.selectedRecord[\"IDS_INVENTORYID\"]\r\n            }\r\n\r\n            inputData[\"materialInventoryJson\"] = JSON.stringify(inputData[\"MaterialInventory\"])\r\n            inputData[\"nmaterialtypecode\"] = this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode\r\n            inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCat[\"nmaterialcatcode\"].value\r\n            inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode\r\n            if (this.props.Login.operation === 'create') {\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventory\",\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            else {\r\n                inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventory\",\r\n                    inputData: inputData,\r\n                    operation: this.props.Login.operation,\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (this.props.Login.screenName === \"IDS_MATERIAL\") {\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                }\r\n            } else {\r\n                if (this.props.Login.masterData.copyScreenRights ? this.props.Login.masterData.copyScreenRights.length > 0 : false) {\r\n                    this.ConfirmComponent()\r\n                }\r\n                else {\r\n                    if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    }\r\n                    else {\r\n                        this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_QUANTITYTRANSACTION\") {\r\n\r\n            if (this.state.selectedRecord['IDS_RETURNEDQUANTITY'] < parseFloat(this.state.selectedRecord['IDS_AVAILABLEQUANTITY'])) {\r\n                const Layout = this.props.Login.masterData.QuantityTransactionTemplate[0].sjsonobjstr\r\n                let dynamicobj = {};\r\n                inputData[\"DateList\"] = [];\r\n                Layout.map((row) => {\r\n                    row.children.map((column) => {\r\n                        column.children.map((component) => {\r\n                            if (component.inputtype === 'combo') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = {\r\n                                        label: this.state.selectedRecord[component.label][\"label\"],\r\n                                        value: this.state.selectedRecord[component.label][\"value\"]\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (component.inputtype === 'Numeric') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = this.state.selectedRecord[component.label].toString()\r\n\r\n                                }\r\n                            }\r\n                            else if (component.inputtype === 'date') {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[`tz${component.label}`] = {\r\n                                        label: this.state.selectedRecord[`tz${component.label}`][\"label\"],\r\n                                        value: this.state.selectedRecord[`tz${component.label}`][\"value\"]\r\n                                    }\r\n                                    dynamicobj[component.label] = convertDateTimetoString(this.state.selectedRecord[component.label], this.props.Login.userInfo)\r\n                                    inputData[\"DateList\"].push(component.label)\r\n                                }\r\n\r\n                            }\r\n                            else {\r\n                                if (this.state.selectedRecord[component.label]) {\r\n                                    dynamicobj[component.label] = this.state.selectedRecord[component.label]\r\n                                }\r\n                            }\r\n                            component.hasOwnProperty(\"children\") && component.children.map(\r\n                                (componentrow) => {\r\n                                    if (componentrow.inputtype === 'combo') {\r\n                                        if (this.state.selectedRecord[componentrow.label]) {\r\n                                            dynamicobj[componentrow.label] =\r\n                                            {\r\n                                                label: this.state.selectedRecord[componentrow.label][\"label\"],\r\n                                                value: this.state.selectedRecord[componentrow.label][\"value\"]\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        if (this.state.selectedRecord[componentrow.label]) {\r\n                                            dynamicobj[componentrow.label] = this.state.selectedRecord[componentrow.label]\r\n                                        }\r\n                                    }\r\n                                }\r\n                            )\r\n                        })\r\n                    })\r\n                })\r\n                dynamicobj = {\r\n                    ...dynamicobj, \"ntransactiontype\":\r\n                        this.state.selectedRecord.IDS_TRANSACTIONTYPE && this.state.selectedRecord.IDS_TRANSACTIONTYPE.value,\r\n                    \"navailableqty\": this.state.selectedRecord.IDS_AVAILABLEQUANTITY !== \"\"\r\n                        ? this.state.selectedRecord.IDS_AVAILABLEQUANTITY :\r\n                        this.props.Login.masterData['MaterialInventoryTrans'][0].jsondata.navailableqty,\r\n                    \"IDS_INVENTORYID\": this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.IDS_INVENTORYID\r\n\r\n                }\r\n                inputData[\"nprecision\"] = this.props.Login.masterData.nprecision && this.props.Login.masterData.nprecision\r\n                inputData[\"nmaterialinventorycode\"] = this.props.Login.masterData.SelectedMaterialInventory.nmaterialinventorycode\r\n                inputData[\"MaterialInventoryTrans\"] = JSON.stringify(dynamicobj)\r\n                inputParam = {\r\n                    classUrl: \"materialinventory\",\r\n                    methodUrl: \"MaterialInventoryTrans\",\r\n                    inputData: inputData,\r\n                    operation: 'create',\r\n                    saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef,\r\n                    dataState: this.state.dataState\r\n                }\r\n                let masterData = this.props.Login.masterData\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n                else {\r\n                    this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n                }\r\n            }\r\n            else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_RETURNEDLESSTHANAVAILABLE\" }));\r\n            }\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_MATERIALFILE\") {\r\n            inputParam = this.onSaveMaterialFile();\r\n            let masterData = this.props.Login.masterData\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n\r\n        }\r\n        else if (this.props.Login.screenname === \"IDS_MATERIALPROPERTY\") {\r\n            let masterData = this.props.Login.masterData\r\n            const dynamicobj = {\r\n                \"IDS_STRUCTURALFORMULA\": this.state.selectedRecord[\"IDS_STRUCTURALFORMULA\"],\r\n                \"IDS_PHYSICALDESCRIPTION\": this.state.selectedRecord[\"IDS_PHYSICALDESCRIPTION\"],\r\n                \"IDS_BOILINGPOINT\": this.state.selectedRecord[\"IDS_BOILINGPOINT\"],\r\n                \"IDS_MELTINGPOINT\": this.state.selectedRecord[\"IDS_MELTINGPOINT\"],\r\n                \"IDS_MOLECULARWEIGHT\": this.state.selectedRecord[\"IDS_MOLECULARWEIGHT\"],\r\n                \"IDS_STANDARDSPECIFICGRAVITY\": this.state.selectedRecord[\"IDS_STANDARDSPECIFICGRAVITY\"],\r\n                \"IDS_STANDARDPURITY\": this.state.selectedRecord[\"IDS_STANDARDPURITY\"],\r\n                \"IDS_STANDARDLENGTH\": this.state.selectedRecord[\"IDS_STANDARDLENGTH\"],\r\n                \"IDS_GASNUMBER\": this.state.selectedRecord[\"IDS_GASNUMBER\"],\r\n                \"IDS_BULKDENSITY\": this.state.selectedRecord[\"IDS_BULKDENSITY\"],\r\n                \"IDS_DATEOFSTANDARDIZATION\": this.state.selectedRecord[\"IDS_DATEOFSTANDARDIZATION\"],\r\n                \"IDS_ASISBASIS\": this.state.selectedRecord[\"IDS_ASISBASIS\"],\r\n                \"IDS_DRIEDANDYDROUSBASIS\": this.state.selectedRecord[\"IDS_DRIEDANDYDROUSBASIS\"],\r\n                \"IDS_ASISBASIS1\": this.state.selectedRecord[\"IDS_ASISBASIS1\"],\r\n                \"IDS_DRIEDANDYDROUSBASIS2\": this.state.selectedRecord[\"IDS_DRIEDANDYDROUSBASIS2\"],\r\n                \"IDS_DIRECTIONOFUSE\": this.state.selectedRecord[\"IDS_DIRECTIONOFUSE\"],\r\n                \"IDS_COMMENTS\": this.state.selectedRecord[\"IDS_COMMENTS\"]\r\n\r\n            }\r\n            inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n            if (this.props.Login.masterData.MaterialProperties.length > 0) {\r\n                inputData[\"nmaterialpropertycode\"] =\r\n                    this.props.Login.masterData.MaterialProperties[0].nmaterialpropertycode\r\n            } else {\r\n                inputData[\"nmaterialpropertycode\"] = 0\r\n            }\r\n\r\n\r\n            inputData[\"materialProperty\"] = JSON.stringify(dynamicobj)\r\n            inputData[\"nflag\"] = 2;\r\n            inputParam = {\r\n                classUrl: \"material\",\r\n                methodUrl: \"MaterialSafetyInstructions\",\r\n                inputData: inputData,\r\n                operation: 'create',\r\n                saveType, formRef, postParam, selectedRecord: this.state.selectedRecord,\r\n                searchRef: this.searchRef,\r\n                dataState: this.state.dataState\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\");\r\n            }\r\n        }\r\n        else {\r\n            if (this.props.Login.operation !== \"update\") {\r\n                let showMaterialSection = this.props.Login.showMaterialSection\r\n                let newarr = []\r\n                let newarrobj = []\r\n                inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                if (this.state.selectedRecord[\"nmaterialsectioncode\"].length > 1) {\r\n                    newarr = this.state.selectedRecord.nmaterialsectioncode.map(temp => {\r\n                        return {\r\n                            \"ssectionname\": temp.label,\r\n                            \"nsectioncode\": temp.value,\r\n                            \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\r\n                            \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    newarr.push({\r\n                        \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].label,\r\n                        \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].value,\r\n                        \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\r\n                        \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                    });\r\n                }\r\n                inputData[\"materialSectionJson\"] = JSON.stringify(newarr)\r\n                inputParam = {\r\n                    classUrl: \"material\",\r\n                    methodUrl: \"MaterialSection\",\r\n                    inputData: inputData,\r\n                    operation: \"create\",\r\n                    showMaterialSection: showMaterialSection,\r\n                    selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef\r\n                }\r\n            }\r\n            else {\r\n                let newarr = []\r\n                let newarrobj = []\r\n                inputData[\"nmaterialcode\"] = this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                if (Array.isArray(this.state.selectedRecord[\"nmaterialsectioncode\"])) {\r\n                    newarrobj.push({\r\n                        \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].label,\r\n                        \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"][0].value,\r\n                        \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\r\n                        \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                    });\r\n                }\r\n                else {\r\n                    newarrobj.push({\r\n                        \"ssectionname\": this.state.selectedRecord[\"nmaterialsectioncode\"].label,\r\n                        \"nsectioncode\": this.state.selectedRecord[\"nmaterialsectioncode\"].value,\r\n                        \"nreorderlevel\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"],\r\n                        \"nmaterialcode\": this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode\r\n                    });\r\n                }\r\n                inputData[\"materialSectionJson\"] = JSON.stringify(newarrobj)\r\n                inputData[\"MaterialSection\"] = {\r\n                    \"IDS_REORDERLEVEL\": this.state.selectedRecord[\"nreorderlevel\"] && this.state.selectedRecord[\"nreorderlevel\"]\r\n\r\n                }\r\n                inputData[\"nmaterialsectioncode\"] = this.state.selectedRecord.nmaterialsectioncodeprimaryKeyValue\r\n\r\n                inputParam = {\r\n                    classUrl: \"material\",\r\n                    methodUrl: \"MaterialSection\",\r\n                    inputData: inputData,\r\n                    showMaterialSection: false,\r\n                    operation: \"update\",\r\n                    selectedRecord: this.state.selectedRecord,\r\n                    searchRef: this.searchRef\r\n                }\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n    onNumericInputChange = (value, name) => {\r\n        let selectedRecord = this.state.selectedRecord\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    ConfirmComponent = () => {\r\n        this.confirmMessage.confirm(\"confirmation\", \"Confiramtion!\", this.props.intl.formatMessage({ id: \"IDS_OVERWRITRTHEEXISTINGSCREENRIGHTS\" }),\r\n            \"ok\", \"cancel\", () => this.copyAlertSave());\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                masterData: [], inputParam: undefined, operation: null, modalName: undefined\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n    handleClickDelete(masterData, ncontrolcode, modalName) {\r\n        if (this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RETIRED &&\r\n            this.props.Login.masterData[\"SelectedMaterialInventory\"].jsondata.ntranscode !== transactionStatus.RELEASED) {\r\n            const fieldArray = [];\r\n            let postParam = {\r\n                inputListName: \"MaterialInventory\", selectedObject: \"SelectedMaterialInventory\",\r\n                primaryKeyField: \"nmaterialinventorycode\",\r\n                primaryKeyValue: fieldArray,\r\n                fetchUrl: \"materialinventory/getMaterialInventory\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n\r\n\r\n                \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n            }\r\n            modalName = 'openModal'\r\n\r\n            const inputParam = {\r\n                methodUrl: \"MaterialInventory\",\r\n                classUrl: \"materialinventory\",\r\n                inputData: {\r\n                    \"material\": this.props.Login.masterData.SelectedMaterial,\r\n                    \"nmaterialcode\": this.props.Login.masterData.SelectedMaterialCrumb['jsondata'].nmaterialcode,\r\n                    \"nmaterialinventorycode\": this.props.Login.masterData.SelectedMaterialInventory.jsondata.nmaterialinventorycode,\r\n                    \"nmaterialcatcode\": this.state.selectedMaterialCat[\"nmaterialcatcode\"].value,\r\n                    \"userinfo\": this.props.Login.userInfo,\r\n                    //\"nmaterialcode\": this.props.Login.masterData.SelectedMaterial && this.props.Login.masterData.SelectedMaterial.jsondata.nmaterialcode,\r\n                    \"nmaterialtypecode\": this.props.Login.masterData.SelectedMaterialType[0].nmaterialtypecode,\r\n                },\r\n                operation: \"delete\", postParam,\r\n                displayName: \"Material\",\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, [modalName]: true,\r\n                        operation: 'delete', screenName: \"Material\", id: \"material\"\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, modalName);\r\n            }\r\n        }\r\n        else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTQUARENTINEINVENTORY\" }));\r\n        }\r\n    }\r\n\r\n    reloadData = () => {\r\n        this.searchRef.current.value = \"\";\r\n        let inputData = [];\r\n        inputData[\"nmaterialtypecode\"] = this.state.selectedcombo[\"nmaterialtypecode\"];\r\n        inputData[\"materialCatList\"] = this.state.materialCatList;\r\n        const inputParam = {\r\n            classUrl: \"materialinventory\",\r\n            methodUrl: \"getMaterialInventoryByID\",\r\n            displayName: \"MaterialInventory\",\r\n            inputData: inputData\r\n        }\r\n        this.setState({ sectionDataState: { skip: 0, take: 10 } })\r\n        if (this.state.selectedcombo[\"nmaterialtypecode\"]) {\r\n            this.props.getMaterialInventoryByID(inputParam, this.state.selectedcombo,\r\n                this.state.selectedMaterialCat, this.state.selectedMaterialcombo, this.props.Login.masterData, this.props.Login.userInfo);\r\n\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTUSERROLE\" }));\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    callService, getAddMaterialInventoryPopup, updateMaterialStatus, openDatePopup, getQuantityTransactionPopup, getQuantityTransactionOnchange,\r\n    updateStore, initialcombochangeget, getAddMaterialPopup, viewAttachment, getMaterialChildValues,\r\n    crudMaster, getMaterialInventoryDetails, getMaterialEdit, getMaterialInventoryByID, addMaterialFile\r\n    , getAddMaterialSectionPopup, getMaterialSectionEdit, filterColumnData, validateEsignCredential, addSafetyInstructions, addMaterialProperty\r\n})(injectIntl(MaterialInventory));\r\n\r\n"]},"metadata":{},"sourceType":"module"}