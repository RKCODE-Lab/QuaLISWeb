{"ast":null,"code":"import rsapi from '../rsapi';\nimport Axios from 'axios';\nimport { toast } from 'react-toastify';\nimport { getComboLabelValue } from '../components/CommonScript';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus } from './../components/Enumeration';\nexport function openSampleTestCommentsModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\") {\n      const CommentType = rsapi.post(\"/sampletestcomments/getCommentType\", {\n        \"userinfo\": userInfo\n      });\n      const CommentSubType = rsapi.post(\"/sampletestcomments/getCommentSubType\", {\n        \"userinfo\": userInfo\n      });\n      let urlArray = [];\n\n      if (operation === \"create\") {\n        urlArray = [CommentType, CommentSubType];\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let selectedRecord = {};\n        selectedRecord[\"nstatus\"] = transactionStatus.ACTIVE;\n        selectedRecord[\"ncommenttypevisible\"] = 0;\n        selectedRecord[\"ncommenttypecode\"] = 0; // selectedRecord[\"ncommentsubtypecode\"] = 0;\n\n        selectedRecord[\"ndefaultstatus\"] = 4;\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            CommentType: response[0].data.CommentType || [],\n            CommentSubType: response[1].data.CommentSubType || [],\n            operation,\n            screenName,\n            selectedRecord,\n            openModal: true,\n            ncontrolcode,\n            loading: false\n          }\n        });\n      }).catch(error => {\n        dispatch(initRequest(false));\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function fetchSampleTestCommentsById(editParam) {\n  return function (dispatch) {\n    const URL1 = rsapi.post('/sampletestcomments/getCommentType', {\n      \"userinfo\": editParam.userInfo\n    });\n    const URL2 = rsapi.post('/sampletestcomments/getCommentSubType', {\n      \"userinfo\": editParam.userInfo\n    });\n    const URL3 = rsapi.post(\"/sampletestcomments/getActiveSampleTestCommentsById\", {\n      [editParam.primaryKeyName]: editParam.editRow.nsampletestcommentscode,\n      \"userinfo\": editParam.userInfo\n    });\n    dispatch(initRequest(true));\n    Axios.all([URL1, URL2, URL3]).then(response => {\n      let selectedRecord = {};\n      let selectedId = editParam.editRow.nsampletestcommentscode;\n      selectedRecord = response[2].data;\n      let CommentType = response[0].data.CommentType;\n      let CommentSubType = response[1].data.CommentSubType;\n      getComboLabelValue(selectedRecord, CommentType, \"ncommenttypecode\", \"scommenttype\");\n      getComboLabelValue(selectedRecord, CommentSubType, \"ncommentsubtypecode\", \"scommentsubtype\");\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          CommentType: response[0].data.CommentType || [],\n          CommentSubType: response[1].data.CommentSubType || [],\n          operation: editParam.operation,\n          openModal: true,\n          screenName: editParam.screenName,\n          ncontrolcode: editParam.ncontrolCode,\n          loading: false,\n          selectedId\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/SampleTestCommentsAction.js"],"names":["rsapi","Axios","toast","getComboLabelValue","DEFAULT_RETURN","initRequest","intl","transactionStatus","openSampleTestCommentsModal","screenName","operation","primaryKeyName","masterData","userInfo","ncontrolcode","dispatch","CommentType","post","CommentSubType","urlArray","all","then","response","selectedRecord","ACTIVE","type","payload","data","openModal","loading","catch","error","status","message","warn","formatMessage","id","fetchSampleTestCommentsById","editParam","URL1","URL2","URL3","editRow","nsampletestcommentscode","selectedId","ncontrolCode"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport Axios from 'axios';\r\nimport {\r\n    toast\r\n} from 'react-toastify';\r\nimport {\r\n    getComboLabelValue\r\n} from '../components/CommonScript'\r\nimport {\r\n    DEFAULT_RETURN\r\n} from './LoginTypes';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from './../components/Enumeration';\r\n\r\n\r\n    export function openSampleTestCommentsModal(screenName, operation, primaryKeyName, masterData, userInfo, ncontrolcode) {\r\n        return function (dispatch) {\r\n            if (operation === \"create\" || operation === \"update\" ) {\r\n                const CommentType = rsapi.post(\"/sampletestcomments/getCommentType\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n                const CommentSubType = rsapi.post(\"/sampletestcomments/getCommentSubType\", {\r\n                    \"userinfo\": userInfo\r\n                });\r\n                let urlArray = [];\r\n                if (operation === \"create\") {\r\n                   \r\n                    urlArray = [CommentType,CommentSubType];\r\n                } \r\n                dispatch(initRequest(true));\r\n                Axios.all(urlArray)\r\n                    .then(response => {\r\n                          let selectedRecord = {};\r\n                            selectedRecord[\"nstatus\"] = transactionStatus.ACTIVE;\r\n                            selectedRecord[\"ncommenttypevisible\"] = 0;\r\n                            selectedRecord[\"ncommenttypecode\"] = 0;\r\n                            // selectedRecord[\"ncommentsubtypecode\"] = 0;\r\n                            selectedRecord[\"ndefaultstatus\"] = 4;\r\n                        dispatch({\r\n                            type: DEFAULT_RETURN,\r\n                            payload: {\r\n                                CommentType: response[0].data.CommentType || [],\r\n                                CommentSubType: response[1].data.CommentSubType || [],\r\n                                operation,\r\n                                screenName,\r\n                                selectedRecord,\r\n                                openModal: true,\r\n                                ncontrolcode, loading: false\r\n                            }\r\n                        })\r\n                    })\r\n                    .catch(error => {\r\n                        dispatch(initRequest(false));\r\n                        if (error.response.status === 500) {\r\n                            toast.error(error.message);\r\n                        } else {\r\n                            toast.warn(intl.formatMessage({\r\n                                id: error.response.data\r\n                            }));\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n    \r\n    export function fetchSampleTestCommentsById (editParam){  \r\n        return function(dispatch){\r\n            const URL1= rsapi.post('/sampletestcomments/getCommentType',{\"userinfo\":editParam.userInfo});\r\n            const URL2= rsapi.post('/sampletestcomments/getCommentSubType',{\"userinfo\":editParam.userInfo});\r\n            const URL3=rsapi.post(\"/sampletestcomments/getActiveSampleTestCommentsById\", { [editParam.primaryKeyName] :editParam.editRow.nsampletestcommentscode , \"userinfo\": editParam.userInfo} )\r\n            dispatch(initRequest(true));\r\n            Axios.all([URL1,URL2,URL3])\r\n            .then(response=> { \r\n                let selectedRecord={}\r\n                let selectedId = editParam.editRow.nsampletestcommentscode;\r\n                selectedRecord=response[2].data\r\n                let CommentType = response[0].data.CommentType;\r\n                let CommentSubType = response[1].data.CommentSubType;\r\n               getComboLabelValue(selectedRecord, CommentType, \"ncommenttypecode\", \"scommenttype\");\r\n               getComboLabelValue(selectedRecord, CommentSubType, \"ncommentsubtypecode\", \"scommentsubtype\");\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload:{\r\n                    selectedRecord ,\r\n                    CommentType: response[0].data.CommentType || [],\r\n                    CommentSubType: response[1].data.CommentSubType || [],\r\n                    operation:editParam.operation,\r\n                    openModal: true,\r\n                    screenName:editParam.screenName,\r\n                    ncontrolcode:editParam.ncontrolCode,\r\n                    loading:false,selectedId\r\n                }\r\n                }); \r\n                \r\n            })\r\n            .catch(error => {\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }         \r\n            })\r\n        }\r\n     }\r\n"]},"metadata":{},"sourceType":"module"}