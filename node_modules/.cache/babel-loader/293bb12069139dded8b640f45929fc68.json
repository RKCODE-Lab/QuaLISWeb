{"ast":null,"code":"var _jsxFileName = \"E:\\\\WorkingFolder\\\\React_Postgres\\\\ALPD\\\\SOURCE-512\\\\QuaLISWeb\\\\src\\\\pages\\\\batchruncreation\\\\BatchCreation.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport { Row, Col, Nav, FormGroup, FormLabel, Card, Modal, Image, Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPencilAlt, faTrashAlt, faCheckCircle, faCopy, faEye, faPlay, faPlus, faSync } from '@fortawesome/free-solid-svg-icons';\nimport reject from \"../../assets/image/reject.svg\";\nimport elnimage from \"../../assets/image/sheet-view.svg\";\nimport { callService, crudMaster, updateStore, getTestInstrumentComboService, getTestInstrumentCategory, getProductBasedInstrument, getInstrumentForInstCategory, getBatchCreationDetails, onActionFilterSubmit, getProductcategoryAction, createBatchmasterAction, getSamplesForGrid, getSelectedBatchCreationDetail, createSampleAction, deleteSampleAction, getActiveBatchCreationService, updateBatchcreationAction, deleteBatchCreation, batchInitiateAction, getBCRegistrationSubType, batchCompleteAction, validateEsignCredential, filterColumnData, getBatchhistoryAction, getBatchSection, viewInfo, getIqcSamples, getMaterialBasedOnMaterialCategory, getMaterialInventoryBasedOnMaterial, batchSaveIQCActions, getMaterialAvailQtyBasedOnInv, getBatchIqcSampleAction, getBCApprovalConfigVersion, getBCRegistrationType, getTreeByMaterial, getNewRegSpecification, cancelIQCSampleAction, batchCancelAction, batchInitiateDatePopup, batchCompleteDatePopup, getInstrumentID, getBatchViewResultAction, validateEsignforBatch //,batchTAT\n} from '../../actions';\nimport { transactionStatus, designProperties, reportTypeEnum, reportCOAType, RegistrationSubType, SampleType } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign, getControlMap, getStartOfDay, getEndOfDay, formatInputDate, constructOptionList, rearrangeDateFormat, convertDateValuetoString, CF_encryptionData } from '../../components/CommonScript';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\nimport { ListWrapper } from '../../components/client-group.styles';\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\nimport Esign from '../audittrail/Esign';\nimport { ProductList } from '../product/product.styled';\nimport CustomPopover from '../../components/customPopover';\nimport BatchCreationFilter from './BatchCreationFilter';\nimport AddBatchCreation from './AddBatchCreation';\nimport AddBatchinitiate from './AddBatchinitiate';\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\nimport SampleTab from './SampleTab';\nimport BatchhistoryTab from './BatchhistoryTab';\nimport { process } from '@progress/kendo-data-query';\nimport AddSample from './AddSample';\nimport ListMaster from '../../components/list-master/list-master.component';\nimport ViewInfo from './ViewInfo';\nimport { Affix } from 'rsuite';\nimport AddMaterialIqc from './AddMaterialIqc';\nimport BatchIqcSampleTab from './BatchIqcSampleTab';\nimport BatchResultTab from './BatchResultTab';\nimport PortalModal from '../../PortalModal';\nimport Iframe from 'react-iframe';\nimport ReactTooltip from 'react-tooltip';\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/image/refresh.svg\";\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass BatchCreation extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.sidebarExpandCollapse = () => {\n      this.setState({\n        sidebarview: true\n      });\n    };\n\n    this.completeMandatoryFields = [{\n      \"idsName\": \"IDS_BATCHCOMPLETEDATE\",\n      //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \n      \"dataField\": \"dtransactiondate\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.initiateMandatoryFields = [{\n      \"idsName\": \"IDS_BATCHINITIATEDATE\",\n      //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \n      \"dataField\": \"dtransactiondate\",\n      \"mandatoryLabel\": \"IDS_CHOOSE\",\n      \"controlType\": \"selectbox\"\n    }];\n    this.materialIqcMandatory = [{\n      \"idsName\": \"IDS_MATERIALTYPE\",\n      \"dataField\": \"smaterialtypename\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALCATEGORY\",\n      \"dataField\": \"smaterialcatname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIAL\",\n      \"dataField\": \"smaterialname\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, {\n      \"idsName\": \"IDS_MATERIALINVENTORY\",\n      \"dataField\": \"sinventoryid\",\n      \"mandatoryLabel\": \"IDS_SELECT\",\n      \"controlType\": \"selectbox\"\n    }, //{ \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequatity\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\n    {\n      \"idsName\": \"IDS_USEDQTY\",\n      \"dataField\": \"susedquantity\",\n      \"mandatoryLabel\": \"IDS_ENTER\",\n      \"controlType\": \"textbox\"\n    }];\n\n    this.getSamples = selectedbatchmaster => {\n      const addSampleID = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode;\n\n      if (selectedbatchmaster.ntransactionstatus == transactionStatus.INITIATED || selectedbatchmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedbatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else {\n        this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode, this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData, this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA, this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA, addSampleID);\n      }\n    };\n\n    this.createBatchValidation = addParam => {\n      if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined && this.state.ApprovalVersionValue.item != undefined) {\n        this.props.getBatchSection(addParam);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.getIqcSamples = SelectedBatchmaster => {\n      if (SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED || SelectedBatchmaster.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLETOADDIQC\"\n        }));\n      } else {\n        let addcontrolcode = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\n        let inputData = {};\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; // inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n        // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData['naddcontrolCode'] = addcontrolcode; // inputData['section']={\n        //         nsectioncode: SelectedBatchmaster.nsectioncode\n        // };\n\n        inputData['nsectioncode'] = SelectedBatchmaster.nsectioncode;\n        inputData['userInfo'] = this.props.Login.userInfo;\n        inputData['nbatchmastercode'] = SelectedBatchmaster.nbatchmastercode;\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n        this.props.getIqcSamples(inputData, this.props.Login.masterData);\n      }\n    };\n\n    this.deleteRecord = inputData => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: inputData.selectedRecord.nbatchsampleCode,\n          fetchUrl: \"batchcreation/getSampleTabDetails\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let jsondata = inputData.selectedRecord;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Sample\",\n          postParam,\n          inputData: {\n            Sample: {\n              \"sarno\": inputData.selectedRecord.sarno,\n              \"ssamplearno\": inputData.selectedRecord.ssamplearno,\n              \"stestname\": inputData.selectedRecord.stestname,\n              \"nbatchsamplecode\": inputData.selectedRecord.nbatchsamplecode\n            },\n            \"userInfo\": this.props.Login.userInfo,\n            nbatchsamplecode: inputData.selectedRecord.nbatchsamplecode,\n            masterData: { ...this.props.Login.masterData,\n              \"samples\": []\n            },\n            nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\n          },\n          operation: inputData.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: inputData.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.deleteSampleAction(inputParam.inputData);\n        }\n      }\n    };\n\n    this.cancelRecord = inputData => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: inputData.nbatchsampleiqccode,\n          fetchUrl: \"batchcreation/getBatchIqcSampleAction\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"IQCSample\",\n          postParam,\n          inputData: {\n            iqcSample: inputData.selectedRecord,\n            nbatchsampleiqccode: inputData.selectedRecord.nbatchsampleiqccode,\n            masterData: this.props.Login.masterData,\n            nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\n            nmaterialinventtranscode: inputData.selectedRecord.nmaterialinventtranscode,\n            userinfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n            //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA\n          },\n          operation: inputData.operation,\n          displayName: this.props.Login.inputParam.displayName,\n          dataState: this.state.dataState\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: this.props.Login.masterData\n              },\n              openModal: true,\n              screenName: this.props.intl.formatMessage({\n                id: this.props.Login.inputParam.displayName\n              }),\n              operation: inputData.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.cancelIQCSampleAction(inputParam.inputData);\n        }\n      }\n    };\n\n    this.onTabChange = tabProps => {\n      const screenName = tabProps.screenName;\n\n      if (screenName == \"IDS_BATCHHISTORY\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchhistoryAction(inputData, true);\n      } else if (screenName == \"IDS_BATCHIQCSAMPLE\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchIqcSampleAction(inputData, true);\n      } else if (screenName == \"IDS_RESULTS\") {\n        let inputData = {\n          masterData: this.props.Login.masterData,\n          userInfo: this.props.Login.userInfo,\n          nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\n        };\n        this.props.getBatchViewResultAction(inputData, true);\n      } else {\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            screenName,\n            batchactiveKey: screenName\n          }\n        };\n        this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.dataStateChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Samples, event.dataState),\n        sampleState: event.dataState\n      });\n    };\n\n    this.dataStateBatchHistoryChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Batchhistory, event.dataState),\n        histortState: event.dataState\n      });\n    };\n\n    this.dataStateBatchIqcChangeChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.iqcsample, event.dataState),\n        iqcsampleState: event.dataState\n      });\n    };\n\n    this.dataStateViewChange = event => {\n      this.setState({\n        dataResult: process(this.props.Login.masterData.Resultview, event.dataState),\n        viewstate: event.dataState\n      });\n    };\n\n    this.getApprovalVersion = data => {\n      let inputData = [];\n      let obj = convertDateValuetoString(this.props.Login.masterData.fromDate || this.props.Login.masterData.realFromDate, this.props.Login.masterData.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n      inputData = {\n        needFilterSubmit: \"false\",\n        nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n        fromDate: obj.fromDate,\n        //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n        toDate: obj.toDate,\n        //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n        nregtypecode: data.item.nregtypecode,\n        userInfo: this.props.Login.userInfo,\n        nregsubtypecode: data.item.nregsubtypecode,\n        masterData: this.props.Login.masterData,\n        isneedapprovalfilter: true,\n        defaultRegistrationSubType: data.item,\n        isneedrealFilterStatus: \"false\",\n        // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n        // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n        // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n        // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\",\n        realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n        realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n        realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n        realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n        realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n        realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n        realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n        realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n        realFromDate: this.props.Login.masterData.realFromDate,\n        realToDate: this.props.Login.masterData.realToDate\n      };\n      this.props.getBCApprovalConfigVersion(inputData);\n    };\n\n    this.tabDetail = () => {\n      const tabMap = new Map();\n      tabMap.set(\"IDS_SAMPLE\", /*#__PURE__*/React.createElement(SampleTab, {\n        sample: this.props.Login.masterData.Samples || [],\n        dataResult: process(this.props.Login.masterData.Samples || [], this.state.sampleState),\n        dataState: this.state.sampleState,\n        controlMap: this.state.controlMap,\n        dataStateChange: this.dataStateChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        deleteRecord: this.deleteRecord,\n        extractedColumnList: this.gridfillingColumn(this.state.DynamicGridItem) || [],\n        detailedFieldList: this.gridfillingColumn(this.state.DynamicGridMoreItem) || [],\n        methodUrl: \"Samples\",\n        getSamples: () => this.getSamples(this.props.Login.masterData.SelectedBatchmaster) // getSamples={() => this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\n        //     this.props.Login.userInfo,this.props.Login.masterData,this.props.Login.masterData.defaultRegistrationType.nregtypecode,this.state.nregsubtypecode.value)}\n        //inputParam={this.props.Login.inputParam}\n        ,\n        screenName: \"IDS_SAMPLE\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }\n      }));\n      tabMap.set(\"IDS_BATCHIQCSAMPLE\", /*#__PURE__*/React.createElement(BatchIqcSampleTab, {\n        iqcsample: this.props.Login.masterData.iqcsample || [],\n        dataResult: process(this.props.Login.masterData.iqcsample || [], this.state.iqcsampleState),\n        dataState: this.state.iqcsampleState,\n        controlMap: this.state.controlMap,\n        dataStateChange: this.dataStateBatchIqcChangeChange,\n        userRoleControlRights: this.state.userRoleControlRights,\n        userInfo: this.props.Login.userInfo,\n        cancelRecord: this.cancelRecord,\n        methodUrl: \"IQCSample\",\n        getIqcSamples: () => this.getIqcSamples(this.props.Login.masterData.SelectedBatchmaster),\n        screenName: \"IDS_BATCHIQCSAMPLE\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }\n      })); //     if (this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.INITIATED\n      //         || this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.COMPLETED)\n\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        tabMap.set(\"IDS_RESULTS\", /*#__PURE__*/React.createElement(BatchResultTab, {\n          ELNTest: this.props.Login.masterData.ELNTest || [],\n          resultview: this.props.Login.masterData.Resultview || [],\n          dataResult: process(this.props.Login.masterData.Resultview || [], this.state.viewstate),\n          dataState: this.state.viewstate,\n          dataStateChange: this.dataStateViewChange,\n          userInfo: this.props.Login.userInfo,\n          methodUrl: \"BatchViewResult\",\n          screenName: \"IDS_RESULTS\",\n          intl: this.props.intl,\n          nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n          selectedfilename: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 17\n          }\n        }));\n      }\n\n      tabMap.set(\"IDS_BATCHHISTORY\", /*#__PURE__*/React.createElement(BatchhistoryTab, {\n        batchhistory: this.props.Login.masterData.Batchhistory || [],\n        dataResult: process(this.props.Login.masterData.Batchhistory || [], this.state.histortState),\n        dataState: this.state.histortState,\n        dataStateChange: this.dataStateBatchHistoryChange,\n        userInfo: this.props.Login.userInfo,\n        methodUrl: \"Batchhistory\",\n        screenName: \"IDS_BATCHHISTORY\",\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 13\n        }\n      }));\n      return tabMap;\n    };\n\n    this.onFilterComboChange = (event, fieldname) => {\n      if (event !== null) {\n        let inputData = [];\n\n        if (fieldname === \"fromDate\") {\n          let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            fromDate: dateObj.fromDate,\n            //this.OnDateConverstion(event, fieldname),\n            toDate: dateObj.toDate,\n            //this.props.Login.masterData.toDate,\n            defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\n            defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\n            //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realFromDate: this.props.Login.masterData.realFromDate,\n            realToDate: this.props.Login.masterData.realToDate\n          };\n          this.props.getBCApprovalConfigVersion(inputData);\n        }\n\n        if (fieldname === \"toDate\") {\n          let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            fromDate: dateObj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            toDate: dateObj.toDate,\n            //this.OnDateConverstion(event, fieldname),\n            defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\n            defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\n            //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\n            realFromDate: this.props.Login.masterData.realFromDate,\n            realToDate: this.props.Login.masterData.realToDate\n          };\n          this.props.getBCApprovalConfigVersion(inputData);\n        } // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \n        //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \n\n\n        if (fieldname === \"nsampletypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 2,\n            needFilterSubmit: \"false\",\n            nsampletypecode: parseInt(event.value),\n            fromDate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            toDate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            userinfo: this.props.Login.userInfo,\n            defaultSampleType: event.item,\n            masterData: this.props.Login.masterData,\n            isneedrealFilterStatus: \"false\",\n            // realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            // realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            //  realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            //realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\",\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion\n          };\n          this.props.getBCRegistrationType(inputData);\n        } else if (fieldname === \"nregtypecode\") {\n          let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 3,\n            needFilterSubmit: \"false\",\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            fromDate: obj.fromDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\n            toDate: obj.toDate,\n            //(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\n            nregtypecode: parseInt(event.value),\n            userInfo: this.props.Login.userInfo,\n            defaultRegistrationType: event.item,\n            defaultSampleType: this.props.Login.masterData.defaultSampleType,\n            isneedrealFilterStatus: \"false\",\n            // realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            // realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            // realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            // realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\",\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion\n          };\n          this.props.getBCRegistrationSubType(inputData, this.props.Login.masterData);\n        } else if (fieldname === \"nregsubtypecode\") {\n          const nregsubtypecode = this.state; //this.setState({ nregsubtypecode:event });\n\n          this.getApprovalVersion(event);\n        } else if (fieldname === 'ndesigntemplatemappingcode') {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          const inputParamData = {\n            nflag: 3,\n            needFilterSubmit: \"false\",\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\n            userinfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            //defaultFilterStatus: event.item,\n            defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\n            ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\n            nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\n            // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n            //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\n            ndesigntemplatemappingcode: event.value,\n            DesignTemplateMappingValue: event.item,\n            isneedrealFilterStatus: \"false\",\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          }; //this.props.getREFilterTestData(inputParamData)\n\n          this.props.getBCFilterTemplate(inputParamData);\n        } else if (fieldname === \"version\") {\n          // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\n          //     this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          // inputData = {\n          //     nflag: 4,\n          //     fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\n          //     todate: obj.toDate,//this.props.Login.masterData.toDate,\n          //     nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n          //     nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n          //     nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n          //     napprovalversioncode: event.value,\n          //     userinfo: this.props.Login.userInfo,\n          //     defaultApprovalConfigVersion: event.item,\n          //     masterData: this.props.Login.masterData,\n          //     ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\n          // }\n          // this.props.getBCJobStatus(inputData)\n          const ApprovalVersionValue = this.state;\n          this.setState({\n            ApprovalVersionValue: event\n          });\n        } else if (fieldname === \"jobstatus\") {\n          let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, this.props.Login.masterData.toDate, this.props.Login.userInfo);\n          inputData = {\n            nflag: 5,\n            needFilterSubmit: \"false\",\n            fromdate: obj.fromDate,\n            //this.props.Login.masterData.fromDate,\n            todate: obj.toDate,\n            //this.props.Login.masterData.toDate,\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\n            nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\n            nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\n            napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\n            njobstatuscode: event.value,\n            userinfo: this.props.Login.userInfo,\n            defaultjobstatus: event.item,\n            masterData: this.props.Login.masterData,\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\n            realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\n          };\n          this.props.getBCFilterStatus(inputData);\n        } else if (fieldname === \"filter\") {\n          const FilterStatusValue = this.state;\n          this.setState({\n            FilterStatusValue: event\n          });\n        } else if (fieldname === \"test\") {\n          const FilterStatusValue = this.state;\n          this.setState({\n            FilterStatusValue: event\n          });\n        } else {\n          const selectedRecord = this.state;\n          this.setState({\n            selectedRecord: event\n          });\n        }\n      }\n    };\n\n    this.handleFilterDateChange = (dateValue, dateName) => {\n      const {\n        selectedFilter\n      } = this.state;\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedFilter[dateName] = dateValue;\n      this.setState({\n        selectedFilter\n      });\n    };\n\n    this.headerSelectionChange = event => {\n      let checked = event.syntheticEvent.target.checked;\n      let sampleList = this.state.samples || [];\n      let addedSamplesList = [];\n      checked = checked == false && this.state.samples.length > 0 ? false : this.state.samples.length == 0 ? false : true;\n\n      if (checked) {\n        //const data = event.dataItems.map(item => {\n        const data = event.target.props.data.map(item => {\n          if (sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n            sampleList.push({ ...item,\n              selected: false\n            });\n            item.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected'];\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n            return item;\n          } else {\n            let olditem = JSON.parse(JSON.stringify(sampleList[sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]));\n            olditem.selected = checked;\n            let newItem = JSON.parse(JSON.stringify(olditem));\n            newItem.selected = false;\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = olditem;\n            newItem[\"jsonuidata\"]['samplelist'] = olditem;\n            addedSamplesList.push(newItem);\n            return olditem;\n          }\n        });\n        this.setState({\n          samples: data,\n          addedSamplesList: addedSamplesList,\n          sampleList,\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } else {\n        // let sampleListData = this.state.sampleList || [];\n        // let deletedListdData = this.state.sampleList || [];\n        let sampleListData = this.state.samples || [];\n        let deletedListdData = this.state.samples || [];\n        const data = this.state.samples.map(item => {\n          sampleListData = sampleListData.filter(item1 => item1.npreregno !== item.npreregno);\n          deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n          item.selected = checked;\n          return item;\n        }); // console.log(\"data:\",data1, data2);\n\n        this.setState({\n          samples: data,\n          addedSamplesList: sampleListData,\n          deletedList: deletedListdData,\n          addSelectAll: checked,\n          deleteSelectAll: false\n        });\n      } // const data = this.state.addComponentDataList.map(item=>{\n      //     if (checked){\n      //         addedComponentList.push({...item, selected:false});\n      //     }\n      //     else{\n      //         data1 = data1.filter(item1=>item1.npreregno !== item.npreregno);\n      //         data2 = data2.filter(item1=>item1.npreregno !== item.npreregno);      \n      //     }  \n      //     item.selected = checked;\n      //     return item;\n      // });\n\n    };\n\n    this.onTreeClick = event => {\n      const inputParam = {\n        methodUrl: \"TestGroupSpecification\",\n        screenName: \"IDS_REGISTRATION\",\n        operation: \"get\",\n        activeKey: event.key,\n        focusKey: event.key,\n        keyName: \"treetemplatemanipulation\",\n        userinfo: this.props.Login.userInfo,\n        selectedNode: event.item,\n        selectedRecord: this.state.selectedRecord,\n        primaryKey: event.primaryKey\n      };\n\n      if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\n        this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\n      }\n    };\n\n    this.selectionChange = event => {\n      let addedSamplesList = this.state.addedSamplesList || []; //let addedSamplesList= [];\n\n      let samples = this.state.samples || [];\n      const samplesList = this.state.samples.map(item => {\n        if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\n          item.selected = !event.dataItem.selected; //  item={...item,\"selected\":!event.dataItem.selected};\n\n          if (item.selected) {\n            const newItem = JSON.parse(JSON.stringify(item)); //newItem.selected = false;\n\n            delete newItem['selected'];\n            newItem[\"jsondata\"] = {};\n            newItem[\"jsonuidata\"] = {};\n            newItem[\"jsondata\"]['samplelist'] = item;\n            newItem[\"jsonuidata\"]['samplelist'] = item;\n            addedSamplesList.push(newItem);\n          } else {\n            // if(addedSamplesList.length === 0){\n            addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode); //   }else{\n            //     this.state.samples.map((item1,index) => { \n            //         if(item1.ntransactiontestcode == event.dataItem.ntransactiontestcode){\n            //             if(this.state.samples.length == 1){\n            //                 addedSamplesList=[];\n            //             }else{\n            //                 const newItem = JSON.parse(JSON.stringify(item1));\n            //                 newItem.selected = false;\n            //                 newItem[\"jsondata\"]={};\n            //                 newItem[\"jsonuidata\"]={};\n            //                 newItem[\"jsondata\"]['samplelist'] = item1\n            //                 newItem[\"jsonuidata\"]['samplelist'] = item1\n            //                 //addedSamplesList.push(newItem);\n            //                 addedSamplesList = item1;\n            //             }  \n            //         }\n            //     } \n            //   )\n          }\n        }\n\n        return item;\n      }); ///samplesList = addedSamplesList;\n\n      this.setState({\n        samplesList,\n        addedSamplesList,\n        samples,\n        initialList: addedSamplesList,\n        addSelectAll: this.valiateCheckAll(samplesList),\n        deleteSelectAll: this.valiateCheckAll(samplesList)\n      });\n    };\n\n    this.handleSaveClick = saveType => {\n      const failedControls = [];\n      const startLabel = [];\n      let label = \"IDS_ENTER\";\n      let mandatoryFields = [];\n      let selectedRecord = this.state.selectedRecord;\n      console.log(\"handle save:\", selectedRecord);\n      mandatoryFields = [{\n        \"idsName\": \"IDS_SPECIFICATION\",\n        \"dataField\": \"nallottedspeccode\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"combo\"\n      }];\n      let selectedSpec = this.props.Login.selectedSpec;\n\n      if (selectedRecord && selectedRecord.nallottedspeccode !== \"\") {\n        selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\n        selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\n        selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\n        const updateInfo = {\n          typeName: DEFAULT_RETURN,\n          data: {\n            loadSpec: false,\n            selectedSpec,\n            openModal: true,\n            openSpecModal: false\n          }\n        };\n        this.props.updateStore(updateInfo);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSPECIFICATION\"\n        }));\n      }\n    };\n\n    this.handlePageChange = e => {\n      this.setState({\n        skip: e.skip,\n        take: e.take\n      });\n    };\n\n    this.ConfirmDelete = (selectedBatch, deleteId, operation) => {\n      this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_DEFAULTCONFIRMMSG\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.deleteBatchCreation(selectedBatch, deleteId, operation));\n    };\n\n    this.completePopUpStartActions = completeId => {\n      // if(this.props.Login.masterData.nneedtestinitiate === true){\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      } //    }else \n      else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } else {\n        // const updateInfo = {\n        //     typeName: DEFAULT_RETURN,\n        //     data: {\n        //         openModal: true, \n        //         completeId : completeId,\n        //         masterData: this.props.Login.masterData,\n        //        // screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\n        //         operation: \"complete\"\n        //     }\n        // }\n        // this.props.updateStore(updateInfo);\n        let inputData = {};\n        inputData[\"openModal\"] = true;\n        inputData[\"completeId\"] = completeId;\n        inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"operation\"] = \"complete\";\n        this.props.batchCompleteDatePopup(inputData, this.props.Login.masterData);\n      }\n    };\n\n    this.AddSpec = e => {\n      if (this.state.selectedMaterial !== undefined && this.state.selectedMaterialCategory !== undefined) {\n        let inputData = {};\n        inputData[\"nmaterialcode\"] = this.state.selectedMaterial.value;\n        inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory.value;\n        inputData[\"ncategorybasedflow\"] = this.state.selectedMaterialCategory.item.ncategorybasedflow;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode; // inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \n        // inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \n        // inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \n        // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        // inputData[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n        // inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n\n        this.props.getTreeByMaterial(inputData, this.state.selectedRecord, this.props.Login.masterData);\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_FILLALLDETAILSTOADDSPEC\"\n        }));\n      }\n    };\n\n    this.testPopUpStartActions = testStartId => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } // else if (this.props.Login.masterData.iqcsample.length==0){\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\n      // }\n      else {\n        let inputData = {};\n        inputData[\"openModal\"] = true;\n        inputData[\"testStartId\"] = testStartId;\n        inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"operation\"] = \"initiate\";\n        this.props.batchInitiateDatePopup(inputData, this.props.Login.masterData); //         const updateInfo = {\n        //             typeName: DEFAULT_RETURN,\n        //             data: {\n        //                 openModal: true, \n        //                 testStartId : testStartId,\n        //                 selectedRecord : this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord,\n        //                 masterData: this.props.Login.masterData,\n        //                 operation: \"initiate\"\n        //             }\n        //         }\n        // this.props.updateStore(updateInfo);\n      }\n    };\n\n    this.testStartActions = (selectedmaster, testStartId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.INITIATED || selectedmaster.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else if (this.props.Login.masterData.Samples.length == 0) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLEFORINITIATE\"\n        }));\n      } //else if (this.props.Login.masterData.iqcsample.length==0){\n      //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\n      // }\n      else {\n        let inputData = {};\n        let jsonuidata = [];\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/initiateBatchcreation\",\n          isSingleGet: true,\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n\n        if (this.props.Login.masterData.iqcsample.length > 0) {\n          let totalSample = this.props.Login.masterData.Samples.concat(this.props.Login.masterData.iqcsample);\n          inputData[\"npreregno\"] = this.props.Login.masterData.iqcsample.map(samples => samples.npreregno).join(\",\");\n          inputData[\"ntransactiontestcode\"] = totalSample.map(samples => samples.ntransactiontestcode).join(\",\");\n          inputData[\"nneedjoballocationiqc\"] = true;\n          inputData[\"isiqcdata\"] = true;\n        } else {\n          inputData[\"npreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\n          inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\n          inputData[\"isiqcdata\"] = false;\n          inputData[\"nneedjoballocationiqc\"] = false;\n        }\n\n        inputData[\"nbatchsampleCode\"] = this.props.Login.masterData.Samples.map(sample => sample.nbatchsamplecode).join(\",\");\n        inputData[\"muluserpreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\n        inputData[\"mulusertransactionsamplecode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactionsamplecode).join(\",\");\n        inputData[\"mulusertransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; // inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"batchsample\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"nneedmyjob\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob;\n        inputData[\"nneedjoballocation\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.INITIATED || transactionStatus.DRAFT;\n        inputData[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n        inputData[\"Batchhistory\"] = {\n          dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ? this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\n          scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\n        };\n        inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n        inputData[\"testStartId\"] = testStartId;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1];\n        inputData[\"sample\"] = this.props.Login.masterData ? this.props.Login.masterData.sample : \"\";\n        inputData[\"iqcsample\"] = this.props.Login.masterData ? this.props.Login.masterData.iqcsample : \"\";\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"initiate\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, testStartId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData // defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\n                  //     && this.props.Login.masterData.BCFilterStatus[1],\n                  // realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\n                  //     && this.props.Login.masterData.BCFilterStatus[1],\n\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchInitiateAction(inputData, this.props.Login.masterData, this.confirmMessage);\n        }\n      }\n    };\n\n    this.batchSaveIQCActions = selectedmaster => {\n      if (this.state.selectedRecord.savailablequatity !== \"0.00\") {\n        if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.props.Login.masterData.inventoryTransaction.savailablequatity)) {\n          if (this.props.Login.selectedSpec.nallottedspeccode !== undefined && this.props.Login.selectedSpec.nallottedspeccode !== \"\") {\n            let userInfo = {};\n            let inputRegistrationData = {};\n            let inputMaterialInventoryData = {};\n            let inputBatchData = {};\n            const map = {};\n            let batchCreationSampleData = {};\n            let batchCreationTestData = {};\n            let batchCreationSampleArray = [];\n            let batchCreationTestArray = [];\n            let samplecombinationuniqueArray = [];\n            let inputMaterialInventoryArrData = [];\n            batchCreationSampleData[\"nspecsampletypecode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? this.props.Login.selectedSpec.nallottedspeccode.nspecsampletypecode : transactionStatus.NA;\n            batchCreationSampleData[\"ncomponentcode\"] = transactionStatus.NA;\n            batchCreationSampleData[\"slno\"] = 1;\n            batchCreationSampleArray.push(batchCreationSampleData);\n            inputRegistrationData[\"nallottedspeccode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ? this.props.Login.selectedSpec.nallottedspeccode.value : transactionStatus.NA;\n            inputRegistrationData[\"ntemplatemanipulationcode\"] = this.props.Login.ntemplatemanipulationcode || transactionStatus.NA;\n            inputRegistrationData[\"nregsubtypeversioncode\"] = this.props.Login.masterData.nregsubtypeversioncode;\n            inputRegistrationData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode; // inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n            // inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n            // inputRegistrationData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n            inputRegistrationData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n            inputRegistrationData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n            inputRegistrationData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n            inputRegistrationData[\"nproductcatcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"nproductcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"ninstrumentcatcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"ninstrumentcode\"] = transactionStatus.NA;\n            inputRegistrationData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\n            inputRegistrationData[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\n            inputRegistrationData[\"jsondata\"] = {\n              nmaterialcode: this.state.selectedMaterial.value,\n              nmaterialcatcode: this.state.selectedMaterialCategory.value,\n              smaterialcatname: this.state.selectedMaterialCategory.label,\n              sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\n              nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n              smaterial: this.state.selectedMaterial.item.smaterialname,\n              smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\n              nmaterialtypecode: this.state.selectedMaterialType.value,\n              susedquantity: this.state.selectedRecord.susedquantity,\n              sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\n              savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\n              //materialtype:this.state.selectedMaterialType.label,\n              sremarks: this.state.selectedRecord.sremarks,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            };\n            inputRegistrationData[\"jsonuidata\"] = {\n              nmaterialcode: this.state.selectedMaterial.value,\n              nmaterialcatcode: this.state.selectedMaterialCategory.value,\n              smaterialcatname: this.state.selectedMaterialCategory.label,\n              sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\n              nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n              smaterial: this.state.selectedMaterial.item.smaterialname,\n              smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\n              nmaterialtypecode: this.state.selectedMaterialType.value,\n              susedquantity: this.state.selectedRecord.susedquantity,\n              sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\n              savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\n              //materialtype:this.state.selectedMaterialType.label,\n              sremarks: this.state.selectedRecord.sremarks,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; // inputMaterialInventoryData = {\n            //     jsondata : this.props.Login.masterData.selectedInventoryUnit['jsondata']\n            // }\n            //  inputMaterialInventoryData = {\n            //         nmaterialinventorycode : this.state.selectedMaterialInventory.item.nmaterialinventorycode,\n            //         jsondata : {\n            //             jsondata:this.props.Login.masterData.selectedInventoryUnit['jsondata'],\n            //             nqtyused: this.state.selectedRecord.susedquantity\n            //         },\n            //         jsonuidata : {\n            //             jsonuidata : this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\n            //             nqtyused: this.state.selectedRecord.susedquantity\n            //         },\n            //         nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            //  };\n\n            inputMaterialInventoryData[\"nmaterialinventorycode\"] = this.state.selectedMaterialInventory.item.nmaterialinventorycode;\n            inputMaterialInventoryData[\"jsondata\"] = { ...this.props.Login.masterData.selectedInventoryUnit['jsondata'],\n              nqtyused: this.state.selectedRecord.susedquantity,\n              savailablequatity: this.state.selectedRecord.savailablequatity,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; //inputMaterialInventoryData[\"jsondata\"] = this.state.selectedRecord.susedquantity;\n\n            inputMaterialInventoryData[\"nsectioncode\"] = this.props.Login.masterData.selectedInventoryUnit['nsectioncode'];\n            inputMaterialInventoryData[\"jsonuidata\"] = { ...this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\n              nqtyused: this.state.selectedRecord.susedquantity,\n              savailablequatity: this.state.selectedRecord.savailablequatity,\n              nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\n            }; //inputMaterialInventoryArrData.push(inputMaterialInventoryData);\n\n            batchCreationTestData[\"ntestgrouptestcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.ntestgrouptestcode : transactionStatus.NA; //     batchCreationTestData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\n\n            batchCreationTestData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\n            batchCreationTestData[\"nsectioncode\"] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n            batchCreationTestData[\"nmethodcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.nmethodcode : transactionStatus.NA; //   batchCreationTestData[\"nchecklistversioncode\"]=this.state.selectedTestSynonym ? this.state.selectedTestSynonym.item.nchecklistversioncode:transactionStatus.NA;\n\n            batchCreationTestData[\"nrepeatcountno\"] = 1; //--\n            //    batchCreationTestData[\"ntestretestno\"]=0;\n\n            batchCreationTestData[\"nparametercount\"] = 1; //--\n\n            batchCreationTestData[\"slno\"] = 1; //--\n\n            batchCreationTestArray.push(batchCreationTestData);\n            map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\n            map[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n            userInfo = this.props.Login.userInfo;\n            map[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n            map[\"napproveconfversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n            map[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n            map[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\n            map[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\n            map[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\n            map[\"nmaterialtypecode\"] = this.state.selectedMaterialType ? this.state.selectedMaterialType.value : transactionStatus.NA;\n            inputBatchData = this.props.Login.masterData.SelectedBatchmaster;\n            map['Registration'] = inputRegistrationData;\n            map['Batchsampleiqc'] = inputBatchData;\n            map['RegistrationSample'] = batchCreationSampleArray;\n            map['testgrouptest'] = batchCreationTestArray;\n            map['userInfo'] = userInfo;\n            map['samplecombinationunique'] = samplecombinationuniqueArray;\n            map['inputMaterialInventoryArrData'] = inputMaterialInventoryData;\n            const inputParam = {\n              inputData: map,\n              classUrl: \"batchcreation\",\n              methodUrl: \"Batchcreation\",\n              displayName: \"IDS_BATCHIQCSAVE\",\n              operation: \"createiqc\"\n            };\n            this.props.batchSaveIQCActions(inputParam.inputData, this.props.Login.masterData);\n          } else {\n            toast.warn(this.props.intl.formatMessage({\n              id: \"IDS_ADDSPECIFICATIONS\"\n            }));\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_USEDQTYISGREATERTHANAVAILABLEQTY\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_NOAVAILABLEQUANTITY\"\n        }));\n      }\n    };\n\n    this.cancelBatch = (selectedmaster, cancelId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.DRAFT || selectedmaster.ntransactionstatus == transactionStatus.COMPLETED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTBATCHINITIATEDRECORD\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/cancelBatch\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"samples\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"ntranscode\"] = transactionStatus.CANCELLED || transactionStatus.DRAFT; // inputData[\"Batchhistory\"] ={\n        //     dtransactiondate : formatInputDate(new Date(),true),\n        //     scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\n        //     };\n        //inputData[\"completeId\"] = completeId;\n\n        inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[3];\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batch\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"cancel\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, cancelId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData,\n                  defaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2],\n                  realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2]\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchCancelAction(inputData, this.props.Login.masterData);\n        }\n      }\n    };\n\n    this.batchCompleteActions = (selectedmaster, completeId) => {\n      if (selectedmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTINITIATEDBATCH\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedmaster.nbatchmastercode,\n          fetchUrl: \"batchcreation/completeBatchcreation\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        let jsondata = this.props.Login.masterData.Samples.map(item => {\n          return {\n            jsonuidata: item\n          };\n        });\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\n        inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample => sample.ntransactiontestcode).join(\",\");\n        inputData[\"samples\"] = jsondata;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\n        inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA; //  inputData[\"ntranscode\"] = transactionStatus.COMPLETED || transactionStatus.DRAFT;\n\n        inputData[\"ntranscode\"] = transactionStatus.COMPLETED;\n        inputData[\"Batchhistory\"] = {\n          dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ? this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\n          scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\n        };\n        inputData[\"completeId\"] = completeId;\n        inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[2];\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          operation: \"complete\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData: { ...masterData // defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\n                  //     && this.props.Login.masterData.BCFilterStatus[2],\n                  // realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\n                  //     && this.props.Login.masterData.BCFilterStatus[2],\n\n                }\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation: inputParam.operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.batchCompleteAction(inputData, this.props.Login.masterData);\n        }\n      }\n    };\n\n    this.closeAlert = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showConfirmAlert: false,\n          loading: false\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.closeModal = () => {\n      let loadEsign = this.props.Login.loadEsign;\n      let openModal = this.props.Login.openModal;\n      let selectedRecord = this.props.Login.selectedRecord;\n      let openSpecModal = this.props.Login.openSpecModal;\n\n      if (this.props.Login.loadEsign) {\n        if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"cancel\") {\n          //    this.props.Login.operation === \"complete\") {\n          loadEsign = false;\n          openModal = false;\n        } else {\n          loadEsign = false;\n        }\n\n        selectedRecord[\"esigncomments\"] = \"\";\n        selectedRecord[\"esignpassword\"] = \"\";\n      } else if (this.props.Login.openSpecModal) {\n        loadEsign = false;\n        openSpecModal = false;\n      } else {\n        openModal = false;\n        selectedRecord = {};\n      }\n\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          openModal,\n          loadEsign,\n          selectedRecord,\n          openSpecModal,\n          selectedId: null\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onComboChange = (comboData, fieldName) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      let {\n        selectedInstCategory,\n        selectedInstrumentId,\n        InstrumentCategory,\n        selectedInstrument,\n        Instrument,\n        InstrumentID\n      } = this.state;\n      let inputData = {};\n\n      if (comboData == null) {\n        selectedInstCategory = undefined;\n        selectedInstrumentId = undefined;\n        Instrument = undefined;\n        InstrumentID = undefined;\n        selectedInstrument = undefined;\n        selectedRecord['sinstrumentcatname'] = undefined;\n        selectedRecord['sinstrumentname'] = undefined;\n        selectedRecord['sinstrumentid'] = undefined;\n        this.setState({\n          selectedInstCategory,\n          selectedInstrumentId,\n          selectedInstrument,\n          selectedRecord,\n          Instrument,\n          InstrumentID\n        });\n      } else {\n        selectedRecord[fieldName] = comboData.item;\n\n        if (fieldName === \"sproductname\") {\n          selectedRecord[\"nproductcode\"] = comboData.value;\n          selectedRecord[\"userInfo\"] = this.props.Login.userInfo;\n          selectedRecord[\"stestname\"] = this.state.selectedRecord['stestname'];\n          selectedRecord[\"ntestcode\"] = this.state.selectedRecord['stestname']['ntestcode'];\n          selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n\n          selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n          selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n          selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA; //this.setState({ selectedProduct:comboData });\n\n          this.props.getProductBasedInstrument(selectedRecord, this.props.Login.masterData);\n        } else if (fieldName === \"ssectionname\") {\n          inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n          inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n          inputData['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n          inputData['section'] = selectedRecord.ssectionname;\n          inputData['userInfo'] = this.props.Login.userInfo;\n          inputData['nneedmyjob'] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nneedmyjob : false;\n          inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n          this.props.getTestInstrumentComboService(inputData, this.props.Login.masterData); // this.setState({ selectedSection:comboData });\n        } else if (fieldName === \"stestname\") {\n          if (this.props.Login.operation === \"update\") {\n            selectedRecord[\"nprevioustestcode\"] = this.state.selectedTestSynonym.value;\n          }\n\n          selectedRecord[\"ntestcode\"] = comboData.value;\n          selectedRecord['userInfo'] = this.props.Login.userInfo;\n          selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n\n          selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\n          selectedRecord[\"nprojectmastercode\"] = comboData.item.nprojectmastercode;\n          selectedRecord['sinstrumentcatname'] = undefined;\n          selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n          selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n          this.props.getTestInstrumentCategory(selectedRecord, this.props.Login.masterData);\n        } else if (fieldName === \"sinstrumentcatname\") {\n          selectedRecord[\"ninstrumentcatcode\"] = comboData.value;\n          selectedRecord[\"ncalibrationreq\"] = comboData.item.ncalibrationreq;\n          selectedRecord[\"ntestcode\"] = this.state.selectedTestSynonym.value;\n          selectedRecord['userInfo'] = this.props.Login.userInfo; //selectedRecord['sinstrumentid']=undefined;\n\n          selectedRecord['sinstrumentname'] = undefined;\n          this.props.getInstrumentForInstCategory(selectedRecord, this.props.Login.masterData); //this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\n        } else if (fieldName === \"smaterialcatname\") {\n          selectedRecord[\"nmaterialcatcode\"] = comboData.value;\n          selectedRecord[\"needsectionwise\"] = comboData.item.needSectionwise;\n          selectedRecord['userInfo'] = this.props.Login.userInfo;\n          selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n          this.setState({\n            selectedMaterialCategory: comboData\n          });\n          this.props.getMaterialBasedOnMaterialCategory(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n        } else if (fieldName === \"smaterialname\") {\n          selectedRecord[\"nmaterialcode\"] = comboData.value;\n          selectedRecord['userInfo'] = this.props.Login.userInfo;\n          selectedRecord['needsection'] = comboData.item.needsection;\n          selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\n          this.setState({\n            selectedMaterial: comboData\n          });\n          this.props.getMaterialInventoryBasedOnMaterial(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n        } else if (fieldName === \"sinventoryid\") {\n          selectedRecord[\"nmaterialcode\"] = this.state.selectedMaterial.value;\n          selectedRecord[\"materialInvCode\"] = comboData.item.nmaterialinventorycode;\n          selectedRecord['userInfo'] = this.props.Login.userInfo;\n          selectedRecord['needsection'] = this.props.Login.masterData.selectedMaterial.needsection;\n          this.setState({\n            selectedMaterialInventory: comboData\n          }); // if(this.state.selectedMaterial.item.needsection == transactionStatus.NO){\n          //     selectedRecord['nsectioncode']=transactionStatus.NA;\n          // }else{\n\n          selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode; //}\n\n          this.props.getMaterialAvailQtyBasedOnInv(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\n        } else if (fieldName === \"sinstrumentname\") {\n          selectedRecord[\"ninstrumentnamecode\"] = comboData.value;\n          selectedRecord[\"sinstrumentname\"] = comboData.label;\n          selectedRecord['userInfo'] = this.props.Login.userInfo; //selectedRecord['sinstrumentid']=undefined;\n\n          selectedRecord['selectedInstrument'] = comboData.item;\n          selectedRecord['ninstrumentcatcode'] = comboData.item.ninstrumentcatcode;\n          selectedRecord['ninstrumentcode'] = comboData.item.ninstrumentcode;\n          this.props.getInstrumentID(selectedRecord, this.props.Login.masterData);\n        } else if (fieldName === \"sprojectcode\") {\n          this.setState({\n            selectedProjectcode: comboData\n          });\n        } else {\n          this.setState({\n            selectedInstrumentId: comboData\n          });\n        } // else{\n        //    // let nInstrumentCategory=\"\",nInstrument=\"\",nInstrumentID=\"\";\n        //     this.setState=({InstrumentCategory:{},Instrument:{},\n        //         InstrumentID:})\n        //   }\n\n      }\n    };\n\n    this.onNumericInputOnChange = (value, name) => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[name] = value;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onInputOnChange = event => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (event.target.name === \"ntransactionstatus\") selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;else selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\n      } else {\n        selectedRecord[event.target.name] = event.target.value;\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onMultiColumnValue = (value, key, flag, label, keys) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n\n        if (flag) {\n          keys.map((objkey, index) => {\n            return selectedRecord[objkey] = {\n              \"label\": value[0][label[index]],\n              \"value\": value[0][objkey]\n            };\n          });\n        }\n      } else {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = \"\";\n        });\n        keys.map((objkey, index) => {\n          return selectedRecord[objkey] = \"\";\n        });\n      }\n\n      this.props.getBatchManufacturerComboChange(selectedRecord, this.props.Login.userInfo);\n    };\n\n    this.onMultiColumnMAHChange = (value, key) => {\n      const selectedRecord = this.state.selectedRecord || {};\n\n      if (value.length > 0) {\n        key.forEach(objarray => {\n          selectedRecord[objarray] = value[0][objarray];\n        });\n      }\n\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.clearComponentInput = () => {\n      const selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[\"nproductcode\"] = undefined;\n      selectedRecord[\"ncomponentcode\"] = undefined;\n      selectedRecord[\"smanuflotno\"] = \"\";\n      selectedRecord[\"dateprompt\"] = transactionStatus.NO;\n      selectedRecord[\"transdatefrom\"] = this.props.Login.componentDefaultSearchDate;\n      selectedRecord[\"transdateto\"] = this.props.Login.componentDefaultSearchDate;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.openClosePortal = () => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ninstrumentcode !== transactionStatus.NA) {\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED) {\n          if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\n            if (this.props.Login.elnUserInfo !== null || this.props.Login.elnUserInfo != undefined) {\n              this.props.Login.masterData.enlLink = \"\";\n              let integrationSettings = this.props.Login.integrationSettings;\n              let inputParam = {\n                userInfo: this.props.Login.userInfo,\n                elnUserInfo: this.props.Login.elnUserInfo,\n                elnSite: this.props.Login.elnSite,\n                nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\n                ntestcode: this.props.Login.masterData.ntestcode\n              };\n              let link = \"\";\n              let detail = CF_encryptionData(\"-1//Sheet\").EncryptData;\n              const settedId = inputParam.nbatchmastercode; //console.log(settedId);\n\n              let encryptedbatchid = CF_encryptionData(settedId).EncryptData;\n              const userObject = {\n                usercode: inputParam.elnUserInfo.nelncode,\n                username: inputParam.elnUserInfo.selnuserid,\n                userfullname: inputParam.elnUserInfo.selnusername,\n                lsusergroup: {\n                  usergroupcode: inputParam.elnUserInfo.nelnusergroupcode,\n                  usergroupname: inputParam.elnUserInfo.nelnusergroupcode\n                },\n                lssitemaster: {\n                  sitecode: inputParam.elnSite.nelnsitecode\n                }\n              };\n              let encrypteduser = CF_encryptionData(userObject).EncryptData;\n              const baseURL = integrationSettings[1].slinkname;\n              link = baseURL + \"/vieworder\" + '#{\"d\":\"' + settedId + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}'; // this.props.getELNTestValidation(test,this.props.Login.integrationSettings); \n\n              const updateInfo = {\n                typeName: DEFAULT_RETURN,\n                data: {\n                  openELNSheet: true,\n                  masterData: { ...this.props.Login.masterData,\n                    enlLink: link,\n                    baseURL: baseURL\n                  }\n                }\n              };\n              this.props.updateStore(updateInfo);\n            } else {\n              toast.warn(this.props.intl.formatMessage({\n                id: \"IDS_ELNSHEETNOTFOUND\"\n              }));\n            }\n          } else {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                openELNSheet: false,\n                masterData: { ...this.props.Login.masterData,\n                  enlLink: \"\"\n                }\n              }\n            };\n            this.props.updateStore(updateInfo);\n          }\n        } else {\n          toast.warn(this.props.intl.formatMessage({\n            id: \"IDS_SELECTINITIATEDBATCH\"\n          }));\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTBATCHWITHINSTRUMENT\"\n        }));\n      }\n    };\n\n    this.handleDateChange = (dateName, dateValue) => {\n      let selectedRecord = {};\n\n      if (dateValue === null) {\n        dateValue = new Date();\n      }\n\n      selectedRecord[dateName] = dateValue;\n      this.setState({\n        selectedRecord\n      });\n    };\n\n    this.onDropImage = (attachedFiles, fieldName) => {\n      let selectedRecord = this.state.selectedRecord || {};\n      selectedRecord[fieldName] = attachedFiles;\n      this.setState({\n        selectedRecord,\n        actionType: \"new\"\n      });\n    };\n\n    this.saveSample = addedsamplelist => {\n      if (addedsamplelist === undefined) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLESTOSUBMIT\"\n        }));\n      } else if (addedsamplelist.length > 0) {\n        let sampleArray = [];\n        addedsamplelist.map(item => sampleArray.push({\n          npreregno: item.npreregno,\n          ntransactionsamplecode: item.ntransactionsamplecode,\n          ntransactiontestcode: item.ntransactiontestcode,\n          nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster ? this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode : transactionStatus.NA,\n          sarno: item.jsonuidata.samplelist.sarno,\n          ssamplearno: item.jsonuidata.samplelist.ssamplearno,\n          stestname: item.jsonuidata.samplelist.stestname,\n          jsonuidata: {\n            samplelist: item.jsonuidata.samplelist\n          },\n          jsondata: {\n            samplelist: item.jsondata.samplelist\n          }\n        }));\n        let nbatchmastercode = this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode; // batchSample = {\n        //     npreregno: addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\n        //     ntransactionsamplecode : addedsamplelist.map(sample=>sample.ntransactionsamplecode).join(\",\"),\n        //     ntransactiontestcode : addedsamplelist.map(sample=>sample.ntransactiontestcode).join(\",\"),\n        //     npreregno : addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\n        //     nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster &&\n        //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\n        //     jsonuidata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}',\n        //     jsondata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}'\n        // }\n        //jsondata : \n\n        const inputParam = {\n          inputData: {\n            batchSample: nbatchmastercode,\n            sampleArray,\n            userInfo: this.props.Login.userInfo,\n            masterData: this.props.Login.masterData,\n            nregtypecode: this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\n            nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA\n          }\n        };\n        this.props.createSampleAction(inputParam.inputData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTSAMPLESTOSUBMIT\"\n        }));\n      }\n    };\n\n    this.onSaveClick = (saveType, formRef) => {\n      if (this.props.Login.operation === \"createSample\") {\n        this.saveSample(this.state.addedSamplesList);\n      } else if (this.props.Login.operation === \"initiate\") {\n        this.testStartActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.testStartId);\n      } else if (this.props.Login.operation === \"complete\") {\n        this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.completeId);\n      } else if (this.props.Login.operation === \"createiqcsample\") {\n        this.batchSaveIQCActions(this.props.Login.masterData.SelectedBatchmaster);\n      } else {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n\n        if (this.props.Login.operation === \"create\") {\n          inputData[\"fromDate\"] = obj.fromDate;\n          inputData[\"toDate\"] = obj.toDate;\n        }\n\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"nneedcombodataforFilter\"] = \"true\";\n        inputData[\"needFilterSubmit\"] = \"false\";\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"nprevioustestcode\"] = this.state.selectedRecord && this.state.selectedRecord.nprevioustestcode != undefined ? this.state.selectedRecord.nprevioustestcode : this.state.selectedTestSynonym.value;\n        inputData[\"ntestcode\"] = this.state.selectedTestSynonym ? this.state.selectedTestSynonym.value : transactionStatus.NA;\n        inputData[\"nsectioncode\"] = this.state.selectedSection ? this.state.selectedSection.item.nsectioncode : transactionStatus.NA; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType.nsampletypecode;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType.nregtypecode;\n        //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.value :transactionStatus.NA;\n\n        inputData[\"ninstrumentcatcode\"] = this.state.selectedInstCategory ? this.state.selectedInstCategory.value : transactionStatus.NA;\n        inputData[\"ninstrumentcode\"] = this.state.selectedInstrument ? this.state.selectedInstrument.value : transactionStatus.NA;\n        inputData[\"nproductcode\"] = this.state.selectedProduct ? this.state.selectedProduct.value : transactionStatus.NA;\n        inputData[\"ntransactionstatus\"] = transactionStatus.DRAFT;\n        inputData[\"sbatcharno\"] = '-'; // inputData[\"defaultSampleType\"]=this.props.Login.masterData.realSampleTypeValue ? \n        // this.props.Login.masterData.realSampleTypeValue : transactionStatus.NA;\n        // inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \n        // this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\n        // inputData[\"defaultRegistrationSubType\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? \n        // this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\n\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n\n        inputData[\"ntranscode\"] = transactionStatus.DRAFT;\n        inputData[\"sinstrumentid\"] = this.state.selectedInstrumentId ? this.state.selectedInstrumentId.label : \"NA\"; // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \n        // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\n        // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA;\n        inputData[\"nprojectmastercode\"] = this.state.selectedProjectcode ? this.state.selectedProjectcode.value : transactionStatus.NA;\n        let postParam = undefined;\n        postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          unchangeList: [\"FromDate\", \"ToDate\"],\n          isSingleGet: true,\n          fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\"\n        };\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          postParam,\n          searchRef: this.searchRef,\n          operation: this.props.Login.operation,\n          saveType,\n          formRef\n        };\n\n        if (this.props.Login.operation === \"create\") {\n          this.searchRef.current.value = \"\";\n          this.props.createBatchmasterAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\n        } else {\n          inputData[\"nbatchmastercode\"] = this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\n          inputData[\"SelectedBatchmaster\"] = this.props.Login.masterData.SelectedBatchmaster;\n\n          if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.editId)) {\n            const updateInfo = {\n              typeName: DEFAULT_RETURN,\n              data: {\n                loadEsign: true,\n                screenData: {\n                  inputParam,\n                  masterData: this.props.Login.masterData\n                },\n                openModal: true,\n                screenName: \"IDS_BATCHCREATION\",\n                operation: inputParam.operation\n              }\n            };\n            this.props.updateStore(updateInfo);\n          } else {\n            this.props.updateBatchcreationAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\n          }\n        }\n      } // const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\n      // if (esignNeeded) {\n      //     const updateInfo = {\n      //         typeName: DEFAULT_RETURN,\n      //         data: {\n      //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\n      //             openModal: true, screenName: \"IDS_BATCHCREATION\",\n      //             operation: this.props.Login.operation\n      //         }\n      //     }\n      //     this.props.updateStore(updateInfo);\n      // }\n      // else {\n      //     const selectedRecord = { ...this.state.selectedRecord, sbatchfillinglotno: \"\" }\n      //     this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", selectedRecord);\n      // }\n\n    };\n\n    this.deleteBatchCreation = (selectedBatch, deleteId, operation) => {\n      if (selectedBatch.ntransactionstatus === transactionStatus.COMPLETED || selectedBatch.ntransactionstatus === transactionStatus.INITIATED || selectedBatch.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\"\n        }));\n      } else {\n        let inputData = {};\n        const masterData = this.props.Login.masterData;\n        const postParam = {\n          inputListName: \"Batchmaster\",\n          selectedObject: \"SelectedBatchmaster\",\n          primaryKeyField: \"nbatchmastercode\",\n          primaryKeyValue: selectedBatch.nbatchmastercode,\n          fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\n          isSingleGet: true,\n          //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\n          fecthInputObject: {\n            userInfo: this.props.Login.userInfo,\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA,\n            nsampletypecode: this.props.Login.masterData.defaultSampleType.nsampletypecode\n          }\n        };\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"currentdate\"] = formatInputDate(new Date(), true);\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA; //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA; //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\n\n        inputData[\"nbatchmastercode\"] = selectedBatch.nbatchmastercode; //inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\n\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value === transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1 => item1.item.ntransactionstatus !== transactionStatus.ALL).map(item1 => item1.item.ntransactionstatus).join(\",\") : this.state.FilterStatusValue.value; // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\n        // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"selectedBatch\"] = selectedBatch;\n        inputData[\"samples\"] = this.props.Login.masterData.Samples;\n        const inputParam = {\n          postParam,\n          inputData: inputData,\n          operation,\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchcreation\",\n          displayName: \"IDS_BATCHCREATION\"\n        };\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              openModal: true,\n              screenName: \"IDS_BATCHCREATION\",\n              operation\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openModal\");\n        }\n      }\n    };\n\n    this.fetchEditData = editParam => {\n      if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT) {\n        this.props.getActiveBatchCreationService(editParam, this.props.Login.masterData.SelectedBatchmaster);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTDRAFTBATCH\"\n        }));\n      }\n    };\n\n    this.validateEsign = () => {\n      const inputParam = {\n        inputData: {\n          \"userinfo\": { ...this.props.Login.userInfo,\n            sreason: this.state.selectedRecord[\"esigncomments\"]\n          },\n          password: this.state.selectedRecord[\"esignpassword\"]\n        },\n        screenData: this.props.Login.screenData\n      }; //ALPD-3399\n\n      if (this.props.Login.operation == \"complete\" || this.props.Login.operation == \"initiate\") {\n        this.props.validateEsignforBatch(inputParam);\n      } else {\n        this.props.validateEsignCredential(inputParam, \"openModal\");\n      }\n    };\n\n    this.closeFilter = () => {\n      let inputValues = {\n        fromDate: this.props.Login.masterData.realFromDate || new Date(),\n        //this.state.selectedFilter[\"fromDate\"] != undefined ?\n        //rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate,\n        toDate: this.props.Login.masterData.realToDate || new Date(),\n        //this.state.selectedFilter[\"toDate\"] != undefined ?\n        // rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate,\n        SampleType: this.props.Login.masterData.realSampleTypeList || [],\n        SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || {},\n        defaultSampleType: this.props.Login.masterData.realSampleTypeValue || {},\n        RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\n        RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\n        defaultRegistrationType: this.props.Login.masterData.realRegTypeValue || {},\n        RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\n        RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\n        FilterStatus: this.props.Login.masterData.realBCFilterStatusList || [],\n        FilterStatusValue: this.props.Login.masterData.realdefaultFilterStatus || {},\n        ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\n        ApprovalVersionValue: this.props.Login.masterData.realApproveConfigVersion || {},\n        defaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus || {},\n        defaultApprovalConfigVersion: this.props.Login.masterData.realApproveConfigVersion || {},\n        defaultRegistrationSubType: this.props.Login.masterData.realRegSubTypeValue || {},\n        ndesigntemplatemappingcode: this.props.Login.masterData.realndesigntemplatemappingcode || -1\n      };\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: false,\n          masterData: { ...this.props.Login.masterData,\n            ...inputValues\n          }\n        }\n      };\n      this.props.updateStore(updateInfo);\n    };\n\n    this.onFilterSubmit = () => {\n      if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined && this.state.ApprovalVersionValue.item != undefined) {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.fromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.toDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"realFromDate\"] = obj.fromDate;\n        inputData[\"realToDate\"] = obj.toDate;\n        inputData[\"needFilterSubmit\"] = \"true\";\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA; // inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value===0 ? this.state.BCFilterStatus.map(item1=>\"'\"+item1.item.ntransactionstatus+\"'\").join(\",\") : this.state.FilterStatusValue.value;\n        //ALPD-3399          \n\n        inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value === transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1 => item1.item.ntransactionstatus !== transactionStatus.ALL).map(item1 => item1.item.ntransactionstatus).join(\",\") : this.state.FilterStatusValue.value;\n        inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA; //  inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \n        //  this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\n\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA; // inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \n        //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \n        //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\n\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA; //inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\n        // inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\n\n        inputData[\"realRegistrationTypeList\"] = this.props.Login.masterData.RegistrationType;\n        inputData[\"realRegTypeValue\"] = this.props.Login.masterData.defaultRegistrationType;\n        inputData[\"realRegistrationSubTypeList\"] = this.props.Login.masterData.RegistrationSubType;\n        inputData[\"realRegSubTypeValue\"] = this.props.Login.masterData.defaultRegistrationSubType;\n        inputData[\"realBCFilterStatusList\"] = this.props.Login.masterData.BCFilterStatus;\n        inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue !== undefined ? this.state.FilterStatusValue && this.state.FilterStatusValue.item : this.props.Login.masterData.defaultFilterStatus;\n        inputData[\"realApprovalConfigVersionList\"] = this.props.Login.masterData.ApprovalConfigVersion; //inputData[\"realApproveConfigVersion\"] = this.props.Login.masterData.defaultApprovalConfigVersion;\n\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue !== undefined ? this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item : this.props.Login.masterData.defaultApprovalConfigVersion;\n        inputData[\"realndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\n        inputData[\"operation\"] = \"filtersubmit\";\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchmaster\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          searchRef: this.searchRef\n        };\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.reloadData = isFilterSubmit => {\n      this.searchRef.current.value = \"\"; // let obj = this.convertDatetoString((selectedRecord && selectedRecord[\"fromdate\"]) || this.props.Login.masterData.FromDate, (selectedRecord && selectedRecord[\"todate\"]) || this.props.Login.masterData.ToDate)\n\n      if (this.props.Login.masterData.realRegTypeValue !== transactionStatus.NA || this.props.Login.masterData.realRegTypeValue !== null && this.props.Login.masterData.realRegSubTypeValue !== transactionStatus.NA || this.props.Login.masterData.realRegSubTypeValue !== null && this.props.Login.masterData.realApproveConfigVersion !== transactionStatus.NA || this.props.Login.masterData.realApproveConfigVersion !== null && this.props.Login.masterData.defaultFilterStatus !== transactionStatus.NA || this.props.Login.masterData.defaultFilterStatus !== null) {\n        let inputData = {};\n        let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate, this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n        inputData[\"fromDate\"] = obj.fromDate;\n        inputData[\"toDate\"] = obj.toDate;\n        inputData[\"userInfo\"] = this.props.Login.userInfo;\n        inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\n        inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\n        inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\n        inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\n        inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\n        inputData[\"defaultRegistrationSubType\"] = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA; //inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus || transactionStatus.NA;\n\n        inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1 => item1.item.ntransactionstatus !== transactionStatus.ALL).map(item1 => item1.item.ntransactionstatus).join(\",\") : this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus;\n        inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA;\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\n        inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA; //inputData[\"defaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\n\n        inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\n        inputData[\"realdefaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\n        inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\n        inputData[\"realRegistrationTypeList\"] = this.props.Login.masterData.realRegistrationTypeList;\n        inputData[\"realRegTypeValue\"] = this.props.Login.masterData.realRegTypeValue;\n        inputData[\"realRegistrationSubTypeList\"] = this.props.Login.masterData.realRegistrationSubTypeList;\n        inputData[\"realRegSubTypeValue\"] = this.props.Login.masterData.realRegSubTypeValue;\n        inputData[\"realBCFilterStatusList\"] = this.props.Login.masterData.realBCFilterStatusList;\n        inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue !== undefined ? this.state.FilterStatusValue && this.state.FilterStatusValue.item : this.props.Login.masterData.realdefaultFilterStatus;\n        inputData[\"realApprovalConfigVersionList\"] = this.props.Login.masterData.realApprovalConfigVersionList;\n        inputData[\"realApproveConfigVersion\"] = this.props.Login.masterData.realApproveConfigVersion;\n        inputData[\"realndesigntemplatemappingcode\"] = this.props.Login.masterData.realndesigntemplatemappingcode;\n        const inputParam = {\n          classUrl: \"batchcreation\",\n          methodUrl: \"Batchmaster\",\n          displayName: \"IDS_BATCHCREATION\",\n          inputData: inputData,\n          searchRef: this.searchRef\n        };\n        this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_SELECTALLVALUESINFILTER\"\n        }));\n      }\n    };\n\n    this.onClickReport = (selectedRecord, flag, ncontrolcode) => {\n      const reportParam = {\n        classUrl: \"certificategeneration\",\n        methodUrl: \"reportGeneration\",\n        screenName: \"CertificateGeneration\",\n        operation: \"previewReport\",\n        primaryKeyField: \"nreleasebatchcode\",\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        ncontrolCode: -1,\n        inputData: {\n          sprimarykeyname: 'nreleasebatchcode',\n          nprimarykey: selectedRecord.nreleasebatchcode,\n          nreleasebatchcode: selectedRecord.nreleasebatchcode,\n          ncertificatetypecode: selectedRecord.ndecision === transactionStatus.PASS && flag === 1 ? selectedRecord.ncertificatetypecode : -1,\n          ndecisionstatus: selectedRecord.ndecision,\n          // === transactionStatus.DRAFT ? transactionStatus.PASS : selectedRecord.ndecision,\n          nreporttypecode: flag === 2 ? reportTypeEnum.SCREENWISE : reportTypeEnum.BATCH,\n          ncontrolcode,\n          ncoareporttypecode: flag === 2 ? -1 : reportCOAType.BATCHPREVIEW,\n          userinfo: this.props.Login.userInfo,\n          nflag: flag,\n          skipbatchvalidation: true\n        }\n      };\n      this.props.onClickReport(reportParam);\n    };\n\n    this.reportMethod = value => {\n      if (value.method === 1) {\n        this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 2, value.controlId);\n      } else {\n        this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 1, value.controlId);\n      }\n    };\n\n    const sampleState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const histortState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const iqcsampleState = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    const viewstate = {\n      skip: 0,\n      take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n    };\n    this.state = {\n      skip: 0,\n      take: this.props.Login.settings && this.props.Login.settings[3],\n      userRoleControlRights: [],\n      controlMap: new Map(),\n      selectedFilter: {},\n      sampleState,\n      histortState,\n      iqcsampleState,\n      viewstate,\n      selectedRecord: {},\n      //confirmmsg:this.ConfirmMessage.bind(this),\n      dataState: {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\n      },\n      sidebarview: false\n    };\n    this.searchRef = React.createRef();\n    this.confirmMessage = new ConfirmMessage();\n    this.searchFieldList = [\"stestname\", \"sinstrumentcatname\", \"sinstrumentname\", \"sproductname\", \"smanufname\", \"stransactiondate\", \"username\", \"stransactionstatus\", \"sdecision\", \"sbatcharno\", \"stransdisplaystatus\"];\n    this.sampleMandatoryFields = [];\n    this.copyMandatoryFields = [];\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    // if (props.Login.masterStatus !== \"\") {\n    //     if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\n    //        if(props.Login.operation == \"initiate\"){\n    //         toast.warn(props.Login.masterStatus);\n    //         //this.state.confirmmsg.confirm(\"warning\", \"Warning!\",  props.Login.masterStatus, undefined, \"ok\", undefined, true, undefined);\n    //        }\n    //     }\n    // }\n    if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\n      toast.warn(props.Login.masterStatus);\n      props.Login.masterStatus = \"\";\n    }\n\n    if (props.Login.error !== \"\" && props.Login.error !== state.error) {\n      toast.error(props.Login.error);\n      props.Login.error = \"\";\n    }\n\n    if (props.Login.selectedRecord === undefined) {\n      return {\n        selectedRecord: {}\n      };\n    }\n\n    return null; // if (props.Login.selectedRecord !== state.selectedRecord) {\n    //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\n    // }\n  } // const sampleColumnList = [];\n  // if (props.nneedsubsample){\n  //     sampleColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\n  // }\n  // else{\n  //     sampleColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\n  // }\n\n\n  gridfillingColumn(data) {\n    const temparray = data && data.map(option => {\n      return {\n        \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\n        \"dataField\": option[designProperties.VALUE] == \"null\" ? '-' : option[designProperties.VALUE],\n        \"width\": \"150px\",\n        \"columnSize\": \"4\"\n      };\n    });\n    return temparray;\n  }\n\n  // headerSelectionChange = (event) => {\n  //     const checked = event.syntheticEvent.target.checked;\n  //     let addedComponentList = this.state.addedComponentList || [];\n  //     if (checked) {\n  //         const data = this.state.addComponentDataList.map(item => {\n  //             if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\n  //                 addedComponentList.push({ ...item, selected: false });\n  //                 item.selected = checked;\n  //                 return item;\n  //             } else {\n  //                 let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\n  //                 olditem.selected = checked;\n  //                 return olditem;\n  //             }\n  //         });\n  //         this.setState({\n  //             addComponentDataList: data, addedComponentList,\n  //             addSelectAll: checked, deleteSelectAll: false\n  //         });\n  //     }\n  //     else {\n  //         let addedComponentData = this.state.addedComponentList || [];\n  //         let deletedListdData = this.state.deletedList || [];\n  //         const data = this.state.addComponentDataList.map(item => {\n  //             addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\n  //             deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\n  //             item.selected = checked;\n  //             return item;\n  //         });\n  //         // console.log(\"data:\",data1, data2);\n  //         this.setState({\n  //             addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\n  //             addSelectAll: checked, deleteSelectAll: false\n  //         });\n  //     }\n  // }\n  valiateCheckAll(data) {\n    let selectAll = true; // let checkRepeatComponent;\n    //  let addedComponentList = this.state.addedComponentList || [];\n\n    if (data && data.length > 0) {\n      data.forEach(dataItem => {\n        if (dataItem.selected) {\n          if (dataItem.selected === false) {\n            selectAll = false;\n          }\n        } else {\n          selectAll = false; // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\n          // if(checkRepeatComponent.length>0){\n          //     selectAll = true;\n          // }else{\n          //     selectAll = false;\n          // }\n        }\n      });\n    } else {\n      //if (gridType === \"originalgrid\"){\n      selectAll = false; // }\n    }\n\n    return selectAll;\n  }\n\n  render() {\n    let reportActionList = [];\n    let batchMandatoryFields = []; //commenting as its done in below code by rukshana\n    // if (this.props.Login.operation === \"update\") {\n    //     batchMandatoryFields.push(\n    //         { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\n    //     );\n    // }\n    // else {\n    //     batchMandatoryFields.push(\n    //         { idsName: \"IDS_SECTION\", dataField: \"ssectionname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_TEST\", dataField: \"stestname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\n    //         { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\n    //     );\n    // }\n    //let mandatoryFields =[];\n\n    if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\n      let {\n        selectedRecord\n      } = this.state;\n      batchMandatoryFields.push({\n        \"idsName\": \"IDS_SECTION\",\n        \"dataField\": \"ssectionname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, {\n        \"idsName\": \"IDS_TEST\",\n        \"dataField\": \"stestname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      }, //{ \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      // { \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"sinstrumentname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      // { \"idsName\": \"IDS_INSTRUMENTID\", \"dataField\": \"sinstrumentid\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n      {\n        \"idsName\": \"IDS_PRODUCT\",\n        \"dataField\": \"sproductname\",\n        \"mandatoryLabel\": \"IDS_SELECT\",\n        \"controlType\": \"selectbox\"\n      });\n\n      if (selectedRecord && selectedRecord.sinstrumentcatname !== undefined && selectedRecord.ninstrumentcatcode > 0) {\n        batchMandatoryFields.push( // { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\n        {\n          \"idsName\": \"IDS_INSTRUMENT\",\n          \"dataField\": \"sinstrumentname\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        }, {\n          \"idsName\": \"IDS_INSTRUMENTID\",\n          \"dataField\": \"sinstrumentid\",\n          \"mandatoryLabel\": \"IDS_SELECT\",\n          \"controlType\": \"selectbox\"\n        });\n      }\n    }\n\n    const getBatch = {\n      screenName: \"IDS_BATCHCREATION\",\n      operation: \"get\",\n      masterData: this.props.Login.masterData,\n      userInfo: this.props.Login.userInfo,\n      methodUrl: \"Batchcreation\",\n      keyName: \"batchcreation\"\n    };\n    this.fromDate = this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"] || this.props.Login.masterData && this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : undefined;\n    this.toDate = this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"] || this.props.Login.masterData && this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : undefined;\n    const addId = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\n    const editId = this.state.controlMap.has(\"EditBatchcreation\") && this.state.controlMap.get(\"EditBatchcreation\").ncontrolcode;\n    const deleteId = this.state.controlMap.has(\"DeleteBatchcreation\") && this.state.controlMap.get(\"DeleteBatchcreation\").ncontrolcode;\n    const testStartId = this.state.controlMap.has(\"BatchInitiate\") && this.state.controlMap.get(\"BatchInitiate\").ncontrolcode;\n    const completeId = this.state.controlMap.has(\"BatchComplete\") && this.state.controlMap.get(\"BatchComplete\").ncontrolcode;\n    const cancelId = this.state.controlMap.has(\"CancelBatch\") && this.state.controlMap.get(\"CancelBatch\").ncontrolcode;\n    const elnSheetId = this.state.controlMap.has(\"ELNSheet\") && this.state.controlMap.get(\"ELNSheet\").ncontrolcode;\n    const addParam = {\n      screenName: \"IDS_BATCHCREATION\",\n      primaryeyField: \"nreleasebatchcode\",\n      primaryKeyValue: undefined,\n      operation: \"create\",\n      //inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: addId,\n      nneedtestinitiate: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate,\n      masterData: this.props.Login.masterData,\n      fromdate: this.props.Login.masterData.fromDate,\n      todate: this.props.Login.masterData.toDate,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\n      napprovalconfigcode: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\n      ntranscode: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus : transactionStatus.NA,\n      ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode\n    };\n    const viewInfoFields = [];\n    viewInfoFields.push({\n      \"fieldName\": \"sbatcharno\",\n      \"label\": \"IDS_BATCHARNO\"\n    }, {\n      \"fieldName\": \"ssectionname\",\n      \"label\": \"IDS_SECTION\"\n    }, {\n      \"fieldName\": \"stestname\",\n      \"label\": \"IDS_TESTNAME\"\n    }, {\n      \"fieldName\": \"sinstrumentcatname\",\n      \"label\": \"IDS_INSTRUMENTCATEGORY\"\n    }, {\n      \"fieldName\": \"sinstrumentid\",\n      \"label\": \"IDS_INSTRUMENTID\"\n    }, {\n      \"fieldName\": \"sinstrumentname\",\n      \"label\": \"IDS_INSTRUMENTNAME\"\n    }, {\n      \"fieldName\": \"sproductname\",\n      \"label\": \"IDS_SAMPLETYPE\"\n    }, {\n      \"fieldName\": \"stransdisplaystatus\",\n      \"label\": \"IDS_STATUS\"\n    }, {\n      \"fieldName\": \"username\",\n      \"label\": this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED ? \"IDS_BATCHINITIATEDBY\" : this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ? \"IDS_BATCHCOMPLETEDBY\" : \"IDS_BATCHCREATEDBY\"\n    });\n\n    if (this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\n      viewInfoFields.push({\n        \"fieldName\": \"sprojectcode\",\n        \"label\": \"IDS_PROJECTCODE\"\n      });\n    }\n\n    let stransactionstatuscode = this.props.Login.masterData.SelectedFilterStatus ? String(this.props.Login.masterData.SelectedFilterStatus.ntransactionstatus) : null;\n\n    if (this.state.selectedRecord && this.state.selectedRecord[\"nfiltertransstatus\"] !== undefined) {\n      stransactionstatuscode = this.state.selectedRecord[\"nfiltertransstatus\"].value === String(0) ? null : String(this.state.selectedRecord[\"nfiltertransstatus\"].value);\n    }\n\n    let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate, this.props.Login.userInfo);\n    const editParam = {\n      screenName: \"IDS_BATCHCREATION\",\n      operation: \"update\",\n      primaryKeyField: \"nbatchmastercode\",\n      inputParam: this.props.Login.inputParam,\n      userInfo: this.props.Login.userInfo,\n      ncontrolCode: editId,\n      masterData: this.props.Login.masterData,\n      naddcontrolCode: addId,\n      nprojectmastercode: this.props.Login.masterData.selectedTestSynonym && this.props.Login.masterData.selectedTestSynonym.nprojectmastercode,\n      nsampletypecode: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\n      nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\n      nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\n    };\n    const filterParam = {\n      inputListName: \"Batchmaster\",\n      selectedObject: \"SelectedBatchmaster\",\n      primaryKeyField: \"nbatchmastercode\",\n      fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\n      fecthInputObject: {\n        fromDate: obj.fromDate,\n        toDate: obj.toDate,\n        userInfo: this.props.Login.userInfo,\n        ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\n        napprovalconfigcode: this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA,\n        ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT,\n        nsampletypecode: this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA //fromDate, toDate, \n        //stransactionstatuscode,\n        //activeBCTab: this.props.Login.activeBCTab || \"IDS_COMPONENT\"\n\n      },\n      masterData: this.props.Login.masterData,\n      //unchangeList: [\"FromDate\", \"ToDate\", \"SelectedFilterStatus\"],\n      searchFieldList: this.searchFieldList\n    };\n    this.breadCrumbData = [{\n      \"label\": \"IDS_FROM\",\n      \"value\": obj.breadCrumbFrom\n    }, {\n      \"label\": \"IDS_TO\",\n      \"value\": obj.breadCrumbto\n    }, // {\n    //     \"label\": \"IDS_SAMPLETYPE\",\n    //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\n    // }, \n    {\n      \"label\": \"IDS_REGISTRATIONTYPE\",\n      \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\" // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\n      // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\n\n    }, {\n      \"label\": \"IDS_REGISTRATIONSUBTYPE\",\n      \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\n    }, {\n      \"label\": \"IDS_BATCHSTATUS\",\n      \"value\": this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus ? this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus : \"NA\"\n    } // {\n    //     \"label\": \"IDS_CONFIGVERSION\",\n    //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\n    // }\n    ];\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Affix, {\n      top: 53,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(BreadcrumbComponent, {\n      breadCrumbItem: this.breadCrumbData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1291,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Row, {\n      noGutters: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '4' : \"2\"}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(ListMaster, {\n      masterList: this.props.Login.masterData.searchedData || this.props.Login.masterData.Batchmaster || [],\n      selectedMaster: this.props.Login.masterData.SelectedBatchmaster,\n      primaryKeyField: \"nbatchmastercode\",\n      userInfo: this.props.Login.userInfo,\n      masterData: this.props.Login.masterData //getMasterDetail={this.props.getSelectedBatchCreationDetail}\n      ,\n      getMasterDetail: batch => this.props.getSelectedBatchCreationDetail(batch, this.props.Login.userInfo, this.props.Login.masterData),\n      inputParam: getBatch,\n      screenName: this.props.intl.formatMessage({\n        id: \"IDS_BATCHCREATION\"\n      }) //mainField=\"stestname\"\n      ,\n      mainField: \"sbatcharno\",\n      firstField: \"stestname\",\n      secondField: \"sinstrumentname\",\n      selectedListName: \"SelectedBatchmaster\",\n      objectName: \"BatchCreation\",\n      listName: \"IDS_BATCHCREATION\",\n      needValidation: false,\n      hidePaging: false // subFields={\n      //     [\n      //         { [designProperties.VALUE]: \"sinstrumentcatname\" },\n      //         { [designProperties.VALUE]: \"sinstrumentname\" },\n      //         // { [designProperties.VALUE]: \"smahname\" },\n      //         // { [designProperties.VALUE]: \"stransactionstatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\n      //     ]\n      // }\n      ,\n      needFilter: true,\n      needMultiSelect: false,\n      subFieldsLabel: true,\n      openFilter: this.openFilter,\n      closeFilter: this.closeFilter,\n      onFilterSubmit: this.onFilterSubmit,\n      filterColumnData: this.props.filterColumnData,\n      searchListName: \"searchedData\",\n      searchRef: this.searchRef,\n      filterParam: filterParam,\n      isClearSearch: this.props.Login.isClearSearch // skip={this.state.skip}\n      // take={this.state.take}\n      // handlePageChange={this.handlePageChange}\n      ,\n      addId: addId,\n      showFilterIcon: true,\n      userRoleControlRights: this.state.userRoleControlRights,\n      reloadData: this.reloadData,\n      openModal: () => this.createBatchValidation(addParam),\n      callCloseFunction: true // openModal={() => this.props.getTestInstrumentComboService(addParam)}\n      ,\n      commonActions:\n      /*#__PURE__*/\n      // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\n      React.createElement(ProductList, {\n        className: \"d-flex product-category float-right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1346,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-icon-rounded btn-circle solid-blue\",\n        role: \"button\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_ADD\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\",\n        hidden: this.state.userRoleControlRights.indexOf(addId) === -1,\n        onClick: () => this.props.getTestInstrumentComboService(addParam) // onClick={() => this.createBatchValidation(addParam)}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1348,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n        icon: faPlus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1355,\n          columnNumber: 45\n        }\n      })), /*#__PURE__*/React.createElement(Button, {\n        className: \"btn btn-circle outline-grey ml-2 p-0\",\n        variant: \"link\",\n        \"data-tip\": this.props.intl.formatMessage({\n          id: \"IDS_REFRESH\"\n        }),\n        \"data-for\": \"tooltip-common-wrap\" //onClick={() => this.reloadData(false)} \n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1357,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(RefreshIcon, {\n        className: \"custom_icons\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1362,\n          columnNumber: 45\n        }\n      }))) // </Tooltip>\n      ,\n      filterComponent: [{\n        \"IDS_FILTER\": /*#__PURE__*/React.createElement(BatchCreationFilter, {\n          fromDate: this.state.selectedFilter[\"fromDate\"] != undefined ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate,\n          toDate: this.state.selectedFilter[\"toDate\"] != undefined ? rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate,\n          SampleType: this.state.SampleType || [],\n          SampleTypeValue: this.props.Login.masterData.defaultSampleType || [],\n          RegType: this.state.RegistrationType || [],\n          RegTypeValue: this.props.Login.masterData.defaultRegistrationType || [],\n          RegSubType: this.state.RegistrationSubType || [],\n          RegSubTypeValue: this.state.nregsubtypecode || [],\n          DesignTemplateMappingValue: this.props.Login.masterData.DesignTemplateMappingValue || [],\n          FilterStatus: this.state.BCFilterStatus || [],\n          FilterStatusValue: this.state.FilterStatusValue || [],\n          ApprovalVersion: this.state.ApprovalConfigVersion || [],\n          ApprovalVersionValue: this.state.ApprovalVersionValue || [],\n          REJobStatus: this.state.REJobStatus || [],\n          JobStatusValue: this.props.Login.masterData.defaultjobstatus || [],\n          Test: this.state.Testvalues || [],\n          TestValue: this.props.Login.masterData.selectedTestSynonym || [],\n          onFilterComboChange: this.onFilterComboChange,\n          handleDateChange: this.handleDateChange,\n          handleFilterDateChange: this.handleFilterDateChange,\n          userInfo: this.props.Login.userInfo,\n          onDesignTemplateChange: this.onDesignTemplateChange,\n          DynamicDesignMapping: this.state.stateDynamicDesign || [],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1370,\n            columnNumber: 55\n          }\n        })\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1296,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: `${!this.props.sidebarview ? '8' : \"10\"}`,\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1401,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1402,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sidebar-view-btn \",\n      onClick: this.props.parentFunction,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1403,\n        columnNumber: 33\n      }\n    }, !this.props.sidebarview ? /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-less-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1405,\n        columnNumber: 41\n      }\n    }) : /*#__PURE__*/React.createElement(\"i\", {\n      class: \"fa fa-greater-than\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1406,\n        columnNumber: 41\n      }\n    }))), /*#__PURE__*/React.createElement(ContentPanel, {\n      className: \"panel-main-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1412,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"border-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1413,\n        columnNumber: 33\n      }\n    }, this.props.Login.masterData.Batchmaster && this.props.Login.masterData.Batchmaster.length > 0 && this.props.Login.masterData.SelectedBatchmaster ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1417,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      className: \"product-title-main\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1418,\n        columnNumber: 49\n      }\n    }, this.props.Login.masterData.SelectedBatchmaster.sbatcharno), /*#__PURE__*/React.createElement(Card.Subtitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1421,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex product-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1422,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      className: \"product-title-sub flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1423,\n        columnNumber: 57\n      }\n    }, this.props.Login.masterData.SelectedBatchTestTAT && this.props.Login.masterData.SelectedBatchTestTAT.Deviation && this.props.intl.formatMessage({\n      id: \"IDS_DEVIATION\"\n    }) + \" : \" + this.props.Login.masterData.SelectedBatchTestTAT.Deviation, /*#__PURE__*/React.createElement(MediaLabel, {\n      className: `btn btn-outlined ${this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ? \"outline-initiate\" : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ? \"outline-success\" : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED ? \"outline-danger\" : \"outline-secondary\"} btn-sm ml-3`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1428,\n        columnNumber: 61\n      }\n    }, this.props.Login.masterData.SelectedBatchmaster.stransdisplaystatus)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-inline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"openelnsheet\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(elnSheetId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_OPENELNSHEET\"\n      }) //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1446,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: elnimage,\n      alt: \"filer-icon action-icons-wrap\",\n      width: \"20\",\n      height: \"20\",\n      className: \"ActionIconColor img-normalize\",\n      onClick: () => this.openClosePortal(this.props.Login.masterData.SelectedBatchmaster, cancelId),\n      \"data-place\": \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1451,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"view\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_VIEWINFO\"\n      }) // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\n      ,\n      onClick: () => this.props.viewInfo(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1458,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faEye,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1463,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"editBatchCreation\",\n      hidden: this.state.userRoleControlRights.indexOf(editId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_EDIT\"\n      }),\n      onClick: () => this.fetchEditData(editParam) // onClick={() => this.props.getActiveBatchCreationService(editParam,\n      //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.masterData.SelectedBatchmaster.ntestcode)}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPencilAlt //  title={this.props.intl.formatMessage({ id: \"IDS_EDITBATCH\" })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1474,\n        columnNumber: 65\n      }\n    })),\n    /*#__PURE__*/\n    // this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate == true ?\n    React.createElement(Nav.Link, {\n      name: \"initiateBatchCreation\" //  data-for=\"tooltip-common-wrap\" \n      ,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_BATCHINITIATE\"\n      }),\n      hidden: this.state.userRoleControlRights.indexOf(testStartId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\" //role=\"button\"\n      ,\n      onClick: () => this.testPopUpStartActions(testStartId),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480,\n        columnNumber: 65\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faPlay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1487,\n        columnNumber: 69\n      }\n    })) // :\"\"\n    , /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"completeBatchCreation\",\n      hidden: this.state.userRoleControlRights.indexOf(completeId) === -1,\n      className: \"btn btn-circle outline-grey mr-2\",\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_COMPLETE\"\n      }),\n      onClick: () => this.completePopUpStartActions(completeId) //onClick={() => this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,completeId)}\n      // onClick={() => this.props.validateBatchComplete({\n      //     masterData: this.props.Login.masterData,\n      //     userInfo: this.props.Login.userInfo,\n      //     userRoleControlRights: this.props.Login.userRoleControlRights,\n      //     ncontrolCode: completeId,\n      //     nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\n      // })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faCheckCircle // title={this.props.intl.formatMessage({ id: \"IDS_COMPLETEBATCH\" })}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1508,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteBatchCreation\",\n      className: \"btn btn-circle outline-grey mr-2\",\n      hidden: this.state.userRoleControlRights.indexOf(deleteId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_DELETE\"\n      }),\n      onClick: () => this.ConfirmDelete(this.props.Login.masterData.SelectedBatchmaster, deleteId, \"delete\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1513,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faTrashAlt,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1519,\n        columnNumber: 65\n      }\n    })), /*#__PURE__*/React.createElement(Nav.Link, {\n      name: \"deleteBatchCreation\",\n      className: \"btn btn-circle outline-grey mr-2 action-icons-wrap\",\n      hidden: this.state.userRoleControlRights.indexOf(cancelId) === -1,\n      \"data-tip\": this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }) //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1523,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Image, {\n      src: reject,\n      alt: \"filer-icon action-icons-wrap\",\n      width: \"20\",\n      height: \"20\",\n      className: \"ActionIconColor img-normalize\",\n      onClick: () => this.cancelBatch(this.props.Login.masterData.SelectedBatchmaster, cancelId),\n      \"data-place\": \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1528,\n        columnNumber: 65\n      }\n    })), reportActionList.length > 0 ? /*#__PURE__*/React.createElement(CustomPopover, {\n      nav: true,\n      data: reportActionList,\n      Button: true,\n      hideIcon: true,\n      btnClasses: \"btn-circle btn_grey ml-2\",\n      textKey: \"value\",\n      dynamicButton: value => this.reportMethod(value),\n      userRoleControlRights: this.state.userRoleControlRights,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1536,\n        columnNumber: 65\n      }\n    }) : \"\")))), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1555,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"no-gutters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1556,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1557,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: \"at-tabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1558,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(CustomTab, {\n      activeKey: this.props.Login.batchactiveKey ? this.props.Login.batchactiveKey : \"IDS_SAMPLE\",\n      tabDetail: this.tabDetail(),\n      onTabChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1559,\n        columnNumber: 61\n      }\n    })))))) : \"\"))))), /*#__PURE__*/React.createElement(PortalModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1581,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1582,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openELNSheet // show={this.state.openELNSheet}\n      ,\n      onHide: this.openClosePortal,\n      dialogClassName: `${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1583,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1596,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      style: {\n        \"line-height\": \"1.0\"\n      },\n      id: \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1597,\n        columnNumber: 33\n      }\n    }, this.props.intl.formatMessage({\n      id: \"IDS_ELNSHEET\"\n    })), /*#__PURE__*/React.createElement(ReactTooltip, {\n      globalEventOff: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1600,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1603,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1604,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Iframe // url={\"http://agl69:8080/QuaLISWeb/#/login\"}\n    , {\n      url: this.props.Login.masterData.enlLink,\n      width: \"98%\",\n      height: \"1000px\",\n      id: \"reportviewID\",\n      className: \"reportview\" //display=\"initial\"\n      /// position=\"relative\" \n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1606,\n        columnNumber: 37\n      }\n    })))))), this.props.Login.openModal ? /*#__PURE__*/React.createElement(SlideOutModal, {\n      show: this.props.Login.openModal,\n      size: \"lg\",\n      closeModal: this.closeModal,\n      operation: this.props.Login.operation,\n      inputParam: this.props.Login.inputParam,\n      screenName: this.props.Login.operation === \"createSample\" ? this.props.intl.formatMessage({\n        id: \"IDS_SAMPLE\"\n      }) : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"view\" || this.props.Login.operation === \"complete\" ? this.props.intl.formatMessage({\n        id: \"IDS_BATCH\"\n      }) : this.props.Login.operation === \"createiqcsample\" ? this.props.intl.formatMessage({\n        id: \"IDS_BATCHIQCSAMPLE\"\n      }) : this.props.Login.screenName,\n      onSaveClick: this.onSaveClick,\n      esign: this.props.Login.loadEsign,\n      validateEsign: this.validateEsign,\n      masterStatus: this.props.Login.masterStatus,\n      updateStore: this.props.updateStore,\n      selectedRecord: this.state.selectedRecord || {},\n      mandatoryFields: this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ? batchMandatoryFields //  : this.props.Login.operation === \"initiate\"  ?\n      //    this.initiateMandatoryFields \n      //  : this.props.Login.operation === \"complete\" ?\n      //    this.completeMandatoryFields\n      : this.props.Login.operation === \"createiqcsample\" ? this.materialIqcMandatory : [],\n      showSaveContinue: this.state.showSaveContinue,\n      noSave: this.props.Login.operation === \"view\" ? true : false,\n      addComponent: this.props.Login.loadEsign ? /*#__PURE__*/React.createElement(Esign, {\n        operation: this.props.Login.operation,\n        onInputOnChange: this.onInputOnChange,\n        inputParam: this.props.Login.inputParam,\n        selectedRecord: this.state.selectedRecord || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1658,\n          columnNumber: 33\n        }\n      }) : this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ? /*#__PURE__*/React.createElement(AddBatchCreation, {\n        selectedRecord: this.state.selectedRecord || {},\n        onInputOnChange: this.onInputOnChange,\n        onComboChange: this.onComboChange,\n        onNumericInputOnChange: this.onNumericInputOnChange,\n        handleDateChange: this.handleDateChange,\n        sampleType: this.props.Login.masterData.realSampleTypeValue ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\n        Test: this.state.Testvalues || [],\n        selectedInstrumentCategory: this.state.selectedInstCategory,\n        InstrumentCategory: this.state.InstrumentCategory,\n        Instrument: this.state.Instrument,\n        selectedInstrument: this.state.selectedInstrument,\n        productCategory: this.state.ProductCategory,\n        selectedProductCategory: this.state.selectedProductCategory,\n        TestValue: this.state.selectedTestSynonym || [],\n        product: this.state.Product || [],\n        instrumentID: this.state.InstrumentID || [],\n        selectedProduct: this.state.selectedProduct || [],\n        studyPlanList: this.props.Login.studyPlanList || [],\n        manufacturerList: this.props.Login.productManufacturerList || [],\n        maHolderList: this.props.Login.maHolderList || [],\n        timeZoneList: this.props.Login.timeZoneList || [],\n        selectedBacthCreation: this.props.Login.masterData.SelectedBatchmaster || {},\n        operation: this.props.Login.operation,\n        inputParam: this.props.Login.inputParam,\n        userInfo: this.props.Login.userInfo,\n        selectedInstrumentId: this.state.selectedInstrumentId,\n        onMultiColumnValue: this.onMultiColumnValue,\n        onMultiColumnMAHChange: this.onMultiColumnMAHChange,\n        batchCreationEditStatusList: this.props.Login.batchCreationEditStatusList,\n        Section: this.state.Section,\n        selectedSection: this.state.selectedSection,\n        ProjectCode: this.state.ProjectCode,\n        selectedProjectcode: this.state.selectedProjectcode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1664,\n          columnNumber: 37\n        }\n      }) : this.props.Login.operation === \"createSample\" ? /*#__PURE__*/React.createElement(AddSample, {\n        onInputOnChange: this.onInputOnChange,\n        getProductByCategory: this.getProductByCategory,\n        onComboChange: this.onComboChange,\n        handleDateChange: this.handleDateChange,\n        userInfo: this.props.Login.userInfo,\n        productCategoryList: this.props.productCategoryList,\n        productList: this.props.productList,\n        componentList: this.props.componentList,\n        getDataForAddComponent: this.getDataForAddComponent,\n        clearComponentInput: this.props.clearComponentInput,\n        samples: this.state.samples || [],\n        headerSelectionChange: this.headerSelectionChange,\n        selectionChange: this.selectionChange,\n        addedComponentList: this.state.addedComponentList || [],\n        addedHeaderSelectionChange: this.addedHeaderSelectionChange,\n        addedSelectionChange: this.addedSelectionChange //dataStateChange={this.dataStateChange} \n        ,\n        userRoleControlRights: this.props.userRoleControlRights,\n        controlMap: this.props.controlMap,\n        inputParam: this.props.inputParam,\n        screenName: this.props.screenName,\n        addSelectAll: this.state.addSelectAll,\n        deleteSelectAll: this.state.deleteSelectAll,\n        onDeleteSelectedComponent: this.onDeleteSelectedComponent,\n        componentPopupSkip: this.props.componentPopupSkip,\n        componentPopupTake: this.props.componentPopupTake,\n        componentPageSizes: this.props.componentPageSizes,\n        nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1701,\n          columnNumber: 41\n        }\n      }) : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"complete\" ? /*#__PURE__*/React.createElement(AddBatchinitiate, {\n        userInfo: this.props.Login.userInfo,\n        operation: this.props.Login.operation,\n        handleDateChange: this.handleDateChange,\n        selectedRecord: this.state.selectedRecord,\n        onInputOnChange: this.onInputOnChange,\n        currentTime: this.props.Login.currentTime || [],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1732,\n          columnNumber: 45\n        }\n      }) : this.props.Login.operation === \"view\" ? /*#__PURE__*/React.createElement(Card, {\n        className: \"one\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1741,\n          columnNumber: 49\n        }\n      }, /*#__PURE__*/React.createElement(Card.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1742,\n          columnNumber: 53\n        }\n      }, /*#__PURE__*/React.createElement(ViewInfo, {\n        userInfo: this.props.Login.userInfo,\n        selectedRecordView: this.props.Login.masterData.selectedRecordView,\n        viewInfoFields: viewInfoFields,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1743,\n          columnNumber: 57\n        }\n      }))) : this.props.Login.operation === \"createiqcsample\" ? /*#__PURE__*/React.createElement(AddMaterialIqc, {\n        userInfo: this.props.Login.userInfo,\n        operation: this.props.Login.operation,\n        materialCategory: this.state.MaterialCategory,\n        selectedMaterialType: this.state.selectedMaterialType,\n        selectedMaterialCategory: this.state.selectedMaterialCategory,\n        onComboChange: this.onComboChange,\n        selectedMaterial: this.state.selectedMaterial,\n        screenName: this.props.intl.formatMessage({\n          id: \"IDS_SPECIFICATION\"\n        }),\n        handleSaveClick: this.handleSaveClick,\n        material: this.state.Material,\n        materialInventory: this.state.MaterialInventory,\n        AddSpec: this.AddSpec,\n        onInputOnChange: this.onInputOnChange,\n        currentTime: this.props.Login.currentTime || [],\n        loadSpec: this.props.Login.loadSpec,\n        selectedMaterialInventory: this.state.selectedMaterialInventory,\n        selectedInventoryUnit: this.props.Login.masterData.selectedInventoryUnit,\n        AgaramTree: this.props.Login.AgaramTree,\n        openNodes: this.props.Login.OpenNodes,\n        onTreeClick: this.onTreeClick,\n        focusKey: this.props.Login.FocusKey,\n        activeKey: this.props.Login.batchactiveKey,\n        Specification: this.props.Login.Specification,\n        selectedSpec: this.props.Login.selectedSpec,\n        selectedRecord: this.state.selectedRecord,\n        onSpecChange: this.onspecChange,\n        openSpecModal: this.props.Login.openSpecModal,\n        closeModal: this.closeModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1751,\n          columnNumber: 53\n        }\n      }) : \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1629,\n        columnNumber: 25\n      }\n    }) : \"\", this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let {\n      userRoleControlRights,\n      controlMap,\n      selectedRecord,\n      filterData,\n      addedComponentList,\n      filterStatusList,\n      dataState,\n      sahDataState,\n      bahDataState,\n      chDataState,\n      testCommentDataState,\n      SampleType,\n      RegistrationType,\n      RegistrationSubType,\n      BCFilterStatus,\n      REJobStatus,\n      Testvalues,\n      ApprovalConfigVersion,\n      skip,\n      take,\n      testskip,\n      testtake,\n      selectedFilter,\n      InstrumentCategory,\n      selectedInstCategory,\n      ProductCategory,\n      Instrument,\n      selectedInstrument,\n      selectedTestSynonym,\n      nregsubtypecode,\n      selectedProductCategory,\n      Product,\n      selectedProduct,\n      samples,\n      addSelectAll,\n      deleteSelectAll,\n      ApprovalVersionValue,\n      FilterStatusValue,\n      Section,\n      selectedSection,\n      sampleGridItem,\n      subsampleGridItem,\n      testGridItem = [],\n      DynamicGridItem,\n      samplegridmoreitem,\n      DynamicGridMoreItem,\n      MaterialCategory,\n      selectedMaterialType,\n      Material,\n      selectedMaterial,\n      selectedMaterialCategory,\n      MaterialInventory,\n      selectedMaterialInventory,\n      Specification,\n      selectedSpec,\n      addedSamplesList,\n      testGridArnoItems,\n      InstrumentID,\n      selectedInstrumentId,\n      sinstrumentid,\n      selectedProjectcode,\n      ProjectCode\n    } = this.state;\n    let isStateChanged = false;\n    let bool = false;\n    addedSamplesList = []; // samples = [];\n\n    if (this.props.Login.masterData.RegistrationSubType && this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\n      let dataState = {\n        skip: 0,\n        take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \n\n      };\n      bool = true;\n    }\n\n    if (this.props.Login.masterData !== previousProps.Login.masterData) {\n      bool = true;\n      isStateChanged = true;\n      SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\n      RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\n      RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\n      BCFilterStatus = constructOptionList(this.props.Login.masterData.BCFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\n      REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\n      Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestname', 'ascending', 'ntestcode', false);\n      ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname', 'ascending', 'napprovalconfigversioncode', false);\n      InstrumentCategory = constructOptionList(this.props.Login.masterData.instrumentCategory || [], 'ninstrumentcatcode', 'sinstrumentcatname', 'ascending', 'ninstrumentcatcode', false);\n      Instrument = constructOptionList(this.props.Login.masterData.instrument || [], 'ninstrumentnamecode', 'sinstrumentname', 'ascending', 'ninstrumentcode', false);\n      ProductCategory = constructOptionList(this.props.Login.masterData.productcategory || [], 'nproductcatcode', 'sproductcatname', 'ascending', 'nproductcatcode', false);\n      Product = constructOptionList(this.props.Login.masterData.product || [], 'nproductcode', 'sproductname', 'ascending', 'nproductcode', false);\n      Section = constructOptionList(this.props.Login.masterData.Section || [], 'nsectioncode', 'ssectionname', 'ascending', 'nsectioncode', false);\n      MaterialCategory = constructOptionList(this.props.Login.masterData.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname', 'ascending', 'nmaterialcatcode', false);\n      Material = constructOptionList(this.props.Login.masterData.Material || [], 'nmaterialcode', 'smaterialname', 'ascending', 'nmaterialcode', false);\n      MaterialInventory = constructOptionList(this.props.Login.masterData.MaterialInventory || [], 'nmaterialinventtranscode', 'sinventoryid', 'ascending', 'nmaterialinventtranscode', false);\n      InstrumentID = constructOptionList(this.props.Login.masterData.instrumentID || [], 'ninstrumentcode', 'sinstrumentid', 'ascending', 'ninstrumentcode', false);\n      ProjectCode = constructOptionList(this.props.Login.masterData.ProjectCode || [], 'nprojectmastercode', 'sprojectcode', 'ascending', 'nprojectmastercode', false);\n      skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip;\n      take = this.props.Login.take || take;\n      testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip;\n      testtake = this.props.Login.testtake || testtake;\n      let selectFilterStatus = {\n        ntransactionstatus: transactionStatus.PARTIAL,\n        sfilterstatus: this.props.intl.formatMessage({\n          id: \"IDS_PARTIAL\"\n        }),\n        scolorhexcode: \"#800000\"\n      };\n      const selectedFilters = this.props.Login.masterData.BCFilterStatus || [];\n      const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\n      const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL);\n\n      if (selectedFiltersNew.length > 0 && index === -1) {\n        selectedFiltersNew.push(selectFilterStatus);\n      }\n\n      selectedFilter = selectedFiltersNew;\n      SampleType = SampleType.get(\"OptionList\");\n      RegistrationType = RegistrationType.get(\"OptionList\");\n      RegistrationSubType = RegistrationSubType.get(\"OptionList\");\n      BCFilterStatus = BCFilterStatus.get(\"OptionList\");\n      REJobStatus = REJobStatus.get(\"OptionList\");\n      Testvalues = Testvalues.get(\"OptionList\");\n      ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\");\n      InstrumentCategory = InstrumentCategory.get(\"OptionList\");\n      Instrument = Instrument.get(\"OptionList\");\n      ProductCategory = ProductCategory.get(\"OptionList\");\n      Product = Product.get(\"OptionList\");\n      Section = Section.get(\"OptionList\");\n      MaterialCategory = MaterialCategory.get(\"OptionList\");\n      Material = Material.get(\"OptionList\");\n      MaterialInventory = MaterialInventory.get(\"OptionList\");\n      InstrumentID = InstrumentID.get(\"OptionList\");\n      ProjectCode = ProjectCode.get(\"OptionList\"); //selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory || [];\n\n      samples = this.props.Login.masterData.samples;\n      addSelectAll = false;\n      deleteSelectAll = true;\n      nregsubtypecode = this.props.Login.masterData.defaultRegistrationSubType ? {\n        label: this.props.Login.masterData.defaultRegistrationSubType.sregsubtypename,\n        value: this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode,\n        item: this.props.Login.masterData.defaultRegistrationSubType\n      } : \"\";\n\n      if (this.props.Login.masterData.selectedTestSynonym !== previousProps.Login.masterData.selectedTestSynonym) {\n        selectedTestSynonym = this.props.Login.masterData.selectedTestSynonym ? {\n          label: this.props.Login.masterData.selectedTestSynonym.stestname,\n          value: this.props.Login.masterData.selectedTestSynonym.ntestcode,\n          item: this.props.Login.masterData.selectedTestSynonym\n        } : \"\";\n        let stestname = selectedTestSynonym.item; //selectedRecord = {...this.state.selectedRecord,stestname,...selectedRecord};\n\n        selectedRecord = { ...selectedRecord,\n          stestname\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedProductcategory !== previousProps.Login.masterData.selectedProductcategory) {\n        selectedProductCategory = this.props.Login.masterData.selectedProductcategory ? {\n          label: this.props.Login.masterData.selectedProductcategory.sproductcatname,\n          value: this.props.Login.masterData.selectedProductcategory.nproductcatcode,\n          item: this.props.Login.masterData.selectedProductcategory\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedProduct !== previousProps.Login.masterData.selectedProduct) {\n        selectedProduct = this.props.Login.masterData.selectedProduct ? {\n          label: this.props.Login.masterData.selectedProduct.sproductname,\n          value: this.props.Login.masterData.selectedProduct.nproductcode,\n          item: this.props.Login.masterData.selectedProduct\n        } : \"\";\n        let sproductname = selectedProduct.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sproductname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrumentCategory !== previousProps.Login.masterData.selectedInstrumentCategory) {\n        selectedInstCategory = this.props.Login.masterData.selectedInstrumentCategory ? {\n          label: this.props.Login.masterData.selectedInstrumentCategory.sinstrumentcatname,\n          value: this.props.Login.masterData.selectedInstrumentCategory.ninstrumentcatcode,\n          item: this.props.Login.masterData.selectedInstrumentCategory\n        } : \"\";\n        let sinstrumentcatname = selectedInstCategory.item;\n        selectedRecord = { ...selectedRecord,\n          sinstrumentcatname\n        }; // selectedRecord = {...this.state.selectedRecord,sinstrumentcatname,...selectedRecord};\n\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrument !== previousProps.Login.masterData.selectedInstrument) {\n        selectedInstrument = this.props.Login.masterData.selectedInstrument ? {\n          label: this.props.Login.masterData.selectedInstrument.sinstrumentname,\n          value: this.props.Login.masterData.selectedInstrument.ninstrumentcode,\n          item: this.props.Login.masterData.selectedInstrument\n        } : \"\";\n        let sinstrumentname = selectedInstrument.item; //selectedRecord = { ...this.state.selectedRecord, sinstrumentname, ...selectedRecord };\n\n        selectedRecord = { ...selectedRecord,\n          sinstrumentname\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInstrumentId !== previousProps.Login.masterData.selectedInstrumentId) {\n        selectedInstrumentId = this.props.Login.masterData.selectedInstrumentId ? {\n          label: this.props.Login.masterData.selectedInstrumentId.sinstrumentid,\n          value: this.props.Login.masterData.selectedInstrumentId.ninstrumentcode,\n          item: this.props.Login.masterData.selectedInstrumentId\n        } : undefined;\n        let sinstrumentid = selectedInstrumentId && selectedInstrumentId.item; //selectedRecord = { ...this.state.selectedRecord, sinstrumentid, ...selectedRecord };\n\n        selectedRecord = { ...selectedRecord,\n          sinstrumentid\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.ProjectCode !== previousProps.Login.masterData.ProjectCode) {\n        selectedProjectcode = this.props.Login.masterData.selectedProjectedCode ? {\n          label: this.props.Login.masterData.selectedProjectedCode.sprojectcode,\n          value: this.props.Login.masterData.selectedProjectedCode.nprojectmastercode,\n          item: this.props.Login.masterData.selectedProjectedCode\n        } : undefined;\n        let sprojectcode = selectedProjectcode && selectedProjectcode.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          sprojectcode,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\n        userRoleControlRights = [];\n\n        if (this.props.Login.userRoleControlRights) {\n          this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item => userRoleControlRights.push(item.ncontrolcode));\n        }\n\n        controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode);\n        this.setState({\n          userRoleControlRights,\n          controlMap\n        });\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedComponentList !== previousProps.Login.selectedComponentList) {\n        addedComponentList = this.props.Login.selectedComponentList;\n        isStateChanged = true; // this.setState({ addedComponentList });\n      }\n\n      if (this.props.Login.masterData.defaultApprovalConfigVersion !== previousProps.Login.masterData.defaultApprovalConfigVersion) {\n        ApprovalVersionValue = this.props.Login.masterData.defaultApprovalConfigVersion ? {\n          label: this.props.Login.masterData.defaultApprovalConfigVersion.sversionname,\n          value: this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode,\n          item: this.props.Login.masterData.defaultApprovalConfigVersion\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.defaultFilterStatus !== previousProps.Login.masterData.defaultFilterStatus) {\n        FilterStatusValue = this.props.Login.masterData.defaultFilterStatus ? {\n          label: this.props.Login.masterData.defaultFilterStatus.sfilterstatus,\n          value: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\n          item: this.props.Login.masterData.defaultFilterStatus\n        } : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedSection !== previousProps.Login.masterData.selectedSection) {\n        selectedSection = this.props.Login.masterData.selectedSection ? {\n          label: this.props.Login.masterData.selectedSection.ssectionname,\n          value: this.props.Login.masterData.selectedSection.nsectioncode,\n          item: this.props.Login.masterData.selectedSection\n        } : \"\";\n        let ssectionname = selectedSection.item;\n        selectedRecord = { ...this.state.selectedRecord,\n          ssectionname,\n          ...selectedRecord\n        };\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialType !== previousProps.Login.masterData.selectedMaterialType) {\n        selectedMaterialType = this.props.Login.masterData.selectedMaterialType ? {\n          label: this.props.Login.masterData.selectedMaterialType.smaterialtypename,\n          value: this.props.Login.masterData.selectedMaterialType.nmaterialtypecode,\n          item: this.props.Login.masterData.selectedMaterialType\n        } : \"\";\n        selectedRecord[\"smaterialtypename\"] = this.props.Login.masterData.selectedMaterialType.smaterialtypename;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialCategory !== previousProps.Login.masterData.selectedMaterialCategory) {\n        selectedMaterialCategory = this.props.Login.masterData.selectedMaterialCategory ? {\n          label: this.props.Login.masterData.selectedMaterialCategory.smaterialcatname,\n          value: this.props.Login.masterData.selectedMaterialCategory.nmaterialcatcode,\n          item: this.props.Login.masterData.selectedMaterialCategory\n        } : \"\";\n        selectedRecord[\"smaterialcatname\"] = this.props.Login.masterData.selectedMaterialCategory.smaterialcatname;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterial !== previousProps.Login.masterData.selectedMaterial) {\n        selectedMaterial = this.props.Login.masterData.selectedMaterial ? {\n          label: this.props.Login.masterData.selectedMaterial.smaterialname,\n          value: this.props.Login.masterData.selectedMaterial.nmaterialcode,\n          item: this.props.Login.masterData.selectedMaterial\n        } : \"\";\n        selectedRecord[\"smaterialname\"] = this.props.Login.masterData.selectedMaterial.smaterialname;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedMaterialInventory !== previousProps.Login.masterData.selectedMaterialInventory) {\n        selectedMaterialInventory = this.props.Login.masterData.selectedMaterialInventory ? {\n          label: this.props.Login.masterData.selectedMaterialInventory.sinventoryid,\n          value: this.props.Login.masterData.selectedMaterialInventory.nmaterialinventtranscode,\n          item: this.props.Login.masterData.selectedMaterialInventory\n        } : \"\";\n        selectedRecord[\"sinventoryid\"] = this.props.Login.masterData.selectedMaterialInventory && this.props.Login.masterData.selectedMaterialInventory.sinventoryid != null ? this.props.Login.masterData.selectedMaterialInventory.sinventoryid : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.selectedInventoryUnit !== previousProps.Login.masterData.selectedInventoryUnit) {\n        //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\n        selectedRecord[\"savailablequatity\"] = this.props.Login.masterData.selectedInventoryUnit && this.props.Login.masterData.selectedInventoryUnit.savailablequatity != null ? this.props.Login.masterData.selectedInventoryUnit.savailablequatity : \"\";\n        selectedRecord[\"susedquantity\"] = \"\";\n        selectedRecord[\"sremarks\"] = \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.isselectedrecordempty) {\n        selectedRecord = {};\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.Specification !== previousProps.Login.masterData.Specification) {\n        //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\n        Specification = this.props.Login.masterData.Specification && this.props.Login.masterData.Specification != null ? this.props.Login.masterData.Specification : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\n        selectedRecord[\"selectedSpec\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec != null ? this.props.Login.selectedSpec : \"\";\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n        selectedRecord = this.props.Login.selectedRecord;\n        isStateChanged = true;\n      }\n\n      if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\n        const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.jsondata.value);\n        testGridArnoItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\n        testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\n        sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\n        subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\n        samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\n        DynamicGridMoreItem = [...samplegridmoreitem];\n        DynamicGridItem = [...sampleGridItem, ...subsampleGridItem, ...testGridArnoItems.slice(1), ...testGridItem];\n        isStateChanged = true;\n      }\n    } // if(this.props.Login.selectedRecord !== previousProps.Login.selectedRecord){\n    //     // let selectedRecord = {};\n    //     let MaterialCategory=constructOptionList(this.props.Login.selectedRecord.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\n    //     'ascending', 'nmaterialcatcode', false);\n    //     let Material =constructOptionList(this.props.Login.selectedRecord.Material || [], 'nmaterialcode', 'smaterialname',\n    //     'ascending', 'nmaterialcode', false);\n    //     let MaterialInventory=constructOptionList(this.props.Login.selectedRecord.MaterialInventory || [], 'nmaterialinventorycode', 'sinventoryid',\n    //     'ascending', 'nmaterialinventorycode', false);\n    //      MaterialCategory = MaterialCategory.get(\"OptionList\")\n    //      Material = Material.get(\"OptionList\")\n    //      MaterialInventory = MaterialInventory.get(\"OptionList\")\n    //      selectedRecord[\"MaterialCategory\"]=MaterialCategory\n    //      selectedRecord[\"Material\"]=Material\n    //      selectedRecord[\"MaterialInventory\"]=MaterialInventory\n    //  if(this.props.Login.selectedRecord.selectedMaterialType !== previousProps.Login.selectedRecord.selectedMaterialType) {\n    //         let selectedMaterialType = this.props.Login.selectedRecord.selectedMaterialType ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename,\n    //             value: this.props.Login.selectedRecord.selectedMaterialType.nmaterialtypecode || this.props.Login.selectedRecord.selectedMaterialType.item.value,\n    //             item:  this.props.Login.selectedRecord.selectedMaterialType.item ? this.props.Login.selectedRecord.selectedMaterialType.item : this.props.Login.selectedRecord.selectedMaterialType\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialType\"]=selectedMaterialType;\n    //         selectedRecord[\"smaterialtypename\"]=this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename;\n    //         isStateChanged = true;\n    //     }\n    //  if (this.props.Login.selectedRecord.selectedMaterialCategory !== previousProps.Login.selectedRecord.selectedMaterialCategory) {\n    //         let selectedMaterialCategory = this.props.Login.selectedRecord.selectedMaterialCategory ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname ,\n    //             value: this.props.Login.selectedRecord.selectedMaterialCategory.nmaterialcatcode || this.props.Login.selectedRecord.selectedMaterialCategory.item.value ,\n    //             item:  this.props.Login.selectedRecord.selectedMaterialCategory.item  ? this.props.Login.selectedRecord.selectedMaterialCategory.item  : this.props.Login.selectedRecord.selectedMaterialCategory \n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialCategory\"]=selectedMaterialCategory;\n    //         selectedRecord[\"smaterialcatname\"]=this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname \n    //         isStateChanged = true;\n    //     }\n    //     if (this.props.Login.selectedRecord.selectedMaterial !== previousProps.Login.selectedRecord.selectedMaterial) {\n    //          let selectedMaterial = this.props.Login.selectedRecord.selectedMaterial ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterial.smaterialname,\n    //             value: this.props.Login.selectedRecord.selectedMaterial.nmaterialcode,\n    //             item: this.props.Login.selectedRecord.selectedMaterial\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterial\"]= selectedMaterial;\n    //         selectedRecord[\"smaterialname\"]=this.props.Login.selectedRecord.selectedMaterial.smaterialname;\n    //         isStateChanged = true;\n    //     }\n    //     if (this.props.Login.selectedRecord.selectedMaterialInventory !== previousProps.Login.selectedRecord.selectedMaterialInventory) {\n    //         let selectedMaterialInventory = this.props.Login.selectedRecord.selectedMaterialInventory ?\n    //         {\n    //             label: this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid,\n    //             value: this.props.Login.selectedRecord.selectedMaterialInventory.nmaterialinventorycode,\n    //             item: this.props.Login.selectedRecord.selectedMaterialInventory\n    //         }:\"\"\n    //         selectedRecord[\"selectedMaterialInventory\"]= selectedMaterialInventory;\n    //         selectedRecord[\"sinventoryid\"]=this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid;\n    //         isStateChanged = true;\n    //     }\n\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      isStateChanged = true;\n      selectedRecord = this.props.Login.selectedRecord; //this.setState({ selectedRecord: this.props.Login.selectedRecord });\n    }\n\n    if (isStateChanged) {\n      this.setState({\n        userRoleControlRights,\n        controlMap,\n        selectedRecord,\n        filterData,\n        addedComponentList,\n        filterStatusList,\n        dataState,\n        sahDataState,\n        bahDataState,\n        chDataState,\n        testCommentDataState,\n        SampleType,\n        RegistrationType,\n        RegistrationSubType,\n        BCFilterStatus,\n        REJobStatus,\n        Testvalues,\n        ApprovalConfigVersion,\n        skip,\n        take,\n        testskip,\n        testtake,\n        selectedFilter,\n        selectedInstCategory,\n        InstrumentCategory,\n        Instrument,\n        selectedInstrument,\n        selectedTestSynonym,\n        nregsubtypecode,\n        ProductCategory,\n        selectedProductCategory,\n        Product,\n        selectedProduct,\n        samples,\n        addSelectAll,\n        deleteSelectAll,\n        ApprovalVersionValue,\n        FilterStatusValue,\n        Section,\n        selectedSection,\n        sampleGridItem,\n        subsampleGridItem,\n        testGridItem,\n        DynamicGridItem,\n        samplegridmoreitem,\n        DynamicGridMoreItem,\n        MaterialCategory,\n        selectedMaterialType,\n        Material,\n        selectedMaterial,\n        selectedMaterialCategory,\n        MaterialInventory,\n        selectedMaterialInventory,\n        Specification,\n        selectedSpec,\n        addedSamplesList,\n        testGridArnoItems,\n        InstrumentID,\n        selectedInstrumentId,\n        sinstrumentid,\n        selectedProjectcode,\n        ProjectCode\n      });\n    }\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  callService,\n  crudMaster,\n  updateStore,\n  getTestInstrumentComboService,\n  getTestInstrumentCategory,\n  getInstrumentForInstCategory,\n  getProductBasedInstrument,\n  getBatchCreationDetails,\n  onActionFilterSubmit,\n  getProductcategoryAction,\n  createBatchmasterAction,\n  getSamplesForGrid,\n  getSelectedBatchCreationDetail,\n  createSampleAction,\n  deleteSampleAction,\n  getActiveBatchCreationService,\n  updateBatchcreationAction,\n  deleteBatchCreation,\n  batchInitiateAction,\n  getBCRegistrationSubType,\n  batchCompleteAction,\n  validateEsignCredential,\n  filterColumnData,\n  getBatchhistoryAction,\n  getBatchSection,\n  viewInfo,\n  getIqcSamples,\n  getMaterialBasedOnMaterialCategory,\n  getMaterialInventoryBasedOnMaterial,\n  batchSaveIQCActions,\n  getMaterialAvailQtyBasedOnInv,\n  getBatchIqcSampleAction,\n  getBCApprovalConfigVersion,\n  getBCRegistrationType,\n  getTreeByMaterial,\n  getNewRegSpecification,\n  cancelIQCSampleAction,\n  batchCancelAction,\n  batchInitiateDatePopup,\n  batchCompleteDatePopup,\n  getInstrumentID,\n  getBatchViewResultAction,\n  validateEsignforBatch //,batchTAT\n\n})(injectIntl(BatchCreation));","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/src/pages/batchruncreation/BatchCreation.jsx"],"names":["React","connect","toast","injectIntl","FormattedMessage","Row","Col","Nav","FormGroup","FormLabel","Card","Modal","Image","Button","FontAwesomeIcon","faPencilAlt","faTrashAlt","faCheckCircle","faCopy","faEye","faPlay","faPlus","faSync","callService","crudMaster","updateStore","getTestInstrumentComboService","getTestInstrumentCategory","getProductBasedInstrument","getInstrumentForInstCategory","getBatchCreationDetails","onActionFilterSubmit","getProductcategoryAction","createBatchmasterAction","getSamplesForGrid","getSelectedBatchCreationDetail","createSampleAction","deleteSampleAction","getActiveBatchCreationService","updateBatchcreationAction","deleteBatchCreation","batchInitiateAction","getBCRegistrationSubType","batchCompleteAction","validateEsignCredential","filterColumnData","getBatchhistoryAction","getBatchSection","viewInfo","getIqcSamples","getMaterialBasedOnMaterialCategory","getMaterialInventoryBasedOnMaterial","batchSaveIQCActions","getMaterialAvailQtyBasedOnInv","getBatchIqcSampleAction","getBCApprovalConfigVersion","getBCRegistrationType","getTreeByMaterial","getNewRegSpecification","cancelIQCSampleAction","batchCancelAction","batchInitiateDatePopup","batchCompleteDatePopup","getInstrumentID","getBatchViewResultAction","validateEsignforBatch","transactionStatus","designProperties","reportTypeEnum","reportCOAType","RegistrationSubType","SampleType","DEFAULT_RETURN","showEsign","getControlMap","getStartOfDay","getEndOfDay","formatInputDate","constructOptionList","rearrangeDateFormat","convertDateValuetoString","CF_encryptionData","ConfirmMessage","SlideOutModal","ReadOnlyText","ContentPanel","MediaLabel","ListWrapper","BreadcrumbComponent","Esign","ProductList","CustomPopover","BatchCreationFilter","AddBatchCreation","AddBatchinitiate","CustomTab","SampleTab","BatchhistoryTab","process","AddSample","ListMaster","ViewInfo","Affix","AddMaterialIqc","BatchIqcSampleTab","BatchResultTab","PortalModal","Iframe","ReactTooltip","mapStateToProps","state","Login","BatchCreation","Component","constructor","props","sidebarExpandCollapse","setState","sidebarview","completeMandatoryFields","initiateMandatoryFields","materialIqcMandatory","getSamples","selectedbatchmaster","addSampleID","controlMap","has","get","ncontrolcode","ntransactionstatus","INITIATED","COMPLETED","CANCELLED","warn","intl","formatMessage","id","masterData","SelectedBatchmaster","ntestcode","nbatchmastercode","userInfo","realRegTypeValue","nregtypecode","NA","realRegSubTypeValue","nregsubtypecode","createBatchValidation","addParam","defaultRegistrationType","undefined","FilterStatusValue","item","ApprovalVersionValue","Samples","length","addcontrolcode","inputData","realSampleTypeValue","nsampletypecode","nsectioncode","deleteRecord","postParam","inputListName","selectedObject","primaryKeyField","primaryKeyValue","selectedRecord","nbatchsampleCode","fetchUrl","isSingleGet","fecthInputObject","userinfo","jsondata","inputParam","classUrl","methodUrl","Sample","sarno","ssamplearno","stestname","nbatchsamplecode","ndesigntemplatemappingcode","operation","displayName","dataState","userRoleControlRights","nformcode","ncontrolCode","updateInfo","typeName","data","loadEsign","screenData","openModal","screenName","cancelRecord","nbatchsampleiqccode","iqcSample","nmaterialinventtranscode","onTabChange","tabProps","nneedsubsample","batchactiveKey","dataStateChange","event","dataResult","sampleState","dataStateBatchHistoryChange","Batchhistory","histortState","dataStateBatchIqcChangeChange","iqcsample","iqcsampleState","dataStateViewChange","Resultview","viewstate","getApprovalVersion","obj","fromDate","realFromDate","toDate","realToDate","needFilterSubmit","parseInt","defaultSampleType","isneedapprovalfilter","defaultRegistrationSubType","isneedrealFilterStatus","realRegistrationTypeList","realRegistrationSubTypeList","realApprovalConfigVersionList","realBCFilterStatusList","realdefaultFilterStatus","realApproveConfigVersion","tabDetail","tabMap","Map","set","gridfillingColumn","DynamicGridItem","DynamicGridMoreItem","ELNTest","sbatcharno","onFilterComboChange","fieldname","dateObj","nflag","ntranscode","value","selectedFilter","inputParamData","fromdate","todate","napprovalversioncode","ApprovalConfigVersion","napprovalconfigversioncode","String","defaultFilterStatus","DesignTemplateMappingValue","getBCFilterTemplate","defaultApprovalConfigVersion","njobstatuscode","defaultjobstatus","getBCFilterStatus","handleFilterDateChange","dateValue","dateName","Date","headerSelectionChange","checked","syntheticEvent","target","sampleList","samples","addedSamplesList","map","findIndex","x","ntransactiontestcode","push","selected","newItem","JSON","parse","stringify","olditem","addSelectAll","deleteSelectAll","sampleListData","deletedListdData","filter","item1","npreregno","deletedList","onTreeClick","activeKey","key","focusKey","keyName","selectedNode","primaryKey","selectionChange","samplesList","dataItem","initialList","valiateCheckAll","handleSaveClick","saveType","failedControls","startLabel","label","mandatoryFields","console","log","selectedSpec","nallottedspeccode","loadSpec","openSpecModal","info","handlePageChange","e","skip","take","ConfirmDelete","selectedBatch","deleteId","confirmMessage","confirm","completePopUpStartActions","completeId","DRAFT","AddSpec","selectedMaterial","selectedMaterialCategory","ncategorybasedflow","testPopUpStartActions","testStartId","testStartActions","selectedmaster","jsonuidata","totalSample","concat","join","sample","ntransactionsamplecode","nneedmyjob","nneedjoballocation","napprovalconfigcode","nneedtestinitiate","dtransactiondate","currentTime","scomments","BCFilterStatus","savailablequatity","parseFloat","susedquantity","inventoryTransaction","inputRegistrationData","inputMaterialInventoryData","inputBatchData","batchCreationSampleData","batchCreationTestData","batchCreationSampleArray","batchCreationTestArray","samplecombinationuniqueArray","inputMaterialInventoryArrData","nspecsampletypecode","ntemplatemanipulationcode","nregsubtypeversioncode","nmaterialcode","nmaterialcatcode","smaterialcatname","sinventoryid","selectedMaterialInventory","nmaterialinventorycode","smaterial","smaterialname","smaterialtype","selectedMaterialType","smaterialtypename","nmaterialtypecode","sunitname","sremarks","selectedInventoryUnit","nqtyused","selectedTestDetails","ntestgrouptestcode","nmethodcode","PREREGISTER","cancelBatch","cancelId","batchCompleteActions","closeAlert","showConfirmAlert","loading","closeModal","selectedId","onComboChange","comboData","fieldName","selectedInstCategory","selectedInstrumentId","InstrumentCategory","selectedInstrument","Instrument","InstrumentID","naddcontrolCode","sregsubtypename","ssectionname","selectedTestSynonym","nprojectmastercode","ncalibrationreq","needSectionwise","needsection","ninstrumentcatcode","ninstrumentcode","selectedProjectcode","onNumericInputOnChange","name","onInputOnChange","type","ACTIVE","DEACTIVE","YES","NO","onMultiColumnValue","flag","keys","forEach","objarray","objkey","index","getBatchManufacturerComboChange","onMultiColumnMAHChange","clearComponentInput","componentDefaultSearchDate","openClosePortal","openELNSheet","elnUserInfo","enlLink","integrationSettings","elnSite","link","detail","EncryptData","settedId","encryptedbatchid","userObject","usercode","nelncode","username","selnuserid","userfullname","selnusername","lsusergroup","usergroupcode","nelnusergroupcode","usergroupname","lssitemaster","sitecode","nelnsitecode","encrypteduser","baseURL","slinkname","handleDateChange","onDropImage","attachedFiles","actionType","saveSample","addedsamplelist","sampleArray","samplelist","batchSample","onSaveClick","formRef","nprevioustestcode","selectedSection","selectedProduct","unchangeList","searchRef","current","editId","ALL","fetchEditData","editParam","validateEsign","sreason","password","closeFilter","inputValues","realSampleTypeList","SampleTypeValue","RegistrationType","RegTypeValue","RegSubTypeValue","FilterStatus","realndesigntemplatemappingcode","showFilter","onFilterSubmit","reloadData","isFilterSubmit","onClickReport","reportParam","sprimarykeyname","nprimarykey","nreleasebatchcode","ncertificatetypecode","ndecision","PASS","ndecisionstatus","nreporttypecode","SCREENWISE","BATCH","ncoareporttypecode","BATCHPREVIEW","skipbatchvalidation","reportMethod","method","SelectedBatchCreation","controlId","settings","createRef","searchFieldList","sampleMandatoryFields","copyMandatoryFields","getDerivedStateFromProps","masterStatus","error","temparray","option","LABEL","slanguagetypecode","VALUE","selectAll","render","reportActionList","batchMandatoryFields","sinstrumentcatname","getBatch","addId","elnSheetId","primaryeyField","viewInfoFields","PROJECTSAMPLETYPE","stransactionstatuscode","SelectedFilterStatus","filterParam","breadCrumbData","breadCrumbFrom","breadCrumbto","sregtypename","sfilterstatus","searchedData","Batchmaster","batch","openFilter","isClearSearch","indexOf","REJobStatus","Testvalues","onDesignTemplateChange","stateDynamicDesign","parentFunction","SelectedBatchTestTAT","Deviation","stransdisplaystatus","elnimage","reject","showSaveContinue","ProductCategory","selectedProductCategory","Product","studyPlanList","productManufacturerList","maHolderList","timeZoneList","batchCreationEditStatusList","Section","ProjectCode","getProductByCategory","productCategoryList","productList","componentList","getDataForAddComponent","addedComponentList","addedHeaderSelectionChange","addedSelectionChange","onDeleteSelectedComponent","componentPopupSkip","componentPopupTake","componentPageSizes","selectedRecordView","MaterialCategory","Material","MaterialInventory","AgaramTree","OpenNodes","FocusKey","Specification","onspecChange","confirmAlert","componentDidUpdate","previousProps","filterData","filterStatusList","sahDataState","bahDataState","chDataState","testCommentDataState","testskip","testtake","sampleGridItem","subsampleGridItem","testGridItem","samplegridmoreitem","testGridArnoItems","sinstrumentid","isStateChanged","bool","instrumentCategory","instrument","productcategory","product","instrumentID","selectFilterStatus","PARTIAL","scolorhexcode","selectedFilters","selectedFiltersNew","selectedProductcategory","sproductcatname","nproductcatcode","sproductname","nproductcode","selectedInstrumentCategory","sinstrumentname","selectedProjectedCode","sprojectcode","Object","values","selectedComponentList","sversionname","isselectedrecordempty","DynamicDesign","dynamicColumn","testListFields","testlistitem","releasetestfields","samplegriditem","subsamplelistitem","slice"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport { injectIntl, FormattedMessage } from 'react-intl';\r\nimport { Row, Col, Nav, FormGroup, FormLabel, Card, Modal, Image, Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n    faPencilAlt, faTrashAlt, faCheckCircle, faCopy, faEye, faPlay, faPlus, faSync\r\n} from '@fortawesome/free-solid-svg-icons';\r\nimport reject from '../../assets/image/reject.svg'\r\nimport elnimage from '../../assets/image/sheet-view.svg'\r\nimport {\r\n    callService, crudMaster, updateStore,\r\n    getTestInstrumentComboService, getTestInstrumentCategory, getProductBasedInstrument,\r\n    getInstrumentForInstCategory, getBatchCreationDetails, onActionFilterSubmit,\r\n    getProductcategoryAction, createBatchmasterAction, getSamplesForGrid,\r\n    getSelectedBatchCreationDetail, createSampleAction, deleteSampleAction,\r\n    getActiveBatchCreationService, updateBatchcreationAction, deleteBatchCreation,\r\n    batchInitiateAction, getBCRegistrationSubType, batchCompleteAction,\r\n    validateEsignCredential, filterColumnData, getBatchhistoryAction, getBatchSection,\r\n    viewInfo, getIqcSamples, getMaterialBasedOnMaterialCategory,\r\n    getMaterialInventoryBasedOnMaterial, batchSaveIQCActions, getMaterialAvailQtyBasedOnInv,\r\n    getBatchIqcSampleAction, getBCApprovalConfigVersion, getBCRegistrationType, getTreeByMaterial,\r\n    getNewRegSpecification, cancelIQCSampleAction, batchCancelAction, batchInitiateDatePopup,\r\n    batchCompleteDatePopup, getInstrumentID, getBatchViewResultAction,validateEsignforBatch\r\n    //,batchTAT\r\n} from '../../actions';\r\nimport {\r\n    transactionStatus, designProperties, reportTypeEnum, reportCOAType,\r\n    RegistrationSubType, SampleType\r\n} from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport {\r\n    showEsign, getControlMap, getStartOfDay, getEndOfDay,\r\n    formatInputDate, constructOptionList, rearrangeDateFormat, convertDateValuetoString, CF_encryptionData\r\n} from '../../components/CommonScript';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport SlideOutModal from '../../components/slide-out-modal/SlideOutModal';\r\nimport { ReadOnlyText, ContentPanel, MediaLabel } from '../../components/App.styles';\r\nimport { ListWrapper } from '../../components/client-group.styles';\r\nimport BreadcrumbComponent from '../../components/Breadcrumb.Component';\r\nimport Esign from '../audittrail/Esign';\r\nimport { ProductList } from '../product/product.styled';\r\nimport CustomPopover from '../../components/customPopover';\r\nimport BatchCreationFilter from './BatchCreationFilter';\r\nimport AddBatchCreation from './AddBatchCreation';\r\nimport AddBatchinitiate from './AddBatchinitiate';\r\nimport CustomTab from '../../components/custom-tabs/custom-tabs.component';\r\nimport SampleTab from './SampleTab';\r\nimport BatchhistoryTab from './BatchhistoryTab';\r\nimport { process } from '@progress/kendo-data-query';\r\nimport AddSample from './AddSample';\r\nimport ListMaster from '../../components/list-master/list-master.component';\r\nimport ViewInfo from './ViewInfo';\r\nimport { Affix } from 'rsuite';\r\nimport AddMaterialIqc from './AddMaterialIqc';\r\nimport BatchIqcSampleTab from './BatchIqcSampleTab';\r\nimport BatchResultTab from './BatchResultTab';\r\nimport PortalModal from '../../PortalModal';\r\nimport Iframe from 'react-iframe';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { ReactComponent as RefreshIcon } from '../../assets/image/refresh.svg';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\n\r\nclass BatchCreation extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const sampleState = {\r\n            skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n\r\n        const histortState = {\r\n            skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n\r\n        const iqcsampleState = {\r\n            skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n\r\n        const viewstate = {\r\n            skip: 0, take: this.props.Login.settings ?\r\n                parseInt(this.props.Login.settings[14]) : 5\r\n        };\r\n\r\n        this.state = {\r\n            skip: 0,\r\n            take: this.props.Login.settings && this.props.Login.settings[3],\r\n            userRoleControlRights: [],\r\n            controlMap: new Map(),\r\n            selectedFilter: {},\r\n            sampleState,\r\n            histortState,\r\n            iqcsampleState,\r\n            viewstate,\r\n            selectedRecord: {},\r\n            //confirmmsg:this.ConfirmMessage.bind(this),\r\n            dataState: { skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5 },\r\n            sidebarview: false\r\n\r\n        };\r\n        this.searchRef = React.createRef();\r\n        this.confirmMessage = new ConfirmMessage();\r\n\r\n        this.searchFieldList = [\"stestname\", \"sinstrumentcatname\", \"sinstrumentname\", \"sproductname\", \"smanufname\", \"stransactiondate\", \"username\",\r\n            \"stransactionstatus\", \"sdecision\", \"sbatcharno\", \"stransdisplaystatus\"];\r\n\r\n        this.sampleMandatoryFields = [];\r\n        this.copyMandatoryFields = [];\r\n    }\r\n    sidebarExpandCollapse = () => {\r\n        this.setState({\r\n            sidebarview: true\r\n        })\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        // if (props.Login.masterStatus !== \"\") {\r\n        //     if (props.Login.errorCode === 417 || props.Login.errorCode === 409) {\r\n        //        if(props.Login.operation == \"initiate\"){\r\n        //         toast.warn(props.Login.masterStatus);\r\n        //         //this.state.confirmmsg.confirm(\"warning\", \"Warning!\",  props.Login.masterStatus, undefined, \"ok\", undefined, true, undefined);\r\n        //        }\r\n        //     }\r\n        // }\r\n        if (props.Login.masterStatus !== \"\" && props.Login.masterStatus !== state.masterStatus) {\r\n            toast.warn(props.Login.masterStatus);\r\n            props.Login.masterStatus = \"\";\r\n        }\r\n\r\n        if (props.Login.error !== \"\" && props.Login.error !== state.error) {\r\n            toast.error(props.Login.error)\r\n            props.Login.error = \"\";\r\n        }\r\n        if (props.Login.selectedRecord === undefined) {\r\n            return { selectedRecord: {} }\r\n        }\r\n        return null;\r\n        // if (props.Login.selectedRecord !== state.selectedRecord) {\r\n        //     return ({ selectedRecord: { ...state.selectedRecord, ...props.Login.selectedRecord } });\r\n        // }\r\n    }\r\n\r\n\r\n    // const sampleColumnList = [];\r\n\r\n    // if (props.nneedsubsample){\r\n    //     sampleColumnList.push({\"idsName\":\"IDS_SAMPLEARNO\",\"dataField\":\"ssamplearno\", \"width\": \"155px\"} );\r\n    // }\r\n    // else{\r\n    //     sampleColumnList.push({\"idsName\":\"IDS_ARNUMBER\",\"dataField\":\"sarno\", \"width\": \"155px\"});\r\n    // }\r\n\r\n    completeMandatoryFields = [\r\n        {\r\n            \"idsName\": \"IDS_BATCHCOMPLETEDATE\",\r\n            //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \r\n            \"dataField\": \"dtransactiondate\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\"\r\n        },\r\n    ];\r\n\r\n    initiateMandatoryFields = [\r\n        {\r\n            \"idsName\": \"IDS_BATCHINITIATEDATE\",\r\n            //\"idsName\": this.props.Login.operation === \"initiate\" ? \"IDS_BATCHINITIATEDATE\" :\"IDS_BATCHCOMPLETEDATE\" , \r\n            \"dataField\": \"dtransactiondate\", \"mandatoryLabel\": \"IDS_CHOOSE\", \"controlType\": \"selectbox\"\r\n        },\r\n    ];\r\n\r\n\r\n\r\n    materialIqcMandatory = [\r\n\r\n        { \"idsName\": \"IDS_MATERIALTYPE\", \"dataField\": \"smaterialtypename\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_MATERIALCATEGORY\", \"dataField\": \"smaterialcatname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_MATERIAL\", \"dataField\": \"smaterialname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        { \"idsName\": \"IDS_MATERIALINVENTORY\", \"dataField\": \"sinventoryid\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n        //{ \"idsName\": \"IDS_AVAILABLEQUANTITY\", \"dataField\": \"savailablequatity\", \"mandatoryLabel\":\"IDS_ENTER\", \"controlType\": \"textbox\" },\r\n        { \"idsName\": \"IDS_USEDQTY\", \"dataField\": \"susedquantity\", \"mandatoryLabel\": \"IDS_ENTER\", \"controlType\": \"textbox\" }\r\n    ]\r\n\r\n    getSamples = (selectedbatchmaster) => {\r\n        const addSampleID = this.state.controlMap.has(\"AddSamples\") && this.state.controlMap.get(\"AddSamples\").ncontrolcode\r\n        if (selectedbatchmaster.ntransactionstatus == transactionStatus.INITIATED ||\r\n            selectedbatchmaster.ntransactionstatus == transactionStatus.COMPLETED ||\r\n            selectedbatchmaster.ntransactionstatus == transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        } else {\r\n            this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode, this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n                this.props.Login.userInfo, this.props.Login.masterData,\r\n                this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ?\r\n                    this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                    this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA, addSampleID)\r\n        }\r\n    }\r\n\r\n    createBatchValidation = (addParam) => {\r\n        if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined &&\r\n            this.state.ApprovalVersionValue.item != undefined\r\n        ) {\r\n            this.props.getBatchSection(addParam)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    getIqcSamples = (SelectedBatchmaster) => {\r\n        if (SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ||\r\n            SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ||\r\n            SelectedBatchmaster.ntransactionstatus === transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        } else if (this.props.Login.masterData.Samples.length == 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLETOADDIQC\" }));\r\n        } else {\r\n            let addcontrolcode = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\r\n            let inputData = {};\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ?\r\n                this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            // inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData['naddcontrolCode'] = addcontrolcode;\r\n            // inputData['section']={\r\n            //         nsectioncode: SelectedBatchmaster.nsectioncode\r\n            // };\r\n            inputData['nsectioncode'] = SelectedBatchmaster.nsectioncode;\r\n            inputData['userInfo'] = this.props.Login.userInfo;\r\n            inputData['nbatchmastercode'] = SelectedBatchmaster.nbatchmastercode;\r\n            inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n            this.props.getIqcSamples(inputData, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n    deleteRecord = (inputData) => {\r\n\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ||\r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        } else {\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: inputData.selectedRecord.nbatchsampleCode,\r\n                fetchUrl: \"batchcreation/getSampleTabDetails\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            let jsondata = inputData.selectedRecord;\r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Sample\",\r\n                postParam,\r\n                inputData: {\r\n                    Sample: {\r\n                        \"sarno\": inputData.selectedRecord.sarno,\r\n                        \"ssamplearno\": inputData.selectedRecord.ssamplearno,\r\n                        \"stestname\": inputData.selectedRecord.stestname,\r\n                        \"nbatchsamplecode\": inputData.selectedRecord.nbatchsamplecode,\r\n\r\n                    },\r\n                    \"userInfo\": this.props.Login.userInfo,\r\n                    nbatchsamplecode: inputData.selectedRecord.nbatchsamplecode,\r\n                    masterData: {\r\n                        ...this.props.Login.masterData,\r\n                        \"samples\": []\r\n                    },\r\n                    nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                    //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                    //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n                },\r\n                operation: inputData.operation,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                dataState: this.state.dataState\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: inputData.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.deleteSampleAction(inputParam.inputData);\r\n            }\r\n        }\r\n    }\r\n\r\n    cancelRecord = (inputData) => {\r\n\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ||\r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        } else {\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: inputData.nbatchsampleiqccode,\r\n                fetchUrl: \"batchcreation/getBatchIqcSampleAction\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"IQCSample\",\r\n                postParam,\r\n                inputData: {\r\n                    iqcSample: inputData.selectedRecord,\r\n                    nbatchsampleiqccode: inputData.selectedRecord.nbatchsampleiqccode,\r\n                    masterData: this.props.Login.masterData,\r\n                    nbatchmastercode: inputData.selectedRecord.nbatchmastercode,\r\n                    nmaterialinventtranscode: inputData.selectedRecord.nmaterialinventtranscode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                    //nregtypecode :this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                    //nregsubtypecode : this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA\r\n                    nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n                    nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n                    nsampletypecode: this.props.Login.masterData.realSampleTypeValue ?\r\n                        this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA\r\n                },\r\n                operation: inputData.operation,\r\n                displayName: this.props.Login.inputParam.displayName,\r\n                dataState: this.state.dataState\r\n            }\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, inputData.ncontrolCode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: {\r\n                            inputParam,\r\n                            masterData: this.props.Login.masterData\r\n                        },\r\n                        openModal: true, screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n                        operation: inputData.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.cancelIQCSampleAction(inputParam.inputData);\r\n            }\r\n        }\r\n    }\r\n\r\n    onTabChange = (tabProps) => {\r\n        const screenName = tabProps.screenName;\r\n\r\n        if (screenName == \"IDS_BATCHHISTORY\") {\r\n\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchhistoryAction(inputData, true);\r\n        } else if (screenName == \"IDS_BATCHIQCSAMPLE\") {\r\n\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchIqcSampleAction(inputData, true);\r\n        } else if (screenName == \"IDS_RESULTS\") {\r\n            let inputData = {\r\n                masterData: this.props.Login.masterData,\r\n                userInfo: this.props.Login.userInfo,\r\n                nneedsubsample: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample,\r\n                nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode\r\n            }\r\n            this.props.getBatchViewResultAction(inputData, true);\r\n        } else {\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: { screenName, batchactiveKey: screenName }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    dataStateChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Samples, event.dataState),\r\n            sampleState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateBatchHistoryChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Batchhistory, event.dataState),\r\n            histortState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateBatchIqcChangeChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.iqcsample, event.dataState),\r\n            iqcsampleState: event.dataState\r\n        });\r\n    }\r\n\r\n    dataStateViewChange = (event) => {\r\n        this.setState({\r\n            dataResult: process(this.props.Login.masterData.Resultview, event.dataState),\r\n            viewstate: event.dataState\r\n        });\r\n    }\r\n\r\n    gridfillingColumn(data) {\r\n        const temparray = data && data.map((option) => {\r\n            return {\r\n                \"idsName\": option[designProperties.LABEL][this.props.Login.userInfo.slanguagetypecode],\r\n                \"dataField\": option[designProperties.VALUE] == \"null\" ? '-' : option[designProperties.VALUE],\r\n                \"width\": \"150px\", \"columnSize\": \"4\"\r\n            };\r\n\r\n        });\r\n        return temparray;\r\n\r\n    }\r\n\r\n    getApprovalVersion = (data) => {\r\n        let inputData = [];\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.fromDate || this.props.Login.masterData.realFromDate,\r\n            this.props.Login.masterData.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n        inputData = {\r\n            needFilterSubmit: \"false\",\r\n            nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n            fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n            toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n            nregtypecode: data.item.nregtypecode,\r\n            userInfo: this.props.Login.userInfo,\r\n            nregsubtypecode: data.item.nregsubtypecode,\r\n            masterData: this.props.Login.masterData,\r\n            isneedapprovalfilter: true,\r\n            defaultRegistrationSubType: data.item,\r\n            isneedrealFilterStatus: \"false\",\r\n            // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n            // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n            // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n            // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\",\r\n            realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n            realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n            realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n            realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n            realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n            realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n            realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n            realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n            realFromDate:this.props.Login.masterData.realFromDate,\r\n            realToDate:this.props.Login.masterData.realToDate\r\n           \r\n        }\r\n        this.props.getBCApprovalConfigVersion(inputData)\r\n\r\n    }\r\n\r\n    tabDetail = () => {\r\n        const tabMap = new Map();\r\n        tabMap.set(\"IDS_SAMPLE\",\r\n            <SampleTab\r\n                sample={this.props.Login.masterData.Samples || []}\r\n                dataResult={process(this.props.Login.masterData.Samples || [], this.state.sampleState)}\r\n                dataState={this.state.sampleState}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={this.dataStateChange}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                deleteRecord={this.deleteRecord}\r\n                extractedColumnList={this.gridfillingColumn(this.state.DynamicGridItem) || []}\r\n                detailedFieldList={this.gridfillingColumn(this.state.DynamicGridMoreItem) || []}\r\n                methodUrl={\"Samples\"}\r\n                getSamples={() => this.getSamples(this.props.Login.masterData.SelectedBatchmaster)}\r\n                // getSamples={() => this.props.getSamplesForGrid(this.props.Login.masterData.SelectedBatchmaster.ntestcode,this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n                //     this.props.Login.userInfo,this.props.Login.masterData,this.props.Login.masterData.defaultRegistrationType.nregtypecode,this.state.nregsubtypecode.value)}\r\n                //inputParam={this.props.Login.inputParam}\r\n                screenName=\"IDS_SAMPLE\"\r\n                nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n            />\r\n        )\r\n        tabMap.set(\"IDS_BATCHIQCSAMPLE\",\r\n            <BatchIqcSampleTab\r\n                iqcsample={this.props.Login.masterData.iqcsample || []}\r\n                dataResult={process(this.props.Login.masterData.iqcsample || [], this.state.iqcsampleState)}\r\n                dataState={this.state.iqcsampleState}\r\n                controlMap={this.state.controlMap}\r\n                dataStateChange={this.dataStateBatchIqcChangeChange}\r\n                userRoleControlRights={this.state.userRoleControlRights}\r\n                userInfo={this.props.Login.userInfo}\r\n                cancelRecord={this.cancelRecord}\r\n                methodUrl={\"IQCSample\"}\r\n                getIqcSamples={() => this.getIqcSamples(this.props.Login.masterData.SelectedBatchmaster)}\r\n                screenName=\"IDS_BATCHIQCSAMPLE\"\r\n                nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n            />\r\n        )\r\n    //     if (this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.INITIATED\r\n    //         || this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus === transactionStatus.COMPLETED)\r\n        if(this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus===transactionStatus.INITIATED|| this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED )\r\n        {\r\n            tabMap.set(\"IDS_RESULTS\",\r\n                <BatchResultTab\r\n                    ELNTest={this.props.Login.masterData.ELNTest || []}\r\n                    resultview={this.props.Login.masterData.Resultview || []}\r\n                    dataResult={process(this.props.Login.masterData.Resultview || [], this.state.viewstate)}\r\n                    dataState={this.state.viewstate}\r\n                    dataStateChange={this.dataStateViewChange}\r\n                    userInfo={this.props.Login.userInfo}\r\n                    methodUrl={\"BatchViewResult\"}\r\n                    screenName=\"IDS_RESULTS\"\r\n                    intl={this.props.intl}\r\n                    nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n                    selectedfilename={this.props.Login.masterData.SelectedBatchmaster.sbatcharno}\r\n\r\n                />\r\n            )\r\n        }\r\n\r\n        tabMap.set(\"IDS_BATCHHISTORY\",\r\n            <BatchhistoryTab\r\n                batchhistory={this.props.Login.masterData.Batchhistory || []}\r\n                dataResult={process(this.props.Login.masterData.Batchhistory || [], this.state.histortState)}\r\n                dataState={this.state.histortState}\r\n                dataStateChange={this.dataStateBatchHistoryChange}\r\n                userInfo={this.props.Login.userInfo}\r\n                methodUrl={\"Batchhistory\"}\r\n                screenName=\"IDS_BATCHHISTORY\"\r\n                nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n\r\n            />\r\n        )\r\n\r\n\r\n        return tabMap;\r\n    }\r\n\r\n\r\n    onFilterComboChange = (event, fieldname) => {\r\n        if (event !== null) {\r\n            let inputData = [];\r\n\r\n\r\n            if (fieldname === \"fromDate\") {\r\n                let dateObj = convertDateValuetoString(event, this.props.Login.masterData.toDate, this.props.Login.userInfo)\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit: \"false\",\r\n                    fromDate: dateObj.fromDate,//this.OnDateConverstion(event, fieldname),\r\n                    toDate: dateObj.toDate,//this.props.Login.masterData.toDate,\r\n                    defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\r\n                    defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\r\n                    defaultSampleType: this.props.Login.masterData.defaultSampleType,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\r\n                    ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\r\n                    //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realFromDate:this.props.Login.masterData.realFromDate,\r\n                    realToDate:this.props.Login.masterData.realToDate\r\n                }\r\n                this.props.getBCApprovalConfigVersion(inputData)\r\n            }\r\n            if (fieldname === \"toDate\") {\r\n\r\n                let dateObj = convertDateValuetoString(this.props.Login.masterData.fromDate, event, this.props.Login.userInfo)\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit: \"false\",\r\n                    fromDate: dateObj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    toDate: dateObj.toDate,//this.OnDateConverstion(event, fieldname),\r\n                    defaultRegistrationType: this.props.Login.masterData.defaultRegistrationType,\r\n                    defaultRegistrationSubType: this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA,\r\n                    defaultSampleType: this.props.Login.masterData.defaultSampleType,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA,\r\n                    ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.NA,\r\n                    //defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    // realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    // realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    // realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    // realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion,\r\n                    realFromDate:this.props.Login.masterData.realFromDate,\r\n                    realToDate:this.props.Login.masterData.realToDate\r\n                }\r\n                this.props.getBCApprovalConfigVersion(inputData)\r\n            }\r\n\r\n            // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate, \r\n            //                  this.props.Login.masterData.toDate, this.props.Login.userInfo); \r\n\r\n            if (fieldname === \"nsampletypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 2,\r\n                    needFilterSubmit: \"false\",\r\n                    nsampletypecode: parseInt(event.value),\r\n                    fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultSampleType: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    isneedrealFilterStatus: \"false\",\r\n                    // realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    // realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    //  realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    //realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\",\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion\r\n                }\r\n                this.props.getBCRegistrationType(inputData)\r\n            }\r\n            else if (fieldname === \"nregtypecode\") {\r\n\r\n                let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                    this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n\r\n                inputData = {\r\n                    nflag: 3,\r\n                    needFilterSubmit: \"false\",\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    fromDate: obj.fromDate,//(this.state.selectedRecord && this.state.selectedRecord[\"fromDate\"]) || this.props.Login.masterData.fromDate,\r\n                    toDate: obj.toDate,//(this.state.selectedRecord && this.state.selectedRecord[\"toDate\"]) || this.props.Login.masterData.toDate,\r\n                    nregtypecode: parseInt(event.value),\r\n                    userInfo: this.props.Login.userInfo,\r\n                    defaultRegistrationType: event.item,\r\n                    defaultSampleType: this.props.Login.masterData.defaultSampleType,\r\n                    isneedrealFilterStatus: \"false\",\r\n                    // realRegTypeValue : this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    // realRegSubTypeValue :this.props.Login.masterData.realRegSubTypeValue  ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    // realApproveConfigVersion : this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    // realdefaultFilterStatus  : this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus:\"NA\",\r\n                    realRegistrationTypeList: this.props.Login.masterData.realRegistrationTypeList,\r\n                    realRegistrationSubTypeList: this.props.Login.masterData.realRegistrationSubTypeList,\r\n                    realApprovalConfigVersionList: this.props.Login.masterData.realApprovalConfigVersionList,\r\n                    realBCFilterStatusList: this.props.Login.masterData.realBCFilterStatusList,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue,\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus,\r\n                    realApproveConfigVersion: this.props.Login.masterData.realApproveConfigVersion\r\n                }\r\n                this.props.getBCRegistrationSubType(inputData, this.props.Login.masterData)\r\n            }\r\n            else if (fieldname === \"nregsubtypecode\") {\r\n                const nregsubtypecode = this.state;\r\n                //this.setState({ nregsubtypecode:event });\r\n                this.getApprovalVersion(event);\r\n\r\n            }\r\n\r\n            else if (fieldname === 'ndesigntemplatemappingcode') {\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                const inputParamData = {\r\n                    nflag: 3,\r\n                    needFilterSubmit: \"false\",\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: this.props.Login.masterData.ApprovalConfigVersion[0].napprovalconfigversioncode,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    //defaultFilterStatus: event.item,\r\n                    defaultRegistrationSubType: this.props.Login.masterData.defaultRegistrationSubType,\r\n                    ntranscode: String(this.props.Login.masterData.defaultFilterStatus.ntransactionstatus),\r\n                    nneedsubsample: this.props.Login.masterData.nneedsubsample || 4,\r\n                    // stransactionstatus: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus === 0 ? this.props.Login.masterData.FilterStatus.map(item => item.ntransactionstatus).join(\",\") : this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                    //nsectioncode: this.props.Login.masterData.UserSectionValue.nsectioncode === -1 ? this.props.Login.masterData.UserSection.map(item => item.nsectioncode).join(\",\") : this.props.Login.masterData.UserSectionValue.nsectioncode,\r\n                    ndesigntemplatemappingcode: event.value,\r\n                    DesignTemplateMappingValue: event.item,\r\n                    isneedrealFilterStatus: \"false\",\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\r\n                }\r\n                //this.props.getREFilterTestData(inputParamData)\r\n                this.props.getBCFilterTemplate(inputParamData)\r\n\r\n            }\r\n\r\n            else if (fieldname === \"version\") {\r\n\r\n                // let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                //     this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                // inputData = {\r\n                //     nflag: 4,\r\n                //     fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                //     todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                //     nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                //     nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                //     nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                //     napprovalversioncode: event.value,\r\n                //     userinfo: this.props.Login.userInfo,\r\n                //     defaultApprovalConfigVersion: event.item,\r\n                //     masterData: this.props.Login.masterData,\r\n                //     ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : -1\r\n                // }\r\n                // this.props.getBCJobStatus(inputData)\r\n                const ApprovalVersionValue = this.state;\r\n                this.setState({ ApprovalVersionValue: event });\r\n            }\r\n            else if (fieldname === \"jobstatus\") {\r\n\r\n                let obj = convertDateValuetoString(this.props.Login.masterData.fromDate,\r\n                    this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n\r\n                inputData = {\r\n                    nflag: 5,\r\n                    needFilterSubmit: \"false\",\r\n                    fromdate: obj.fromDate,//this.props.Login.masterData.fromDate,\r\n                    todate: obj.toDate,//this.props.Login.masterData.toDate,\r\n                    nsampletypecode: parseInt(this.props.Login.masterData.defaultSampleType.nsampletypecode),\r\n                    nregtypecode: parseInt(this.props.Login.masterData.defaultRegistrationType.nregtypecode),\r\n                    nregsubtypecode: parseInt(this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode),\r\n                    napprovalversioncode: parseInt(this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode),\r\n                    njobstatuscode: event.value,\r\n                    userinfo: this.props.Login.userInfo,\r\n                    defaultjobstatus: event.item,\r\n                    masterData: this.props.Login.masterData,\r\n                    realRegTypeValue: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : \"NA\",\r\n                    realRegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : \"NA\",\r\n                    realApproveConfigVersion: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n                    realdefaultFilterStatus: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus : \"NA\"\r\n                }\r\n                this.props.getBCFilterStatus(inputData)\r\n            }\r\n            else if (fieldname === \"filter\") {\r\n                const FilterStatusValue = this.state;\r\n                this.setState({ FilterStatusValue: event });\r\n\r\n            }\r\n            else if (fieldname === \"test\") {\r\n\r\n                const FilterStatusValue = this.state;\r\n                this.setState({ FilterStatusValue: event });\r\n            } else {\r\n                const selectedRecord = this.state;\r\n                this.setState({ selectedRecord: event });\r\n            }\r\n        }\r\n    }\r\n\r\n    handleFilterDateChange = (dateValue, dateName) => {\r\n        const { selectedFilter } = this.state;\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedFilter[dateName] = dateValue;\r\n        this.setState({ selectedFilter });\r\n\r\n    }\r\n\r\n    // headerSelectionChange = (event) => {\r\n    //     const checked = event.syntheticEvent.target.checked;\r\n    //     let addedComponentList = this.state.addedComponentList || [];\r\n    //     if (checked) {\r\n    //         const data = this.state.addComponentDataList.map(item => {\r\n    //             if (addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n    //                 addedComponentList.push({ ...item, selected: false });\r\n    //                 item.selected = checked;\r\n    //                 return item;\r\n    //             } else {\r\n    //                 let olditem = JSON.parse(JSON.stringify(addedComponentList[addedComponentList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n    //                 olditem.selected = checked;\r\n    //                 return olditem;\r\n    //             }\r\n\r\n    //         });\r\n\r\n\r\n    //         this.setState({\r\n    //             addComponentDataList: data, addedComponentList,\r\n    //             addSelectAll: checked, deleteSelectAll: false\r\n    //         });\r\n    //     }\r\n    //     else {\r\n    //         let addedComponentData = this.state.addedComponentList || [];\r\n    //         let deletedListdData = this.state.deletedList || [];\r\n\r\n    //         const data = this.state.addComponentDataList.map(item => {\r\n    //             addedComponentData = addedComponentData.filter(item1 => item1.npreregno !== item.npreregno);\r\n    //             deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n    //             item.selected = checked;\r\n    //             return item;\r\n    //         });\r\n\r\n    //         // console.log(\"data:\",data1, data2);\r\n    //         this.setState({\r\n    //             addComponentDataList: data, addedComponentList: addedComponentData, deletedList: deletedListdData,\r\n    //             addSelectAll: checked, deleteSelectAll: false\r\n    //         });\r\n    //     }\r\n    // }\r\n\r\n\r\n    valiateCheckAll(data) {\r\n        let selectAll = true;\r\n        // let checkRepeatComponent;\r\n        //  let addedComponentList = this.state.addedComponentList || [];\r\n        if (data && data.length > 0) {\r\n            data.forEach(dataItem => {\r\n                if (dataItem.selected) {\r\n                    if (dataItem.selected === false) {\r\n                        selectAll = false;\r\n                    }\r\n                }\r\n                else {\r\n                    selectAll = false;\r\n                    // checkRepeatComponent=this.state.addComponentDataList.filter(item=>item.npreregno==data.npreregno)\r\n                    // if(checkRepeatComponent.length>0){\r\n                    //     selectAll = true;\r\n                    // }else{\r\n                    //     selectAll = false;\r\n                    // }\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            //if (gridType === \"originalgrid\"){\r\n            selectAll = false;\r\n            // }\r\n        }\r\n        return selectAll;\r\n    }\r\n\r\n\r\n\r\n    headerSelectionChange = (event) => {\r\n        let checked = event.syntheticEvent.target.checked;\r\n        let sampleList = this.state.samples || [];\r\n        let addedSamplesList = [];\r\n        checked = checked == false && this.state.samples.length > 0 ? false : this.state.samples.length == 0 ? false : true\r\n        if (checked) {\r\n            //const data = event.dataItems.map(item => {\r\n            const data = event.target.props.data.map(item => {\r\n                if (sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode) === -1) {\r\n                    sampleList.push({ ...item, selected: false });\r\n                    item.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"] = {};\r\n                    newItem[\"jsonuidata\"] = {};\r\n                    newItem[\"jsondata\"]['samplelist'] = item\r\n                    newItem[\"jsonuidata\"]['samplelist'] = item\r\n                    addedSamplesList.push(newItem);\r\n                    return item;\r\n                } else {\r\n                    let olditem = JSON.parse(JSON.stringify(sampleList[sampleList.findIndex(x => x.ntransactiontestcode === item.ntransactiontestcode)]))\r\n                    olditem.selected = checked;\r\n                    let newItem = JSON.parse(JSON.stringify(olditem));\r\n                    newItem.selected = false;\r\n                    newItem[\"jsondata\"] = {};\r\n                    newItem[\"jsonuidata\"] = {};\r\n                    newItem[\"jsondata\"]['samplelist'] = olditem\r\n                    newItem[\"jsonuidata\"]['samplelist'] = olditem\r\n                    addedSamplesList.push(newItem);\r\n                    return olditem;\r\n\r\n                }\r\n\r\n            });\r\n\r\n\r\n            this.setState({\r\n                samples: data,\r\n                addedSamplesList: addedSamplesList,\r\n                sampleList,\r\n                addSelectAll: checked,\r\n                deleteSelectAll: false\r\n            });\r\n        }\r\n        else {\r\n            // let sampleListData = this.state.sampleList || [];\r\n            // let deletedListdData = this.state.sampleList || [];\r\n\r\n            let sampleListData = this.state.samples || [];\r\n            let deletedListdData = this.state.samples || [];\r\n\r\n            const data = this.state.samples.map(item => {\r\n                sampleListData = sampleListData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                deletedListdData = deletedListdData.filter(item1 => item1.npreregno !== item.npreregno);\r\n                item.selected = checked;\r\n                return item;\r\n            });\r\n\r\n            // console.log(\"data:\",data1, data2);\r\n            this.setState({\r\n                samples: data,\r\n                addedSamplesList: sampleListData,\r\n                deletedList: deletedListdData,\r\n                addSelectAll: checked,\r\n                deleteSelectAll: false\r\n            });\r\n        }\r\n\r\n        // const data = this.state.addComponentDataList.map(item=>{\r\n        //     if (checked){\r\n        //         addedComponentList.push({...item, selected:false});\r\n        //     }\r\n        //     else{\r\n        //         data1 = data1.filter(item1=>item1.npreregno !== item.npreregno);\r\n        //         data2 = data2.filter(item1=>item1.npreregno !== item.npreregno);      \r\n        //     }  \r\n        //     item.selected = checked;\r\n        //     return item;\r\n        // });\r\n\r\n    }\r\n\r\n    onTreeClick = (event) => {\r\n        const inputParam = {\r\n            methodUrl: \"TestGroupSpecification\",\r\n            screenName: \"IDS_REGISTRATION\",\r\n            operation: \"get\",\r\n            activeKey: event.key,\r\n            focusKey: event.key,\r\n            keyName: \"treetemplatemanipulation\",\r\n            userinfo: this.props.Login.userInfo,\r\n            selectedNode: event.item,\r\n            selectedRecord: this.state.selectedRecord,\r\n\r\n            primaryKey: event.primaryKey\r\n        };\r\n        if (event.primaryKey !== this.state.selectedRecord[\"ntemplatemanipulationcode\"]) {\r\n            this.props.getNewRegSpecification(inputParam, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n\r\n    selectionChange = (event) => {\r\n        let addedSamplesList = this.state.addedSamplesList || [];\r\n        //let addedSamplesList= [];\r\n        let samples = this.state.samples || [];\r\n        const samplesList = this.state.samples.map(item => {\r\n            if (item.ntransactiontestcode === event.dataItem.ntransactiontestcode) {\r\n               item.selected = !event.dataItem.selected;\r\n              //  item={...item,\"selected\":!event.dataItem.selected};\r\n                if (item.selected) {\r\n                    const newItem = JSON.parse(JSON.stringify(item));\r\n                    //newItem.selected = false;\r\n                    delete newItem['selected']\r\n                    newItem[\"jsondata\"] = {};\r\n                    newItem[\"jsonuidata\"] = {};\r\n                    newItem[\"jsondata\"]['samplelist'] = item\r\n                    newItem[\"jsonuidata\"]['samplelist'] = item\r\n                    addedSamplesList.push(newItem);\r\n                }\r\n                else {\r\n                    // if(addedSamplesList.length === 0){\r\n                    addedSamplesList = addedSamplesList.filter(item1 => item1.ntransactiontestcode !== item.ntransactiontestcode)\r\n                    //   }else{\r\n                    //     this.state.samples.map((item1,index) => { \r\n                    //         if(item1.ntransactiontestcode == event.dataItem.ntransactiontestcode){\r\n                    //             if(this.state.samples.length == 1){\r\n                    //                 addedSamplesList=[];\r\n                    //             }else{\r\n                    //                 const newItem = JSON.parse(JSON.stringify(item1));\r\n                    //                 newItem.selected = false;\r\n                    //                 newItem[\"jsondata\"]={};\r\n                    //                 newItem[\"jsonuidata\"]={};\r\n                    //                 newItem[\"jsondata\"]['samplelist'] = item1\r\n                    //                 newItem[\"jsonuidata\"]['samplelist'] = item1\r\n                    //                 //addedSamplesList.push(newItem);\r\n                    //                 addedSamplesList = item1;\r\n                    //             }  \r\n                    //         }\r\n                    //     } \r\n                    //   )\r\n                }\r\n            }\r\n            return item;\r\n        });\r\n        ///samplesList = addedSamplesList;\r\n        this.setState({\r\n            samplesList,\r\n            addedSamplesList,\r\n            samples,\r\n            initialList: addedSamplesList,\r\n            addSelectAll: this.valiateCheckAll(samplesList),\r\n            deleteSelectAll: this.valiateCheckAll(samplesList)\r\n        });\r\n    }\r\n\r\n    handleSaveClick = (saveType) => {\r\n        const failedControls = [];\r\n        const startLabel = [];\r\n        let label = \"IDS_ENTER\";\r\n        let mandatoryFields = [];\r\n        let selectedRecord = this.state.selectedRecord;\r\n        console.log(\"handle save:\", selectedRecord);\r\n        mandatoryFields = [\r\n            { \"idsName\": \"IDS_SPECIFICATION\", \"dataField\": \"nallottedspeccode\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"combo\" },\r\n        ]\r\n        let selectedSpec = this.props.Login.selectedSpec;\r\n\r\n        if (selectedRecord && selectedRecord.nallottedspeccode !== \"\") {\r\n            selectedSpec[\"nallottedspeccode\"] = this.state.selectedRecord[\"nallottedspeccode\"];\r\n            selectedSpec[\"sversion\"] = this.state.selectedRecord[\"sversion\"];\r\n            selectedSpec[\"ntemplatemanipulationcode\"] = this.state.selectedRecord[\"ntemplatemanipulationcode\"];\r\n\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {\r\n                    loadSpec: false,\r\n                    selectedSpec,\r\n                    openModal: true,\r\n                    openSpecModal: false\r\n                }\r\n            }\r\n            this.props.updateStore(updateInfo);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_SELECTSPECIFICATION\" }));\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        let reportActionList = [];\r\n        let batchMandatoryFields = [];\r\n        //commenting as its done in below code by rukshana\r\n        // if (this.props.Login.operation === \"update\") {\r\n        //     batchMandatoryFields.push(\r\n\r\n        //         { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\r\n        //     );\r\n\r\n        // }\r\n        // else {\r\n        //     batchMandatoryFields.push(\r\n        //         { idsName: \"IDS_SECTION\", dataField: \"ssectionname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_TEST\", dataField: \"stestname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENTCATEGORY\", dataField: \"sinstrumentcatname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENT\", dataField: \"sinstrumentname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_INSTRUMENTID\", dataField: \"sinstrumentid\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" },\r\n        //         { idsName: \"IDS_PRODUCT\", dataField: \"sproductname\", mandatoryLabel: \"IDS_SELECT\", controlType: \"selectbox\" }\r\n        //     );\r\n        // }\r\n        //let mandatoryFields =[];\r\n        if (this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\") {\r\n            let { selectedRecord } = this.state;\r\n            batchMandatoryFields.push(\r\n                { \"idsName\": \"IDS_SECTION\", \"dataField\": \"ssectionname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_TEST\", \"dataField\": \"stestname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                //{ \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                // { \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"sinstrumentname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                // { \"idsName\": \"IDS_INSTRUMENTID\", \"dataField\": \"sinstrumentid\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                { \"idsName\": \"IDS_PRODUCT\", \"dataField\": \"sproductname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n            );\r\n\r\n            if (selectedRecord && selectedRecord.sinstrumentcatname !== undefined && selectedRecord.ninstrumentcatcode > 0) {\r\n                batchMandatoryFields.push(\r\n                    // { \"idsName\": \"IDS_INSTRUMENTCATEGORY\", \"dataField\": \"sinstrumentcatname\", \"mandatoryLabel\":\"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_INSTRUMENT\", \"dataField\": \"sinstrumentname\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                    { \"idsName\": \"IDS_INSTRUMENTID\", \"dataField\": \"sinstrumentid\", \"mandatoryLabel\": \"IDS_SELECT\", \"controlType\": \"selectbox\" },\r\n                )\r\n            }\r\n        }\r\n        const getBatch = {\r\n            screenName: \"IDS_BATCHCREATION\",\r\n            operation: \"get\",\r\n            masterData: this.props.Login.masterData,\r\n            userInfo: this.props.Login.userInfo, methodUrl: \"Batchcreation\", keyName: \"batchcreation\"\r\n        };\r\n        this.fromDate = (this.state.selectedFilter[\"fromdate\"] && this.state.selectedFilter[\"fromdate\"]) || this.props.Login.masterData && this.props.Login.masterData.fromDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.fromDate) : undefined;\r\n        this.toDate = (this.state.selectedFilter[\"todate\"] && this.state.selectedFilter[\"todate\"]) || this.props.Login.masterData && this.props.Login.masterData.toDate ? rearrangeDateFormat(this.props.Login.userInfo, this.props.Login.masterData.toDate) : undefined;\r\n        const addId = this.state.controlMap.has(\"AddBatchCreation\") && this.state.controlMap.get(\"AddBatchCreation\").ncontrolcode;\r\n        const editId = this.state.controlMap.has(\"EditBatchcreation\") && this.state.controlMap.get(\"EditBatchcreation\").ncontrolcode;\r\n        const deleteId = this.state.controlMap.has(\"DeleteBatchcreation\") && this.state.controlMap.get(\"DeleteBatchcreation\").ncontrolcode;\r\n        const testStartId = this.state.controlMap.has(\"BatchInitiate\") && this.state.controlMap.get(\"BatchInitiate\").ncontrolcode;\r\n        const completeId = this.state.controlMap.has(\"BatchComplete\") && this.state.controlMap.get(\"BatchComplete\").ncontrolcode;\r\n        const cancelId = this.state.controlMap.has(\"CancelBatch\") && this.state.controlMap.get(\"CancelBatch\").ncontrolcode;\r\n        const elnSheetId = this.state.controlMap.has(\"ELNSheet\") && this.state.controlMap.get(\"ELNSheet\").ncontrolcode;\r\n\r\n        const addParam = {\r\n            screenName: \"IDS_BATCHCREATION\",\r\n            primaryeyField: \"nreleasebatchcode\",\r\n            primaryKeyValue: undefined,\r\n            operation: \"create\",\r\n            //inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: addId,\r\n            nneedtestinitiate: this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate,\r\n            masterData: this.props.Login.masterData,\r\n            fromdate: this.props.Login.masterData.fromDate,\r\n            todate: this.props.Login.masterData.toDate,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA,\r\n            napprovalconfigcode: this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA,\r\n            ntranscode: this.props.Login.masterData.realdefaultFilterStatus ? this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus : transactionStatus.NA,\r\n            ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n        };\r\n\r\n        const viewInfoFields = [];\r\n\r\n        viewInfoFields.push(\r\n            { \"fieldName\": \"sbatcharno\", \"label\": \"IDS_BATCHARNO\" },\r\n            { \"fieldName\": \"ssectionname\", \"label\": \"IDS_SECTION\" },\r\n            { \"fieldName\": \"stestname\", \"label\": \"IDS_TESTNAME\" },\r\n            { \"fieldName\": \"sinstrumentcatname\", \"label\": \"IDS_INSTRUMENTCATEGORY\" },\r\n            { \"fieldName\": \"sinstrumentid\", \"label\": \"IDS_INSTRUMENTID\" },\r\n            { \"fieldName\": \"sinstrumentname\", \"label\": \"IDS_INSTRUMENTNAME\" },\r\n            { \"fieldName\": \"sproductname\", \"label\": \"IDS_SAMPLETYPE\" },\r\n            { \"fieldName\": \"stransdisplaystatus\", \"label\": \"IDS_STATUS\" },\r\n            {\r\n                \"fieldName\": \"username\", \"label\":\r\n                    this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.INITIATED ? \"IDS_BATCHINITIATEDBY\" :\r\n                        this.props.Login.masterData.SelectedBatchmaster && this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED ? \"IDS_BATCHCOMPLETEDBY\"\r\n                            : \"IDS_BATCHCREATEDBY\"\r\n            }\r\n        );\r\n\r\n        if (this.props.Login.masterData.realSampleTypeValue &&\r\n            this.props.Login.masterData.realSampleTypeValue.nsampletypecode === SampleType.PROJECTSAMPLETYPE) {\r\n            viewInfoFields.push(\r\n                { \"fieldName\": \"sprojectcode\", \"label\": \"IDS_PROJECTCODE\" },\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        let stransactionstatuscode = this.props.Login.masterData.SelectedFilterStatus ? String(this.props.Login.masterData.SelectedFilterStatus.ntransactionstatus) : null;\r\n\r\n        if (this.state.selectedRecord && this.state.selectedRecord[\"nfiltertransstatus\"] !== undefined) {\r\n            stransactionstatuscode = this.state.selectedRecord[\"nfiltertransstatus\"].value === String(0) ? null : String(this.state.selectedRecord[\"nfiltertransstatus\"].value);\r\n        }\r\n\r\n\r\n        let obj = convertDateValuetoString(this.props.Login.masterData.realFromDate, this.props.Login.masterData.realToDate,\r\n            this.props.Login.userInfo);\r\n\r\n        const editParam = {\r\n            screenName: \"IDS_BATCHCREATION\",\r\n            operation: \"update\",\r\n            primaryKeyField: \"nbatchmastercode\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: editId,\r\n            masterData: this.props.Login.masterData,\r\n            naddcontrolCode: addId,\r\n            nprojectmastercode: this.props.Login.masterData.selectedTestSynonym && this.props.Login.masterData.selectedTestSynonym.nprojectmastercode,\r\n            nsampletypecode: this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA,\r\n            nregtypecode: this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ?\r\n                this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA,\r\n            nregsubtypecode: this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA\r\n        };\r\n\r\n\r\n        const filterParam = {\r\n            inputListName: \"Batchmaster\",\r\n            selectedObject: \"SelectedBatchmaster\",\r\n            primaryKeyField: \"nbatchmastercode\",\r\n            fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\r\n\r\n            fecthInputObject: {\r\n                fromDate: obj.fromDate,\r\n                toDate: obj.toDate,\r\n                userInfo: this.props.Login.userInfo,\r\n                ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode,\r\n                napprovalconfigcode: this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA,\r\n                ntranscode: this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT,\r\n                nsampletypecode: this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA,\r\n                //fromDate, toDate, \r\n                //stransactionstatuscode,\r\n                //activeBCTab: this.props.Login.activeBCTab || \"IDS_COMPONENT\"\r\n            },\r\n            masterData: this.props.Login.masterData,\r\n            //unchangeList: [\"FromDate\", \"ToDate\", \"SelectedFilterStatus\"],\r\n            searchFieldList: this.searchFieldList\r\n        }\r\n\r\n        this.breadCrumbData = [\r\n            {\r\n                \"label\": \"IDS_FROM\",\r\n                \"value\": obj.breadCrumbFrom\r\n            }, {\r\n                \"label\": \"IDS_TO\",\r\n                \"value\": obj.breadCrumbto\r\n            },\r\n            // {\r\n            //     \"label\": \"IDS_SAMPLETYPE\",\r\n            //     \"value\": this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.ssampletypename ? this.props.Login.masterData.realSampleTypeValue.ssampletypename : \"Product\"\r\n            // }, \r\n            {\r\n                \"label\": \"IDS_REGISTRATIONTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.sregtypename ? this.props.Login.masterData.realRegTypeValue.sregtypename : \"NA\"\r\n                // \"value\": this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.sregtypename || \"NA\" :\r\n                // this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.sregtypename || \"NA\" : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_REGISTRATIONSUBTYPE\",\r\n                \"value\": this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.sregsubtypename : \"NA\"\r\n            },\r\n            {\r\n                \"label\": \"IDS_BATCHSTATUS\",\r\n                \"value\": this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus ? this.props.Login.masterData.realdefaultFilterStatus.sfilterstatus : \"NA\"\r\n            }\r\n            // {\r\n            //     \"label\": \"IDS_CONFIGVERSION\",\r\n            //     \"value\": this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.sversionname ? this.props.Login.masterData.realApproveConfigVersion.sversionname : \"NA\"\r\n            // }\r\n        ]\r\n\r\n        return (\r\n            <>\r\n                {/* Start of get display*/}\r\n                {/* <div className=\"client-listing-wrap mtop-4 mtop-fixed-breadcrumb\"> */}\r\n                {/* <ListWrapper className=\"client-listing-wrap mtop-4 screen-height-window\"> */}\r\n                {/* <ListWrapper className=\"client-listing-wrap toolbar-top-wrap mtop-4 screen-height-window\"> */}\r\n                {/* <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd\"> */}\r\n                {/* //</><div className=\"client-listing-wrap mtop-4\"> */}\r\n                <div className=\"client-listing-wrap mtop-fixed-breadcrumb fixed_breadcrumd \">\r\n                    <Affix top={53}>\r\n                        <BreadcrumbComponent breadCrumbItem={this.breadCrumbData} />\r\n                    </Affix>\r\n\r\n                    <Row noGutters={true}>\r\n                        <Col md={`${!this.props.sidebarview ? '4' : \"2\"}`}> \r\n                            <ListMaster\r\n                                masterList={this.props.Login.masterData.searchedData || (this.props.Login.masterData.Batchmaster || [])}\r\n                                selectedMaster={this.props.Login.masterData.SelectedBatchmaster}\r\n                                primaryKeyField=\"nbatchmastercode\"\r\n                                userInfo={this.props.Login.userInfo}\r\n                                masterData={this.props.Login.masterData}\r\n                                //getMasterDetail={this.props.getSelectedBatchCreationDetail}\r\n                                getMasterDetail={(batch) => this.props.getSelectedBatchCreationDetail(batch, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                inputParam={getBatch}\r\n                                screenName={this.props.intl.formatMessage({ id: \"IDS_BATCHCREATION\" })}\r\n                                //mainField=\"stestname\"\r\n                                mainField=\"sbatcharno\"\r\n                                firstField=\"stestname\"\r\n                                secondField=\"sinstrumentname\"\r\n                                selectedListName=\"SelectedBatchmaster\"\r\n                                objectName=\"BatchCreation\"\r\n                                listName=\"IDS_BATCHCREATION\"\r\n                                needValidation={false}\r\n                                hidePaging={false}\r\n                                // subFields={\r\n                                //     [\r\n                                //         { [designProperties.VALUE]: \"sinstrumentcatname\" },\r\n                                //         { [designProperties.VALUE]: \"sinstrumentname\" },\r\n                                //         // { [designProperties.VALUE]: \"smahname\" },\r\n                                //         // { [designProperties.VALUE]: \"stransactionstatus\", [designProperties.COLOUR]: \"transstatuscolor\" }\r\n                                //     ]\r\n                                // }\r\n                                needFilter={true}\r\n                                needMultiSelect={false}\r\n                                subFieldsLabel={true}\r\n                                openFilter={this.openFilter}\r\n                                closeFilter={this.closeFilter}\r\n                                onFilterSubmit={this.onFilterSubmit}\r\n                                filterColumnData={this.props.filterColumnData}\r\n                                searchListName=\"searchedData\"\r\n                                searchRef={this.searchRef}\r\n                                filterParam={filterParam}\r\n                                isClearSearch={this.props.Login.isClearSearch}\r\n                                // skip={this.state.skip}\r\n                                // take={this.state.take}\r\n                                // handlePageChange={this.handlePageChange}\r\n                                addId={addId}\r\n                                showFilterIcon={true}\r\n                                userRoleControlRights={this.state.userRoleControlRights}\r\n                                reloadData={this.reloadData}\r\n                                openModal={() => this.createBatchValidation(addParam)}\r\n                                callCloseFunction={true}\r\n                                // openModal={() => this.props.getTestInstrumentComboService(addParam)}\r\n                                commonActions={\r\n                                    // <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}>\r\n                                    <ProductList className=\"d-flex product-category float-right\">\r\n                                        {/* <ReactTooltip place=\"bottom\" globalEventOff='click' /> */}\r\n                                        <Button className=\"btn btn-icon-rounded btn-circle solid-blue\" role=\"button\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_ADD\" })}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                            hidden={this.state.userRoleControlRights.indexOf(addId) === -1}\r\n                                            onClick={() => this.props.getTestInstrumentComboService(addParam)}\r\n                                        // onClick={() => this.createBatchValidation(addParam)}\r\n                                        >\r\n                                            <FontAwesomeIcon icon={faPlus} />\r\n                                        </Button>\r\n                                        <Button className=\"btn btn-circle outline-grey ml-2 p-0\" variant=\"link\"\r\n                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_REFRESH\" })}\r\n                                            data-for=\"tooltip-common-wrap\"\r\n                                        //onClick={() => this.reloadData(false)} \r\n                                        >\r\n                                            <RefreshIcon className='custom_icons'/>\r\n                                        </Button>\r\n\r\n                                    </ProductList>\r\n                                    // </Tooltip>\r\n                                }\r\n                                filterComponent={[\r\n                                    {\r\n                                        \"IDS_FILTER\": <BatchCreationFilter\r\n                                            fromDate={this.state.selectedFilter[\"fromDate\"] != undefined ?\r\n                                                rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate}\r\n                                            toDate={this.state.selectedFilter[\"toDate\"] != undefined ?\r\n                                                rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate}\r\n                                            SampleType={this.state.SampleType || []}\r\n                                            SampleTypeValue={this.props.Login.masterData.defaultSampleType || []}\r\n                                            RegType={this.state.RegistrationType || []}\r\n                                            RegTypeValue={this.props.Login.masterData.defaultRegistrationType || []}\r\n                                            RegSubType={this.state.RegistrationSubType || []}\r\n                                            RegSubTypeValue={this.state.nregsubtypecode || []}\r\n                                            DesignTemplateMappingValue={this.props.Login.masterData.DesignTemplateMappingValue || []}\r\n                                            FilterStatus={this.state.BCFilterStatus || []}\r\n                                            FilterStatusValue={this.state.FilterStatusValue || []}\r\n                                            ApprovalVersion={this.state.ApprovalConfigVersion || []}\r\n                                            ApprovalVersionValue={this.state.ApprovalVersionValue || []}\r\n                                            REJobStatus={this.state.REJobStatus || []}\r\n                                            JobStatusValue={this.props.Login.masterData.defaultjobstatus || []}\r\n                                            Test={this.state.Testvalues || []}\r\n                                            TestValue={this.props.Login.masterData.selectedTestSynonym || []}\r\n                                            onFilterComboChange={this.onFilterComboChange}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            handleFilterDateChange={this.handleFilterDateChange}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            onDesignTemplateChange={this.onDesignTemplateChange}\r\n                                            DynamicDesignMapping={this.state.stateDynamicDesign || []}\r\n                                        />\r\n                                    }\r\n                                ]}\r\n                            />\r\n                        </Col>\r\n                        <Col md={`${!this.props.sidebarview ? '8' : \"10\"}`} className=\"position-relative\">\r\n                            <div className=\"sidebar-view-btn-block\">\r\n                                <div className=\"sidebar-view-btn \" onClick={this.props.parentFunction}>\r\n                                    {!this.props.sidebarview ?                    \r\n                                        <i class=\"fa fa-less-than\"></i> :\r\n                                        <i class=\"fa fa-greater-than\"></i> \r\n                                    }\r\n                                </div>\r\n                            </div> \r\n                            {/* <Row> */}\r\n                            {/* <Col md={12}> */}\r\n                            <ContentPanel className=\"panel-main-content\">\r\n                                <Card className=\"border-0\">\r\n                                    {this.props.Login.masterData.Batchmaster && this.props.Login.masterData.Batchmaster.length > 0\r\n                                        && this.props.Login.masterData.SelectedBatchmaster ?\r\n                                        <>\r\n                                            <Card.Header>\r\n                                                <Card.Title className=\"product-title-main\">\r\n                                                    {this.props.Login.masterData.SelectedBatchmaster.sbatcharno}\r\n                                                </Card.Title>\r\n                                                <Card.Subtitle>\r\n                                                    <div className=\"d-flex product-category\">\r\n                                                        <h2 className=\"product-title-sub flex-grow-1\">\r\n                                                            {\r\n                                                                this.props.Login.masterData.SelectedBatchTestTAT && this.props.Login.masterData.SelectedBatchTestTAT.Deviation && this.props.intl.formatMessage({ id: \"IDS_DEVIATION\" }) + \" : \" + this.props.Login.masterData.SelectedBatchTestTAT.Deviation\r\n                                                            }\r\n\r\n                                                            <MediaLabel className={`btn btn-outlined ${this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED ? \"outline-initiate\"\r\n                                                                : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ? \"outline-success\"\r\n                                                                    : this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED ? \"outline-danger\"\r\n                                                                        : \"outline-secondary\"} btn-sm ml-3`}>\r\n                                                                {this.props.Login.masterData.SelectedBatchmaster.stransdisplaystatus}\r\n                                                            </MediaLabel>\r\n                                                        </h2>\r\n                                                        {/* <Tooltip position=\"bottom\" anchorElement=\"target\" openDelay={100} parentTitle={true}> */}\r\n                                                        <div className=\"d-inline\">\r\n\r\n                                                            {/* <Nav.Link name=\"view\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                            data-tip={this.props.intl.formatMessage({ id: \"IDS_BATCHTAT\" })}\r\n                                                                            // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\r\n                                                                            onClick={() => this.props.batchTAT(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.userInfo,this.props.Login.masterData)}\r\n                                                                            >\r\n                                                                            <FontAwesomeIcon icon={faEye} />\r\n                                                                        </Nav.Link>      */}\r\n\r\n                                                            <Nav.Link name=\"openelnsheet\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(elnSheetId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_OPENELNSHEET\" })}\r\n                                                            //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \r\n                                                            >\r\n                                                                <Image src={elnimage} alt=\"filer-icon action-icons-wrap\"\r\n                                                                    width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                    onClick={() => this.openClosePortal(this.props.Login.masterData.SelectedBatchmaster, cancelId)}\r\n                                                                    data-place=\"left\"\r\n                                                                />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"view\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_VIEWINFO\" })}\r\n                                                                // hidden={this.props.userRoleControlRights.indexOf(this.props.viewVersionId) === -1}\r\n                                                                onClick={() => this.props.viewInfo(this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode, this.props.Login.userInfo, this.props.Login.masterData)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faEye} />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"editBatchCreation\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(editId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_EDIT\" })}\r\n                                                                onClick={() => this.fetchEditData(editParam)}\r\n                                                            // onClick={() => this.props.getActiveBatchCreationService(editParam,\r\n                                                            //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,this.props.Login.masterData.SelectedBatchmaster.ntestcode)}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faPencilAlt}\r\n                                                                //  title={this.props.intl.formatMessage({ id: \"IDS_EDITBATCH\" })}\r\n                                                                />\r\n                                                            </Nav.Link>\r\n                                                            {\r\n                                                                // this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate == true ?\r\n                                                                <Nav.Link name=\"initiateBatchCreation\"                                                        //  data-for=\"tooltip-common-wrap\" \r\n                                                                    data-tip={this.props.intl.formatMessage({ id: \"IDS_BATCHINITIATE\" })}\r\n                                                                    hidden={this.state.userRoleControlRights.indexOf(testStartId) === -1}\r\n                                                                    className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                    //role=\"button\"\r\n                                                                    onClick={() => this.testPopUpStartActions(testStartId)}\r\n                                                                >\r\n                                                                    <FontAwesomeIcon icon={faPlay}\r\n                                                                    />\r\n                                                                    {/* </FontIconWrap>  */}\r\n                                                                </Nav.Link>\r\n                                                                // :\"\"\r\n                                                            }\r\n\r\n                                                            <Nav.Link name=\"completeBatchCreation\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(completeId) === -1}\r\n                                                                className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_COMPLETE\" })}\r\n                                                                onClick={() => this.completePopUpStartActions(completeId)}\r\n                                                            //onClick={() => this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster,completeId)}\r\n                                                            // onClick={() => this.props.validateBatchComplete({\r\n                                                            //     masterData: this.props.Login.masterData,\r\n                                                            //     userInfo: this.props.Login.userInfo,\r\n                                                            //     userRoleControlRights: this.props.Login.userRoleControlRights,\r\n                                                            //     ncontrolCode: completeId,\r\n                                                            //     nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\r\n                                                            // })}\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faCheckCircle}\r\n                                                                // title={this.props.intl.formatMessage({ id: \"IDS_COMPLETEBATCH\" })}\r\n                                                                />\r\n                                                            </Nav.Link>\r\n\r\n                                                            <Nav.Link name=\"deleteBatchCreation\" className=\"btn btn-circle outline-grey mr-2\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(deleteId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_DELETE\" })}\r\n                                                                onClick={() => this.ConfirmDelete(this.props.Login.masterData.SelectedBatchmaster, deleteId, \"delete\")}\r\n\r\n                                                            >\r\n                                                                <FontAwesomeIcon icon={faTrashAlt} />\r\n                                                            </Nav.Link>\r\n\r\n\r\n                                                            <Nav.Link name=\"deleteBatchCreation\" className=\"btn btn-circle outline-grey mr-2 action-icons-wrap\"\r\n                                                                hidden={this.state.userRoleControlRights.indexOf(cancelId) === -1}\r\n                                                                data-tip={this.props.intl.formatMessage({ id: \"IDS_CANCEL\" })}\r\n                                                            //onClick={() => this.ConfirmDelete( this.props.Login.masterData.SelectedBatchmaster,deleteId,\"delete\")}                                \r\n                                                            >\r\n                                                                <Image src={reject} alt=\"filer-icon action-icons-wrap\"\r\n                                                                    width=\"20\" height=\"20\" className=\"ActionIconColor img-normalize\"\r\n                                                                    onClick={() => this.cancelBatch(this.props.Login.masterData.SelectedBatchmaster, cancelId)}\r\n                                                                    data-place=\"left\"\r\n                                                                />\r\n                                                            </Nav.Link>\r\n\r\n                                                            {reportActionList.length > 0 ?\r\n                                                                <CustomPopover\r\n                                                                    nav={true}\r\n                                                                    data={reportActionList}\r\n                                                                    Button={true}\r\n                                                                    hideIcon={true}\r\n                                                                    btnClasses=\"btn-circle btn_grey ml-2\"\r\n                                                                    textKey=\"value\"\r\n                                                                    dynamicButton={(value) => this.reportMethod(value)}\r\n                                                                    userRoleControlRights={this.state.userRoleControlRights}\r\n                                                                />\r\n                                                                :\r\n                                                                \"\"}\r\n\r\n                                                        </div>\r\n                                                        {/* </Tooltip> */}\r\n                                                    </div>\r\n\r\n                                                </Card.Subtitle>\r\n                                            </Card.Header>\r\n                                            <Card.Body>\r\n                                                <Row className=\"no-gutters\">\r\n                                                    <Col md={12}>\r\n                                                        <Card className=\"at-tabs\">\r\n                                                            <CustomTab\r\n                                                                activeKey={this.props.Login.batchactiveKey ? this.props.Login.batchactiveKey : \"IDS_SAMPLE\"}\r\n                                                                tabDetail={this.tabDetail()} onTabChange={this.onTabChange}\r\n                                                            />\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                {/* <CustomTab \r\n                                                            activeKey={this.props.Login.activeKey ? this.props.Login.activeKey : \"IDS_SAMPLE\"}\r\n                                                            tabDetail={this.tabDetail()} onTabChange={this.onTabChange} /> */}\r\n                                            </Card.Body>\r\n                                        </>\r\n                                        : \"\"\r\n                                    }\r\n                                </Card>\r\n                            </ContentPanel>\r\n                            {/* </Col> */}\r\n                            {/* </Row> */}\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n\r\n                <PortalModal>\r\n                    <div>\r\n                        <Modal\r\n                            centered\r\n                            scrollable\r\n                            bsPrefix=\"model model_zindex\"\r\n                            show={this.props.Login.openELNSheet}\r\n                            // show={this.state.openELNSheet}\r\n                            onHide={this.openClosePortal}\r\n                            dialogClassName={`${this.props.nflag && this.props.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                            backdrop=\"static\"\r\n                            keyboard={false}\r\n                            enforceFocus={false}\r\n                            aria-labelledby=\"example-custom-modal-styling-title\"\r\n                        >\r\n                            <Modal.Header closeButton>\r\n                                <Modal.Title style={{ \"line-height\": \"1.0\" }} id=\"example-custom-modal-styling-title\">\r\n                                    {this.props.intl.formatMessage({ id: \"IDS_ELNSHEET\" })}\r\n                                </Modal.Title>\r\n                                <ReactTooltip globalEventOff=\"true\" />\r\n\r\n                            </Modal.Header>\r\n                            <Modal.Body>\r\n                                <div className=\"modal-inner-content\">\r\n                                    {/* <Iframe url={this.state.enlLink} */}\r\n                                    <Iframe\r\n                                        // url={\"http://agl69:8080/QuaLISWeb/#/login\"}\r\n                                        url={this.props.Login.masterData.enlLink}\r\n                                        width=\"98%\"\r\n                                        height=\"1000px\"\r\n                                        id=\"reportviewID\"\r\n                                        className=\"reportview\"\r\n                                    //display=\"initial\"\r\n                                    /// position=\"relative\" \r\n                                    />\r\n                                </div>\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                    </div>\r\n                </PortalModal>\r\n                {/* </ListWrapper> */}\r\n\r\n                {/* End of get display*/}\r\n\r\n                {/* Start of Modal Sideout for User Creation */}\r\n                {/* Below Condition Added to avoid unwanted rendering of SlideOut */}\r\n                {\r\n                    this.props.Login.openModal ?\r\n                        <SlideOutModal\r\n                            show={this.props.Login.openModal}\r\n                            size={\"lg\"}\r\n                            closeModal={this.closeModal}\r\n                            operation={this.props.Login.operation}\r\n                            inputParam={this.props.Login.inputParam}\r\n                            screenName={this.props.Login.operation === \"createSample\" ? this.props.intl.formatMessage({ id: \"IDS_SAMPLE\" })\r\n                                : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"view\" || this.props.Login.operation === \"complete\" ? this.props.intl.formatMessage({ id: \"IDS_BATCH\" })\r\n                                    : this.props.Login.operation === \"createiqcsample\" ? this.props.intl.formatMessage({ id: \"IDS_BATCHIQCSAMPLE\" })\r\n                                        : this.props.Login.screenName}\r\n                            onSaveClick={this.onSaveClick}\r\n                            esign={this.props.Login.loadEsign}\r\n                            validateEsign={this.validateEsign}\r\n                            masterStatus={this.props.Login.masterStatus}\r\n                            updateStore={this.props.updateStore}\r\n                            selectedRecord={this.state.selectedRecord || {}}\r\n                            mandatoryFields={this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ?\r\n                                batchMandatoryFields\r\n                                //  : this.props.Login.operation === \"initiate\"  ?\r\n                                //    this.initiateMandatoryFields \r\n                                //  : this.props.Login.operation === \"complete\" ?\r\n                                //    this.completeMandatoryFields\r\n                                : this.props.Login.operation === \"createiqcsample\" ?\r\n                                    this.materialIqcMandatory\r\n                                    : []\r\n                            }\r\n                            showSaveContinue={this.state.showSaveContinue}\r\n                            noSave={this.props.Login.operation === \"view\" ? true : false}\r\n                            addComponent={this.props.Login.loadEsign ?\r\n                                <Esign operation={this.props.Login.operation}\r\n                                    onInputOnChange={this.onInputOnChange}\r\n                                    inputParam={this.props.Login.inputParam}\r\n                                    selectedRecord={this.state.selectedRecord || {}}\r\n                                />\r\n                                : this.props.Login.operation === \"create\" || this.props.Login.operation === \"update\" ?\r\n                                    <AddBatchCreation\r\n                                        selectedRecord={this.state.selectedRecord || {}}\r\n                                        onInputOnChange={this.onInputOnChange}\r\n                                        onComboChange={this.onComboChange}\r\n                                        onNumericInputOnChange={this.onNumericInputOnChange}\r\n                                        handleDateChange={this.handleDateChange}\r\n                                        sampleType={this.props.Login.masterData.realSampleTypeValue ?\r\n                                            this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA}\r\n                                        Test={this.state.Testvalues || []}\r\n                                        selectedInstrumentCategory={this.state.selectedInstCategory}\r\n                                        InstrumentCategory={this.state.InstrumentCategory}\r\n                                        Instrument={this.state.Instrument}\r\n                                        selectedInstrument={this.state.selectedInstrument}\r\n                                        productCategory={this.state.ProductCategory}\r\n                                        selectedProductCategory={this.state.selectedProductCategory}\r\n                                        TestValue={this.state.selectedTestSynonym || []}\r\n                                        product={this.state.Product || []}\r\n                                        instrumentID={this.state.InstrumentID || []}\r\n                                        selectedProduct={this.state.selectedProduct || []}\r\n                                        studyPlanList={this.props.Login.studyPlanList || []}\r\n                                        manufacturerList={this.props.Login.productManufacturerList || []}\r\n                                        maHolderList={this.props.Login.maHolderList || []}\r\n                                        timeZoneList={this.props.Login.timeZoneList || []}\r\n                                        selectedBacthCreation={this.props.Login.masterData.SelectedBatchmaster || {}}\r\n                                        operation={this.props.Login.operation}\r\n                                        inputParam={this.props.Login.inputParam}\r\n                                        userInfo={this.props.Login.userInfo}\r\n                                        selectedInstrumentId={this.state.selectedInstrumentId}\r\n                                        onMultiColumnValue={this.onMultiColumnValue}\r\n                                        onMultiColumnMAHChange={this.onMultiColumnMAHChange}\r\n                                        batchCreationEditStatusList={this.props.Login.batchCreationEditStatusList}\r\n                                        Section={this.state.Section}\r\n                                        selectedSection={this.state.selectedSection}\r\n                                        ProjectCode={this.state.ProjectCode}\r\n                                        selectedProjectcode={this.state.selectedProjectcode}\r\n                                    />\r\n                                    : this.props.Login.operation === \"createSample\" ?\r\n                                        <AddSample\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            getProductByCategory={this.getProductByCategory}\r\n                                            onComboChange={this.onComboChange}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            userInfo={this.props.Login.userInfo}\r\n                                            productCategoryList={this.props.productCategoryList}\r\n                                            productList={this.props.productList}\r\n                                            componentList={this.props.componentList}\r\n                                            getDataForAddComponent={this.getDataForAddComponent}\r\n                                            clearComponentInput={this.props.clearComponentInput}\r\n                                            samples={this.state.samples || []}\r\n                                            headerSelectionChange={this.headerSelectionChange}\r\n                                            selectionChange={this.selectionChange}\r\n                                            addedComponentList={this.state.addedComponentList || []}\r\n                                            addedHeaderSelectionChange={this.addedHeaderSelectionChange}\r\n                                            addedSelectionChange={this.addedSelectionChange}\r\n                                            //dataStateChange={this.dataStateChange} \r\n                                            userRoleControlRights={this.props.userRoleControlRights}\r\n                                            controlMap={this.props.controlMap}\r\n                                            inputParam={this.props.inputParam}\r\n                                            screenName={this.props.screenName}\r\n                                            addSelectAll={this.state.addSelectAll}\r\n                                            deleteSelectAll={this.state.deleteSelectAll}\r\n                                            onDeleteSelectedComponent={this.onDeleteSelectedComponent}\r\n                                            componentPopupSkip={this.props.componentPopupSkip}\r\n                                            componentPopupTake={this.props.componentPopupTake}\r\n                                            componentPageSizes={this.props.componentPageSizes}\r\n                                            nneedsubsample={this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample}\r\n                                        />\r\n                                        : this.props.Login.operation === \"initiate\" || this.props.Login.operation === \"complete\" ?\r\n                                            <AddBatchinitiate\r\n                                                userInfo={this.props.Login.userInfo}\r\n                                                operation={this.props.Login.operation}\r\n                                                handleDateChange={this.handleDateChange}\r\n                                                selectedRecord={this.state.selectedRecord}\r\n                                                onInputOnChange={this.onInputOnChange}\r\n                                                currentTime={this.props.Login.currentTime || []}\r\n                                            />\r\n                                            : this.props.Login.operation === \"view\" ?\r\n                                                <Card className='one' >\r\n                                                    <Card.Body>\r\n                                                        <ViewInfo\r\n                                                            userInfo={this.props.Login.userInfo}\r\n                                                            selectedRecordView={this.props.Login.masterData.selectedRecordView}\r\n                                                            viewInfoFields={viewInfoFields}\r\n                                                        />\r\n                                                    </Card.Body>\r\n                                                </Card>\r\n                                                : this.props.Login.operation === \"createiqcsample\" ?\r\n                                                    <AddMaterialIqc\r\n                                                        userInfo={this.props.Login.userInfo}\r\n                                                        operation={this.props.Login.operation}\r\n                                                        materialCategory={this.state.MaterialCategory}\r\n                                                        selectedMaterialType={this.state.selectedMaterialType}\r\n                                                        selectedMaterialCategory={this.state.selectedMaterialCategory}\r\n                                                        onComboChange={this.onComboChange}\r\n                                                        selectedMaterial={this.state.selectedMaterial}\r\n                                                        screenName={this.props.intl.formatMessage({ id: \"IDS_SPECIFICATION\" })}\r\n                                                        handleSaveClick={this.handleSaveClick}\r\n                                                        material={this.state.Material}\r\n                                                        materialInventory={this.state.MaterialInventory}\r\n                                                        AddSpec={this.AddSpec}\r\n                                                        onInputOnChange={this.onInputOnChange}\r\n                                                        currentTime={this.props.Login.currentTime || []}\r\n                                                        loadSpec={this.props.Login.loadSpec}\r\n                                                        selectedMaterialInventory={this.state.selectedMaterialInventory}\r\n                                                        selectedInventoryUnit={this.props.Login.masterData.selectedInventoryUnit}\r\n                                                        AgaramTree={this.props.Login.AgaramTree}\r\n                                                        openNodes={this.props.Login.OpenNodes}\r\n                                                        onTreeClick={this.onTreeClick}\r\n                                                        focusKey={this.props.Login.FocusKey}\r\n                                                        activeKey={this.props.Login.batchactiveKey}\r\n                                                        Specification={this.props.Login.Specification}\r\n                                                        selectedSpec={this.props.Login.selectedSpec}\r\n                                                        selectedRecord={this.state.selectedRecord}\r\n                                                        onSpecChange={this.onspecChange}\r\n                                                        openSpecModal={this.props.Login.openSpecModal}\r\n                                                        closeModal={this.closeModal}\r\n                                                    /> : \"\"\r\n                            }\r\n                        />\r\n                        : \"\"\r\n                }\r\n                {/* End of Modal Sideout for Creation */}\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handlePageChange = e => {\r\n        this.setState({\r\n            skip: e.skip,\r\n            take: e.take\r\n        });\r\n    };\r\n\r\n\r\n    ConfirmDelete = (selectedBatch, deleteId, operation) => {\r\n        this.confirmMessage.confirm(\"deleteMessage\", this.props.intl.formatMessage({ id: \"IDS_DELETE\" }), this.props.intl.formatMessage({ id: \"IDS_DEFAULTCONFIRMMSG\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }), this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.deleteBatchCreation(selectedBatch, deleteId, operation));\r\n    };\r\n\r\n\r\n    completePopUpStartActions = (completeId) => {\r\n        // if(this.props.Login.masterData.nneedtestinitiate === true){\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.COMPLETED ||\r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT ||\r\n            this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.CANCELLED\r\n        ) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n        }\r\n        //    }else \r\n        else if (this.props.Login.masterData.Samples.length == 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n        } else {\r\n            // const updateInfo = {\r\n            //     typeName: DEFAULT_RETURN,\r\n            //     data: {\r\n            //         openModal: true, \r\n            //         completeId : completeId,\r\n            //         masterData: this.props.Login.masterData,\r\n            //        // screenName: this.props.intl.formatMessage({ id: this.props.Login.inputParam.displayName }),\r\n            //         operation: \"complete\"\r\n            //     }\r\n            // }\r\n            // this.props.updateStore(updateInfo);\r\n\r\n            let inputData = {};\r\n            inputData[\"openModal\"] = true;\r\n            inputData[\"completeId\"] = completeId;\r\n            inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"operation\"] = \"complete\";\r\n            this.props.batchCompleteDatePopup(inputData, this.props.Login.masterData);\r\n        }\r\n    }\r\n\r\n    AddSpec = (e) => {\r\n        if (this.state.selectedMaterial !== undefined &&\r\n            this.state.selectedMaterialCategory !== undefined) {\r\n            let inputData = {};\r\n            inputData[\"nmaterialcode\"] = this.state.selectedMaterial.value;\r\n            inputData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory.value;\r\n            inputData[\"ncategorybasedflow\"] = this.state.selectedMaterialCategory.item.ncategorybasedflow;\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n            // inputData[\"nneedsubsample\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample; \r\n            // inputData[\"nneedmyjob\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob; \r\n            // inputData[\"nneedjoballocation\"]= this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation; \r\n            // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            // inputData[\"napproveconfversioncode\"]=this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n            // inputData[\"nneedtestinitiate\"] =  this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n            this.props.getTreeByMaterial(inputData, this.state.selectedRecord, this.props.Login.masterData);\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_FILLALLDETAILSTOADDSPEC\" }));\r\n        }\r\n    }\r\n\r\n\r\n    testPopUpStartActions = (testStartId) => {\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED || this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus === transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        } else if (this.props.Login.masterData.Samples.length == 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n        }\r\n        // else if (this.props.Login.masterData.iqcsample.length==0){\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\r\n        // }\r\n        else {\r\n            let inputData = {};\r\n            inputData[\"openModal\"] = true;\r\n            inputData[\"testStartId\"] = testStartId;\r\n            inputData[\"selectedRecord\"] = this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord;\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"operation\"] = \"initiate\";\r\n            this.props.batchInitiateDatePopup(inputData, this.props.Login.masterData);\r\n\r\n\r\n            //         const updateInfo = {\r\n            //             typeName: DEFAULT_RETURN,\r\n            //             data: {\r\n            //                 openModal: true, \r\n            //                 testStartId : testStartId,\r\n            //                 selectedRecord : this.state.selectedRecord && this.state.selectedRecord[\"dtransactiondate\"] ? \"\" : this.state.selectedRecord,\r\n            //                 masterData: this.props.Login.masterData,\r\n            //                 operation: \"initiate\"\r\n            //             }\r\n            //         }\r\n            // this.props.updateStore(updateInfo);\r\n        }\r\n\r\n    }\r\n\r\n    testStartActions = (selectedmaster, testStartId) => {\r\n        if (selectedmaster.ntransactionstatus == transactionStatus.INITIATED || selectedmaster.ntransactionstatus === transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        } else if (this.props.Login.masterData.Samples.length == 0) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLEFORINITIATE\" }));\r\n        }\r\n        //else if (this.props.Login.masterData.iqcsample.length==0){\r\n        //     toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTIQCSAMPLEFORINITIATE\" }));\r\n        // }\r\n        else {\r\n            let inputData = {};\r\n            let jsonuidata = [];\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/initiateBatchcreation\",\r\n                isSingleGet: true,\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            let jsondata = this.props.Login.masterData.Samples.map(item => {\r\n                return { jsonuidata: item }\r\n            });\r\n            if (this.props.Login.masterData.iqcsample.length > 0) {\r\n                let totalSample = this.props.Login.masterData.Samples.concat(this.props.Login.masterData.iqcsample);\r\n                inputData[\"npreregno\"] = this.props.Login.masterData.iqcsample.map(samples => samples.npreregno).join(\",\");\r\n                inputData[\"ntransactiontestcode\"] = totalSample.map(samples => samples.ntransactiontestcode).join(\",\");\r\n                inputData[\"nneedjoballocationiqc\"] = true\r\n                inputData[\"isiqcdata\"] = true\r\n            } else {\r\n                inputData[\"npreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\r\n                inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\r\n                inputData[\"isiqcdata\"] = false\r\n                inputData[\"nneedjoballocationiqc\"] = false\r\n            }\r\n            inputData[\"nbatchsampleCode\"] = this.props.Login.masterData.Samples.map(sample => sample.nbatchsamplecode).join(\",\");\r\n            inputData[\"muluserpreregno\"] = this.props.Login.masterData.Samples.map(samples => samples.npreregno).join(\",\");\r\n            inputData[\"mulusertransactionsamplecode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactionsamplecode).join(\",\");\r\n            inputData[\"mulusertransactiontestcode\"] = this.props.Login.masterData.Samples.map(samples => samples.ntransactiontestcode).join(\",\");\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue && this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            // inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n            inputData[\"batchsample\"] = jsondata;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\r\n            inputData[\"nneedmyjob\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedmyjob;\r\n            inputData[\"nneedjoballocation\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedjoballocation;\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"napproveconfversioncode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"ntranscode\"] = transactionStatus.INITIATED || transactionStatus.DRAFT;\r\n            inputData[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n            inputData[\"Batchhistory\"] = {\r\n                dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ?\r\n                    this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\r\n                scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\r\n            };\r\n            inputData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n            inputData[\"testStartId\"] = testStartId;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n            inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus && this.props.Login.masterData.BCFilterStatus[1];\r\n            inputData[\"sample\"] = this.props.Login.masterData ? this.props.Login.masterData.sample : \"\";\r\n            inputData[\"iqcsample\"] = this.props.Login.masterData ? this.props.Login.masterData.iqcsample : \"\";\r\n            const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                operation: \"initiate\"\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, testStartId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: {\r\n                            inputParam,\r\n                            masterData: {\r\n                                ...masterData\r\n                                // defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                //     && this.props.Login.masterData.BCFilterStatus[1],\r\n                                // realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                //     && this.props.Login.masterData.BCFilterStatus[1],\r\n\r\n                            }\r\n                        },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n                        operation: inputParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.batchInitiateAction(inputData, this.props.Login.masterData, this.confirmMessage);\r\n            }\r\n        }\r\n    }\r\n\r\n    batchSaveIQCActions = (selectedmaster) => {\r\n        if (this.state.selectedRecord.savailablequatity !== \"0.00\") {\r\n            if (parseFloat(this.state.selectedRecord.susedquantity) <= parseFloat(this.props.Login.masterData.inventoryTransaction.savailablequatity)) {\r\n                if (this.props.Login.selectedSpec.nallottedspeccode !== undefined && this.props.Login.selectedSpec.nallottedspeccode !== \"\") {\r\n                    let userInfo = {};\r\n                    let inputRegistrationData = {};\r\n                    let inputMaterialInventoryData = {};\r\n                    let inputBatchData = {};\r\n                    const map = {}\r\n                    let batchCreationSampleData = {};\r\n                    let batchCreationTestData = {};\r\n                    let batchCreationSampleArray = [];\r\n                    let batchCreationTestArray = [];\r\n                    let samplecombinationuniqueArray = [];\r\n                    let inputMaterialInventoryArrData = [];\r\n\r\n                    batchCreationSampleData[\"nspecsampletypecode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ?\r\n                        this.props.Login.selectedSpec.nallottedspeccode.nspecsampletypecode : transactionStatus.NA;\r\n                    batchCreationSampleData[\"ncomponentcode\"] = transactionStatus.NA;\r\n                    batchCreationSampleData[\"slno\"] = 1;\r\n                    batchCreationSampleArray.push(batchCreationSampleData);\r\n\r\n                    inputRegistrationData[\"nallottedspeccode\"] = this.props.Login.selectedSpec && this.props.Login.selectedSpec.nallottedspeccode ?\r\n                        this.props.Login.selectedSpec.nallottedspeccode.value : transactionStatus.NA;\r\n                    inputRegistrationData[\"ntemplatemanipulationcode\"] = this.props.Login.ntemplatemanipulationcode || transactionStatus.NA;\r\n                    inputRegistrationData[\"nregsubtypeversioncode\"] = this.props.Login.masterData.nregsubtypeversioncode;\r\n                    inputRegistrationData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n                    // inputRegistrationData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                    // inputRegistrationData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n                    // inputRegistrationData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n\r\n                    inputRegistrationData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue &&\r\n                        this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                    inputRegistrationData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                        this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                    inputRegistrationData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                        this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n\r\n                    inputRegistrationData[\"nproductcatcode\"] = transactionStatus.NA;\r\n                    inputRegistrationData[\"nproductcode\"] = transactionStatus.NA;\r\n                    inputRegistrationData[\"ninstrumentcatcode\"] = transactionStatus.NA;\r\n                    inputRegistrationData[\"ninstrumentcode\"] = transactionStatus.NA;\r\n                    inputRegistrationData[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\r\n                    inputRegistrationData[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\r\n\r\n                    inputRegistrationData[\"jsondata\"] = {\r\n                        nmaterialcode: this.state.selectedMaterial.value,\r\n                        nmaterialcatcode: this.state.selectedMaterialCategory.value,\r\n                        smaterialcatname: this.state.selectedMaterialCategory.label,\r\n                        sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\r\n                        nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n                        smaterial: this.state.selectedMaterial.item.smaterialname,\r\n                        smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\r\n                        nmaterialtypecode: this.state.selectedMaterialType.value,\r\n                        susedquantity: this.state.selectedRecord.susedquantity,\r\n                        sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\r\n                        savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\r\n                        //materialtype:this.state.selectedMaterialType.label,\r\n                        sremarks: this.state.selectedRecord.sremarks,\r\n                        nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n                    };\r\n                    inputRegistrationData[\"jsonuidata\"] = {\r\n                        nmaterialcode: this.state.selectedMaterial.value,\r\n                        nmaterialcatcode: this.state.selectedMaterialCategory.value,\r\n                        smaterialcatname: this.state.selectedMaterialCategory.label,\r\n                        sinventoryid: this.state.selectedMaterialInventory.item.sinventoryid,\r\n                        nmaterialinventorycode: this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n                        smaterial: this.state.selectedMaterial.item.smaterialname,\r\n                        smaterialtype: this.state.selectedMaterialType.item.smaterialtypename,\r\n                        nmaterialtypecode: this.state.selectedMaterialType.value,\r\n                        susedquantity: this.state.selectedRecord.susedquantity,\r\n                        sunitname: this.props.Login.masterData.inventoryTransaction.sunitname,\r\n                        savailablequatity: this.props.Login.masterData.inventoryTransaction.savailablequatity,\r\n                        //materialtype:this.state.selectedMaterialType.label,\r\n                        sremarks: this.state.selectedRecord.sremarks,\r\n                        nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n\r\n                    };\r\n\r\n                    // inputMaterialInventoryData = {\r\n                    //     jsondata : this.props.Login.masterData.selectedInventoryUnit['jsondata']\r\n                    // }\r\n                    //  inputMaterialInventoryData = {\r\n                    //         nmaterialinventorycode : this.state.selectedMaterialInventory.item.nmaterialinventorycode,\r\n                    //         jsondata : {\r\n                    //             jsondata:this.props.Login.masterData.selectedInventoryUnit['jsondata'],\r\n                    //             nqtyused: this.state.selectedRecord.susedquantity\r\n                    //         },\r\n                    //         jsonuidata : {\r\n                    //             jsonuidata : this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\r\n                    //             nqtyused: this.state.selectedRecord.susedquantity\r\n                    //         },\r\n                    //         nsectioncode:this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n                    //  };\r\n\r\n                    inputMaterialInventoryData[\"nmaterialinventorycode\"] = this.state.selectedMaterialInventory.item.nmaterialinventorycode;\r\n                    inputMaterialInventoryData[\"jsondata\"] = {\r\n                        ...this.props.Login.masterData.selectedInventoryUnit['jsondata'],\r\n                        nqtyused: this.state.selectedRecord.susedquantity,\r\n                        savailablequatity: this.state.selectedRecord.savailablequatity,\r\n                        nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n                    }\r\n                    //inputMaterialInventoryData[\"jsondata\"] = this.state.selectedRecord.susedquantity;\r\n                    inputMaterialInventoryData[\"nsectioncode\"] = this.props.Login.masterData.selectedInventoryUnit['nsectioncode'];\r\n                    inputMaterialInventoryData[\"jsonuidata\"] = {\r\n                        ...this.props.Login.masterData.selectedInventoryUnit['jsonuidata'],\r\n                        nqtyused: this.state.selectedRecord.susedquantity,\r\n                        savailablequatity: this.state.selectedRecord.savailablequatity,\r\n                        nsectioncode: this.props.Login.masterData.selectedInventoryUnit['nsectioncode']\r\n                    }\r\n\r\n\r\n                    //inputMaterialInventoryArrData.push(inputMaterialInventoryData);\r\n\r\n                    batchCreationTestData[\"ntestgrouptestcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.ntestgrouptestcode : transactionStatus.NA;\r\n                    //     batchCreationTestData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample =>sample.ntransactiontestcode).join(\",\") ;\r\n                    batchCreationTestData[\"ntestcode\"] = this.props.Login.masterData.SelectedBatchmaster.ntestcode;\r\n                    batchCreationTestData[\"nsectioncode\"] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n                    batchCreationTestData[\"nmethodcode\"] = this.props.Login.masterData.selectedTestDetails ? this.props.Login.masterData.selectedTestDetails.nmethodcode : transactionStatus.NA;\r\n                    //   batchCreationTestData[\"nchecklistversioncode\"]=this.state.selectedTestSynonym ? this.state.selectedTestSynonym.item.nchecklistversioncode:transactionStatus.NA;\r\n                    batchCreationTestData[\"nrepeatcountno\"] = 1;//--\r\n                    //    batchCreationTestData[\"ntestretestno\"]=0;\r\n                    batchCreationTestData[\"nparametercount\"] = 1; //--\r\n                    batchCreationTestData[\"slno\"] = 1; //--\r\n\r\n                    batchCreationTestArray.push(batchCreationTestData);\r\n\r\n\r\n                    map[\"nfilterstatus\"] = transactionStatus.PREREGISTER;\r\n                    map[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n                    userInfo = this.props.Login.userInfo;\r\n                    map[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\r\n                    map[\"napproveconfversioncode\"] = this.state.ApprovalVersionValue ? this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n                    map[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n                    map[\"nneedtestinitiate\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedtestinitiate;\r\n                    map[\"nmaterialcatcode\"] = this.state.selectedMaterialCategory ? this.state.selectedMaterialCategory.value : transactionStatus.NA;\r\n                    map[\"nmaterialcode\"] = this.state.selectedMaterial ? this.state.selectedMaterial.value : transactionStatus.NA;\r\n                    map[\"nmaterialtypecode\"] = this.state.selectedMaterialType ? this.state.selectedMaterialType.value : transactionStatus.NA;\r\n\r\n                    inputBatchData = this.props.Login.masterData.SelectedBatchmaster;\r\n\r\n                    map['Registration'] = inputRegistrationData;\r\n                    map['Batchsampleiqc'] = inputBatchData;\r\n                    map['RegistrationSample'] = batchCreationSampleArray;\r\n                    map['testgrouptest'] = batchCreationTestArray;\r\n                    map['userInfo'] = userInfo;\r\n                    map['samplecombinationunique'] = samplecombinationuniqueArray;\r\n                    map['inputMaterialInventoryArrData'] = inputMaterialInventoryData;\r\n\r\n                    const inputParam = {\r\n                        inputData: map,\r\n                        classUrl: \"batchcreation\",\r\n                        methodUrl: \"Batchcreation\",\r\n                        displayName: \"IDS_BATCHIQCSAVE\",\r\n                        operation: \"createiqc\"\r\n                    }\r\n\r\n                    this.props.batchSaveIQCActions(inputParam.inputData, this.props.Login.masterData);\r\n\r\n                } else {\r\n                    toast.warn(this.props.intl.formatMessage({ id: \"IDS_ADDSPECIFICATIONS\" }));\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_USEDQTYISGREATERTHANAVAILABLEQTY\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_NOAVAILABLEQUANTITY\" }));\r\n        }\r\n    }\r\n\r\n    cancelBatch = (selectedmaster, cancelId) => {\r\n        if (selectedmaster.ntransactionstatus == transactionStatus.DRAFT || selectedmaster.ntransactionstatus == transactionStatus.COMPLETED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTBATCHINITIATEDRECORD\" }));\r\n        } else {\r\n            let inputData = {};\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/cancelBatch\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n            let jsondata = this.props.Login.masterData.Samples.map(item => {\r\n                return { jsonuidata: item }\r\n            });\r\n\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue &&\r\n                this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n            inputData[\"samples\"] = jsondata;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\r\n            inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\r\n            inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"ntranscode\"] = transactionStatus.CANCELLED || transactionStatus.DRAFT;\r\n            // inputData[\"Batchhistory\"] ={\r\n            //     dtransactiondate : formatInputDate(new Date(),true),\r\n            //     scomments : this.state.selectedRecord && this.state.selectedRecord.scomments\r\n            //     };\r\n            //inputData[\"completeId\"] = completeId;\r\n            inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ||\r\n                transactionStatus.NA;\r\n            inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus\r\n                && this.props.Login.masterData.BCFilterStatus[3];\r\n            const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batch\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                operation: \"cancel\"\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, cancelId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true,\r\n                        screenData: {\r\n                            inputParam,\r\n                            masterData: {\r\n                                ...masterData,\r\n                                defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                    && this.props.Login.masterData.BCFilterStatus[2],\r\n                                realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                    && this.props.Login.masterData.BCFilterStatus[2],\r\n\r\n                            }\r\n                        },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n                        operation: inputParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.batchCancelAction(inputData, this.props.Login.masterData);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    batchCompleteActions = (selectedmaster, completeId) => {\r\n        if (selectedmaster.ntransactionstatus == transactionStatus.COMPLETED || selectedmaster.ntransactionstatus == transactionStatus.DRAFT) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n        } else {\r\n            let inputData = {};\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedmaster.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/completeBatchcreation\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: { userinfo: this.props.Login.userInfo },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n\r\n            let jsondata = this.props.Login.masterData.Samples.map(item => {\r\n                return { jsonuidata: item }\r\n            });\r\n\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            // inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nbatchmastercode\"] = selectedmaster.nbatchmastercode;\r\n            inputData[\"ntransactiontestcode\"] = this.props.Login.masterData.Samples.map(sample => sample.ntransactiontestcode).join(\",\");\r\n            inputData[\"samples\"] = jsondata;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"sbatcharno\"] = selectedmaster.sbatcharno;\r\n            inputData[\"nneedsubsample\"] = this.state.nregsubtypecode && this.state.nregsubtypecode.item.nneedsubsample;\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n          //  inputData[\"ntranscode\"] = transactionStatus.COMPLETED || transactionStatus.DRAFT;\r\n          inputData[\"ntranscode\"] = transactionStatus.COMPLETED\r\n \r\n          inputData[\"Batchhistory\"] = {\r\n                dtransactiondate: formatInputDate(this.state.selectedRecord[\"dtransactiondate\"] != undefined ?\r\n                    this.state.selectedRecord[\"dtransactiondate\"] : this.props.Login.currentTime, false),\r\n                scomments: this.state.selectedRecord && this.state.selectedRecord.scomments\r\n            };\r\n            inputData[\"completeId\"] = completeId;\r\n            inputData[\"nneedtestinitiate\"] = this.props.Login.masterData && this.props.Login.masterData.nneedtestinitiate;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ||\r\n                transactionStatus.NA;\r\n            inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.BCFilterStatus\r\n                && this.props.Login.masterData.BCFilterStatus[2];\r\n            const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                operation: \"complete\"\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, completeId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: {\r\n                            inputParam,\r\n                            masterData: {\r\n                                ...masterData\r\n                                // defaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                //     && this.props.Login.masterData.BCFilterStatus[2],\r\n                                // realdefaultFilterStatus: this.props.Login.masterData.BCFilterStatus\r\n                                //     && this.props.Login.masterData.BCFilterStatus[2],\r\n\r\n                            }\r\n                        },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n                        operation: inputParam.operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            } else {\r\n                this.props.batchCompleteAction(inputData, this.props.Login.masterData);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    // completeBatchCreation = () => {\r\n    //     const postParam = {\r\n    //         inputListName: \"Batchmaster\", selectedObject: \"SelectedBatchCreation\",\r\n    //         primaryKeyField: \"nreleasebatchcode\",\r\n    //         primaryKeyValue: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode,\r\n    //         fetchUrl: \"batchcreation/getBatchCreation\",\r\n    //         fecthInputObject: this.props.Login.userInfo,\r\n    //     }\r\n    //     const inputParam = {\r\n    //         classUrl: \"batchcreation\",\r\n    //         methodUrl: \"BatchCreation\", postParam,\r\n    //         inputData: {\r\n    //             ncontrolcode: this.props.Login.ncontrolCode,\r\n    //             \"userinfo\": this.props.Login.userInfo,\r\n    //             nreleasebatchcode: this.props.Login.masterData.SelectedBatchCreation.nreleasebatchcode\r\n    //         },\r\n    //         operation: \"complete\", showConfirmAlert: false\r\n    //     }\r\n    //     //this.props.updateStore({ typeName: DEFAULT_RETURN, data: { showConfirmAlert: false } });  \r\n\r\n    //     const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n\r\n    //     if (esignNeeded) {\r\n    //         const updateInfo = {\r\n    //             typeName: DEFAULT_RETURN,\r\n    //             data: {\r\n    //                 loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n    //                 openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n    //                 operation: this.props.Login.operation,\r\n    //             }\r\n    //         }\r\n    //         this.props.updateStore(updateInfo);\r\n    //     }\r\n    //     else {\r\n\r\n    //         this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", {});\r\n    //     }\r\n\r\n    // }\r\n\r\n    closeAlert = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showConfirmAlert: false, loading: false }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n\r\n\r\n    componentDidUpdate(previousProps) {\r\n\r\n        let { userRoleControlRights, controlMap, selectedRecord, filterData,\r\n            addedComponentList,\r\n            filterStatusList, dataState, sahDataState, bahDataState,\r\n            chDataState, testCommentDataState, SampleType, RegistrationType,\r\n            RegistrationSubType, BCFilterStatus, REJobStatus, Testvalues,\r\n            ApprovalConfigVersion, skip, take,\r\n            testskip, testtake, selectedFilter, InstrumentCategory, selectedInstCategory,\r\n            ProductCategory, Instrument, selectedInstrument, selectedTestSynonym, nregsubtypecode,\r\n            selectedProductCategory, Product, selectedProduct, samples, addSelectAll,\r\n            deleteSelectAll, ApprovalVersionValue, FilterStatusValue, Section,\r\n            selectedSection, sampleGridItem, subsampleGridItem, testGridItem = [],\r\n            DynamicGridItem, samplegridmoreitem, DynamicGridMoreItem, MaterialCategory,\r\n            selectedMaterialType, Material, selectedMaterial, selectedMaterialCategory,\r\n            MaterialInventory, selectedMaterialInventory, Specification,\r\n            selectedSpec, addedSamplesList, testGridArnoItems, InstrumentID,\r\n            selectedInstrumentId, sinstrumentid, selectedProjectcode, ProjectCode } = this.state;\r\n        let isStateChanged = false;\r\n        let bool = false;\r\n        addedSamplesList = [];\r\n        // samples = [];\r\n\r\n        if (this.props.Login.masterData.RegistrationSubType &&\r\n            this.props.Login.masterData.RegistrationSubType !== previousProps.Login.masterData.RegistrationSubType) {\r\n            let dataState = {\r\n                skip: 0, take: this.props.Login.settings ? parseInt(this.props.Login.settings[14]) : 5\r\n                //, group: [{ field: `${this.props.Login.masterData.nneedsubsample ? 'ssamplearno' : 'sarno'}` }] \r\n            }\r\n            bool = true;\r\n        }\r\n\r\n        if (this.props.Login.masterData !== previousProps.Login.masterData) {\r\n            bool = true;\r\n            isStateChanged = true;\r\n            \r\n\r\n            SampleType = constructOptionList(this.props.Login.masterData.SampleType || [], \"nsampletypecode\", \"ssampletypename\", 'nsampletypecode', 'ascending', 'nsampletypecode', false);\r\n            RegistrationType = constructOptionList(this.props.Login.masterData.RegistrationType || [], \"nregtypecode\", \"sregtypename\", \"nsorter\", 'ascending', 'nregtypecode', false);\r\n            RegistrationSubType = constructOptionList(this.props.Login.masterData.RegistrationSubType || [], \"nregsubtypecode\", \"sregsubtypename\", \"nsorter\", 'ascending', 'nregsubtypecode', false);\r\n            BCFilterStatus = constructOptionList(this.props.Login.masterData.BCFilterStatus || [], \"ntransactionstatus\", \"sfilterstatus\", \"nsorter\", 'ascending', \"ntransactionstatus\", false);\r\n            REJobStatus = constructOptionList(this.props.Login.masterData.REJobStatus || [], 'njobstatuscode', 'sidsjobstatusname', 'ascending', 'njobstatuscode', false);\r\n            Testvalues = constructOptionList(this.props.Login.masterData.Testvalues || [], 'ntestcode', 'stestname', 'ascending', 'ntestcode', false);\r\n            ApprovalConfigVersion = constructOptionList(this.props.Login.masterData.ApprovalConfigVersion || [], 'napprovalconfigversioncode', 'sversionname',\r\n                'ascending', 'napprovalconfigversioncode', false);\r\n            InstrumentCategory = constructOptionList(this.props.Login.masterData.instrumentCategory || [], 'ninstrumentcatcode', 'sinstrumentcatname',\r\n                'ascending', 'ninstrumentcatcode', false);\r\n            Instrument = constructOptionList(this.props.Login.masterData.instrument || [], 'ninstrumentnamecode', 'sinstrumentname',\r\n                'ascending', 'ninstrumentcode', false);\r\n            ProductCategory = constructOptionList(this.props.Login.masterData.productcategory || [], 'nproductcatcode', 'sproductcatname',\r\n                'ascending', 'nproductcatcode', false);\r\n            Product = constructOptionList(this.props.Login.masterData.product || [], 'nproductcode', 'sproductname',\r\n                'ascending', 'nproductcode', false);\r\n            Section = constructOptionList(this.props.Login.masterData.Section || [], 'nsectioncode', 'ssectionname',\r\n                'ascending', 'nsectioncode', false);\r\n            MaterialCategory = constructOptionList(this.props.Login.masterData.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\r\n                'ascending', 'nmaterialcatcode', false);\r\n            Material = constructOptionList(this.props.Login.masterData.Material || [], 'nmaterialcode', 'smaterialname',\r\n                'ascending', 'nmaterialcode', false);\r\n            MaterialInventory = constructOptionList(this.props.Login.masterData.MaterialInventory || [], 'nmaterialinventtranscode', 'sinventoryid',\r\n                'ascending', 'nmaterialinventtranscode', false);\r\n            InstrumentID = constructOptionList(this.props.Login.masterData.instrumentID || [], 'ninstrumentcode', 'sinstrumentid',\r\n                'ascending', 'ninstrumentcode', false);\r\n            ProjectCode = constructOptionList(this.props.Login.masterData.ProjectCode || [], 'nprojectmastercode', 'sprojectcode',\r\n                'ascending', 'nprojectmastercode', false);\r\n\r\n            skip = this.props.Login.skip === undefined ? skip : this.props.Login.skip\r\n            take = this.props.Login.take || take\r\n            testskip = this.props.Login.testskip === undefined ? testskip : this.props.Login.testskip\r\n            testtake = this.props.Login.testtake || testtake\r\n            let selectFilterStatus = {\r\n                ntransactionstatus: transactionStatus.PARTIAL,\r\n                sfilterstatus: this.props.intl.formatMessage({ id: \"IDS_PARTIAL\" }),\r\n                scolorhexcode: \"#800000\"\r\n            }\r\n            const selectedFilters = this.props.Login.masterData.BCFilterStatus || [];\r\n\r\n            const selectedFiltersNew = JSON.parse(JSON.stringify(selectedFilters));\r\n\r\n            const index = selectedFiltersNew.findIndex(item => item.ntransactionstatus === transactionStatus.PARTIAL)\r\n            if (selectedFiltersNew.length > 0 && index === -1) {\r\n                selectedFiltersNew.push(selectFilterStatus)\r\n            }\r\n\r\n            selectedFilter = selectedFiltersNew;\r\n            SampleType = SampleType.get(\"OptionList\")\r\n            RegistrationType = RegistrationType.get(\"OptionList\")\r\n            RegistrationSubType = RegistrationSubType.get(\"OptionList\")\r\n            BCFilterStatus = BCFilterStatus.get(\"OptionList\")\r\n            REJobStatus = REJobStatus.get(\"OptionList\")\r\n            Testvalues = Testvalues.get(\"OptionList\")\r\n            ApprovalConfigVersion = ApprovalConfigVersion.get(\"OptionList\")\r\n            InstrumentCategory = InstrumentCategory.get(\"OptionList\")\r\n            Instrument = Instrument.get(\"OptionList\")\r\n            ProductCategory = ProductCategory.get(\"OptionList\")\r\n            Product = Product.get(\"OptionList\")\r\n            Section = Section.get(\"OptionList\")\r\n            MaterialCategory = MaterialCategory.get(\"OptionList\")\r\n            Material = Material.get(\"OptionList\")\r\n            MaterialInventory = MaterialInventory.get(\"OptionList\")\r\n            InstrumentID = InstrumentID.get(\"OptionList\")\r\n            ProjectCode = ProjectCode.get(\"OptionList\")\r\n            //selectedInstCategory=this.props.Login.masterData.selectedInstrumentCategory || [];\r\n\r\n            samples = this.props.Login.masterData.samples;\r\n            \r\n          \r\n            addSelectAll = false;\r\n            deleteSelectAll = true;\r\n            nregsubtypecode = this.props.Login.masterData.defaultRegistrationSubType ?\r\n                {\r\n                    label: this.props.Login.masterData.defaultRegistrationSubType.sregsubtypename,\r\n                    value: this.props.Login.masterData.defaultRegistrationSubType.nregsubtypecode,\r\n                    item: this.props.Login.masterData.defaultRegistrationSubType\r\n                } : \"\"\r\n\r\n            if (this.props.Login.masterData.selectedTestSynonym !== previousProps.Login.masterData.selectedTestSynonym) {\r\n                selectedTestSynonym = this.props.Login.masterData.selectedTestSynonym ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedTestSynonym.stestname,\r\n                        value: this.props.Login.masterData.selectedTestSynonym.ntestcode,\r\n                        item: this.props.Login.masterData.selectedTestSynonym\r\n                    } : \"\"\r\n                let stestname = selectedTestSynonym.item;\r\n                //selectedRecord = {...this.state.selectedRecord,stestname,...selectedRecord};\r\n                selectedRecord = { ...selectedRecord, stestname };\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedProductcategory !== previousProps.Login.masterData.selectedProductcategory) {\r\n                selectedProductCategory = this.props.Login.masterData.selectedProductcategory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedProductcategory.sproductcatname,\r\n                        value: this.props.Login.masterData.selectedProductcategory.nproductcatcode,\r\n                        item: this.props.Login.masterData.selectedProductcategory\r\n                    } : \"\"\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedProduct !== previousProps.Login.masterData.selectedProduct) {\r\n                selectedProduct = this.props.Login.masterData.selectedProduct ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedProduct.sproductname,\r\n                        value: this.props.Login.masterData.selectedProduct.nproductcode,\r\n                        item: this.props.Login.masterData.selectedProduct\r\n                    } : \"\"\r\n                let sproductname = selectedProduct.item;\r\n                selectedRecord = { ...this.state.selectedRecord, sproductname, ...selectedRecord };\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedInstrumentCategory !== previousProps.Login.masterData.selectedInstrumentCategory) {\r\n                selectedInstCategory = this.props.Login.masterData.selectedInstrumentCategory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedInstrumentCategory.sinstrumentcatname,\r\n                        value: this.props.Login.masterData.selectedInstrumentCategory.ninstrumentcatcode,\r\n                        item: this.props.Login.masterData.selectedInstrumentCategory\r\n                    } : \"\"\r\n                let sinstrumentcatname = selectedInstCategory.item;\r\n                selectedRecord = { ...selectedRecord, sinstrumentcatname };\r\n                // selectedRecord = {...this.state.selectedRecord,sinstrumentcatname,...selectedRecord};\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedInstrument !== previousProps.Login.masterData.selectedInstrument) {\r\n                selectedInstrument = this.props.Login.masterData.selectedInstrument ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedInstrument.sinstrumentname,\r\n                        value: this.props.Login.masterData.selectedInstrument.ninstrumentcode,\r\n                        item: this.props.Login.masterData.selectedInstrument\r\n                    } : \"\"\r\n                let sinstrumentname = selectedInstrument.item;\r\n                //selectedRecord = { ...this.state.selectedRecord, sinstrumentname, ...selectedRecord };\r\n                selectedRecord = {...selectedRecord,sinstrumentname };\r\n                isStateChanged = true;\r\n\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedInstrumentId !== previousProps.Login.masterData.selectedInstrumentId) {\r\n                selectedInstrumentId = this.props.Login.masterData.selectedInstrumentId ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedInstrumentId.sinstrumentid,\r\n                        value: this.props.Login.masterData.selectedInstrumentId.ninstrumentcode,\r\n                        item: this.props.Login.masterData.selectedInstrumentId\r\n                    } : undefined\r\n                let sinstrumentid = selectedInstrumentId && selectedInstrumentId.item;\r\n                //selectedRecord = { ...this.state.selectedRecord, sinstrumentid, ...selectedRecord };\r\n                selectedRecord = {...selectedRecord,sinstrumentid };\r\n                isStateChanged = true;\r\n\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.ProjectCode !== previousProps.Login.masterData.ProjectCode) {\r\n                selectedProjectcode = this.props.Login.masterData.selectedProjectedCode ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedProjectedCode.sprojectcode,\r\n                        value: this.props.Login.masterData.selectedProjectedCode.nprojectmastercode,\r\n                        item: this.props.Login.masterData.selectedProjectedCode\r\n                    } : undefined\r\n                let sprojectcode = selectedProjectcode && selectedProjectcode.item;\r\n                selectedRecord = { ...this.state.selectedRecord, sprojectcode, ...selectedRecord };\r\n                isStateChanged = true;\r\n\r\n\r\n            }\r\n\r\n\r\n            if (this.props.Login.userInfo.nformcode !== previousProps.Login.userInfo.nformcode) {\r\n                userRoleControlRights = [];\r\n                if (this.props.Login.userRoleControlRights) {\r\n                    this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode] && Object.values(this.props.Login.userRoleControlRights[this.props.Login.userInfo.nformcode]).map(item =>\r\n                        userRoleControlRights.push(item.ncontrolcode))\r\n                }\r\n                controlMap = getControlMap(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode)\r\n                this.setState({ userRoleControlRights, controlMap });\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.selectedComponentList !== previousProps.Login.selectedComponentList) {\r\n                addedComponentList = this.props.Login.selectedComponentList;\r\n                isStateChanged = true;\r\n                // this.setState({ addedComponentList });\r\n            }\r\n\r\n\r\n            if (this.props.Login.masterData.defaultApprovalConfigVersion !== previousProps.Login.masterData.defaultApprovalConfigVersion) {\r\n                ApprovalVersionValue = this.props.Login.masterData.defaultApprovalConfigVersion ?\r\n                    {\r\n                        label: this.props.Login.masterData.defaultApprovalConfigVersion.sversionname,\r\n                        value: this.props.Login.masterData.defaultApprovalConfigVersion.napprovalconfigversioncode,\r\n                        item: this.props.Login.masterData.defaultApprovalConfigVersion\r\n                    } : \"\"\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.defaultFilterStatus !== previousProps.Login.masterData.defaultFilterStatus) {\r\n                FilterStatusValue = this.props.Login.masterData.defaultFilterStatus ?\r\n                    {\r\n                        label: this.props.Login.masterData.defaultFilterStatus.sfilterstatus,\r\n                        value: this.props.Login.masterData.defaultFilterStatus.ntransactionstatus,\r\n                        item: this.props.Login.masterData.defaultFilterStatus\r\n                    } : \"\"\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedSection !== previousProps.Login.masterData.selectedSection) {\r\n                selectedSection = this.props.Login.masterData.selectedSection ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedSection.ssectionname,\r\n                        value: this.props.Login.masterData.selectedSection.nsectioncode,\r\n                        item: this.props.Login.masterData.selectedSection\r\n                    } : \"\"\r\n                let ssectionname = selectedSection.item;\r\n                selectedRecord = { ...this.state.selectedRecord, ssectionname, ...selectedRecord };\r\n                isStateChanged = true;\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedMaterialType !== previousProps.Login.masterData.selectedMaterialType) {\r\n                selectedMaterialType = this.props.Login.masterData.selectedMaterialType ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialType.smaterialtypename,\r\n                        value: this.props.Login.masterData.selectedMaterialType.nmaterialtypecode,\r\n                        item: this.props.Login.masterData.selectedMaterialType\r\n                    } : \"\"\r\n                selectedRecord[\"smaterialtypename\"] = this.props.Login.masterData.selectedMaterialType.smaterialtypename;\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedMaterialCategory !== previousProps.Login.masterData.selectedMaterialCategory) {\r\n                selectedMaterialCategory = this.props.Login.masterData.selectedMaterialCategory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialCategory.smaterialcatname,\r\n                        value: this.props.Login.masterData.selectedMaterialCategory.nmaterialcatcode,\r\n                        item: this.props.Login.masterData.selectedMaterialCategory\r\n                    } : \"\"\r\n                selectedRecord[\"smaterialcatname\"] = this.props.Login.masterData.selectedMaterialCategory.smaterialcatname;\r\n                isStateChanged = true;\r\n\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedMaterial !== previousProps.Login.masterData.selectedMaterial) {\r\n                selectedMaterial = this.props.Login.masterData.selectedMaterial ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterial.smaterialname,\r\n                        value: this.props.Login.masterData.selectedMaterial.nmaterialcode,\r\n                        item: this.props.Login.masterData.selectedMaterial\r\n                    } : \"\"\r\n                selectedRecord[\"smaterialname\"] = this.props.Login.masterData.selectedMaterial.smaterialname;\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedMaterialInventory !== previousProps.Login.masterData.selectedMaterialInventory) {\r\n                selectedMaterialInventory = this.props.Login.masterData.selectedMaterialInventory ?\r\n                    {\r\n                        label: this.props.Login.masterData.selectedMaterialInventory.sinventoryid,\r\n                        value: this.props.Login.masterData.selectedMaterialInventory.nmaterialinventtranscode,\r\n                        item: this.props.Login.masterData.selectedMaterialInventory\r\n                    } : \"\"\r\n                selectedRecord[\"sinventoryid\"] = this.props.Login.masterData.selectedMaterialInventory && this.props.Login.masterData.selectedMaterialInventory.sinventoryid != null ?\r\n                    this.props.Login.masterData.selectedMaterialInventory.sinventoryid : \"\";\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.selectedInventoryUnit !== previousProps.Login.masterData.selectedInventoryUnit) {\r\n                //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\r\n                selectedRecord[\"savailablequatity\"] = this.props.Login.masterData.selectedInventoryUnit &&\r\n                    this.props.Login.masterData.selectedInventoryUnit.savailablequatity != null ? this.props.Login.masterData.selectedInventoryUnit.savailablequatity : \"\";\r\n                selectedRecord[\"susedquantity\"] = \"\";\r\n                selectedRecord[\"sremarks\"] = \"\";\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.isselectedrecordempty) {\r\n                selectedRecord = {};\r\n                isStateChanged = true;\r\n            }\r\n\r\n\r\n            if (this.props.Login.masterData.Specification !== previousProps.Login.masterData.Specification) {\r\n                //selectedRecord[\"selectedInventoryUnit\"] =this.props.Login.selectedRecord.selectedInventoryUnit;\r\n                Specification = this.props.Login.masterData.Specification &&\r\n                    this.props.Login.masterData.Specification != null ? this.props.Login.masterData.Specification : \"\";\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.selectedSpec !== previousProps.Login.selectedSpec) {\r\n                selectedRecord[\"selectedSpec\"] = this.props.Login.selectedSpec &&\r\n                    this.props.Login.selectedSpec != null ? this.props.Login.selectedSpec : \"\";\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n                selectedRecord = this.props.Login.selectedRecord\r\n                isStateChanged = true;\r\n            }\r\n\r\n            if (this.props.Login.masterData.DynamicDesign && this.props.Login.masterData.DynamicDesign !== previousProps.Login.masterData.DynamicDesign) {\r\n                const dynamicColumn = JSON.parse(this.props.Login.masterData.DynamicDesign.\r\n                    jsondata.value)\r\n                testGridArnoItems = dynamicColumn.testListFields.testlistitem ? dynamicColumn.testListFields.testlistitem : [];\r\n                testGridItem[0] = dynamicColumn.testListFields.releasetestfields[0] ? dynamicColumn.testListFields.releasetestfields[0] : [];\r\n                sampleGridItem = dynamicColumn.samplegriditem ? dynamicColumn.samplegriditem : [];\r\n                subsampleGridItem = dynamicColumn.subsamplelistitem ? dynamicColumn.subsamplelistitem : [];\r\n                samplegridmoreitem = dynamicColumn.samplegridmoreitem ? dynamicColumn.samplegridmoreitem : [];\r\n                DynamicGridMoreItem = [...samplegridmoreitem]\r\n                DynamicGridItem = [...sampleGridItem, ...subsampleGridItem, ...testGridArnoItems.slice(1), ...testGridItem]\r\n                isStateChanged = true;\r\n            }\r\n        }\r\n\r\n\r\n        // if(this.props.Login.selectedRecord !== previousProps.Login.selectedRecord){\r\n        //     // let selectedRecord = {};\r\n        //     let MaterialCategory=constructOptionList(this.props.Login.selectedRecord.MaterialCategory || [], 'nmaterialcatcode', 'smaterialcatname',\r\n        //     'ascending', 'nmaterialcatcode', false);\r\n        //     let Material =constructOptionList(this.props.Login.selectedRecord.Material || [], 'nmaterialcode', 'smaterialname',\r\n        //     'ascending', 'nmaterialcode', false);\r\n        //     let MaterialInventory=constructOptionList(this.props.Login.selectedRecord.MaterialInventory || [], 'nmaterialinventorycode', 'sinventoryid',\r\n        //     'ascending', 'nmaterialinventorycode', false);\r\n        //      MaterialCategory = MaterialCategory.get(\"OptionList\")\r\n        //      Material = Material.get(\"OptionList\")\r\n        //      MaterialInventory = MaterialInventory.get(\"OptionList\")\r\n\r\n        //      selectedRecord[\"MaterialCategory\"]=MaterialCategory\r\n        //      selectedRecord[\"Material\"]=Material\r\n        //      selectedRecord[\"MaterialInventory\"]=MaterialInventory\r\n\r\n        //  if(this.props.Login.selectedRecord.selectedMaterialType !== previousProps.Login.selectedRecord.selectedMaterialType) {\r\n        //         let selectedMaterialType = this.props.Login.selectedRecord.selectedMaterialType ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialType.nmaterialtypecode || this.props.Login.selectedRecord.selectedMaterialType.item.value,\r\n        //             item:  this.props.Login.selectedRecord.selectedMaterialType.item ? this.props.Login.selectedRecord.selectedMaterialType.item : this.props.Login.selectedRecord.selectedMaterialType\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialType\"]=selectedMaterialType;\r\n        //         selectedRecord[\"smaterialtypename\"]=this.props.Login.selectedRecord.selectedMaterialType.smaterialtypename || this.props.Login.selectedRecord.selectedMaterialType.item.smaterialtypename;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //  if (this.props.Login.selectedRecord.selectedMaterialCategory !== previousProps.Login.selectedRecord.selectedMaterialCategory) {\r\n        //         let selectedMaterialCategory = this.props.Login.selectedRecord.selectedMaterialCategory ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname ,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialCategory.nmaterialcatcode || this.props.Login.selectedRecord.selectedMaterialCategory.item.value ,\r\n        //             item:  this.props.Login.selectedRecord.selectedMaterialCategory.item  ? this.props.Login.selectedRecord.selectedMaterialCategory.item  : this.props.Login.selectedRecord.selectedMaterialCategory \r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialCategory\"]=selectedMaterialCategory;\r\n        //         selectedRecord[\"smaterialcatname\"]=this.props.Login.selectedRecord.selectedMaterialCategory.smaterialcatname || this.props.Login.selectedRecord.selectedMaterialCategory.item.smaterialcatname \r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //     if (this.props.Login.selectedRecord.selectedMaterial !== previousProps.Login.selectedRecord.selectedMaterial) {\r\n        //          let selectedMaterial = this.props.Login.selectedRecord.selectedMaterial ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterial.smaterialname,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterial.nmaterialcode,\r\n        //             item: this.props.Login.selectedRecord.selectedMaterial\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterial\"]= selectedMaterial;\r\n        //         selectedRecord[\"smaterialname\"]=this.props.Login.selectedRecord.selectedMaterial.smaterialname;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n        //     if (this.props.Login.selectedRecord.selectedMaterialInventory !== previousProps.Login.selectedRecord.selectedMaterialInventory) {\r\n        //         let selectedMaterialInventory = this.props.Login.selectedRecord.selectedMaterialInventory ?\r\n        //         {\r\n        //             label: this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid,\r\n        //             value: this.props.Login.selectedRecord.selectedMaterialInventory.nmaterialinventorycode,\r\n        //             item: this.props.Login.selectedRecord.selectedMaterialInventory\r\n        //         }:\"\"\r\n        //         selectedRecord[\"selectedMaterialInventory\"]= selectedMaterialInventory;\r\n        //         selectedRecord[\"sinventoryid\"]=this.props.Login.selectedRecord.selectedMaterialInventory.sinventoryid;\r\n        //         isStateChanged = true;\r\n        //     }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            isStateChanged = true;\r\n           selectedRecord = this.props.Login.selectedRecord;\r\n            //this.setState({ selectedRecord: this.props.Login.selectedRecord });\r\n        }\r\n\r\n\r\n\r\n        if (isStateChanged) {\r\n            this.setState({\r\n                userRoleControlRights, controlMap, selectedRecord,\r\n                filterData, addedComponentList,\r\n                filterStatusList, dataState, sahDataState, bahDataState, chDataState,\r\n                testCommentDataState, SampleType, RegistrationType, RegistrationSubType,\r\n                BCFilterStatus, REJobStatus, Testvalues, ApprovalConfigVersion, skip, take,\r\n                testskip, testtake, selectedFilter, selectedInstCategory, InstrumentCategory,\r\n                Instrument, selectedInstrument, selectedTestSynonym, nregsubtypecode,\r\n                ProductCategory, selectedProductCategory, Product, selectedProduct, samples,\r\n                addSelectAll, deleteSelectAll, ApprovalVersionValue, FilterStatusValue, Section,\r\n                selectedSection, sampleGridItem, subsampleGridItem, testGridItem, DynamicGridItem,\r\n                samplegridmoreitem, DynamicGridMoreItem, MaterialCategory, selectedMaterialType,\r\n                Material, selectedMaterial, selectedMaterialCategory, MaterialInventory,\r\n                selectedMaterialInventory, Specification, selectedSpec, addedSamplesList,\r\n                testGridArnoItems, InstrumentID, selectedInstrumentId, sinstrumentid,\r\n                selectedProjectcode, ProjectCode\r\n            });\r\n        }\r\n    }\r\n\r\n    closeModal = () => {\r\n        let loadEsign = this.props.Login.loadEsign;\r\n        let openModal = this.props.Login.openModal;\r\n        let selectedRecord = this.props.Login.selectedRecord;\r\n        let openSpecModal = this.props.Login.openSpecModal;\r\n\r\n        if (this.props.Login.loadEsign) {\r\n            if (this.props.Login.operation === \"delete\" || this.props.Login.operation === \"cancel\") {\r\n                //    this.props.Login.operation === \"complete\") {\r\n                loadEsign = false;\r\n                openModal = false;\r\n            }\r\n            else {\r\n                loadEsign = false;\r\n            }\r\n            selectedRecord[\"esigncomments\"] = \"\";\r\n            selectedRecord[\"esignpassword\"] = \"\";\r\n        } else if (this.props.Login.openSpecModal) {\r\n            loadEsign = false;\r\n            openSpecModal = false\r\n        }\r\n        else {\r\n            openModal = false;\r\n            selectedRecord = {};\r\n        }\r\n\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { openModal, loadEsign, selectedRecord, openSpecModal, selectedId: null }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n\r\n    }\r\n\r\n    onComboChange = (comboData, fieldName) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        let { selectedInstCategory, selectedInstrumentId, InstrumentCategory,\r\n            selectedInstrument, Instrument, InstrumentID } = this.state;\r\n        let inputData = {};\r\n        if (comboData == null) {\r\n            selectedInstCategory = undefined;\r\n            selectedInstrumentId = undefined;\r\n            Instrument = undefined;\r\n            InstrumentID = undefined;\r\n            selectedInstrument = undefined;\r\n            selectedRecord['sinstrumentcatname'] = undefined;\r\n            selectedRecord['sinstrumentname'] = undefined;\r\n            selectedRecord['sinstrumentid'] = undefined;\r\n\r\n            this.setState({\r\n                selectedInstCategory, selectedInstrumentId, selectedInstrument,\r\n                selectedRecord, Instrument, InstrumentID\r\n            });\r\n        } else {\r\n            selectedRecord[fieldName] = comboData.item;\r\n            if (fieldName === \"sproductname\") {\r\n                selectedRecord[\"nproductcode\"] = comboData.value;\r\n                selectedRecord[\"userInfo\"] = this.props.Login.userInfo;\r\n                selectedRecord[\"stestname\"] = this.state.selectedRecord['stestname'];\r\n                selectedRecord[\"ntestcode\"] = this.state.selectedRecord['stestname']['ntestcode'];\r\n                selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                    this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\r\n                selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                //this.setState({ selectedProduct:comboData });\r\n                this.props.getProductBasedInstrument(selectedRecord, this.props.Login.masterData);\r\n            } else if (fieldName === \"ssectionname\") {\r\n                inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                inputData['naddcontrolCode'] = this.props.Login.naddcontrolCode;\r\n                inputData['section'] = selectedRecord.ssectionname;\r\n                inputData['userInfo'] = this.props.Login.userInfo;\r\n                inputData['nneedmyjob'] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue.nneedmyjob : false\r\n                inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                    this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                this.props.getTestInstrumentComboService(inputData, this.props.Login.masterData);\r\n                // this.setState({ selectedSection:comboData });\r\n\r\n            } else if (fieldName === \"stestname\") {\r\n                if (this.props.Login.operation === \"update\") {\r\n                    selectedRecord[\"nprevioustestcode\"] = this.state.selectedTestSynonym.value\r\n                }\r\n                selectedRecord[\"ntestcode\"] = comboData.value;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                selectedRecord[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                    this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n                //selectedRecord[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n                selectedRecord['naddcontrolCode'] = this.props.Login.naddcontrolCode;\r\n                selectedRecord[\"nprojectmastercode\"] = comboData.item.nprojectmastercode;\r\n                selectedRecord['sinstrumentcatname'] = undefined;\r\n                selectedRecord[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n                selectedRecord[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.sregsubtypename ? this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n                this.props.getTestInstrumentCategory(selectedRecord, this.props.Login.masterData);\r\n            } else if (fieldName === \"sinstrumentcatname\") {\r\n                selectedRecord[\"ninstrumentcatcode\"] = comboData.value;\r\n                selectedRecord[\"ncalibrationreq\"] = comboData.item.ncalibrationreq;\r\n                selectedRecord[\"ntestcode\"] = this.state.selectedTestSynonym.value;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                //selectedRecord['sinstrumentid']=undefined;\r\n                selectedRecord['sinstrumentname'] = undefined;\r\n                this.props.getInstrumentForInstCategory(selectedRecord, this.props.Login.masterData);\r\n                //this.props.getInstrumentID(selectedRecord,this.props.Login.masterData);\r\n            } else if (fieldName === \"smaterialcatname\") {\r\n                selectedRecord[\"nmaterialcatcode\"] = comboData.value;\r\n                selectedRecord[\"needsectionwise\"] = comboData.item.needSectionwise;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n                this.setState({ selectedMaterialCategory: comboData });\r\n                this.props.getMaterialBasedOnMaterialCategory(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\r\n            } else if (fieldName === \"smaterialname\") {\r\n                selectedRecord[\"nmaterialcode\"] = comboData.value;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                selectedRecord['needsection'] = comboData.item.needsection;\r\n                selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n                this.setState({ selectedMaterial: comboData });\r\n                this.props.getMaterialInventoryBasedOnMaterial(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\r\n\r\n            } else if (fieldName === \"sinventoryid\") {\r\n                selectedRecord[\"nmaterialcode\"] = this.state.selectedMaterial.value;\r\n                selectedRecord[\"materialInvCode\"] = comboData.item.nmaterialinventorycode;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                selectedRecord['needsection'] = this.props.Login.masterData.selectedMaterial.needsection;\r\n                this.setState({ selectedMaterialInventory: comboData });\r\n                // if(this.state.selectedMaterial.item.needsection == transactionStatus.NO){\r\n                //     selectedRecord['nsectioncode']=transactionStatus.NA;\r\n                // }else{\r\n                selectedRecord['nsectioncode'] = this.props.Login.masterData.SelectedBatchmaster.nsectioncode;\r\n                //}\r\n                this.props.getMaterialAvailQtyBasedOnInv(selectedRecord, this.props.Login.masterData, this.state.selectedMaterialCategory);\r\n            } else if (fieldName === \"sinstrumentname\") {\r\n                selectedRecord[\"ninstrumentnamecode\"] = comboData.value;\r\n                selectedRecord[\"sinstrumentname\"] = comboData.label;\r\n                selectedRecord['userInfo'] = this.props.Login.userInfo;\r\n                //selectedRecord['sinstrumentid']=undefined;\r\n                selectedRecord['selectedInstrument'] = comboData.item;\r\n                selectedRecord['ninstrumentcatcode'] = comboData.item.ninstrumentcatcode;\r\n                selectedRecord['ninstrumentcode'] = comboData.item.ninstrumentcode;\r\n                this.props.getInstrumentID(selectedRecord, this.props.Login.masterData);\r\n            } else if (fieldName === \"sprojectcode\") {\r\n                this.setState({ selectedProjectcode: comboData });\r\n            } else {\r\n                this.setState({ selectedInstrumentId: comboData });\r\n            }\r\n            // else{\r\n            //    // let nInstrumentCategory=\"\",nInstrument=\"\",nInstrumentID=\"\";\r\n            //     this.setState=({InstrumentCategory:{},Instrument:{},\r\n            //         InstrumentID:})\r\n            //   }\r\n        }\r\n    }\r\n\r\n    onNumericInputOnChange = (value, name) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[name] = value;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onInputOnChange = (event) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n\r\n        if (event.target.type === 'checkbox') {\r\n            if (event.target.name === \"ntransactionstatus\")\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.ACTIVE : transactionStatus.DEACTIVE;\r\n            else\r\n                selectedRecord[event.target.name] = event.target.checked === true ? transactionStatus.YES : transactionStatus.NO;\r\n\r\n        }\r\n        else {\r\n            selectedRecord[event.target.name] = event.target.value;\r\n\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onMultiColumnValue = (value, key, flag, label, keys) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n            if (flag) {\r\n                keys.map((objkey, index) => {\r\n                    return selectedRecord[objkey] = { \"label\": value[0][label[index]], \"value\": value[0][objkey] }\r\n                })\r\n            }\r\n        } else {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = \"\";\r\n            });\r\n            keys.map((objkey, index) => {\r\n                return selectedRecord[objkey] = \"\"\r\n            })\r\n        }\r\n        this.props.getBatchManufacturerComboChange(selectedRecord, this.props.Login.userInfo);\r\n    }\r\n\r\n    onMultiColumnMAHChange = (value, key) => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        if (value.length > 0) {\r\n            key.forEach(objarray => {\r\n                selectedRecord[objarray] = value[0][objarray];\r\n            });\r\n        }\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    clearComponentInput = () => {\r\n        const selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[\"nproductcode\"] = undefined;\r\n        selectedRecord[\"ncomponentcode\"] = undefined;\r\n        selectedRecord[\"smanuflotno\"] = \"\";\r\n        selectedRecord[\"dateprompt\"] = transactionStatus.NO;\r\n        selectedRecord[\"transdatefrom\"] = this.props.Login.componentDefaultSearchDate;\r\n        selectedRecord[\"transdateto\"] = this.props.Login.componentDefaultSearchDate;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    openClosePortal = () => {\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ninstrumentcode !== transactionStatus.NA) {\r\n            if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.INITIATED) {\r\n                if (this.props.Login.openELNSheet === undefined || !this.props.Login.openELNSheet) {\r\n                    if (this.props.Login.elnUserInfo !== null || this.props.Login.elnUserInfo != undefined) {\r\n                        this.props.Login.masterData.enlLink = \"\";\r\n                        let integrationSettings = this.props.Login.integrationSettings;\r\n                        let inputParam = {\r\n                            userInfo: this.props.Login.userInfo,\r\n                            elnUserInfo: this.props.Login.elnUserInfo,\r\n                            elnSite: this.props.Login.elnSite,\r\n                            nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster.sbatcharno,\r\n                            ntestcode: this.props.Login.masterData.ntestcode\r\n                        }\r\n                        let link = \"\";\r\n\r\n                        let detail = CF_encryptionData(\"-1//Sheet\").EncryptData;\r\n\r\n                        const settedId = inputParam.nbatchmastercode;\r\n                        //console.log(settedId);\r\n                        let encryptedbatchid = CF_encryptionData(settedId).EncryptData;\r\n                        const userObject = {\r\n                            usercode: inputParam.elnUserInfo.nelncode,\r\n                            username: inputParam.elnUserInfo.selnuserid,\r\n                            userfullname: inputParam.elnUserInfo.selnusername,\r\n                            lsusergroup: {\r\n                                usergroupcode: inputParam.elnUserInfo.nelnusergroupcode,\r\n                                usergroupname: inputParam.elnUserInfo.nelnusergroupcode,\r\n                            },\r\n                            lssitemaster: {\r\n                                sitecode: inputParam.elnSite.nelnsitecode\r\n                            }\r\n                        }\r\n                        let encrypteduser = CF_encryptionData(userObject).EncryptData;\r\n                        const baseURL = integrationSettings[1].slinkname\r\n\r\n                        link = baseURL + \"/vieworder\" + '#{\"d\":\"' + settedId + '\",\"user\":\"' + encrypteduser + '\",\"batchid\":\"' + encryptedbatchid + '\"}';\r\n                        // this.props.getELNTestValidation(test,this.props.Login.integrationSettings); \r\n                        const updateInfo = {\r\n                            typeName: DEFAULT_RETURN,\r\n                            data: {\r\n                                openELNSheet: true,\r\n                                masterData: {\r\n                                    ...this.props.Login.masterData,\r\n                                    enlLink: link,\r\n                                    baseURL: baseURL\r\n                                }\r\n                            }\r\n                        }\r\n                        this.props.updateStore(updateInfo);\r\n                    } else {\r\n                        toast.warn(this.props.intl.formatMessage({ id: \"IDS_ELNSHEETNOTFOUND\" }));\r\n                    }\r\n                } else {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            openELNSheet: false,\r\n                            masterData: {\r\n                                ...this.props.Login.masterData,\r\n                                enlLink: \"\"\r\n                            }\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                }\r\n            } else {\r\n                toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTINITIATEDBATCH\" }));\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTBATCHWITHINSTRUMENT\" }));\r\n        }\r\n    }\r\n\r\n    handleDateChange = (dateName, dateValue) => {\r\n        let selectedRecord = {};\r\n        if (dateValue === null) {\r\n            dateValue = new Date();\r\n        }\r\n        selectedRecord[dateName] = dateValue;\r\n        this.setState({ selectedRecord });\r\n    }\r\n\r\n    onDropImage = (attachedFiles, fieldName) => {\r\n        let selectedRecord = this.state.selectedRecord || {};\r\n        selectedRecord[fieldName] = attachedFiles;\r\n        this.setState({ selectedRecord, actionType: \"new\" });\r\n    }\r\n\r\n    saveSample = (addedsamplelist) => {\r\n        if (addedsamplelist === undefined) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTOSUBMIT\" }));\r\n        } else if (addedsamplelist.length > 0) {\r\n            let sampleArray = [];\r\n            addedsamplelist.map(item =>\r\n                sampleArray.push({\r\n                    npreregno: item.npreregno,\r\n                    ntransactionsamplecode: item.ntransactionsamplecode,\r\n                    ntransactiontestcode: item.ntransactiontestcode,\r\n                    nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster ?\r\n                        this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode : transactionStatus.NA,\r\n                    sarno: item.jsonuidata.samplelist.sarno,\r\n                    ssamplearno: item.jsonuidata.samplelist.ssamplearno,\r\n                    stestname: item.jsonuidata.samplelist.stestname,\r\n                    jsonuidata: {\r\n                        samplelist: item.jsonuidata.samplelist,\r\n                    },\r\n                    jsondata: {\r\n                        samplelist: item.jsondata.samplelist,\r\n                    }\r\n                }\r\n                )\r\n            )\r\n\r\n            let nbatchmastercode = this.props.Login.masterData.SelectedBatchmaster &&\r\n                this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\r\n            // batchSample = {\r\n            //     npreregno: addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\r\n            //     ntransactionsamplecode : addedsamplelist.map(sample=>sample.ntransactionsamplecode).join(\",\"),\r\n            //     ntransactiontestcode : addedsamplelist.map(sample=>sample.ntransactiontestcode).join(\",\"),\r\n            //     npreregno : addedsamplelist.map(sample=>sample.npreregno).join(\",\"),\r\n            //     nbatchmastercode: this.props.Login.masterData.SelectedBatchmaster &&\r\n            //     this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode,\r\n            //     jsonuidata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}',\r\n            //     jsondata :'{ \"batchSample\" : this.props.Login.masterData.SelectedBatchmaster}'\r\n            // }\r\n            //jsondata : \r\n\r\n            const inputParam = {\r\n                inputData: {\r\n                    batchSample: nbatchmastercode,\r\n                    sampleArray,\r\n                    userInfo: this.props.Login.userInfo,\r\n                    masterData: this.props.Login.masterData,\r\n                    nregtypecode: this.props.Login.masterData.defaultRegistrationType ?\r\n                        this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA,\r\n                    nregsubtypecode: this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode\r\n                        : transactionStatus.NA,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA\r\n                }\r\n            }\r\n            this.props.createSampleAction(inputParam.inputData);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTSAMPLESTOSUBMIT\" }));\r\n        }\r\n\r\n    }\r\n\r\n    onSaveClick = (saveType, formRef) => {\r\n\r\n        if (this.props.Login.operation === \"createSample\") {\r\n            this.saveSample(this.state.addedSamplesList)\r\n        } else if (this.props.Login.operation === \"initiate\") {\r\n            this.testStartActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.testStartId)\r\n        } else if (this.props.Login.operation === \"complete\") {\r\n            this.batchCompleteActions(this.props.Login.masterData.SelectedBatchmaster, this.props.Login.completeId)\r\n        } else if (this.props.Login.operation === \"createiqcsample\") {\r\n            this.batchSaveIQCActions(this.props.Login.masterData.SelectedBatchmaster)\r\n        } else {\r\n            let inputData = {};\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            if (this.props.Login.operation === \"create\") {\r\n                inputData[\"fromDate\"] = obj.fromDate;\r\n                inputData[\"toDate\"] = obj.toDate;\r\n            }\r\n\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"nneedcombodataforFilter\"] = \"true\"\r\n            inputData[\"needFilterSubmit\"] = \"false\"\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"nprevioustestcode\"] = this.state.selectedRecord && this.state.selectedRecord.nprevioustestcode != undefined ? this.state.selectedRecord.nprevioustestcode : this.state.selectedTestSynonym.value;\r\n            inputData[\"ntestcode\"] = this.state.selectedTestSynonym ? this.state.selectedTestSynonym.value : transactionStatus.NA;\r\n            inputData[\"nsectioncode\"] = this.state.selectedSection ? this.state.selectedSection.item.nsectioncode : transactionStatus.NA;\r\n            //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType.nsampletypecode;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType.nregtypecode;\r\n            //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.value :transactionStatus.NA;\r\n            inputData[\"ninstrumentcatcode\"] = this.state.selectedInstCategory ? this.state.selectedInstCategory.value : transactionStatus.NA;\r\n            inputData[\"ninstrumentcode\"] = this.state.selectedInstrument ? this.state.selectedInstrument.value : transactionStatus.NA;\r\n            inputData[\"nproductcode\"] = this.state.selectedProduct ? this.state.selectedProduct.value : transactionStatus.NA;\r\n            inputData[\"ntransactionstatus\"] = transactionStatus.DRAFT;\r\n            inputData[\"sbatcharno\"] = '-';\r\n            // inputData[\"defaultSampleType\"]=this.props.Login.masterData.realSampleTypeValue ? \r\n            // this.props.Login.masterData.realSampleTypeValue : transactionStatus.NA;\r\n            // inputData[\"defaultRegistrationType\"]=this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? \r\n            // this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\r\n            // inputData[\"defaultRegistrationSubType\"]=this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue ? \r\n            // this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n           // inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n          inputData[\"ntranscode\"] = transactionStatus.DRAFT;\r\n\r\n           \r\n           inputData[\"sinstrumentid\"] = this.state.selectedInstrumentId ? this.state.selectedInstrumentId.label:\"NA\";\r\n            // inputData[\"napprovalconfigcode\"]=this.state.ApprovalVersionValue ? \r\n            // this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n            // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA;\r\n            inputData[\"nprojectmastercode\"] = this.state.selectedProjectcode ? this.state.selectedProjectcode.value : transactionStatus.NA;\r\n            let postParam = undefined;\r\n            postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                unchangeList: [\"FromDate\", \"ToDate\"], isSingleGet: true,\r\n                fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\"\r\n            };\r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                inputData: inputData,\r\n                postParam,\r\n                searchRef: this.searchRef,\r\n                operation: this.props.Login.operation,\r\n                saveType,\r\n                formRef,\r\n            }\r\n            if (this.props.Login.operation === \"create\") {\r\n                this.searchRef.current.value = \"\";\r\n                this.props.createBatchmasterAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\r\n            } else {\r\n                inputData[\"nbatchmastercode\"] = this.props.Login.masterData.SelectedBatchmaster.nbatchmastercode;\r\n                inputData[\"SelectedBatchmaster\"] = this.props.Login.masterData.SelectedBatchmaster;\r\n                if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.editId)) {\r\n                    const updateInfo = {\r\n                        typeName: DEFAULT_RETURN,\r\n                        data: {\r\n                            loadEsign: true, screenData: {\r\n                                inputParam,\r\n                                masterData: this.props.Login.masterData\r\n                            },\r\n                            openModal: true,\r\n                            screenName: \"IDS_BATCHCREATION\",\r\n                            operation: inputParam.operation\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n                } else {\r\n                    this.props.updateBatchcreationAction(inputParam[\"inputData\"], this.props.Login.masterData, inputParam[\"operation\"]);\r\n                }\r\n            }\r\n        }\r\n        // const esignNeeded = showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolCode);\r\n        // if (esignNeeded) {\r\n        //     const updateInfo = {\r\n        //         typeName: DEFAULT_RETURN,\r\n        //         data: {\r\n        //             loadEsign: true, screenData: { inputParam, masterData: this.props.Login.masterData },\r\n        //             openModal: true, screenName: \"IDS_BATCHCREATION\",\r\n        //             operation: this.props.Login.operation\r\n        //         }\r\n        //     }\r\n        //     this.props.updateStore(updateInfo);\r\n        // }\r\n        // else {\r\n        //     const selectedRecord = { ...this.state.selectedRecord, sbatchfillinglotno: \"\" }\r\n        //     this.props.crudMaster(inputParam, this.props.Login.masterData, \"openModal\", selectedRecord);\r\n        // }\r\n    }\r\n\r\n    deleteBatchCreation = (selectedBatch, deleteId, operation) => {\r\n        if (selectedBatch.ntransactionstatus === transactionStatus.COMPLETED ||\r\n            selectedBatch.ntransactionstatus === transactionStatus.INITIATED ||\r\n            selectedBatch.ntransactionstatus === transactionStatus.CANCELLED) {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_BATCHALREADYINITIATEDCOMPLETED\" }));\r\n        }\r\n        else {\r\n            let inputData = {};\r\n            const masterData = this.props.Login.masterData;\r\n            const postParam = {\r\n                inputListName: \"Batchmaster\",\r\n                selectedObject: \"SelectedBatchmaster\",\r\n                primaryKeyField: \"nbatchmastercode\",\r\n                primaryKeyValue: selectedBatch.nbatchmastercode,\r\n                fetchUrl: \"batchcreation/getActiveSelectedBatchmaster\",\r\n                isSingleGet: true,\r\n                //task: selectedBatch.ntransactionstatus === transactionStatus.DRAFT ? \"delete\" : \"cancel\",\r\n                fecthInputObject: {\r\n                    userInfo: this.props.Login.userInfo,\r\n                    ndesigntemplatemappingcode: this.props.Login.masterData.ndesigntemplatemappingcode ? this.props.Login.masterData.ndesigntemplatemappingcode : transactionStatus.NA,\r\n                    nsampletypecode: this.props.Login.masterData.defaultSampleType.nsampletypecode\r\n                },\r\n            }\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"currentdate\"] = formatInputDate(new Date(), true)\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue ?\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nsampletypecode\"]=this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            //inputData[\"nregtypecode\"]=this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            //inputData[\"nregsubtypecode\"]=this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n            inputData[\"nbatchmastercode\"] = selectedBatch.nbatchmastercode;\r\n            //inputData[\"ntranscode\"] = this.state.FilterStatusValue ? this.state.FilterStatusValue.value : transactionStatus.DRAFT;\r\n            inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value===transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1=>item1.item.ntransactionstatus!==transactionStatus.ALL).map(item1=>item1.item.ntransactionstatus).join(\",\") : this.state.FilterStatusValue.value;\r\n\r\n            // inputData[\"napprovalversioncode\"]=this.state.ApprovalVersionValue ?\r\n            // this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ?\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode : transactionStatus.NA;\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion &&\r\n                this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode : transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n            inputData[\"selectedBatch\"] = selectedBatch;\r\n            inputData[\"samples\"] = this.props.Login.masterData.Samples;\r\n            const inputParam = {\r\n                postParam,\r\n                inputData: inputData,\r\n                operation,\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchcreation\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n            }\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, deleteId)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData },\r\n                        openModal: true, screenName: \"IDS_BATCHCREATION\", operation\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openModal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    fetchEditData = (editParam) => {\r\n        if (this.props.Login.masterData.SelectedBatchmaster.ntransactionstatus == transactionStatus.DRAFT) {\r\n            this.props.getActiveBatchCreationService(editParam,\r\n                this.props.Login.masterData.SelectedBatchmaster)\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTDRAFTBATCH\" }));\r\n        }\r\n    }\r\n\r\n\r\n    validateEsign = () => {\r\n        const inputParam = {\r\n            inputData: {\r\n                \"userinfo\": {\r\n                    ...this.props.Login.userInfo,\r\n                    sreason: this.state.selectedRecord[\"esigncomments\"]\r\n                },\r\n                password: this.state.selectedRecord[\"esignpassword\"]\r\n            },\r\n            screenData: this.props.Login.screenData\r\n        }\r\n\t\t//ALPD-3399\r\n        if(this.props.Login.operation==\"complete\"|| this.props.Login.operation==\"initiate\"){\r\n            this.props.validateEsignforBatch(inputParam,);\r\n        }else{\r\n            this.props.validateEsignCredential(inputParam, \"openModal\");\r\n        }\r\n       \r\n    }\r\n    closeFilter = () => {\r\n        let inputValues = {\r\n            fromDate:this.props.Login.masterData.realFromDate||new Date(),//this.state.selectedFilter[\"fromDate\"] != undefined ?\r\n                //rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"fromDate\"]) : this.fromDate,\r\n            toDate:  this.props.Login.masterData.realToDate||new Date(), //this.state.selectedFilter[\"toDate\"] != undefined ?\r\n               // rearrangeDateFormat(this.props.Login.userInfo, this.state.selectedFilter[\"toDate\"]) : this.toDate,\r\n            SampleType: this.props.Login.masterData.realSampleTypeList || [],\r\n            SampleTypeValue: this.props.Login.masterData.realSampleTypeValue || {},\r\n            defaultSampleType: this.props.Login.masterData.realSampleTypeValue || {},\r\n            RegistrationType: this.props.Login.masterData.realRegistrationTypeList || [],\r\n            RegTypeValue: this.props.Login.masterData.realRegTypeValue || {},\r\n            defaultRegistrationType: this.props.Login.masterData.realRegTypeValue || {},\r\n            RegistrationSubType: this.props.Login.masterData.realRegistrationSubTypeList || [],\r\n            RegSubTypeValue: this.props.Login.masterData.realRegSubTypeValue || {},\r\n            FilterStatus: this.props.Login.masterData.realBCFilterStatusList || [],\r\n            FilterStatusValue: this.props.Login.masterData.realdefaultFilterStatus || {},\r\n            ApprovalConfigVersion: this.props.Login.masterData.realApprovalConfigVersionList || [],\r\n            ApprovalVersionValue: this.props.Login.masterData.realApproveConfigVersion || {},\r\n            defaultFilterStatus:this.props.Login.masterData.realdefaultFilterStatus || {},\r\n            defaultApprovalConfigVersion:this.props.Login.masterData.realApproveConfigVersion || {},\r\n            defaultRegistrationSubType:this.props.Login.masterData.realRegSubTypeValue || {},\r\n            ndesigntemplatemappingcode:this.props.Login.masterData.realndesigntemplatemappingcode || -1\r\n        }\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: { showFilter: false, masterData: { ...this.props.Login.masterData, ...inputValues } },\r\n        };\r\n        this.props.updateStore(updateInfo);\r\n    }\r\n    onFilterSubmit = () => {\r\n\r\n        if (this.props.Login.masterData.defaultRegistrationType != undefined && this.state.FilterStatusValue.item != undefined && this.state.nregsubtypecode.item != undefined &&\r\n            this.state.ApprovalVersionValue.item != undefined\r\n        ) {\r\n            let inputData = {};\r\n\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.fromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.toDate, this.props.Login.userInfo);\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"realFromDate\"] = obj.fromDate;\r\n            inputData[\"realToDate\"] = obj.toDate;\r\n            inputData[\"needFilterSubmit\"] = \"true\";\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.defaultSampleType ? this.props.Login.masterData.defaultSampleType.nsampletypecode : transactionStatus.NA;\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.defaultRegistrationType ? this.props.Login.masterData.defaultRegistrationType.nregtypecode : transactionStatus.NA;\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.defaultRegistrationType\r\n            inputData[\"defaultRegistrationSubType\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item : transactionStatus.NA;\r\n            inputData[\"nregsubtypecode\"] = this.state.nregsubtypecode ? this.state.nregsubtypecode.item.nregsubtypecode : transactionStatus.NA;\r\n           // inputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value===0 ? this.state.BCFilterStatus.map(item1=>\"'\"+item1.item.ntransactionstatus+\"'\").join(\",\") : this.state.FilterStatusValue.value;\r\n\t\t\t//ALPD-3399          \r\n \t\t\tinputData[\"ntranscode\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.value===transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1=>item1.item.ntransactionstatus!==transactionStatus.ALL).map(item1=>item1.item.ntransactionstatus).join(\",\") : this.state.FilterStatusValue.value;\r\n\r\n           inputData[\"napprovalconfigcode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigcode : transactionStatus.NA;\r\n            //  inputData[\"napprovalconfigcode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n            //  this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode ? this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode: transactionStatus.NA;\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue ?\r\n                this.state.ApprovalVersionValue.item.napprovalconfigversioncode : transactionStatus.NA;\r\n            // inputData[\"napprovalversioncode\"]=this.props.Login.masterData.realApproveConfigVersion && \r\n            //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode ? \r\n            //    this.props.Login.masterData.realApproveConfigVersion.napprovalconfigversioncode: transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode ||\r\n            transactionStatus.NA;\r\n        //inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\r\n       // inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\r\n\r\n        inputData[\"realRegistrationTypeList\"] = this.props.Login.masterData.RegistrationType;\r\n        inputData[\"realRegTypeValue\"] =this.props.Login.masterData.defaultRegistrationType;\r\n        inputData[\"realRegistrationSubTypeList\"] = this.props.Login.masterData.RegistrationSubType;\r\n        inputData[\"realRegSubTypeValue\"] =this.props.Login.masterData.defaultRegistrationSubType;\r\n        inputData[\"realBCFilterStatusList\"] =this.props.Login.masterData.BCFilterStatus;\r\n        inputData[\"realdefaultFilterStatus\"] = this.state.FilterStatusValue!==undefined? this.state.FilterStatusValue && this.state.FilterStatusValue.item :this.props.Login.masterData.defaultFilterStatus;\r\n        inputData[\"realApprovalConfigVersionList\"] = this.props.Login.masterData.ApprovalConfigVersion;\r\n        //inputData[\"realApproveConfigVersion\"] = this.props.Login.masterData.defaultApprovalConfigVersion;\r\n        inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue!==undefined? this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item :this.props.Login.masterData.defaultApprovalConfigVersion;\r\n\r\n        inputData[\"realndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode;\r\n        inputData[\"operation\"]=\"filtersubmit\";\r\n            \r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchmaster\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                inputData: inputData,\r\n                searchRef: this.searchRef,\r\n            }\r\n            this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n    }\r\n\r\n    reloadData = (isFilterSubmit) => {\r\n        this.searchRef.current.value = \"\";\r\n        // let obj = this.convertDatetoString((selectedRecord && selectedRecord[\"fromdate\"]) || this.props.Login.masterData.FromDate, (selectedRecord && selectedRecord[\"todate\"]) || this.props.Login.masterData.ToDate)\r\n        if (this.props.Login.masterData.realRegTypeValue !== transactionStatus.NA ||\r\n            this.props.Login.masterData.realRegTypeValue !== null &&\r\n            this.props.Login.masterData.realRegSubTypeValue !== transactionStatus.NA ||\r\n            this.props.Login.masterData.realRegSubTypeValue !== null &&\r\n            this.props.Login.masterData.realApproveConfigVersion !== transactionStatus.NA ||\r\n            this.props.Login.masterData.realApproveConfigVersion !== null &&\r\n            this.props.Login.masterData.defaultFilterStatus !== transactionStatus.NA ||\r\n            this.props.Login.masterData.defaultFilterStatus !== null) {\r\n\r\n            let inputData = {};\r\n            let obj = convertDateValuetoString(this.state.selectedFilter.fromDate || this.props.Login.masterData.realFromDate,\r\n                this.state.selectedFilter.toDate || this.props.Login.masterData.realToDate, this.props.Login.userInfo);\r\n            inputData[\"fromDate\"] = obj.fromDate;\r\n            inputData[\"toDate\"] = obj.toDate;\r\n            inputData[\"userInfo\"] = this.props.Login.userInfo;\r\n\r\n            inputData[\"nsampletypecode\"] = this.props.Login.masterData.realSampleTypeValue &&\r\n                this.props.Login.masterData.realSampleTypeValue.nsampletypecode ? this.props.Login.masterData.realSampleTypeValue.nsampletypecode : transactionStatus.NA;\r\n\r\n            inputData[\"nregtypecode\"] = this.props.Login.masterData.realRegTypeValue && this.props.Login.masterData.realRegTypeValue.nregtypecode ?\r\n                this.props.Login.masterData.realRegTypeValue.nregtypecode : transactionStatus.NA;\r\n\r\n            inputData[\"nregsubtypecode\"] = this.props.Login.masterData.realRegSubTypeValue && this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode ?\r\n                this.props.Login.masterData.realRegSubTypeValue.nregsubtypecode : transactionStatus.NA;\r\n\r\n            inputData[\"defaultSampleType\"] = this.props.Login.masterData.defaultSampleType;\r\n\r\n            inputData[\"defaultRegistrationType\"] = this.props.Login.masterData.realRegTypeValue ? this.props.Login.masterData.realRegTypeValue : transactionStatus.NA;\r\n\r\n            inputData[\"defaultRegistrationSubType\"] = this.props.Login.masterData.realRegSubTypeValue ? this.props.Login.masterData.realRegSubTypeValue : transactionStatus.NA;\r\n\r\n            //inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus || transactionStatus.NA;\r\n            inputData[\"ntranscode\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus===transactionStatus.ALL ? this.state.BCFilterStatus.filter(item1=>item1.item.ntransactionstatus!==transactionStatus.ALL).map(item1=>item1.item.ntransactionstatus).join(\",\") :this.props.Login.masterData.realdefaultFilterStatus.ntransactionstatus;\r\n\r\n            inputData[\"napprovalconfigcode\"] = this.props.Login.masterData.realApproveConfigVersion && this.props.Login.masterData.realApproveConfigVersion.napprovalconfigcode || transactionStatus.NA;\r\n\r\n            inputData[\"realApproveConfigVersion\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item || transactionStatus.NA;\r\n\r\n            inputData[\"napprovalversioncode\"] = this.state.ApprovalVersionValue && this.state.ApprovalVersionValue.item.napprovalconfigversioncode || transactionStatus.NA;\r\n\r\n            //inputData[\"defaultFilterStatus\"]=this.state.FilterStatusValue && this.state.FilterStatusValue.item || transactionStatus.NA;\r\n            inputData[\"defaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\r\n            inputData[\"realdefaultFilterStatus\"] = this.props.Login.masterData.realdefaultFilterStatus && this.props.Login.masterData.realdefaultFilterStatus || transactionStatus.NA;\r\n            inputData[\"ndesigntemplatemappingcode\"] = this.props.Login.masterData.ndesigntemplatemappingcode || transactionStatus.NA;\r\n            inputData[\"realRegistrationTypeList\"] =this.props.Login.masterData.realRegistrationTypeList;\r\n            inputData[\"realRegTypeValue\"]=this.props.Login.masterData.realRegTypeValue ;\r\n            inputData[\"realRegistrationSubTypeList\"] =this.props.Login.masterData.realRegistrationSubTypeList;\r\n            inputData[\"realRegSubTypeValue\"] =this.props.Login.masterData.realRegSubTypeValue;\r\n            inputData[\"realBCFilterStatusList\"]=this.props.Login.masterData.realBCFilterStatusList;\r\n            inputData[\"realdefaultFilterStatus\"] =this.state.FilterStatusValue!==undefined? this.state.FilterStatusValue && this.state.FilterStatusValue.item :this.props.Login.masterData.realdefaultFilterStatus;\r\n            inputData[\"realApprovalConfigVersionList\"] =this.props.Login.masterData.realApprovalConfigVersionList;\r\n            inputData[\"realApproveConfigVersion\"]=this.props.Login.masterData.realApproveConfigVersion ;\r\n            inputData[\"realndesigntemplatemappingcode\"]=this.props.Login.masterData.realndesigntemplatemappingcode;\r\n            const inputParam = {\r\n                classUrl: \"batchcreation\",\r\n                methodUrl: \"Batchmaster\",\r\n                displayName: \"IDS_BATCHCREATION\",\r\n                inputData: inputData,\r\n                searchRef: this.searchRef,\r\n            }\r\n\r\n            this.props.onActionFilterSubmit(inputParam[\"inputData\"], this.props.Login.masterData);\r\n        } else {\r\n\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" }));\r\n        }\r\n    }\r\n\r\n\r\n    // addtest=(addParam)=>{\r\n    //     if(this.props.Login.masterData.Batchmaster == undefined ){\r\n    //         toast.warn(this.props.intl.formatMessage({ id: \"IDS_SELECTALLVALUESINFILTER\" })); \r\n    //     }else{\r\n    //         this.props.getTestInstrumentComboService(addParam)\r\n    //     }\r\n    // }\r\n\r\n    // convertDatetoString(startDateValue, endDateValue) {\r\n    //     const startDate = new Date(startDateValue);\r\n    //     const endDate = new Date(endDateValue);\r\n\r\n    //     const prevMonth = validateTwoDigitDate(String(startDate.getMonth() + 1));\r\n    //     const currentMonth = validateTwoDigitDate(String(endDate.getMonth() + 1));\r\n    //     const prevDay = validateTwoDigitDate(String(startDate.getDate()));\r\n    //     const currentDay = validateTwoDigitDate(String(endDate.getDate()));\r\n\r\n    //     const fromDateOnly = startDate.getFullYear() + '-' + prevMonth + '-' + prevDay\r\n    //     const toDateOnly = endDate.getFullYear() + '-' + currentMonth + '-' + currentDay\r\n    //     const fromDate = fromDateOnly + \"T00:00:00\";\r\n    //     const toDate = toDateOnly + \"T23:59:59\";\r\n    //     return ({ fromDate, toDate, breadCrumbFrom: fromDateOnly, breadCrumbto: toDateOnly })\r\n    // }\r\n\r\n    onClickReport = (selectedRecord, flag, ncontrolcode) => {\r\n        const reportParam = {\r\n            classUrl: \"certificategeneration\",\r\n            methodUrl: \"reportGeneration\",\r\n            screenName: \"CertificateGeneration\",\r\n            operation: \"previewReport\",\r\n            primaryKeyField: \"nreleasebatchcode\",\r\n            inputParam: this.props.Login.inputParam,\r\n            userInfo: this.props.Login.userInfo,\r\n            ncontrolCode: -1,\r\n            inputData: {\r\n                sprimarykeyname: 'nreleasebatchcode',\r\n                nprimarykey: selectedRecord.nreleasebatchcode,\r\n                nreleasebatchcode: selectedRecord.nreleasebatchcode,\r\n                ncertificatetypecode: selectedRecord.ndecision === transactionStatus.PASS && flag === 1 ? selectedRecord.ncertificatetypecode : -1,\r\n                ndecisionstatus: selectedRecord.ndecision,// === transactionStatus.DRAFT ? transactionStatus.PASS : selectedRecord.ndecision,\r\n                nreporttypecode: flag === 2 ? reportTypeEnum.SCREENWISE : reportTypeEnum.BATCH,\r\n                ncontrolcode,\r\n                ncoareporttypecode: flag === 2 ? -1 : reportCOAType.BATCHPREVIEW,\r\n                userinfo: this.props.Login.userInfo,\r\n                nflag: flag,\r\n                skipbatchvalidation: true,\r\n            }\r\n        };\r\n        this.props.onClickReport(reportParam)\r\n    }\r\n\r\n    reportMethod = (value) => {\r\n        if (value.method === 1) {\r\n            this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 2, value.controlId);\r\n        }\r\n        else {\r\n            this.onClickReport(this.props.Login.masterData.SelectedBatchCreation, 1, value.controlId);\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, {\r\n    callService, crudMaster, updateStore,\r\n    getTestInstrumentComboService, getTestInstrumentCategory, getInstrumentForInstCategory,\r\n    getProductBasedInstrument,\r\n    getBatchCreationDetails, onActionFilterSubmit, getProductcategoryAction,\r\n    createBatchmasterAction, getSamplesForGrid, getSelectedBatchCreationDetail,\r\n    createSampleAction, deleteSampleAction, getActiveBatchCreationService,\r\n    updateBatchcreationAction, deleteBatchCreation, batchInitiateAction,\r\n    getBCRegistrationSubType, batchCompleteAction, validateEsignCredential,\r\n    filterColumnData, getBatchhistoryAction,\r\n    getBatchSection, viewInfo, getIqcSamples, getMaterialBasedOnMaterialCategory,\r\n    getMaterialInventoryBasedOnMaterial, batchSaveIQCActions, getMaterialAvailQtyBasedOnInv,\r\n    getBatchIqcSampleAction, getBCApprovalConfigVersion, getBCRegistrationType,\r\n    getTreeByMaterial, getNewRegSpecification, cancelIQCSampleAction, batchCancelAction,\r\n    batchInitiateDatePopup, batchCompleteDatePopup, getInstrumentID, getBatchViewResultAction,validateEsignforBatch\r\n    //,batchTAT\r\n})(injectIntl(BatchCreation));\r\n\r\n"]},"metadata":{},"sourceType":"module"}