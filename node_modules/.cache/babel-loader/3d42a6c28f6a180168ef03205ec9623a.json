{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport SqlStringOrig from \"sqlstring\";\nexport var SqlString = SqlStringOrig;\n\nSqlString.trim = function (val) {\n  if (val.charAt(0) == \"'\") return val.substring(1, val.length - 1);else return val;\n};\n\nSqlString.escapeLike = function (val) {\n  var any_start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var any_end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true; // normal escape\n\n  var res = SqlString.escape(val); // unwrap ''\n\n  res = SqlString.trim(res); // escape % and _\n\n  res = res.replace(/[%_]/g, \"\\\\$&\"); // wrap with % for LIKE\n\n  res = (any_start ? \"%\" : \"\") + res + (any_end ? \"%\" : \"\"); // wrap ''\n\n  res = \"'\" + res + \"'\";\n  return res;\n};\n\nexport var sqlEmptyValue = function sqlEmptyValue(fieldDef) {\n  var v = \"''\";\n  var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;\n\n  if (type == \"date\") {\n    //todo: support other SQL dialects?  0001-01-01 for oracle, 1970-01-01 for timestamp\n    v = \"'0000-00-00'\";\n  } else if (type == \"datetime\") {\n    v = \"'0000-00-00 00:00'\";\n  } else if (type == \"time\") {\n    v = \"'00:00'\";\n  } else if (type == \"number\") {\n    v = \"0\";\n  }\n\n  return v;\n};\nexport var mongoEmptyValue = function mongoEmptyValue(fieldDef) {\n  var v = \"\";\n  var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;\n\n  if (type == \"number\") {\n    v = 0;\n  }\n\n  return v;\n};\n\nvar spelEscapeString = function spelEscapeString(val) {\n  // Strings are delimited by single quotes. To put a single quote itself in a string, use two single quote characters. \n  return \"'\" + val.replace(/'/g, \"''\") + \"'\";\n};\n\nvar spelInlineList = function spelInlineList(vals) {\n  var toArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false; // find java type of values\n\n  var javaType;\n  var jt;\n  var numberJavaTypes = [\"int\", \"float\"];\n  vals.map(function (v) {\n    if (v !== undefined && v !== null) {\n      if (typeof v === \"string\") {\n        jt = \"String\";\n      } else if (typeof v === \"number\") {\n        jt = Number.isInteger(v) ? \"int\" : \"float\";\n      } else throw new Error(\"spelEscape: Can't use value \".concat(v, \" in array\"));\n\n      if (!javaType) {\n        javaType = jt;\n      } else if (javaType != jt) {\n        if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {\n          // found int and float in collecton - use float\n          javaType = \"float\";\n        } else throw new Error(\"spelEscape: Can't use different types in array: found \".concat(javaType, \" and \").concat(jt));\n      }\n    }\n  });\n\n  if (!javaType) {\n    javaType = \"String\"; //default if empty array\n  } // for floats we should add 'f' to all items\n\n\n  var escapedVals;\n\n  if (javaType == \"float\") {\n    escapedVals = vals.map(function (v) {\n      return spelEscape(v, true);\n    });\n  } else {\n    escapedVals = vals.map(function (v) {\n      return spelEscape(v);\n    });\n  } // build inline list or array\n\n\n  var res;\n\n  if (toArray) {\n    res = \"new \".concat(javaType, \"[]{\").concat(escapedVals.join(\", \"), \"}\");\n  } else {\n    res = \"{\".concat(escapedVals.join(\", \"), \"}\");\n  }\n\n  return res;\n};\n\nexport var spelFixList = function spelFixList(val) {\n  // `{1,2}.contains(1)` NOT works\n  // `{1,2}.?[true].contains(1)` works\n  return \"\".concat(val, \".?[true]\");\n};\nexport var spelEscape = function spelEscape(val) {\n  var numberToFloat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var arrayToArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false; // https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html#expressions-ref-literal\n\n  if (val === undefined || val === null) {\n    return \"null\";\n  }\n\n  switch (_typeof(val)) {\n    case \"boolean\":\n      return val ? \"true\" : \"false\";\n\n    case \"number\":\n      if (!Number.isFinite(val) || isNaN(val)) return undefined;\n      return val + (!Number.isInteger(val) || numberToFloat ? \"f\" : \"\");\n\n    case \"object\":\n      if (Array.isArray(val)) {\n        return spelInlineList(val, arrayToArray);\n      } else {\n        // see `spelFormatValue` for Date, LocalTime\n        throw new Error(\"spelEscape: Object is not supported\");\n      }\n\n    default:\n      return spelEscapeString(val);\n  }\n};\nexport var spelFormatConcat = function spelFormatConcat(parts) {\n  if (parts && Array.isArray(parts) && parts.length) {\n    return parts.map(function (part) {\n      if (part.type == \"const\") {\n        return spelEscape(part.value);\n      } else if (part.type == \"property\") {\n        return \"\" + part.value;\n      } else if (part.type == \"variable\") {\n        return \"#\" + part.value;\n      }\n\n      return undefined;\n    }).filter(function (r) {\n      return r != undefined;\n    }).join(\" + \");\n  } else {\n    return \"null\";\n  }\n}; // `val` is {value, valueType, valueSrc}\n// If `valueType` == \"case_value\", `value` is array of such items (to be considered as concatenation)\n\nexport var spelImportConcat = function spelImportConcat(val) {\n  if (val == undefined) return [undefined, []];\n  var errors = [];\n  var parts = val.valueType == \"case_value\" ? val.value : [val];\n  var res = parts.map(function (child) {\n    if (child.valueSrc == \"value\") {\n      if (child.value === null) {\n        return undefined;\n      } else {\n        return {\n          type: \"const\",\n          value: child.value\n        };\n      }\n    } else if (child.valueSrc == \"field\") {\n      return {\n        type: child.isVariable ? \"variable\" : \"property\",\n        value: child.value\n      };\n    } else {\n      errors.push(\"Unsupported valueSrc \".concat(child.valueSrc, \" in concatenation\"));\n    }\n  }).filter(function (v) {\n    return v != undefined;\n  });\n  return [res, errors];\n};\nexport var stringifyForDisplay = function stringifyForDisplay(v) {\n  return v == null ? \"NULL\" : v.toString();\n};","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/SOURCE-512/QuaLISWeb/node_modules/@react-awesome-query-builder/core/esm/utils/export.js"],"names":["_typeof","SqlStringOrig","SqlString","trim","val","charAt","substring","length","escapeLike","any_start","arguments","undefined","any_end","res","escape","replace","sqlEmptyValue","fieldDef","v","type","mongoEmptyValue","spelEscapeString","spelInlineList","vals","toArray","javaType","jt","numberJavaTypes","map","Number","isInteger","Error","concat","includes","escapedVals","spelEscape","join","spelFixList","numberToFloat","arrayToArray","isFinite","isNaN","Array","isArray","spelFormatConcat","parts","part","value","filter","r","spelImportConcat","errors","valueType","child","valueSrc","isVariable","push","stringifyForDisplay","toString"],"mappings":"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","sourcesContent":["import _typeof from \"@babel/runtime/helpers/typeof\";\nimport SqlStringOrig from \"sqlstring\";\nexport var SqlString = SqlStringOrig;\nSqlString.trim = function (val) {\n  if (val.charAt(0) == \"'\") return val.substring(1, val.length - 1);else return val;\n};\nSqlString.escapeLike = function (val) {\n  var any_start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var any_end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  // normal escape\n  var res = SqlString.escape(val);\n  // unwrap ''\n  res = SqlString.trim(res);\n  // escape % and _\n  res = res.replace(/[%_]/g, \"\\\\$&\");\n  // wrap with % for LIKE\n  res = (any_start ? \"%\" : \"\") + res + (any_end ? \"%\" : \"\");\n  // wrap ''\n  res = \"'\" + res + \"'\";\n  return res;\n};\nexport var sqlEmptyValue = function sqlEmptyValue(fieldDef) {\n  var v = \"''\";\n  var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;\n  if (type == \"date\") {\n    //todo: support other SQL dialects?  0001-01-01 for oracle, 1970-01-01 for timestamp\n    v = \"'0000-00-00'\";\n  } else if (type == \"datetime\") {\n    v = \"'0000-00-00 00:00'\";\n  } else if (type == \"time\") {\n    v = \"'00:00'\";\n  } else if (type == \"number\") {\n    v = \"0\";\n  }\n  return v;\n};\nexport var mongoEmptyValue = function mongoEmptyValue(fieldDef) {\n  var v = \"\";\n  var type = fieldDef === null || fieldDef === void 0 ? void 0 : fieldDef.type;\n  if (type == \"number\") {\n    v = 0;\n  }\n  return v;\n};\nvar spelEscapeString = function spelEscapeString(val) {\n  // Strings are delimited by single quotes. To put a single quote itself in a string, use two single quote characters. \n  return \"'\" + val.replace(/'/g, \"''\") + \"'\";\n};\nvar spelInlineList = function spelInlineList(vals) {\n  var toArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  // find java type of values\n  var javaType;\n  var jt;\n  var numberJavaTypes = [\"int\", \"float\"];\n  vals.map(function (v) {\n    if (v !== undefined && v !== null) {\n      if (typeof v === \"string\") {\n        jt = \"String\";\n      } else if (typeof v === \"number\") {\n        jt = Number.isInteger(v) ? \"int\" : \"float\";\n      } else throw new Error(\"spelEscape: Can't use value \".concat(v, \" in array\"));\n      if (!javaType) {\n        javaType = jt;\n      } else if (javaType != jt) {\n        if (numberJavaTypes.includes(javaType) && numberJavaTypes.includes(jt)) {\n          // found int and float in collecton - use float\n          javaType = \"float\";\n        } else throw new Error(\"spelEscape: Can't use different types in array: found \".concat(javaType, \" and \").concat(jt));\n      }\n    }\n  });\n  if (!javaType) {\n    javaType = \"String\"; //default if empty array\n  }\n\n  // for floats we should add 'f' to all items\n  var escapedVals;\n  if (javaType == \"float\") {\n    escapedVals = vals.map(function (v) {\n      return spelEscape(v, true);\n    });\n  } else {\n    escapedVals = vals.map(function (v) {\n      return spelEscape(v);\n    });\n  }\n\n  // build inline list or array\n  var res;\n  if (toArray) {\n    res = \"new \".concat(javaType, \"[]{\").concat(escapedVals.join(\", \"), \"}\");\n  } else {\n    res = \"{\".concat(escapedVals.join(\", \"), \"}\");\n  }\n  return res;\n};\nexport var spelFixList = function spelFixList(val) {\n  // `{1,2}.contains(1)` NOT works\n  // `{1,2}.?[true].contains(1)` works\n  return \"\".concat(val, \".?[true]\");\n};\nexport var spelEscape = function spelEscape(val) {\n  var numberToFloat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var arrayToArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html#expressions-ref-literal\n  if (val === undefined || val === null) {\n    return \"null\";\n  }\n  switch (_typeof(val)) {\n    case \"boolean\":\n      return val ? \"true\" : \"false\";\n    case \"number\":\n      if (!Number.isFinite(val) || isNaN(val)) return undefined;\n      return val + (!Number.isInteger(val) || numberToFloat ? \"f\" : \"\");\n    case \"object\":\n      if (Array.isArray(val)) {\n        return spelInlineList(val, arrayToArray);\n      } else {\n        // see `spelFormatValue` for Date, LocalTime\n        throw new Error(\"spelEscape: Object is not supported\");\n      }\n    default:\n      return spelEscapeString(val);\n  }\n};\nexport var spelFormatConcat = function spelFormatConcat(parts) {\n  if (parts && Array.isArray(parts) && parts.length) {\n    return parts.map(function (part) {\n      if (part.type == \"const\") {\n        return spelEscape(part.value);\n      } else if (part.type == \"property\") {\n        return \"\" + part.value;\n      } else if (part.type == \"variable\") {\n        return \"#\" + part.value;\n      }\n      return undefined;\n    }).filter(function (r) {\n      return r != undefined;\n    }).join(\" + \");\n  } else {\n    return \"null\";\n  }\n};\n\n// `val` is {value, valueType, valueSrc}\n// If `valueType` == \"case_value\", `value` is array of such items (to be considered as concatenation)\nexport var spelImportConcat = function spelImportConcat(val) {\n  if (val == undefined) return [undefined, []];\n  var errors = [];\n  var parts = val.valueType == \"case_value\" ? val.value : [val];\n  var res = parts.map(function (child) {\n    if (child.valueSrc == \"value\") {\n      if (child.value === null) {\n        return undefined;\n      } else {\n        return {\n          type: \"const\",\n          value: child.value\n        };\n      }\n    } else if (child.valueSrc == \"field\") {\n      return {\n        type: child.isVariable ? \"variable\" : \"property\",\n        value: child.value\n      };\n    } else {\n      errors.push(\"Unsupported valueSrc \".concat(child.valueSrc, \" in concatenation\"));\n    }\n  }).filter(function (v) {\n    return v != undefined;\n  });\n  return [res, errors];\n};\nexport var stringifyForDisplay = function stringifyForDisplay(v) {\n  return v == null ? \"NULL\" : v.toString();\n};"]},"metadata":{},"sourceType":"module"}