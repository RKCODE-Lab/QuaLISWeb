{"ast":null,"code":"import rsapi from '../rsapi';\nimport { DEFAULT_RETURN } from './LoginTypes';\nimport { sortData, constructOptionList, convertDateValuetoString, rearrangeDateFormat } from '../components/CommonScript'; //, getComboLabelValue, searchData\n\nimport { toast } from 'react-toastify';\nimport Axios from 'axios';\nimport { initRequest } from './LoginAction';\nimport { intl } from '../components/App';\nimport { transactionStatus } from '../components/Enumeration';\nexport function getTrainingCertificateDetail(trainingcertificate, fromDate, toDate, userInfo, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    return rsapi.post(\"trainingcertificate/getTrainingCertificate\", {\n      ntrainingcode: trainingcertificate.ntrainingcode,\n      fromDate,\n      toDate,\n      \"userinfo\": userInfo\n    }).then(response => {\n      masterData = { ...masterData,\n        ...response.data\n      };\n      sortData(masterData);\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        toast.warn(intl.formatMessage({\n          id: error.response.data\n        }));\n      }\n    });\n  };\n}\nexport function getTrainingCertificateComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    if (operation === \"create\" || operation === \"update\" || operation === \"reschedule\") {\n      const trainingcategoryService = rsapi.post(\"traningcategory/getTrainingCategory\", {\n        userinfo: userInfo\n      });\n      const techniqueService = rsapi.post(\"trainingcertificate/getTechnique\", {\n        userinfo: userInfo\n      });\n      const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\n      const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", {\n        userinfo: userInfo\n      });\n      let urlArray = [techniqueService, trainingcategoryService, timeZoneService, UTCtimeZoneService];\n\n      if (operation === \"update\" || operation === \"reschedule\") {\n        const trainingcertificateServiceById = rsapi.post(\"trainingcertificate/getActiveTrainingCertificateById\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        }); //this.props.Login.userInfo\n\n        urlArray.push(trainingcertificateServiceById);\n        const trainingparticipantsById = rsapi.post(\"trainingcertificate/getTrainingParticipants\", {\n          [primaryKeyName]: primaryKeyValue,\n          \"userinfo\": userInfo\n        }); //this.props.Login.userInfo\n\n        urlArray.push(trainingparticipantsById);\n      }\n\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(response => {\n        let status = true;\n        let index;\n\n        if (operation === \"update\" || operation === \"reschedule\") {\n          index = response[5].data.TrainingParticipants.findIndex(item => item.ntransactionstatus === transactionStatus.INVITED);\n\n          if (index !== -1) {\n            status = operation === \"update\" ? false : true;\n          } else {\n            status = operation === \"reschedule\" ? false : true;\n          }\n\n          status = response[4].data && response[4].data.ntransactionstatus === transactionStatus.COMPLETED ? false : response[4].data && response[4].data.ntransactionstatus === transactionStatus.CONDUCTED ? false : status;\n        }\n\n        if (status) {\n          let selectedRecord = {\n            \"ntztrainingdate\": {\n              \"value\": userInfo.ntimezonecode,\n              \"label\": userInfo.stimezoneid\n            },\n            \"stztrainingdate\": userInfo.stimezoneid\n          };\n          const techniqueMap = constructOptionList(response[0].data || [], \"ntechniquecode\", \"stechniquename\", undefined, undefined, true);\n          const trainingcategoryMap = constructOptionList(response[1].data || [], \"ntrainingcategorycode\", \"strainingcategoryname\", undefined, undefined, true);\n          const timeZoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\", \"stimezoneid\", undefined, undefined, true);\n          const trainingcategoryList = trainingcategoryMap.get(\"OptionList\");\n          const techniqueList = techniqueMap.get(\"OptionList\");\n          const timeZoneList = timeZoneMap.get(\"OptionList\");\n          const currentTime = rearrangeDateFormat(userInfo, response[3].data);\n\n          if (operation === \"update\" || operation === \"reschedule\") {\n            selectedRecord = response[4].data;\n            selectedRecord[\"dtrainingdatetime\"] = rearrangeDateFormat(userInfo, response[4].data.strainingdatetime);\n            selectedRecord[\"ntrainingcategorycode\"] = {\n              \"value\": response[4].data.ntrainingcategorycode,\n              \"label\": response[4].data.strainingcategoryname\n            };\n            selectedRecord[\"ntechniquecode\"] = {\n              \"value\": response[4].data.ntechniquecode,\n              \"label\": response[4].data.stechniquename\n            };\n            selectedRecord[\"ntztrainingdate\"] = {\n              \"value\": response[4].data.ntztrainingdate,\n              \"label\": response[4].data.stimezoneid\n            };\n          } else {\n            selectedRecord[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\n            selectedRecord[\"ntrainingcategorycode\"] = trainingcategoryMap.get(\"DefaultValue\");\n          }\n\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              currentTime,\n              trainingcategoryList,\n              techniqueList,\n              timeZoneList,\n              operation,\n              screenName,\n              selectedRecord,\n              openModal: true,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n          toast.warn(intl.formatMessage({\n            id: response[4].data.ntransactionstatus !== transactionStatus.COMPLETED ? response[4].data.ntransactionstatus !== transactionStatus.CONDUCTED ? operation === \"update\" ? \"IDS_INVITEDPARTICIPANTSCANNOTBEEDITED\" : \"IDS_INVITEPARTICIPANTS\" : \"IDS_TESTTRAININGALREADYCONDUCTED\" : \"IDS_TESTTRAININGALREADYCOMPLETED\"\n          }));\n        }\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    }\n  };\n}\nexport function getTrainingParticipantsComboDataService(trainingparam, masterData) {\n  return function (dispatch) {\n    if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\n      const getActiveTrainingCertificateById = rsapi.post(\"trainingcertificate/getActiveTrainingCertificateById\", {\n        \"userinfo\": trainingparam.userInfo,\n        \"ntrainingcode\": trainingparam.masterData.SelectedTrainingCertificate.ntrainingcode\n      });\n      const section = rsapi.post(\"section/getSection\", {\n        \"userinfo\": trainingparam.userInfo\n      });\n      let urlArray = [];\n      let selectedId = null;\n      urlArray = [section, getActiveTrainingCertificateById];\n      dispatch(initRequest(true));\n      Axios.all(urlArray).then(Axios.spread((...response) => {\n        if (response && response[1] && response[1].data.ntransactionstatus !== transactionStatus.COMPLETED) {\n          let selectedRecord = {};\n          let nsectioncode = [];\n          let nsitecode = [];\n          let sectionusersList = [];\n          const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\", \"ssectionname\", undefined, undefined, true);\n          const sectionList = SectionMap.get(\"OptionList\");\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              section: sectionList,\n              sectionUsers: trainingparam.operation === \"update\" ? sectionusersList : [],\n              nsectioncode: nsectioncode,\n              nsitecode: nsitecode,\n              selectedRecord: trainingparam.operation === \"update\" ? selectedRecord : undefined,\n              operation: trainingparam.operation,\n              screenName: \"IDS_PARTICIPANTSDETAILS\",\n              openChildModal: true,\n              ncontrolCode: trainingparam.ncontrolCode,\n              loading: false,\n              selectedId\n            }\n          });\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n          toast.warn(intl.formatMessage({\n            id: \"IDS_TESTTRAININGALREADYCOMPLETED\"\n          }));\n        }\n      })).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(intl.formatMessage({\n            id: error.message\n          }));\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: \"IDS_TRAININGCANCELED\"\n      }));\n    }\n  };\n}\nexport function reloadTrainingCertificate(inputParam) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getTrainingCertificate\", { ...inputParam.inputData\n    }).then(response => {\n      let responseData = { ...response.data\n      };\n      responseData = sortData(responseData);\n      let masterData = { ...inputParam.masterData,\n        ...responseData\n      };\n\n      if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\n        inputParam.searchRef.current.value = \"\";\n        masterData['searchedData'] = undefined;\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getSectionUsersDataService(nSectionCode, selectedRecord, userInfo, SelectedTrainingCertificate) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getSectionUsers\", {\n      \"userinfo\": userInfo,\n      \"nsectioncode\": parseInt(nSectionCode),\n      \"ntrainingcode\": parseInt(SelectedTrainingCertificate)\n    }).then(response => {\n      let nusercode = []; // const sectionusersMap = constructOptionList(response.data.SectionUsers || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n\n      const sectionusersList = response.data.SectionUsers;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          sectionUsers: sectionusersList,\n          nusercode: nusercode,\n          selectedRecord,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n    });\n  };\n}\nexport function getTrainingParticipantsInvite(trainingparam, selectedRecord, masterData, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getInviteParticipants\", {\n      \"userinfo\": trainingparam.userInfo,\n      \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode)\n    }).then(response => {\n      let nusercode = []; // const inviteUsersMap = constructOptionList(response.data.InvitedParticipants || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n      // const inviteUsersList = inviteUsersMap.get(\"OptionList\");\n\n      const inviteUsersList = response.data.InvitedParticipants;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: inviteUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openChildModal: true,\n          screenName: \"IDS_INVITEDPARTICIPANTSDETAILS\",\n          nFlag: 2,\n          selectedRecord: selectedRecord,\n          operation: operation,\n          ncontrolCode: trainingparam.ncontrolCode\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getTrainingParticipantsCancel(trainingparam, selectedRecord, masterData, operation) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/getCancelParticipants\", {\n      \"userinfo\": trainingparam.userInfo,\n      \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode)\n    }).then(response => {\n      let nusercode = []; // const cancelUsersMap = constructOptionList(response.data.CancelParticipants || [], \"nusercode\",\n      //     \"sfullname\", undefined, undefined, true);\n\n      const cancelUsersList = response.data.CancelParticipants;\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          usersStatus: cancelUsersList,\n          nusercode: nusercode,\n          loading: false,\n          openChildModal: true,\n          screenName: \"IDS_CANCELPARTICIPANTSDETAILS\",\n          nFlag: 3,\n          selectedRecord: selectedRecord,\n          operation: operation\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function rescheduleTrainingCertificate(inputParam, masterData) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"trainingcertificate/rescheduleTrainingCertificate\", { ...inputParam.inputData\n    }).then(response => {\n      let masterData = { ...response.data\n      };\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          masterData,\n          loading: false,\n          showFilter: false,\n          openModal: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}\nexport function getAddValidityExpiry(screenName, operation, masterData, userInfo, ncontrolCode) {\n  return function (dispatch) {\n    //if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \n    if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CONDUCTED && masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.COMPLETED && masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\n      dispatch(initRequest(true));\n      let obj = convertDateValuetoString(masterData.SelectedTrainingCertificate.strainingdatetime ? masterData.SelectedTrainingCertificate.strainingdatetime : new Date(), masterData.SelectedTrainingCertificate.strainingdatetime ? masterData.SelectedTrainingCertificate.strainingdatetime : new Date(), userInfo);\n      masterData.SelectedTrainingCertificate.stemptrainingdatetime = obj.toDate + \"Z\";\n      let objdate = convertDateValuetoString(masterData.FromDate, masterData.ToDate, userInfo);\n      let fromDate = objdate.fromDate;\n      let toDate = objdate.toDate;\n      rsapi.post(\"trainingcertificate/validateConductAndTrainingDate\", {\n        \"trainingcertificate\": masterData.SelectedTrainingCertificate,\n        \"fromDate\": fromDate,\n        \"toDate\": toDate,\n        userinfo: userInfo\n      }).then(response => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            operation,\n            screenName,\n            ncontrolCode,\n            loading: false\n          }\n        }); //rsapi.post(\"trainingcertificate/getPeriod\",{userinfo:userInfo})\n\n        rsapi.post(\"/period/getPeriodByControl\", {\n          \"ncontrolcode\": ncontrolCode,\n          \"userinfo\": userInfo\n        }).then(response => {\n          const PeriodMap = constructOptionList(response.data || [], \"nperiodcode\", \"speriodname\", undefined, undefined, true);\n          const periodList = PeriodMap.get(\"OptionList\");\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              period: periodList,\n              openModal: true,\n              operation,\n              screenName,\n              ncontrolCode,\n              loading: false\n            }\n          });\n        }).catch(error => {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: {\n              loading: false\n            }\n          });\n\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      if (masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CONDUCTED) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_TESTTRAININGALREADYCONDUCTED\"\n        }));\n      }\n\n      if (masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.COMPLETED) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_TESTTRAININGALREADYCOMPLETED\"\n        }));\n      }\n\n      if (masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CANCELLED) {\n        toast.warn(intl.formatMessage({\n          id: \"IDS_TESTTRAININGALREADYCANCELLED\"\n        }));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-FINAL/SOURCE-513-ALPD-4991/QuaLISWeb/src/actions/TrainingCertificateAction.js"],"names":["rsapi","DEFAULT_RETURN","sortData","constructOptionList","convertDateValuetoString","rearrangeDateFormat","toast","Axios","initRequest","intl","transactionStatus","getTrainingCertificateDetail","trainingcertificate","fromDate","toDate","userInfo","masterData","dispatch","post","ntrainingcode","then","response","data","type","payload","loading","catch","error","status","formatMessage","id","message","warn","getTrainingCertificateComboService","screenName","operation","primaryKeyName","primaryKeyValue","ncontrolCode","trainingcategoryService","userinfo","techniqueService","timeZoneService","UTCtimeZoneService","urlArray","trainingcertificateServiceById","push","trainingparticipantsById","all","index","TrainingParticipants","findIndex","item","ntransactionstatus","INVITED","COMPLETED","CONDUCTED","selectedRecord","ntimezonecode","stimezoneid","techniqueMap","undefined","trainingcategoryMap","timeZoneMap","trainingcategoryList","get","techniqueList","timeZoneList","currentTime","strainingdatetime","ntrainingcategorycode","strainingcategoryname","ntechniquecode","stechniquename","ntztrainingdate","ACTIVE","openModal","getTrainingParticipantsComboDataService","trainingparam","SelectedTrainingCertificate","CANCELLED","getActiveTrainingCertificateById","section","selectedId","spread","nsectioncode","nsitecode","sectionusersList","SectionMap","sectionList","sectionUsers","openChildModal","reloadTrainingCertificate","inputParam","inputData","responseData","searchRef","current","value","showFilter","getSectionUsersDataService","nSectionCode","parseInt","nusercode","SectionUsers","getTrainingParticipantsInvite","inviteUsersList","InvitedParticipants","usersStatus","nFlag","getTrainingParticipantsCancel","cancelUsersList","CancelParticipants","rescheduleTrainingCertificate","getAddValidityExpiry","obj","Date","stemptrainingdatetime","objdate","FromDate","ToDate","PeriodMap","periodList","period"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport { DEFAULT_RETURN } from './LoginTypes';\r\nimport { sortData, constructOptionList,convertDateValuetoString, rearrangeDateFormat } from '../components/CommonScript'//, getComboLabelValue, searchData\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios';\r\nimport { initRequest } from './LoginAction';\r\nimport { intl } from '../components/App';\r\nimport { transactionStatus } from '../components/Enumeration';\r\n\r\nexport function getTrainingCertificateDetail(trainingcertificate, fromDate, toDate, userInfo, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n\r\n        return rsapi.post(\"trainingcertificate/getTrainingCertificate\", {\r\n            ntrainingcode: trainingcertificate.ntrainingcode, fromDate, toDate,\r\n            \"userinfo\": userInfo\r\n        })\r\n            .then(response => {\r\n\r\n                masterData = { ...masterData, ...response.data };\r\n                sortData(masterData);\r\n                dispatch({ type: DEFAULT_RETURN, payload: { masterData, loading: false } });\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(intl.formatMessage({ id: error.message }));\r\n                }\r\n                else {\r\n\r\n                    toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                }\r\n\r\n            })\r\n    }\r\n}\r\n\r\nexport function getTrainingCertificateComboService(screenName, operation, primaryKeyName, primaryKeyValue, masterData, userInfo, ncontrolCode) {\r\n    return function (dispatch) {\r\n        if (operation === \"create\" || (operation === \"update\" || operation === \"reschedule\")) {\r\n\r\n            const trainingcategoryService = rsapi.post(\"traningcategory/getTrainingCategory\", { userinfo: userInfo });\r\n            const techniqueService = rsapi.post(\"trainingcertificate/getTechnique\", { userinfo: userInfo });\r\n            const timeZoneService = rsapi.post(\"timezone/getTimeZone\");\r\n            const UTCtimeZoneService = rsapi.post(\"timezone/getLocalTimeByZone\", { userinfo: userInfo });\r\n            let urlArray = [techniqueService, trainingcategoryService, timeZoneService, UTCtimeZoneService];\r\n            if (operation === \"update\" || operation === \"reschedule\") {\r\n\r\n                const trainingcertificateServiceById = rsapi.post(\"trainingcertificate/getActiveTrainingCertificateById\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });//this.props.Login.userInfo\r\n                urlArray.push(trainingcertificateServiceById)\r\n                const trainingparticipantsById = rsapi.post(\"trainingcertificate/getTrainingParticipants\", { [primaryKeyName]: primaryKeyValue, \"userinfo\": userInfo });//this.props.Login.userInfo\r\n                urlArray.push(trainingparticipantsById)\r\n            }\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                let status = true;\r\n                let index ;\r\n                if(operation === \"update\" || operation === \"reschedule\"){\r\n                     index = response[5].data.TrainingParticipants.findIndex( item => \r\n                       (item.ntransactionstatus === transactionStatus.INVITED) \r\n                      );\r\n                    if(index !== -1){\r\n                      status = operation === \"update\" ? false :  true;\r\n                    } else{\r\n                        status = operation === \"reschedule\" ? false : true;\r\n                    }\r\n                    status = response[4].data && response[4].data.ntransactionstatus === transactionStatus.COMPLETED ? false : \r\n                        response[4].data && response[4].data.ntransactionstatus === transactionStatus.CONDUCTED ? false : status ;\r\n                }\r\n              \r\n                    if(status){\r\n\r\n                    let selectedRecord = {\r\n                        \"ntztrainingdate\": {\r\n                            \"value\": userInfo.ntimezonecode,\r\n                            \"label\": userInfo.stimezoneid\r\n                        },\r\n                        \"stztrainingdate\": userInfo.stimezoneid\r\n                    };\r\n\r\n                    const techniqueMap = constructOptionList(response[0].data || [], \"ntechniquecode\",\r\n                        \"stechniquename\", undefined, undefined, true);\r\n                    const trainingcategoryMap = constructOptionList(response[1].data || [], \"ntrainingcategorycode\",\r\n                        \"strainingcategoryname\", undefined, undefined, true);\r\n                    const timeZoneMap = constructOptionList(response[2].data || [], \"ntimezonecode\",\r\n                        \"stimezoneid\", undefined, undefined, true);\r\n                    const trainingcategoryList = trainingcategoryMap.get(\"OptionList\");\r\n                    const techniqueList = techniqueMap.get(\"OptionList\");\r\n                    const timeZoneList = timeZoneMap.get(\"OptionList\");\r\n                    const currentTime = rearrangeDateFormat(userInfo, response[3].data);\r\n                    if (operation === \"update\" || operation === \"reschedule\") {\r\n                        selectedRecord = response[4].data;\r\n\r\n                        selectedRecord[\"dtrainingdatetime\"] = rearrangeDateFormat(userInfo, response[4].data.strainingdatetime)\r\n                        selectedRecord[\"ntrainingcategorycode\"] = { \"value\": response[4].data.ntrainingcategorycode, \"label\": response[4].data.strainingcategoryname };\r\n                        selectedRecord[\"ntechniquecode\"] = { \"value\": response[4].data.ntechniquecode, \"label\": response[4].data.stechniquename };\r\n                        selectedRecord[\"ntztrainingdate\"] = { \"value\": response[4].data.ntztrainingdate, \"label\": response[4].data.stimezoneid };\r\n                    }\r\n                    else {\r\n                        selectedRecord[\"ntransactionstatus\"] = transactionStatus.ACTIVE;\r\n                        selectedRecord[\"ntrainingcategorycode\"] = trainingcategoryMap.get(\"DefaultValue\");\r\n                    }\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN, payload: {\r\n                            currentTime,\r\n                            trainingcategoryList, techniqueList, timeZoneList,\r\n                            operation, screenName, selectedRecord, openModal: true,\r\n                            ncontrolCode, loading: false\r\n                        }\r\n                    });\r\n                }\r\n                else{\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    toast.warn(intl.formatMessage({ id: response[4].data.ntransactionstatus !== transactionStatus.COMPLETED ? \r\n                        response[4].data.ntransactionstatus !== transactionStatus.CONDUCTED ? (operation === \"update\" ? \"IDS_INVITEDPARTICIPANTSCANNOTBEEDITED\" : \"IDS_INVITEPARTICIPANTS\") : \"IDS_TESTTRAININGALREADYCONDUCTED\" : \"IDS_TESTTRAININGALREADYCOMPLETED\"}));\r\n                }\r\n            }\r\n            )\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function getTrainingParticipantsComboDataService(trainingparam, masterData) {\r\n    return function (dispatch) {\r\n\r\n        if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\r\n\r\n            const getActiveTrainingCertificateById = rsapi.post(\"trainingcertificate/getActiveTrainingCertificateById\", { \"userinfo\": trainingparam.userInfo,\"ntrainingcode\":trainingparam.masterData.SelectedTrainingCertificate.ntrainingcode});\r\n\r\n            const section = rsapi.post(\"section/getSection\", { \"userinfo\": trainingparam.userInfo });\r\n\r\n            let urlArray = [];\r\n\r\n            let selectedId = null;\r\n\r\n            urlArray = [section,getActiveTrainingCertificateById];\r\n\r\n            dispatch(initRequest(true));\r\n            Axios.all(urlArray)\r\n                .then(Axios.spread((...response) => {\r\n                    if(response && response[1] && response[1].data.ntransactionstatus !== transactionStatus.COMPLETED){\r\n\r\n                    let selectedRecord = {};\r\n                    let nsectioncode = [];\r\n                    let nsitecode = [];\r\n\r\n                    let sectionusersList = [];\r\n\r\n                    const SectionMap = constructOptionList(response[0].data || [], \"nsectioncode\",\r\n                        \"ssectionname\", undefined, undefined, true);\r\n\r\n                    const sectionList = SectionMap.get(\"OptionList\");\r\n\r\n\r\n\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            section: sectionList, sectionUsers: trainingparam.operation === \"update\" ? sectionusersList : [],\r\n                            nsectioncode: nsectioncode, nsitecode: nsitecode,\r\n                            selectedRecord: trainingparam.operation === \"update\" ? selectedRecord : undefined, operation: trainingparam.operation,\r\n                            screenName: \"IDS_PARTICIPANTSDETAILS\",\r\n                            openChildModal: true, ncontrolCode: trainingparam.ncontrolCode,\r\n                            loading: false, selectedId\r\n                        }\r\n                    });\r\n                }\r\n                else{\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    toast.warn(intl.formatMessage({ id: \"IDS_TESTTRAININGALREADYCOMPLETED\"}));\r\n                }\r\n                }))\r\n\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                    if (error.response.status === 500) {\r\n                        toast.error(intl.formatMessage({ id: error.message }));\r\n                    }\r\n                    else {\r\n                        toast.warn(intl.formatMessage({ id: error.response.data }));\r\n                    }\r\n                })\r\n        }\r\n        else {\r\n\r\n            toast.warn(intl.formatMessage({ id: \"IDS_TRAININGCANCELED\" }));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nexport function reloadTrainingCertificate(inputParam) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getTrainingCertificate\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let responseData = { ...response.data }\r\n                responseData = sortData(responseData)\r\n                let masterData = {\r\n                    ...inputParam.masterData,\r\n                    ...responseData,\r\n                }\r\n                if (inputParam.searchRef !== undefined && inputParam.searchRef.current !== null) {\r\n                    inputParam.searchRef.current.value = \"\";\r\n                    masterData['searchedData'] = undefined\r\n                }\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getSectionUsersDataService(nSectionCode, selectedRecord, userInfo, SelectedTrainingCertificate) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getSectionUsers\", { \"userinfo\": userInfo, \"nsectioncode\": parseInt(nSectionCode), \"ntrainingcode\": parseInt(SelectedTrainingCertificate) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const sectionusersMap = constructOptionList(response.data.SectionUsers || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                const sectionusersList = response.data.SectionUsers;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        sectionUsers: sectionusersList, nusercode: nusercode, selectedRecord, loading: false\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n\r\n            })\r\n    }\r\n}\r\nexport function getTrainingParticipantsInvite(trainingparam, selectedRecord, masterData, operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getInviteParticipants\", { \"userinfo\": trainingparam.userInfo, \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const inviteUsersMap = constructOptionList(response.data.InvitedParticipants || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                // const inviteUsersList = inviteUsersMap.get(\"OptionList\");\r\n                const inviteUsersList = response.data.InvitedParticipants;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: inviteUsersList, nusercode: nusercode, loading: false, openChildModal: true,\r\n                        screenName: \"IDS_INVITEDPARTICIPANTSDETAILS\", nFlag: 2, selectedRecord: selectedRecord, operation: operation,\r\n                        ncontrolCode:trainingparam.ncontrolCode\r\n                    }\r\n                });\r\n\r\n\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\nexport function getTrainingParticipantsCancel(trainingparam, selectedRecord, masterData, operation) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/getCancelParticipants\", { \"userinfo\": trainingparam.userInfo, \"ntrainingcode\": parseInt(masterData.SelectedTrainingCertificate.ntrainingcode) })\r\n            .then(response => {\r\n\r\n                let nusercode = [];\r\n\r\n                // const cancelUsersMap = constructOptionList(response.data.CancelParticipants || [], \"nusercode\",\r\n                //     \"sfullname\", undefined, undefined, true);\r\n\r\n                const cancelUsersList = response.data.CancelParticipants;\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        usersStatus: cancelUsersList, nusercode: nusercode, loading: false, openChildModal: true,\r\n                        screenName: \"IDS_CANCELPARTICIPANTSDETAILS\", nFlag: 3, selectedRecord: selectedRecord, operation: operation\r\n                    }\r\n                });\r\n\r\n            }).catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function rescheduleTrainingCertificate(inputParam, masterData) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"trainingcertificate/rescheduleTrainingCertificate\", { ...inputParam.inputData })\r\n            .then(response => {\r\n                let masterData = { ...response.data }\r\n\r\n                dispatch({\r\n                    type: DEFAULT_RETURN, payload: {\r\n                        masterData,\r\n                        loading: false,\r\n                        showFilter: false,\r\n                        openModal: false\r\n                    }\r\n                })\r\n            })\r\n            .catch(error => {\r\n                dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                }\r\n                else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport function getAddValidityExpiry(screenName, operation, masterData, userInfo, ncontrolCode){\r\n    return function (dispatch) {    \r\n        //if (masterData.SelectedTestPriceVersion.ntransactionstatus === transactionStatus.DRAFT){     \r\n            if (masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CONDUCTED &&\r\n                masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.COMPLETED &&\r\n                masterData.SelectedTrainingCertificate.ntransactionstatus !== transactionStatus.CANCELLED) {\r\n        dispatch(initRequest(true));\r\n        \r\n\r\n        let obj= convertDateValuetoString(masterData.SelectedTrainingCertificate.strainingdatetime ? masterData.SelectedTrainingCertificate.strainingdatetime: new Date(),masterData.SelectedTrainingCertificate.strainingdatetime ? masterData.SelectedTrainingCertificate.strainingdatetime : new Date(),userInfo);\r\n        masterData.SelectedTrainingCertificate.stemptrainingdatetime=obj.toDate+\"Z\";\r\n        \r\n        let objdate = convertDateValuetoString(masterData.FromDate, masterData.ToDate, userInfo);\r\n\r\n        let fromDate = objdate.fromDate;\r\n        let toDate = objdate.toDate;\r\n       \r\n\r\n        rsapi.post(\"trainingcertificate/validateConductAndTrainingDate\",{\"trainingcertificate\":masterData.SelectedTrainingCertificate, \r\n        \"fromDate\":fromDate,\"toDate\":toDate,userinfo:userInfo})\r\n        \r\n        .then(response=>{\r\n        \r\n        \r\n            dispatch({type: DEFAULT_RETURN, payload:{\r\n                operation, screenName, ncontrolCode,\r\n                \r\n                loading:false}});\r\n\r\n                //rsapi.post(\"trainingcertificate/getPeriod\",{userinfo:userInfo})\r\n                rsapi.post(\"/period/getPeriodByControl\", {\r\n                    \"ncontrolcode\": ncontrolCode,\r\n                    \"userinfo\": userInfo\r\n                })\r\n    \r\n            .then(response=>{\r\n                                      \r\n                \r\n                const PeriodMap = constructOptionList(response.data || [], \"nperiodcode\",\r\n                        \"speriodname\", undefined, undefined, true);\r\n\r\n                    const periodList = PeriodMap.get(\"OptionList\");\r\n\r\n                    dispatch({type: DEFAULT_RETURN, payload:{\r\n                                                            period:periodList,\r\n                                                           \r\n                                                            openModal:true,\r\n                                                            operation, screenName, ncontrolCode,\r\n                                                            \r\n                                                            loading:false}});\r\n                })\r\n                .catch(error=>{\r\n                    dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                    if (error.response.status === 500){\r\n                        toast.error(error.message);\r\n                    } \r\n                    else{               \r\n                        toast.warn(error.response.data);\r\n                    }      \r\n                })\r\n            })\r\n            .catch(error=>{\r\n                dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n                if (error.response.status === 500){\r\n                    toast.error(error.message);\r\n                } \r\n                else{               \r\n                    toast.warn(error.response.data);\r\n                }      \r\n            })\r\n            }\r\n            else\r\n            {\r\n                if(masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CONDUCTED)\r\n                {\r\n                   toast.warn(intl.formatMessage({id: \"IDS_TESTTRAININGALREADYCONDUCTED\"}));\r\n                }\r\n                if(masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.COMPLETED)\r\n                {\r\n                   toast.warn(intl.formatMessage({id: \"IDS_TESTTRAININGALREADYCOMPLETED\"}));\r\n                }\r\n                if(masterData.SelectedTrainingCertificate.ntransactionstatus === transactionStatus.CANCELLED)\r\n                {\r\n                   toast.warn(intl.formatMessage({id: \"IDS_TESTTRAININGALREADYCANCELLED\"}));\r\n                }\r\n            }\r\n              }}\r\n    \r\n               \r\n          \r\n\r\n    \r\n         \r\n    \r\n\r\n"]},"metadata":{},"sourceType":"module"}