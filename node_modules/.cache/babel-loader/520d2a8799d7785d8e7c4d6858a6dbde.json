{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\instrumentmanagement\\\\AddInstrumentCalibration.jsx\";\nimport React from 'react';\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\nimport { injectIntl } from 'react-intl';\nimport { Row, Col } from 'react-bootstrap';\nimport FormInput from '../../components/form-input/form-input.component';\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\nimport { transactionStatus } from '../../components/Enumeration';\n\nconst AddInstrumentCalibration = props => {\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_INSTRUMENTID\"\n    }),\n    name: \"ninstrumentcode\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    value: props.instrumentid,\n    isDisabled: true,\n    required: true,\n    maxLength: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: props.userInfo.istimezoneshow === transactionStatus.YES ? 6 : 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(DateTimePicker, {\n    name: \"dlastcalibrationdate\",\n    label: props.intl.formatMessage({\n      id: \"IDS_LASTCALIBRATIONDATE\"\n    }),\n    className: \"form-control\",\n    selected: props.selectedRecord[\"dlastcalibrationdate\"] ? props.selectedRecord[\"dlastcalibrationdate\"] : new Date(),\n    dateFormat: props.userInfo.ssitedate,\n    isClearable: false,\n    required: true,\n    isMandatory: true,\n    maxTime: props.currentTime,\n    onChange: date => props.handleDateChange(\"dlastcalibrationdate\", date),\n    value: props.selectedRecord[\"dlastcalibrationdate\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  })), props.userInfo.istimezoneshow === transactionStatus.YES && /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ntzlastcalibrationdate\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TIMEZONE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.TimeZoneList,\n    value: props.selectedRecord[\"ntzlastcalibrationdate\"],\n    defaultValue: props.selectedRecord[\"ntzlastcalibrationdate\"],\n    isMandatory: false,\n    isMulti: false,\n    isSearchable: true,\n    isDisabled: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    onChange: event => props.onComboChange(event, 'ntzlastcalibrationdate', 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: props.userInfo.istimezoneshow === transactionStatus.YES ? 6 : 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormInput, {\n    label: props.intl.formatMessage({\n      id: \"IDS_PERIOD\"\n    }),\n    name: \"nnextcalibrationperiod\",\n    type: \"text\",\n    onChange: event => props.onInputOnChange(event),\n    value: props.nextcalibrationperiod,\n    isDisabled: true,\n    required: true,\n    maxLength: \"100\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  })), props.userInfo.istimezoneshow === transactionStatus.YES && /*#__PURE__*/React.createElement(Col, {\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ntzduedate\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_TIMEZONE\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.TimeZoneList,\n    value: props.selectedRecord[\"ntzduedate\"],\n    defaultValue: props.selectedRecord[\"ntzduedate\"],\n    isMandatory: false,\n    isMulti: false,\n    isSearchable: true,\n    isDisabled: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    onChange: event => props.onComboChange(event, 'ntzduedate', 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormSelectSearch, {\n    name: \"ntranscode\",\n    formLabel: props.intl.formatMessage({\n      id: \"IDS_STATUS\"\n    }),\n    placeholder: props.intl.formatMessage({\n      id: \"IDS_SELECTRECORD\"\n    }),\n    options: props.CalibrationStatus,\n    value: props.selectedRecord[\"ntranscode\"] ? props.selectedRecord[\"ntranscode\"] : \"\",\n    defaultValue: props.selectedRecord[\"ntranscode\"],\n    isMulti: false,\n    isSearchable: true,\n    isMandatory: true,\n    isDisabled: false,\n    closeMenuOnSelect: true,\n    alphabeticalSort: true,\n    onChange: event => props.onComboChange(event, 'ntranscode', 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default injectIntl(AddInstrumentCalibration);","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/instrumentmanagement/AddInstrumentCalibration.jsx"],"names":["React","FormSelectSearch","injectIntl","Row","Col","FormInput","DateTimePicker","transactionStatus","AddInstrumentCalibration","props","intl","formatMessage","id","event","onInputOnChange","instrumentid","userInfo","istimezoneshow","YES","selectedRecord","Date","ssitedate","currentTime","date","handleDateChange","TimeZoneList","onComboChange","nextcalibrationperiod","CalibrationStatus"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport FormSelectSearch from '../../components/form-select-search/form-select-search.component';\r\nimport { injectIntl } from 'react-intl';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport DateTimePicker from '../../components/date-time-picker/date-time-picker.component';\r\nimport { transactionStatus } from '../../components/Enumeration';\r\n\r\n\r\n\r\n\r\n\r\nconst AddInstrumentCalibration = (props) => {\r\n    return (\r\n        <Row>\r\n\r\n            <Col md={12}>\r\n                <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_INSTRUMENTID\" })}\r\n                    name={\"ninstrumentcode\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    value={props.instrumentid}\r\n                    isDisabled={true}\r\n                    required={true}\r\n                    maxLength={\"100\"}\r\n                />\r\n            </Col>\r\n            <Col md={props.userInfo.istimezoneshow  === transactionStatus.YES ? 6 : 12}>\r\n                <DateTimePicker\r\n                    name={\"dlastcalibrationdate\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_LASTCALIBRATIONDATE\" })}\r\n                    className='form-control'\r\n                    selected={props.selectedRecord[\"dlastcalibrationdate\"] ? props.selectedRecord[\"dlastcalibrationdate\"] : new Date()}\r\n                    dateFormat={props.userInfo.ssitedate}\r\n                    isClearable={false}\r\n                    required={true}\r\n                    isMandatory={true}\r\n                    maxTime={props.currentTime}\r\n                    onChange={date => props.handleDateChange(\"dlastcalibrationdate\", date)}\r\n                    value={props.selectedRecord[\"dlastcalibrationdate\"]}\r\n\r\n                />\r\n            </Col>\r\n            {props.userInfo.istimezoneshow  === transactionStatus.YES  &&\r\n                <Col md={6}>\r\n                    <FormSelectSearch\r\n                        name={\"ntzlastcalibrationdate\"}\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        options={props.TimeZoneList}\r\n                        value={props.selectedRecord[\"ntzlastcalibrationdate\"]}\r\n                        defaultValue={props.selectedRecord[\"ntzlastcalibrationdate\"]}\r\n                        isMandatory={false}\r\n                        isMulti={false}\r\n                        isSearchable={true}\r\n                        isDisabled={false}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n                        onChange={(event) => props.onComboChange(event, 'ntzlastcalibrationdate', 1)}\r\n                    />\r\n\r\n                </Col>\r\n            }\r\n            <Col md={props.userInfo.istimezoneshow  === transactionStatus.YES? 6 : 12}>\r\n                {/* <DateTimePicker\r\n                    name={\"dduedate\"}\r\n                    label={props.intl.formatMessage({ id: \"IDS_DUEDATE\" })}\r\n                    className='form-control'\r\n                    selected={props.selectedRecord[\"dduedate\"] ? props.selectedRecord[\"dduedate\"] : new Date()}\r\n                    dateFormat={props.userInfo.ssitedate}\r\n                    isClearable={false}\r\n                    required={true}\r\n                    isMandatory={true}\r\n                    maxTime={props.currentTime}\r\n                    onChange={date => props.handleDateChange(\"dduedate\", date)}\r\n                    value={props.selectedRecord[\"dduedate\"]}\r\n\r\n                /> */}\r\n                \r\n                <FormInput\r\n                    label={props.intl.formatMessage({ id: \"IDS_PERIOD\" })}\r\n                    name={\"nnextcalibrationperiod\"}\r\n                    type=\"text\"\r\n                    onChange={(event) => props.onInputOnChange(event)}\r\n                    value={props.nextcalibrationperiod}\r\n                    isDisabled={true}\r\n                    required={true}\r\n                    maxLength={\"100\"}\r\n                />\r\n            \r\n            </Col>\r\n            {props.userInfo.istimezoneshow === transactionStatus.YES &&\r\n                <Col md={6}>\r\n                    <FormSelectSearch\r\n                        name={\"ntzduedate\"}\r\n                        formLabel={props.intl.formatMessage({ id: \"IDS_TIMEZONE\" })}\r\n                        placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                        options={props.TimeZoneList}\r\n                        value={props.selectedRecord[\"ntzduedate\"]}\r\n                        defaultValue={props.selectedRecord[\"ntzduedate\"]}\r\n                        isMandatory={false}\r\n                        isMulti={false}\r\n                        isSearchable={true}\r\n                        isDisabled={false}\r\n                        closeMenuOnSelect={true}\r\n                        alphabeticalSort={true}\r\n                        onChange={(event) => props.onComboChange(event, 'ntzduedate', 1)}\r\n                    />\r\n\r\n                </Col>\r\n            }\r\n            <Col md={12}>\r\n                <FormSelectSearch\r\n                    name={\"ntranscode\"}\r\n                    formLabel={props.intl.formatMessage({ id: \"IDS_STATUS\" })}\r\n                    placeholder={props.intl.formatMessage({ id: \"IDS_SELECTRECORD\" })}\r\n                    options={props.CalibrationStatus}\r\n                    value={props.selectedRecord[\"ntranscode\"] ? props.selectedRecord[\"ntranscode\"] : \"\"}\r\n                    defaultValue={props.selectedRecord[\"ntranscode\"]}\r\n                    isMulti={false}\r\n                    isSearchable={true}\r\n                    isMandatory={true}\r\n                    isDisabled={false}\r\n                    closeMenuOnSelect={true}\r\n                    alphabeticalSort={true}\r\n                    onChange={(event) => props.onComboChange(event, 'ntranscode', 1)}\r\n                />\r\n            </Col>\r\n\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default injectIntl(AddInstrumentCalibration);"]},"metadata":{},"sourceType":"module"}