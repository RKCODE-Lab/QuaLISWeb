{"ast":null,"code":"import rsapi from \"../rsapi\";\nimport { toast } from \"react-toastify\";\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\nimport Axios from \"axios\";\nimport { initRequest, updateStore } from \"./LoginAction\";\nimport { transactionStatus } from \"../components/Enumeration\";\nimport { constructOptionList, showEsign } from \"../components/CommonScript\";\nimport { crudMaster } from './ServiceAction';\nimport { intl } from \"../components/App\";\nexport function getCommentsCombo(inputParam) {\n  return dispatch => {\n    if (inputParam.masterList && inputParam.masterList.length > 0) {\n      dispatch(initRequest(true));\n      let urlArray = [rsapi.post(\"/sampletestcomments/getSampleTestComments\", {\n        userinfo: inputParam.userInfo\n      })];\n      urlArray.push(rsapi.post(\"/comments/getCommentSubType\", {\n        userinfo: inputParam.userInfo\n      })); // if(inputParam.isSampleTestComment&&inputParam.isSampleTestComment===true) \n      // {\n      //  urlArray.push(\n      //      rsapi.post(\"/comments/getSampleTestCommentsListById\", {\n      //          ncommentsubtypecode:inputParam.ncommentsubtypecode,\n      //          userinfo: inputParam.userInfo\n      //      }))\n      // }     \n\n      if (inputParam.operation === \"update\") {\n        urlArray.push(rsapi.post(\"/comments/getEdit\".concat(inputParam.methodUrl), {\n          userinfo: inputParam.userInfo,\n          selectedrecord: inputParam.editRow\n        }));\n      }\n\n      Axios.all(urlArray).then(response => {\n        let predefcomments;\n        let sampleTestComments = response[0].data;\n        let CommentSubType = response[1].data['CommentSubType'];\n        let isAbbrevationneeded;\n        let selectedRecord = {};\n        const defaultLink = sampleTestComments.filter(item => item.ndefaultstatus === transactionStatus.YES);\n        const sampleTestCommentsMap = constructOptionList(sampleTestComments || [], \"nsampletestcommentcode\", \"ssampletestcommentname\", undefined, undefined, true);\n        const CommentSubTypesMap = constructOptionList(CommentSubType || [], \"ncommentsubtypecode\", \"scommentsubtype\", undefined, undefined, false);\n        sampleTestComments = sampleTestCommentsMap.get(\"OptionList\");\n        CommentSubType = CommentSubTypesMap.get(\"OptionList\");\n\n        if (inputParam.isSampleTestComment && inputParam.isSampleTestComment === true) {\n          predefcomments = response[1].data['SampleTestComments'];\n          const predefcommentssMap = constructOptionList(predefcomments || [], \"nsampletestcommentscode\", \"spredefinedname\", undefined, undefined, false);\n          predefcomments = predefcommentssMap.get(\"OptionList\");\n\n          if (CommentSubType[0].value === 3) {\n            isAbbrevationneeded = true;\n          }\n\n          selectedRecord = { ...inputParam.selectedRecord,\n            ncommentsubtypecode: CommentSubType[0],\n            nsampletestcommentscode: predefcomments[0] && predefcomments[0],\n            spredefinedname: predefcomments[0] && predefcomments[0].label,\n            scomments: predefcomments[0] && predefcomments[0].item.sdescription\n          };\n        }\n\n        let editObject = {};\n\n        if (inputParam.operation === \"update\") {\n          editObject = response[2].data;\n          let nsamplecommentscode = {};\n          nsamplecommentscode = {\n            \"label\": editObject.ssampletestcommentname,\n            \"value\": editObject.nsamplecommentscode\n          };\n          selectedRecord = { ...editObject,\n            nsamplecommentscode,\n            scomments: editObject.jsondata.scomments,\n            scommentsubtype: editObject.jsondata.scommentsubtype && editObject.jsondata.scommentsubtype,\n            spredefinedname: editObject.jsondata.spredefinedname && editObject.jsondata.spredefinedname,\n            scomments: editObject.jsondata.sdescription && editObject.jsondata.sdescription,\n            ncommentsubtypecode: editObject.jsondata.ncommentsubtypecode && editObject.jsondata.ncommentsubtypecode,\n            nsampletestcommentscode: editObject.jsondata.nsampletestcommentscode && editObject.jsondata.nsampletestcommentscode\n          };\n        } else {\n          selectedRecord = { ...selectedRecord,\n            nsamplecommentscode: defaultLink.length > 0 ? {\n              \"label\": defaultLink[0].ssampletestcommentname,\n              \"value\": defaultLink[0].nsampletestcommentcode\n            } : \"\"\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            [inputParam.modalName]: true,\n            operation: inputParam.operation,\n            screenName: inputParam.screenName,\n            ncontrolCode: inputParam.ncontrolCode,\n            selectedRecord,\n            loading: false,\n            sampleTestComments,\n            predefcomments,\n            CommentSubType,\n            isAbbrevationneeded,\n            modalType: 'comment',\n            modalName: [inputParam.modalName],\n            editObject //,\n            //  isSampleTestComment:inputParam.isSampleTestComment\n\n          }\n        });\n      }).catch(error => {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.status === 500) {\n          toast.error(error.message);\n        } else {\n          toast.warn(error.response.data);\n        }\n      });\n    } else {\n      toast.warn(intl.formatMessage({\n        id: inputParam.masterAlertStatus\n      }));\n    }\n  };\n}\nexport function deleteComment(deleteParam) {\n  return dispatch => {\n    const methodUrl = deleteParam.methodUrl;\n    const selected = deleteParam.selectedRecord;\n    const Map = {};\n    Map[\"sprimarykey\"] = deleteParam.screenName === \"IDS_SAMPLECOMMENTS\" ? \"nregcommentcode\" : deleteParam.screenName === \"IDS_SUBSAMPLECOMMENTS\" ? \"nsamplecommentcode\" : \"ntestcommentcode\";\n    Map[\"nprimarykey\"] = deleteParam.screenName === \"IDS_SAMPLECOMMENTS\" ? selected.nregcommentcode : deleteParam.screenName === \"IDS_SUBSAMPLECOMMENTS\" ? selected.nsamplecommentcode : selected.ntestcommentcode;\n    const inputParam = {\n      inputData: {\n        [methodUrl.toLowerCase()]: {\n          [Map.sprimarykey]: Map.nprimarykey\n        },\n        npreregno: deleteParam.npreregno,\n        ntransactiontestcode: deleteParam.ntransactiontestcode,\n        ntransactionsamplecode: deleteParam.ntransactionsamplecode,\n        userinfo: deleteParam.userInfo\n      },\n      classUrl: \"comments\",\n      operation: 'delete',\n      methodUrl: methodUrl,\n      screenName: deleteParam.screenName\n    };\n    const masterData = deleteParam.masterData;\n\n    if (showEsign(deleteParam.esignRights, deleteParam.userInfo.nformcode, deleteParam.ncontrolCode)) {\n      // dispatch({\n      //     type: DEFAULT_RETURN,\n      //     payload: {\n      //         loadEsign: true,\n      //         screenData: { inputParam, masterData },\n      //         openCommentModal: true,\n      //         screenName: deleteParam.screenName,\n      //         operation: 'delete',\n      //         selectedRecord: {}\n      //     }\n      // });\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          loadEsign: true,\n          screenData: {\n            inputParam,\n            masterData\n          },\n          openCommentModal: true,\n          screenName: deleteParam.screenName,\n          operation: 'delete',\n          selectedRecord: {}\n        }\n      };\n      dispatch(updateStore(updateInfo));\n    } else {\n      dispatch(crudMaster(inputParam, masterData, \"openCommentModal\", {}));\n    }\n  };\n}\nexport function getSampleTestComments(selectedRecord, userInfo) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    rsapi.post(\"/comments/getSampleTestCommentsListById\", {\n      userinfo: userInfo,\n      ncommentsubtypecode: selectedRecord['ncommentsubtypecode'].value\n    }).then(response => {\n      let predefcomments;\n      let isAbbrevationneeded;\n      predefcomments = response.data['SampleTestComments'];\n\n      if (selectedRecord['ncommentsubtypecode'].value === 3) {\n        const predefcommentssMap = constructOptionList(predefcomments || [], \"nsampletestcommentscode\", \"spredefinedname\", undefined, undefined, false);\n        isAbbrevationneeded = true;\n        predefcomments = predefcommentssMap.get(\"OptionList\");\n        selectedRecord = { ...selectedRecord,\n          nsampletestcommentscode: predefcomments[0] && predefcomments[0],\n          scomments: predefcomments[0] && predefcomments[0].label\n        };\n      } else {\n        selectedRecord['nsampletestcommentscode'] && delete selectedRecord['nsampletestcommentscode'];\n        selectedRecord = { ...selectedRecord,\n          scomments: predefcomments[0] && predefcomments[0].sdescription\n        };\n      }\n\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          selectedRecord,\n          predefcomments,\n          isAbbrevationneeded,\n          loading: false\n        }\n      });\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(error.message);\n      } else {\n        toast.warn(error.response.data);\n      }\n    });\n  };\n}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/CommentsAction.js"],"names":["rsapi","toast","DEFAULT_RETURN","Axios","initRequest","updateStore","transactionStatus","constructOptionList","showEsign","crudMaster","intl","getCommentsCombo","inputParam","dispatch","masterList","length","urlArray","post","userinfo","userInfo","push","operation","concat","methodUrl","selectedrecord","editRow","all","then","response","predefcomments","sampleTestComments","data","CommentSubType","isAbbrevationneeded","selectedRecord","defaultLink","filter","item","ndefaultstatus","YES","sampleTestCommentsMap","undefined","CommentSubTypesMap","get","isSampleTestComment","predefcommentssMap","value","ncommentsubtypecode","nsampletestcommentscode","spredefinedname","label","scomments","sdescription","editObject","nsamplecommentscode","ssampletestcommentname","jsondata","scommentsubtype","nsampletestcommentcode","type","payload","modalName","screenName","ncontrolCode","loading","modalType","catch","error","status","message","warn","formatMessage","id","masterAlertStatus","deleteComment","deleteParam","selected","Map","nregcommentcode","nsamplecommentcode","ntestcommentcode","inputData","toLowerCase","sprimarykey","nprimarykey","npreregno","ntransactiontestcode","ntransactionsamplecode","classUrl","masterData","esignRights","nformcode","updateInfo","typeName","loadEsign","screenData","openCommentModal","getSampleTestComments"],"mappings":"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","sourcesContent":["import rsapi from \"../rsapi\";\r\nimport { toast } from \"react-toastify\";\r\nimport { DEFAULT_RETURN } from \"./LoginTypes\";\r\nimport Axios from \"axios\";\r\nimport { initRequest, updateStore } from \"./LoginAction\";\r\nimport { transactionStatus } from \"../components/Enumeration\";\r\nimport { constructOptionList, showEsign } from \"../components/CommonScript\";\r\nimport { crudMaster } from './ServiceAction'\r\nimport { intl } from \"../components/App\";\r\n\r\nexport function getCommentsCombo(inputParam) {\r\n    return (dispatch) => {\r\n        if (inputParam.masterList && inputParam.masterList.length > 0) {\r\n            dispatch(initRequest(true));\r\n            let urlArray = [rsapi.post(\"/sampletestcomments/getSampleTestComments\", { userinfo: inputParam.userInfo })];\r\n            urlArray.push(\r\n                rsapi.post(\"/comments/getCommentSubType\", {\r\n                    userinfo: inputParam.userInfo\r\n                })) \r\n                // if(inputParam.isSampleTestComment&&inputParam.isSampleTestComment===true) \r\n                // {\r\n                //  urlArray.push(\r\n                //      rsapi.post(\"/comments/getSampleTestCommentsListById\", {\r\n                //          ncommentsubtypecode:inputParam.ncommentsubtypecode,\r\n                //          userinfo: inputParam.userInfo\r\n                //      }))\r\n                // }     \r\n            if (inputParam.operation === \"update\") {\r\n                urlArray.push(rsapi.post(\"/comments/getEdit\".concat(inputParam.methodUrl), { userinfo: inputParam.userInfo, selectedrecord: inputParam.editRow }))\r\n            }\r\n            Axios.all(urlArray)\r\n                .then(response => {\r\n                    let predefcomments;\r\n                    let sampleTestComments = response[0].data;\r\n                    let CommentSubType = response[1].data['CommentSubType']; \r\n                    let isAbbrevationneeded;\r\n\r\n                    let selectedRecord = {};\r\n                    const defaultLink = sampleTestComments.filter(item => item.ndefaultstatus === transactionStatus.YES);\r\n                    const sampleTestCommentsMap  = constructOptionList(sampleTestComments || [], \"nsampletestcommentcode\",\"ssampletestcommentname\" , undefined, undefined, true);\r\n                    const CommentSubTypesMap  = constructOptionList(CommentSubType || [], \"ncommentsubtypecode\",\"scommentsubtype\" , undefined, undefined, false);\r\n                    sampleTestComments = sampleTestCommentsMap.get(\"OptionList\");\r\n                    CommentSubType = CommentSubTypesMap.get(\"OptionList\");\r\n                    if(inputParam.isSampleTestComment&&inputParam.isSampleTestComment===true)\r\n                    {\r\n                         predefcomments = response[1].data['SampleTestComments']; \r\n\r\n                        const predefcommentssMap  = constructOptionList(predefcomments || [], \"nsampletestcommentscode\",\"spredefinedname\" , undefined, undefined, false);\r\n                    \r\n                        predefcomments = predefcommentssMap.get(\"OptionList\"); \r\n                        if(CommentSubType[0].value===3)\r\n                        {\r\n                            isAbbrevationneeded=true\r\n                        }\r\n\r\n                        selectedRecord={...inputParam.selectedRecord,ncommentsubtypecode:CommentSubType[0],\r\n                            nsampletestcommentscode:predefcomments[0]&&predefcomments[0],spredefinedname:predefcomments[0]&&predefcomments[0].label\r\n                            ,scomments:predefcomments[0]&&predefcomments[0].item.sdescription} \r\n                    } \r\n               \r\n\r\n                    let editObject = {};\r\n                    if (inputParam.operation === \"update\") {\r\n                        editObject =  response[2].data;\r\n                        let nsamplecommentscode = {};\r\n                        nsamplecommentscode = { \"label\": editObject.ssampletestcommentname, \"value\": editObject.nsamplecommentscode }\r\n                        selectedRecord = {\r\n                            ...editObject, nsamplecommentscode,scomments :editObject.jsondata.scomments,  \r\n                            scommentsubtype:editObject.jsondata.scommentsubtype&&editObject.jsondata.scommentsubtype ,\r\n                            spredefinedname:editObject.jsondata.spredefinedname&&editObject.jsondata.spredefinedname ,\r\n                            scomments: editObject.jsondata.sdescription&&editObject.jsondata.sdescription, \r\n                             ncommentsubtypecode:editObject.jsondata.ncommentsubtypecode&&editObject.jsondata.ncommentsubtypecode,\r\n                             nsampletestcommentscode:editObject.jsondata.nsampletestcommentscode&&editObject.jsondata.nsampletestcommentscode\r\n                        };\r\n                    } else {\r\n                        selectedRecord = {...selectedRecord,\r\n                            nsamplecommentscode: defaultLink.length > 0 ? { \"label\": defaultLink[0].ssampletestcommentname, \"value\": defaultLink[0].nsampletestcommentcode } : \"\",\r\n\r\n                        };\r\n                    }\r\n                    dispatch({\r\n                        type: DEFAULT_RETURN,\r\n                        payload: {\r\n                            [inputParam.modalName]: true,\r\n                            operation: inputParam.operation,\r\n                            screenName: inputParam.screenName,\r\n                            ncontrolCode: inputParam.ncontrolCode,\r\n                            selectedRecord, loading: false,\r\n                            sampleTestComments,\r\n                            predefcomments,\r\n                            CommentSubType,\r\n                            isAbbrevationneeded,\r\n                            modalType: 'comment',\r\n                            modalName: [inputParam.modalName],\r\n                            editObject//,\r\n                          //  isSampleTestComment:inputParam.isSampleTestComment\r\n                        }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                    dispatch({ type: DEFAULT_RETURN, payload: { loading: false } });\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    } else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        } else {\r\n            toast.warn(intl.formatMessage({ id: inputParam.masterAlertStatus }));\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport function deleteComment(deleteParam) {\r\n    return (dispatch) => {\r\n        const methodUrl = deleteParam.methodUrl;\r\n        const selected = deleteParam.selectedRecord;\r\nconst Map={}\r\nMap[\"sprimarykey\"]=deleteParam.screenName===\"IDS_SAMPLECOMMENTS\"?\r\n\"nregcommentcode\":deleteParam.screenName===\"IDS_SUBSAMPLECOMMENTS\"?\"nsamplecommentcode\":\"ntestcommentcode\";\r\nMap[\"nprimarykey\"]=deleteParam.screenName===\"IDS_SAMPLECOMMENTS\"?selected.nregcommentcode:deleteParam.screenName===\"IDS_SUBSAMPLECOMMENTS\"?\r\nselected.nsamplecommentcode:selected.ntestcommentcode;\r\n\r\n\r\n        const inputParam = {\r\n            inputData: {\r\n                [methodUrl.toLowerCase()]: {[Map.sprimarykey]:Map.nprimarykey},\r\n                npreregno: deleteParam.npreregno,\r\n                ntransactiontestcode: deleteParam.ntransactiontestcode,\r\n                ntransactionsamplecode: deleteParam.ntransactionsamplecode,\r\n                userinfo: deleteParam.userInfo\r\n            },\r\n            classUrl: \"comments\",\r\n            operation: 'delete',\r\n            methodUrl: methodUrl,\r\n            screenName: deleteParam.screenName\r\n        }\r\n        const masterData = deleteParam.masterData;\r\n        if (showEsign(deleteParam.esignRights, deleteParam.userInfo.nformcode, deleteParam.ncontrolCode)) {\r\n            // dispatch({\r\n            //     type: DEFAULT_RETURN,\r\n            //     payload: {\r\n            //         loadEsign: true,\r\n            //         screenData: { inputParam, masterData },\r\n            //         openCommentModal: true,\r\n            //         screenName: deleteParam.screenName,\r\n            //         operation: 'delete',\r\n            //         selectedRecord: {}\r\n            //     }\r\n            // });\r\n            const updateInfo = {\r\n                typeName: DEFAULT_RETURN,\r\n                data: {   \r\n                    loadEsign: true,\r\n                    screenData: { inputParam, masterData },\r\n                    openCommentModal: true,\r\n                    screenName: deleteParam.screenName,\r\n                    operation: 'delete',\r\n                    selectedRecord: {}}\r\n            }\r\n            dispatch(updateStore(updateInfo));\r\n        } else {\r\n            dispatch(crudMaster(inputParam, masterData, \"openCommentModal\", {}));\r\n        }\r\n    }\r\n}\r\nexport function getSampleTestComments(selectedRecord, userInfo) {\r\n    return function (dispatch) {\r\n        dispatch(initRequest(true));\r\n        rsapi.post(\"/comments/getSampleTestCommentsListById\",\r\n            {\r\n                userinfo:userInfo,\r\n                ncommentsubtypecode:selectedRecord['ncommentsubtypecode'].value\r\n            })\r\n            .then(response => { \r\n                let predefcomments;\r\n                let isAbbrevationneeded;\r\n                predefcomments = response.data['SampleTestComments']; \r\n\r\n                if(selectedRecord['ncommentsubtypecode'].value===3)\r\n                { \r\n                    const predefcommentssMap  = constructOptionList(predefcomments || [], \"nsampletestcommentscode\",\"spredefinedname\" , undefined, undefined, false);\r\n                    isAbbrevationneeded=true\r\n                    predefcomments = predefcommentssMap.get(\"OptionList\"); \r\n                    selectedRecord={ ...selectedRecord,\r\n                        nsampletestcommentscode:predefcomments[0]&&predefcomments[0],scomments:predefcomments[0]&&predefcomments[0].label}\r\n                }else{\r\n                    selectedRecord['nsampletestcommentscode']&&delete selectedRecord['nsampletestcommentscode']\r\n                    selectedRecord={ ...selectedRecord,scomments:predefcomments[0]&&predefcomments[0].sdescription}\r\n                } \r\n              \r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: { \r\n                        selectedRecord,\r\n                        predefcomments,\r\n                        isAbbrevationneeded,\r\n                        loading: false\r\n\r\n                    }\r\n                });\r\n            })\r\n            .catch(error => {\r\n                dispatch({\r\n                    type: DEFAULT_RETURN,\r\n                    payload: {\r\n                        loading: false\r\n                    }\r\n                })\r\n                if (error.response.status === 500) {\r\n                    toast.error(error.message);\r\n                } else {\r\n                    toast.warn(error.response.data);\r\n                }\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}