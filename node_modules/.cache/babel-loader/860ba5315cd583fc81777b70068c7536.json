{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\components\\\\layout\\\\layout.component.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Switch } from \"react-router-dom\";\nimport IdleTimer from 'react-idle-timer';\nimport PropTypes from 'prop-types';\nimport IdleTimeOutModal from '../confirm-alert/IdleTimeOutModal';\nimport Sidebar from '../sidebar/sidebar.component';\nimport Header from '../header/header.component';\nimport routes from '../../routes';\nimport { navPage, updateStore } from '../../actions';\nimport rsapi from '../../rsapi';\nimport { toast } from 'react-toastify';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { IDLE_LOGOUT } from '../../actions/LoginTypes';\nimport { injectIntl } from 'react-intl'; // import { updateStore } from '../../actions/LoginAction';\n\nimport ScrollToTop from '../../actions/ScrollToTop';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass Layout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._onAction = e => {};\n\n    this._onActive = e => {};\n\n    this._onIdle = e => {\n      if (this.state.showIdleModal !== true) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'login/insertAuditAction';\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          // scomments: `UserName:${this.props.Login.userInfo.susername}, \n          // LoginID:${this.props.Login.userInfo.sloginid}`,\n          scomments: `User Name:${this.props.Login.userInfo.susername}; User Role:${this.props.Login.userInfo.suserrolename}; Login ID:${this.props.Login.userInfo.sloginid}`,\n          sauditaction: \"IDS_IDLETIMELOCK\"\n        };\n        rsapi.post(uRL, inputData).then(response => {\n          this.setState({\n            showIdleModal: true,\n            sessionExpired: Date.now() + 60000\n          });\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.handleLogin = event => {\n      if (event) {\n        if (this.password.current !== null && this.password.current.elements[0].value === \"\") {\n          toast.info(this.props.intl.formatMessage({\n            id: \"IDS_ENTERPASSWORD\"\n          }));\n          return;\n        } else {\n          let uRL = \"\";\n          let inputData = [];\n          uRL = 'login/idleTimeAuditAction';\n          inputData = {\n            userinfo: this.props.Login.userInfo,\n            //password: this.state.password,\n            password: this.password.current.elements[0].value,\n            flag: true,\n            nFlag: 1\n          };\n          rsapi.post(uRL, inputData).then(response => {\n            if (response.data['PassFlag'].toUpperCase() === 'SUCCESS') {\n              this.password.current.elements[0].value = \"\";\n              this.setState({\n                showIdleModal: false,\n                openModal: false\n              });\n            } else {\n              toast.info(response.data['PassFlag']);\n            }\n          }).catch(error => {\n            if (error.response.status === 500) {\n              toast.warn(error.message);\n            } else {\n              toast.warn(error.response.data);\n            }\n          });\n        }\n      }\n    };\n\n    this.enterKeyLogin = event => {\n      if (event.keyCode === 13) {\n        this.handleLogin(event);\n        event.preventDefault();\n      }\n    };\n\n    this.handleLogout = event => {\n      if (event) {\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'login/idleTimeAuditAction';\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          //password: this.state.password,\n          //password: this.password.current.elements[0].value,\n          flag: false,\n          nFlag: 2\n        };\n        rsapi.post(uRL, inputData).then(response => {\n          const updateInfo = {\n            typeName: IDLE_LOGOUT,\n            data: {\n              masterData: [],\n              inputParam: undefined,\n              idleneed: false\n            }\n          };\n          this.props.updateStore(updateInfo); //this.password.current.elements[0].value = \"\"\n          //this.setState({ showIdleModal: false })\n\n          this.props.navPage(\"login\");\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      }\n    };\n\n    this.renderer = event => {\n      // event.preventDefault();\n      const {\n        minutes,\n        seconds,\n        completed\n      } = event;\n\n      if (completed) {\n        // Render a completed state\n        let uRL = \"\";\n        let inputData = [];\n        uRL = 'login/insertAuditAction';\n        inputData = {\n          userinfo: this.props.Login.userInfo,\n          // scomments: `UserName:${this.props.Login.userInfo.susername}, \n          // LoginID:${this.props.Login.userInfo.sloginid}`,\n          scomments: `User Name:${this.props.Login.userInfo.susername}; User Role:${this.props.Login.userInfo.suserrolename}; Login ID:${this.props.Login.userInfo.sloginid}`,\n          sauditaction: \"IDS_SESSIONEXPIRED\",\n          nFlag: 2\n        };\n        rsapi.post(uRL, inputData).then(response => {\n          const updateInfo = {\n            typeName: IDLE_LOGOUT,\n            data: {\n              masterData: [],\n              inputParam: undefined,\n              idleneed: false\n            }\n          }; //this.props.navPage(\"login\");\n\n          this.props.updateStore(updateInfo);\n        }).catch(error => {\n          if (error.response.status === 500) {\n            toast.error(error.message);\n          } else {\n            toast.warn(error.response.data);\n          }\n        });\n      } else {\n        // Render a countdown\n        console.log(\"minutes\" + minutes + \"seconds\" + seconds);\n        return /*#__PURE__*/React.createElement(\"span\", {\n          style: {\n            'margin-left': '0.3rem',\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 20\n          }\n        }, minutes, \" minutes \", seconds, \" seconds..!\");\n      }\n\n      return null;\n    };\n\n    this.state = {\n      timeout: this.props.Login.idleTimeout,\n      showIdleModal: false,\n      userLoggedIn: false,\n      isTimedOut: false,\n      password: \"\",\n      sessionExpired: this.props.Login.sessionExpired\n    };\n    this.idleTimer = null; //this.selectInputOnChange = this.selectInputOnChange.bind(this)\n\n    this.password = React.createRef();\n  }\n\n  // selectInputOnChange = (event) => {\n  //     let password = \"\"\n  //     if (event !== null) {\n  //         password = event.target.value\n  //     }\n  //     this.setState({ password: password })\n  // }\n  render() {\n    this.confirmMessage = new ConfirmMessage();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"app-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(IdleTimer, {\n      ref: ref => {\n        this.idleTimer = ref;\n      },\n      element: document,\n      onActive: this._onActive,\n      onAction: this._onAction,\n      onIdle: this._onIdle,\n      debounce: 250,\n      timeout: this.state.timeout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }), this.props.Login.idleneed ? /*#__PURE__*/React.createElement(IdleTimeOutModal, {\n      showIdleModal: this.state.showIdleModal,\n      handleLogin: this.handleLogin,\n      handleLogout: this.handleLogout,\n      UserInfo: this.props.Login.userInfo,\n      passwordref: this.password //selectInputOnChange={this.selectInputOnChange}\n      ,\n      idealTime: this.props.Login.idleTimeout,\n      Login: this.props.Login,\n      sessionExpired: this.state.sessionExpired,\n      enterKeyLogin: this.enterKeyLogin,\n      renderer: this.renderer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(Sidebar, {\n      history: this.props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"content-wrapper\",\n      className: \"d-flex flex-column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      history: this.props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid px-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(ScrollToTop, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 37\n      }\n    }, routes.map((route, index) => {\n      return route.component ? /*#__PURE__*/React.createElement(Route, {\n        key: index,\n        path: route.path,\n        exact: route.exact,\n        name: route.name,\n        render: props => /*#__PURE__*/React.createElement(route.component, Object.assign({}, props, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 57\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 49\n        }\n      }) : null;\n    }))))))));\n  }\n\n}\n\nLayout.propTypes = {\n  match: PropTypes.any.isRequired,\n  history: PropTypes.func.isRequired\n};\nexport default connect(mapStateToProps, {\n  navPage,\n  updateStore\n})(injectIntl(Layout));","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/components/layout/layout.component.jsx"],"names":["React","connect","Route","Switch","IdleTimer","PropTypes","IdleTimeOutModal","Sidebar","Header","routes","navPage","updateStore","rsapi","toast","ConfirmMessage","IDLE_LOGOUT","injectIntl","ScrollToTop","mapStateToProps","state","Login","Layout","Component","constructor","props","_onAction","e","_onActive","_onIdle","showIdleModal","uRL","inputData","userinfo","userInfo","scomments","susername","suserrolename","sloginid","sauditaction","post","then","response","setState","sessionExpired","Date","now","catch","error","status","message","warn","data","handleLogin","event","password","current","elements","value","info","intl","formatMessage","id","flag","nFlag","toUpperCase","openModal","enterKeyLogin","keyCode","preventDefault","handleLogout","updateInfo","typeName","masterData","inputParam","undefined","idleneed","renderer","minutes","seconds","completed","console","log","color","timeout","idleTimeout","userLoggedIn","isTimedOut","idleTimer","createRef","render","confirmMessage","ref","document","map","route","index","component","path","exact","name","propTypes","match","any","isRequired","history","func"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport IdleTimer from 'react-idle-timer';\r\nimport PropTypes from 'prop-types';\r\nimport IdleTimeOutModal from '../confirm-alert/IdleTimeOutModal';\r\nimport Sidebar from '../sidebar/sidebar.component';\r\nimport Header from '../header/header.component';\r\nimport routes from '../../routes';\r\nimport { navPage, updateStore } from '../../actions'\r\nimport rsapi from '../../rsapi';\r\nimport { toast } from 'react-toastify';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { IDLE_LOGOUT } from '../../actions/LoginTypes';\r\nimport { injectIntl } from 'react-intl';\r\n// import { updateStore } from '../../actions/LoginAction';\r\nimport  ScrollToTop  from '../../actions/ScrollToTop';\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        Login: state.Login\r\n    }\r\n}\r\n\r\nclass Layout extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timeout: this.props.Login.idleTimeout,\r\n            showIdleModal: false,\r\n            userLoggedIn: false,\r\n            isTimedOut: false,\r\n            password: \"\",\r\n            sessionExpired: this.props.Login.sessionExpired\r\n        }\r\n\r\n        this.idleTimer = null\r\n        //this.selectInputOnChange = this.selectInputOnChange.bind(this)\r\n        this.password = React.createRef();\r\n    }\r\n\r\n    _onAction = (e) => {\r\n\r\n    }\r\n\r\n    _onActive = (e) => {\r\n\r\n    }\r\n\r\n    _onIdle = (e) => {\r\n        if (this.state.showIdleModal !== true) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'login/insertAuditAction';\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                // scomments: `UserName:${this.props.Login.userInfo.susername}, \r\n                // LoginID:${this.props.Login.userInfo.sloginid}`,\r\n                scomments: `User Name:${this.props.Login.userInfo.susername}; User Role:${this.props.Login.userInfo.suserrolename}; Login ID:${this.props.Login.userInfo.sloginid}`,\r\n                sauditaction: \"IDS_IDLETIMELOCK\"\r\n            }\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n                    this.setState({ showIdleModal: true, sessionExpired: Date.now() + 60000 });\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    handleLogin = (event) => {\r\n        if (event) {\r\n            if (this.password.current !== null && this.password.current.elements[0].value === \"\") {\r\n                toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERPASSWORD\" }));\r\n                return;\r\n            }\r\n            else {\r\n                let uRL = \"\";\r\n                let inputData = [];\r\n                uRL = 'login/idleTimeAuditAction';\r\n                inputData = {\r\n                    userinfo: this.props.Login.userInfo,\r\n                    //password: this.state.password,\r\n                    password: this.password.current.elements[0].value,\r\n                    flag: true, nFlag: 1\r\n                }\r\n\r\n                rsapi.post(uRL, inputData)\r\n                    .then(response => {\r\n                        if (response.data['PassFlag'].toUpperCase() === 'SUCCESS') {\r\n                            this.password.current.elements[0].value = \"\"\r\n                            this.setState({ showIdleModal: false, openModal: false })\r\n                        }\r\n                        else {\r\n                            toast.info(response.data['PassFlag']);\r\n                        }\r\n                    })\r\n                    .catch(error => {\r\n                        if (error.response.status === 500) {\r\n                            toast.warn(error.message);\r\n                        }\r\n                        else {\r\n                            toast.warn(error.response.data);\r\n                        }\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    enterKeyLogin = (event) => {\r\n        if (event.keyCode === 13) {\r\n            this.handleLogin(event);\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n\r\n    handleLogout = (event) => {\r\n        if (event) {\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'login/idleTimeAuditAction';\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                //password: this.state.password,\r\n                //password: this.password.current.elements[0].value,\r\n                flag: false, nFlag: 2\r\n            }\r\n\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n\r\n                    const updateInfo = {\r\n                        typeName: IDLE_LOGOUT,\r\n                        data: {\r\n                            masterData: [], inputParam: undefined, idleneed: false\r\n                        }\r\n                    }\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                    //this.password.current.elements[0].value = \"\"\r\n                    //this.setState({ showIdleModal: false })\r\n                    this.props.navPage(\"login\");\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    renderer = (event) => {\r\n        // event.preventDefault();\r\n        const {  minutes, seconds, completed } = event;\r\n        if (completed) {\r\n            // Render a completed state\r\n            let uRL = \"\";\r\n            let inputData = [];\r\n            uRL = 'login/insertAuditAction';\r\n            inputData = {\r\n                userinfo: this.props.Login.userInfo,\r\n                // scomments: `UserName:${this.props.Login.userInfo.susername}, \r\n                // LoginID:${this.props.Login.userInfo.sloginid}`,\r\n                scomments: `User Name:${this.props.Login.userInfo.susername}; User Role:${this.props.Login.userInfo.suserrolename}; Login ID:${this.props.Login.userInfo.sloginid}`,\r\n                sauditaction: \"IDS_SESSIONEXPIRED\", nFlag: 2\r\n            }\r\n\r\n            rsapi.post(uRL, inputData)\r\n                .then(response => {\r\n\r\n                    const updateInfo = {\r\n                        typeName: IDLE_LOGOUT,\r\n                        data: {\r\n                            masterData: [], inputParam: undefined, idleneed: false\r\n                        }\r\n                    }\r\n                    //this.props.navPage(\"login\");\r\n                    this.props.updateStore(updateInfo);\r\n\r\n                })\r\n                .catch(error => {\r\n                    if (error.response.status === 500) {\r\n                        toast.error(error.message);\r\n                    }\r\n                    else {\r\n                        toast.warn(error.response.data);\r\n                    }\r\n                })\r\n        } else {\r\n            // Render a countdown\r\n            console.log(\"minutes\" + minutes + \"seconds\" + seconds)\r\n            return <span style={{ 'margin-left': '0.3rem', color: 'red' }}>{minutes} minutes {seconds} seconds..!</span>;\r\n\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // selectInputOnChange = (event) => {\r\n    //     let password = \"\"\r\n    //     if (event !== null) {\r\n    //         password = event.target.value\r\n    //     }\r\n    //     this.setState({ password: password })\r\n    // }\r\n\r\n    render() {\r\n        this.confirmMessage = new ConfirmMessage();\r\n        return (\r\n            <>\r\n                <div id=\"app-wrapper\">\r\n                    <IdleTimer\r\n                        ref={ref => { this.idleTimer = ref }}\r\n                        element={document}\r\n                        onActive={this._onActive}\r\n                        onAction={this._onAction}\r\n                        onIdle={this._onIdle}\r\n                        debounce={250}\r\n                        timeout={this.state.timeout} />\r\n                    {this.props.Login.idleneed ?\r\n                        <IdleTimeOutModal\r\n                            showIdleModal={this.state.showIdleModal}\r\n                            handleLogin={this.handleLogin}\r\n                            handleLogout={this.handleLogout}\r\n                            UserInfo={this.props.Login.userInfo}\r\n                            passwordref={this.password}\r\n                            //selectInputOnChange={this.selectInputOnChange}\r\n                            idealTime={this.props.Login.idleTimeout}\r\n                            Login={this.props.Login}\r\n                            sessionExpired={this.state.sessionExpired}\r\n                            enterKeyLogin={this.enterKeyLogin}\r\n                            renderer={this.renderer} />\r\n                        : \"\"}\r\n\r\n                    <Sidebar history={this.props} />\r\n                    <div id=\"content-wrapper\" className=\"d-flex flex-column\">\r\n                        <div id=\"content\">\r\n                            <Header history={this.props} />\r\n                            <div className=\"container-fluid px-0\">\r\n                                <ScrollToTop>\r\n                                    <Switch>\r\n                                        {routes.map((route, index) => {\r\n                                            return route.component ? (\r\n                                                <Route\r\n                                                    key={index}\r\n                                                    path={route.path}\r\n                                                    exact={route.exact}\r\n                                                    name={route.name}\r\n                                                    render={props => (\r\n                                                        <route.component {...props} />\r\n                                                    )} />\r\n                                            ) : (null);\r\n                                        })}\r\n                                    </Switch>\r\n                                </ScrollToTop>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nLayout.propTypes = {\r\n    match: PropTypes.any.isRequired,\r\n    history: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps, { navPage, updateStore })(injectIntl(Layout));"]},"metadata":{},"sourceType":"module"}