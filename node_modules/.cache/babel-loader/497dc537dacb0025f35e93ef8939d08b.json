{"ast":null,"code":"import _defineProperty from\"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import rsapi from'../rsapi';import{DEFAULT_RETURN}from'./LoginTypes';import{toast}from'react-toastify';import Axios from'axios';import{initRequest}from'./LoginAction';import{transactionStatus}from'../components/Enumeration';import{constructOptionList}from'../components/CommonScript';export function openFTPConfigModal(userInfo,ncontrolcode){return function(dispatch){dispatch(initRequest(true));var uiArray=[rsapi.post(\"site/getSiteForFTP\",{\"userinfo\":userInfo})];uiArray.push(rsapi.post(\"ftpconfig/getFTPType\",{\"userinfo\":userInfo}));Axios.all(uiArray).then(function(response){var selectedRecord={};//const siteList = response[0].data[\"SiteList\"] || [];\n// const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\n// 'ndefaultstatus') || [];\nvar ftpTypeListMap=constructOptionList(response[1].data,'nftptypecode','sftptypename',undefined,undefined,undefined,'ndefaultstatus')||[];var ftpTypeList=ftpTypeListMap.get(\"OptionList\");var defaultftpTypeList=ftpTypeListMap.get(\"DefaultValue\");//const siteList = siteListMap.get(\"OptionList\");\nselectedRecord['nftptypecode']=defaultftpTypeList;// selectedRecord['siteValue']=siteList.length>0? siteList[0].ndefaultstatus===transactionStatus.YES?  \n//                             [{value:siteList[0].nsitecode,label:siteList[0].ssitename,item:siteList[0]}]\n//                             :[]:[]\nselectedRecord[\"sphysicalpath\"]=response[0].data[\"CheckSumDefaultPath\"];dispatch({type:DEFAULT_RETURN,payload:{openModal:true,operation:\"create\",// siteOptions:siteList,\nftpTypeList:ftpTypeList,checkSumDefaultPath:response[0].data[\"CheckSumDefaultPath\"],selectedRecord:selectedRecord,ncontrolcode:ncontrolcode,loading:false}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};};export function fetchFTPConfigByID(editParam){return function(dispatch){var _rsapi$post;var url1=rsapi.post(\"site/getSiteForFTP\",{\"userinfo\":editParam.userInfo});var url2=rsapi.post(\"ftpconfig/getActiveFTPConfigById\",(_rsapi$post={},_defineProperty(_rsapi$post,editParam.primaryKeyField,editParam.primaryKeyValue),_defineProperty(_rsapi$post,\"userinfo\",editParam.userInfo),_rsapi$post));var url3=rsapi.post(\"ftpconfig/getFTPType\",{\"userinfo\":editParam.userInfo});dispatch(initRequest(true));Axios.all([url1,url2,url3]).then(function(response){var selectedId=editParam.primaryKeyValue;var selectedRecord=response[1].data;// const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\n// false) || [];\n// const siteList = siteListMap.get(\"OptionList\");\nselectedRecord['nsitecode']={value:response[1].data.nsitecode,label:response[1].data.ssitename};selectedRecord['nftptypecode']={value:response[1].data.nftptypecode,label:response[1].data.sftptypename};dispatch({type:DEFAULT_RETURN,payload:{openModal:true,selectedRecord:selectedRecord,ftpTypeList:constructOptionList(response[2].data,'nftptypecode','sftptypename').get(\"OptionList\"),operation:editParam.operation,screenName:editParam.screenName,//siteOptions:response[0].data,\nsiteOptions:constructOptionList(response[0].data.SiteList,'nsitecode','ssitename').get(\"OptionList\"),//:siteList,\nncontrolcode:editParam.ncontrolCode,inputparam:editParam.inputparam,loading:false,selectedId:selectedId}});}).catch(function(error){dispatch({type:DEFAULT_RETURN,payload:{loading:false}});if(error.response.status===500){toast.error(error.message);}else{toast.warn(error.response.data);}});};}","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/actions/FTPConfigAction.js"],"names":["rsapi","DEFAULT_RETURN","toast","Axios","initRequest","transactionStatus","constructOptionList","openFTPConfigModal","userInfo","ncontrolcode","dispatch","uiArray","post","push","all","then","response","selectedRecord","ftpTypeListMap","data","undefined","ftpTypeList","get","defaultftpTypeList","type","payload","openModal","operation","checkSumDefaultPath","loading","catch","error","status","message","warn","fetchFTPConfigByID","editParam","url1","url2","primaryKeyField","primaryKeyValue","url3","selectedId","value","nsitecode","label","ssitename","nftptypecode","sftptypename","screenName","siteOptions","SiteList","ncontrolCode","inputparam"],"mappings":"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","sourcesContent":["import rsapi from '../rsapi';\r\nimport {DEFAULT_RETURN} from './LoginTypes';\r\nimport { toast } from 'react-toastify';\r\nimport Axios from 'axios'\r\nimport { initRequest } from './LoginAction';\r\nimport { transactionStatus } from '../components/Enumeration';\r\nimport { constructOptionList } from '../components/CommonScript';\r\n\r\nexport function openFTPConfigModal  (userInfo,ncontrolcode)  {\r\n\r\n    return function(dispatch){\r\n    dispatch(initRequest(true));\r\n   const uiArray=[rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": userInfo})]\r\n   uiArray.push(rsapi.post(\"ftpconfig/getFTPType\",{\"userinfo\": userInfo}))\r\n   Axios.all(uiArray).then(response=> { \r\n        const selectedRecord={};\r\n        //const siteList = response[0].data[\"SiteList\"] || [];\r\n        // const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\r\n        // 'ndefaultstatus') || [];\r\n        const ftpTypeListMap =constructOptionList(response[1].data,'nftptypecode','sftptypename',undefined, undefined, undefined,\r\n        'ndefaultstatus') || [];\r\n        const ftpTypeList =ftpTypeListMap.get(\"OptionList\");\r\n        const defaultftpTypeList =ftpTypeListMap.get(\"DefaultValue\");\r\n\r\n        //const siteList = siteListMap.get(\"OptionList\");\r\n      \r\n        selectedRecord['nftptypecode']=defaultftpTypeList\r\n\r\n        // selectedRecord['siteValue']=siteList.length>0? siteList[0].ndefaultstatus===transactionStatus.YES?  \r\n        //                             [{value:siteList[0].nsitecode,label:siteList[0].ssitename,item:siteList[0]}]\r\n        //                             :[]:[]\r\n        selectedRecord[\"sphysicalpath\"]= response[0].data[\"CheckSumDefaultPath\"];\r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n                openModal:true,\r\n                operation:\"create\",\r\n               // siteOptions:siteList,\r\n                ftpTypeList,\r\n                checkSumDefaultPath: response[0].data[\"CheckSumDefaultPath\"],\r\n                selectedRecord,ncontrolcode    \r\n                ,loading:false           \r\n                }\r\n            }) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n};\r\n\r\nexport function fetchFTPConfigByID(editParam){\r\n\r\n    return function(dispatch){\r\n    const url1=rsapi.post(\"site/getSiteForFTP\",{\"userinfo\": editParam.userInfo})\r\n    const url2=rsapi.post(\"ftpconfig/getActiveFTPConfigById\",\r\n            { [editParam.primaryKeyField] :editParam.primaryKeyValue,\"userinfo\":editParam.userInfo} )\r\n     const url3=rsapi.post(\"ftpconfig/getFTPType\",{\"userinfo\": editParam.userInfo})\r\n    dispatch(initRequest(true));\r\n    Axios.all([url1,url2,url3])\r\n    .then(response=> { \r\n        let selectedId=editParam.primaryKeyValue\r\n        let selectedRecord=response[1].data\r\n        // const siteListMap = constructOptionList(response[0].data.SiteList,'nsitecode','ssitename',undefined, undefined, undefined,\r\n        // false) || [];\r\n        // const siteList = siteListMap.get(\"OptionList\");\r\n        selectedRecord['nsitecode']={value:response[1].data.nsitecode,label:response[1].data.ssitename}\r\n        selectedRecord['nftptypecode']={value:response[1].data.nftptypecode,label:response[1].data.sftptypename}\r\n        \r\n        dispatch({\r\n            type: DEFAULT_RETURN, payload:{\r\n            openModal:true, \r\n            selectedRecord ,\r\n            ftpTypeList:constructOptionList(response[2].data,'nftptypecode','sftptypename').get(\"OptionList\"),\r\n            operation:editParam.operation,\r\n            screenName:editParam.screenName,\r\n            //siteOptions:response[0].data,\r\n            siteOptions:constructOptionList(response[0].data.SiteList,'nsitecode','ssitename').get(\"OptionList\"),//:siteList,\r\n            ncontrolcode:editParam.ncontrolCode,\r\n            inputparam:editParam.inputparam,\r\n            loading:false,selectedId\r\n        }}) \r\n    })\r\n    .catch(error => {\r\n        dispatch({type: DEFAULT_RETURN, payload: {loading:false}})\r\n        if (error.response.status === 500){\r\n            toast.error(error.message);\r\n        } \r\n        else{               \r\n            toast.warn(error.response.data);\r\n        }         \r\n    })\r\n}\r\n}"]},"metadata":{},"sourceType":"module"}