{"ast":null,"code":"import { Lims_JSON_stringify, sortData } from '../components/CommonScript';\nimport rsapi from '../rsapi';\nimport { initRequest } from './LoginAction';\nimport { DEFAULT_RETURN, REQUEST_FAILURE } from './LoginTypes';\nimport { toast } from 'react-toastify';\nimport { postCRUDOrganiseSearch } from './ServiceAction';\nimport { intl } from '../components/App';\nexport const validateEsignCredentialStorage = (inputParam, modalName, action) => {\n  return dispatch => {\n    //dispatch(initRequest(true));\n    if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\n      inputParam.inputData[\"userinfo\"] = { ...inputParam.inputData.userinfo,\n        sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\n        smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename)\n      };\n    }\n\n    return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData).then(response => {\n      if (response.data === \"Success\") {\n        const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\n        inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\n\n        if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n          delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\n          } // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\n\n\n          if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\n            delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\n            delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\n          }\n        }\n\n        dispatch(crudMasterstorage(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName, undefined, action));\n      }\n    }).catch(error => {\n      dispatch({\n        type: DEFAULT_RETURN,\n        payload: {\n          loading: false\n        }\n      });\n\n      if (error.response.status === 500) {\n        toast.error(intl.formatMessage({\n          id: error.message\n        }));\n      } else {\n        if (error.response.data === 'IDS_SOURCEANDDESTINATIONMISMATCH') {\n          action();\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      }\n    });\n  };\n};\nexport function crudMasterstorage(inputParam, masterData, modalName, defaultInput, action) {\n  return function (dispatch) {\n    dispatch(initRequest(true));\n    let requestUrl = '';\n\n    if (inputParam.isFileupload) {\n      const formData = inputParam.formData;\n      formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\n    } else {\n      requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData\n      });\n    }\n\n    return requestUrl.then(response => {\n      if (response.status === 202) {\n        //HttpStatus:Accepted\n        //Use this block when u need to display any success message\n        let selectedRecordObj = {};\n\n        if (inputParam.selectedRecord) {\n          selectedRecordObj = {\n            selectedRecord: inputParam.selectedRecord\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loadEsign: false,\n            [modalName]: false,\n            loading: false,\n            ...selectedRecordObj\n          }\n        });\n        toast.success(response.data);\n      } else if (response.status === 208) {\n        //HttpStatus:Accepted\n        //208-Already Reported\n        let selectedRecordObj = {};\n\n        if (inputParam.selectedRecord) {\n          selectedRecordObj = {\n            selectedRecord: inputParam.selectedRecord\n          };\n        }\n\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loadEsign: false,\n            [modalName]: false,\n            loading: false,\n            ...selectedRecordObj\n          }\n        });\n        toast.warn(response.data);\n      } else {\n        const retrievedData = sortData(response.data);\n\n        if (masterData === undefined || Array.isArray(retrievedData)) {\n          masterData = retrievedData;\n        } else {\n          masterData = { ...masterData,\n            ...retrievedData\n          };\n\n          if (modalName === \"openModal\" && inputParam.operation !== \"delete\" && inputParam.operation !== \"prepare\" && inputParam.operation !== \"create\" && inputParam.operation !== \"copy\") {\n            if (inputParam.postParam) {\n              if (masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]) {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              } else {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][0][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject][0];\n              }\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"create\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]); //masterData[inputParam.postParam.selectedObject] = response.data;\n\n              sortData(masterData);\n            }\n          } else if (modalName === \"openChildModal\" && inputParam.operation === \"create\") {\n            //searchedData\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n              masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n\n              if (masterData[\"searchedData\"] !== undefined) {\n                const foundIndex = masterData[\"searchedData\"].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              }\n\n              sortData(masterData);\n            }\n          } else if (modalName === \"openModal\" && inputParam.operation === \"copy\") {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\n              masterData = { ...masterData,\n                ...response.data\n              };\n              sortData(masterData);\n            }\n          } else if (modalName === \"openModal\" && (inputParam.operation === \"delete\" || inputParam.operation === \"prepare\")) {\n            if (inputParam.postParam && inputParam.postParam.isSingleGet) {\n              if (inputParam.postParam.task === \"cancel\") {\n                const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]);\n                masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\n              } else {\n                const list = masterData[inputParam.postParam.inputListName].filter(item => item[inputParam.postParam.primaryKeyField] !== inputParam.postParam.primaryKeyValue);\n                masterData[inputParam.postParam.inputListName] = list; // const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\n                //   x => x[inputParam.postParam.primaryKeyField] === inputParam.postParam.primaryKeyField\n                // );\n                // masterData[inputParam.postParam.inputListName].splice(foundIndex, 1)         \n              }\n\n              masterData = { ...masterData,\n                ...response.data\n              };\n              sortData(masterData);\n            }\n          }\n        } // (masterData);\n\n\n        let openModal = false; // let openChildModal= false;\n\n        let selectedRecord = {};\n        let activeSampleTab = inputParam.activeSampleTab ? {\n          activeSampleTab: inputParam.activeSampleTab\n        } : '';\n        let activeTestKey = inputParam.activeTestKey ? {\n          activeTestKey: inputParam.activeTestKey\n        } : '';\n        let showSample = inputParam.showSample ? inputParam.showSample : '';\n        let respObject = {\n          masterData,\n          inputParam,\n          modalName,\n          //   openChildModal,\n          //modalName:undefined,\n          [modalName]: openModal,\n          operation: inputParam.operation,\n          masterStatus: \"\",\n          errorCode: undefined,\n          loadEsign: false,\n          showEsign: false,\n          selectedRecord,\n          loading: false,\n          dataState: inputParam.dataState,\n          selectedId: inputParam.selectedId,\n          ...activeSampleTab,\n          ...activeTestKey,\n          showSample,\n          design: [],\n          //organisation: undefined\n          organisation: inputParam.nextNode ? {\n            selectedNode: inputParam.nextNode,\n            selectedNodeName: masterData.SelectedNodeName,\n            primaryKeyValue: masterData.AddedChildPrimaryKey\n          } : undefined,\n          showConfirmAlert: inputParam.showConfirmAlert,\n          loadPoolSource: inputParam.loadPoolSource,\n          skip: inputParam.skip || undefined,\n          take: inputParam.take || undefined,\n          openPortal: false,\n          importRetrieveOrDispose: false,\n          isRetrieveOrDispose: false\n        };\n\n        if (inputParam.operation === \"create\" || inputParam.operation === \"copy\") {\n          if (inputParam.saveType === 2) {\n            openModal = true;\n            selectedRecord = defaultInput;\n          }\n\n          respObject = { ...respObject,\n            [modalName]: openModal,\n            selectedRecord\n          };\n        }\n\n        if ((modalName === \"openModal\" || modalName === \"openChildModal\") && Object.keys(masterData).indexOf(\"searchedData\") !== -1 && masterData[\"searchedData\"] !== undefined) {\n          dispatch(postCRUDOrganiseSearch(inputParam.postParam, respObject));\n        } else {\n          dispatch({\n            type: DEFAULT_RETURN,\n            payload: { ...respObject,\n              modalName: undefined\n            }\n          });\n        }\n      }\n    }).catch(error => {\n      if (error.response.status === 500) {\n        dispatch({\n          type: REQUEST_FAILURE,\n          payload: {\n            error: error.message,\n            loading: false // openPortal:this.props.Login.openPortal,\n            //openModal:inputParam.openPortal?false:true\n\n          }\n        });\n      } else {\n        dispatch({\n          type: DEFAULT_RETURN,\n          payload: {\n            loading: false\n          }\n        });\n\n        if (error.response.data === 'IDS_SOURCEANDDESTINATIONMISMATCH') {\n          action();\n        } else {\n          toast.warn(intl.formatMessage({\n            id: error.response.data\n          }));\n        }\n      }\n    });\n  };\n}","map":{"version":3,"sources":["E:/WorkingFolder/React_Postgres/ALPD/branches/SOURCE-513-PROD/SOURCE-513-ALPD-5304/QuaLISWeb/src/actions/SampleStorageMoveAction.js"],"names":["Lims_JSON_stringify","sortData","rsapi","initRequest","DEFAULT_RETURN","REQUEST_FAILURE","toast","postCRUDOrganiseSearch","intl","validateEsignCredentialStorage","inputParam","modalName","action","dispatch","inputData","userinfo","sformname","smodulename","post","then","response","data","methodUrl","toLowerCase","crudMasterstorage","undefined","catch","error","type","payload","loading","status","formatMessage","id","message","warn","masterData","defaultInput","requestUrl","isFileupload","formData","append","JSON","stringify","classUrl","operation","selectedRecordObj","selectedRecord","loadEsign","success","retrievedData","Array","isArray","postParam","selectedObject","primaryKeyField","foundIndex","inputListName","findIndex","x","isSingleGet","push","task","list","filter","item","primaryKeyValue","openModal","activeSampleTab","activeTestKey","showSample","respObject","masterStatus","errorCode","showEsign","dataState","selectedId","design","organisation","nextNode","selectedNode","selectedNodeName","SelectedNodeName","AddedChildPrimaryKey","showConfirmAlert","loadPoolSource","skip","take","openPortal","importRetrieveOrDispose","isRetrieveOrDispose","saveType","Object","keys","indexOf"],"mappings":"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","sourcesContent":[" import { Lims_JSON_stringify, sortData } from '../components/CommonScript';\r\nimport rsapi from '../rsapi';\r\nimport { initRequest } from './LoginAction';\r\nimport {DEFAULT_RETURN, REQUEST_FAILURE} from './LoginTypes'; \r\nimport { toast } from 'react-toastify';   \r\nimport { postCRUDOrganiseSearch } from './ServiceAction';\r\nimport { intl } from '../components/App';\r\n\r\nexport const validateEsignCredentialStorage = (inputParam, modalName,action) => {\r\n    return (dispatch) => {\r\n      //dispatch(initRequest(true));\r\n      if (inputParam && inputParam.inputData && inputParam.inputData.userinfo) {\r\n        inputParam.inputData[\"userinfo\"] = {\r\n          ...inputParam.inputData.userinfo,\r\n          sformname: Lims_JSON_stringify(inputParam.inputData.userinfo.sformname),\r\n          smodulename: Lims_JSON_stringify(inputParam.inputData.userinfo.smodulename),\r\n        }\r\n      }\r\n      return rsapi.post(\"login/validateEsignCredential\", inputParam.inputData)\r\n        .then(response => {\r\n          if (response.data === \"Success\") {\r\n  \r\n            const methodUrl = inputParam[\"screenData\"][\"inputParam\"][\"methodUrl\"];\r\n            inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][\"userinfo\"] = inputParam.inputData.userinfo;\r\n  \r\n            if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n  \r\n              delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignreason\"];\r\n  \r\n              if (inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()]) {\r\n                delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esignpassword\"];\r\n                delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"esigncomments\"];\r\n                delete inputParam[\"screenData\"][\"inputParam\"][\"inputData\"][methodUrl.toLowerCase()][\"agree\"];\r\n  \r\n  \r\n              }\r\n  \r\n              // ALPD-2437 added for Type3 Component. Use selected record to clear esign values\r\n              if (inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"]) {\r\n  \r\n                delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignreason\"];\r\n                delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esignpassword\"];\r\n                delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"esigncomments\"];\r\n                delete inputParam[\"screenData\"][\"inputParam\"][\"selectedRecord\"][\"agree\"];\r\n              }\r\n            }\r\n            dispatch(crudMasterstorage(inputParam[\"screenData\"][\"inputParam\"], inputParam[\"screenData\"][\"masterData\"], modalName,undefined,action))  \r\n          }\r\n        })\r\n        .catch(error => {\r\n          dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n          if (error.response.status === 500) {\r\n            toast.error(intl.formatMessage({ id: error.message }));\r\n          } else {\r\n            if(error.response.data==='IDS_SOURCEANDDESTINATIONMISMATCH'){\r\n                action()\r\n            }else{\r\n                toast.warn(intl.formatMessage({ id: error.response.data }));\r\n            } \r\n          }\r\n        })\r\n    };\r\n  }\r\n\r\n\r\n  export function crudMasterstorage(inputParam, masterData, modalName, defaultInput,action) {\r\n\r\n    return function (dispatch) {\r\n      dispatch(initRequest(true));\r\n      let requestUrl = '';\r\n      if (inputParam.isFileupload) {\r\n        const formData = inputParam.formData;\r\n        formData.append(\"userinfo\", JSON.stringify(inputParam.inputData.userinfo));\r\n        requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, formData);\r\n      } else {\r\n        requestUrl = rsapi.post(inputParam.classUrl + \"/\" + inputParam.operation + inputParam.methodUrl, { ...inputParam.inputData });\r\n      }\r\n      return requestUrl\r\n        .then(response => {\r\n          if (response.status === 202) {\r\n            //HttpStatus:Accepted\r\n            //Use this block when u need to display any success message\r\n            let selectedRecordObj = {}\r\n            if (inputParam.selectedRecord) {\r\n              selectedRecordObj = { selectedRecord: inputParam.selectedRecord }\r\n            }\r\n  \r\n            dispatch({\r\n              type: DEFAULT_RETURN, payload: {\r\n                loadEsign: false,\r\n                [modalName]: false,\r\n                loading: false,\r\n                ...selectedRecordObj\r\n              }\r\n            })\r\n            toast.success(response.data);\r\n          }\r\n          else if (response.status === 208) {\r\n            //HttpStatus:Accepted\r\n            //208-Already Reported\r\n            let selectedRecordObj = {}\r\n            if (inputParam.selectedRecord) {\r\n              selectedRecordObj = { selectedRecord: inputParam.selectedRecord }\r\n            }\r\n            dispatch({\r\n              type: DEFAULT_RETURN, payload: {\r\n                loadEsign: false,\r\n                [modalName]: false,\r\n                loading: false,\r\n                ...selectedRecordObj\r\n  \r\n              }\r\n            })\r\n            toast.warn(response.data);\r\n          }\r\n          else {\r\n            const retrievedData = sortData(response.data);\r\n            if (masterData === undefined || Array.isArray(retrievedData)) {\r\n              masterData = retrievedData;\r\n            }\r\n            else {\r\n              masterData = {\r\n                ...masterData,\r\n                ...retrievedData\r\n              };\r\n              if (modalName === \"openModal\" && inputParam.operation !== \"delete\" && inputParam.operation !== \"prepare\"\r\n                && inputParam.operation !== \"create\" && inputParam.operation !== \"copy\") {\r\n  \r\n                if (inputParam.postParam) {\r\n                  if (masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]) {\r\n                    const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                      x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                    );\r\n                    masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                  } else {\r\n                    const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                      x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][0][inputParam.postParam.primaryKeyField]\r\n                    );\r\n                    masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject][0];\r\n                  }\r\n                }\r\n              }\r\n              else if (modalName === \"openModal\" && inputParam.operation === \"create\") {\r\n                if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                  masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\r\n                  //masterData[inputParam.postParam.selectedObject] = response.data;\r\n                  sortData(masterData);\r\n                }\r\n              }\r\n              else if (modalName === \"openChildModal\" && inputParam.operation === \"create\") {//searchedData\r\n                if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                  const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                  );\r\n                  masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n  \r\n                  if (masterData[\"searchedData\"] !== undefined) {\r\n                    const foundIndex = masterData[\"searchedData\"].findIndex(\r\n                      x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                    );\r\n                    masterData[\"searchedData\"][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n  \r\n                  }\r\n                  sortData(masterData);\r\n                }\r\n              }\r\n              else if (modalName === \"openModal\" && inputParam.operation === \"copy\") {\r\n                if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                  masterData[inputParam.postParam.inputListName].push(response.data[inputParam.postParam.selectedObject]);\r\n                  masterData = { ...masterData, ...response.data };\r\n                  sortData(masterData);\r\n                }\r\n              }\r\n              else if (modalName === \"openModal\" && (inputParam.operation === \"delete\" || inputParam.operation === \"prepare\")) {\r\n                if (inputParam.postParam && inputParam.postParam.isSingleGet) {\r\n                  if (inputParam.postParam.task === \"cancel\") {\r\n                    const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                      x => x[inputParam.postParam.primaryKeyField] === masterData[inputParam.postParam.selectedObject][inputParam.postParam.primaryKeyField]\r\n                    );\r\n                    masterData[inputParam.postParam.inputListName][foundIndex] = masterData[inputParam.postParam.selectedObject];\r\n                  }\r\n                  else {\r\n                    const list = masterData[inputParam.postParam.inputListName]\r\n                      .filter(item => item[inputParam.postParam.primaryKeyField] !== inputParam.postParam.primaryKeyValue)\r\n                    masterData[inputParam.postParam.inputListName] = list;\r\n  \r\n                    // const foundIndex = masterData[inputParam.postParam.inputListName].findIndex(\r\n                    //   x => x[inputParam.postParam.primaryKeyField] === inputParam.postParam.primaryKeyField\r\n                    // );\r\n                    // masterData[inputParam.postParam.inputListName].splice(foundIndex, 1)         \r\n  \r\n                  }\r\n                  masterData = { ...masterData, ...response.data };\r\n                  sortData(masterData);\r\n                }\r\n              }\r\n            }\r\n            // (masterData);\r\n  \r\n            let openModal = false;\r\n            // let openChildModal= false;\r\n  \r\n            let selectedRecord = {};\r\n            let activeSampleTab = inputParam.activeSampleTab ? { activeSampleTab: inputParam.activeSampleTab } : ''\r\n            let activeTestKey = inputParam.activeTestKey ? { activeTestKey: inputParam.activeTestKey } : ''\r\n            let showSample = inputParam.showSample ? inputParam.showSample : ''\r\n            let respObject = {\r\n              masterData,\r\n              inputParam,\r\n              modalName,\r\n              //   openChildModal,\r\n              //modalName:undefined,\r\n              [modalName]: openModal,\r\n              operation: inputParam.operation,\r\n              masterStatus: \"\",\r\n              errorCode: undefined,\r\n              loadEsign: false,\r\n              showEsign: false,\r\n              selectedRecord,\r\n              loading: false,\r\n              dataState: inputParam.dataState,\r\n              selectedId: inputParam.selectedId,\r\n              ...activeSampleTab,\r\n              ...activeTestKey,\r\n              showSample,\r\n              design: [],\r\n  \r\n              //organisation: undefined\r\n              organisation: inputParam.nextNode ? {\r\n                selectedNode: inputParam.nextNode,\r\n                selectedNodeName: masterData.SelectedNodeName,\r\n                primaryKeyValue: masterData.AddedChildPrimaryKey,\r\n  \r\n              } : undefined,\r\n              showConfirmAlert: inputParam.showConfirmAlert,\r\n              loadPoolSource: inputParam.loadPoolSource,\r\n              skip: inputParam.skip || undefined,\r\n              take: inputParam.take || undefined,\r\n              openPortal: false,\r\n              importRetrieveOrDispose:false,\r\n              isRetrieveOrDispose:false\r\n            }\r\n  \r\n            if (inputParam.operation === \"create\" || inputParam.operation === \"copy\") {\r\n              if (inputParam.saveType === 2) {\r\n                openModal = true;\r\n                selectedRecord = defaultInput;\r\n  \r\n              }\r\n              respObject = { ...respObject, [modalName]: openModal, selectedRecord };\r\n            }\r\n            if ((modalName === \"openModal\" || modalName === \"openChildModal\") && Object.keys(masterData).indexOf(\"searchedData\") !== -1\r\n              && masterData[\"searchedData\"] !== undefined) {\r\n              dispatch(postCRUDOrganiseSearch(inputParam.postParam, respObject))\r\n            }\r\n            else {\r\n              dispatch({ type: DEFAULT_RETURN, payload: { ...respObject, modalName: undefined } })\r\n            }\r\n          }\r\n        })\r\n        .catch(error => { \r\n          if (error.response.status === 500) {\r\n            dispatch({\r\n              type: REQUEST_FAILURE,\r\n              payload: {\r\n                error: error.message,\r\n                loading: false,\r\n                // openPortal:this.props.Login.openPortal,\r\n                //openModal:inputParam.openPortal?false:true\r\n              }\r\n            });\r\n          } else { \r\n            dispatch({ type: DEFAULT_RETURN, payload: { loading: false } })\r\n            if(error.response.data==='IDS_SOURCEANDDESTINATIONMISMATCH'){\r\n                action()\r\n            }else{\r\n                toast.warn( intl.formatMessage({ id: error.response.data }));\r\n            } \r\n  \r\n          }\r\n        });\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}