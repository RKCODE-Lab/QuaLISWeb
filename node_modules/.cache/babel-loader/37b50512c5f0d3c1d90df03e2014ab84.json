{"ast":null,"code":"var _jsxFileName = \"D:\\\\LIMSWFH\\\\LIMSPOSTGRESQL\\\\QuaLISWeb\\\\src\\\\pages\\\\dynamicpreregdesign\\\\PreRegDesignPopUp.jsx\";\nimport React from 'react';\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { TouchBackend } from 'react-dnd-touch-backend';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { DndProvider } from 'react-dnd';\nimport device from 'current-device'; // import MoreOptions from '../../components/configureui/MoreOptions';\n\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\nimport { connect } from 'react-redux';\nimport { updateStore, crudMaster, getTableColumns, getForeignTableData } from '../../actions/index';\nimport { condition, SampleType, transactionStatus } from '../../components/Enumeration';\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\nimport { showEsign } from '../../components/CommonScript';\nimport AlertModal from './AlertModal';\nimport FormInput from '../../components/form-input/form-input.component';\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\nimport { InstrumentDefaultTemplate, productDefaultTemplate, MaterialDefaultTemplate } from './DefaultTemplates';\nimport { ReactComponents } from '../../components/Enumeration';\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\nimport { toast } from 'react-toastify';\n\nconst mapStateToProps = state => {\n  return {\n    Login: state.Login\n  };\n};\n\nclass PreRegDesignPopUp extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.validateDynamicDesign = () => {\n      let valid = this.validateTemplate(this.state.design);\n\n      if (!valid) {\n        return null;\n      } else {\n        this.setState({\n          openAlertModal: true,\n          templateName: \"\"\n        });\n      }\n    };\n\n    this.showPropFilter = () => {\n      const updateInfo = {\n        typeName: DEFAULT_RETURN,\n        data: {\n          showFilter: !this.state.showFilter\n        }\n      };\n      this.props.updateStore(updateInfo); //  this.setState({ showFilter: !this.state.showFilter })\n    };\n\n    this.setLayout = (design, splitDropZonePath, remove, removeChild) => {\n      let selectedFieldRecord = {};\n\n      if (remove === undefined) {\n        selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"));\n      } else if (removeChild) {\n        let childRecord = {};\n        this.state.toBeDeleted.deleteComponent.child.map(myChild => {\n          childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n          childRecord['childValue'] = undefined;\n          childRecord['parentPath'] = undefined;\n          childRecord['valuecolumn'] = undefined;\n          design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n          return null;\n        });\n      }\n\n      design = this.updatePath(design); // if (selectedFieldRecord.child) {\n      //     let childRecord = {}\n      //     selectedFieldRecord.child.map(myChild => {\n      //         childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\n      //         childRecord['parentPath'] = splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0';\n      //         design = replaceChildFromChildren(design, splitDropZonePath.split(\"-\"), childRecord)\n      //         return null;\n      //     })\n      // }\n      // if (selectedFieldRecord.childValue) {\n      //     let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n      //     let newChildData = []\n      //     parentData.child.map(child => child.label === selectedFieldRecord.label ?\n      //         newChildData.push({ ...child, childPath: splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0' }) :\n      //         newChildData.push(child))\n      //     parentData = { ...parentData, child: newChildData };\n      //     design = replaceChildFromChildren(design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\n      // }\n\n      const components = this.getComponents(design).components;\n      let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n      this.setState({\n        showConfirmAlert: false,\n        toBeDeleted: {},\n        design,\n        selectedFieldRecord: selectedFieldRecord,\n        components,\n        validComponents,\n        selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath\n      });\n    };\n\n    this.updatePath = design => {\n      design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n        if (componnetrow.hasOwnProperty('children')) {\n          componnetrow.children.map((component, compIndex) => {\n            if (component.child) {\n              let newChild = [];\n              component.child.map(childComp => {\n                const obj = this.getIndexByLabel(design, childComp.label);\n                newChild.push({ ...childComp,\n                  childPath: obj.path\n                });\n                const newObj = { ...obj.object,\n                  parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n                };\n                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n              });\n              component = { ...component,\n                child: newChild\n              };\n              design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\n            }\n          });\n        } else {\n          if (componnetrow.child) {\n            let newChild = [];\n            componnetrow.child.map(childComp => {\n              const obj = this.getIndexByLabel(design, childComp.label);\n              newChild.push({ ...childComp,\n                childPath: obj.path\n              });\n              const newObj = { ...obj.object,\n                parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n              };\n              design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\n            });\n            componnetrow = { ...componnetrow,\n              child: newChild\n            };\n            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\n          }\n        }\n      })));\n      return design;\n    };\n\n    this.validateDelete = (design, splitDropZonePath) => {\n      const path = splitDropZonePath.split(\"-\");\n      let showAlert = false;\n      let toBeDeleted = {}; // let component = {}\n      // let row = this.state.design[path[0]]\n      // let column = row.children[path[1]]\n      // let compRow = column.children[path[2]]\n      // if (compRow.type === 'componentrow')\n      //     component = compRow.children[path[3]]\n      // else\n      //     component = compRow\n\n      let component = getcomponentdata(this.state.design, path);\n\n      if (component.child && component.child.length > 0) {\n        let childRecord = {};\n        component.child.map(myChild => {\n          childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"));\n          childRecord['childValue'] = undefined;\n          childRecord['parentPath'] = undefined;\n          childRecord['valuecolumn'] = undefined;\n\n          if (myChild.componentcode !== ReactComponents.COMBO) {\n            childRecord['column'] = undefined;\n          }\n\n          design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord);\n          return null;\n        });\n        showAlert = true;\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        }; // this.showAlert(true, toBeDeleted);\n      }\n\n      if (component.childValue) {\n        let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\n        let newChildData = parentData.child.filter(child => child.label !== component.label);\n        parentData = { ...parentData,\n          child: newChildData\n        };\n        design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData);\n        toBeDeleted = {\n          design,\n          splitDropZonePath,\n          deleteComponent: component\n        };\n      }\n\n      if (showAlert) {\n        this.showAlert(true, toBeDeleted);\n      } else {\n        this.setLayout(design, splitDropZonePath, true);\n      }\n    };\n\n    this.confirmAlert = () => {\n      this.confirmMessage.confirm(\"Warning\", \"Warning\", this.props.intl.formatMessage({\n        id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_OK\"\n      }), this.props.intl.formatMessage({\n        id: \"IDS_CANCEL\"\n      }), () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true), undefined, () => this.showAlert(false));\n    };\n\n    this.showAlert = (bool, toBeDeleted) => {\n      // const updateInfo = {\n      //     typeName: DEFAULT_RETURN,\n      //     data: { showConfirmAlert: bool, toBeDeleted }\n      // }\n      // this.props.updateStore(updateInfo);\n      this.setState({\n        showConfirmAlert: bool,\n        toBeDeleted\n      });\n    };\n\n    this.onclickcomponent = (event, data, path) => {\n      //console.log(\"event,data, path :\", event, data, path);\n      const selectedFieldRecord = { ...data\n      };\n      const obj = this.getComponents(this.state.design); //console.log(\"obj:\", obj);\n\n      const components = obj.components;\n      let dateComponents = obj.dateComponents;\n\n      if (data.inputtype === \"date\") {\n        const filterDataComponents = dateComponents.filter(item => item.label !== data.label);\n        dateComponents = filterDataComponents;\n      }\n\n      let componentData = {\n        components,\n        selectedComponentpath: path\n      };\n      let parentRadioValue = [];\n\n      if ((selectedFieldRecord.componentcode === ReactComponents.COMBO || selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) && selectedFieldRecord.source !== undefined && (this.props.Login.columnInfo === undefined || this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] === undefined)) {\n        this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.nquerybuildertablecode, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData, undefined, false);\n      } else {\n        const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo);\n        let tableColumn = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].tableColumn : [];\n        let filterColumns = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].filterColumns : [];\n\n        if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n          if (selectedFieldRecord.parentPath) {\n            let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n\n            if (oldParentData.hasOwnProperty('child')) {\n              oldParentData.child.map(item => {\n                if (item.label === selectedFieldRecord.label) {\n                  parentRadioValue = oldParentData.radioOptions.tags.map(item => {\n                    return {\n                      value: item.id,\n                      label: item.text,\n                      item\n                    };\n                  });\n                }\n              });\n            }\n          }\n        }\n\n        if (selectedFieldRecord.componentcode !== ReactComponents.COMBO && selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER && selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\n          if (this.props.Login.columnInfo && selectedFieldRecord.childValue && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode]) {\n            tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].tableColumn;\n            filterColumns = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].filterColumns;\n            this.setState({\n              selectedComponentpath: path,\n              selectedFieldRecord: selectedFieldRecord,\n              components,\n              tableColumn,\n              filterColumns,\n              validComponents,\n              parentRadioValue,\n              showFilter: false\n            });\n          } else {\n            if (selectedFieldRecord.childValue) {\n              this.props.getTableColumns(this.state.design, selectedFieldRecord, selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo, \"\", this.props.Login.columnInfo, componentData, undefined, false);\n            } else {\n              this.setState({\n                selectedComponentpath: path,\n                selectedFieldRecord: selectedFieldRecord,\n                components,\n                tableColumn,\n                filterColumns,\n                dateComponents,\n                validComponents,\n                parentRadioValue,\n                showFilter: false\n              });\n            }\n          }\n        } else {\n          this.setState({\n            selectedComponentpath: path,\n            selectedFieldRecord: selectedFieldRecord,\n            components,\n            tableColumn,\n            filterColumns,\n            dateComponents,\n            validComponents,\n            parentRadioValue,\n            showFilter: false\n          });\n        }\n      }\n    };\n\n    this.getComponents = design => {\n      let components = [];\n      let dateComponents = [{\n        label: \"Current Date\",\n        value: \"utccurrentdate\"\n      }];\n      design.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          column.children.map((componnet, compindex) => {\n            if (componnet.hasOwnProperty(\"children\")) {\n              componnet.children.map((componnetrow, compRowIndex) => {\n                componnetrow.inputtype === 'date' && componnetrow.label && dateComponents.push({\n                  label: componnetrow.label,\n                  value: componnetrow.label\n                });\n                componnetrow.label && components.push({\n                  label: componnetrow.label,\n                  value: componnetrow.label,\n                  // item: componnetrow,\n                  inputtype: componnetrow.inputtype,\n                  source: componnetrow.source,\n                  nquerybuildertablecode: componnetrow.nquerybuildertablecode,\n                  child: componnetrow.child,\n                  valuemember: componnetrow.valuemember,\n                  path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\n                });\n              });\n            } else {\n              componnet.inputtype === 'date' && componnet.label && dateComponents.push({\n                label: componnet.label,\n                value: componnet.label\n              });\n              componnet.label && components.push({\n                label: componnet.label,\n                value: componnet.label,\n                // item: componnet,\n                inputtype: componnet.inputtype,\n                source: componnet.source,\n                nquerybuildertablecode: componnet.nquerybuildertablecode,\n                child: componnet.child,\n                valuemember: componnet.valuemember,\n                path: `${rowIndex}-${columnIndex}-${compindex}-0`\n              });\n            }\n          });\n          return null;\n        });\n        return null;\n      });\n      return {\n        components,\n        dateComponents\n      };\n    };\n\n    this.getValueMembers = selectedFieldRecord => {\n      if (selectedFieldRecord.childValue) {\n        let valueColumn = [];\n        this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] && this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(x => {\n          if (x.foriegntablename === selectedFieldRecord.childValue.source) valueColumn.push({\n            label: x.displayname[this.props.Login.userInfo.language],\n            value: x.tablecolumnname\n          });\n          return null;\n        });\n\n        if (valueColumn.length) {\n          return valueColumn;\n        } else {\n          this.props.Login.columnInfo && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode] && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].numericColumns.map(x => {\n            if (x.foriegntablename === selectedFieldRecord.source) valueColumn.push({\n              label: x.displayname[this.props.Login.userInfo.language],\n              value: x.tablecolumnname\n            });\n            return null;\n          });\n          return valueColumn;\n        }\n      } else {\n        return null;\n      }\n    };\n\n    this.onInputOnChange = (event, name) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n\n      if (event.target.type === 'checkbox') {\n        if (name === \"recordbasedreadonly\" || name === \"recordbasedshowhide\") {\n          let design = this.state.design;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n\n          if (selectedFieldRecord[\"recordbasedshowhide\"] || selectedFieldRecord[\"recordbasedreadonly\"]) {\n            // let design = this.state.design\n            if (selectedFieldRecord.parentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData);\n              }\n\n              delete selectedFieldRecord[\"parentLabel\"];\n              delete selectedFieldRecord[\"selectedrecordbasedhide\"];\n              delete selectedFieldRecord[\"recordbasedhide\"];\n              delete selectedFieldRecord[\"radioparent\"];\n            }\n\n            selectedFieldRecord[name === \"recordbasedreadonly\" ? \"recordbasedshowhide\" : \"recordbasedreadonly\"] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (event.target.name === \"loadselecteddate\" || event.target.name === \"loadcurrentdate\") {\n          if (event.target.name === \"loadselecteddate\" && selectedFieldRecord['loadcurrentdate']) {\n            selectedFieldRecord['loadcurrentdate'] = false;\n          } else if (event.target.name === \"loadcurrentdate\" && selectedFieldRecord['loadselecteddate']) {\n            selectedFieldRecord['loadselecteddate'] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        } else {\n          if (event.target.name === 'timeonly') {\n            selectedFieldRecord['dateonly'] = false;\n          }\n\n          if (event.target.name === 'dateonly') {\n            selectedFieldRecord['timeonly'] = false;\n          }\n\n          selectedFieldRecord[event.target.name] = event.target.checked;\n          this.saveComponentProperties(selectedFieldRecord);\n        }\n      } else {\n        if (name === 'synonym') {\n          selectedFieldRecord['displayname'] = { ...selectedFieldRecord['displayname'],\n            [event.target.name]: event.target.value\n          };\n        }\n\n        if (event.target.name === 'label') {\n          // if (selectedFieldRecord[event.target.name] === undefined) {\n          //     this.props.Login.languageList.map(lang => {\n          //         selectedFieldRecord['displayname'] = {\n          //             ...selectedFieldRecord['displayname'],\n          //             [lang.value]: event.target.value\n          //         }\n          //     })\n          // } else {\n          const langArray = this.props.Login.languageList; //console.log(\"lang list:\", langArray);\n\n          const langDataObject = {};\n          langArray.map(item => langDataObject[item.value] = event.target.value);\n          selectedFieldRecord['displayname'] = { ...selectedFieldRecord['displayname'],\n            // [this.props.Login.language]: event.target.value\n            ...langDataObject\n          }; // }\n\n          selectedFieldRecord[event.target.name] = event.target.value;\n        } else {\n          selectedFieldRecord[event.target.name] = event.target.value;\n        }\n\n        this.saveComponentProperties(selectedFieldRecord);\n      } // this.setState({ selectedFieldRecord });\n\n    };\n\n    this.onNumericInputChange = (event, columnname) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      let value = event.target.value;\n\n      if (!isNaN(value)) {\n        // if (parseInt(value) < 10) {\n        selectedFieldRecord[event.target.name] = value;\n        this.saveComponentProperties(selectedFieldRecord); // }\n      }\n    };\n\n    this.handleDateChange = (dateValue, dateName) => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      selectedFieldRecord[dateName] = dateValue;\n      this.saveComponentProperties(selectedFieldRecord);\n    };\n\n    this.onComboChange = (comboData, comboName) => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n\n      if (selectedFieldRecord.label) {\n        if (comboName === 'table') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['source'] = comboData.item.stablename;\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['conditionstring'] = ' and nformcode = ' + comboData.item.nformcode;\n          }\n\n          selectedFieldRecord['nquerybuildertablecode'] = comboData.value;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n\n          if (selectedFieldRecord.inputtype === 'frontendsearchfilter' || selectedFieldRecord.inputtype === 'backendsearchfilter') {\n            this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n              validComponents: this.state.validComponents\n            });\n          } else {\n            this.props.getTableColumns(design, selectedFieldRecord, comboData.value, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo);\n          }\n        } else if (comboName === 'column') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['displaymember'] = comboData.value;\n\n          if (comboData.item.ismultilingual) {\n            selectedFieldRecord['isMultiLingual'] = true;\n          }\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['name'] = comboData.value;\n          }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'childValue') {\n          if (comboData) {\n            // selectedFieldRecord[comboName] = comboData;\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let design = this.state.design;\n\n            if (selectedFieldRecord.parentPath) {\n              let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n\n              if (oldParentData.child) {\n                let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n                oldParentData = { ...oldParentData,\n                  child: newChildData1\n                };\n                design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData);\n              }\n            }\n\n            let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\n            selectedFieldRecord['childValue'] = comboData;\n            selectedFieldRecord['parentPath'] = comboData.path;\n\n            if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n              selectedFieldRecord['parentLabel'] = comboData.label;\n            }\n\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n            let newChildData = parentData.child || [];\n            let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label);\n\n            if (validateChild.length === 0) {\n              let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\n\n              if (valueMemberOptions.length === 1) {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  tablecolumnname: valueMemberOptions[0].value,\n                  childPath: this.state.selectedComponentpath\n                });\n              } else {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  childPath: this.state.selectedComponentpath\n                });\n              }\n            }\n\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\n              let parentRadioValue = this.state.parentRadioValue || [];\n              parentRadioValue = parentData.radioOptions.tags.map(item => {\n                return {\n                  value: item.id,\n                  label: item.text,\n                  item\n                };\n              });\n              this.setState({\n                design,\n                selectedFieldRecord,\n                parentRadioValue\n              });\n            } else {\n              this.props.getTableColumns(design, selectedFieldRecord, selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n                components: this.state.components,\n                selectedComponentpath: this.state.selectedComponentpath\n              }, true);\n            }\n          } else {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n            let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n            selectedFieldRecord['childValue'] = comboData;\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) selectedFieldRecord['column'] = comboData;\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.setState({\n                design,\n                selectedFieldRecord,\n                tableColumn: []\n              });\n            }\n          }\n        } else if (comboName === 'valuecolumn') {\n          selectedFieldRecord['valuecolumn'] = comboData;\n          let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n          let newChildData = [];\n          parentData.child.map(child => {\n            if (child.label === selectedFieldRecord.label) {\n              newChildData.push({ ...child,\n                tablecolumnname: comboData.value\n              });\n            } else {\n              newChildData.push(child);\n            }\n\n            return null;\n          });\n          parentData = { ...parentData,\n            child: newChildData\n          };\n          let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n          const newdata = { ...selectedFieldRecord\n          };\n          design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'filtercolumn') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord.filtervalue = \"\";\n          selectedFieldRecord.staticfiltervalue = \"\";\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n\n          if (comboData.type !== 'numeric') {\n            this.setState({\n              design,\n              selectedFieldRecord\n            });\n          } else {\n            this.props.getForeignTableData(design, selectedFieldRecord, '', this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, {\n              components: this.state.components,\n              selectedComponentpath: this.state.selectedComponentpath\n            }, true);\n          } // \n\n        } else if (comboName === 'customsearchfilter') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['filterfields'] = [];\n          this.state.selectedFieldRecord[comboName].map(data => {\n            return selectedFieldRecord['filterfields'].push(data.item['item'] ? {\n              type: data.type,\n              ...data.item['item']\n            } : data.item);\n          }); // if (comboData.item.ismultilingual) {\n          //     selectedFieldRecord['isMultiLingual'] = true;\n          // }\n          // if (comboData.item.stablename === 'dynamicmaster') {\n          //     selectedFieldRecord['name'] = comboData.value\n          // }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else if (comboName === 'selectedrecordbasedhide') {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['recordbasedhide'] = comboData.value;\n\n          if (comboData.item.ismultilingual) {\n            selectedFieldRecord['isMultiLingual'] = true;\n          }\n\n          if (comboData.item.stablename === 'dynamicmaster') {\n            selectedFieldRecord['name'] = comboData.value;\n          }\n\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } // else if (comboName === 'filtercomponent') {\n        //     selectedFieldRecord[comboName] = comboData;\n        //    // selectedFieldRecord['recordbasedhide'] = comboData.value;\n        //     // if (comboData.item.ismultilingual) {\n        //     //     selectedFieldRecord['isMultiLingual'] = true;\n        //     // }\n        //     // if (comboData.item.stablename === 'dynamicmaster') {\n        //     //     selectedFieldRecord['name'] = comboData.value\n        //     // }\n        //     const splititemarray = this.state.selectedComponentpath.split(\"-\")\n        //     const newdata = { ...selectedFieldRecord }\n        //     const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\n        //     this.setState({ design, selectedFieldRecord })\n        // }\n        else if (comboName === 'radioparent') {\n          if (comboData) {\n            // selectedFieldRecord[comboName] = comboData;\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let design = this.state.design; // if (selectedFieldRecord.parentPath) {\n            //     let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n            //     if (oldParentData.child) {\n            //         let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            //         oldParentData = { ...oldParentData, child: newChildData1 };\n            //         design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData)\n            //     }\n            // }\n\n            let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\n            selectedFieldRecord['radioparent'] = comboData;\n            selectedFieldRecord['parentPath'] = comboData.path;\n            selectedFieldRecord['parentLabel'] = comboData.label;\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n            let newChildData = parentData.child || [];\n            let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label);\n\n            if (validateChild.length === 0) {\n              let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\n\n              if (valueMemberOptions !== null && valueMemberOptions.length === 1) {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  tablecolumnname: valueMemberOptions[0].value,\n                  childPath: this.state.selectedComponentpath\n                });\n              } else {\n                newChildData.push({\n                  label: selectedFieldRecord.label,\n                  childPath: this.state.selectedComponentpath\n                });\n              }\n            }\n\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData); // if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n            //     this.setState({ design, selectedFieldRecord });\n            // } else if ((selectedFieldRecord['recordbasedreadonly'] \n            // || selectedFieldRecord['recordbasedshowhide']) &&\n            //     (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\n            //         selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER ||\n            //         selectedFieldRecord.componentcode === ReactComponents.TEXTAREA ||\n            //         selectedFieldRecord.componentcode === ReactComponents.TEXTINPUT ||\n            //         selectedFieldRecord.componentcode === ReactComponents.DATE ||\n            //         selectedFieldRecord.componentcode === ReactComponents.RADIO)) {\n\n            let parentRadioValue = this.state.parentRadioValue || [];\n            parentRadioValue = parentData.radioOptions.tags.map(item => {\n              return {\n                value: item.id,\n                label: item.text,\n                item\n              };\n            });\n            this.setState({\n              design,\n              selectedFieldRecord,\n              parentRadioValue\n            }); // }\n            // else {\n            //     this.props.getTableColumns(design, selectedFieldRecord,\n            //         selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\n            //         splititemarray, this.props.Login.columnInfo,\n            //         { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\n            //         true)\n            // }\n          } else {\n            const splititemarray = this.state.selectedComponentpath.split(\"-\");\n            let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\n            let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label);\n            parentData = { ...parentData,\n              child: newChildData\n            };\n            let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData);\n            selectedFieldRecord['radioparent'] = comboData;\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO) selectedFieldRecord['selectedrecordbasedhide'] = comboData;\n            delete selectedFieldRecord['recordbasedhide'];\n            const newdata = { ...selectedFieldRecord\n            };\n            design = replaceChildFromChildren(design, splititemarray, newdata);\n\n            if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\n              this.setState({\n                design,\n                selectedFieldRecord\n              });\n            } else {\n              this.setState({\n                design,\n                selectedFieldRecord,\n                tableColumn: []\n              });\n            }\n          }\n        } else if (comboName === \"period\") {\n          selectedFieldRecord[comboName] = comboData;\n          selectedFieldRecord['nperiodcode'] = comboData.value;\n          selectedFieldRecord['nperioddata'] = comboData.item.ndata;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        } else {\n          selectedFieldRecord[comboName] = comboData;\n          const splititemarray = this.state.selectedComponentpath.split(\"-\");\n          const newdata = { ...selectedFieldRecord\n          };\n          const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n          this.setState({\n            design,\n            selectedFieldRecord\n          });\n        }\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERLABEL\"\n        }));\n      }\n    };\n\n    this.addTag = tags => {\n      const selectedFieldRecord = this.state.selectedFieldRecord || {};\n      selectedFieldRecord['radioOptions'] = tags;\n      this.saveComponentProperties(selectedFieldRecord);\n    };\n\n    this.addCondition = () => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let filterColumnName;\n      let filterValue;\n      let conditionString;\n      let conditionArrayString;\n\n      if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] && (selectedFieldRecord['staticfiltervalue'] || selectedFieldRecord['filtervalue'])) {\n        switch (selectedFieldRecord[\"filtercolumn\"].type) {\n          case 'static':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\n              filterValue = {\n                label: selectedFieldRecord.staticfiltervalue,\n                value: selectedFieldRecord.staticfiltervalue\n              };\n              break;\n            }\n\n          case 'dynamic':\n            {\n              filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\n              filterValue = {\n                label: selectedFieldRecord.staticfiltervalue,\n                value: selectedFieldRecord.staticfiltervalue\n              };\n              break;\n            }\n\n          case 'numeric':\n            {\n              filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.foriegntablePK;\n              filterValue = selectedFieldRecord.filtervalue;\n              break;\n            }\n\n          default:\n            break;\n        }\n\n        switch (selectedFieldRecord[\"condition\"].value) {\n          case condition.EQUALS:\n            conditionString = filterColumnName + \" = '\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.NOTEQUALS:\n            conditionString = filterColumnName + \" != '\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label;\n            break;\n\n          case condition.STARTSWITH:\n            conditionString = filterColumnName + \" like '\" + filterValue.value + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label;\n            break;\n\n          case condition.ENDSWITH:\n            conditionString = filterColumnName + \" like '%\" + filterValue.value + \"'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label;\n            break;\n\n          case condition.INCLUDES:\n            conditionString = filterColumnName + \" like '%\" + filterValue.value + \"%'\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label;\n            break;\n\n          case condition.CONTAINS:\n            conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\";\n            break;\n\n          case condition.NOTCONTAINS:\n            conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\";\n            conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\";\n            break;\n\n          default:\n            break;\n        }\n\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\n        conditionArrayUI.push(conditionArrayString);\n        conditionArraySQL.push(conditionString);\n        selectedFieldRecord = { ...selectedFieldRecord,\n          filtercolumn: \"\",\n          condition: \"\",\n          staticfiltervalue: undefined,\n          filtervalue: \"\",\n          conditionArrayUI,\n          conditionArraySQL\n        };\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      } else {\n        return toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALUES\"\n        }));\n      }\n\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.deleteCondition = index => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let conditionArrayUI = selectedFieldRecord.conditionArrayUI;\n      let conditionArraySQL = selectedFieldRecord.conditionArraySQL;\n      conditionArrayUI.splice(index, 1);\n      conditionArraySQL.splice(index, 1);\n      selectedFieldRecord['conditionArrayUI'] = conditionArrayUI;\n      selectedFieldRecord['conditionArraySQL'] = conditionArraySQL;\n      selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.addDateConstraints = () => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let filterColumnName;\n\n      if (selectedFieldRecord['condition'] && selectedFieldRecord['filtervalue']) {\n        filterColumnName = selectedFieldRecord.filtervalue.value;\n        let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI || [];\n        let dateConstraintArraySQL = selectedFieldRecord.cdateConstraintArraySQL || [];\n        dateConstraintArrayUI.push(selectedFieldRecord.label + ' ' + selectedFieldRecord['condition'].label + ' ' + selectedFieldRecord['filtervalue'].label);\n        dateConstraintArraySQL.push({\n          parentdate: selectedFieldRecord.label,\n          constraint: selectedFieldRecord['condition'].value,\n          childdate: filterColumnName\n        });\n        selectedFieldRecord = { ...selectedFieldRecord,\n          condition: \"\",\n          filtervalue: \"\",\n          dateConstraintArrayUI,\n          dateConstraintArraySQL\n        };\n        const splititemarray = this.state.selectedComponentpath.split(\"-\");\n        const newdata = { ...selectedFieldRecord\n        };\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n        this.setState({\n          design,\n          selectedFieldRecord\n        });\n      } else {\n        toast.warn(this.props.intl.formatMessage({\n          id: \"IDS_ENTERVALUES\"\n        }));\n      }\n    };\n\n    this.deleteDateCondition = index => {\n      let {\n        selectedFieldRecord\n      } = this.state;\n      let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI;\n      let dateConstraintArraySQL = selectedFieldRecord.dateConstraintArraySQL;\n      dateConstraintArrayUI.splice(index, 1);\n      dateConstraintArraySQL.splice(index, 1);\n      selectedFieldRecord['dateConstraintArrayUI'] = dateConstraintArrayUI;\n      selectedFieldRecord['dateConstraintArraySQL'] = dateConstraintArraySQL;\n      const splititemarray = this.state.selectedComponentpath.split(\"-\");\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.saveComponentProperties = selectedFieldRecord => {\n      const splititemarray = this.state.selectedComponentpath.split(\"-\"); // const selectedFieldRecord = this.state.selectedFieldRecord;\n\n      const newdata = { ...selectedFieldRecord\n      };\n      const design = replaceChildFromChildren(this.state.design, splititemarray, newdata);\n      this.setState({\n        design,\n        selectedFieldRecord\n      });\n    };\n\n    this.handleSaveClick = saveType => {\n      if (this.state.selectedRecord.templateName && this.state.selectedRecord.templateName !== \"\") {\n        let inputData = [];\n        let selectedId = null;\n        inputData[\"userinfo\"] = this.props.Login.userInfo;\n        let dataState = undefined; // let valid = this.validateTemplate(this.state.design);\n        // if (!valid) {\n        //     return null;\n        // }\n\n        if (this.props.Login.operation === \"update\") {\n          // edit\n          selectedId = this.state.selectedRecord.nchecklistqbcode;\n          dataState = this.state.dataState;\n          inputData[\"registrationtemplate\"] = {\n            nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templateName,\n            jsonString: JSON.stringify(this.state.design).replaceAll(\"'\", \"''\"),\n            jsondata: this.state.design,\n            ntransactionstatus: transactionStatus.DRAFT\n          };\n        } else {\n          //add               \n          inputData[\"registrationtemplate\"] = {\n            nsampletypecode: this.props.nsampletypecode,\n            sregtemplatename: this.state.selectedRecord.templateName,\n            jsonString: JSON.stringify(this.state.design).replaceAll(\"'\", \"''\"),\n            ntransactionstatus: transactionStatus.DRAFT\n          };\n        }\n\n        const postParam = {\n          inputListName: \"RegistrationTemplate\",\n          selectedObject: \"selectedTemplate\",\n          primaryKeyField: \"nreactregtemplatecode\",\n          fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\n          fecthInputObject: {\n            userinfo: this.props.Login.userInfo,\n            nsampletypecode: this.props.nsampletypecode\n          },\n          masterData: this.props.Login.masterData\n        };\n        const inputParam = {\n          methodUrl: 'RegistrationTemplate',\n          classUrl: 'dynamicpreregdesign',\n          displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\n          inputData: inputData,\n          postParam,\n          searchRef: this.props.searchRef,\n          operation: this.props.Login.operation,\n          saveType,\n          dataState,\n          selectedId\n        };\n        const masterData = this.props.Login.masterData;\n\n        if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\n          const updateInfo = {\n            typeName: DEFAULT_RETURN,\n            data: {\n              loadEsign: true,\n              screenData: {\n                inputParam,\n                masterData\n              },\n              saveType\n            }\n          };\n          this.props.updateStore(updateInfo);\n        } else {\n          this.props.crudMaster(inputParam, masterData, \"openPortal\");\n        }\n      } else {\n        toast.info(this.props.intl.formatMessage({\n          id: \"IDS_ENTERTEMPLATENAME\"\n        }));\n      }\n    };\n\n    this.validateTemplate = template => {\n      let invalidComponent = [];\n      let duplicateComponents = [];\n      let insufficientMultilingualData = []; //let invalidComboComponent = [];\n      // let invalidRadioComponent = [];\n      // let invalidCheckboxComponent = [];\n      //let invalidReadOnlyComponent = [];\n\n      let incompletePropertiesComponent = [];\n      let labels = [];\n      template.map((row, rowIndex) => {\n        row.children.map((column, columnIndex) => {\n          column.children.map((componnet, compindex) => {\n            if (componnet.hasOwnProperty(\"children\")) {\n              componnet.children.map((componnetrow, compRowIndex) => {\n                if (!componnetrow.hasOwnProperty('label') || componnetrow.label.trim() === '') {\n                  invalidComponent.push(componnetrow);\n                }\n\n                if (labels.includes(componnetrow.label)) {\n                  duplicateComponents.push(componnetrow);\n                } else {\n                  labels.push(componnetrow.label);\n                }\n\n                if (componnetrow.componentcode === ReactComponents.COMBO) {\n                  if ((!componnetrow.hasOwnProperty('source') || componnetrow.source.trim() === '') && (!componnetrow.hasOwnProperty('displaymember') || componnetrow.displaymember.trim() === '')) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.CHECKBOX) {\n                  if (!componnetrow.hasOwnProperty('radioOptions') || componnetrow.radioOptions && componnetrow.radioOptions.tags.length === 0) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.RADIO) {\n                  if (!componnetrow.hasOwnProperty('radioOptions') || componnetrow.radioOptions && componnetrow.radioOptions.tags.length < 2) {\n                    incompletePropertiesComponent.push(componnetrow);\n                  }\n                }\n\n                if (componnetrow.componentcode === ReactComponents.TEXTINPUT || componnetrow.componentcode === ReactComponents.TEXTAREA) {\n                  if (componnetrow.hasOwnProperty('readonly')) {\n                    if (!componnetrow.hasOwnProperty('displaymember') && componnetrow.displaymember.trim() === '') {\n                      incompletePropertiesComponent.push(componnetrow);\n                    }\n                  }\n                }\n\n                if (!componnetrow.hasOwnProperty('displayname') || Object.keys(componnetrow.displayname).length !== this.props.Login.languageList.length) {\n                  insufficientMultilingualData.push(componnetrow);\n                }\n              });\n            } else {\n              if (!componnet.hasOwnProperty('label') || componnet.label.trim() === '') {\n                invalidComponent.push(componnet);\n              }\n\n              if (labels.includes(componnet.label)) {\n                duplicateComponents.push(componnet);\n              } else {\n                labels.push(componnet.label);\n              }\n\n              if (componnet.componentcode === ReactComponents.COMBO) {\n                if ((!componnet.hasOwnProperty('source') || componnet.source.trim() === '') && (!componnet.hasOwnProperty('displaymember') || componnet.displaymember.trim() === '')) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.CHECKBOX) {\n                if (!componnet.hasOwnProperty('radioOptions') || componnet.radioOptions && componnet.radioOptions.tags.length === 0) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.RADIO) {\n                if (!componnet.hasOwnProperty('radioOptions') || componnet.radioOptions && componnet.radioOptions.tags.length < 2) {\n                  incompletePropertiesComponent.push(componnet);\n                }\n              }\n\n              if (componnet.componentcode === ReactComponents.TEXTINPUT || componnet.componentcode === ReactComponents.TEXTAREA) {\n                if (componnet.hasOwnProperty('readonly')) {\n                  if (!componnet.hasOwnProperty('displaymember') || componnet.displaymember.trim() === '') {\n                    incompletePropertiesComponent.push(componnet);\n                  }\n                }\n              }\n\n              if (!componnet.hasOwnProperty('displayname') || Object.keys(componnet.displayname).length !== this.props.Login.languageList.length) {\n                insufficientMultilingualData.push(componnet);\n              }\n            }\n          });\n          return null;\n        });\n        return null;\n      });\n\n      if (duplicateComponents.length > 0) {\n        //console.log(\"duplicateComponents:\", duplicateComponents);\n        const dataArray = [];\n        duplicateComponents.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_DUPLICATECOMPONENTSFOUND'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (invalidComponent.length > 0) {\n        //console.log(\"invalidComponent:\", invalidComponent);\n        const dataArray = [];\n        invalidComponent.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_MISSINGCOMPONENTLABEL'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (insufficientMultilingualData.length > 0) {\n        //console.log(\"insufficientMultilingualData:\", insufficientMultilingualData);\n        const dataArray = [];\n        insufficientMultilingualData.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_INSUFFICIENTMULTILINGUALDATA'\n        }) + dataArray.join(\",\"));\n        return false;\n      }\n\n      if (incompletePropertiesComponent.length > 0) {\n        //console.log(\"invalidComponent:\", incompletePropertiesComponent);\n        const dataArray = [];\n        incompletePropertiesComponent.map(item => dataArray.push(item.label));\n        toast.warn(this.props.intl.formatMessage({\n          id: 'IDS_INVALIDCOMPONENT'\n        }) + dataArray.join(\",\"));\n        return false;\n      } // if (invalidRadioComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidRadioComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDRADIOCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n      // if (invalidCheckboxComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidCheckboxComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCHECKBOXCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n      // if (invalidReadOnlyComponent.length > 0) {\n      //     //console.log(\"invalidComponent:\", invalidComponent);\n      //     const dataArray = [];\n      //     invalidReadOnlyComponent.map(item => dataArray.push(item.label));\n      //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDREADONLYCOMPONENT' })  + dataArray.join(\",\") );\n      //     return false;\n      // }\n\n\n      return true;\n    };\n\n    this.confirmMessage = new ConfirmMessage();\n    this.state = {\n      nflag: 1,\n      design: this.props.Login.operation === 'update' ? this.props.Login.design : this.props.nsampletypecode === SampleType.PRODUCT ? productDefaultTemplate : this.props.nsampletypecode === SampleType.INSTRUMENT ? InstrumentDefaultTemplate : this.props.nsampletypecode === SampleType.MATERIAL ? MaterialDefaultTemplate : [{\n        \"id\": \"pv1OWbsMYq\",\n        \"type\": \"row\",\n        \"children\": [{\n          type: 'column',\n          id: '2zMtRhjb2t',\n          children: []\n        }]\n      }],\n      selectedRecord: this.props.Login.selectedRecord || {},\n      selectedFieldRecord: {},\n      selectedComponentpath: \"\",\n      components: [],\n      filterColumns: [],\n      validComponents: [],\n      showConfirmAlert: false,\n      showsynonym: false,\n      toBeDeleted: {},\n      numericConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"equal to(=)\"\n        }),\n        value: condition.EQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"not equal to(!=)\"\n        }),\n        value: condition.NOTEQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"In\"\n        }),\n        value: condition.CONTAINS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Not In\"\n        }),\n        value: condition.NOTCONTAINS\n      }],\n      stringConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"equal to(=)\"\n        }),\n        value: condition.EQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"not equal to(!=)\"\n        }),\n        value: condition.NOTEQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Starts With\"\n        }),\n        value: condition.STARTSWITH\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Ends With\"\n        }),\n        value: condition.ENDSWITH\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Contains\"\n        }),\n        value: condition.INCLUDES\n      }],\n      dateConditions: [{\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Less Than (<)\"\n        }),\n        value: condition.LESSTHAN\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Less Than Or Equals(<=)\"\n        }),\n        value: condition.LESSTHANOREQUALS\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Greater Than(>)\"\n        }),\n        value: condition.GREATERTHAN\n      }, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_EQUALS\",\n          defaultMessage: \"Greater Than Or Equals(>=)\"\n        }),\n        value: condition.GREATERTHANEQUALS\n      }]\n    };\n  }\n\n  render() {\n    // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n      centered: true,\n      scrollable: true,\n      bsPrefix: \"model model_zindex\",\n      show: this.props.Login.openPortal,\n      onHide: this.props.closeModal,\n      dialogClassName: `${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`,\n      backdrop: \"static\",\n      keyboard: false,\n      enforceFocus: false,\n      \"aria-labelledby\": \"example-custom-modal-styling-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      className: \"d-flex align-items-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"add\",\n      className: \"header-primary flex-grow-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }\n    }, `${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({\n      id: \"IDS_EDIT\"\n    }) : this.props.intl.formatMessage({\n      id: \"IDS_ADD\"\n    })} ${this.props.intl.formatMessage({\n      id: \"IDS_DESIGNTEMPLATE\"\n    })}`), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      className: \"btn-user btn-cancel\",\n      variant: \"\",\n      onClick: this.props.closeModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_CANCEL\",\n      defaultMessage: \"Cancel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 33\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \" btn-user btn-primary-blue\" //onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}\n      ,\n      onClick: this.validateDynamicDesign,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FontAwesomeIcon, {\n      icon: faSave,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 33\n      }\n    }), \" \", /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"IDS_SAVE\",\n      defaultMessage: \"Save\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }\n    })))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal-inner-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      className: \"p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(DndProvider, {\n      backend: device.os !== 'android' ? HTML5Backend : TouchBackend,\n      options: {\n        enableMouseEvents: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(Dynamicinput, {\n      layout: this.state.design,\n      reactInputFields: this.props.Login.ReactInputFields || {},\n      setLayout: this.setLayout,\n      reactComponents: this.props.Login.ReactComponents || {},\n      onInputOnChange: this.onInputOnChange,\n      onNumericInputChange: this.onNumericInputChange,\n      onComboChange: this.onComboChange,\n      selectedFieldRecord: this.state.selectedFieldRecord,\n      onclickcomponent: this.onclickcomponent,\n      ReactTables: this.props.Login.ReactTables,\n      tableColumn: this.state.tableColumn,\n      filterColumns: this.state.filterColumns,\n      numericConditions: this.state.numericConditions,\n      stringConditions: this.state.stringConditions,\n      filterData: this.props.Login.filterData,\n      inputFields: this.state.validComponents || [],\n      addChildMapping: this.addChildMapping,\n      valueMembers: this.getValueMembers(this.state.selectedFieldRecord),\n      validateDelete: this.validateDelete,\n      addTag: this.addTag,\n      showFilter: this.state.showFilter,\n      showPropFilter: this.showPropFilter,\n      addCondition: this.addCondition,\n      deleteCondition: this.deleteCondition,\n      dateConditions: this.state.dateConditions,\n      dateComponents: this.state.dateComponents,\n      addDateConstraints: this.addDateConstraints,\n      deleteDateCondition: this.deleteDateCondition,\n      showsynonym: this.state.showsynonym,\n      languages: this.props.Login.languageList || [],\n      addSynonym: () => this.setState({\n        showsynonym: !this.state.showsynonym\n      }),\n      parentRadioValue: this.state.parentRadioValue || [],\n      userinfo: this.props.Login.userInfo,\n      handleDateChange: this.handleDateChange,\n      period: this.props.Login.Period || [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 41\n      }\n    }))))))), /*#__PURE__*/React.createElement(AlertModal, {\n      openAlertModal: this.state.openAlertModal,\n      modalTitle: \"IDS_ENTERTEMPLATENAME\",\n      closeModal: () => this.setState({\n        openAlertModal: false,\n        templateName: \"\"\n      }),\n      onSaveClick: this.handleSaveClick,\n      modalBody: /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(Col, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(FormInput, {\n        label: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        name: \"templatename\",\n        type: \"text\",\n        onChange: event => this.setState({\n          selectedRecord: { ...this.state.selectedRecord,\n            templateName: event.target.value\n          }\n        }),\n        placeholder: this.props.intl.formatMessage({\n          id: \"IDS_TEMPLATENAME\"\n        }),\n        value: this.state.selectedRecord.templateName ? this.state.selectedRecord.templateName : \"\",\n        isMandatory: true,\n        required: true,\n        maxLength: \"30\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 33\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }\n    }), this.state.showConfirmAlert ? this.confirmAlert() : \"\");\n  }\n\n  componentDidUpdate(previousProps) {\n    let updateState = false;\n    let {\n      openAlertModal,\n      design,\n      selectedRecord,\n      selectedFieldRecord,\n      selectedComponentpath,\n      components,\n      validComponents,\n      tableColumn,\n      filterColumns,\n      showConfirmAlert,\n      parentRadioValue,\n      showFilter\n    } = this.state;\n\n    if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\n      updateState = true;\n      openAlertModal = false;\n    }\n\n    if (this.props.Login.design !== previousProps.Login.design) {\n      updateState = true;\n      design = this.props.Login.design;\n    }\n\n    if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\n      selectedRecord = this.props.Login.selectedRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      updateState = true;\n    }\n\n    if (this.props.Login.showFilter !== previousProps.Login.showFilter) {\n      showFilter = this.props.Login.showFilter;\n      updateState = true;\n    }\n\n    if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\n      if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\n        selectedComponentpath = this.props.Login.selectedComponentpath;\n      }\n\n      selectedFieldRecord = this.props.Login.selectedFieldRecord;\n      components = this.props.Login.components;\n      validComponents = this.props.Login.validComponents;\n      tableColumn = this.props.Login.tableColumn;\n      filterColumns = this.props.Login.filterColumns;\n      updateState = true;\n    }\n\n    if (this.props.Login.parentRadioValue !== previousProps.Login.parentRadioValue) {\n      parentRadioValue = this.props.Login.parentRadioValue;\n      updateState = true;\n    }\n\n    if (updateState) {\n      this.setState({\n        openAlertModal,\n        design,\n        selectedRecord,\n        selectedFieldRecord,\n        tableColumn,\n        selectedComponentpath,\n        components,\n        validComponents,\n        showConfirmAlert,\n        filterColumns,\n        parentRadioValue,\n        showFilter\n      });\n    }\n  }\n\n  getIndexByLabel(design, label) {\n    let obj = {};\n    design.map((row, rowIndex) => row.children.map((column, columnIndex) => column.children.map((componnetrow, compRowIndex) => {\n      if (componnetrow.hasOwnProperty('children')) {\n        componnetrow.children.map((component, compIndex) => {\n          if (component.label === label) {\n            obj = {\n              object: component,\n              path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\n            }; // break;\n          }\n\n          return null;\n        });\n      } else {\n        if (componnetrow.label === label) {\n          obj = {\n            object: componnetrow,\n            path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\n          }; // return obj;\n          // break;\n        }\n      }\n\n      return null;\n    })));\n    return obj;\n  }\n\n}\n\nexport default connect(mapStateToProps, {\n  updateStore,\n  crudMaster,\n  getTableColumns,\n  getForeignTableData\n})(injectIntl(PreRegDesignPopUp));","map":{"version":3,"sources":["D:/LIMSWFH/LIMSPOSTGRESQL/QuaLISWeb/src/pages/dynamicpreregdesign/PreRegDesignPopUp.jsx"],"names":["React","Button","Col","Modal","Row","FontAwesomeIcon","faSave","FormattedMessage","injectIntl","TouchBackend","HTML5Backend","DndProvider","device","Dynamicinput","connect","updateStore","crudMaster","getTableColumns","getForeignTableData","condition","SampleType","transactionStatus","DEFAULT_RETURN","showEsign","AlertModal","FormInput","getcomponentdata","getValidComponent","replaceChildFromChildren","InstrumentDefaultTemplate","productDefaultTemplate","MaterialDefaultTemplate","ReactComponents","ConfirmMessage","toast","mapStateToProps","state","Login","PreRegDesignPopUp","Component","constructor","props","validateDynamicDesign","valid","validateTemplate","design","setState","openAlertModal","templateName","showPropFilter","updateInfo","typeName","data","showFilter","setLayout","splitDropZonePath","remove","removeChild","selectedFieldRecord","undefined","split","childRecord","toBeDeleted","deleteComponent","child","map","myChild","childPath","updatePath","components","getComponents","validComponents","columnInfo","showConfirmAlert","selectedComponentpath","length","row","rowIndex","children","column","columnIndex","componnetrow","compRowIndex","hasOwnProperty","component","compIndex","newChild","childComp","obj","getIndexByLabel","label","push","path","newObj","object","parentPath","validateDelete","showAlert","componentcode","COMBO","childValue","parentData","newChildData","filter","confirmAlert","confirmMessage","confirm","intl","formatMessage","id","bool","onclickcomponent","event","dateComponents","inputtype","filterDataComponents","item","componentData","parentRadioValue","FRONTENDSEARCHFILTER","BACKENDSEARCHFILTER","source","nquerybuildertablecode","userInfo","tableColumn","filterColumns","oldParentData","radioOptions","tags","value","text","componnet","compindex","valuemember","getValueMembers","valueColumn","numericColumns","x","foriegntablename","displayname","language","tablecolumnname","onInputOnChange","name","target","type","splititemarray","newChildData1","checked","newdata","saveComponentProperties","langArray","languageList","langDataObject","onNumericInputChange","columnname","isNaN","handleDateChange","dateValue","dateName","onComboChange","comboData","comboName","stablename","nformcode","ismultilingual","validateChild","valueMemberOptions","filtervalue","staticfiltervalue","ndata","warn","addTag","addCondition","filterColumnName","filterValue","conditionString","conditionArrayString","filtercolumn","foriegntablePK","EQUALS","NOTEQUALS","STARTSWITH","ENDSWITH","INCLUDES","CONTAINS","join","NOTCONTAINS","conditionArrayUI","conditionArraySQL","deleteCondition","index","splice","addDateConstraints","dateConstraintArrayUI","dateConstraintArraySQL","cdateConstraintArraySQL","parentdate","constraint","childdate","deleteDateCondition","handleSaveClick","saveType","selectedRecord","inputData","selectedId","dataState","operation","nchecklistqbcode","nreactregtemplatecode","masterData","selectedTemplate","nsampletypecode","sregtemplatename","jsonString","JSON","stringify","replaceAll","jsondata","ntransactionstatus","DRAFT","postParam","inputListName","selectedObject","primaryKeyField","fetchUrl","fecthInputObject","userinfo","inputParam","methodUrl","classUrl","displayName","searchRef","userRoleControlRights","ncontrolcode","loadEsign","screenData","info","template","invalidComponent","duplicateComponents","insufficientMultilingualData","incompletePropertiesComponent","labels","trim","includes","displaymember","CHECKBOX","RADIO","TEXTINPUT","TEXTAREA","Object","keys","dataArray","nflag","PRODUCT","INSTRUMENT","MATERIAL","showsynonym","numericConditions","defaultMessage","stringConditions","dateConditions","LESSTHAN","LESSTHANOREQUALS","GREATERTHAN","GREATERTHANEQUALS","render","openPortal","closeModal","os","enableMouseEvents","ReactInputFields","ReactTables","filterData","addChildMapping","Period","componentDidUpdate","previousProps","updateState"],"mappings":"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","sourcesContent":["\r\nimport React from 'react';\r\nimport { Button, Col, Modal, Row } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\nimport { FormattedMessage, injectIntl } from 'react-intl';\r\nimport { TouchBackend } from 'react-dnd-touch-backend'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\nimport { DndProvider } from 'react-dnd'\r\nimport device from 'current-device';\r\n// import MoreOptions from '../../components/configureui/MoreOptions';\r\nimport Dynamicinput from '../../components/droparea/Dynamicinputs';\r\nimport { connect } from 'react-redux';\r\nimport { updateStore, crudMaster, getTableColumns, getForeignTableData } from '../../actions/index'\r\nimport { condition, SampleType, transactionStatus } from '../../components/Enumeration';\r\nimport { DEFAULT_RETURN } from '../../actions/LoginTypes';\r\nimport { showEsign } from '../../components/CommonScript';\r\nimport AlertModal from './AlertModal'\r\nimport FormInput from '../../components/form-input/form-input.component';\r\nimport { getcomponentdata, getValidComponent, replaceChildFromChildren } from '../../components/droparea/helpers';\r\nimport { InstrumentDefaultTemplate, productDefaultTemplate, MaterialDefaultTemplate } from './DefaultTemplates';\r\nimport { ReactComponents } from '../../components/Enumeration';\r\nimport ConfirmMessage from '../../components/confirm-alert/confirm-message.component';\r\nimport { toast } from 'react-toastify';\r\nconst mapStateToProps = state => {\r\n    return ({ Login: state.Login })\r\n}\r\nclass PreRegDesignPopUp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.confirmMessage = new ConfirmMessage();\r\n        this.state = {\r\n            nflag: 1,\r\n            design: this.props.Login.operation === 'update' ? this.props.Login.design :\r\n                this.props.nsampletypecode === SampleType.PRODUCT ? productDefaultTemplate :\r\n                    this.props.nsampletypecode === SampleType.INSTRUMENT ? InstrumentDefaultTemplate :\r\n                        this.props.nsampletypecode === SampleType.MATERIAL ? MaterialDefaultTemplate : [{\r\n                            \"id\": \"pv1OWbsMYq\",\r\n                            \"type\": \"row\",\r\n                            \"children\": [\r\n                                { type: 'column', id: '2zMtRhjb2t', children: [] }\r\n                            ]\r\n                        }],\r\n            selectedRecord: this.props.Login.selectedRecord || {},\r\n            selectedFieldRecord: {},\r\n            selectedComponentpath: \"\",\r\n            components: [],\r\n            filterColumns: [],\r\n            validComponents: [],\r\n            showConfirmAlert: false,\r\n            showsynonym: false,\r\n            toBeDeleted: {},\r\n            numericConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"equal to(=)\" }), value: condition.EQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"not equal to(!=)\" }), value: condition.NOTEQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"In\" }), value: condition.CONTAINS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Not In\" }), value: condition.NOTCONTAINS }\r\n            ],\r\n            stringConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"equal to(=)\" }), value: condition.EQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"not equal to(!=)\" }), value: condition.NOTEQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Starts With\" }), value: condition.STARTSWITH },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Ends With\" }), value: condition.ENDSWITH },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Contains\" }), value: condition.INCLUDES }\r\n            ],\r\n            dateConditions: [\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Less Than (<)\" }), value: condition.LESSTHAN },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Less Than Or Equals(<=)\" }), value: condition.LESSTHANOREQUALS },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Greater Than(>)\" }), value: condition.GREATERTHAN },\r\n                { label: this.props.intl.formatMessage({ id: \"IDS_EQUALS\", defaultMessage: \"Greater Than Or Equals(>=)\" }), value: condition.GREATERTHANEQUALS }\r\n            ]\r\n\r\n\r\n        }\r\n    }\r\n    validateDynamicDesign = () => {\r\n        let valid = this.validateTemplate(this.state.design);\r\n        if (!valid) {\r\n            return null;\r\n        }\r\n        else {\r\n            this.setState({ openAlertModal: true, templateName: \"\" });\r\n        }\r\n    }\r\n    render() {\r\n        // const selectedFieldRecord = JSON.parse(JSON.stringify(this.state.selectedFieldRecord))\r\n        return (\r\n            <>\r\n                <Modal\r\n                    centered\r\n                    scrollable\r\n                    bsPrefix=\"model model_zindex\"\r\n                    show={this.props.Login.openPortal}\r\n                    onHide={this.props.closeModal}\r\n                    dialogClassName={`${this.state.nflag && this.state.nflag === 2 ? 'alert-popup' : ''} modal-fullscreen`}\r\n                    backdrop=\"static\"\r\n                    keyboard={false}\r\n                    enforceFocus={false}\r\n                    aria-labelledby=\"example-custom-modal-styling-title\"\r\n                >\r\n                    <Modal.Header className=\"d-flex align-items-center\">\r\n                        <Modal.Title id=\"add\" className=\"header-primary flex-grow-1\">\r\n                            {`${this.props.Login.operation === \"update\" ? this.props.intl.formatMessage({ id: \"IDS_EDIT\" }) : this.props.intl.formatMessage({ id: \"IDS_ADD\" })} ${this.props.intl.formatMessage({ id: \"IDS_DESIGNTEMPLATE\" })}`}\r\n                        </Modal.Title>\r\n                        <>\r\n                            <Button className=\"btn-user btn-cancel\" variant=\"\" onClick={this.props.closeModal}>\r\n                                <FormattedMessage id='IDS_CANCEL' defaultMessage='Cancel' />\r\n                            </Button>\r\n                            <Button className=\" btn-user btn-primary-blue\"\r\n                                //onClick={() => this.setState({ openAlertModal: true, templateName: \"\" })}\r\n                                onClick={this.validateDynamicDesign}\r\n                            >\r\n                                <FontAwesomeIcon icon={faSave} /> { }\r\n                                <FormattedMessage id={\"IDS_SAVE\"} defaultMessage={\"Save\"} />\r\n                            </Button>\r\n                        </>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div className=\"modal-inner-content\">\r\n                            <Row>\r\n                                <Col md={12} className='p-0'>\r\n                                    <DndProvider backend={device.os !== 'android' ? HTML5Backend : TouchBackend} options={{ enableMouseEvents: true }} >\r\n                                        <Dynamicinput\r\n                                            layout={this.state.design}\r\n                                            reactInputFields={this.props.Login.ReactInputFields || {}}\r\n                                            setLayout={this.setLayout}\r\n                                            reactComponents={this.props.Login.ReactComponents || {}}\r\n                                            onInputOnChange={this.onInputOnChange}\r\n                                            onNumericInputChange={this.onNumericInputChange}\r\n                                            onComboChange={this.onComboChange}\r\n                                            selectedFieldRecord={this.state.selectedFieldRecord}\r\n                                            onclickcomponent={this.onclickcomponent}\r\n                                            ReactTables={this.props.Login.ReactTables}\r\n                                            tableColumn={this.state.tableColumn}\r\n                                            filterColumns={this.state.filterColumns}\r\n                                            numericConditions={this.state.numericConditions}\r\n                                            stringConditions={this.state.stringConditions}\r\n                                            filterData={this.props.Login.filterData}\r\n                                            inputFields={this.state.validComponents || []}\r\n                                            addChildMapping={this.addChildMapping}\r\n                                            valueMembers={this.getValueMembers(this.state.selectedFieldRecord)}\r\n                                            validateDelete={this.validateDelete}\r\n                                            addTag={this.addTag}\r\n                                            showFilter={this.state.showFilter}\r\n                                            showPropFilter={this.showPropFilter}\r\n                                            addCondition={this.addCondition}\r\n                                            deleteCondition={this.deleteCondition}\r\n                                            dateConditions={this.state.dateConditions}\r\n                                            dateComponents={this.state.dateComponents}\r\n                                            addDateConstraints={this.addDateConstraints}\r\n                                            deleteDateCondition={this.deleteDateCondition}\r\n                                            showsynonym={this.state.showsynonym}\r\n                                            languages={this.props.Login.languageList || []}\r\n                                            addSynonym={() => this.setState({ showsynonym: !(this.state.showsynonym) })}\r\n                                            parentRadioValue={this.state.parentRadioValue || []}\r\n                                            userinfo={this.props.Login.userInfo}\r\n                                            handleDateChange={this.handleDateChange}\r\n                                            period={this.props.Login.Period || []}\r\n                                        />\r\n                                    </DndProvider>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Modal.Body>\r\n                </Modal>\r\n                <AlertModal\r\n                    openAlertModal={this.state.openAlertModal}\r\n                    modalTitle={\"IDS_ENTERTEMPLATENAME\"}\r\n                    closeModal={() => this.setState({ openAlertModal: false, templateName: \"\" })}\r\n                    onSaveClick={this.handleSaveClick}\r\n                    modalBody={\r\n                        <Row>\r\n                            <Col>\r\n                                <FormInput\r\n                                    label={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                    name={\"templatename\"}\r\n                                    type=\"text\"\r\n                                    onChange={(event) => this.setState({ selectedRecord: { ...this.state.selectedRecord, templateName: event.target.value } })}\r\n                                    placeholder={this.props.intl.formatMessage({ id: \"IDS_TEMPLATENAME\" })}\r\n                                    value={this.state.selectedRecord.templateName ? this.state.selectedRecord.templateName : \"\"}\r\n                                    isMandatory={true}\r\n                                    required={true}\r\n                                    maxLength={\"30\"}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    }\r\n                />\r\n                {this.state.showConfirmAlert ? this.confirmAlert() : \"\"}\r\n            </>\r\n        );\r\n    }\r\n    componentDidUpdate(previousProps) {\r\n        let updateState = false;\r\n        let { openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n            selectedComponentpath, components, validComponents, tableColumn, filterColumns,\r\n            showConfirmAlert, parentRadioValue, showFilter } = this.state\r\n        if (this.props.Login.openPortal === false && previousProps.Login.openPortal) {\r\n            updateState = true;\r\n            openAlertModal = false;\r\n        }\r\n        if (this.props.Login.design !== previousProps.Login.design) {\r\n            updateState = true;\r\n            design = this.props.Login.design;\r\n        }\r\n        if (this.props.Login.selectedRecord !== previousProps.Login.selectedRecord) {\r\n            selectedRecord = this.props.Login.selectedRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord;\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.showFilter !== previousProps.Login.showFilter) {\r\n            showFilter = this.props.Login.showFilter\r\n            updateState = true;\r\n        }\r\n        if (this.props.Login.selectedFieldRecord !== previousProps.Login.selectedFieldRecord) {\r\n            if (this.props.Login.selectedComponentpath && this.props.Login.selectedComponentpath !== previousProps.Login.selectedFieldRecord) {\r\n                selectedComponentpath = this.props.Login.selectedComponentpath\r\n            }\r\n\r\n            selectedFieldRecord = this.props.Login.selectedFieldRecord\r\n            components = this.props.Login.components\r\n            validComponents = this.props.Login.validComponents\r\n            tableColumn = this.props.Login.tableColumn\r\n            filterColumns = this.props.Login.filterColumns\r\n            updateState = true;\r\n\r\n        }\r\n        if (this.props.Login.parentRadioValue !== previousProps.Login.parentRadioValue) {\r\n            parentRadioValue = this.props.Login.parentRadioValue\r\n            updateState = true;\r\n        }\r\n        if (updateState) {\r\n            this.setState({\r\n                openAlertModal, design, selectedRecord, selectedFieldRecord,\r\n                tableColumn, selectedComponentpath, components, validComponents,\r\n                showConfirmAlert, filterColumns, parentRadioValue, showFilter\r\n            })\r\n        }\r\n    }\r\n    showPropFilter = () => {\r\n        const updateInfo = {\r\n            typeName: DEFAULT_RETURN,\r\n            data: {\r\n                showFilter: !this.state.showFilter\r\n            }\r\n        }\r\n        this.props.updateStore(updateInfo);\r\n        //  this.setState({ showFilter: !this.state.showFilter })\r\n    }\r\n    setLayout = (design, splitDropZonePath, remove, removeChild) => {\r\n        let selectedFieldRecord = {}\r\n        if (remove === undefined) {\r\n            selectedFieldRecord = getcomponentdata(design, splitDropZonePath.split(\"-\"))\r\n        }\r\n        else if (removeChild) {\r\n            let childRecord = {}\r\n            this.state.toBeDeleted.deleteComponent.child.map(myChild => {\r\n                childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                childRecord['childValue'] = undefined;\r\n                childRecord['parentPath'] = undefined;\r\n                childRecord['valuecolumn'] = undefined;\r\n\r\n                design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                return null;\r\n            })\r\n        }\r\n        design = this.updatePath(design)\r\n        // if (selectedFieldRecord.child) {\r\n        //     let childRecord = {}\r\n        //     selectedFieldRecord.child.map(myChild => {\r\n        //         childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n        //         childRecord['parentPath'] = splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0';\r\n        //         design = replaceChildFromChildren(design, splitDropZonePath.split(\"-\"), childRecord)\r\n        //         return null;\r\n        //     })\r\n        // }\r\n        // if (selectedFieldRecord.childValue) {\r\n        //     let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n        //     let newChildData = []\r\n        //     parentData.child.map(child => child.label === selectedFieldRecord.label ?\r\n        //         newChildData.push({ ...child, childPath: splitDropZonePath.split(\"-\").length === 4 ? splitDropZonePath : splitDropZonePath + '-0' }) :\r\n        //         newChildData.push(child))\r\n        //     parentData = { ...parentData, child: newChildData };\r\n        //     design = replaceChildFromChildren(design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n\r\n        // }\r\n        const components = this.getComponents(design).components;\r\n        let validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n        this.setState({ showConfirmAlert: false, toBeDeleted: {}, design, selectedFieldRecord: selectedFieldRecord, components, validComponents, selectedComponentpath: splitDropZonePath.split(\"-\").length > 1 ? splitDropZonePath : '0-0-' + splitDropZonePath })\r\n    }\r\n    updatePath = (design) => {\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.child) {\r\n                                let newChild = [];\r\n                                component.child.map(childComp => {\r\n                                    const obj = this.getIndexByLabel(design, childComp.label);\r\n                                    newChild.push({ ...childComp, childPath: obj.path });\r\n                                    const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}` };\r\n                                    design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                                })\r\n                                component = { ...component, child: newChild }\r\n                                design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, compIndex], component);\r\n                            }\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.child) {\r\n                            let newChild = [];\r\n                            componnetrow.child.map(childComp => {\r\n                                const obj = this.getIndexByLabel(design, childComp.label);\r\n                                newChild.push({ ...childComp, childPath: obj.path });\r\n                                const newObj = { ...obj.object, parentPath: `${rowIndex}-${columnIndex}-${compRowIndex}-0` };\r\n                                design = replaceChildFromChildren(design, obj.path.split(\"-\"), newObj);\r\n                            })\r\n                            componnetrow = { ...componnetrow, child: newChild }\r\n                            design = replaceChildFromChildren(design, [rowIndex, columnIndex, compRowIndex, 0], componnetrow);\r\n                        }\r\n                    }\r\n                })\r\n            )\r\n        )\r\n        return design;\r\n    }\r\n    getIndexByLabel(design, label) {\r\n        let obj = {};\r\n        design.map((row, rowIndex) =>\r\n            row.children.map((column, columnIndex) =>\r\n                column.children.map((componnetrow, compRowIndex) => {\r\n                    if (componnetrow.hasOwnProperty('children')) {\r\n                        componnetrow.children.map((component, compIndex) => {\r\n                            if (component.label === label) {\r\n                                obj = {\r\n                                    object: component,\r\n                                    path: `${rowIndex}-${columnIndex}-${compRowIndex}-${compIndex}`\r\n                                }\r\n                                // break;\r\n                            }\r\n\r\n                            return null;\r\n                        })\r\n                    } else {\r\n                        if (componnetrow.label === label) {\r\n                            obj = {\r\n                                object: componnetrow,\r\n                                path: `${rowIndex}-${columnIndex}-${compRowIndex}-0`\r\n                            }\r\n                            // return obj;\r\n                            // break;\r\n                        }\r\n                    }\r\n                    return null;\r\n                })\r\n            )\r\n        )\r\n        return obj;\r\n    }\r\n    validateDelete = (design, splitDropZonePath) => {\r\n        const path = splitDropZonePath.split(\"-\")\r\n        let showAlert = false;\r\n        let toBeDeleted = {};\r\n        // let component = {}\r\n        // let row = this.state.design[path[0]]\r\n        // let column = row.children[path[1]]\r\n        // let compRow = column.children[path[2]]\r\n        // if (compRow.type === 'componentrow')\r\n        //     component = compRow.children[path[3]]\r\n        // else\r\n        //     component = compRow\r\n        let component = getcomponentdata(this.state.design, path)\r\n        if (component.child && component.child.length > 0) {\r\n\r\n            let childRecord = {}\r\n            component.child.map(myChild => {\r\n                childRecord = getcomponentdata(design, myChild.childPath.split(\"-\"))\r\n                childRecord['childValue'] = undefined;\r\n                childRecord['parentPath'] = undefined;\r\n                childRecord['valuecolumn'] = undefined;\r\n                if (myChild.componentcode !== ReactComponents.COMBO) {\r\n                    childRecord['column'] = undefined;\r\n                }\r\n                design = replaceChildFromChildren(design, myChild.childPath.split(\"-\"), childRecord)\r\n                return null;\r\n            })\r\n            showAlert = true;\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n            // this.showAlert(true, toBeDeleted);\r\n        }\r\n        if (component.childValue) {\r\n            let parentData = getcomponentdata(this.state.design, component.parentPath.split(\"-\"));\r\n            let newChildData = parentData.child.filter(child => child.label !== component.label)\r\n            parentData = { ...parentData, child: newChildData };\r\n            design = replaceChildFromChildren(design, component.parentPath.split(\"-\"), parentData)\r\n            toBeDeleted = { design, splitDropZonePath, deleteComponent: component }\r\n\r\n        }\r\n        if (showAlert) {\r\n            this.showAlert(true, toBeDeleted);\r\n        }\r\n        else {\r\n            this.setLayout(design, splitDropZonePath, true)\r\n        }\r\n    }\r\n    confirmAlert = () => {\r\n        this.confirmMessage.confirm(\"Warning\", \"Warning\",\r\n            this.props.intl.formatMessage({ id: \"IDS_PARENTCOMPONENTCANNOTBEDELETED\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_OK\" }),\r\n            this.props.intl.formatMessage({ id: \"IDS_CANCEL\" }),\r\n            () => this.setLayout(this.state.toBeDeleted.design, this.state.toBeDeleted.splitDropZonePath, true, true),\r\n            undefined,\r\n            () => this.showAlert(false));\r\n    }\r\n    showAlert = (bool, toBeDeleted) => {\r\n        // const updateInfo = {\r\n        //     typeName: DEFAULT_RETURN,\r\n        //     data: { showConfirmAlert: bool, toBeDeleted }\r\n        // }\r\n        // this.props.updateStore(updateInfo);\r\n        this.setState({ showConfirmAlert: bool, toBeDeleted })\r\n    }\r\n    onclickcomponent = (event, data, path) => {\r\n        //console.log(\"event,data, path :\", event, data, path);\r\n        const selectedFieldRecord = { ...data }\r\n        const obj = this.getComponents(this.state.design);\r\n        //console.log(\"obj:\", obj);\r\n        const components = obj.components;\r\n\r\n        let dateComponents = obj.dateComponents;\r\n        if (data.inputtype === \"date\") {\r\n            const filterDataComponents = dateComponents.filter(item => item.label !== data.label);\r\n            dateComponents = filterDataComponents;\r\n        }\r\n\r\n        let componentData = { components, selectedComponentpath: path }\r\n        let parentRadioValue = []\r\n\r\n        if ((selectedFieldRecord.componentcode === ReactComponents.COMBO ||\r\n            selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\r\n            selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) &&\r\n            selectedFieldRecord.source !== undefined &&\r\n            (this.props.Login.columnInfo === undefined ||\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] === undefined)) {\r\n            this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                selectedFieldRecord.nquerybuildertablecode, this.props.Login.userInfo,\r\n                \"\", this.props.Login.columnInfo, componentData, undefined, false)\r\n        } else {\r\n            const validComponents = getValidComponent(selectedFieldRecord, components, this.props.Login.columnInfo)\r\n            let tableColumn = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].tableColumn : [];\r\n            let filterColumns = selectedFieldRecord.nquerybuildertablecode ? this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].filterColumns : [];\r\n            if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                if (selectedFieldRecord.parentPath) {\r\n                    let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"))\r\n                    if (oldParentData.hasOwnProperty('child')) {\r\n                        oldParentData.child.map(item => {\r\n                            if (item.label === selectedFieldRecord.label) {\r\n                                parentRadioValue = oldParentData.radioOptions.tags.map(item => {\r\n                                    return { value: item.id, label: item.text, item }\r\n                                })\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            if (selectedFieldRecord.componentcode !== ReactComponents.COMBO &&\r\n                selectedFieldRecord.componentcode !== ReactComponents.FRONTENDSEARCHFILTER &&\r\n                selectedFieldRecord.componentcode !== ReactComponents.BACKENDSEARCHFILTER) {\r\n                if (this.props.Login.columnInfo && selectedFieldRecord.childValue\r\n                    && this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode]) {\r\n                    tableColumn = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].tableColumn;\r\n                    filterColumns = this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].filterColumns;\r\n                    this.setState({\r\n                        selectedComponentpath: path,\r\n                        selectedFieldRecord: selectedFieldRecord,\r\n                        components,\r\n                        tableColumn,\r\n                        filterColumns,\r\n                        validComponents,\r\n                        parentRadioValue,\r\n                        showFilter: false\r\n\r\n\r\n                    })\r\n                } else {\r\n                    if (selectedFieldRecord.childValue) {\r\n                        this.props.getTableColumns(this.state.design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                            \"\", this.props.Login.columnInfo, componentData, undefined, false);\r\n                    } else {\r\n                        this.setState({\r\n                            selectedComponentpath: path,\r\n                            selectedFieldRecord: selectedFieldRecord,\r\n                            components,\r\n                            tableColumn,\r\n                            filterColumns,\r\n                            dateComponents,\r\n                            validComponents,\r\n                            parentRadioValue,\r\n                            showFilter: false\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                this.setState({\r\n                    selectedComponentpath: path,\r\n                    selectedFieldRecord: selectedFieldRecord,\r\n                    components,\r\n                    tableColumn,\r\n                    filterColumns,\r\n                    dateComponents,\r\n                    validComponents,\r\n                    parentRadioValue,\r\n                    showFilter: false\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    getComponents = (design) => {\r\n        let components = [];\r\n        let dateComponents = [{ label: \"Current Date\", value: \"utccurrentdate\" }];\r\n        design.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                column.children.map((componnet, compindex) => {\r\n                    if (componnet.hasOwnProperty(\"children\")) {\r\n                        componnet.children.map((componnetrow, compRowIndex) => {\r\n                            componnetrow.inputtype === 'date' && componnetrow.label && dateComponents.push({ label: componnetrow.label, value: componnetrow.label })\r\n                            componnetrow.label && components.push({\r\n                                label: componnetrow.label,\r\n                                value: componnetrow.label,\r\n                                // item: componnetrow,\r\n                                inputtype: componnetrow.inputtype,\r\n                                source: componnetrow.source,\r\n                                nquerybuildertablecode: componnetrow.nquerybuildertablecode,\r\n                                child: componnetrow.child,\r\n                                valuemember: componnetrow.valuemember,\r\n                                path: `${rowIndex}-${columnIndex}-${compindex}-${compRowIndex}`\r\n                            })\r\n                        })\r\n                    } else {\r\n                        componnet.inputtype === 'date' && componnet.label && dateComponents.push({ label: componnet.label, value: componnet.label })\r\n                        componnet.label && components.push({\r\n                            label: componnet.label,\r\n                            value: componnet.label,\r\n                            // item: componnet,\r\n                            inputtype: componnet.inputtype,\r\n                            source: componnet.source,\r\n                            nquerybuildertablecode: componnet.nquerybuildertablecode,\r\n                            child: componnet.child,\r\n                            valuemember: componnet.valuemember,\r\n                            path: `${rowIndex}-${columnIndex}-${compindex}-0`\r\n                        })\r\n                    }\r\n                })\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        return { components, dateComponents };\r\n    }\r\n    getValueMembers = (selectedFieldRecord) => {\r\n        if (selectedFieldRecord.childValue) {\r\n            let valueColumn = [];\r\n            this.props.Login.columnInfo &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode] &&\r\n                this.props.Login.columnInfo[selectedFieldRecord.nquerybuildertablecode].numericColumns.map(x => {\r\n                    if (x.foriegntablename === selectedFieldRecord.childValue.source)\r\n                        valueColumn.push(\r\n                            {\r\n                                label: x.displayname[this.props.Login.userInfo.language],\r\n                                value: x.tablecolumnname\r\n                            }\r\n                        )\r\n                    return null;\r\n                })\r\n            if (valueColumn.length) {\r\n\r\n                return valueColumn;\r\n\r\n            } else {\r\n                this.props.Login.columnInfo &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode] &&\r\n                    this.props.Login.columnInfo[selectedFieldRecord.childValue.nquerybuildertablecode].numericColumns.map(x => {\r\n                        if (x.foriegntablename === selectedFieldRecord.source)\r\n                            valueColumn.push(\r\n                                {\r\n                                    label: x.displayname[this.props.Login.userInfo.language],\r\n                                    value: x.tablecolumnname\r\n                                }\r\n                            )\r\n                        return null;\r\n                    })\r\n                return valueColumn;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    onInputOnChange = (event, name) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        if (event.target.type === 'checkbox') {\r\n\r\n\r\n            if (name === \"recordbasedreadonly\" || name === \"recordbasedshowhide\") {\r\n                let design = this.state.design\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                if (selectedFieldRecord[\"recordbasedshowhide\"] || selectedFieldRecord[\"recordbasedreadonly\"]) {\r\n                    // let design = this.state.design\r\n                    if (selectedFieldRecord.parentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData)\r\n                        }\r\n                        delete selectedFieldRecord[\"parentLabel\"]\r\n                        delete selectedFieldRecord[\"selectedrecordbasedhide\"]\r\n                        delete selectedFieldRecord[\"recordbasedhide\"]\r\n                        delete selectedFieldRecord[\"radioparent\"]\r\n                    }\r\n                    selectedFieldRecord[name === \"recordbasedreadonly\" ? \"recordbasedshowhide\" : \"recordbasedreadonly\"] = false;\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (event.target.name === \"loadselecteddate\" || event.target.name === \"loadcurrentdate\") {\r\n\r\n                if (event.target.name === \"loadselecteddate\" && selectedFieldRecord['loadcurrentdate']) {\r\n                    selectedFieldRecord['loadcurrentdate'] = false\r\n                } else if (event.target.name === \"loadcurrentdate\" && selectedFieldRecord['loadselecteddate']) {\r\n                    selectedFieldRecord['loadselecteddate'] = false\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n\r\n            else {\r\n                if (event.target.name === 'timeonly') {\r\n                    selectedFieldRecord['dateonly'] = false;\r\n                }\r\n                if (event.target.name === 'dateonly') {\r\n                    selectedFieldRecord['timeonly'] = false;\r\n                }\r\n                selectedFieldRecord[event.target.name] = event.target.checked;\r\n                this.saveComponentProperties(selectedFieldRecord)\r\n            }\r\n        }\r\n        else {\r\n            if (name === 'synonym') {\r\n               \r\n                selectedFieldRecord['displayname'] = {\r\n                    ...selectedFieldRecord['displayname'],\r\n                    [event.target.name]: event.target.value\r\n                  \r\n                }\r\n            }\r\n            if (event.target.name === 'label') {\r\n                // if (selectedFieldRecord[event.target.name] === undefined) {\r\n                //     this.props.Login.languageList.map(lang => {\r\n                //         selectedFieldRecord['displayname'] = {\r\n                //             ...selectedFieldRecord['displayname'],\r\n                //             [lang.value]: event.target.value\r\n                //         }\r\n                //     })\r\n                // } else {\r\n\r\n                    const langArray =  this.props.Login.languageList;\r\n                    //console.log(\"lang list:\", langArray);\r\n                    const langDataObject = {};\r\n                    langArray.map(item=>\r\n                        langDataObject[item.value] = event.target.value);\r\n\r\n                    selectedFieldRecord['displayname'] = {\r\n                        ...selectedFieldRecord['displayname'],\r\n                       // [this.props.Login.language]: event.target.value\r\n                       ...langDataObject\r\n                }\r\n                // }\r\n                selectedFieldRecord[event.target.name] = event.target.value;\r\n            } else {\r\n                selectedFieldRecord[event.target.name] = event.target.value;\r\n            }\r\n            this.saveComponentProperties(selectedFieldRecord)\r\n        }\r\n\r\n        // this.setState({ selectedFieldRecord });\r\n\r\n    }\r\n    onNumericInputChange = (event, columnname) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        let value = event.target.value;\r\n        if (!isNaN(value)) {\r\n            // if (parseInt(value) < 10) {\r\n            selectedFieldRecord[event.target.name] = value;\r\n            this.saveComponentProperties(selectedFieldRecord);\r\n            // }\r\n        }\r\n    }\r\n    handleDateChange = (dateValue, dateName) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n        selectedFieldRecord[dateName] = dateValue\r\n        this.saveComponentProperties(selectedFieldRecord);\r\n    }\r\n\r\n    onComboChange = (comboData, comboName) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        if (selectedFieldRecord.label) {\r\n            if (comboName === 'table') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['source'] = comboData.item.stablename;\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['conditionstring'] = ' and nformcode = ' + comboData.item.nformcode\r\n                }\r\n                selectedFieldRecord['nquerybuildertablecode'] = comboData.value;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                if (selectedFieldRecord.inputtype === 'frontendsearchfilter' || selectedFieldRecord.inputtype === 'backendsearchfilter') {\r\n                    this.props.getTableColumns(design, selectedFieldRecord, comboData.value,\r\n                        this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo, { validComponents: this.state.validComponents })\r\n                } else {\r\n                    this.props.getTableColumns(design, selectedFieldRecord, comboData.value,\r\n                        this.props.Login.userInfo, splititemarray, this.props.Login.columnInfo)\r\n                }\r\n\r\n            } else if (comboName === 'column') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['displaymember'] = comboData.value;\r\n                if (comboData.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['name'] = comboData.value\r\n                }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            } else if (comboName === 'childValue') {\r\n                if (comboData) {\r\n                    // selectedFieldRecord[comboName] = comboData;\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    let design = this.state.design\r\n                    if (selectedFieldRecord.parentPath) {\r\n                        let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                        if (oldParentData.child) {\r\n                            let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                            oldParentData = { ...oldParentData, child: newChildData1 };\r\n                            design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData)\r\n                        }\r\n\r\n                    }\r\n                    let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    selectedFieldRecord['parentPath'] = comboData.path\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        selectedFieldRecord['parentLabel'] = comboData.label\r\n                    }\r\n\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    let newChildData = parentData.child || [];\r\n                    let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label)\r\n                    if (validateChild.length === 0) {\r\n                        let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\r\n                        if (valueMemberOptions.length === 1) {\r\n                            newChildData.push({ label: selectedFieldRecord.label, tablecolumnname: valueMemberOptions[0].value, childPath: this.state.selectedComponentpath })\r\n                        } else {\r\n                            newChildData.push({ label: selectedFieldRecord.label, childPath: this.state.selectedComponentpath })\r\n                        }\r\n\r\n                    }\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else if (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER || selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER) {\r\n                        let parentRadioValue = this.state.parentRadioValue || []\r\n                        parentRadioValue = parentData.radioOptions.tags.map(item => {\r\n                            return { value: item.id, label: item.text, item }\r\n                        })\r\n                        this.setState({ design, selectedFieldRecord, parentRadioValue });\r\n                    }\r\n                    else {\r\n                        this.props.getTableColumns(design, selectedFieldRecord,\r\n                            selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                            splititemarray, this.props.Login.columnInfo,\r\n                            { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                            true)\r\n                    }\r\n\r\n                } else {\r\n\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n                    let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                    let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label)\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                    selectedFieldRecord['childValue'] = comboData\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO)\r\n                        selectedFieldRecord['column'] = comboData\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.setState({ design, selectedFieldRecord, tableColumn: [] })\r\n                    }\r\n                }\r\n\r\n            } else if (comboName === 'valuecolumn') {\r\n                selectedFieldRecord['valuecolumn'] = comboData;\r\n                let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                let newChildData = []\r\n                parentData.child.map(child => {\r\n                    if (child.label === selectedFieldRecord.label) {\r\n                        newChildData.push({\r\n                            ...child, tablecolumnname: comboData.value\r\n                        })\r\n                    } else {\r\n                        newChildData.push(child)\r\n                    }\r\n                    return null;\r\n                })\r\n                parentData = { ...parentData, child: newChildData };\r\n                let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                const newdata = { ...selectedFieldRecord }\r\n                design = replaceChildFromChildren(design, this.state.selectedComponentpath.split(\"-\"), newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            } else if (comboName === 'filtercolumn') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord.filtervalue = \"\";\r\n                selectedFieldRecord.staticfiltervalue = \"\";\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                if (comboData.type !== 'numeric') {\r\n                    this.setState({ design, selectedFieldRecord });\r\n                } else {\r\n                    this.props.getForeignTableData(design, selectedFieldRecord, '', this.props.Login.userInfo,\r\n                        splititemarray, this.props.Login.columnInfo,\r\n                        { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                        true)\r\n                }\r\n                // \r\n\r\n            } else if (comboName === 'customsearchfilter') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['filterfields'] = [];\r\n                this.state.selectedFieldRecord[comboName].map(data => {\r\n                    return selectedFieldRecord['filterfields'].push(data.item['item'] ? {type:data.type,...data.item['item']} : data.item);\r\n                });\r\n                // if (comboData.item.ismultilingual) {\r\n                //     selectedFieldRecord['isMultiLingual'] = true;\r\n                // }\r\n                // if (comboData.item.stablename === 'dynamicmaster') {\r\n                //     selectedFieldRecord['name'] = comboData.value\r\n                // }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            }\r\n            else if (comboName === 'selectedrecordbasedhide') {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['recordbasedhide'] = comboData.value;\r\n                if (comboData.item.ismultilingual) {\r\n                    selectedFieldRecord['isMultiLingual'] = true;\r\n                }\r\n                if (comboData.item.stablename === 'dynamicmaster') {\r\n                    selectedFieldRecord['name'] = comboData.value\r\n                }\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord })\r\n            }\r\n            // else if (comboName === 'filtercomponent') {\r\n            //     selectedFieldRecord[comboName] = comboData;\r\n            //    // selectedFieldRecord['recordbasedhide'] = comboData.value;\r\n            //     // if (comboData.item.ismultilingual) {\r\n            //     //     selectedFieldRecord['isMultiLingual'] = true;\r\n            //     // }\r\n            //     // if (comboData.item.stablename === 'dynamicmaster') {\r\n            //     //     selectedFieldRecord['name'] = comboData.value\r\n            //     // }\r\n            //     const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n            //     const newdata = { ...selectedFieldRecord }\r\n            //     const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n            //     this.setState({ design, selectedFieldRecord })\r\n            // }\r\n            else if (comboName === 'radioparent') {\r\n                if (comboData) {\r\n                    // selectedFieldRecord[comboName] = comboData;\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                    let design = this.state.design\r\n                    // if (selectedFieldRecord.parentPath) {\r\n                    //     let oldParentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                    //     if (oldParentData.child) {\r\n                    //         let newChildData1 = oldParentData.child.filter(child => child.label !== selectedFieldRecord.label);\r\n                    //         oldParentData = { ...oldParentData, child: newChildData1 };\r\n                    //         design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), oldParentData)\r\n                    //     }\r\n\r\n                    // }\r\n                    let parentData = getcomponentdata(design, comboData.path.split(\"-\"));\r\n                    selectedFieldRecord['radioparent'] = comboData\r\n                    selectedFieldRecord['parentPath'] = comboData.path\r\n                    selectedFieldRecord['parentLabel'] = comboData.label\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    let newChildData = parentData.child || [];\r\n                    let validateChild = newChildData.filter(x => x.label === selectedFieldRecord.label)\r\n                    if (validateChild.length === 0) {\r\n                        let valueMemberOptions = this.getValueMembers(selectedFieldRecord);\r\n                        if (valueMemberOptions !== null && valueMemberOptions.length === 1) {\r\n                            newChildData.push({ label: selectedFieldRecord.label, tablecolumnname: valueMemberOptions[0].value, childPath: this.state.selectedComponentpath })\r\n                        } else {\r\n                            newChildData.push({ label: selectedFieldRecord.label, childPath: this.state.selectedComponentpath })\r\n                        }\r\n\r\n                    }\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    design = replaceChildFromChildren(design, comboData.path.split(\"-\"), parentData)\r\n                    // if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                    //     this.setState({ design, selectedFieldRecord });\r\n                    // } else if ((selectedFieldRecord['recordbasedreadonly'] \r\n                    // || selectedFieldRecord['recordbasedshowhide']) &&\r\n                    //     (selectedFieldRecord.componentcode === ReactComponents.FRONTENDSEARCHFILTER ||\r\n                    //         selectedFieldRecord.componentcode === ReactComponents.BACKENDSEARCHFILTER ||\r\n                    //         selectedFieldRecord.componentcode === ReactComponents.TEXTAREA ||\r\n                    //         selectedFieldRecord.componentcode === ReactComponents.TEXTINPUT ||\r\n                    //         selectedFieldRecord.componentcode === ReactComponents.DATE ||\r\n                    //         selectedFieldRecord.componentcode === ReactComponents.RADIO)) {\r\n                        let parentRadioValue = this.state.parentRadioValue || []\r\n                        parentRadioValue = parentData.radioOptions.tags.map(item => {\r\n                            return { value: item.id, label: item.text, item }\r\n                        })\r\n                        this.setState({ design, selectedFieldRecord, parentRadioValue });\r\n                    // }\r\n                    // else {\r\n                    //     this.props.getTableColumns(design, selectedFieldRecord,\r\n                    //         selectedFieldRecord.childValue.nquerybuildertablecode, this.props.Login.userInfo,\r\n                    //         splititemarray, this.props.Login.columnInfo,\r\n                    //         { components: this.state.components, selectedComponentpath: this.state.selectedComponentpath },\r\n                    //         true)\r\n                    // }\r\n\r\n                } else {\r\n\r\n                    const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n\r\n                    let parentData = getcomponentdata(this.state.design, selectedFieldRecord.parentPath.split(\"-\"));\r\n                    let newChildData = parentData.child.filter(child => child.label !== selectedFieldRecord.label)\r\n                    parentData = { ...parentData, child: newChildData };\r\n                    let design = replaceChildFromChildren(this.state.design, selectedFieldRecord.parentPath.split(\"-\"), parentData)\r\n                    selectedFieldRecord['radioparent'] = comboData\r\n                    if (selectedFieldRecord.componentcode !== ReactComponents.COMBO)\r\n                        selectedFieldRecord['selectedrecordbasedhide'] = comboData\r\n                    delete selectedFieldRecord['recordbasedhide']\r\n                    const newdata = { ...selectedFieldRecord }\r\n                    design = replaceChildFromChildren(design, splititemarray, newdata)\r\n                    if (selectedFieldRecord.componentcode === ReactComponents.COMBO) {\r\n                        this.setState({ design, selectedFieldRecord });\r\n                    } else {\r\n                        this.setState({ design, selectedFieldRecord, tableColumn: [] })\r\n                    }\r\n                }\r\n\r\n            } else if (comboName === \"period\") {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                selectedFieldRecord['nperiodcode'] = comboData.value\r\n                selectedFieldRecord['nperioddata'] = comboData.item.ndata\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n            else {\r\n                selectedFieldRecord[comboName] = comboData;\r\n                const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n                const newdata = { ...selectedFieldRecord }\r\n                const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n                this.setState({ design, selectedFieldRecord });\r\n            }\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERLABEL\" }))\r\n        }\r\n\r\n    }\r\n    addTag = (tags) => {\r\n        const selectedFieldRecord = this.state.selectedFieldRecord || {};\r\n\r\n        selectedFieldRecord['radioOptions'] = tags;\r\n        this.saveComponentProperties(selectedFieldRecord);\r\n\r\n    }\r\n    addCondition = () => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let filterColumnName;\r\n        let filterValue;\r\n        let conditionString;\r\n        let conditionArrayString;\r\n        if (selectedFieldRecord[\"filtercolumn\"] && selectedFieldRecord['condition'] && (selectedFieldRecord['staticfiltervalue'] || selectedFieldRecord['filtervalue'])) {\r\n\r\n            switch (selectedFieldRecord[\"filtercolumn\"].type) {\r\n                case 'static': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.columnname;\r\n                    filterValue = { label: selectedFieldRecord.staticfiltervalue, value: selectedFieldRecord.staticfiltervalue }\r\n                    break;\r\n                }\r\n                case 'dynamic': {\r\n                    filterColumnName = \" and jsondata->>'\" + selectedFieldRecord.filtercolumn.item.columnname + \"'\";\r\n                    filterValue = { label: selectedFieldRecord.staticfiltervalue, value: selectedFieldRecord.staticfiltervalue }\r\n                    break;\r\n                }\r\n                case 'numeric': {\r\n                    filterColumnName = \" and \" + selectedFieldRecord.filtercolumn.item.foriegntablePK;\r\n                    filterValue = selectedFieldRecord.filtervalue\r\n                    break;\r\n                }\r\n                default:\r\n                    break;\r\n            }\r\n            switch (selectedFieldRecord[\"condition\"].value) {\r\n                case condition.EQUALS:\r\n                    conditionString = filterColumnName + \" = '\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.NOTEQUALS:\r\n                    conditionString = filterColumnName + \" != '\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" = \" + filterValue.label\r\n                    break;\r\n                case condition.STARTSWITH:\r\n                    conditionString = filterColumnName + \" like '\" + filterValue.value + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Starts With \" + filterValue.label\r\n                    break;\r\n                case condition.ENDSWITH:\r\n                    conditionString = filterColumnName + \" like '%\" + filterValue.value + \"'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \"Ends With \" + filterValue.label\r\n                    break;\r\n                case condition.INCLUDES:\r\n                    conditionString = filterColumnName + \" like '%\" + filterValue.value + \"%'\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" Contains \" + filterValue.label\r\n                    break;\r\n                case condition.CONTAINS:\r\n                    conditionString = filterColumnName + \" in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                    break;\r\n                case condition.NOTCONTAINS:\r\n                    conditionString = filterColumnName + \" not in (\" + filterValue.map(x => x.value).join(',') + \" )\"\r\n                    conditionArrayString = selectedFieldRecord.filtercolumn.label + \" not in (\" + filterValue.map(x => x.label).join(',') + \" )\"\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            let conditionArrayUI = selectedFieldRecord.conditionArrayUI || [];\r\n            let conditionArraySQL = selectedFieldRecord.conditionArraySQL || [];\r\n            conditionArrayUI.push(conditionArrayString);\r\n            conditionArraySQL.push(conditionString);\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                filtercolumn: \"\",\r\n                condition: \"\",\r\n                staticfiltervalue: undefined,\r\n                filtervalue: \"\",\r\n                conditionArrayUI,\r\n                conditionArraySQL\r\n            }\r\n\r\n            selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n        } else {\r\n            return toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALUES\" }))\r\n        }\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord });\r\n    }\r\n    deleteCondition = (index) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let conditionArrayUI = selectedFieldRecord.conditionArrayUI;\r\n        let conditionArraySQL = selectedFieldRecord.conditionArraySQL;\r\n        conditionArrayUI.splice(index, 1);\r\n        conditionArraySQL.splice(index, 1);\r\n        selectedFieldRecord['conditionArrayUI'] = conditionArrayUI;\r\n        selectedFieldRecord['conditionArraySQL'] = conditionArraySQL;\r\n        selectedFieldRecord['conditionstring'] = conditionArraySQL.join(\" \");\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord });\r\n    }\r\n    addDateConstraints = () => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let filterColumnName;\r\n        if (selectedFieldRecord['condition'] && selectedFieldRecord['filtervalue']) {\r\n            filterColumnName = selectedFieldRecord.filtervalue.value;\r\n            let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI || [];\r\n            let dateConstraintArraySQL = selectedFieldRecord.cdateConstraintArraySQL || [];\r\n            dateConstraintArrayUI.push(selectedFieldRecord.label + ' ' + selectedFieldRecord['condition'].label + ' ' + selectedFieldRecord['filtervalue'].label);\r\n            dateConstraintArraySQL.push({ parentdate: selectedFieldRecord.label, constraint: selectedFieldRecord['condition'].value, childdate: filterColumnName });\r\n            selectedFieldRecord = {\r\n                ...selectedFieldRecord,\r\n                condition: \"\",\r\n                filtervalue: \"\",\r\n                dateConstraintArrayUI,\r\n                dateConstraintArraySQL\r\n            }\r\n            const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n            const newdata = { ...selectedFieldRecord }\r\n            const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n            this.setState({ design, selectedFieldRecord });\r\n        } else {\r\n            toast.warn(this.props.intl.formatMessage({ id: \"IDS_ENTERVALUES\" }))\r\n        }\r\n    }\r\n    deleteDateCondition = (index) => {\r\n        let { selectedFieldRecord } = this.state;\r\n        let dateConstraintArrayUI = selectedFieldRecord.dateConstraintArrayUI;\r\n        let dateConstraintArraySQL = selectedFieldRecord.dateConstraintArraySQL;\r\n        dateConstraintArrayUI.splice(index, 1);\r\n        dateConstraintArraySQL.splice(index, 1);\r\n        selectedFieldRecord['dateConstraintArrayUI'] = dateConstraintArrayUI;\r\n        selectedFieldRecord['dateConstraintArraySQL'] = dateConstraintArraySQL;\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord });\r\n    }\r\n    saveComponentProperties = (selectedFieldRecord) => {\r\n        const splititemarray = this.state.selectedComponentpath.split(\"-\")\r\n        // const selectedFieldRecord = this.state.selectedFieldRecord;\r\n        const newdata = { ...selectedFieldRecord }\r\n        const design = replaceChildFromChildren(this.state.design, splititemarray, newdata)\r\n        this.setState({ design, selectedFieldRecord })\r\n    }\r\n    handleSaveClick = (saveType) => {\r\n        if (this.state.selectedRecord.templateName && this.state.selectedRecord.templateName !== \"\") {\r\n            let inputData = [];\r\n            let selectedId = null;\r\n            inputData[\"userinfo\"] = this.props.Login.userInfo;\r\n            let dataState = undefined;\r\n            // let valid = this.validateTemplate(this.state.design);\r\n            // if (!valid) {\r\n            //     return null;\r\n            // }\r\n            if (this.props.Login.operation === \"update\") {\r\n                // edit\r\n                selectedId = this.state.selectedRecord.nchecklistqbcode\r\n                dataState = this.state.dataState\r\n                inputData[\"registrationtemplate\"] = {\r\n                    nreactregtemplatecode: this.props.Login.masterData.selectedTemplate.nreactregtemplatecode,\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templateName,\r\n                    jsonString: JSON.stringify(this.state.design).replaceAll(\"'\", \"''\"),\r\n                    jsondata: this.state.design,\r\n                    ntransactionstatus: transactionStatus.DRAFT\r\n                }\r\n            }\r\n            else {\r\n                //add               \r\n                inputData[\"registrationtemplate\"] =\r\n                {\r\n                    nsampletypecode: this.props.nsampletypecode,\r\n                    sregtemplatename: this.state.selectedRecord.templateName,\r\n                    jsonString: JSON.stringify(this.state.design).replaceAll(\"'\", \"''\"),\r\n                    ntransactionstatus: transactionStatus.DRAFT\r\n                };\r\n            }\r\n            const postParam = {\r\n                inputListName: \"RegistrationTemplate\",\r\n                selectedObject: \"selectedTemplate\",\r\n                primaryKeyField: \"nreactregtemplatecode\",\r\n                fetchUrl: \"dynamicpreregdesign/getRegistrationTemplateById\",\r\n                fecthInputObject: {\r\n                    userinfo: this.props.Login.userInfo, nsampletypecode: this.props.nsampletypecode\r\n                },\r\n                masterData: this.props.Login.masterData\r\n            }\r\n            const inputParam = {\r\n                methodUrl: 'RegistrationTemplate',\r\n                classUrl: 'dynamicpreregdesign',\r\n                displayName: this.props.Login.inputParam.displayName ? this.props.Login.inputParam.displayName : '',\r\n                inputData: inputData, postParam,\r\n                searchRef: this.props.searchRef,\r\n                operation: this.props.Login.operation,\r\n                saveType, dataState, selectedId\r\n            }\r\n            const masterData = this.props.Login.masterData;\r\n\r\n            if (showEsign(this.props.Login.userRoleControlRights, this.props.Login.userInfo.nformcode, this.props.Login.ncontrolcode)) {\r\n                const updateInfo = {\r\n                    typeName: DEFAULT_RETURN,\r\n                    data: {\r\n                        loadEsign: true, screenData: { inputParam, masterData }, saveType\r\n                    }\r\n                }\r\n                this.props.updateStore(updateInfo);\r\n            }\r\n            else {\r\n                this.props.crudMaster(inputParam, masterData, \"openPortal\");\r\n            }\r\n        } else {\r\n            toast.info(this.props.intl.formatMessage({ id: \"IDS_ENTERTEMPLATENAME\" }))\r\n        }\r\n    }\r\n    validateTemplate = (template) => {\r\n\r\n        let invalidComponent = [];\r\n        let duplicateComponents = [];\r\n        let insufficientMultilingualData = [];\r\n        //let invalidComboComponent = [];\r\n        // let invalidRadioComponent = [];\r\n        // let invalidCheckboxComponent = [];\r\n        //let invalidReadOnlyComponent = [];\r\n        let incompletePropertiesComponent = [];\r\n        let labels = [];\r\n        template.map((row, rowIndex) => {\r\n            row.children.map((column, columnIndex) => {\r\n                column.children.map((componnet, compindex) => {\r\n\r\n                    if (componnet.hasOwnProperty(\"children\")) {\r\n                        componnet.children.map((componnetrow, compRowIndex) => {\r\n                            if (!componnetrow.hasOwnProperty('label') || componnetrow.label.trim() === '') {\r\n                                invalidComponent.push(componnetrow)\r\n                            }\r\n                            if (labels.includes(componnetrow.label)) {\r\n                                duplicateComponents.push(componnetrow)\r\n                            } else {\r\n                                labels.push(componnetrow.label);\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.COMBO) {\r\n                                if ((!componnetrow.hasOwnProperty('source') || componnetrow.source.trim() === '') &&\r\n                                    (!componnetrow.hasOwnProperty('displaymember') || componnetrow.displaymember.trim() === '')) {\r\n                                    incompletePropertiesComponent.push(componnetrow)\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.CHECKBOX) {\r\n                                if ((!componnetrow.hasOwnProperty('radioOptions') || (componnetrow.radioOptions && componnetrow.radioOptions.tags.length === 0))) {\r\n                                    incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.RADIO) {\r\n                                if ((!componnetrow.hasOwnProperty('radioOptions') || (componnetrow.radioOptions && componnetrow.radioOptions.tags.length < 2))) {\r\n                                    incompletePropertiesComponent.push(componnetrow);\r\n                                }\r\n                            }\r\n                            if (componnetrow.componentcode === ReactComponents.TEXTINPUT || componnetrow.componentcode === ReactComponents.TEXTAREA) {\r\n                                if (componnetrow.hasOwnProperty('readonly')) {\r\n                                    if (!componnetrow.hasOwnProperty('displaymember') && componnetrow.displaymember.trim() === '') {\r\n                                        incompletePropertiesComponent.push(componnetrow);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (!componnetrow.hasOwnProperty('displayname') || Object.keys(componnetrow.displayname).length !== this.props.Login.languageList.length) {\r\n                                insufficientMultilingualData.push(componnetrow);\r\n                            }\r\n                        })\r\n                    } else {\r\n                        if (!componnet.hasOwnProperty('label') || componnet.label.trim() === '') {\r\n                            invalidComponent.push(componnet)\r\n                        }\r\n                        if (labels.includes(componnet.label)) {\r\n                            duplicateComponents.push(componnet)\r\n                        } else {\r\n                            labels.push(componnet.label);\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.COMBO) {\r\n                            if ((!componnet.hasOwnProperty('source') || componnet.source.trim() === '') &&\r\n                                (!componnet.hasOwnProperty('displaymember') || componnet.displaymember.trim() === '')) {\r\n                                incompletePropertiesComponent.push(componnet)\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.CHECKBOX) {\r\n                            if ((!componnet.hasOwnProperty('radioOptions') || (componnet.radioOptions && componnet.radioOptions.tags.length === 0))) {\r\n                                incompletePropertiesComponent.push(componnet);\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.RADIO) {\r\n                            if ((!componnet.hasOwnProperty('radioOptions') || (componnet.radioOptions && componnet.radioOptions.tags.length < 2))) {\r\n                                incompletePropertiesComponent.push(componnet);\r\n                            }\r\n                        }\r\n                        if (componnet.componentcode === ReactComponents.TEXTINPUT || componnet.componentcode === ReactComponents.TEXTAREA) {\r\n                            if (componnet.hasOwnProperty('readonly')) {\r\n                                if (!componnet.hasOwnProperty('displaymember') || componnet.displaymember.trim() === '') {\r\n                                    incompletePropertiesComponent.push(componnet);\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!componnet.hasOwnProperty('displayname') || Object.keys(componnet.displayname).length !== this.props.Login.languageList.length) {\r\n                            insufficientMultilingualData.push(componnet);\r\n                        }\r\n                    }\r\n                })\r\n                return null;\r\n            })\r\n            return null;\r\n        })\r\n        if (duplicateComponents.length > 0) {\r\n            //console.log(\"duplicateComponents:\", duplicateComponents);\r\n            const dataArray = [];\r\n            duplicateComponents.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_DUPLICATECOMPONENTSFOUND' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (invalidComponent.length > 0) {\r\n            //console.log(\"invalidComponent:\", invalidComponent);\r\n            const dataArray = [];\r\n            invalidComponent.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_MISSINGCOMPONENTLABEL' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (insufficientMultilingualData.length > 0) {\r\n            //console.log(\"insufficientMultilingualData:\", insufficientMultilingualData);\r\n            const dataArray = [];\r\n            insufficientMultilingualData.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_INSUFFICIENTMULTILINGUALDATA' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        if (incompletePropertiesComponent.length > 0) {\r\n            //console.log(\"invalidComponent:\", incompletePropertiesComponent);\r\n            const dataArray = [];\r\n            incompletePropertiesComponent.map(item => dataArray.push(item.label));\r\n            toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCOMPONENT' }) + dataArray.join(\",\"));\r\n            return false;\r\n        }\r\n        // if (invalidRadioComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidRadioComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDRADIOCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        // if (invalidCheckboxComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidCheckboxComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDCHECKBOXCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        // if (invalidReadOnlyComponent.length > 0) {\r\n        //     //console.log(\"invalidComponent:\", invalidComponent);\r\n        //     const dataArray = [];\r\n        //     invalidReadOnlyComponent.map(item => dataArray.push(item.label));\r\n        //     toast.warn(this.props.intl.formatMessage({ id: 'IDS_INVALIDREADONLYCOMPONENT' })  + dataArray.join(\",\") );\r\n        //     return false;\r\n        // }\r\n        return true;\r\n    }\r\n}\r\nexport default connect(mapStateToProps, { updateStore, crudMaster, getTableColumns, getForeignTableData })(injectIntl(PreRegDesignPopUp))"]},"metadata":{},"sourceType":"module"}