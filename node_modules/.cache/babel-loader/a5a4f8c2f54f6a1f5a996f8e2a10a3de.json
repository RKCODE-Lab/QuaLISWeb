{"ast":null,"code":"var _jsxFileName = \"D:\\\\Postgres_workingFolder\\\\QuaLISWeb\\\\src\\\\pages\\\\designtemplatemapping\\\\ConfigureScreenFields.jsx\";\nimport { Grid, GridColumn } from '@progress/kendo-react-grid';\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\nimport React from 'react';\nimport { injectIntl } from 'react-intl';\nimport ReactTooltip from 'react-tooltip';\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\nimport DataGrid from '../../components/data-grid/data-grid.component';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport Tabs, { TabPane } from \"rc-tabs\";\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\nimport { formCode, transactionStatus } from '../../components/Enumeration';\nimport 'rc-tabs/assets/index.css';\n\nclass ConfigureScreenFields extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onTabChange = tab => {\n      this.setState({\n        selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\n      });\n    };\n\n    this.state = {\n      screens: [{\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEREGISTRATION\",\n        formcode: formCode.SAMPLEREGISTRATION\n      }, {\n        eventKey: 'joballocation',\n        name: \"IDS_JOBALLOCATION\",\n        formcode: formCode.JOBALLOCATION\n      }, {\n        eventKey: 'myjobs',\n        name: \"IDS_MYJOBS\",\n        formcode: formCode.MYJOBS\n      }, {\n        eventKey: 'resultentry',\n        name: \"IDS_RESULTENTRY\",\n        formcode: formCode.RESULTENTRY\n      }, {\n        eventKey: 'approval',\n        name: \"IDS_APPROVAL\",\n        formcode: formCode.APPROVAL\n      }],\n      extractedColumnList: [{\n        \"title\": \"IDS_DISPLAYFIELDS\",\n        \"field\": \"sampledisplayfields\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_LISTITEM\",\n        \"field\": \"samplelistitem\",\n        \"width\": \"600px\"\n      }, // { \"title\": \"IDS_LISTMOREITEM\", \"field\": \"samplelistmoreitems\", \"width\": \"600px\" },\n      {\n        \"title\": \"IDS_GRIDITEM\",\n        \"field\": \"samplegriditem\",\n        \"width\": \"600px\"\n      }, {\n        \"title\": \"IDS_GRIDMOREITEM\",\n        \"field\": \"samplegridmoreitem\",\n        \"width\": \"600px\"\n      }],\n      selectedScreen: {\n        eventKey: 'registration',\n        name: \"IDS_SAMPLEREGISTRATION\",\n        formcode: 43\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AtTabs, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Tabs, {\n      activeKey: this.state.selectedScreen.eventKey,\n      moreIcon: \"...\",\n      onChange: this.onTabChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }, this.state.screens.map(screen => /*#__PURE__*/React.createElement(TabPane, {\n      name: screen.eventKey,\n      tab: this.props.intl.formatMessage({\n        id: screen.name\n      }),\n      key: screen.eventKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(PerfectScrollbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(ReactTooltip, {\n      place: \"bottom\",\n      id: \"tooltip-grid-wrap\",\n      globalEventOff: \"click\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 37\n      }\n    }), /*#__PURE__*/React.createElement(AtTableWrap, {\n      className: \"at-list-table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n      language: \"lang\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, Object.assign({\n      className: \"active-paging\",\n      style: {\n        height: '550px'\n      },\n      resizable: true,\n      reorderable: true,\n      scrollable: \"scrollable\" // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\n      ,\n      data: this.props.dataResult[this.state.selectedScreen.formcode]\n    }, this.state.dataState, {\n      onDataStateChange: this.dataStateChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(GridColumn, {\n      field: \"label\" // columnMenu={ColumnMenu}\n      ,\n      title: this.props.intl.formatMessage({\n        id: \"IDS_FIELDS\"\n      }),\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        \"data-tip\": row[\"dataItem\"]['label'],\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 61\n        }\n      }, row[\"dataItem\"]['label']),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 53\n      }\n    }), this.state.extractedColumnList.map(column => /*#__PURE__*/React.createElement(GridColumn, {\n      field: column.field,\n      title: this.props.intl.formatMessage({\n        id: column.title\n      }),\n      headerClassName: \"text-center\",\n      cell: row => /*#__PURE__*/React.createElement(\"td\", {\n        style: {\n          textAlign: \"center\"\n        },\n        \"data-tip\": this.props.intl.formatMessage({\n          id: column.title\n        }),\n        \"data-for\": \"tooltip-grid-wrap\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 65\n        }\n      }, /*#__PURE__*/React.createElement(CustomSwitch, {\n        type: \"switch\",\n        id: row[\"dataItem\"][column.field],\n        onChange: event => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode),\n        checked: row[\"dataItem\"][column.field] || false,\n        name: row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 69\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 57\n      }\n    })))))), /*#__PURE__*/React.createElement(ReactTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 37\n      }\n    })))))));\n  }\n\n}\n\nexport default injectIntl(ConfigureScreenFields);","map":{"version":3,"sources":["D:/Postgres_workingFolder/QuaLISWeb/src/pages/designtemplatemapping/ConfigureScreenFields.jsx"],"names":["Grid","GridColumn","LocalizationProvider","React","injectIntl","ReactTooltip","AtTabs","CustomSwitch","DataGrid","PerfectScrollbar","Tabs","TabPane","AtTableWrap","formCode","transactionStatus","ConfigureScreenFields","Component","constructor","props","onTabChange","tab","setState","selectedScreen","state","screens","find","screen","eventKey","name","formcode","SAMPLEREGISTRATION","JOBALLOCATION","MYJOBS","RESULTENTRY","APPROVAL","extractedColumnList","render","map","intl","formatMessage","id","height","dataResult","dataState","dataStateChange","row","column","field","title","textAlign","event","onChangeToggle","dataIndex","columnIndex"],"mappings":"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","sourcesContent":["import { Grid, GridColumn } from '@progress/kendo-react-grid';\r\nimport { LocalizationProvider } from '@progress/kendo-react-intl';\r\nimport React from 'react'\r\nimport { injectIntl } from 'react-intl'\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { AtTabs } from '../../components/custom-tabs/custom-tabs.styles';\r\nimport CustomSwitch from '../../components/custom-switch/custom-switch.component';\r\nimport DataGrid from '../../components/data-grid/data-grid.component';\r\nimport PerfectScrollbar from 'react-perfect-scrollbar';\r\nimport Tabs, { TabPane } from \"rc-tabs\";\r\nimport { AtTableWrap } from '../../components/data-grid/data-grid.styles';\r\nimport { formCode, transactionStatus } from '../../components/Enumeration';\r\nimport 'rc-tabs/assets/index.css';\r\nclass ConfigureScreenFields extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            screens: [\r\n                { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: formCode.SAMPLEREGISTRATION },\r\n                { eventKey: 'joballocation', name: \"IDS_JOBALLOCATION\", formcode: formCode.JOBALLOCATION },\r\n                { eventKey: 'myjobs', name: \"IDS_MYJOBS\", formcode: formCode.MYJOBS },\r\n                { eventKey: 'resultentry', name: \"IDS_RESULTENTRY\", formcode: formCode.RESULTENTRY },\r\n                { eventKey: 'approval', name: \"IDS_APPROVAL\", formcode: formCode.APPROVAL },\r\n            ],\r\n            extractedColumnList: [\r\n                { \"title\": \"IDS_DISPLAYFIELDS\", \"field\": \"sampledisplayfields\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_LISTITEM\", \"field\": \"samplelistitem\", \"width\": \"600px\" },\r\n                // { \"title\": \"IDS_LISTMOREITEM\", \"field\": \"samplelistmoreitems\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_GRIDITEM\", \"field\": \"samplegriditem\", \"width\": \"600px\" },\r\n                { \"title\": \"IDS_GRIDMOREITEM\", \"field\": \"samplegridmoreitem\", \"width\": \"600px\" }\r\n            ],\r\n            selectedScreen: { eventKey: 'registration', name: \"IDS_SAMPLEREGISTRATION\", formcode: 43 }\r\n        }\r\n    }\r\n    onTabChange = (tab) => {\r\n        this.setState({\r\n            selectedScreen: this.state.screens.find(screen => screen.eventKey === tab)\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <AtTabs>\r\n                    <Tabs activeKey={this.state.selectedScreen.eventKey} moreIcon=\"...\" onChange={this.onTabChange}>\r\n                        {this.state.screens.map(screen =>\r\n                            <TabPane name={screen.eventKey} tab={this.props.intl.formatMessage({ id: screen.name })} key={screen.eventKey}>\r\n                                <PerfectScrollbar>\r\n                                    <ReactTooltip place=\"bottom\" id=\"tooltip-grid-wrap\" globalEventOff='click' />\r\n                                    <AtTableWrap className=\"at-list-table\">\r\n                                        <LocalizationProvider language=\"lang\">\r\n                                            <>\r\n                                                <Grid\r\n                                                    className={\"active-paging\"}\r\n                                                    style={{ height: '550px' }}\r\n                                                    resizable\r\n                                                    reorderable\r\n                                                    scrollable={\"scrollable\"}\r\n                                                    // pageable={{ buttonCount: 5, pageSizes: 4, previousNext: false }}\r\n                                                    data={this.props.dataResult[this.state.selectedScreen.formcode]}\r\n                                                    {...this.state.dataState}\r\n                                                    onDataStateChange={this.dataStateChange}>\r\n                                                    <GridColumn\r\n                                                        field=\"label\"\r\n                                                        // columnMenu={ColumnMenu}\r\n                                                        title={this.props.intl.formatMessage({ id: \"IDS_FIELDS\" })}\r\n                                                        cell={(row) => (\r\n                                                            <td data-tip={row[\"dataItem\"]['label']} data-for=\"tooltip-grid-wrap\">\r\n                                                                {row[\"dataItem\"]['label']}\r\n                                                            </td>\r\n                                                        )}\r\n                                                    />\r\n                                                    {this.state.extractedColumnList.map(column =>\r\n                                                        <GridColumn\r\n                                                            field={column.field}\r\n                                                            title={this.props.intl.formatMessage({ id: column.title })}\r\n                                                            headerClassName=\"text-center\"\r\n                                                            cell={(row) => (\r\n                                                                <td style={{ textAlign: \"center\" }} data-tip={this.props.intl.formatMessage({ id: column.title })} data-for=\"tooltip-grid-wrap\">\r\n                                                                    <CustomSwitch type=\"switch\" id={row[\"dataItem\"][column.field]}\r\n                                                                        onChange={(event) => this.props.onChangeToggle(event, row[\"dataItem\"], column.field, row.dataIndex, this.state.selectedScreen.formcode)}\r\n                                                                        checked={row[\"dataItem\"][column.field] || false}\r\n                                                                        name={row[\"dataItem\"][\"label\"] + \"_\" + row.dataIndex + \"_\" + row.columnIndex} />\r\n                                                                </td>)}\r\n                                                        />\r\n                                                    )}\r\n\r\n                                                </Grid>\r\n                                            </>\r\n                                        </LocalizationProvider>\r\n                                    </AtTableWrap>\r\n                                    <ReactTooltip />\r\n                                </PerfectScrollbar>\r\n                            </TabPane>\r\n                        )}\r\n                    </Tabs>\r\n                </AtTabs>\r\n            </>\r\n        );\r\n    }\r\n}\r\nexport default injectIntl(ConfigureScreenFields)"]},"metadata":{},"sourceType":"module"}